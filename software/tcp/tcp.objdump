
tcp.elf:     file format elf32-littlenios2
tcp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00012298 memsz 0x00012298 flags r-x
    LOAD off    0x000132b8 vaddr 0x000922b8 paddr 0x00094210 align 2**12
         filesz 0x00001f58 memsz 0x00001f58 flags rw-
    LOAD off    0x00016168 vaddr 0x00096168 paddr 0x00096168 align 2**12
         filesz 0x00000000 memsz 0x00000598 flags rw-
    LOAD off    0x00016000 vaddr 0x00100000 paddr 0x00096700 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011958  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000071c  00091b9c  00091b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f58  000922b8  00094210  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000598  00096168  00096168  00016168  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  00096700  00096700  00016080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  00096700  00016000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  00016080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f80  00000000  00000000  000160a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026445  00000000  00000000  00017028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009a72  00000000  00000000  0003d46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf3f  00000000  00000000  00046edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002614  00000000  00000000  00052e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e95  00000000  00000000  00055434  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000179cd  00000000  00000000  000592c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00070c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  00070cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00075eda  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00075edd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075ee2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00075ee3  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00075ee4  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00075eed  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00075ef6  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00075eff  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  00075f0b  2**0
                  CONTENTS, READONLY
 27 .jdi          00004653  00000000  00000000  00075f31  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074e2d  00000000  00000000  0007a584  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00091b9c l    d  .rodata	00000000 .rodata
000922b8 l    d  .rwdata	00000000 .rwdata
00096168 l    d  .bss	00000000 .bss
00096700 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tcp_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 layer.c
00000000 l    df *ABS*	00000000 stack.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081c18 l     F .text	00000008 __fp_unlock
00081c2c l     F .text	0000019c __sinit.part.1
00081dc8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000926b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00091fea l     O .rodata	00000010 zeroes.4404
0008543c l     F .text	000000bc __sbprintf
00091ffa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00085700 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00092f04 l     O .rwdata	00000020 lc_ctype_charset
00092ee4 l     O .rwdata	00000020 lc_message_charset
00092f24 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
00092028 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000887f4 l     F .text	000000fc __sprint_r.part.0
0009215c l     O .rodata	00000010 blanks.4348
0009214c l     O .rodata	00000010 zeroes.4349
00089d80 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008e1e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008e338 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008e364 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e450 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e530 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e61c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0008ea58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000941f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008eca4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008edd8 l     F .text	00000034 alt_dev_reg
00093104 l     O .rwdata	00001060 jtag_uart
00094164 l     O .rwdata	00000030 sgdma_rx
00094194 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f0f8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f304 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0008f93c l     F .text	0000003c alt_get_errno
0009056c l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000906d0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00090968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00090e6c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00090fac l     F .text	0000003c alt_get_errno
00090fe8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000961d4 g     O .bss	00000004 alt_instruction_exception_handler
00088434 g     F .text	00000074 _mprec_log10
00088520 g     F .text	0000008c __any_on
0008a620 g     F .text	00000054 _isatty_r
00092034 g     O .rodata	00000028 __mprec_tinytens
0008e72c g     F .text	0000007c alt_main
000809a0 g     F .text	000002d8 rx_ethernet_isr
00096600 g     O .bss	00000100 alt_irq
00087168 g     F .text	00000060 _lseek_r
00094210 g       *ABS*	00000000 __flash_rwdata_start
00096184 g     O .bss	00000004 conn
0008cd10 g     F .text	00000088 .hidden __eqdf2
00096700 g       *ABS*	00000000 __alt_heap_start
0008305c g     F .text	0000003c printf
0008fa9c g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0008ad30 g     F .text	0000009c _wcrtomb_r
000831c4 g     F .text	0000005c __sseek
00081f68 g     F .text	00000010 __sinit
0008abd8 g     F .text	00000140 __swbuf_r
00081494 g     F .text	000000b4 recv
00080f94 g     F .text	0000021c connect
0008708c g     F .text	0000007c _setlocale_r
00081dd0 g     F .text	00000068 __sfmoreglue
0008e7cc g     F .text	00000024 __malloc_unlock
000901b4 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
0008162c g     F .text	00000070 recDisconnect
00082da8 g     F .text	0000015c memmove
00081f50 g     F .text	00000018 _cleanup
0009616c g     O .bss	00000004 in
000875b0 g     F .text	000000a8 _Balloc
00096188 g     O .bss	00000004 timer
0008cd98 g     F .text	000000dc .hidden __gtdf2
000913a4 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
0008fd04 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008a108 g     F .text	0000005c _fstat_r
000961ac g     O .bss	00000004 errno
00083140 g     F .text	00000008 __seofread
000961c0 g     O .bss	00000004 alt_argv
0009c1c4 g       *ABS*	00000000 _gp
00092f84 g     O .rwdata	00000180 alt_fd_list
00090b08 g     F .text	00000090 alt_find_dev
00087468 g     F .text	00000148 memcpy
00081c20 g     F .text	0000000c _cleanup_r
0008dffc g     F .text	000000dc .hidden __floatsidf
00090f30 g     F .text	0000007c alt_io_redirect
0008ce74 g     F .text	000000f4 .hidden __ltdf2
00091b9c g       *ABS*	00000000 __DTOR_END__
00091604 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0008860c g     F .text	00000074 __fpclassifyd
00088390 g     F .text	000000a4 __ratio
00089d64 g     F .text	0000001c __vfiprintf_internal
0008fdfc g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0008f4fc g     F .text	0000021c altera_avalon_jtag_uart_read
00082574 g     F .text	00000014 malloc
0008302c g     F .text	00000030 _printf_r
0008bac0 g     F .text	00000064 .hidden __udivsi3
000941c4 g     O .rwdata	00000004 tse
0008e48c g     F .text	000000a4 isatty
00092084 g     O .rodata	000000c8 __mprec_tens
00087108 g     F .text	0000000c __locale_charset
00091574 g     F .text	00000090 alt_icache_flush
000961a8 g     O .bss	00000004 __malloc_top_pad
000941d8 g     O .rwdata	00000004 __mb_cur_max
00087138 g     F .text	0000000c _localeconv_r
0008a164 g     F .text	000004bc __sfvwrite_r
000879bc g     F .text	0000003c __i2b
0008ff34 g     F .text	0000005c alt_avalon_sgdma_stop
00083098 g     F .text	00000054 _sbrk_r
000885ac g     F .text	00000060 _read_r
000908f0 g     F .text	00000078 alt_dcache_flush
000941f0 g     O .rwdata	00000004 alt_max_fd
00086f88 g     F .text	000000f0 _fclose_r
00081be8 g     F .text	00000030 fflush
000961a4 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
0008bb7c g     F .text	000008ac .hidden __adddf3
0009618c g     O .bss	00000004 sentPacket
00088138 g     F .text	0000010c __b2d
0008b490 g     F .text	00000538 .hidden __umoddi3
0008e658 g     F .text	000000d4 lseek
000941c8 g     O .rwdata	00000004 _global_impure_ptr
0008a674 g     F .text	00000564 _realloc_r
00096700 g       *ABS*	00000000 __bss_end
00090d7c g     F .text	000000f0 alt_iic_isr_register
0008f978 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0009129c g     F .text	00000108 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
0008af18 g     F .text	00000578 .hidden __udivdi3
000811b0 g     F .text	00000170 send
0008a064 g     F .text	00000024 _fputwc_r
0009205c g     O .rodata	00000028 __mprec_bigtens
000877a0 g     F .text	00000104 __s2b
0008e0d8 g     F .text	000000a8 .hidden __floatunsidf
00087e78 g     F .text	00000060 __mcmp
00081f88 g     F .text	00000018 __fp_lock_all
00090d30 g     F .text	0000004c alt_ic_irq_enabled
00091200 g     F .text	0000009c alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
000961c8 g     O .bss	00000004 alt_irq_active
000922b8 g     O .rwdata	00000400 tx_frame
000800fc g     F .exceptions	000000d4 alt_irq_handler
00092f5c g     O .rwdata	00000028 alt_dev_null
00081320 g     F .text	00000174 accept
0008ff90 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
00096190 g     O .bss	00000004 isConnected
0008e2f0 g     F .text	00000048 alt_dcache_flush_all
000878a4 g     F .text	00000068 __hi0bits
0008df7c g     F .text	00000080 .hidden __fixdfsi
00100040 g     O .descriptor_memory	00000020 rx_descriptor
00094210 g       *ABS*	00000000 __ram_rwdata_end
000941e8 g     O .rwdata	00000008 alt_dev_list
0008ece0 g     F .text	000000f8 write
000900d4 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00091768 g     F .text	000000a0 _putc_r
000922b8 g       *ABS*	00000000 __ram_rodata_end
0008e3a0 g     F .text	000000b0 fstat
0008ce74 g     F .text	000000f4 .hidden __ledf2
00087bf0 g     F .text	00000140 __pow5mult
00088908 g     F .text	0000145c ___vfiprintf_internal_r
000961b8 g     O .bss	00000004 __nlocale_changed
0008bb24 g     F .text	00000058 .hidden __umodsi3
0008fd7c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0008fe88 g     F .text	00000054 alt_avalon_sgdma_register_callback
00096700 g       *ABS*	00000000 end
00081548 g     F .text	000000e4 disconnect
0008f038 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00091b9c g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00090154 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00090748 g     F .text	0000007c alt_avalon_timer_sc_init
0008e180 g     F .text	00000064 .hidden __clzsi2
0008f718 g     F .text	00000224 altera_avalon_jtag_uart_write
0008fbac g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
00081f78 g     F .text	00000004 __sfp_lock_acquire
00087384 g     F .text	000000e4 memchr
00083228 g     F .text	000021f8 ___vfprintf_internal_r
0008fca4 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
000820dc g     F .text	00000310 _free_r
0008e7f0 g     F .text	0000022c alt_printf
00087114 g     F .text	00000010 __locale_mb_cur_max
000919e8 g     F .text	00000180 __call_exitprocs
000961b4 g     O .bss	00000004 __mlocale_changed
000941d0 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
000961cc g     O .bss	00000004 _alt_tick_rate
00096174 g     O .bss	00000004 sgdma_tx_dev
0008fff4 g     F .text	00000054 alt_avalon_sgdma_open
00087d30 g     F .text	00000148 __lshift
000961d0 g     O .bss	00000004 _alt_nticks
0008ea94 g     F .text	000000fc read
0008ee44 g     F .text	00000090 alt_sys_init
00096170 g     O .bss	00000004 transmissionStatus
000918d0 g     F .text	00000118 __register_exitproc
00096194 g     O .bss	00000005 buffer
000879f8 g     F .text	000001f8 __multiply
0008f3a4 g     F .text	00000068 altera_avalon_jtag_uart_close
000922b8 g       *ABS*	00000000 __ram_rwdata_start
00091b9c g       *ABS*	00000000 __ram_rodata_start
000965d8 g     O .bss	00000028 __malloc_current_mallinfo
00088244 g     F .text	0000014c __d2b
0008eed4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000914d0 g     F .text	000000a4 alt_get_fd
000856ac g     F .text	00000054 _close_r
000916ec g     F .text	0000007c memcmp
0008ef94 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00096700 g       *ABS*	00000000 __alt_stack_base
0008efe4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00085558 g     F .text	00000154 __swsetup_r
0008c428 g     F .text	000008e8 .hidden __divdf3
00081e38 g     F .text	00000118 __sfp
000884a8 g     F .text	00000078 __copybits
00092adc g     O .rwdata	00000408 __malloc_av_
00081f84 g     F .text	00000004 __sinit_lock_release
0008cf68 g     F .text	00000718 .hidden __muldf3
000830ec g     F .text	00000054 __sread
000913c8 g     F .text	00000108 alt_find_file
000909a4 g     F .text	000000a4 alt_dev_llist_insert
0008e7a8 g     F .text	00000024 __malloc_lock
0008ebf4 g     F .text	000000b0 sbrk
0008fedc g     F .text	00000058 alt_avalon_sgdma_start
00081b8c g     F .text	0000005c _fflush_r
00089e3c g     F .text	000000c4 _calloc_r
00096168 g       *ABS*	00000000 __bss_start
00082f04 g     F .text	00000128 memset
0008169c g     F .text	000002d4 main
000961c4 g     O .bss	00000004 alt_envp
000961a0 g     O .bss	00000004 __malloc_max_total_mem
0008ef34 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008ad18 g     F .text	00000018 __swbuf
000941fc g     O .rwdata	00000008 alt_sgdma_list
00083220 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
00087078 g     F .text	00000014 fclose
00085900 g     F .text	00001688 _dtoa_r
0008259c g     F .text	0000080c _malloc_r
0008ae8c g     F .text	00000030 __ascii_wctomb
000941f4 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
000961d8 g     O .bss	00000400 rx_frame
000823ec g     F .text	000000c4 _fwalk
00091808 g     F .text	000000c8 putc
0008b9c8 g     F .text	00000084 .hidden __divsi3
00081fb8 g     F .text	00000124 _malloc_trim_r
00091b9c g       *ABS*	00000000 __CTOR_END__
0009617c g     O .bss	00000004 seqNumber
00088680 g     F .text	000000dc strcmp
00080290 g     F .text	00000418 transmit
00091b9c g       *ABS*	00000000 __flash_rodata_start
00091b9c g       *ABS*	00000000 __DTOR_LIST__
00096168 g     O .bss	00000004 count
0008cd10 g     F .text	00000088 .hidden __nedf2
0008ee0c g     F .text	00000038 alt_irq_init
0008eb90 g     F .text	00000064 alt_release_fd
0009216c g     O .rodata	00000100 .hidden __clz_tab
000961b0 g     O .bss	00000004 _PathLocale
000916a0 g     F .text	00000014 atexit
000854f8 g     F .text	00000060 _write_r
00087144 g     F .text	00000018 setlocale
00096180 g     O .bss	00000004 ackNumber
000941cc g     O .rwdata	00000004 _impure_ptr
000961bc g     O .bss	00000004 alt_argc
000806a8 g     F .text	000002f8 receive
00081970 g     F .text	0000021c __sflush_r
00090aa8 g     F .text	00000060 _do_dtors
00087130 g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
000880d4 g     F .text	00000064 __ulp
00081fa0 g     F .text	00000018 __fp_unlock_all
000941e0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008715c g     F .text	0000000c localeconv
00090bcc g     F .text	00000050 alt_ic_isr_register
00094210 g       *ABS*	00000000 _edata
00096700 g       *ABS*	00000000 _end
00089f00 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f40c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00080c78 g     F .text	0000031c tx_ethernet_isr
00090ca4 g     F .text	0000008c alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
00090048 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
00083148 g     F .text	0000007c __swrite
000941d4 g     O .rwdata	00000004 __malloc_trim_threshold
00087124 g     F .text	0000000c __locale_msgcharset
000916b4 g     F .text	00000038 exit
000824b0 g     F .text	000000c4 _fwalk_reent
00087ed8 g     F .text	000001fc __mdiff
0008ba4c g     F .text	00000074 .hidden __modsi3
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00081f7c g     F .text	00000004 __sfp_lock_release
00096178 g     O .bss	00000004 sgdma_rx_dev
00091b68 g     F .text	00000034 _exit
000907c4 g     F .text	0000012c alt_alarm_start
000871c8 g     F .text	000001bc __smakebuf_r
0008875c g     F .text	00000098 strlen
000910ac g     F .text	00000154 open
0008cd98 g     F .text	000000dc .hidden __gedf2
0008ea1c g     F .text	0000003c alt_putchar
000941dc g     O .rwdata	00000004 __wctomb
000888f0 g     F .text	00000018 __sprint_r
00090b98 g     F .text	00000034 alt_icache_flush_all
00094204 g     O .rwdata	00000004 alt_priority_mask
00090c1c g     F .text	00000088 alt_ic_irq_enable
00085420 g     F .text	0000001c __vfprintf_internal
0008aebc g     F .text	0000005c _wctomb_r
0008fc20 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0008d680 g     F .text	000008fc .hidden __subdf3
0008790c g     F .text	000000b0 __lo0bits
00094208 g     O .rwdata	00000008 alt_alarm_list
00090a48 g     F .text	00000060 _do_ctors
0008adcc g     F .text	000000c0 wcrtomb
0008e220 g     F .text	000000d0 close
0008e598 g     F .text	00000084 alt_load
00090628 g     F .text	000000a8 alt_avalon_sgdma_init
0008a088 g     F .text	00000080 fputwc
00082588 g     F .text	00000014 free
0009619c g     O .bss	00000004 pack
00081f80 g     F .text	00000004 __sinit_lock_acquire
00087680 g     F .text	00000120 __multadd
00087658 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_main_memory-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10998004 	addi	r2,r2,26112
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10998004 	addi	r2,r2,26112
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a80417 	ldw	r2,-24560(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a80417 	ldw	r2,-24560(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <rx_descriptor_end+0xfff801e8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6b07114 	ori	gp,gp,49604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	10985a14 	ori	r2,r2,24936

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18d9c014 	ori	r3,r3,26368

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <rx_descriptor_end+0xfff80218>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008e5980 	call	8e598 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008e72c0 	call	8e72c <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <rx_descriptor_end+0xfff8022c>

00080290 <transmit>:
alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

int transmissionStatus = 0;

int transmit(int device, struct packet * pack){
   80290:	defff704 	addi	sp,sp,-36
   80294:	dfc00815 	stw	ra,32(sp)
   80298:	df000715 	stw	fp,28(sp)
   8029c:	df000704 	addi	fp,sp,28
   802a0:	e13ffe15 	stw	r4,-8(fp)
   802a4:	e17fff15 	stw	r5,-4(fp)

	//Specify the addresses of the PHY devices to be accessed through MDIO interface
	if(!device){
   802a8:	e0bffe17 	ldw	r2,-8(fp)
   802ac:	1000051e 	bne	r2,zero,802c4 <transmit+0x34>
		*(tse + 0x0F) = 0x10;
   802b0:	d0a00017 	ldw	r2,-32768(gp)
   802b4:	10800f04 	addi	r2,r2,60
   802b8:	00c00404 	movi	r3,16
   802bc:	10c00015 	stw	r3,0(r2)
   802c0:	00000406 	br	802d4 <transmit+0x44>
	}
	else {
		*(tse + 0x0F) = 0x11;
   802c4:	d0a00017 	ldw	r2,-32768(gp)
   802c8:	10800f04 	addi	r2,r2,60
   802cc:	00c00444 	movi	r3,17
   802d0:	10c00015 	stw	r3,0(r2)
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   802d4:	d0a00017 	ldw	r2,-32768(gp)
   802d8:	10c00204 	addi	r3,r2,8
   802dc:	d0a00017 	ldw	r2,-32768(gp)
   802e0:	10800204 	addi	r2,r2,8
   802e4:	11000017 	ldw	r4,0(r2)
   802e8:	00802034 	movhi	r2,128
   802ec:	10808804 	addi	r2,r2,544
   802f0:	2084b03a 	or	r2,r4,r2
   802f4:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));
   802f8:	0001883a 	nop
   802fc:	d0a00017 	ldw	r2,-32768(gp)
   80300:	10800204 	addi	r2,r2,8
   80304:	10c00017 	ldw	r3,0(r2)
   80308:	d0a00017 	ldw	r2,-32768(gp)
   8030c:	10800204 	addi	r2,r2,8
   80310:	11000017 	ldw	r4,0(r2)
   80314:	00802034 	movhi	r2,128
   80318:	10808804 	addi	r2,r2,544
   8031c:	2084b03a 	or	r2,r4,r2
   80320:	18bff61e 	bne	r3,r2,802fc <rx_descriptor_end+0xfff8029c>

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;//tx_section_empty
   80324:	d0a00017 	ldw	r2,-32768(gp)
   80328:	10800904 	addi	r2,r2,36
   8032c:	00c1fc04 	movi	r3,2032
   80330:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 0x03;//tx_almost_full
   80334:	d0a00017 	ldw	r2,-32768(gp)
   80338:	10800e04 	addi	r2,r2,56
   8033c:	00c000c4 	movi	r3,3
   80340:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 0x08;//tx_almost_empty
   80344:	d0a00017 	ldw	r2,-32768(gp)
   80348:	10800d04 	addi	r2,r2,52
   8034c:	00c00204 	movi	r3,8
   80350:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;//rx_section_empty
   80354:	d0a00017 	ldw	r2,-32768(gp)
   80358:	10800704 	addi	r2,r2,28
   8035c:	00c1fc04 	movi	r3,2032
   80360:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 0x08;//rx_almost_full
   80364:	d0a00017 	ldw	r2,-32768(gp)
   80368:	10800c04 	addi	r2,r2,48
   8036c:	00c00204 	movi	r3,8
   80370:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 0x08;//rx_almost_empty
   80374:	d0a00017 	ldw	r2,-32768(gp)
   80378:	10800b04 	addi	r2,r2,44
   8037c:	00c00204 	movi	r3,8
   80380:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0x00;//tx_section_full
   80384:	d0a00017 	ldw	r2,-32768(gp)
   80388:	10800a04 	addi	r2,r2,40
   8038c:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0x00;//rx_section_full
   80390:	d0a00017 	ldw	r2,-32768(gp)
   80394:	10800804 	addi	r2,r2,32
   80398:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	if(!device){
   8039c:	e0bffe17 	ldw	r2,-8(fp)
   803a0:	10000a1e 	bne	r2,zero,803cc <transmit+0x13c>
		*(tse + 0x03) = 0x17231C00;
   803a4:	d0a00017 	ldw	r2,-32768(gp)
   803a8:	10c00304 	addi	r3,r2,12
   803ac:	0085c8f4 	movhi	r2,5923
   803b0:	10870004 	addi	r2,r2,7168
   803b4:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000CB4A;
   803b8:	d0a00017 	ldw	r2,-32768(gp)
   803bc:	10800404 	addi	r2,r2,16
   803c0:	00f2d294 	movui	r3,52042
   803c4:	10c00015 	stw	r3,0(r2)
   803c8:	00000906 	br	803f0 <transmit+0x160>
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
   803cc:	d0a00017 	ldw	r2,-32768(gp)
   803d0:	10c00304 	addi	r3,r2,12
   803d4:	00a4c2f4 	movhi	r2,37643
   803d8:	1085b204 	addi	r2,r2,5832
   803dc:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000DA67;
   803e0:	d0a00017 	ldw	r2,-32768(gp)
   803e4:	10800404 	addi	r2,r2,16
   803e8:	00f699d4 	movui	r3,55911
   803ec:	10c00015 	stw	r3,0(r2)
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
   803f0:	d0a00017 	ldw	r2,-32768(gp)
   803f4:	10800504 	addi	r2,r2,20
   803f8:	00c17b84 	movi	r3,1518
   803fc:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;//tx_ipg_length
   80400:	d0a00017 	ldw	r2,-32768(gp)
   80404:	10801704 	addi	r2,r2,92
   80408:	00c00304 	movi	r3,12
   8040c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;//pause_quanta
   80410:	d0a00017 	ldw	r2,-32768(gp)
   80414:	10800604 	addi	r2,r2,24
   80418:	00ffffd4 	movui	r3,65535
   8041c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;//config register
   80420:	d0a00017 	ldw	r2,-32768(gp)
   80424:	10c00204 	addi	r3,r2,8
   80428:	00802034 	movhi	r2,128
   8042c:	10808804 	addi	r2,r2,544
   80430:	18800015 	stw	r2,0(r3)

	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   80434:	d0a00017 	ldw	r2,-32768(gp)
   80438:	10c00204 	addi	r3,r2,8
   8043c:	00802034 	movhi	r2,128
   80440:	10888804 	addi	r2,r2,8736
   80444:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( 0x00800220 ) ) alt_printf("Setting the reset");
   80448:	00000306 	br	80458 <transmit+0x1c8>
   8044c:	01000274 	movhi	r4,9
   80450:	2106e704 	addi	r4,r4,7068
   80454:	008e7f00 	call	8e7f0 <alt_printf>
   80458:	d0a00017 	ldw	r2,-32768(gp)
   8045c:	10800204 	addi	r2,r2,8
   80460:	10c00017 	ldw	r3,0(r2)
   80464:	00802034 	movhi	r2,128
   80468:	10808804 	addi	r2,r2,544
   8046c:	18bff71e 	bne	r3,r2,8044c <rx_descriptor_end+0xfff803ec>

	//Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0000023B;
   80470:	d0a00017 	ldw	r2,-32768(gp)
   80474:	10800204 	addi	r2,r2,8
   80478:	d0e00017 	ldw	r3,-32768(gp)
   8047c:	18c00204 	addi	r3,r3,8
   80480:	18c00017 	ldw	r3,0(r3)
   80484:	18c08ed4 	ori	r3,r3,571
   80488:	10c00015 	stw	r3,0(r2)
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0000023B ) );
   8048c:	0001883a 	nop
   80490:	d0a00017 	ldw	r2,-32768(gp)
   80494:	10800204 	addi	r2,r2,8
   80498:	10c00017 	ldw	r3,0(r2)
   8049c:	d0a00017 	ldw	r2,-32768(gp)
   804a0:	10800204 	addi	r2,r2,8
   804a4:	10800017 	ldw	r2,0(r2)
   804a8:	10808ed4 	ori	r2,r2,571
   804ac:	18bff81e 	bne	r3,r2,80490 <rx_descriptor_end+0xfff80430>

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   804b0:	01000274 	movhi	r4,9
   804b4:	2106ec04 	addi	r4,r4,7088
   804b8:	008fff40 	call	8fff4 <alt_avalon_sgdma_open>
   804bc:	d0a7ec15 	stw	r2,-24656(gp)
	if (sgdma_tx_dev == NULL) {
   804c0:	d0a7ec17 	ldw	r2,-24656(gp)
   804c4:	1000051e 	bne	r2,zero,804dc <transmit+0x24c>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   804c8:	01000274 	movhi	r4,9
   804cc:	2106f004 	addi	r4,r4,7104
   804d0:	008e7f00 	call	8e7f0 <alt_printf>
		return -1;
   804d4:	00bfffc4 	movi	r2,-1
   804d8:	00006e06 	br	80694 <transmit+0x404>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   804dc:	01000274 	movhi	r4,9
   804e0:	2106ff04 	addi	r4,r4,7164
   804e4:	008e7f00 	call	8e7f0 <alt_printf>

	int i = 17;
   804e8:	00800444 	movi	r2,17
   804ec:	e0bffd15 	stw	r2,-12(fp)

	memmove(tx_frame+16, pack->sourceIP, 4);
   804f0:	00800274 	movhi	r2,9
   804f4:	1088b204 	addi	r2,r2,8904
   804f8:	e0ffff17 	ldw	r3,-4(fp)
   804fc:	01800104 	movi	r6,4
   80500:	180b883a 	mov	r5,r3
   80504:	1009883a 	mov	r4,r2
   80508:	0082da80 	call	82da8 <memmove>
	memmove(tx_frame+20, pack->destIP, 4);
   8050c:	00800274 	movhi	r2,9
   80510:	1088b304 	addi	r2,r2,8908
   80514:	e0ffff17 	ldw	r3,-4(fp)
   80518:	18c00104 	addi	r3,r3,4
   8051c:	01800104 	movi	r6,4
   80520:	180b883a 	mov	r5,r3
   80524:	1009883a 	mov	r4,r2
   80528:	0082da80 	call	82da8 <memmove>
	memmove(tx_frame+24, pack->payload->sourcePort, 2);
   8052c:	00800274 	movhi	r2,9
   80530:	1088b404 	addi	r2,r2,8912
   80534:	e0ffff17 	ldw	r3,-4(fp)
   80538:	18c00217 	ldw	r3,8(r3)
   8053c:	01800084 	movi	r6,2
   80540:	180b883a 	mov	r5,r3
   80544:	1009883a 	mov	r4,r2
   80548:	0082da80 	call	82da8 <memmove>
	memmove(tx_frame+26, pack->payload->destPort, 2);
   8054c:	00800274 	movhi	r2,9
   80550:	1088b484 	addi	r2,r2,8914
   80554:	e0ffff17 	ldw	r3,-4(fp)
   80558:	18c00217 	ldw	r3,8(r3)
   8055c:	18c00084 	addi	r3,r3,2
   80560:	01800084 	movi	r6,2
   80564:	180b883a 	mov	r5,r3
   80568:	1009883a 	mov	r4,r2
   8056c:	0082da80 	call	82da8 <memmove>
	memmove(tx_frame+28, pack->payload->syn, 1);
   80570:	00800274 	movhi	r2,9
   80574:	1088b504 	addi	r2,r2,8916
   80578:	e0ffff17 	ldw	r3,-4(fp)
   8057c:	18c00217 	ldw	r3,8(r3)
   80580:	18c00204 	addi	r3,r3,8
   80584:	18c00003 	ldbu	r3,0(r3)
   80588:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+29, pack->payload->fin, 1);
   8058c:	00800274 	movhi	r2,9
   80590:	1088b544 	addi	r2,r2,8917
   80594:	e0ffff17 	ldw	r3,-4(fp)
   80598:	18c00217 	ldw	r3,8(r3)
   8059c:	18c00284 	addi	r3,r3,10
   805a0:	18c00003 	ldbu	r3,0(r3)
   805a4:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+30, pack->payload->seqNum, 1);
   805a8:	00800274 	movhi	r2,9
   805ac:	1088b584 	addi	r2,r2,8918
   805b0:	e0ffff17 	ldw	r3,-4(fp)
   805b4:	18c00217 	ldw	r3,8(r3)
   805b8:	18c00104 	addi	r3,r3,4
   805bc:	18c00003 	ldbu	r3,0(r3)
   805c0:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+31, pack->payload->ackNum, 1);
   805c4:	00800274 	movhi	r2,9
   805c8:	1088b5c4 	addi	r2,r2,8919
   805cc:	e0ffff17 	ldw	r3,-4(fp)
   805d0:	18c00217 	ldw	r3,8(r3)
   805d4:	18c00184 	addi	r3,r3,6
   805d8:	18c00003 	ldbu	r3,0(r3)
   805dc:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+32, pack->payload->data, 1);
   805e0:	00800274 	movhi	r2,9
   805e4:	1088b604 	addi	r2,r2,8920
   805e8:	e0ffff17 	ldw	r3,-4(fp)
   805ec:	18c00217 	ldw	r3,8(r3)
   805f0:	18c00304 	addi	r3,r3,12
   805f4:	18c00003 	ldbu	r3,0(r3)
   805f8:	10c00005 	stb	r3,0(r2)
	memset(tx_frame+33, 0, 28);
   805fc:	00800274 	movhi	r2,9
   80600:	1088b644 	addi	r2,r2,8921
   80604:	01800704 	movi	r6,28
   80608:	000b883a 	mov	r5,zero
   8060c:	1009883a 	mov	r4,r2
   80610:	0082f040 	call	82f04 <memset>

	// Set interrupts for the sgdma transmit device
	alt_avalon_sgdma_register_callback(sgdma_tx_dev, (alt_avalon_sgdma_callback) tx_ethernet_isr, 0x00000014, NULL );
   80614:	d0a7ec17 	ldw	r2,-24656(gp)
   80618:	000f883a 	mov	r7,zero
   8061c:	01800504 	movi	r6,20
   80620:	01400234 	movhi	r5,8
   80624:	29431e04 	addi	r5,r5,3192
   80628:	1009883a 	mov	r4,r2
   8062c:	008fe880 	call	8fe88 <alt_avalon_sgdma_register_callback>

	// Create sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0);
   80630:	d8000315 	stw	zero,12(sp)
   80634:	00800044 	movi	r2,1
   80638:	d8800215 	stw	r2,8(sp)
   8063c:	00800044 	movi	r2,1
   80640:	d8800115 	stw	r2,4(sp)
   80644:	d8000015 	stw	zero,0(sp)
   80648:	01c00f84 	movi	r7,62
   8064c:	01800274 	movhi	r6,9
   80650:	3188ae04 	addi	r6,r6,8888
   80654:	01400434 	movhi	r5,16
   80658:	29400804 	addi	r5,r5,32
   8065c:	01000434 	movhi	r4,16
   80660:	21000004 	addi	r4,r4,0
   80664:	008fd7c0 	call	8fd7c <alt_avalon_sgdma_construct_mem_to_stream_desc>

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);
   80668:	d0a7ec17 	ldw	r2,-24656(gp)
   8066c:	01400434 	movhi	r5,16
   80670:	29400004 	addi	r5,r5,0
   80674:	1009883a 	mov	r4,r2
   80678:	008f9780 	call	8f978 <alt_avalon_sgdma_do_async_transfer>

	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   8067c:	0001883a 	nop
   80680:	01000434 	movhi	r4,16
   80684:	21000004 	addi	r4,r4,0
   80688:	008ff900 	call	8ff90 <alt_avalon_sgdma_check_descriptor_status>
   8068c:	103ffc1e 	bne	r2,zero,80680 <rx_descriptor_end+0xfff80620>

	return transmissionStatus;
   80690:	d0a7eb17 	ldw	r2,-24660(gp)
}
   80694:	e037883a 	mov	sp,fp
   80698:	dfc00117 	ldw	ra,4(sp)
   8069c:	df000017 	ldw	fp,0(sp)
   806a0:	dec00204 	addi	sp,sp,8
   806a4:	f800283a 	ret

000806a8 <receive>:


/********************************************************************************
 * This program demonstrates use of the Ethernet in the DE2i-150 board.
 ********************************************************************************/
char * receive(int device){
   806a8:	defffc04 	addi	sp,sp,-16
   806ac:	dfc00315 	stw	ra,12(sp)
   806b0:	df000215 	stw	fp,8(sp)
   806b4:	df000204 	addi	fp,sp,8
   806b8:	e13fff15 	stw	r4,-4(fp)

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   806bc:	01000274 	movhi	r4,9
   806c0:	21070a04 	addi	r4,r4,7208
   806c4:	008fff40 	call	8fff4 <alt_avalon_sgdma_open>
   806c8:	d0a7ed15 	stw	r2,-24652(gp)
	if (sgdma_rx_dev == NULL) {
   806cc:	d0a7ed17 	ldw	r2,-24652(gp)
   806d0:	1000041e 	bne	r2,zero,806e4 <receive+0x3c>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   806d4:	01000274 	movhi	r4,9
   806d8:	21070e04 	addi	r4,r4,7224
   806dc:	008e7f00 	call	8e7f0 <alt_printf>
   806e0:	00000306 	br	806f0 <receive+0x48>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   806e4:	01000274 	movhi	r4,9
   806e8:	21071d04 	addi	r4,r4,7284
   806ec:	008e7f00 	call	8e7f0 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback(sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   806f0:	d0a7ed17 	ldw	r2,-24652(gp)
   806f4:	000f883a 	mov	r7,zero
   806f8:	01800504 	movi	r6,20
   806fc:	01400234 	movhi	r5,8
   80700:	29426804 	addi	r5,r5,2464
   80704:	1009883a 	mov	r4,r2
   80708:	008fe880 	call	8fe88 <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   8070c:	d8000015 	stw	zero,0(sp)
   80710:	000f883a 	mov	r7,zero
   80714:	01800274 	movhi	r6,9
   80718:	31987604 	addi	r6,r6,25048
   8071c:	01400434 	movhi	r5,16
   80720:	29401804 	addi	r5,r5,96
   80724:	01000434 	movhi	r4,16
   80728:	21001004 	addi	r4,r4,64
   8072c:	008fca40 	call	8fca4 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor );
   80730:	d0a7ed17 	ldw	r2,-24652(gp)
   80734:	01400434 	movhi	r5,16
   80738:	29401004 	addi	r5,r5,64
   8073c:	1009883a 	mov	r4,r2
   80740:	008f9780 	call	8f978 <alt_avalon_sgdma_do_async_transfer>

	//Specify the addresses of the PHY devices to be accessed through MDIO interface

	if(!device){
   80744:	e0bfff17 	ldw	r2,-4(fp)
   80748:	1000051e 	bne	r2,zero,80760 <receive+0xb8>
		*(tse + 0x0F) = 0x10;
   8074c:	d0a00017 	ldw	r2,-32768(gp)
   80750:	10800f04 	addi	r2,r2,60
   80754:	00c00404 	movi	r3,16
   80758:	10c00015 	stw	r3,0(r2)
   8075c:	00000406 	br	80770 <receive+0xc8>
	}
	else {
		*(tse + 0x0F) = 0x11;
   80760:	d0a00017 	ldw	r2,-32768(gp)
   80764:	10800f04 	addi	r2,r2,60
   80768:	00c00444 	movi	r3,17
   8076c:	10c00015 	stw	r3,0(r2)
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   80770:	d0a00017 	ldw	r2,-32768(gp)
   80774:	10c00204 	addi	r3,r2,8
   80778:	d0a00017 	ldw	r2,-32768(gp)
   8077c:	10800204 	addi	r2,r2,8
   80780:	11000017 	ldw	r4,0(r2)
   80784:	00802034 	movhi	r2,128
   80788:	10808804 	addi	r2,r2,544
   8078c:	2084b03a 	or	r2,r4,r2
   80790:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));
   80794:	0001883a 	nop
   80798:	d0a00017 	ldw	r2,-32768(gp)
   8079c:	10800204 	addi	r2,r2,8
   807a0:	10c00017 	ldw	r3,0(r2)
   807a4:	d0a00017 	ldw	r2,-32768(gp)
   807a8:	10800204 	addi	r2,r2,8
   807ac:	11000017 	ldw	r4,0(r2)
   807b0:	00802034 	movhi	r2,128
   807b4:	10808804 	addi	r2,r2,544
   807b8:	2084b03a 	or	r2,r4,r2
   807bc:	18bff61e 	bne	r3,r2,80798 <rx_descriptor_end+0xfff80738>

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;//tx_section_empty
   807c0:	d0a00017 	ldw	r2,-32768(gp)
   807c4:	10800904 	addi	r2,r2,36
   807c8:	00c1fc04 	movi	r3,2032
   807cc:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 0x03;//tx_almost_full
   807d0:	d0a00017 	ldw	r2,-32768(gp)
   807d4:	10800e04 	addi	r2,r2,56
   807d8:	00c000c4 	movi	r3,3
   807dc:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 0x08;//tx_almost_empty
   807e0:	d0a00017 	ldw	r2,-32768(gp)
   807e4:	10800d04 	addi	r2,r2,52
   807e8:	00c00204 	movi	r3,8
   807ec:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;//rx_section_empty
   807f0:	d0a00017 	ldw	r2,-32768(gp)
   807f4:	10800704 	addi	r2,r2,28
   807f8:	00c1fc04 	movi	r3,2032
   807fc:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 0x08;//rx_almost_full
   80800:	d0a00017 	ldw	r2,-32768(gp)
   80804:	10800c04 	addi	r2,r2,48
   80808:	00c00204 	movi	r3,8
   8080c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 0x08;//rx_almost_empty
   80810:	d0a00017 	ldw	r2,-32768(gp)
   80814:	10800b04 	addi	r2,r2,44
   80818:	00c00204 	movi	r3,8
   8081c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0x00;//tx_section_full
   80820:	d0a00017 	ldw	r2,-32768(gp)
   80824:	10800a04 	addi	r2,r2,40
   80828:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0x00;//rx_section_full
   8082c:	d0a00017 	ldw	r2,-32768(gp)
   80830:	10800804 	addi	r2,r2,32
   80834:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	if(!device){
   80838:	e0bfff17 	ldw	r2,-4(fp)
   8083c:	10000a1e 	bne	r2,zero,80868 <receive+0x1c0>
		*(tse + 0x03) = 0x17231C00;
   80840:	d0a00017 	ldw	r2,-32768(gp)
   80844:	10c00304 	addi	r3,r2,12
   80848:	0085c8f4 	movhi	r2,5923
   8084c:	10870004 	addi	r2,r2,7168
   80850:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000CB4A;
   80854:	d0a00017 	ldw	r2,-32768(gp)
   80858:	10800404 	addi	r2,r2,16
   8085c:	00f2d294 	movui	r3,52042
   80860:	10c00015 	stw	r3,0(r2)
   80864:	00000906 	br	8088c <receive+0x1e4>
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
   80868:	d0a00017 	ldw	r2,-32768(gp)
   8086c:	10c00304 	addi	r3,r2,12
   80870:	00a4c2f4 	movhi	r2,37643
   80874:	1085b204 	addi	r2,r2,5832
   80878:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000DA67;
   8087c:	d0a00017 	ldw	r2,-32768(gp)
   80880:	10800404 	addi	r2,r2,16
   80884:	00f699d4 	movui	r3,55911
   80888:	10c00015 	stw	r3,0(r2)
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
   8088c:	d0a00017 	ldw	r2,-32768(gp)
   80890:	10800504 	addi	r2,r2,20
   80894:	00c17b84 	movi	r3,1518
   80898:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;//tx_ipg_length
   8089c:	d0a00017 	ldw	r2,-32768(gp)
   808a0:	10801704 	addi	r2,r2,92
   808a4:	00c00304 	movi	r3,12
   808a8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;//pause_quanta
   808ac:	d0a00017 	ldw	r2,-32768(gp)
   808b0:	10800604 	addi	r2,r2,24
   808b4:	00ffffd4 	movui	r3,65535
   808b8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;//config register
   808bc:	d0a00017 	ldw	r2,-32768(gp)
   808c0:	10c00204 	addi	r3,r2,8
   808c4:	00802034 	movhi	r2,128
   808c8:	10808804 	addi	r2,r2,544
   808cc:	18800015 	stw	r2,0(r3)


	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   808d0:	d0a00017 	ldw	r2,-32768(gp)
   808d4:	10c00204 	addi	r3,r2,8
   808d8:	00802034 	movhi	r2,128
   808dc:	10888804 	addi	r2,r2,8736
   808e0:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( 0x00800220 ) ) alt_printf("Setting the reset");
   808e4:	00000306 	br	808f4 <receive+0x24c>
   808e8:	01000274 	movhi	r4,9
   808ec:	2106e704 	addi	r4,r4,7068
   808f0:	008e7f00 	call	8e7f0 <alt_printf>
   808f4:	d0a00017 	ldw	r2,-32768(gp)
   808f8:	10800204 	addi	r2,r2,8
   808fc:	10c00017 	ldw	r3,0(r2)
   80900:	00802034 	movhi	r2,128
   80904:	10808804 	addi	r2,r2,544
   80908:	18bff71e 	bne	r3,r2,808e8 <rx_descriptor_end+0xfff80888>

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;//3rd bit changed to 0/8
   8090c:	d0a00017 	ldw	r2,-32768(gp)
   80910:	10c00204 	addi	r3,r2,8
   80914:	d0a00017 	ldw	r2,-32768(gp)
   80918:	10800204 	addi	r2,r2,8
   8091c:	11000017 	ldw	r4,0(r2)
   80920:	00802034 	movhi	r2,128
   80924:	10808ec4 	addi	r2,r2,571
   80928:	2084b03a 	or	r2,r4,r2
   8092c:	18800015 	stw	r2,0(r3)

	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) );
   80930:	0001883a 	nop
   80934:	d0a00017 	ldw	r2,-32768(gp)
   80938:	10800204 	addi	r2,r2,8
   8093c:	10c00017 	ldw	r3,0(r2)
   80940:	d0a00017 	ldw	r2,-32768(gp)
   80944:	10800204 	addi	r2,r2,8
   80948:	11000017 	ldw	r4,0(r2)
   8094c:	00802034 	movhi	r2,128
   80950:	10808ec4 	addi	r2,r2,571
   80954:	2084b03a 	or	r2,r4,r2
   80958:	18bff61e 	bne	r3,r2,80934 <rx_descriptor_end+0xfff808d4>


	while (1) {
		in=IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   8095c:	00800434 	movhi	r2,16
   80960:	10892804 	addi	r2,r2,9376
   80964:	10800037 	ldwio	r2,0(r2)
   80968:	d0a7ea15 	stw	r2,-24664(gp)
		if (in == 1){
   8096c:	d0a7ea17 	ldw	r2,-24664(gp)
   80970:	10800058 	cmpnei	r2,r2,1
   80974:	1000051e 	bne	r2,zero,8098c <receive+0x2e4>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01);//turn on or turn off the LED
   80978:	00c00044 	movi	r3,1
   8097c:	00800434 	movhi	r2,16
   80980:	10892c04 	addi	r2,r2,9392
   80984:	10c00035 	stwio	r3,0(r2)
   80988:	003ff406 	br	8095c <rx_descriptor_end+0xfff808fc>
		}
		else{
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   8098c:	0007883a 	mov	r3,zero
   80990:	00800434 	movhi	r2,16
   80994:	10892c04 	addi	r2,r2,9392
   80998:	10c00035 	stwio	r3,0(r2)
		}
	}
   8099c:	003fef06 	br	8095c <rx_descriptor_end+0xfff808fc>

000809a0 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
 ****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   809a0:	defffa04 	addi	sp,sp,-24
   809a4:	dfc00515 	stw	ra,20(sp)
   809a8:	df000415 	stw	fp,16(sp)
   809ac:	df000404 	addi	fp,sp,16
   809b0:	e13fff15 	stw	r4,-4(fp)

	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	if(in == 1){ // check if the switch is on
   809b4:	d0a7ea17 	ldw	r2,-24664(gp)
   809b8:	10800060 	cmpeqi	r2,r2,1
   809bc:	1000a01e 	bne	r2,zero,80c40 <rx_ethernet_isr+0x2a0>
		//alt_printf( "Destination address: %x,%x,%x,%x%x,%x \n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
		//alt_printf( "Source address: %x,%x,%x,%x,%x,%x \n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
	}
	else {
		alt_dcache_flush_all();
   809c0:	008e2f00 	call	8e2f0 <alt_dcache_flush_all>
		alt_printf( "Destination address: %x:%x:%x:%x:%x:%x\n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
   809c4:	00800274 	movhi	r2,9
   809c8:	10987604 	addi	r2,r2,25048
   809cc:	10800083 	ldbu	r2,2(r2)
   809d0:	11403fcc 	andi	r5,r2,255
   809d4:	00800274 	movhi	r2,9
   809d8:	10987604 	addi	r2,r2,25048
   809dc:	108000c3 	ldbu	r2,3(r2)
   809e0:	11803fcc 	andi	r6,r2,255
   809e4:	00800274 	movhi	r2,9
   809e8:	10987604 	addi	r2,r2,25048
   809ec:	10800103 	ldbu	r2,4(r2)
   809f0:	11c03fcc 	andi	r7,r2,255
   809f4:	00800274 	movhi	r2,9
   809f8:	10987604 	addi	r2,r2,25048
   809fc:	10800143 	ldbu	r2,5(r2)
   80a00:	10c03fcc 	andi	r3,r2,255
   80a04:	00800274 	movhi	r2,9
   80a08:	10987604 	addi	r2,r2,25048
   80a0c:	10800183 	ldbu	r2,6(r2)
   80a10:	11003fcc 	andi	r4,r2,255
   80a14:	00800274 	movhi	r2,9
   80a18:	10987604 	addi	r2,r2,25048
   80a1c:	108001c3 	ldbu	r2,7(r2)
   80a20:	10803fcc 	andi	r2,r2,255
   80a24:	d8800215 	stw	r2,8(sp)
   80a28:	d9000115 	stw	r4,4(sp)
   80a2c:	d8c00015 	stw	r3,0(sp)
   80a30:	01000274 	movhi	r4,9
   80a34:	21072804 	addi	r4,r4,7328
   80a38:	008e7f00 	call	8e7f0 <alt_printf>
		alt_printf( "Source address: %x:%x:%x:%x:%x:%x\n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
   80a3c:	00800274 	movhi	r2,9
   80a40:	10987604 	addi	r2,r2,25048
   80a44:	10800203 	ldbu	r2,8(r2)
   80a48:	11403fcc 	andi	r5,r2,255
   80a4c:	00800274 	movhi	r2,9
   80a50:	10987604 	addi	r2,r2,25048
   80a54:	10800243 	ldbu	r2,9(r2)
   80a58:	11803fcc 	andi	r6,r2,255
   80a5c:	00800274 	movhi	r2,9
   80a60:	10987604 	addi	r2,r2,25048
   80a64:	10800283 	ldbu	r2,10(r2)
   80a68:	11c03fcc 	andi	r7,r2,255
   80a6c:	00800274 	movhi	r2,9
   80a70:	10987604 	addi	r2,r2,25048
   80a74:	108002c3 	ldbu	r2,11(r2)
   80a78:	10c03fcc 	andi	r3,r2,255
   80a7c:	00800274 	movhi	r2,9
   80a80:	10987604 	addi	r2,r2,25048
   80a84:	10800303 	ldbu	r2,12(r2)
   80a88:	11003fcc 	andi	r4,r2,255
   80a8c:	00800274 	movhi	r2,9
   80a90:	10987604 	addi	r2,r2,25048
   80a94:	10800343 	ldbu	r2,13(r2)
   80a98:	10803fcc 	andi	r2,r2,255
   80a9c:	d8800215 	stw	r2,8(sp)
   80aa0:	d9000115 	stw	r4,4(sp)
   80aa4:	d8c00015 	stw	r3,0(sp)
   80aa8:	01000274 	movhi	r4,9
   80aac:	21073204 	addi	r4,r4,7368
   80ab0:	008e7f00 	call	8e7f0 <alt_printf>
		alt_printf( "Length: %x%x\nSource IP: %x.%x.%x.%x\n", rx_frame[14], rx_frame[15], rx_frame[16], rx_frame[17],rx_frame[18], rx_frame[19] );
   80ab4:	00800274 	movhi	r2,9
   80ab8:	10987604 	addi	r2,r2,25048
   80abc:	10800383 	ldbu	r2,14(r2)
   80ac0:	11403fcc 	andi	r5,r2,255
   80ac4:	00800274 	movhi	r2,9
   80ac8:	10987604 	addi	r2,r2,25048
   80acc:	108003c3 	ldbu	r2,15(r2)
   80ad0:	11803fcc 	andi	r6,r2,255
   80ad4:	00800274 	movhi	r2,9
   80ad8:	10987604 	addi	r2,r2,25048
   80adc:	10800403 	ldbu	r2,16(r2)
   80ae0:	11c03fcc 	andi	r7,r2,255
   80ae4:	00800274 	movhi	r2,9
   80ae8:	10987604 	addi	r2,r2,25048
   80aec:	10800443 	ldbu	r2,17(r2)
   80af0:	10c03fcc 	andi	r3,r2,255
   80af4:	00800274 	movhi	r2,9
   80af8:	10987604 	addi	r2,r2,25048
   80afc:	10800483 	ldbu	r2,18(r2)
   80b00:	11003fcc 	andi	r4,r2,255
   80b04:	00800274 	movhi	r2,9
   80b08:	10987604 	addi	r2,r2,25048
   80b0c:	108004c3 	ldbu	r2,19(r2)
   80b10:	10803fcc 	andi	r2,r2,255
   80b14:	d8800215 	stw	r2,8(sp)
   80b18:	d9000115 	stw	r4,4(sp)
   80b1c:	d8c00015 	stw	r3,0(sp)
   80b20:	01000274 	movhi	r4,9
   80b24:	21073b04 	addi	r4,r4,7404
   80b28:	008e7f00 	call	8e7f0 <alt_printf>
		alt_printf( "Destination IP: %x.%x.%x.%x\nSource Port: %x:%x\n", rx_frame[20], rx_frame[21], rx_frame[22], rx_frame[23],rx_frame[24], rx_frame[25] );
   80b2c:	00800274 	movhi	r2,9
   80b30:	10987604 	addi	r2,r2,25048
   80b34:	10800503 	ldbu	r2,20(r2)
   80b38:	11403fcc 	andi	r5,r2,255
   80b3c:	00800274 	movhi	r2,9
   80b40:	10987604 	addi	r2,r2,25048
   80b44:	10800543 	ldbu	r2,21(r2)
   80b48:	11803fcc 	andi	r6,r2,255
   80b4c:	00800274 	movhi	r2,9
   80b50:	10987604 	addi	r2,r2,25048
   80b54:	10800583 	ldbu	r2,22(r2)
   80b58:	11c03fcc 	andi	r7,r2,255
   80b5c:	00800274 	movhi	r2,9
   80b60:	10987604 	addi	r2,r2,25048
   80b64:	108005c3 	ldbu	r2,23(r2)
   80b68:	10c03fcc 	andi	r3,r2,255
   80b6c:	00800274 	movhi	r2,9
   80b70:	10987604 	addi	r2,r2,25048
   80b74:	10800603 	ldbu	r2,24(r2)
   80b78:	11003fcc 	andi	r4,r2,255
   80b7c:	00800274 	movhi	r2,9
   80b80:	10987604 	addi	r2,r2,25048
   80b84:	10800643 	ldbu	r2,25(r2)
   80b88:	10803fcc 	andi	r2,r2,255
   80b8c:	d8800215 	stw	r2,8(sp)
   80b90:	d9000115 	stw	r4,4(sp)
   80b94:	d8c00015 	stw	r3,0(sp)
   80b98:	01000274 	movhi	r4,9
   80b9c:	21074504 	addi	r4,r4,7444
   80ba0:	008e7f00 	call	8e7f0 <alt_printf>
		alt_printf( "Destination Port: %x:%x\nSYN: %x\nFIN: %x\nSequence Number: %x\nAck Number: %x\n", rx_frame[26], rx_frame[27], rx_frame[28], rx_frame[29],rx_frame[30], rx_frame[31] );
   80ba4:	00800274 	movhi	r2,9
   80ba8:	10987604 	addi	r2,r2,25048
   80bac:	10800683 	ldbu	r2,26(r2)
   80bb0:	11403fcc 	andi	r5,r2,255
   80bb4:	00800274 	movhi	r2,9
   80bb8:	10987604 	addi	r2,r2,25048
   80bbc:	108006c3 	ldbu	r2,27(r2)
   80bc0:	11803fcc 	andi	r6,r2,255
   80bc4:	00800274 	movhi	r2,9
   80bc8:	10987604 	addi	r2,r2,25048
   80bcc:	10800703 	ldbu	r2,28(r2)
   80bd0:	11c03fcc 	andi	r7,r2,255
   80bd4:	00800274 	movhi	r2,9
   80bd8:	10987604 	addi	r2,r2,25048
   80bdc:	10800743 	ldbu	r2,29(r2)
   80be0:	10c03fcc 	andi	r3,r2,255
   80be4:	00800274 	movhi	r2,9
   80be8:	10987604 	addi	r2,r2,25048
   80bec:	10800783 	ldbu	r2,30(r2)
   80bf0:	11003fcc 	andi	r4,r2,255
   80bf4:	00800274 	movhi	r2,9
   80bf8:	10987604 	addi	r2,r2,25048
   80bfc:	108007c3 	ldbu	r2,31(r2)
   80c00:	10803fcc 	andi	r2,r2,255
   80c04:	d8800215 	stw	r2,8(sp)
   80c08:	d9000115 	stw	r4,4(sp)
   80c0c:	d8c00015 	stw	r3,0(sp)
   80c10:	01000274 	movhi	r4,9
   80c14:	21075104 	addi	r4,r4,7492
   80c18:	008e7f00 	call	8e7f0 <alt_printf>
		alt_printf( "Data: %x\n", rx_frame[32]);
   80c1c:	00800274 	movhi	r2,9
   80c20:	10987604 	addi	r2,r2,25048
   80c24:	10800803 	ldbu	r2,32(r2)
   80c28:	10803fcc 	andi	r2,r2,255
   80c2c:	100b883a 	mov	r5,r2
   80c30:	01000274 	movhi	r4,9
   80c34:	21076404 	addi	r4,r4,7568
   80c38:	008e7f00 	call	8e7f0 <alt_printf>
		alt_dcache_flush_all();
   80c3c:	008e2f00 	call	8e2f0 <alt_dcache_flush_all>
		//alt_printf( "MAC ADDRESS 0: %x \n", *(tse + 0x18) );
		//alt_printf( "Successful frames: %x \n", *(tse + 0x1A) );
		//alt_printf( "Broadcast frames: %x \n", *(tse + 0x26) );
	}
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   80c40:	0001883a 	nop
   80c44:	01000434 	movhi	r4,16
   80c48:	21001004 	addi	r4,r4,64
   80c4c:	008ff900 	call	8ff90 <alt_avalon_sgdma_check_descriptor_status>
   80c50:	103ffc1e 	bne	r2,zero,80c44 <rx_descriptor_end+0xfff80be4>
		;

	count++;
   80c54:	d0a7e917 	ldw	r2,-24668(gp)
   80c58:	10800044 	addi	r2,r2,1
   80c5c:	d0a7e915 	stw	r2,-24668(gp)
	// Create new receive sgdma descriptor
	//alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

	// Set up non-blocking transfer of sgdma receive descriptor
	//alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor);
}
   80c60:	0001883a 	nop
   80c64:	e037883a 	mov	sp,fp
   80c68:	dfc00117 	ldw	ra,4(sp)
   80c6c:	df000017 	ldw	fp,0(sp)
   80c70:	dec00204 	addi	sp,sp,8
   80c74:	f800283a 	ret

00080c78 <tx_ethernet_isr>:

void tx_ethernet_isr (void *context){
   80c78:	defffa04 	addi	sp,sp,-24
   80c7c:	dfc00515 	stw	ra,20(sp)
   80c80:	df000415 	stw	fp,16(sp)
   80c84:	df000404 	addi	fp,sp,16
   80c88:	e13fff15 	stw	r4,-4(fp)

	transmissionStatus = 1;
   80c8c:	00800044 	movi	r2,1
   80c90:	d0a7eb15 	stw	r2,-24660(gp)

	alt_printf("Destination address: %x,%x,%x,%x,%x,%x \n", tx_frame[2], tx_frame[3], tx_frame[4], tx_frame[5],tx_frame[6], tx_frame[7] );
   80c94:	00800274 	movhi	r2,9
   80c98:	1088ae04 	addi	r2,r2,8888
   80c9c:	10800083 	ldbu	r2,2(r2)
   80ca0:	11403fcc 	andi	r5,r2,255
   80ca4:	00800274 	movhi	r2,9
   80ca8:	1088ae04 	addi	r2,r2,8888
   80cac:	108000c3 	ldbu	r2,3(r2)
   80cb0:	11803fcc 	andi	r6,r2,255
   80cb4:	00800274 	movhi	r2,9
   80cb8:	1088ae04 	addi	r2,r2,8888
   80cbc:	10800103 	ldbu	r2,4(r2)
   80cc0:	11c03fcc 	andi	r7,r2,255
   80cc4:	00800274 	movhi	r2,9
   80cc8:	1088ae04 	addi	r2,r2,8888
   80ccc:	10800143 	ldbu	r2,5(r2)
   80cd0:	10c03fcc 	andi	r3,r2,255
   80cd4:	00800274 	movhi	r2,9
   80cd8:	1088ae04 	addi	r2,r2,8888
   80cdc:	10800183 	ldbu	r2,6(r2)
   80ce0:	11003fcc 	andi	r4,r2,255
   80ce4:	00800274 	movhi	r2,9
   80ce8:	1088ae04 	addi	r2,r2,8888
   80cec:	108001c3 	ldbu	r2,7(r2)
   80cf0:	10803fcc 	andi	r2,r2,255
   80cf4:	d8800215 	stw	r2,8(sp)
   80cf8:	d9000115 	stw	r4,4(sp)
   80cfc:	d8c00015 	stw	r3,0(sp)
   80d00:	01000274 	movhi	r4,9
   80d04:	21076704 	addi	r4,r4,7580
   80d08:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Source address: %x,%x,%x,%x,%x,%x\n", tx_frame[8], tx_frame[9], tx_frame[10], tx_frame[11], tx_frame[12], tx_frame[13] );
   80d0c:	00800274 	movhi	r2,9
   80d10:	1088ae04 	addi	r2,r2,8888
   80d14:	10800203 	ldbu	r2,8(r2)
   80d18:	11403fcc 	andi	r5,r2,255
   80d1c:	00800274 	movhi	r2,9
   80d20:	1088ae04 	addi	r2,r2,8888
   80d24:	10800243 	ldbu	r2,9(r2)
   80d28:	11803fcc 	andi	r6,r2,255
   80d2c:	00800274 	movhi	r2,9
   80d30:	1088ae04 	addi	r2,r2,8888
   80d34:	10800283 	ldbu	r2,10(r2)
   80d38:	11c03fcc 	andi	r7,r2,255
   80d3c:	00800274 	movhi	r2,9
   80d40:	1088ae04 	addi	r2,r2,8888
   80d44:	108002c3 	ldbu	r2,11(r2)
   80d48:	10c03fcc 	andi	r3,r2,255
   80d4c:	00800274 	movhi	r2,9
   80d50:	1088ae04 	addi	r2,r2,8888
   80d54:	10800303 	ldbu	r2,12(r2)
   80d58:	11003fcc 	andi	r4,r2,255
   80d5c:	00800274 	movhi	r2,9
   80d60:	1088ae04 	addi	r2,r2,8888
   80d64:	10800343 	ldbu	r2,13(r2)
   80d68:	10803fcc 	andi	r2,r2,255
   80d6c:	d8800215 	stw	r2,8(sp)
   80d70:	d9000115 	stw	r4,4(sp)
   80d74:	d8c00015 	stw	r3,0(sp)
   80d78:	01000274 	movhi	r4,9
   80d7c:	21077204 	addi	r4,r4,7624
   80d80:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Source IP: %x%x%x%x\n", tx_frame[16], tx_frame[17], tx_frame[18], tx_frame[19]);
   80d84:	00800274 	movhi	r2,9
   80d88:	1088ae04 	addi	r2,r2,8888
   80d8c:	10800403 	ldbu	r2,16(r2)
   80d90:	10c03fcc 	andi	r3,r2,255
   80d94:	00800274 	movhi	r2,9
   80d98:	1088ae04 	addi	r2,r2,8888
   80d9c:	10800443 	ldbu	r2,17(r2)
   80da0:	11003fcc 	andi	r4,r2,255
   80da4:	00800274 	movhi	r2,9
   80da8:	1088ae04 	addi	r2,r2,8888
   80dac:	10800483 	ldbu	r2,18(r2)
   80db0:	11403fcc 	andi	r5,r2,255
   80db4:	00800274 	movhi	r2,9
   80db8:	1088ae04 	addi	r2,r2,8888
   80dbc:	108004c3 	ldbu	r2,19(r2)
   80dc0:	10803fcc 	andi	r2,r2,255
   80dc4:	d8800015 	stw	r2,0(sp)
   80dc8:	280f883a 	mov	r7,r5
   80dcc:	200d883a 	mov	r6,r4
   80dd0:	180b883a 	mov	r5,r3
   80dd4:	01000274 	movhi	r4,9
   80dd8:	21077b04 	addi	r4,r4,7660
   80ddc:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Destination IP: %x%x%x%x\n", tx_frame[20], tx_frame[21], tx_frame[22], tx_frame[23]);
   80de0:	00800274 	movhi	r2,9
   80de4:	1088ae04 	addi	r2,r2,8888
   80de8:	10800503 	ldbu	r2,20(r2)
   80dec:	10c03fcc 	andi	r3,r2,255
   80df0:	00800274 	movhi	r2,9
   80df4:	1088ae04 	addi	r2,r2,8888
   80df8:	10800543 	ldbu	r2,21(r2)
   80dfc:	11003fcc 	andi	r4,r2,255
   80e00:	00800274 	movhi	r2,9
   80e04:	1088ae04 	addi	r2,r2,8888
   80e08:	10800583 	ldbu	r2,22(r2)
   80e0c:	11403fcc 	andi	r5,r2,255
   80e10:	00800274 	movhi	r2,9
   80e14:	1088ae04 	addi	r2,r2,8888
   80e18:	108005c3 	ldbu	r2,23(r2)
   80e1c:	10803fcc 	andi	r2,r2,255
   80e20:	d8800015 	stw	r2,0(sp)
   80e24:	280f883a 	mov	r7,r5
   80e28:	200d883a 	mov	r6,r4
   80e2c:	180b883a 	mov	r5,r3
   80e30:	01000274 	movhi	r4,9
   80e34:	21078104 	addi	r4,r4,7684
   80e38:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Source Port: %x%x%\n Destination Port: %x%x%\n ", tx_frame[24], tx_frame[25], tx_frame[26], tx_frame[27]);
   80e3c:	00800274 	movhi	r2,9
   80e40:	1088ae04 	addi	r2,r2,8888
   80e44:	10800603 	ldbu	r2,24(r2)
   80e48:	10c03fcc 	andi	r3,r2,255
   80e4c:	00800274 	movhi	r2,9
   80e50:	1088ae04 	addi	r2,r2,8888
   80e54:	10800643 	ldbu	r2,25(r2)
   80e58:	11003fcc 	andi	r4,r2,255
   80e5c:	00800274 	movhi	r2,9
   80e60:	1088ae04 	addi	r2,r2,8888
   80e64:	10800683 	ldbu	r2,26(r2)
   80e68:	11403fcc 	andi	r5,r2,255
   80e6c:	00800274 	movhi	r2,9
   80e70:	1088ae04 	addi	r2,r2,8888
   80e74:	108006c3 	ldbu	r2,27(r2)
   80e78:	10803fcc 	andi	r2,r2,255
   80e7c:	d8800015 	stw	r2,0(sp)
   80e80:	280f883a 	mov	r7,r5
   80e84:	200d883a 	mov	r6,r4
   80e88:	180b883a 	mov	r5,r3
   80e8c:	01000274 	movhi	r4,9
   80e90:	21078804 	addi	r4,r4,7712
   80e94:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("SYN: %x FIN: %x%\n Seq: %x Ack: %x%\n ", tx_frame[28], tx_frame[29], tx_frame[30], tx_frame[31]);
   80e98:	00800274 	movhi	r2,9
   80e9c:	1088ae04 	addi	r2,r2,8888
   80ea0:	10800703 	ldbu	r2,28(r2)
   80ea4:	10c03fcc 	andi	r3,r2,255
   80ea8:	00800274 	movhi	r2,9
   80eac:	1088ae04 	addi	r2,r2,8888
   80eb0:	10800743 	ldbu	r2,29(r2)
   80eb4:	11003fcc 	andi	r4,r2,255
   80eb8:	00800274 	movhi	r2,9
   80ebc:	1088ae04 	addi	r2,r2,8888
   80ec0:	10800783 	ldbu	r2,30(r2)
   80ec4:	11403fcc 	andi	r5,r2,255
   80ec8:	00800274 	movhi	r2,9
   80ecc:	1088ae04 	addi	r2,r2,8888
   80ed0:	108007c3 	ldbu	r2,31(r2)
   80ed4:	10803fcc 	andi	r2,r2,255
   80ed8:	d8800015 	stw	r2,0(sp)
   80edc:	280f883a 	mov	r7,r5
   80ee0:	200d883a 	mov	r6,r4
   80ee4:	180b883a 	mov	r5,r3
   80ee8:	01000274 	movhi	r4,9
   80eec:	21079404 	addi	r4,r4,7760
   80ef0:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Data: %x%\n ", tx_frame[32]);
   80ef4:	00800274 	movhi	r2,9
   80ef8:	1088ae04 	addi	r2,r2,8888
   80efc:	10800803 	ldbu	r2,32(r2)
   80f00:	10803fcc 	andi	r2,r2,255
   80f04:	100b883a 	mov	r5,r2
   80f08:	01000274 	movhi	r4,9
   80f0c:	21079e04 	addi	r4,r4,7800
   80f10:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Frames Transmitted: %x\n", *(tse + 0x1A) );
   80f14:	d0a00017 	ldw	r2,-32768(gp)
   80f18:	10801a04 	addi	r2,r2,104
   80f1c:	10800017 	ldw	r2,0(r2)
   80f20:	100b883a 	mov	r5,r2
   80f24:	01000274 	movhi	r4,9
   80f28:	2107a104 	addi	r4,r4,7812
   80f2c:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Pause Frames Transmitted: %x \n", *(tse + 0x20));
   80f30:	d0a00017 	ldw	r2,-32768(gp)
   80f34:	10802004 	addi	r2,r2,128
   80f38:	10800017 	ldw	r2,0(r2)
   80f3c:	100b883a 	mov	r5,r2
   80f40:	01000274 	movhi	r4,9
   80f44:	2107a704 	addi	r4,r4,7836
   80f48:	008e7f00 	call	8e7f0 <alt_printf>
	alt_printf("Config Reg: %x\n", *(tse + 0x02));
   80f4c:	d0a00017 	ldw	r2,-32768(gp)
   80f50:	10800204 	addi	r2,r2,8
   80f54:	10800017 	ldw	r2,0(r2)
   80f58:	100b883a 	mov	r5,r2
   80f5c:	01000274 	movhi	r4,9
   80f60:	2107af04 	addi	r4,r4,7868
   80f64:	008e7f00 	call	8e7f0 <alt_printf>

	// Wait until transmit descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   80f68:	0001883a 	nop
   80f6c:	01000434 	movhi	r4,16
   80f70:	21000004 	addi	r4,r4,0
   80f74:	008ff900 	call	8ff90 <alt_avalon_sgdma_check_descriptor_status>
   80f78:	103ffc1e 	bne	r2,zero,80f6c <rx_descriptor_end+0xfff80f0c>
	/*	// Create new sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, strlen(tx_frame)+6+6+2, 0, 1, 1, 0);

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);*/
}
   80f7c:	0001883a 	nop
   80f80:	e037883a 	mov	sp,fp
   80f84:	dfc00117 	ldw	ra,4(sp)
   80f88:	df000017 	ldw	fp,0(sp)
   80f8c:	dec00204 	addi	sp,sp,8
   80f90:	f800283a 	ret

00080f94 <connect>:
int seqNumber = 0x00;
int ackNumber = 0x00;

int timer;

int connect(int device, unsigned char * sourceIP, unsigned char * sourcePort, unsigned char * destinationIP, unsigned char * destinationPort){
   80f94:	defff904 	addi	sp,sp,-28
   80f98:	dfc00615 	stw	ra,24(sp)
   80f9c:	df000515 	stw	fp,20(sp)
   80fa0:	df000504 	addi	fp,sp,20
   80fa4:	e13ffc15 	stw	r4,-16(fp)
   80fa8:	e17ffd15 	stw	r5,-12(fp)
   80fac:	e1bffe15 	stw	r6,-8(fp)
   80fb0:	e1ffff15 	stw	r7,-4(fp)
	conn->syn[0] = 0x01;
   80fb4:	d0a7f017 	ldw	r2,-24640(gp)
   80fb8:	00c00044 	movi	r3,1
   80fbc:	10c00205 	stb	r3,8(r2)
	conn->fin[0] = 0x00;
   80fc0:	d0a7f017 	ldw	r2,-24640(gp)
   80fc4:	10000285 	stb	zero,10(r2)
	memmove(conn->destPort, destinationPort, 2);
   80fc8:	d0a7f017 	ldw	r2,-24640(gp)
   80fcc:	10800084 	addi	r2,r2,2
   80fd0:	01800084 	movi	r6,2
   80fd4:	e1400217 	ldw	r5,8(fp)
   80fd8:	1009883a 	mov	r4,r2
   80fdc:	0082da80 	call	82da8 <memmove>
	memmove(conn->sourcePort, sourcePort, 2);
   80fe0:	d0a7f017 	ldw	r2,-24640(gp)
   80fe4:	01800084 	movi	r6,2
   80fe8:	e17ffe17 	ldw	r5,-8(fp)
   80fec:	1009883a 	mov	r4,r2
   80ff0:	0082da80 	call	82da8 <memmove>
	conn->seqNum[0] = seqNumber;
   80ff4:	d0a7f017 	ldw	r2,-24640(gp)
   80ff8:	d0e7ee17 	ldw	r3,-24648(gp)
   80ffc:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   81000:	d0a7f017 	ldw	r2,-24640(gp)
   81004:	d0e7ef17 	ldw	r3,-24644(gp)
   81008:	10c00185 	stb	r3,6(r2)
	conn->data[0] = 0x00;
   8100c:	d0a7f017 	ldw	r2,-24640(gp)
   81010:	10000305 	stb	zero,12(r2)
	memmove(pack->sourceIP, sourceIP, 4);
   81014:	d0a7f617 	ldw	r2,-24616(gp)
   81018:	01800104 	movi	r6,4
   8101c:	e17ffd17 	ldw	r5,-12(fp)
   81020:	1009883a 	mov	r4,r2
   81024:	0082da80 	call	82da8 <memmove>
	memmove(pack->destIP, destinationIP, 4);
   81028:	d0a7f617 	ldw	r2,-24616(gp)
   8102c:	10800104 	addi	r2,r2,4
   81030:	01800104 	movi	r6,4
   81034:	e17fff17 	ldw	r5,-4(fp)
   81038:	1009883a 	mov	r4,r2
   8103c:	0082da80 	call	82da8 <memmove>
	pack->payload = conn;
   81040:	d0a7f617 	ldw	r2,-24616(gp)
   81044:	d0e7f017 	ldw	r3,-24640(gp)
   81048:	10c00215 	stw	r3,8(r2)
	sentPacket = pack;
   8104c:	d0a7f617 	ldw	r2,-24616(gp)
   81050:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);//Send Connection Request
   81054:	d0a7f617 	ldw	r2,-24616(gp)
   81058:	100b883a 	mov	r5,r2
   8105c:	e13ffc17 	ldw	r4,-16(fp)
   81060:	00802900 	call	80290 <transmit>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81064:	00c00084 	movi	r3,2
   81068:	00800434 	movhi	r2,16
   8106c:	10892004 	addi	r2,r2,9344
   81070:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xFFFF);
   81074:	00ffffd4 	movui	r3,65535
   81078:	00800434 	movhi	r2,16
   8107c:	10892204 	addi	r2,r2,9352
   81080:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
   81084:	00ffffd4 	movui	r3,65535
   81088:	00800434 	movhi	r2,16
   8108c:	10892304 	addi	r2,r2,9356
   81090:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   81094:	00c00104 	movi	r3,4
   81098:	00800434 	movhi	r2,16
   8109c:	10892104 	addi	r2,r2,9348
   810a0:	10c00035 	stwio	r3,0(r2)
	char * receivedBuffer = {0};
   810a4:	e03ffb15 	stw	zero,-20(fp)
	receivedBuffer = receive(device);//Wait to receive SYNACK
   810a8:	e13ffc17 	ldw	r4,-16(fp)
   810ac:	00806a80 	call	806a8 <receive>
   810b0:	e0bffb15 	stw	r2,-20(fp)
	if(receivedBuffer[32] == 0x01){
   810b4:	e0bffb17 	ldw	r2,-20(fp)
   810b8:	10800804 	addi	r2,r2,32
   810bc:	10800003 	ldbu	r2,0(r2)
   810c0:	10803fcc 	andi	r2,r2,255
   810c4:	1080201c 	xori	r2,r2,128
   810c8:	10bfe004 	addi	r2,r2,-128
   810cc:	10800058 	cmpnei	r2,r2,1
   810d0:	1000231e 	bne	r2,zero,81160 <connect+0x1cc>
		pack->payload->syn[0] = 0x00;
   810d4:	d0a7f617 	ldw	r2,-24616(gp)
   810d8:	10800217 	ldw	r2,8(r2)
   810dc:	10000205 	stb	zero,8(r2)
		pack->payload->data[0] = 0x02;
   810e0:	d0a7f617 	ldw	r2,-24616(gp)
   810e4:	10800217 	ldw	r2,8(r2)
   810e8:	00c00084 	movi	r3,2
   810ec:	10c00305 	stb	r3,12(r2)
		pack->payload->seqNum[0] = ++seqNumber;
   810f0:	d0a7f617 	ldw	r2,-24616(gp)
   810f4:	10800217 	ldw	r2,8(r2)
   810f8:	d0e7ee17 	ldw	r3,-24648(gp)
   810fc:	18c00044 	addi	r3,r3,1
   81100:	d0e7ee15 	stw	r3,-24648(gp)
   81104:	d0e7ee17 	ldw	r3,-24648(gp)
   81108:	10c00105 	stb	r3,4(r2)
		pack->payload->ackNum[0] = ++ackNumber;
   8110c:	d0a7f617 	ldw	r2,-24616(gp)
   81110:	10800217 	ldw	r2,8(r2)
   81114:	d0e7ef17 	ldw	r3,-24644(gp)
   81118:	18c00044 	addi	r3,r3,1
   8111c:	d0e7ef15 	stw	r3,-24644(gp)
   81120:	d0e7ef17 	ldw	r3,-24644(gp)
   81124:	10c00185 	stb	r3,6(r2)
		transmit(device, pack);//send ack
   81128:	d0a7f617 	ldw	r2,-24616(gp)
   8112c:	100b883a 	mov	r5,r2
   81130:	e13ffc17 	ldw	r4,-16(fp)
   81134:	00802900 	call	80290 <transmit>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   81138:	00c00204 	movi	r3,8
   8113c:	00800434 	movhi	r2,16
   81140:	10892104 	addi	r2,r2,9348
   81144:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81148:	00c00084 	movi	r3,2
   8114c:	00800434 	movhi	r2,16
   81150:	10892004 	addi	r2,r2,9344
   81154:	10c00035 	stwio	r3,0(r2)
		return 1;
   81158:	00800044 	movi	r2,1
   8115c:	00000f06 	br	8119c <connect+0x208>
	}else{
		alt_printf("Connection Failed");
   81160:	01000274 	movhi	r4,9
   81164:	2107b304 	addi	r4,r4,7884
   81168:	008e7f00 	call	8e7f0 <alt_printf>
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
   8116c:	00800434 	movhi	r2,16
   81170:	10892004 	addi	r2,r2,9344
   81174:	10800037 	ldwio	r2,0(r2)
   81178:	d0a7f115 	stw	r2,-24636(gp)
		if(timer == 1){
   8117c:	d0a7f117 	ldw	r2,-24636(gp)
   81180:	10800058 	cmpnei	r2,r2,1
   81184:	1000041e 	bne	r2,zero,81198 <connect+0x204>
			transmit(device, sentPacket);
   81188:	d0a7f217 	ldw	r2,-24632(gp)
   8118c:	100b883a 	mov	r5,r2
   81190:	e13ffc17 	ldw	r4,-16(fp)
   81194:	00802900 	call	80290 <transmit>
		}
		return 0;
   81198:	0005883a 	mov	r2,zero
	}
}
   8119c:	e037883a 	mov	sp,fp
   811a0:	dfc00117 	ldw	ra,4(sp)
   811a4:	df000017 	ldw	fp,0(sp)
   811a8:	dec00204 	addi	sp,sp,8
   811ac:	f800283a 	ret

000811b0 <send>:

int send(int device, unsigned char data){
   811b0:	defffb04 	addi	sp,sp,-20
   811b4:	dfc00415 	stw	ra,16(sp)
   811b8:	df000315 	stw	fp,12(sp)
   811bc:	df000304 	addi	fp,sp,12
   811c0:	e13ffe15 	stw	r4,-8(fp)
   811c4:	2805883a 	mov	r2,r5
   811c8:	e0bfff05 	stb	r2,-4(fp)

	conn->syn[0] = 0x00;
   811cc:	d0a7f017 	ldw	r2,-24640(gp)
   811d0:	10000205 	stb	zero,8(r2)
	conn->fin[0] = 0x00;
   811d4:	d0a7f017 	ldw	r2,-24640(gp)
   811d8:	10000285 	stb	zero,10(r2)
	conn->seqNum[0] = seqNumber;
   811dc:	d0a7f017 	ldw	r2,-24640(gp)
   811e0:	d0e7ee17 	ldw	r3,-24648(gp)
   811e4:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   811e8:	d0a7f017 	ldw	r2,-24640(gp)
   811ec:	d0e7ef17 	ldw	r3,-24644(gp)
   811f0:	10c00185 	stb	r3,6(r2)
	conn->data[0] = data;
   811f4:	d0a7f017 	ldw	r2,-24640(gp)
   811f8:	e0ffff03 	ldbu	r3,-4(fp)
   811fc:	10c00305 	stb	r3,12(r2)
	pack->payload = conn;
   81200:	d0a7f617 	ldw	r2,-24616(gp)
   81204:	d0e7f017 	ldw	r3,-24640(gp)
   81208:	10c00215 	stw	r3,8(r2)

	sentPacket = pack;
   8120c:	d0a7f617 	ldw	r2,-24616(gp)
   81210:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);
   81214:	d0a7f617 	ldw	r2,-24616(gp)
   81218:	100b883a 	mov	r5,r2
   8121c:	e13ffe17 	ldw	r4,-8(fp)
   81220:	00802900 	call	80290 <transmit>

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81224:	00c00084 	movi	r3,2
   81228:	00800434 	movhi	r2,16
   8122c:	10892004 	addi	r2,r2,9344
   81230:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
   81234:	00eaaa94 	movui	r3,43690
   81238:	00800434 	movhi	r2,16
   8123c:	10892204 	addi	r2,r2,9352
   81240:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0x002F);
   81244:	00c00bc4 	movi	r3,47
   81248:	00800434 	movhi	r2,16
   8124c:	10892304 	addi	r2,r2,9356
   81250:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   81254:	00c00104 	movi	r3,4
   81258:	00800434 	movhi	r2,16
   8125c:	10892104 	addi	r2,r2,9348
   81260:	10c00035 	stwio	r3,0(r2)

	unsigned char * receivedBuffer;

	receivedBuffer = receive(device);
   81264:	e13ffe17 	ldw	r4,-8(fp)
   81268:	00806a80 	call	806a8 <receive>
   8126c:	e0bffd15 	stw	r2,-12(fp)
	if(receivedBuffer[32] == 0x02){
   81270:	e0bffd17 	ldw	r2,-12(fp)
   81274:	10800804 	addi	r2,r2,32
   81278:	10800003 	ldbu	r2,0(r2)
   8127c:	10803fcc 	andi	r2,r2,255
   81280:	10800098 	cmpnei	r2,r2,2
   81284:	1000131e 	bne	r2,zero,812d4 <send+0x124>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   81288:	00c00204 	movi	r3,8
   8128c:	00800434 	movhi	r2,16
   81290:	10892104 	addi	r2,r2,9348
   81294:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81298:	00c00084 	movi	r3,2
   8129c:	00800434 	movhi	r2,16
   812a0:	10892004 	addi	r2,r2,9344
   812a4:	10c00035 	stwio	r3,0(r2)
		alt_printf("Ack received");
   812a8:	01000274 	movhi	r4,9
   812ac:	2107b804 	addi	r4,r4,7904
   812b0:	008e7f00 	call	8e7f0 <alt_printf>
		seqNumber++;
   812b4:	d0a7ee17 	ldw	r2,-24648(gp)
   812b8:	10800044 	addi	r2,r2,1
   812bc:	d0a7ee15 	stw	r2,-24648(gp)
		ackNumber++;
   812c0:	d0a7ef17 	ldw	r2,-24644(gp)
   812c4:	10800044 	addi	r2,r2,1
   812c8:	d0a7ef15 	stw	r2,-24644(gp)
		return 1;//sent and ack received
   812cc:	00800044 	movi	r2,1
   812d0:	00000e06 	br	8130c <send+0x15c>
	}
	else{
		alt_printf("Timeout Occurred");
   812d4:	01000274 	movhi	r4,9
   812d8:	2107bc04 	addi	r4,r4,7920
   812dc:	008e7f00 	call	8e7f0 <alt_printf>
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
   812e0:	00800434 	movhi	r2,16
   812e4:	10892004 	addi	r2,r2,9344
   812e8:	10800037 	ldwio	r2,0(r2)
   812ec:	d0a7f115 	stw	r2,-24636(gp)
		if(timer == 1){
   812f0:	d0a7f117 	ldw	r2,-24636(gp)
   812f4:	10800058 	cmpnei	r2,r2,1
   812f8:	1000041e 	bne	r2,zero,8130c <send+0x15c>
			transmit(device, sentPacket);
   812fc:	d0a7f217 	ldw	r2,-24632(gp)
   81300:	100b883a 	mov	r5,r2
   81304:	e13ffe17 	ldw	r4,-8(fp)
   81308:	00802900 	call	80290 <transmit>
		}
	}
}
   8130c:	e037883a 	mov	sp,fp
   81310:	dfc00117 	ldw	ra,4(sp)
   81314:	df000017 	ldw	fp,0(sp)
   81318:	dec00204 	addi	sp,sp,8
   8131c:	f800283a 	ret

00081320 <accept>:


int accept(int device){
   81320:	defffb04 	addi	sp,sp,-20
   81324:	dfc00415 	stw	ra,16(sp)
   81328:	df000315 	stw	fp,12(sp)
   8132c:	df000304 	addi	fp,sp,12
   81330:	e13fff15 	stw	r4,-4(fp)
	//TODO: Check if destIP, port is myIP, port
	unsigned char * request;
	request = receive(device);
   81334:	e13fff17 	ldw	r4,-4(fp)
   81338:	00806a80 	call	806a8 <receive>
   8133c:	e0bffd15 	stw	r2,-12(fp)

	conn->syn[0] = 0x01;
   81340:	d0a7f017 	ldw	r2,-24640(gp)
   81344:	00c00044 	movi	r3,1
   81348:	10c00205 	stb	r3,8(r2)
	conn->fin[0] = 0x00;
   8134c:	d0a7f017 	ldw	r2,-24640(gp)
   81350:	10000285 	stb	zero,10(r2)
	memmove(conn->destPort, request+24, 2);
   81354:	d0a7f017 	ldw	r2,-24640(gp)
   81358:	10c00084 	addi	r3,r2,2
   8135c:	e0bffd17 	ldw	r2,-12(fp)
   81360:	10800604 	addi	r2,r2,24
   81364:	01800084 	movi	r6,2
   81368:	100b883a 	mov	r5,r2
   8136c:	1809883a 	mov	r4,r3
   81370:	0082da80 	call	82da8 <memmove>
	memmove(conn->sourcePort, request+26, 2);
   81374:	d0a7f017 	ldw	r2,-24640(gp)
   81378:	1007883a 	mov	r3,r2
   8137c:	e0bffd17 	ldw	r2,-12(fp)
   81380:	10800684 	addi	r2,r2,26
   81384:	01800084 	movi	r6,2
   81388:	100b883a 	mov	r5,r2
   8138c:	1809883a 	mov	r4,r3
   81390:	0082da80 	call	82da8 <memmove>
	conn->seqNum[0] = seqNumber;
   81394:	d0a7f017 	ldw	r2,-24640(gp)
   81398:	d0e7ee17 	ldw	r3,-24648(gp)
   8139c:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   813a0:	d0a7f017 	ldw	r2,-24640(gp)
   813a4:	d0e7ef17 	ldw	r3,-24644(gp)
   813a8:	10c00185 	stb	r3,6(r2)
	conn->data[0] = 0x01;
   813ac:	d0a7f017 	ldw	r2,-24640(gp)
   813b0:	00c00044 	movi	r3,1
   813b4:	10c00305 	stb	r3,12(r2)

	memmove(pack->sourceIP, request+20, 4);
   813b8:	d0a7f617 	ldw	r2,-24616(gp)
   813bc:	1007883a 	mov	r3,r2
   813c0:	e0bffd17 	ldw	r2,-12(fp)
   813c4:	10800504 	addi	r2,r2,20
   813c8:	01800104 	movi	r6,4
   813cc:	100b883a 	mov	r5,r2
   813d0:	1809883a 	mov	r4,r3
   813d4:	0082da80 	call	82da8 <memmove>
	memmove(pack->destIP, request+20, 4);
   813d8:	d0a7f617 	ldw	r2,-24616(gp)
   813dc:	10c00104 	addi	r3,r2,4
   813e0:	e0bffd17 	ldw	r2,-12(fp)
   813e4:	10800504 	addi	r2,r2,20
   813e8:	01800104 	movi	r6,4
   813ec:	100b883a 	mov	r5,r2
   813f0:	1809883a 	mov	r4,r3
   813f4:	0082da80 	call	82da8 <memmove>
	pack->payload = conn;
   813f8:	d0a7f617 	ldw	r2,-24616(gp)
   813fc:	d0e7f017 	ldw	r3,-24640(gp)
   81400:	10c00215 	stw	r3,8(r2)

	if(request[28] == 0x01){
   81404:	e0bffd17 	ldw	r2,-12(fp)
   81408:	10800704 	addi	r2,r2,28
   8140c:	10800003 	ldbu	r2,0(r2)
   81410:	10803fcc 	andi	r2,r2,255
   81414:	10800058 	cmpnei	r2,r2,1
   81418:	1000061e 	bne	r2,zero,81434 <accept+0x114>
		sentPacket = pack;
   8141c:	d0a7f617 	ldw	r2,-24616(gp)
   81420:	d0a7f215 	stw	r2,-24632(gp)
		transmit(device, pack);
   81424:	d0a7f617 	ldw	r2,-24616(gp)
   81428:	100b883a 	mov	r5,r2
   8142c:	e13fff17 	ldw	r4,-4(fp)
   81430:	00802900 	call	80290 <transmit>
		//return 1;
	}

	unsigned char * ack;
	ack = receive(device);
   81434:	e13fff17 	ldw	r4,-4(fp)
   81438:	00806a80 	call	806a8 <receive>
   8143c:	e0bffe15 	stw	r2,-8(fp)
	if(ack[32] == 0x02){
   81440:	e0bffe17 	ldw	r2,-8(fp)
   81444:	10800804 	addi	r2,r2,32
   81448:	10800003 	ldbu	r2,0(r2)
   8144c:	10803fcc 	andi	r2,r2,255
   81450:	10800098 	cmpnei	r2,r2,2
   81454:	1000091e 	bne	r2,zero,8147c <accept+0x15c>
		//Received Ack
		printf("Three way handshake complete");
   81458:	01000274 	movhi	r4,9
   8145c:	2107c104 	addi	r4,r4,7940
   81460:	008305c0 	call	8305c <printf>
		fflush(stdout);
   81464:	d0a00217 	ldw	r2,-32760(gp)
   81468:	10800217 	ldw	r2,8(r2)
   8146c:	1009883a 	mov	r4,r2
   81470:	0081be80 	call	81be8 <fflush>
		return 1;
   81474:	00800044 	movi	r2,1
   81478:	00000106 	br	81480 <accept+0x160>
	}
	else return 0;
   8147c:	0005883a 	mov	r2,zero
}
   81480:	e037883a 	mov	sp,fp
   81484:	dfc00117 	ldw	ra,4(sp)
   81488:	df000017 	ldw	fp,0(sp)
   8148c:	dec00204 	addi	sp,sp,8
   81490:	f800283a 	ret

00081494 <recv>:

int recv(int device){
   81494:	defffc04 	addi	sp,sp,-16
   81498:	dfc00315 	stw	ra,12(sp)
   8149c:	df000215 	stw	fp,8(sp)
   814a0:	df000204 	addi	fp,sp,8
   814a4:	e13fff15 	stw	r4,-4(fp)
	unsigned char * recvData;
	recvData = receive(device);
   814a8:	e13fff17 	ldw	r4,-4(fp)
   814ac:	00806a80 	call	806a8 <receive>
   814b0:	e0bffe15 	stw	r2,-8(fp)
	if(recvData[32]!= 0x02){
   814b4:	e0bffe17 	ldw	r2,-8(fp)
   814b8:	10800804 	addi	r2,r2,32
   814bc:	10800003 	ldbu	r2,0(r2)
   814c0:	10803fcc 	andi	r2,r2,255
   814c4:	108000a0 	cmpeqi	r2,r2,2
   814c8:	1000171e 	bne	r2,zero,81528 <recv+0x94>
		//Store Data
		//Send Ack
		pack->payload->syn[0] = 0x00;
   814cc:	d0a7f617 	ldw	r2,-24616(gp)
   814d0:	10800217 	ldw	r2,8(r2)
   814d4:	10000205 	stb	zero,8(r2)
		pack->payload->data[0] = 0x02;
   814d8:	d0a7f617 	ldw	r2,-24616(gp)
   814dc:	10800217 	ldw	r2,8(r2)
   814e0:	00c00084 	movi	r3,2
   814e4:	10c00305 	stb	r3,12(r2)
		transmit(device, pack);
   814e8:	d0a7f617 	ldw	r2,-24616(gp)
   814ec:	100b883a 	mov	r5,r2
   814f0:	e13fff17 	ldw	r4,-4(fp)
   814f4:	00802900 	call	80290 <transmit>
		printf("Data Received: %x\n",recvData+32);
   814f8:	e0bffe17 	ldw	r2,-8(fp)
   814fc:	10800804 	addi	r2,r2,32
   81500:	100b883a 	mov	r5,r2
   81504:	01000274 	movhi	r4,9
   81508:	2107c904 	addi	r4,r4,7972
   8150c:	008305c0 	call	8305c <printf>
		fflush(stdout);
   81510:	d0a00217 	ldw	r2,-32760(gp)
   81514:	10800217 	ldw	r2,8(r2)
   81518:	1009883a 	mov	r4,r2
   8151c:	0081be80 	call	81be8 <fflush>
		return 1;
   81520:	00800044 	movi	r2,1
   81524:	00000306 	br	81534 <recv+0xa0>
	}
	else{
		printf("Ack received");
   81528:	01000274 	movhi	r4,9
   8152c:	2107b804 	addi	r4,r4,7904
   81530:	008305c0 	call	8305c <printf>
	}
}
   81534:	e037883a 	mov	sp,fp
   81538:	dfc00117 	ldw	ra,4(sp)
   8153c:	df000017 	ldw	fp,0(sp)
   81540:	dec00204 	addi	sp,sp,8
   81544:	f800283a 	ret

00081548 <disconnect>:

int disconnect(int device){
   81548:	defffc04 	addi	sp,sp,-16
   8154c:	dfc00315 	stw	ra,12(sp)
   81550:	df000215 	stw	fp,8(sp)
   81554:	df000204 	addi	fp,sp,8
   81558:	e13fff15 	stw	r4,-4(fp)

	conn->fin[0] = 0x01;
   8155c:	d0a7f017 	ldw	r2,-24640(gp)
   81560:	00c00044 	movi	r3,1
   81564:	10c00285 	stb	r3,10(r2)
	sentPacket = pack;
   81568:	d0a7f617 	ldw	r2,-24616(gp)
   8156c:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);
   81570:	d0a7f617 	ldw	r2,-24616(gp)
   81574:	100b883a 	mov	r5,r2
   81578:	e13fff17 	ldw	r4,-4(fp)
   8157c:	00802900 	call	80290 <transmit>

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81580:	00c00084 	movi	r3,2
   81584:	00800434 	movhi	r2,16
   81588:	10892004 	addi	r2,r2,9344
   8158c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
   81590:	00eaaa94 	movui	r3,43690
   81594:	00800434 	movhi	r2,16
   81598:	10892204 	addi	r2,r2,9352
   8159c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
   815a0:	00ffffd4 	movui	r3,65535
   815a4:	00800434 	movhi	r2,16
   815a8:	10892304 	addi	r2,r2,9356
   815ac:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   815b0:	00c00104 	movi	r3,4
   815b4:	00800434 	movhi	r2,16
   815b8:	10892104 	addi	r2,r2,9348
   815bc:	10c00035 	stwio	r3,0(r2)

	unsigned char * dcnt;

	dcnt = receive(device);
   815c0:	e13fff17 	ldw	r4,-4(fp)
   815c4:	00806a80 	call	806a8 <receive>
   815c8:	e0bffe15 	stw	r2,-8(fp)
	if(dcnt[32]==0x02){
   815cc:	e0bffe17 	ldw	r2,-8(fp)
   815d0:	10800804 	addi	r2,r2,32
   815d4:	10800003 	ldbu	r2,0(r2)
   815d8:	10803fcc 	andi	r2,r2,255
   815dc:	10800098 	cmpnei	r2,r2,2
   815e0:	10000d1e 	bne	r2,zero,81618 <disconnect+0xd0>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   815e4:	00c00204 	movi	r3,8
   815e8:	00800434 	movhi	r2,16
   815ec:	10892104 	addi	r2,r2,9348
   815f0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   815f4:	00c00084 	movi	r3,2
   815f8:	00800434 	movhi	r2,16
   815fc:	10892004 	addi	r2,r2,9344
   81600:	10c00035 	stwio	r3,0(r2)
		printf("Disconnected");
   81604:	01000274 	movhi	r4,9
   81608:	2107ce04 	addi	r4,r4,7992
   8160c:	008305c0 	call	8305c <printf>
		return 1;
   81610:	00800044 	movi	r2,1
   81614:	00000006 	br	81618 <disconnect+0xd0>
	}
}
   81618:	e037883a 	mov	sp,fp
   8161c:	dfc00117 	ldw	ra,4(sp)
   81620:	df000017 	ldw	fp,0(sp)
   81624:	dec00204 	addi	sp,sp,8
   81628:	f800283a 	ret

0008162c <recDisconnect>:

int recDisconnect(int device){
   8162c:	defffc04 	addi	sp,sp,-16
   81630:	dfc00315 	stw	ra,12(sp)
   81634:	df000215 	stw	fp,8(sp)
   81638:	df000204 	addi	fp,sp,8
   8163c:	e13fff15 	stw	r4,-4(fp)
	unsigned char * dreq;
	dreq = receive(device);
   81640:	e13fff17 	ldw	r4,-4(fp)
   81644:	00806a80 	call	806a8 <receive>
   81648:	e0bffe15 	stw	r2,-8(fp)
	if(dreq[29] == 0x01){
   8164c:	e0bffe17 	ldw	r2,-8(fp)
   81650:	10800744 	addi	r2,r2,29
   81654:	10800003 	ldbu	r2,0(r2)
   81658:	10803fcc 	andi	r2,r2,255
   8165c:	10800058 	cmpnei	r2,r2,1
   81660:	1000091e 	bne	r2,zero,81688 <recDisconnect+0x5c>
		//send ack
		conn->data[0] = 0x02;
   81664:	d0a7f017 	ldw	r2,-24640(gp)
   81668:	00c00084 	movi	r3,2
   8166c:	10c00305 	stb	r3,12(r2)
		transmit(device, pack);
   81670:	d0a7f617 	ldw	r2,-24616(gp)
   81674:	100b883a 	mov	r5,r2
   81678:	e13fff17 	ldw	r4,-4(fp)
   8167c:	00802900 	call	80290 <transmit>
		return 1;
   81680:	00800044 	movi	r2,1
   81684:	00000006 	br	81688 <recDisconnect+0x5c>
	}
}
   81688:	e037883a 	mov	sp,fp
   8168c:	dfc00117 	ldw	ra,4(sp)
   81690:	df000017 	ldw	fp,0(sp)
   81694:	dec00204 	addi	sp,sp,8
   81698:	f800283a 	ret

0008169c <main>:


int main(void){
   8169c:	defff204 	addi	sp,sp,-56
   816a0:	dfc00d15 	stw	ra,52(sp)
   816a4:	df000c15 	stw	fp,48(sp)
   816a8:	df000c04 	addi	fp,sp,48
	//TODO:

	//sentPacket = (struct packet*)malloc(sizeof(struct packet));
	pack = (struct packet*)malloc(sizeof(struct packet));
   816ac:	01000304 	movi	r4,12
   816b0:	00825740 	call	82574 <malloc>
   816b4:	d0a7f615 	stw	r2,-24616(gp)
	conn = (struct segment*)malloc(sizeof(struct segment));
   816b8:	010003c4 	movi	r4,15
   816bc:	00825740 	call	82574 <malloc>
   816c0:	d0a7f015 	stw	r2,-24640(gp)

	//int *array = malloc(10 * sizeof(int));
	unsigned char * IP1= malloc(4 * sizeof(unsigned char));
   816c4:	01000104 	movi	r4,4
   816c8:	00825740 	call	82574 <malloc>
   816cc:	e0bff715 	stw	r2,-36(fp)
	//{0xC0,0xA8,0x01,0x01};//192.168.1.1
	IP1[0] = 0xC0;
   816d0:	e0bff717 	ldw	r2,-36(fp)
   816d4:	00fff004 	movi	r3,-64
   816d8:	10c00005 	stb	r3,0(r2)
	IP1[1] = 0xA8;
   816dc:	e0bff717 	ldw	r2,-36(fp)
   816e0:	10800044 	addi	r2,r2,1
   816e4:	00ffea04 	movi	r3,-88
   816e8:	10c00005 	stb	r3,0(r2)
	IP1[2] = 0x01;
   816ec:	e0bff717 	ldw	r2,-36(fp)
   816f0:	10800084 	addi	r2,r2,2
   816f4:	00c00044 	movi	r3,1
   816f8:	10c00005 	stb	r3,0(r2)
	IP1[3] = 0x01;
   816fc:	e0bff717 	ldw	r2,-36(fp)
   81700:	108000c4 	addi	r2,r2,3
   81704:	00c00044 	movi	r3,1
   81708:	10c00005 	stb	r3,0(r2)
	//{0xC0,0xA8,0x01,0x02};//192.168.1.2
	unsigned char * IP2= malloc(4 * sizeof(unsigned char));
   8170c:	01000104 	movi	r4,4
   81710:	00825740 	call	82574 <malloc>
   81714:	e0bff815 	stw	r2,-32(fp)
	IP2[0] = 0xC0;
   81718:	e0bff817 	ldw	r2,-32(fp)
   8171c:	00fff004 	movi	r3,-64
   81720:	10c00005 	stb	r3,0(r2)
	IP2[1] = 0xA8;
   81724:	e0bff817 	ldw	r2,-32(fp)
   81728:	10800044 	addi	r2,r2,1
   8172c:	00ffea04 	movi	r3,-88
   81730:	10c00005 	stb	r3,0(r2)
	IP2[2] = 0x01;
   81734:	e0bff817 	ldw	r2,-32(fp)
   81738:	10800084 	addi	r2,r2,2
   8173c:	00c00044 	movi	r3,1
   81740:	10c00005 	stb	r3,0(r2)
	IP2[3] = 0x02;
   81744:	e0bff817 	ldw	r2,-32(fp)
   81748:	108000c4 	addi	r2,r2,3
   8174c:	00c00084 	movi	r3,2
   81750:	10c00005 	stb	r3,0(r2)

	unsigned char * sPort = malloc(2 * sizeof(unsigned char));
   81754:	01000084 	movi	r4,2
   81758:	00825740 	call	82574 <malloc>
   8175c:	e0bff915 	stw	r2,-28(fp)
	sPort[0] = 0x27;
   81760:	e0bff917 	ldw	r2,-28(fp)
   81764:	00c009c4 	movi	r3,39
   81768:	10c00005 	stb	r3,0(r2)
	sPort[1] = 0x0F;//9999
   8176c:	e0bff917 	ldw	r2,-28(fp)
   81770:	10800044 	addi	r2,r2,1
   81774:	00c003c4 	movi	r3,15
   81778:	10c00005 	stb	r3,0(r2)

	unsigned char * dPort = malloc(2 * sizeof(unsigned char));
   8177c:	01000084 	movi	r4,2
   81780:	00825740 	call	82574 <malloc>
   81784:	e0bffa15 	stw	r2,-24(fp)
	dPort[0] = 0x23;
   81788:	e0bffa17 	ldw	r2,-24(fp)
   8178c:	00c008c4 	movi	r3,35
   81790:	10c00005 	stb	r3,0(r2)
	dPort[1] = 0x82;//9090
   81794:	e0bffa17 	ldw	r2,-24(fp)
   81798:	10800044 	addi	r2,r2,1
   8179c:	00ffe084 	movi	r3,-126
   817a0:	10c00005 	stb	r3,0(r2)

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0000);
   817a4:	0007883a 	mov	r3,zero
   817a8:	00800434 	movhi	r2,16
   817ac:	10892104 	addi	r2,r2,9348
   817b0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0000);
   817b4:	0007883a 	mov	r3,zero
   817b8:	00800434 	movhi	r2,16
   817bc:	10892004 	addi	r2,r2,9344
   817c0:	10c00035 	stwio	r3,0(r2)

	buffer[0] = 0xAA;
   817c4:	00bfea84 	movi	r2,-86
   817c8:	d0a7f405 	stb	r2,-24624(gp)
	buffer[1] = 0xBB;
   817cc:	00bfeec4 	movi	r2,-69
   817d0:	d0a7f445 	stb	r2,-24623(gp)
	buffer[2] = 0xCC;
   817d4:	00bff304 	movi	r2,-52
   817d8:	d0a7f485 	stb	r2,-24622(gp)
	buffer[3] = 0xDD;
   817dc:	00bff744 	movi	r2,-35
   817e0:	d0a7f4c5 	stb	r2,-24621(gp)
	buffer[4] = 0xEE;
   817e4:	00bffb84 	movi	r2,-18
   817e8:	d0a7f505 	stb	r2,-24620(gp)

	int transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   817ec:	00800434 	movhi	r2,16
   817f0:	10892804 	addi	r2,r2,9376
   817f4:	10800037 	ldwio	r2,0(r2)
   817f8:	e0bffb15 	stw	r2,-20(fp)
	int isConnected = 0;
   817fc:	e03ffc15 	stw	zero,-16(fp)

	if(transmit){
   81800:	e0bffb17 	ldw	r2,-20(fp)
   81804:	10002926 	beq	r2,zero,818ac <main+0x210>
		isConnected = connect(A,IP1, sPort, IP2, dPort);
   81808:	e0bffa17 	ldw	r2,-24(fp)
   8180c:	d8800015 	stw	r2,0(sp)
   81810:	e1fff817 	ldw	r7,-32(fp)
   81814:	e1bff917 	ldw	r6,-28(fp)
   81818:	e17ff717 	ldw	r5,-36(fp)
   8181c:	0009883a 	mov	r4,zero
   81820:	0080f940 	call	80f94 <connect>
   81824:	e0bffc15 	stw	r2,-16(fp)
		if(isConnected){
   81828:	e0bffc17 	ldw	r2,-16(fp)
   8182c:	10004a26 	beq	r2,zero,81958 <main+0x2bc>
			int j = 0;
   81830:	e03ff515 	stw	zero,-44(fp)
			while(j < 5){
   81834:	00001706 	br	81894 <main+0x1f8>
				int sent = 0;
   81838:	e03ffd15 	stw	zero,-12(fp)
				sent = send(A, buffer[j]);
   8183c:	e0fff517 	ldw	r3,-44(fp)
   81840:	d0a7f404 	addi	r2,gp,-24624
   81844:	1885883a 	add	r2,r3,r2
   81848:	10800003 	ldbu	r2,0(r2)
   8184c:	10803fcc 	andi	r2,r2,255
   81850:	100b883a 	mov	r5,r2
   81854:	0009883a 	mov	r4,zero
   81858:	00811b00 	call	811b0 <send>
   8185c:	e0bffd15 	stw	r2,-12(fp)
				if(sent){
   81860:	e0bffd17 	ldw	r2,-12(fp)
   81864:	10000426 	beq	r2,zero,81878 <main+0x1dc>
					j++;
   81868:	e0bff517 	ldw	r2,-44(fp)
   8186c:	10800044 	addi	r2,r2,1
   81870:	e0bff515 	stw	r2,-44(fp)
   81874:	00000706 	br	81894 <main+0x1f8>
				}
				else {
					printf("ACK NOT RECEIVED");
   81878:	01000274 	movhi	r4,9
   8187c:	2107d204 	addi	r4,r4,8008
   81880:	008305c0 	call	8305c <printf>
					fflush(stdout);
   81884:	d0a00217 	ldw	r2,-32760(gp)
   81888:	10800217 	ldw	r2,8(r2)
   8188c:	1009883a 	mov	r4,r2
   81890:	0081be80 	call	81be8 <fflush>

	if(transmit){
		isConnected = connect(A,IP1, sPort, IP2, dPort);
		if(isConnected){
			int j = 0;
			while(j < 5){
   81894:	e0bff517 	ldw	r2,-44(fp)
   81898:	10800150 	cmplti	r2,r2,5
   8189c:	103fe61e 	bne	r2,zero,81838 <rx_descriptor_end+0xfff817d8>
					printf("ACK NOT RECEIVED");
					fflush(stdout);
				}

			}
			disconnect(A);
   818a0:	0009883a 	mov	r4,zero
   818a4:	00815480 	call	81548 <disconnect>
   818a8:	00002b06 	br	81958 <main+0x2bc>
		}
	}
	else {
		int conn = accept(B);
   818ac:	01000044 	movi	r4,1
   818b0:	00813200 	call	81320 <accept>
   818b4:	e0bffe15 	stw	r2,-8(fp)
		if(conn){
   818b8:	e0bffe17 	ldw	r2,-8(fp)
   818bc:	10001f26 	beq	r2,zero,8193c <main+0x2a0>
			printf("Connection Successful");
   818c0:	01000274 	movhi	r4,9
   818c4:	2107d704 	addi	r4,r4,8028
   818c8:	008305c0 	call	8305c <printf>
			fflush(stdout);
   818cc:	d0a00217 	ldw	r2,-32760(gp)
   818d0:	10800217 	ldw	r2,8(r2)
   818d4:	1009883a 	mov	r4,r2
   818d8:	0081be80 	call	81be8 <fflush>
			printf("Receiving data");
   818dc:	01000274 	movhi	r4,9
   818e0:	2107dd04 	addi	r4,r4,8052
   818e4:	008305c0 	call	8305c <printf>
			fflush(stdout);
   818e8:	d0a00217 	ldw	r2,-32760(gp)
   818ec:	10800217 	ldw	r2,8(r2)
   818f0:	1009883a 	mov	r4,r2
   818f4:	0081be80 	call	81be8 <fflush>
			int k = 0;
   818f8:	e03ff615 	stw	zero,-40(fp)
			while(k < 5){
   818fc:	00000906 	br	81924 <main+0x288>
				int rec = 0;
   81900:	e03fff15 	stw	zero,-4(fp)
				rec = recv(B);
   81904:	01000044 	movi	r4,1
   81908:	00814940 	call	81494 <recv>
   8190c:	e0bfff15 	stw	r2,-4(fp)
				if(rec){
   81910:	e0bfff17 	ldw	r2,-4(fp)
   81914:	10000326 	beq	r2,zero,81924 <main+0x288>
					k++;
   81918:	e0bff617 	ldw	r2,-40(fp)
   8191c:	10800044 	addi	r2,r2,1
   81920:	e0bff615 	stw	r2,-40(fp)
			printf("Connection Successful");
			fflush(stdout);
			printf("Receiving data");
			fflush(stdout);
			int k = 0;
			while(k < 5){
   81924:	e0bff617 	ldw	r2,-40(fp)
   81928:	10800150 	cmplti	r2,r2,5
   8192c:	103ff41e 	bne	r2,zero,81900 <rx_descriptor_end+0xfff818a0>
				rec = recv(B);
				if(rec){
					k++;
				}
			}
			recDisconnect(B);
   81930:	01000044 	movi	r4,1
   81934:	008162c0 	call	8162c <recDisconnect>
   81938:	00000706 	br	81958 <main+0x2bc>
		}
		else{
			printf("Connection Failed at Receiver");
   8193c:	01000274 	movhi	r4,9
   81940:	2107e104 	addi	r4,r4,8068
   81944:	008305c0 	call	8305c <printf>
			fflush(stdout);
   81948:	d0a00217 	ldw	r2,-32760(gp)
   8194c:	10800217 	ldw	r2,8(r2)
   81950:	1009883a 	mov	r4,r2
   81954:	0081be80 	call	81be8 <fflush>
		}
	}

	return 0;
   81958:	0005883a 	mov	r2,zero
}
   8195c:	e037883a 	mov	sp,fp
   81960:	dfc00117 	ldw	ra,4(sp)
   81964:	df000017 	ldw	fp,0(sp)
   81968:	dec00204 	addi	sp,sp,8
   8196c:	f800283a 	ret

00081970 <__sflush_r>:
   81970:	2880030b 	ldhu	r2,12(r5)
   81974:	defffb04 	addi	sp,sp,-20
   81978:	dcc00315 	stw	r19,12(sp)
   8197c:	dc400115 	stw	r17,4(sp)
   81980:	dfc00415 	stw	ra,16(sp)
   81984:	dc800215 	stw	r18,8(sp)
   81988:	dc000015 	stw	r16,0(sp)
   8198c:	10c0020c 	andi	r3,r2,8
   81990:	2823883a 	mov	r17,r5
   81994:	2027883a 	mov	r19,r4
   81998:	1800311e 	bne	r3,zero,81a60 <__sflush_r+0xf0>
   8199c:	28c00117 	ldw	r3,4(r5)
   819a0:	10820014 	ori	r2,r2,2048
   819a4:	2880030d 	sth	r2,12(r5)
   819a8:	00c04b0e 	bge	zero,r3,81ad8 <__sflush_r+0x168>
   819ac:	8a000a17 	ldw	r8,40(r17)
   819b0:	40002326 	beq	r8,zero,81a40 <__sflush_r+0xd0>
   819b4:	9c000017 	ldw	r16,0(r19)
   819b8:	10c4000c 	andi	r3,r2,4096
   819bc:	98000015 	stw	zero,0(r19)
   819c0:	18004826 	beq	r3,zero,81ae4 <__sflush_r+0x174>
   819c4:	89801417 	ldw	r6,80(r17)
   819c8:	10c0010c 	andi	r3,r2,4
   819cc:	18000626 	beq	r3,zero,819e8 <__sflush_r+0x78>
   819d0:	88c00117 	ldw	r3,4(r17)
   819d4:	88800c17 	ldw	r2,48(r17)
   819d8:	30cdc83a 	sub	r6,r6,r3
   819dc:	10000226 	beq	r2,zero,819e8 <__sflush_r+0x78>
   819e0:	88800f17 	ldw	r2,60(r17)
   819e4:	308dc83a 	sub	r6,r6,r2
   819e8:	89400717 	ldw	r5,28(r17)
   819ec:	000f883a 	mov	r7,zero
   819f0:	9809883a 	mov	r4,r19
   819f4:	403ee83a 	callr	r8
   819f8:	00ffffc4 	movi	r3,-1
   819fc:	10c04426 	beq	r2,r3,81b10 <__sflush_r+0x1a0>
   81a00:	88c0030b 	ldhu	r3,12(r17)
   81a04:	89000417 	ldw	r4,16(r17)
   81a08:	88000115 	stw	zero,4(r17)
   81a0c:	197dffcc 	andi	r5,r3,63487
   81a10:	8940030d 	sth	r5,12(r17)
   81a14:	89000015 	stw	r4,0(r17)
   81a18:	18c4000c 	andi	r3,r3,4096
   81a1c:	18002c1e 	bne	r3,zero,81ad0 <__sflush_r+0x160>
   81a20:	89400c17 	ldw	r5,48(r17)
   81a24:	9c000015 	stw	r16,0(r19)
   81a28:	28000526 	beq	r5,zero,81a40 <__sflush_r+0xd0>
   81a2c:	88801004 	addi	r2,r17,64
   81a30:	28800226 	beq	r5,r2,81a3c <__sflush_r+0xcc>
   81a34:	9809883a 	mov	r4,r19
   81a38:	00820dc0 	call	820dc <_free_r>
   81a3c:	88000c15 	stw	zero,48(r17)
   81a40:	0005883a 	mov	r2,zero
   81a44:	dfc00417 	ldw	ra,16(sp)
   81a48:	dcc00317 	ldw	r19,12(sp)
   81a4c:	dc800217 	ldw	r18,8(sp)
   81a50:	dc400117 	ldw	r17,4(sp)
   81a54:	dc000017 	ldw	r16,0(sp)
   81a58:	dec00504 	addi	sp,sp,20
   81a5c:	f800283a 	ret
   81a60:	2c800417 	ldw	r18,16(r5)
   81a64:	903ff626 	beq	r18,zero,81a40 <rx_descriptor_end+0xfff819e0>
   81a68:	2c000017 	ldw	r16,0(r5)
   81a6c:	108000cc 	andi	r2,r2,3
   81a70:	2c800015 	stw	r18,0(r5)
   81a74:	84a1c83a 	sub	r16,r16,r18
   81a78:	1000131e 	bne	r2,zero,81ac8 <__sflush_r+0x158>
   81a7c:	28800517 	ldw	r2,20(r5)
   81a80:	88800215 	stw	r2,8(r17)
   81a84:	04000316 	blt	zero,r16,81a94 <__sflush_r+0x124>
   81a88:	003fed06 	br	81a40 <rx_descriptor_end+0xfff819e0>
   81a8c:	90a5883a 	add	r18,r18,r2
   81a90:	043feb0e 	bge	zero,r16,81a40 <rx_descriptor_end+0xfff819e0>
   81a94:	88800917 	ldw	r2,36(r17)
   81a98:	89400717 	ldw	r5,28(r17)
   81a9c:	800f883a 	mov	r7,r16
   81aa0:	900d883a 	mov	r6,r18
   81aa4:	9809883a 	mov	r4,r19
   81aa8:	103ee83a 	callr	r2
   81aac:	80a1c83a 	sub	r16,r16,r2
   81ab0:	00bff616 	blt	zero,r2,81a8c <rx_descriptor_end+0xfff81a2c>
   81ab4:	88c0030b 	ldhu	r3,12(r17)
   81ab8:	00bfffc4 	movi	r2,-1
   81abc:	18c01014 	ori	r3,r3,64
   81ac0:	88c0030d 	sth	r3,12(r17)
   81ac4:	003fdf06 	br	81a44 <rx_descriptor_end+0xfff819e4>
   81ac8:	0005883a 	mov	r2,zero
   81acc:	003fec06 	br	81a80 <rx_descriptor_end+0xfff81a20>
   81ad0:	88801415 	stw	r2,80(r17)
   81ad4:	003fd206 	br	81a20 <rx_descriptor_end+0xfff819c0>
   81ad8:	28c00f17 	ldw	r3,60(r5)
   81adc:	00ffb316 	blt	zero,r3,819ac <rx_descriptor_end+0xfff8194c>
   81ae0:	003fd706 	br	81a40 <rx_descriptor_end+0xfff819e0>
   81ae4:	89400717 	ldw	r5,28(r17)
   81ae8:	000d883a 	mov	r6,zero
   81aec:	01c00044 	movi	r7,1
   81af0:	9809883a 	mov	r4,r19
   81af4:	403ee83a 	callr	r8
   81af8:	100d883a 	mov	r6,r2
   81afc:	00bfffc4 	movi	r2,-1
   81b00:	30801426 	beq	r6,r2,81b54 <__sflush_r+0x1e4>
   81b04:	8880030b 	ldhu	r2,12(r17)
   81b08:	8a000a17 	ldw	r8,40(r17)
   81b0c:	003fae06 	br	819c8 <rx_descriptor_end+0xfff81968>
   81b10:	98c00017 	ldw	r3,0(r19)
   81b14:	183fba26 	beq	r3,zero,81a00 <rx_descriptor_end+0xfff819a0>
   81b18:	01000744 	movi	r4,29
   81b1c:	19000626 	beq	r3,r4,81b38 <__sflush_r+0x1c8>
   81b20:	01000584 	movi	r4,22
   81b24:	19000426 	beq	r3,r4,81b38 <__sflush_r+0x1c8>
   81b28:	88c0030b 	ldhu	r3,12(r17)
   81b2c:	18c01014 	ori	r3,r3,64
   81b30:	88c0030d 	sth	r3,12(r17)
   81b34:	003fc306 	br	81a44 <rx_descriptor_end+0xfff819e4>
   81b38:	8880030b 	ldhu	r2,12(r17)
   81b3c:	88c00417 	ldw	r3,16(r17)
   81b40:	88000115 	stw	zero,4(r17)
   81b44:	10bdffcc 	andi	r2,r2,63487
   81b48:	8880030d 	sth	r2,12(r17)
   81b4c:	88c00015 	stw	r3,0(r17)
   81b50:	003fb306 	br	81a20 <rx_descriptor_end+0xfff819c0>
   81b54:	98800017 	ldw	r2,0(r19)
   81b58:	103fea26 	beq	r2,zero,81b04 <rx_descriptor_end+0xfff81aa4>
   81b5c:	00c00744 	movi	r3,29
   81b60:	10c00226 	beq	r2,r3,81b6c <__sflush_r+0x1fc>
   81b64:	00c00584 	movi	r3,22
   81b68:	10c0031e 	bne	r2,r3,81b78 <__sflush_r+0x208>
   81b6c:	9c000015 	stw	r16,0(r19)
   81b70:	0005883a 	mov	r2,zero
   81b74:	003fb306 	br	81a44 <rx_descriptor_end+0xfff819e4>
   81b78:	88c0030b 	ldhu	r3,12(r17)
   81b7c:	3005883a 	mov	r2,r6
   81b80:	18c01014 	ori	r3,r3,64
   81b84:	88c0030d 	sth	r3,12(r17)
   81b88:	003fae06 	br	81a44 <rx_descriptor_end+0xfff819e4>

00081b8c <_fflush_r>:
   81b8c:	defffd04 	addi	sp,sp,-12
   81b90:	dc000115 	stw	r16,4(sp)
   81b94:	dfc00215 	stw	ra,8(sp)
   81b98:	2021883a 	mov	r16,r4
   81b9c:	20000226 	beq	r4,zero,81ba8 <_fflush_r+0x1c>
   81ba0:	20800e17 	ldw	r2,56(r4)
   81ba4:	10000c26 	beq	r2,zero,81bd8 <_fflush_r+0x4c>
   81ba8:	2880030f 	ldh	r2,12(r5)
   81bac:	1000051e 	bne	r2,zero,81bc4 <_fflush_r+0x38>
   81bb0:	0005883a 	mov	r2,zero
   81bb4:	dfc00217 	ldw	ra,8(sp)
   81bb8:	dc000117 	ldw	r16,4(sp)
   81bbc:	dec00304 	addi	sp,sp,12
   81bc0:	f800283a 	ret
   81bc4:	8009883a 	mov	r4,r16
   81bc8:	dfc00217 	ldw	ra,8(sp)
   81bcc:	dc000117 	ldw	r16,4(sp)
   81bd0:	dec00304 	addi	sp,sp,12
   81bd4:	00819701 	jmpi	81970 <__sflush_r>
   81bd8:	d9400015 	stw	r5,0(sp)
   81bdc:	0081f680 	call	81f68 <__sinit>
   81be0:	d9400017 	ldw	r5,0(sp)
   81be4:	003ff006 	br	81ba8 <rx_descriptor_end+0xfff81b48>

00081be8 <fflush>:
   81be8:	20000526 	beq	r4,zero,81c00 <fflush+0x18>
   81bec:	00800274 	movhi	r2,9
   81bf0:	10907304 	addi	r2,r2,16844
   81bf4:	200b883a 	mov	r5,r4
   81bf8:	11000017 	ldw	r4,0(r2)
   81bfc:	0081b8c1 	jmpi	81b8c <_fflush_r>
   81c00:	00800274 	movhi	r2,9
   81c04:	10907204 	addi	r2,r2,16840
   81c08:	11000017 	ldw	r4,0(r2)
   81c0c:	01400234 	movhi	r5,8
   81c10:	2946e304 	addi	r5,r5,7052
   81c14:	00824b01 	jmpi	824b0 <_fwalk_reent>

00081c18 <__fp_unlock>:
   81c18:	0005883a 	mov	r2,zero
   81c1c:	f800283a 	ret

00081c20 <_cleanup_r>:
   81c20:	01400234 	movhi	r5,8
   81c24:	295be204 	addi	r5,r5,28552
   81c28:	00824b01 	jmpi	824b0 <_fwalk_reent>

00081c2c <__sinit.part.1>:
   81c2c:	defff704 	addi	sp,sp,-36
   81c30:	00c00234 	movhi	r3,8
   81c34:	dfc00815 	stw	ra,32(sp)
   81c38:	ddc00715 	stw	r23,28(sp)
   81c3c:	dd800615 	stw	r22,24(sp)
   81c40:	dd400515 	stw	r21,20(sp)
   81c44:	dd000415 	stw	r20,16(sp)
   81c48:	dcc00315 	stw	r19,12(sp)
   81c4c:	dc800215 	stw	r18,8(sp)
   81c50:	dc400115 	stw	r17,4(sp)
   81c54:	dc000015 	stw	r16,0(sp)
   81c58:	18c70804 	addi	r3,r3,7200
   81c5c:	24000117 	ldw	r16,4(r4)
   81c60:	20c00f15 	stw	r3,60(r4)
   81c64:	2080bb04 	addi	r2,r4,748
   81c68:	00c000c4 	movi	r3,3
   81c6c:	20c0b915 	stw	r3,740(r4)
   81c70:	2080ba15 	stw	r2,744(r4)
   81c74:	2000b815 	stw	zero,736(r4)
   81c78:	05c00204 	movi	r23,8
   81c7c:	00800104 	movi	r2,4
   81c80:	2025883a 	mov	r18,r4
   81c84:	b80d883a 	mov	r6,r23
   81c88:	81001704 	addi	r4,r16,92
   81c8c:	000b883a 	mov	r5,zero
   81c90:	80000015 	stw	zero,0(r16)
   81c94:	80000115 	stw	zero,4(r16)
   81c98:	80000215 	stw	zero,8(r16)
   81c9c:	8080030d 	sth	r2,12(r16)
   81ca0:	80001915 	stw	zero,100(r16)
   81ca4:	8000038d 	sth	zero,14(r16)
   81ca8:	80000415 	stw	zero,16(r16)
   81cac:	80000515 	stw	zero,20(r16)
   81cb0:	80000615 	stw	zero,24(r16)
   81cb4:	0082f040 	call	82f04 <memset>
   81cb8:	05800234 	movhi	r22,8
   81cbc:	94400217 	ldw	r17,8(r18)
   81cc0:	05400234 	movhi	r21,8
   81cc4:	05000234 	movhi	r20,8
   81cc8:	04c00234 	movhi	r19,8
   81ccc:	b58c3b04 	addi	r22,r22,12524
   81cd0:	ad4c5204 	addi	r21,r21,12616
   81cd4:	a50c7104 	addi	r20,r20,12740
   81cd8:	9ccc8804 	addi	r19,r19,12832
   81cdc:	85800815 	stw	r22,32(r16)
   81ce0:	85400915 	stw	r21,36(r16)
   81ce4:	85000a15 	stw	r20,40(r16)
   81ce8:	84c00b15 	stw	r19,44(r16)
   81cec:	84000715 	stw	r16,28(r16)
   81cf0:	00800284 	movi	r2,10
   81cf4:	8880030d 	sth	r2,12(r17)
   81cf8:	00800044 	movi	r2,1
   81cfc:	b80d883a 	mov	r6,r23
   81d00:	89001704 	addi	r4,r17,92
   81d04:	000b883a 	mov	r5,zero
   81d08:	88000015 	stw	zero,0(r17)
   81d0c:	88000115 	stw	zero,4(r17)
   81d10:	88000215 	stw	zero,8(r17)
   81d14:	88001915 	stw	zero,100(r17)
   81d18:	8880038d 	sth	r2,14(r17)
   81d1c:	88000415 	stw	zero,16(r17)
   81d20:	88000515 	stw	zero,20(r17)
   81d24:	88000615 	stw	zero,24(r17)
   81d28:	0082f040 	call	82f04 <memset>
   81d2c:	94000317 	ldw	r16,12(r18)
   81d30:	00800484 	movi	r2,18
   81d34:	8c400715 	stw	r17,28(r17)
   81d38:	8d800815 	stw	r22,32(r17)
   81d3c:	8d400915 	stw	r21,36(r17)
   81d40:	8d000a15 	stw	r20,40(r17)
   81d44:	8cc00b15 	stw	r19,44(r17)
   81d48:	8080030d 	sth	r2,12(r16)
   81d4c:	00800084 	movi	r2,2
   81d50:	80000015 	stw	zero,0(r16)
   81d54:	80000115 	stw	zero,4(r16)
   81d58:	80000215 	stw	zero,8(r16)
   81d5c:	80001915 	stw	zero,100(r16)
   81d60:	8080038d 	sth	r2,14(r16)
   81d64:	80000415 	stw	zero,16(r16)
   81d68:	80000515 	stw	zero,20(r16)
   81d6c:	80000615 	stw	zero,24(r16)
   81d70:	b80d883a 	mov	r6,r23
   81d74:	000b883a 	mov	r5,zero
   81d78:	81001704 	addi	r4,r16,92
   81d7c:	0082f040 	call	82f04 <memset>
   81d80:	00800044 	movi	r2,1
   81d84:	84000715 	stw	r16,28(r16)
   81d88:	85800815 	stw	r22,32(r16)
   81d8c:	85400915 	stw	r21,36(r16)
   81d90:	85000a15 	stw	r20,40(r16)
   81d94:	84c00b15 	stw	r19,44(r16)
   81d98:	90800e15 	stw	r2,56(r18)
   81d9c:	dfc00817 	ldw	ra,32(sp)
   81da0:	ddc00717 	ldw	r23,28(sp)
   81da4:	dd800617 	ldw	r22,24(sp)
   81da8:	dd400517 	ldw	r21,20(sp)
   81dac:	dd000417 	ldw	r20,16(sp)
   81db0:	dcc00317 	ldw	r19,12(sp)
   81db4:	dc800217 	ldw	r18,8(sp)
   81db8:	dc400117 	ldw	r17,4(sp)
   81dbc:	dc000017 	ldw	r16,0(sp)
   81dc0:	dec00904 	addi	sp,sp,36
   81dc4:	f800283a 	ret

00081dc8 <__fp_lock>:
   81dc8:	0005883a 	mov	r2,zero
   81dcc:	f800283a 	ret

00081dd0 <__sfmoreglue>:
   81dd0:	defffc04 	addi	sp,sp,-16
   81dd4:	dc400115 	stw	r17,4(sp)
   81dd8:	2c7fffc4 	addi	r17,r5,-1
   81ddc:	8c401a24 	muli	r17,r17,104
   81de0:	dc800215 	stw	r18,8(sp)
   81de4:	2825883a 	mov	r18,r5
   81de8:	89401d04 	addi	r5,r17,116
   81dec:	dc000015 	stw	r16,0(sp)
   81df0:	dfc00315 	stw	ra,12(sp)
   81df4:	008259c0 	call	8259c <_malloc_r>
   81df8:	1021883a 	mov	r16,r2
   81dfc:	10000726 	beq	r2,zero,81e1c <__sfmoreglue+0x4c>
   81e00:	11000304 	addi	r4,r2,12
   81e04:	10000015 	stw	zero,0(r2)
   81e08:	14800115 	stw	r18,4(r2)
   81e0c:	11000215 	stw	r4,8(r2)
   81e10:	89801a04 	addi	r6,r17,104
   81e14:	000b883a 	mov	r5,zero
   81e18:	0082f040 	call	82f04 <memset>
   81e1c:	8005883a 	mov	r2,r16
   81e20:	dfc00317 	ldw	ra,12(sp)
   81e24:	dc800217 	ldw	r18,8(sp)
   81e28:	dc400117 	ldw	r17,4(sp)
   81e2c:	dc000017 	ldw	r16,0(sp)
   81e30:	dec00404 	addi	sp,sp,16
   81e34:	f800283a 	ret

00081e38 <__sfp>:
   81e38:	defffb04 	addi	sp,sp,-20
   81e3c:	dc000015 	stw	r16,0(sp)
   81e40:	04000274 	movhi	r16,9
   81e44:	84107204 	addi	r16,r16,16840
   81e48:	dcc00315 	stw	r19,12(sp)
   81e4c:	2027883a 	mov	r19,r4
   81e50:	81000017 	ldw	r4,0(r16)
   81e54:	dfc00415 	stw	ra,16(sp)
   81e58:	dc800215 	stw	r18,8(sp)
   81e5c:	20800e17 	ldw	r2,56(r4)
   81e60:	dc400115 	stw	r17,4(sp)
   81e64:	1000021e 	bne	r2,zero,81e70 <__sfp+0x38>
   81e68:	0081c2c0 	call	81c2c <__sinit.part.1>
   81e6c:	81000017 	ldw	r4,0(r16)
   81e70:	2480b804 	addi	r18,r4,736
   81e74:	047fffc4 	movi	r17,-1
   81e78:	91000117 	ldw	r4,4(r18)
   81e7c:	94000217 	ldw	r16,8(r18)
   81e80:	213fffc4 	addi	r4,r4,-1
   81e84:	20000a16 	blt	r4,zero,81eb0 <__sfp+0x78>
   81e88:	8080030f 	ldh	r2,12(r16)
   81e8c:	10000c26 	beq	r2,zero,81ec0 <__sfp+0x88>
   81e90:	80c01d04 	addi	r3,r16,116
   81e94:	00000206 	br	81ea0 <__sfp+0x68>
   81e98:	18bfe60f 	ldh	r2,-104(r3)
   81e9c:	10000826 	beq	r2,zero,81ec0 <__sfp+0x88>
   81ea0:	213fffc4 	addi	r4,r4,-1
   81ea4:	1c3ffd04 	addi	r16,r3,-12
   81ea8:	18c01a04 	addi	r3,r3,104
   81eac:	247ffa1e 	bne	r4,r17,81e98 <rx_descriptor_end+0xfff81e38>
   81eb0:	90800017 	ldw	r2,0(r18)
   81eb4:	10001d26 	beq	r2,zero,81f2c <__sfp+0xf4>
   81eb8:	1025883a 	mov	r18,r2
   81ebc:	003fee06 	br	81e78 <rx_descriptor_end+0xfff81e18>
   81ec0:	00bfffc4 	movi	r2,-1
   81ec4:	8080038d 	sth	r2,14(r16)
   81ec8:	00800044 	movi	r2,1
   81ecc:	8080030d 	sth	r2,12(r16)
   81ed0:	80001915 	stw	zero,100(r16)
   81ed4:	80000015 	stw	zero,0(r16)
   81ed8:	80000215 	stw	zero,8(r16)
   81edc:	80000115 	stw	zero,4(r16)
   81ee0:	80000415 	stw	zero,16(r16)
   81ee4:	80000515 	stw	zero,20(r16)
   81ee8:	80000615 	stw	zero,24(r16)
   81eec:	01800204 	movi	r6,8
   81ef0:	000b883a 	mov	r5,zero
   81ef4:	81001704 	addi	r4,r16,92
   81ef8:	0082f040 	call	82f04 <memset>
   81efc:	8005883a 	mov	r2,r16
   81f00:	80000c15 	stw	zero,48(r16)
   81f04:	80000d15 	stw	zero,52(r16)
   81f08:	80001115 	stw	zero,68(r16)
   81f0c:	80001215 	stw	zero,72(r16)
   81f10:	dfc00417 	ldw	ra,16(sp)
   81f14:	dcc00317 	ldw	r19,12(sp)
   81f18:	dc800217 	ldw	r18,8(sp)
   81f1c:	dc400117 	ldw	r17,4(sp)
   81f20:	dc000017 	ldw	r16,0(sp)
   81f24:	dec00504 	addi	sp,sp,20
   81f28:	f800283a 	ret
   81f2c:	01400104 	movi	r5,4
   81f30:	9809883a 	mov	r4,r19
   81f34:	0081dd00 	call	81dd0 <__sfmoreglue>
   81f38:	90800015 	stw	r2,0(r18)
   81f3c:	103fde1e 	bne	r2,zero,81eb8 <rx_descriptor_end+0xfff81e58>
   81f40:	00800304 	movi	r2,12
   81f44:	98800015 	stw	r2,0(r19)
   81f48:	0005883a 	mov	r2,zero
   81f4c:	003ff006 	br	81f10 <rx_descriptor_end+0xfff81eb0>

00081f50 <_cleanup>:
   81f50:	00800274 	movhi	r2,9
   81f54:	10907204 	addi	r2,r2,16840
   81f58:	11000017 	ldw	r4,0(r2)
   81f5c:	01400234 	movhi	r5,8
   81f60:	295be204 	addi	r5,r5,28552
   81f64:	00824b01 	jmpi	824b0 <_fwalk_reent>

00081f68 <__sinit>:
   81f68:	20800e17 	ldw	r2,56(r4)
   81f6c:	10000126 	beq	r2,zero,81f74 <__sinit+0xc>
   81f70:	f800283a 	ret
   81f74:	0081c2c1 	jmpi	81c2c <__sinit.part.1>

00081f78 <__sfp_lock_acquire>:
   81f78:	f800283a 	ret

00081f7c <__sfp_lock_release>:
   81f7c:	f800283a 	ret

00081f80 <__sinit_lock_acquire>:
   81f80:	f800283a 	ret

00081f84 <__sinit_lock_release>:
   81f84:	f800283a 	ret

00081f88 <__fp_lock_all>:
   81f88:	00800274 	movhi	r2,9
   81f8c:	10907304 	addi	r2,r2,16844
   81f90:	11000017 	ldw	r4,0(r2)
   81f94:	01400234 	movhi	r5,8
   81f98:	29477204 	addi	r5,r5,7624
   81f9c:	00823ec1 	jmpi	823ec <_fwalk>

00081fa0 <__fp_unlock_all>:
   81fa0:	00800274 	movhi	r2,9
   81fa4:	10907304 	addi	r2,r2,16844
   81fa8:	11000017 	ldw	r4,0(r2)
   81fac:	01400234 	movhi	r5,8
   81fb0:	29470604 	addi	r5,r5,7192
   81fb4:	00823ec1 	jmpi	823ec <_fwalk>

00081fb8 <_malloc_trim_r>:
   81fb8:	defffb04 	addi	sp,sp,-20
   81fbc:	dcc00315 	stw	r19,12(sp)
   81fc0:	04c00274 	movhi	r19,9
   81fc4:	dc800215 	stw	r18,8(sp)
   81fc8:	dc400115 	stw	r17,4(sp)
   81fcc:	dc000015 	stw	r16,0(sp)
   81fd0:	dfc00415 	stw	ra,16(sp)
   81fd4:	2821883a 	mov	r16,r5
   81fd8:	9ccab704 	addi	r19,r19,10972
   81fdc:	2025883a 	mov	r18,r4
   81fe0:	008e7a80 	call	8e7a8 <__malloc_lock>
   81fe4:	98800217 	ldw	r2,8(r19)
   81fe8:	14400117 	ldw	r17,4(r2)
   81fec:	00bfff04 	movi	r2,-4
   81ff0:	88a2703a 	and	r17,r17,r2
   81ff4:	8c21c83a 	sub	r16,r17,r16
   81ff8:	8403fbc4 	addi	r16,r16,4079
   81ffc:	8020d33a 	srli	r16,r16,12
   82000:	0083ffc4 	movi	r2,4095
   82004:	843fffc4 	addi	r16,r16,-1
   82008:	8020933a 	slli	r16,r16,12
   8200c:	1400060e 	bge	r2,r16,82028 <_malloc_trim_r+0x70>
   82010:	000b883a 	mov	r5,zero
   82014:	9009883a 	mov	r4,r18
   82018:	00830980 	call	83098 <_sbrk_r>
   8201c:	98c00217 	ldw	r3,8(r19)
   82020:	1c47883a 	add	r3,r3,r17
   82024:	10c00a26 	beq	r2,r3,82050 <_malloc_trim_r+0x98>
   82028:	9009883a 	mov	r4,r18
   8202c:	008e7cc0 	call	8e7cc <__malloc_unlock>
   82030:	0005883a 	mov	r2,zero
   82034:	dfc00417 	ldw	ra,16(sp)
   82038:	dcc00317 	ldw	r19,12(sp)
   8203c:	dc800217 	ldw	r18,8(sp)
   82040:	dc400117 	ldw	r17,4(sp)
   82044:	dc000017 	ldw	r16,0(sp)
   82048:	dec00504 	addi	sp,sp,20
   8204c:	f800283a 	ret
   82050:	040bc83a 	sub	r5,zero,r16
   82054:	9009883a 	mov	r4,r18
   82058:	00830980 	call	83098 <_sbrk_r>
   8205c:	00ffffc4 	movi	r3,-1
   82060:	10c00d26 	beq	r2,r3,82098 <_malloc_trim_r+0xe0>
   82064:	00c00274 	movhi	r3,9
   82068:	18d97604 	addi	r3,r3,26072
   8206c:	18800017 	ldw	r2,0(r3)
   82070:	99000217 	ldw	r4,8(r19)
   82074:	8c23c83a 	sub	r17,r17,r16
   82078:	8c400054 	ori	r17,r17,1
   8207c:	1421c83a 	sub	r16,r2,r16
   82080:	24400115 	stw	r17,4(r4)
   82084:	9009883a 	mov	r4,r18
   82088:	1c000015 	stw	r16,0(r3)
   8208c:	008e7cc0 	call	8e7cc <__malloc_unlock>
   82090:	00800044 	movi	r2,1
   82094:	003fe706 	br	82034 <rx_descriptor_end+0xfff81fd4>
   82098:	000b883a 	mov	r5,zero
   8209c:	9009883a 	mov	r4,r18
   820a0:	00830980 	call	83098 <_sbrk_r>
   820a4:	99000217 	ldw	r4,8(r19)
   820a8:	014003c4 	movi	r5,15
   820ac:	1107c83a 	sub	r3,r2,r4
   820b0:	28ffdd0e 	bge	r5,r3,82028 <rx_descriptor_end+0xfff81fc8>
   820b4:	01400274 	movhi	r5,9
   820b8:	29507404 	addi	r5,r5,16848
   820bc:	29400017 	ldw	r5,0(r5)
   820c0:	18c00054 	ori	r3,r3,1
   820c4:	20c00115 	stw	r3,4(r4)
   820c8:	00c00274 	movhi	r3,9
   820cc:	1145c83a 	sub	r2,r2,r5
   820d0:	18d97604 	addi	r3,r3,26072
   820d4:	18800015 	stw	r2,0(r3)
   820d8:	003fd306 	br	82028 <rx_descriptor_end+0xfff81fc8>

000820dc <_free_r>:
   820dc:	28004126 	beq	r5,zero,821e4 <_free_r+0x108>
   820e0:	defffd04 	addi	sp,sp,-12
   820e4:	dc400115 	stw	r17,4(sp)
   820e8:	dc000015 	stw	r16,0(sp)
   820ec:	2023883a 	mov	r17,r4
   820f0:	2821883a 	mov	r16,r5
   820f4:	dfc00215 	stw	ra,8(sp)
   820f8:	008e7a80 	call	8e7a8 <__malloc_lock>
   820fc:	81ffff17 	ldw	r7,-4(r16)
   82100:	00bfff84 	movi	r2,-2
   82104:	01000274 	movhi	r4,9
   82108:	81bffe04 	addi	r6,r16,-8
   8210c:	3884703a 	and	r2,r7,r2
   82110:	210ab704 	addi	r4,r4,10972
   82114:	308b883a 	add	r5,r6,r2
   82118:	2a400117 	ldw	r9,4(r5)
   8211c:	22000217 	ldw	r8,8(r4)
   82120:	00ffff04 	movi	r3,-4
   82124:	48c6703a 	and	r3,r9,r3
   82128:	2a005726 	beq	r5,r8,82288 <_free_r+0x1ac>
   8212c:	28c00115 	stw	r3,4(r5)
   82130:	39c0004c 	andi	r7,r7,1
   82134:	3800091e 	bne	r7,zero,8215c <_free_r+0x80>
   82138:	823ffe17 	ldw	r8,-8(r16)
   8213c:	22400204 	addi	r9,r4,8
   82140:	320dc83a 	sub	r6,r6,r8
   82144:	31c00217 	ldw	r7,8(r6)
   82148:	1205883a 	add	r2,r2,r8
   8214c:	3a406526 	beq	r7,r9,822e4 <_free_r+0x208>
   82150:	32000317 	ldw	r8,12(r6)
   82154:	3a000315 	stw	r8,12(r7)
   82158:	41c00215 	stw	r7,8(r8)
   8215c:	28cf883a 	add	r7,r5,r3
   82160:	39c00117 	ldw	r7,4(r7)
   82164:	39c0004c 	andi	r7,r7,1
   82168:	38003a26 	beq	r7,zero,82254 <_free_r+0x178>
   8216c:	10c00054 	ori	r3,r2,1
   82170:	30c00115 	stw	r3,4(r6)
   82174:	3087883a 	add	r3,r6,r2
   82178:	18800015 	stw	r2,0(r3)
   8217c:	00c07fc4 	movi	r3,511
   82180:	18801936 	bltu	r3,r2,821e8 <_free_r+0x10c>
   82184:	1004d0fa 	srli	r2,r2,3
   82188:	01c00044 	movi	r7,1
   8218c:	21400117 	ldw	r5,4(r4)
   82190:	10c00044 	addi	r3,r2,1
   82194:	18c7883a 	add	r3,r3,r3
   82198:	1005d0ba 	srai	r2,r2,2
   8219c:	18c7883a 	add	r3,r3,r3
   821a0:	18c7883a 	add	r3,r3,r3
   821a4:	1907883a 	add	r3,r3,r4
   821a8:	3884983a 	sll	r2,r7,r2
   821ac:	19c00017 	ldw	r7,0(r3)
   821b0:	1a3ffe04 	addi	r8,r3,-8
   821b4:	1144b03a 	or	r2,r2,r5
   821b8:	32000315 	stw	r8,12(r6)
   821bc:	31c00215 	stw	r7,8(r6)
   821c0:	20800115 	stw	r2,4(r4)
   821c4:	19800015 	stw	r6,0(r3)
   821c8:	39800315 	stw	r6,12(r7)
   821cc:	8809883a 	mov	r4,r17
   821d0:	dfc00217 	ldw	ra,8(sp)
   821d4:	dc400117 	ldw	r17,4(sp)
   821d8:	dc000017 	ldw	r16,0(sp)
   821dc:	dec00304 	addi	sp,sp,12
   821e0:	008e7cc1 	jmpi	8e7cc <__malloc_unlock>
   821e4:	f800283a 	ret
   821e8:	100ad27a 	srli	r5,r2,9
   821ec:	00c00104 	movi	r3,4
   821f0:	19404a36 	bltu	r3,r5,8231c <_free_r+0x240>
   821f4:	100ad1ba 	srli	r5,r2,6
   821f8:	28c00e44 	addi	r3,r5,57
   821fc:	18c7883a 	add	r3,r3,r3
   82200:	29400e04 	addi	r5,r5,56
   82204:	18c7883a 	add	r3,r3,r3
   82208:	18c7883a 	add	r3,r3,r3
   8220c:	1909883a 	add	r4,r3,r4
   82210:	20c00017 	ldw	r3,0(r4)
   82214:	01c00274 	movhi	r7,9
   82218:	213ffe04 	addi	r4,r4,-8
   8221c:	39cab704 	addi	r7,r7,10972
   82220:	20c04426 	beq	r4,r3,82334 <_free_r+0x258>
   82224:	01ffff04 	movi	r7,-4
   82228:	19400117 	ldw	r5,4(r3)
   8222c:	29ca703a 	and	r5,r5,r7
   82230:	1140022e 	bgeu	r2,r5,8223c <_free_r+0x160>
   82234:	18c00217 	ldw	r3,8(r3)
   82238:	20fffb1e 	bne	r4,r3,82228 <rx_descriptor_end+0xfff821c8>
   8223c:	19000317 	ldw	r4,12(r3)
   82240:	31000315 	stw	r4,12(r6)
   82244:	30c00215 	stw	r3,8(r6)
   82248:	21800215 	stw	r6,8(r4)
   8224c:	19800315 	stw	r6,12(r3)
   82250:	003fde06 	br	821cc <rx_descriptor_end+0xfff8216c>
   82254:	29c00217 	ldw	r7,8(r5)
   82258:	10c5883a 	add	r2,r2,r3
   8225c:	00c00274 	movhi	r3,9
   82260:	18cab904 	addi	r3,r3,10980
   82264:	38c03b26 	beq	r7,r3,82354 <_free_r+0x278>
   82268:	2a000317 	ldw	r8,12(r5)
   8226c:	11400054 	ori	r5,r2,1
   82270:	3087883a 	add	r3,r6,r2
   82274:	3a000315 	stw	r8,12(r7)
   82278:	41c00215 	stw	r7,8(r8)
   8227c:	31400115 	stw	r5,4(r6)
   82280:	18800015 	stw	r2,0(r3)
   82284:	003fbd06 	br	8217c <rx_descriptor_end+0xfff8211c>
   82288:	39c0004c 	andi	r7,r7,1
   8228c:	10c5883a 	add	r2,r2,r3
   82290:	3800071e 	bne	r7,zero,822b0 <_free_r+0x1d4>
   82294:	81fffe17 	ldw	r7,-8(r16)
   82298:	31cdc83a 	sub	r6,r6,r7
   8229c:	30c00317 	ldw	r3,12(r6)
   822a0:	31400217 	ldw	r5,8(r6)
   822a4:	11c5883a 	add	r2,r2,r7
   822a8:	28c00315 	stw	r3,12(r5)
   822ac:	19400215 	stw	r5,8(r3)
   822b0:	10c00054 	ori	r3,r2,1
   822b4:	30c00115 	stw	r3,4(r6)
   822b8:	00c00274 	movhi	r3,9
   822bc:	18d07504 	addi	r3,r3,16852
   822c0:	18c00017 	ldw	r3,0(r3)
   822c4:	21800215 	stw	r6,8(r4)
   822c8:	10ffc036 	bltu	r2,r3,821cc <rx_descriptor_end+0xfff8216c>
   822cc:	00800274 	movhi	r2,9
   822d0:	10986a04 	addi	r2,r2,25000
   822d4:	11400017 	ldw	r5,0(r2)
   822d8:	8809883a 	mov	r4,r17
   822dc:	0081fb80 	call	81fb8 <_malloc_trim_r>
   822e0:	003fba06 	br	821cc <rx_descriptor_end+0xfff8216c>
   822e4:	28c9883a 	add	r4,r5,r3
   822e8:	21000117 	ldw	r4,4(r4)
   822ec:	2100004c 	andi	r4,r4,1
   822f0:	2000391e 	bne	r4,zero,823d8 <_free_r+0x2fc>
   822f4:	29c00217 	ldw	r7,8(r5)
   822f8:	29000317 	ldw	r4,12(r5)
   822fc:	1885883a 	add	r2,r3,r2
   82300:	10c00054 	ori	r3,r2,1
   82304:	39000315 	stw	r4,12(r7)
   82308:	21c00215 	stw	r7,8(r4)
   8230c:	30c00115 	stw	r3,4(r6)
   82310:	308d883a 	add	r6,r6,r2
   82314:	30800015 	stw	r2,0(r6)
   82318:	003fac06 	br	821cc <rx_descriptor_end+0xfff8216c>
   8231c:	00c00504 	movi	r3,20
   82320:	19401536 	bltu	r3,r5,82378 <_free_r+0x29c>
   82324:	28c01704 	addi	r3,r5,92
   82328:	18c7883a 	add	r3,r3,r3
   8232c:	294016c4 	addi	r5,r5,91
   82330:	003fb406 	br	82204 <rx_descriptor_end+0xfff821a4>
   82334:	280bd0ba 	srai	r5,r5,2
   82338:	00c00044 	movi	r3,1
   8233c:	38800117 	ldw	r2,4(r7)
   82340:	194a983a 	sll	r5,r3,r5
   82344:	2007883a 	mov	r3,r4
   82348:	2884b03a 	or	r2,r5,r2
   8234c:	38800115 	stw	r2,4(r7)
   82350:	003fbb06 	br	82240 <rx_descriptor_end+0xfff821e0>
   82354:	21800515 	stw	r6,20(r4)
   82358:	21800415 	stw	r6,16(r4)
   8235c:	10c00054 	ori	r3,r2,1
   82360:	31c00315 	stw	r7,12(r6)
   82364:	31c00215 	stw	r7,8(r6)
   82368:	30c00115 	stw	r3,4(r6)
   8236c:	308d883a 	add	r6,r6,r2
   82370:	30800015 	stw	r2,0(r6)
   82374:	003f9506 	br	821cc <rx_descriptor_end+0xfff8216c>
   82378:	00c01504 	movi	r3,84
   8237c:	19400536 	bltu	r3,r5,82394 <_free_r+0x2b8>
   82380:	100ad33a 	srli	r5,r2,12
   82384:	28c01bc4 	addi	r3,r5,111
   82388:	18c7883a 	add	r3,r3,r3
   8238c:	29401b84 	addi	r5,r5,110
   82390:	003f9c06 	br	82204 <rx_descriptor_end+0xfff821a4>
   82394:	00c05504 	movi	r3,340
   82398:	19400536 	bltu	r3,r5,823b0 <_free_r+0x2d4>
   8239c:	100ad3fa 	srli	r5,r2,15
   823a0:	28c01e04 	addi	r3,r5,120
   823a4:	18c7883a 	add	r3,r3,r3
   823a8:	29401dc4 	addi	r5,r5,119
   823ac:	003f9506 	br	82204 <rx_descriptor_end+0xfff821a4>
   823b0:	00c15504 	movi	r3,1364
   823b4:	19400536 	bltu	r3,r5,823cc <_free_r+0x2f0>
   823b8:	100ad4ba 	srli	r5,r2,18
   823bc:	28c01f44 	addi	r3,r5,125
   823c0:	18c7883a 	add	r3,r3,r3
   823c4:	29401f04 	addi	r5,r5,124
   823c8:	003f8e06 	br	82204 <rx_descriptor_end+0xfff821a4>
   823cc:	00c03f84 	movi	r3,254
   823d0:	01401f84 	movi	r5,126
   823d4:	003f8b06 	br	82204 <rx_descriptor_end+0xfff821a4>
   823d8:	10c00054 	ori	r3,r2,1
   823dc:	30c00115 	stw	r3,4(r6)
   823e0:	308d883a 	add	r6,r6,r2
   823e4:	30800015 	stw	r2,0(r6)
   823e8:	003f7806 	br	821cc <rx_descriptor_end+0xfff8216c>

000823ec <_fwalk>:
   823ec:	defff704 	addi	sp,sp,-36
   823f0:	dd000415 	stw	r20,16(sp)
   823f4:	dfc00815 	stw	ra,32(sp)
   823f8:	ddc00715 	stw	r23,28(sp)
   823fc:	dd800615 	stw	r22,24(sp)
   82400:	dd400515 	stw	r21,20(sp)
   82404:	dcc00315 	stw	r19,12(sp)
   82408:	dc800215 	stw	r18,8(sp)
   8240c:	dc400115 	stw	r17,4(sp)
   82410:	dc000015 	stw	r16,0(sp)
   82414:	2500b804 	addi	r20,r4,736
   82418:	a0002326 	beq	r20,zero,824a8 <_fwalk+0xbc>
   8241c:	282b883a 	mov	r21,r5
   82420:	002f883a 	mov	r23,zero
   82424:	05800044 	movi	r22,1
   82428:	04ffffc4 	movi	r19,-1
   8242c:	a4400117 	ldw	r17,4(r20)
   82430:	a4800217 	ldw	r18,8(r20)
   82434:	8c7fffc4 	addi	r17,r17,-1
   82438:	88000d16 	blt	r17,zero,82470 <_fwalk+0x84>
   8243c:	94000304 	addi	r16,r18,12
   82440:	94800384 	addi	r18,r18,14
   82444:	8080000b 	ldhu	r2,0(r16)
   82448:	8c7fffc4 	addi	r17,r17,-1
   8244c:	813ffd04 	addi	r4,r16,-12
   82450:	b080042e 	bgeu	r22,r2,82464 <_fwalk+0x78>
   82454:	9080000f 	ldh	r2,0(r18)
   82458:	14c00226 	beq	r2,r19,82464 <_fwalk+0x78>
   8245c:	a83ee83a 	callr	r21
   82460:	b8aeb03a 	or	r23,r23,r2
   82464:	84001a04 	addi	r16,r16,104
   82468:	94801a04 	addi	r18,r18,104
   8246c:	8cfff51e 	bne	r17,r19,82444 <rx_descriptor_end+0xfff823e4>
   82470:	a5000017 	ldw	r20,0(r20)
   82474:	a03fed1e 	bne	r20,zero,8242c <rx_descriptor_end+0xfff823cc>
   82478:	b805883a 	mov	r2,r23
   8247c:	dfc00817 	ldw	ra,32(sp)
   82480:	ddc00717 	ldw	r23,28(sp)
   82484:	dd800617 	ldw	r22,24(sp)
   82488:	dd400517 	ldw	r21,20(sp)
   8248c:	dd000417 	ldw	r20,16(sp)
   82490:	dcc00317 	ldw	r19,12(sp)
   82494:	dc800217 	ldw	r18,8(sp)
   82498:	dc400117 	ldw	r17,4(sp)
   8249c:	dc000017 	ldw	r16,0(sp)
   824a0:	dec00904 	addi	sp,sp,36
   824a4:	f800283a 	ret
   824a8:	002f883a 	mov	r23,zero
   824ac:	003ff206 	br	82478 <rx_descriptor_end+0xfff82418>

000824b0 <_fwalk_reent>:
   824b0:	defff704 	addi	sp,sp,-36
   824b4:	dd000415 	stw	r20,16(sp)
   824b8:	dfc00815 	stw	ra,32(sp)
   824bc:	ddc00715 	stw	r23,28(sp)
   824c0:	dd800615 	stw	r22,24(sp)
   824c4:	dd400515 	stw	r21,20(sp)
   824c8:	dcc00315 	stw	r19,12(sp)
   824cc:	dc800215 	stw	r18,8(sp)
   824d0:	dc400115 	stw	r17,4(sp)
   824d4:	dc000015 	stw	r16,0(sp)
   824d8:	2500b804 	addi	r20,r4,736
   824dc:	a0002326 	beq	r20,zero,8256c <_fwalk_reent+0xbc>
   824e0:	282b883a 	mov	r21,r5
   824e4:	2027883a 	mov	r19,r4
   824e8:	002f883a 	mov	r23,zero
   824ec:	05800044 	movi	r22,1
   824f0:	04bfffc4 	movi	r18,-1
   824f4:	a4400117 	ldw	r17,4(r20)
   824f8:	a4000217 	ldw	r16,8(r20)
   824fc:	8c7fffc4 	addi	r17,r17,-1
   82500:	88000c16 	blt	r17,zero,82534 <_fwalk_reent+0x84>
   82504:	84000304 	addi	r16,r16,12
   82508:	8080000b 	ldhu	r2,0(r16)
   8250c:	8c7fffc4 	addi	r17,r17,-1
   82510:	817ffd04 	addi	r5,r16,-12
   82514:	b080052e 	bgeu	r22,r2,8252c <_fwalk_reent+0x7c>
   82518:	8080008f 	ldh	r2,2(r16)
   8251c:	9809883a 	mov	r4,r19
   82520:	14800226 	beq	r2,r18,8252c <_fwalk_reent+0x7c>
   82524:	a83ee83a 	callr	r21
   82528:	b8aeb03a 	or	r23,r23,r2
   8252c:	84001a04 	addi	r16,r16,104
   82530:	8cbff51e 	bne	r17,r18,82508 <rx_descriptor_end+0xfff824a8>
   82534:	a5000017 	ldw	r20,0(r20)
   82538:	a03fee1e 	bne	r20,zero,824f4 <rx_descriptor_end+0xfff82494>
   8253c:	b805883a 	mov	r2,r23
   82540:	dfc00817 	ldw	ra,32(sp)
   82544:	ddc00717 	ldw	r23,28(sp)
   82548:	dd800617 	ldw	r22,24(sp)
   8254c:	dd400517 	ldw	r21,20(sp)
   82550:	dd000417 	ldw	r20,16(sp)
   82554:	dcc00317 	ldw	r19,12(sp)
   82558:	dc800217 	ldw	r18,8(sp)
   8255c:	dc400117 	ldw	r17,4(sp)
   82560:	dc000017 	ldw	r16,0(sp)
   82564:	dec00904 	addi	sp,sp,36
   82568:	f800283a 	ret
   8256c:	002f883a 	mov	r23,zero
   82570:	003ff206 	br	8253c <rx_descriptor_end+0xfff824dc>

00082574 <malloc>:
   82574:	00800274 	movhi	r2,9
   82578:	10907304 	addi	r2,r2,16844
   8257c:	200b883a 	mov	r5,r4
   82580:	11000017 	ldw	r4,0(r2)
   82584:	008259c1 	jmpi	8259c <_malloc_r>

00082588 <free>:
   82588:	00800274 	movhi	r2,9
   8258c:	10907304 	addi	r2,r2,16844
   82590:	200b883a 	mov	r5,r4
   82594:	11000017 	ldw	r4,0(r2)
   82598:	00820dc1 	jmpi	820dc <_free_r>

0008259c <_malloc_r>:
   8259c:	defff504 	addi	sp,sp,-44
   825a0:	dc800315 	stw	r18,12(sp)
   825a4:	dfc00a15 	stw	ra,40(sp)
   825a8:	df000915 	stw	fp,36(sp)
   825ac:	ddc00815 	stw	r23,32(sp)
   825b0:	dd800715 	stw	r22,28(sp)
   825b4:	dd400615 	stw	r21,24(sp)
   825b8:	dd000515 	stw	r20,20(sp)
   825bc:	dcc00415 	stw	r19,16(sp)
   825c0:	dc400215 	stw	r17,8(sp)
   825c4:	dc000115 	stw	r16,4(sp)
   825c8:	288002c4 	addi	r2,r5,11
   825cc:	00c00584 	movi	r3,22
   825d0:	2025883a 	mov	r18,r4
   825d4:	18807f2e 	bgeu	r3,r2,827d4 <_malloc_r+0x238>
   825d8:	047ffe04 	movi	r17,-8
   825dc:	1462703a 	and	r17,r2,r17
   825e0:	8800a316 	blt	r17,zero,82870 <_malloc_r+0x2d4>
   825e4:	8940a236 	bltu	r17,r5,82870 <_malloc_r+0x2d4>
   825e8:	008e7a80 	call	8e7a8 <__malloc_lock>
   825ec:	00807dc4 	movi	r2,503
   825f0:	1441e92e 	bgeu	r2,r17,82d98 <_malloc_r+0x7fc>
   825f4:	8804d27a 	srli	r2,r17,9
   825f8:	1000a126 	beq	r2,zero,82880 <_malloc_r+0x2e4>
   825fc:	00c00104 	movi	r3,4
   82600:	18811e36 	bltu	r3,r2,82a7c <_malloc_r+0x4e0>
   82604:	8804d1ba 	srli	r2,r17,6
   82608:	12000e44 	addi	r8,r2,57
   8260c:	11c00e04 	addi	r7,r2,56
   82610:	4209883a 	add	r4,r8,r8
   82614:	04c00274 	movhi	r19,9
   82618:	2109883a 	add	r4,r4,r4
   8261c:	9ccab704 	addi	r19,r19,10972
   82620:	2109883a 	add	r4,r4,r4
   82624:	9909883a 	add	r4,r19,r4
   82628:	24000117 	ldw	r16,4(r4)
   8262c:	213ffe04 	addi	r4,r4,-8
   82630:	24009726 	beq	r4,r16,82890 <_malloc_r+0x2f4>
   82634:	80800117 	ldw	r2,4(r16)
   82638:	01bfff04 	movi	r6,-4
   8263c:	014003c4 	movi	r5,15
   82640:	1184703a 	and	r2,r2,r6
   82644:	1447c83a 	sub	r3,r2,r17
   82648:	28c00716 	blt	r5,r3,82668 <_malloc_r+0xcc>
   8264c:	1800920e 	bge	r3,zero,82898 <_malloc_r+0x2fc>
   82650:	84000317 	ldw	r16,12(r16)
   82654:	24008e26 	beq	r4,r16,82890 <_malloc_r+0x2f4>
   82658:	80800117 	ldw	r2,4(r16)
   8265c:	1184703a 	and	r2,r2,r6
   82660:	1447c83a 	sub	r3,r2,r17
   82664:	28fff90e 	bge	r5,r3,8264c <rx_descriptor_end+0xfff825ec>
   82668:	3809883a 	mov	r4,r7
   8266c:	01800274 	movhi	r6,9
   82670:	9c000417 	ldw	r16,16(r19)
   82674:	318ab704 	addi	r6,r6,10972
   82678:	32000204 	addi	r8,r6,8
   8267c:	82013426 	beq	r16,r8,82b50 <_malloc_r+0x5b4>
   82680:	80c00117 	ldw	r3,4(r16)
   82684:	00bfff04 	movi	r2,-4
   82688:	188e703a 	and	r7,r3,r2
   8268c:	3c45c83a 	sub	r2,r7,r17
   82690:	00c003c4 	movi	r3,15
   82694:	18811f16 	blt	r3,r2,82b14 <_malloc_r+0x578>
   82698:	32000515 	stw	r8,20(r6)
   8269c:	32000415 	stw	r8,16(r6)
   826a0:	10007f0e 	bge	r2,zero,828a0 <_malloc_r+0x304>
   826a4:	00807fc4 	movi	r2,511
   826a8:	11c0fd36 	bltu	r2,r7,82aa0 <_malloc_r+0x504>
   826ac:	3806d0fa 	srli	r3,r7,3
   826b0:	01c00044 	movi	r7,1
   826b4:	30800117 	ldw	r2,4(r6)
   826b8:	19400044 	addi	r5,r3,1
   826bc:	294b883a 	add	r5,r5,r5
   826c0:	1807d0ba 	srai	r3,r3,2
   826c4:	294b883a 	add	r5,r5,r5
   826c8:	294b883a 	add	r5,r5,r5
   826cc:	298b883a 	add	r5,r5,r6
   826d0:	38c6983a 	sll	r3,r7,r3
   826d4:	29c00017 	ldw	r7,0(r5)
   826d8:	2a7ffe04 	addi	r9,r5,-8
   826dc:	1886b03a 	or	r3,r3,r2
   826e0:	82400315 	stw	r9,12(r16)
   826e4:	81c00215 	stw	r7,8(r16)
   826e8:	30c00115 	stw	r3,4(r6)
   826ec:	2c000015 	stw	r16,0(r5)
   826f0:	3c000315 	stw	r16,12(r7)
   826f4:	2005d0ba 	srai	r2,r4,2
   826f8:	01400044 	movi	r5,1
   826fc:	288a983a 	sll	r5,r5,r2
   82700:	19406f36 	bltu	r3,r5,828c0 <_malloc_r+0x324>
   82704:	28c4703a 	and	r2,r5,r3
   82708:	10000a1e 	bne	r2,zero,82734 <_malloc_r+0x198>
   8270c:	00bfff04 	movi	r2,-4
   82710:	294b883a 	add	r5,r5,r5
   82714:	2088703a 	and	r4,r4,r2
   82718:	28c4703a 	and	r2,r5,r3
   8271c:	21000104 	addi	r4,r4,4
   82720:	1000041e 	bne	r2,zero,82734 <_malloc_r+0x198>
   82724:	294b883a 	add	r5,r5,r5
   82728:	28c4703a 	and	r2,r5,r3
   8272c:	21000104 	addi	r4,r4,4
   82730:	103ffc26 	beq	r2,zero,82724 <rx_descriptor_end+0xfff826c4>
   82734:	02bfff04 	movi	r10,-4
   82738:	024003c4 	movi	r9,15
   8273c:	21800044 	addi	r6,r4,1
   82740:	318d883a 	add	r6,r6,r6
   82744:	318d883a 	add	r6,r6,r6
   82748:	318d883a 	add	r6,r6,r6
   8274c:	998d883a 	add	r6,r19,r6
   82750:	333ffe04 	addi	r12,r6,-8
   82754:	2017883a 	mov	r11,r4
   82758:	31800104 	addi	r6,r6,4
   8275c:	34000017 	ldw	r16,0(r6)
   82760:	31fffd04 	addi	r7,r6,-12
   82764:	81c0041e 	bne	r16,r7,82778 <_malloc_r+0x1dc>
   82768:	0000fb06 	br	82b58 <_malloc_r+0x5bc>
   8276c:	1801030e 	bge	r3,zero,82b7c <_malloc_r+0x5e0>
   82770:	84000317 	ldw	r16,12(r16)
   82774:	81c0f826 	beq	r16,r7,82b58 <_malloc_r+0x5bc>
   82778:	80800117 	ldw	r2,4(r16)
   8277c:	1284703a 	and	r2,r2,r10
   82780:	1447c83a 	sub	r3,r2,r17
   82784:	48fff90e 	bge	r9,r3,8276c <rx_descriptor_end+0xfff8270c>
   82788:	80800317 	ldw	r2,12(r16)
   8278c:	81000217 	ldw	r4,8(r16)
   82790:	89400054 	ori	r5,r17,1
   82794:	81400115 	stw	r5,4(r16)
   82798:	20800315 	stw	r2,12(r4)
   8279c:	11000215 	stw	r4,8(r2)
   827a0:	8463883a 	add	r17,r16,r17
   827a4:	9c400515 	stw	r17,20(r19)
   827a8:	9c400415 	stw	r17,16(r19)
   827ac:	18800054 	ori	r2,r3,1
   827b0:	88800115 	stw	r2,4(r17)
   827b4:	8a000315 	stw	r8,12(r17)
   827b8:	8a000215 	stw	r8,8(r17)
   827bc:	88e3883a 	add	r17,r17,r3
   827c0:	88c00015 	stw	r3,0(r17)
   827c4:	9009883a 	mov	r4,r18
   827c8:	008e7cc0 	call	8e7cc <__malloc_unlock>
   827cc:	80800204 	addi	r2,r16,8
   827d0:	00001b06 	br	82840 <_malloc_r+0x2a4>
   827d4:	04400404 	movi	r17,16
   827d8:	89402536 	bltu	r17,r5,82870 <_malloc_r+0x2d4>
   827dc:	008e7a80 	call	8e7a8 <__malloc_lock>
   827e0:	00800184 	movi	r2,6
   827e4:	01000084 	movi	r4,2
   827e8:	04c00274 	movhi	r19,9
   827ec:	1085883a 	add	r2,r2,r2
   827f0:	9ccab704 	addi	r19,r19,10972
   827f4:	1085883a 	add	r2,r2,r2
   827f8:	9885883a 	add	r2,r19,r2
   827fc:	14000117 	ldw	r16,4(r2)
   82800:	10fffe04 	addi	r3,r2,-8
   82804:	80c0d926 	beq	r16,r3,82b6c <_malloc_r+0x5d0>
   82808:	80c00117 	ldw	r3,4(r16)
   8280c:	81000317 	ldw	r4,12(r16)
   82810:	00bfff04 	movi	r2,-4
   82814:	1884703a 	and	r2,r3,r2
   82818:	81400217 	ldw	r5,8(r16)
   8281c:	8085883a 	add	r2,r16,r2
   82820:	10c00117 	ldw	r3,4(r2)
   82824:	29000315 	stw	r4,12(r5)
   82828:	21400215 	stw	r5,8(r4)
   8282c:	18c00054 	ori	r3,r3,1
   82830:	10c00115 	stw	r3,4(r2)
   82834:	9009883a 	mov	r4,r18
   82838:	008e7cc0 	call	8e7cc <__malloc_unlock>
   8283c:	80800204 	addi	r2,r16,8
   82840:	dfc00a17 	ldw	ra,40(sp)
   82844:	df000917 	ldw	fp,36(sp)
   82848:	ddc00817 	ldw	r23,32(sp)
   8284c:	dd800717 	ldw	r22,28(sp)
   82850:	dd400617 	ldw	r21,24(sp)
   82854:	dd000517 	ldw	r20,20(sp)
   82858:	dcc00417 	ldw	r19,16(sp)
   8285c:	dc800317 	ldw	r18,12(sp)
   82860:	dc400217 	ldw	r17,8(sp)
   82864:	dc000117 	ldw	r16,4(sp)
   82868:	dec00b04 	addi	sp,sp,44
   8286c:	f800283a 	ret
   82870:	00800304 	movi	r2,12
   82874:	90800015 	stw	r2,0(r18)
   82878:	0005883a 	mov	r2,zero
   8287c:	003ff006 	br	82840 <rx_descriptor_end+0xfff827e0>
   82880:	01002004 	movi	r4,128
   82884:	02001004 	movi	r8,64
   82888:	01c00fc4 	movi	r7,63
   8288c:	003f6106 	br	82614 <rx_descriptor_end+0xfff825b4>
   82890:	4009883a 	mov	r4,r8
   82894:	003f7506 	br	8266c <rx_descriptor_end+0xfff8260c>
   82898:	81000317 	ldw	r4,12(r16)
   8289c:	003fde06 	br	82818 <rx_descriptor_end+0xfff827b8>
   828a0:	81c5883a 	add	r2,r16,r7
   828a4:	11400117 	ldw	r5,4(r2)
   828a8:	9009883a 	mov	r4,r18
   828ac:	29400054 	ori	r5,r5,1
   828b0:	11400115 	stw	r5,4(r2)
   828b4:	008e7cc0 	call	8e7cc <__malloc_unlock>
   828b8:	80800204 	addi	r2,r16,8
   828bc:	003fe006 	br	82840 <rx_descriptor_end+0xfff827e0>
   828c0:	9c000217 	ldw	r16,8(r19)
   828c4:	00bfff04 	movi	r2,-4
   828c8:	85800117 	ldw	r22,4(r16)
   828cc:	b0ac703a 	and	r22,r22,r2
   828d0:	b4400336 	bltu	r22,r17,828e0 <_malloc_r+0x344>
   828d4:	b445c83a 	sub	r2,r22,r17
   828d8:	00c003c4 	movi	r3,15
   828dc:	18805d16 	blt	r3,r2,82a54 <_malloc_r+0x4b8>
   828e0:	05c00274 	movhi	r23,9
   828e4:	00800274 	movhi	r2,9
   828e8:	10986a04 	addi	r2,r2,25000
   828ec:	bdd07404 	addi	r23,r23,16848
   828f0:	15400017 	ldw	r21,0(r2)
   828f4:	b8c00017 	ldw	r3,0(r23)
   828f8:	00bfffc4 	movi	r2,-1
   828fc:	858d883a 	add	r6,r16,r22
   82900:	8d6b883a 	add	r21,r17,r21
   82904:	1880ea26 	beq	r3,r2,82cb0 <_malloc_r+0x714>
   82908:	ad4403c4 	addi	r21,r21,4111
   8290c:	00bc0004 	movi	r2,-4096
   82910:	a8aa703a 	and	r21,r21,r2
   82914:	a80b883a 	mov	r5,r21
   82918:	9009883a 	mov	r4,r18
   8291c:	d9800015 	stw	r6,0(sp)
   82920:	00830980 	call	83098 <_sbrk_r>
   82924:	1029883a 	mov	r20,r2
   82928:	00bfffc4 	movi	r2,-1
   8292c:	d9800017 	ldw	r6,0(sp)
   82930:	a080e826 	beq	r20,r2,82cd4 <_malloc_r+0x738>
   82934:	a180a636 	bltu	r20,r6,82bd0 <_malloc_r+0x634>
   82938:	07000274 	movhi	fp,9
   8293c:	e7197604 	addi	fp,fp,26072
   82940:	e0800017 	ldw	r2,0(fp)
   82944:	a887883a 	add	r3,r21,r2
   82948:	e0c00015 	stw	r3,0(fp)
   8294c:	3500e626 	beq	r6,r20,82ce8 <_malloc_r+0x74c>
   82950:	b9000017 	ldw	r4,0(r23)
   82954:	00bfffc4 	movi	r2,-1
   82958:	2080ee26 	beq	r4,r2,82d14 <_malloc_r+0x778>
   8295c:	a185c83a 	sub	r2,r20,r6
   82960:	10c5883a 	add	r2,r2,r3
   82964:	e0800015 	stw	r2,0(fp)
   82968:	a0c001cc 	andi	r3,r20,7
   8296c:	1800bc26 	beq	r3,zero,82c60 <_malloc_r+0x6c4>
   82970:	a0e9c83a 	sub	r20,r20,r3
   82974:	00840204 	movi	r2,4104
   82978:	a5000204 	addi	r20,r20,8
   8297c:	10c7c83a 	sub	r3,r2,r3
   82980:	a545883a 	add	r2,r20,r21
   82984:	1083ffcc 	andi	r2,r2,4095
   82988:	18abc83a 	sub	r21,r3,r2
   8298c:	a80b883a 	mov	r5,r21
   82990:	9009883a 	mov	r4,r18
   82994:	00830980 	call	83098 <_sbrk_r>
   82998:	00ffffc4 	movi	r3,-1
   8299c:	10c0e126 	beq	r2,r3,82d24 <_malloc_r+0x788>
   829a0:	1505c83a 	sub	r2,r2,r20
   829a4:	1545883a 	add	r2,r2,r21
   829a8:	10800054 	ori	r2,r2,1
   829ac:	e0c00017 	ldw	r3,0(fp)
   829b0:	9d000215 	stw	r20,8(r19)
   829b4:	a0800115 	stw	r2,4(r20)
   829b8:	a8c7883a 	add	r3,r21,r3
   829bc:	e0c00015 	stw	r3,0(fp)
   829c0:	84c00e26 	beq	r16,r19,829fc <_malloc_r+0x460>
   829c4:	018003c4 	movi	r6,15
   829c8:	3580a72e 	bgeu	r6,r22,82c68 <_malloc_r+0x6cc>
   829cc:	81400117 	ldw	r5,4(r16)
   829d0:	013ffe04 	movi	r4,-8
   829d4:	b0bffd04 	addi	r2,r22,-12
   829d8:	1104703a 	and	r2,r2,r4
   829dc:	2900004c 	andi	r4,r5,1
   829e0:	2088b03a 	or	r4,r4,r2
   829e4:	81000115 	stw	r4,4(r16)
   829e8:	01400144 	movi	r5,5
   829ec:	8089883a 	add	r4,r16,r2
   829f0:	21400115 	stw	r5,4(r4)
   829f4:	21400215 	stw	r5,8(r4)
   829f8:	3080cd36 	bltu	r6,r2,82d30 <_malloc_r+0x794>
   829fc:	00800274 	movhi	r2,9
   82a00:	10986904 	addi	r2,r2,24996
   82a04:	11000017 	ldw	r4,0(r2)
   82a08:	20c0012e 	bgeu	r4,r3,82a10 <_malloc_r+0x474>
   82a0c:	10c00015 	stw	r3,0(r2)
   82a10:	00800274 	movhi	r2,9
   82a14:	10986804 	addi	r2,r2,24992
   82a18:	11000017 	ldw	r4,0(r2)
   82a1c:	9c000217 	ldw	r16,8(r19)
   82a20:	20c0012e 	bgeu	r4,r3,82a28 <_malloc_r+0x48c>
   82a24:	10c00015 	stw	r3,0(r2)
   82a28:	80c00117 	ldw	r3,4(r16)
   82a2c:	00bfff04 	movi	r2,-4
   82a30:	1886703a 	and	r3,r3,r2
   82a34:	1c45c83a 	sub	r2,r3,r17
   82a38:	1c400236 	bltu	r3,r17,82a44 <_malloc_r+0x4a8>
   82a3c:	00c003c4 	movi	r3,15
   82a40:	18800416 	blt	r3,r2,82a54 <_malloc_r+0x4b8>
   82a44:	9009883a 	mov	r4,r18
   82a48:	008e7cc0 	call	8e7cc <__malloc_unlock>
   82a4c:	0005883a 	mov	r2,zero
   82a50:	003f7b06 	br	82840 <rx_descriptor_end+0xfff827e0>
   82a54:	88c00054 	ori	r3,r17,1
   82a58:	80c00115 	stw	r3,4(r16)
   82a5c:	8463883a 	add	r17,r16,r17
   82a60:	10800054 	ori	r2,r2,1
   82a64:	9c400215 	stw	r17,8(r19)
   82a68:	88800115 	stw	r2,4(r17)
   82a6c:	9009883a 	mov	r4,r18
   82a70:	008e7cc0 	call	8e7cc <__malloc_unlock>
   82a74:	80800204 	addi	r2,r16,8
   82a78:	003f7106 	br	82840 <rx_descriptor_end+0xfff827e0>
   82a7c:	00c00504 	movi	r3,20
   82a80:	18804a2e 	bgeu	r3,r2,82bac <_malloc_r+0x610>
   82a84:	00c01504 	movi	r3,84
   82a88:	18806e36 	bltu	r3,r2,82c44 <_malloc_r+0x6a8>
   82a8c:	8804d33a 	srli	r2,r17,12
   82a90:	12001bc4 	addi	r8,r2,111
   82a94:	11c01b84 	addi	r7,r2,110
   82a98:	4209883a 	add	r4,r8,r8
   82a9c:	003edd06 	br	82614 <rx_descriptor_end+0xfff825b4>
   82aa0:	3804d27a 	srli	r2,r7,9
   82aa4:	00c00104 	movi	r3,4
   82aa8:	1880442e 	bgeu	r3,r2,82bbc <_malloc_r+0x620>
   82aac:	00c00504 	movi	r3,20
   82ab0:	18808136 	bltu	r3,r2,82cb8 <_malloc_r+0x71c>
   82ab4:	11401704 	addi	r5,r2,92
   82ab8:	10c016c4 	addi	r3,r2,91
   82abc:	294b883a 	add	r5,r5,r5
   82ac0:	294b883a 	add	r5,r5,r5
   82ac4:	294b883a 	add	r5,r5,r5
   82ac8:	994b883a 	add	r5,r19,r5
   82acc:	28800017 	ldw	r2,0(r5)
   82ad0:	01800274 	movhi	r6,9
   82ad4:	297ffe04 	addi	r5,r5,-8
   82ad8:	318ab704 	addi	r6,r6,10972
   82adc:	28806526 	beq	r5,r2,82c74 <_malloc_r+0x6d8>
   82ae0:	01bfff04 	movi	r6,-4
   82ae4:	10c00117 	ldw	r3,4(r2)
   82ae8:	1986703a 	and	r3,r3,r6
   82aec:	38c0022e 	bgeu	r7,r3,82af8 <_malloc_r+0x55c>
   82af0:	10800217 	ldw	r2,8(r2)
   82af4:	28bffb1e 	bne	r5,r2,82ae4 <rx_descriptor_end+0xfff82a84>
   82af8:	11400317 	ldw	r5,12(r2)
   82afc:	98c00117 	ldw	r3,4(r19)
   82b00:	81400315 	stw	r5,12(r16)
   82b04:	80800215 	stw	r2,8(r16)
   82b08:	2c000215 	stw	r16,8(r5)
   82b0c:	14000315 	stw	r16,12(r2)
   82b10:	003ef806 	br	826f4 <rx_descriptor_end+0xfff82694>
   82b14:	88c00054 	ori	r3,r17,1
   82b18:	80c00115 	stw	r3,4(r16)
   82b1c:	8463883a 	add	r17,r16,r17
   82b20:	34400515 	stw	r17,20(r6)
   82b24:	34400415 	stw	r17,16(r6)
   82b28:	10c00054 	ori	r3,r2,1
   82b2c:	8a000315 	stw	r8,12(r17)
   82b30:	8a000215 	stw	r8,8(r17)
   82b34:	88c00115 	stw	r3,4(r17)
   82b38:	88a3883a 	add	r17,r17,r2
   82b3c:	88800015 	stw	r2,0(r17)
   82b40:	9009883a 	mov	r4,r18
   82b44:	008e7cc0 	call	8e7cc <__malloc_unlock>
   82b48:	80800204 	addi	r2,r16,8
   82b4c:	003f3c06 	br	82840 <rx_descriptor_end+0xfff827e0>
   82b50:	30c00117 	ldw	r3,4(r6)
   82b54:	003ee706 	br	826f4 <rx_descriptor_end+0xfff82694>
   82b58:	5ac00044 	addi	r11,r11,1
   82b5c:	588000cc 	andi	r2,r11,3
   82b60:	31800204 	addi	r6,r6,8
   82b64:	103efd1e 	bne	r2,zero,8275c <rx_descriptor_end+0xfff826fc>
   82b68:	00002406 	br	82bfc <_malloc_r+0x660>
   82b6c:	14000317 	ldw	r16,12(r2)
   82b70:	143f251e 	bne	r2,r16,82808 <rx_descriptor_end+0xfff827a8>
   82b74:	21000084 	addi	r4,r4,2
   82b78:	003ebc06 	br	8266c <rx_descriptor_end+0xfff8260c>
   82b7c:	8085883a 	add	r2,r16,r2
   82b80:	10c00117 	ldw	r3,4(r2)
   82b84:	81000317 	ldw	r4,12(r16)
   82b88:	81400217 	ldw	r5,8(r16)
   82b8c:	18c00054 	ori	r3,r3,1
   82b90:	10c00115 	stw	r3,4(r2)
   82b94:	29000315 	stw	r4,12(r5)
   82b98:	21400215 	stw	r5,8(r4)
   82b9c:	9009883a 	mov	r4,r18
   82ba0:	008e7cc0 	call	8e7cc <__malloc_unlock>
   82ba4:	80800204 	addi	r2,r16,8
   82ba8:	003f2506 	br	82840 <rx_descriptor_end+0xfff827e0>
   82bac:	12001704 	addi	r8,r2,92
   82bb0:	11c016c4 	addi	r7,r2,91
   82bb4:	4209883a 	add	r4,r8,r8
   82bb8:	003e9606 	br	82614 <rx_descriptor_end+0xfff825b4>
   82bbc:	3804d1ba 	srli	r2,r7,6
   82bc0:	11400e44 	addi	r5,r2,57
   82bc4:	10c00e04 	addi	r3,r2,56
   82bc8:	294b883a 	add	r5,r5,r5
   82bcc:	003fbc06 	br	82ac0 <rx_descriptor_end+0xfff82a60>
   82bd0:	84ff5926 	beq	r16,r19,82938 <rx_descriptor_end+0xfff828d8>
   82bd4:	00800274 	movhi	r2,9
   82bd8:	108ab704 	addi	r2,r2,10972
   82bdc:	14000217 	ldw	r16,8(r2)
   82be0:	00bfff04 	movi	r2,-4
   82be4:	80c00117 	ldw	r3,4(r16)
   82be8:	1886703a 	and	r3,r3,r2
   82bec:	003f9106 	br	82a34 <rx_descriptor_end+0xfff829d4>
   82bf0:	60800217 	ldw	r2,8(r12)
   82bf4:	213fffc4 	addi	r4,r4,-1
   82bf8:	1300651e 	bne	r2,r12,82d90 <_malloc_r+0x7f4>
   82bfc:	208000cc 	andi	r2,r4,3
   82c00:	633ffe04 	addi	r12,r12,-8
   82c04:	103ffa1e 	bne	r2,zero,82bf0 <rx_descriptor_end+0xfff82b90>
   82c08:	98800117 	ldw	r2,4(r19)
   82c0c:	0146303a 	nor	r3,zero,r5
   82c10:	1884703a 	and	r2,r3,r2
   82c14:	98800115 	stw	r2,4(r19)
   82c18:	294b883a 	add	r5,r5,r5
   82c1c:	117f2836 	bltu	r2,r5,828c0 <rx_descriptor_end+0xfff82860>
   82c20:	283f2726 	beq	r5,zero,828c0 <rx_descriptor_end+0xfff82860>
   82c24:	2886703a 	and	r3,r5,r2
   82c28:	5809883a 	mov	r4,r11
   82c2c:	183ec31e 	bne	r3,zero,8273c <rx_descriptor_end+0xfff826dc>
   82c30:	294b883a 	add	r5,r5,r5
   82c34:	2886703a 	and	r3,r5,r2
   82c38:	21000104 	addi	r4,r4,4
   82c3c:	183ffc26 	beq	r3,zero,82c30 <rx_descriptor_end+0xfff82bd0>
   82c40:	003ebe06 	br	8273c <rx_descriptor_end+0xfff826dc>
   82c44:	00c05504 	movi	r3,340
   82c48:	18801236 	bltu	r3,r2,82c94 <_malloc_r+0x6f8>
   82c4c:	8804d3fa 	srli	r2,r17,15
   82c50:	12001e04 	addi	r8,r2,120
   82c54:	11c01dc4 	addi	r7,r2,119
   82c58:	4209883a 	add	r4,r8,r8
   82c5c:	003e6d06 	br	82614 <rx_descriptor_end+0xfff825b4>
   82c60:	00c40004 	movi	r3,4096
   82c64:	003f4606 	br	82980 <rx_descriptor_end+0xfff82920>
   82c68:	00800044 	movi	r2,1
   82c6c:	a0800115 	stw	r2,4(r20)
   82c70:	003f7406 	br	82a44 <rx_descriptor_end+0xfff829e4>
   82c74:	1805d0ba 	srai	r2,r3,2
   82c78:	01c00044 	movi	r7,1
   82c7c:	30c00117 	ldw	r3,4(r6)
   82c80:	388e983a 	sll	r7,r7,r2
   82c84:	2805883a 	mov	r2,r5
   82c88:	38c6b03a 	or	r3,r7,r3
   82c8c:	30c00115 	stw	r3,4(r6)
   82c90:	003f9b06 	br	82b00 <rx_descriptor_end+0xfff82aa0>
   82c94:	00c15504 	movi	r3,1364
   82c98:	18801a36 	bltu	r3,r2,82d04 <_malloc_r+0x768>
   82c9c:	8804d4ba 	srli	r2,r17,18
   82ca0:	12001f44 	addi	r8,r2,125
   82ca4:	11c01f04 	addi	r7,r2,124
   82ca8:	4209883a 	add	r4,r8,r8
   82cac:	003e5906 	br	82614 <rx_descriptor_end+0xfff825b4>
   82cb0:	ad400404 	addi	r21,r21,16
   82cb4:	003f1706 	br	82914 <rx_descriptor_end+0xfff828b4>
   82cb8:	00c01504 	movi	r3,84
   82cbc:	18802336 	bltu	r3,r2,82d4c <_malloc_r+0x7b0>
   82cc0:	3804d33a 	srli	r2,r7,12
   82cc4:	11401bc4 	addi	r5,r2,111
   82cc8:	10c01b84 	addi	r3,r2,110
   82ccc:	294b883a 	add	r5,r5,r5
   82cd0:	003f7b06 	br	82ac0 <rx_descriptor_end+0xfff82a60>
   82cd4:	9c000217 	ldw	r16,8(r19)
   82cd8:	00bfff04 	movi	r2,-4
   82cdc:	80c00117 	ldw	r3,4(r16)
   82ce0:	1886703a 	and	r3,r3,r2
   82ce4:	003f5306 	br	82a34 <rx_descriptor_end+0xfff829d4>
   82ce8:	3083ffcc 	andi	r2,r6,4095
   82cec:	103f181e 	bne	r2,zero,82950 <rx_descriptor_end+0xfff828f0>
   82cf0:	99000217 	ldw	r4,8(r19)
   82cf4:	b545883a 	add	r2,r22,r21
   82cf8:	10800054 	ori	r2,r2,1
   82cfc:	20800115 	stw	r2,4(r4)
   82d00:	003f3e06 	br	829fc <rx_descriptor_end+0xfff8299c>
   82d04:	01003f84 	movi	r4,254
   82d08:	02001fc4 	movi	r8,127
   82d0c:	01c01f84 	movi	r7,126
   82d10:	003e4006 	br	82614 <rx_descriptor_end+0xfff825b4>
   82d14:	00800274 	movhi	r2,9
   82d18:	10907404 	addi	r2,r2,16848
   82d1c:	15000015 	stw	r20,0(r2)
   82d20:	003f1106 	br	82968 <rx_descriptor_end+0xfff82908>
   82d24:	00800044 	movi	r2,1
   82d28:	002b883a 	mov	r21,zero
   82d2c:	003f1f06 	br	829ac <rx_descriptor_end+0xfff8294c>
   82d30:	81400204 	addi	r5,r16,8
   82d34:	9009883a 	mov	r4,r18
   82d38:	00820dc0 	call	820dc <_free_r>
   82d3c:	00800274 	movhi	r2,9
   82d40:	10997604 	addi	r2,r2,26072
   82d44:	10c00017 	ldw	r3,0(r2)
   82d48:	003f2c06 	br	829fc <rx_descriptor_end+0xfff8299c>
   82d4c:	00c05504 	movi	r3,340
   82d50:	18800536 	bltu	r3,r2,82d68 <_malloc_r+0x7cc>
   82d54:	3804d3fa 	srli	r2,r7,15
   82d58:	11401e04 	addi	r5,r2,120
   82d5c:	10c01dc4 	addi	r3,r2,119
   82d60:	294b883a 	add	r5,r5,r5
   82d64:	003f5606 	br	82ac0 <rx_descriptor_end+0xfff82a60>
   82d68:	00c15504 	movi	r3,1364
   82d6c:	18800536 	bltu	r3,r2,82d84 <_malloc_r+0x7e8>
   82d70:	3804d4ba 	srli	r2,r7,18
   82d74:	11401f44 	addi	r5,r2,125
   82d78:	10c01f04 	addi	r3,r2,124
   82d7c:	294b883a 	add	r5,r5,r5
   82d80:	003f4f06 	br	82ac0 <rx_descriptor_end+0xfff82a60>
   82d84:	01403f84 	movi	r5,254
   82d88:	00c01f84 	movi	r3,126
   82d8c:	003f4c06 	br	82ac0 <rx_descriptor_end+0xfff82a60>
   82d90:	98800117 	ldw	r2,4(r19)
   82d94:	003fa006 	br	82c18 <rx_descriptor_end+0xfff82bb8>
   82d98:	8808d0fa 	srli	r4,r17,3
   82d9c:	20800044 	addi	r2,r4,1
   82da0:	1085883a 	add	r2,r2,r2
   82da4:	003e9006 	br	827e8 <rx_descriptor_end+0xfff82788>

00082da8 <memmove>:
   82da8:	2005883a 	mov	r2,r4
   82dac:	29000b2e 	bgeu	r5,r4,82ddc <memmove+0x34>
   82db0:	298f883a 	add	r7,r5,r6
   82db4:	21c0092e 	bgeu	r4,r7,82ddc <memmove+0x34>
   82db8:	2187883a 	add	r3,r4,r6
   82dbc:	198bc83a 	sub	r5,r3,r6
   82dc0:	30004826 	beq	r6,zero,82ee4 <memmove+0x13c>
   82dc4:	39ffffc4 	addi	r7,r7,-1
   82dc8:	39000003 	ldbu	r4,0(r7)
   82dcc:	18ffffc4 	addi	r3,r3,-1
   82dd0:	19000005 	stb	r4,0(r3)
   82dd4:	28fffb1e 	bne	r5,r3,82dc4 <rx_descriptor_end+0xfff82d64>
   82dd8:	f800283a 	ret
   82ddc:	00c003c4 	movi	r3,15
   82de0:	1980412e 	bgeu	r3,r6,82ee8 <memmove+0x140>
   82de4:	2886b03a 	or	r3,r5,r2
   82de8:	18c000cc 	andi	r3,r3,3
   82dec:	1800401e 	bne	r3,zero,82ef0 <memmove+0x148>
   82df0:	33fffc04 	addi	r15,r6,-16
   82df4:	781ed13a 	srli	r15,r15,4
   82df8:	28c00104 	addi	r3,r5,4
   82dfc:	13400104 	addi	r13,r2,4
   82e00:	781c913a 	slli	r14,r15,4
   82e04:	2b000204 	addi	r12,r5,8
   82e08:	12c00204 	addi	r11,r2,8
   82e0c:	73800504 	addi	r14,r14,20
   82e10:	2a800304 	addi	r10,r5,12
   82e14:	12400304 	addi	r9,r2,12
   82e18:	2b9d883a 	add	r14,r5,r14
   82e1c:	2811883a 	mov	r8,r5
   82e20:	100f883a 	mov	r7,r2
   82e24:	41000017 	ldw	r4,0(r8)
   82e28:	39c00404 	addi	r7,r7,16
   82e2c:	18c00404 	addi	r3,r3,16
   82e30:	393ffc15 	stw	r4,-16(r7)
   82e34:	193ffc17 	ldw	r4,-16(r3)
   82e38:	6b400404 	addi	r13,r13,16
   82e3c:	5ac00404 	addi	r11,r11,16
   82e40:	693ffc15 	stw	r4,-16(r13)
   82e44:	61000017 	ldw	r4,0(r12)
   82e48:	4a400404 	addi	r9,r9,16
   82e4c:	42000404 	addi	r8,r8,16
   82e50:	593ffc15 	stw	r4,-16(r11)
   82e54:	51000017 	ldw	r4,0(r10)
   82e58:	63000404 	addi	r12,r12,16
   82e5c:	52800404 	addi	r10,r10,16
   82e60:	493ffc15 	stw	r4,-16(r9)
   82e64:	1bbfef1e 	bne	r3,r14,82e24 <rx_descriptor_end+0xfff82dc4>
   82e68:	79000044 	addi	r4,r15,1
   82e6c:	2008913a 	slli	r4,r4,4
   82e70:	328003cc 	andi	r10,r6,15
   82e74:	02c000c4 	movi	r11,3
   82e78:	1107883a 	add	r3,r2,r4
   82e7c:	290b883a 	add	r5,r5,r4
   82e80:	5a801e2e 	bgeu	r11,r10,82efc <memmove+0x154>
   82e84:	1813883a 	mov	r9,r3
   82e88:	2811883a 	mov	r8,r5
   82e8c:	500f883a 	mov	r7,r10
   82e90:	41000017 	ldw	r4,0(r8)
   82e94:	4a400104 	addi	r9,r9,4
   82e98:	39ffff04 	addi	r7,r7,-4
   82e9c:	493fff15 	stw	r4,-4(r9)
   82ea0:	42000104 	addi	r8,r8,4
   82ea4:	59fffa36 	bltu	r11,r7,82e90 <rx_descriptor_end+0xfff82e30>
   82ea8:	513fff04 	addi	r4,r10,-4
   82eac:	2008d0ba 	srli	r4,r4,2
   82eb0:	318000cc 	andi	r6,r6,3
   82eb4:	21000044 	addi	r4,r4,1
   82eb8:	2109883a 	add	r4,r4,r4
   82ebc:	2109883a 	add	r4,r4,r4
   82ec0:	1907883a 	add	r3,r3,r4
   82ec4:	290b883a 	add	r5,r5,r4
   82ec8:	30000b26 	beq	r6,zero,82ef8 <memmove+0x150>
   82ecc:	198d883a 	add	r6,r3,r6
   82ed0:	29c00003 	ldbu	r7,0(r5)
   82ed4:	18c00044 	addi	r3,r3,1
   82ed8:	29400044 	addi	r5,r5,1
   82edc:	19ffffc5 	stb	r7,-1(r3)
   82ee0:	19bffb1e 	bne	r3,r6,82ed0 <rx_descriptor_end+0xfff82e70>
   82ee4:	f800283a 	ret
   82ee8:	1007883a 	mov	r3,r2
   82eec:	003ff606 	br	82ec8 <rx_descriptor_end+0xfff82e68>
   82ef0:	1007883a 	mov	r3,r2
   82ef4:	003ff506 	br	82ecc <rx_descriptor_end+0xfff82e6c>
   82ef8:	f800283a 	ret
   82efc:	500d883a 	mov	r6,r10
   82f00:	003ff106 	br	82ec8 <rx_descriptor_end+0xfff82e68>

00082f04 <memset>:
   82f04:	20c000cc 	andi	r3,r4,3
   82f08:	2005883a 	mov	r2,r4
   82f0c:	18004426 	beq	r3,zero,83020 <memset+0x11c>
   82f10:	31ffffc4 	addi	r7,r6,-1
   82f14:	30004026 	beq	r6,zero,83018 <memset+0x114>
   82f18:	2813883a 	mov	r9,r5
   82f1c:	200d883a 	mov	r6,r4
   82f20:	2007883a 	mov	r3,r4
   82f24:	00000406 	br	82f38 <memset+0x34>
   82f28:	3a3fffc4 	addi	r8,r7,-1
   82f2c:	31800044 	addi	r6,r6,1
   82f30:	38003926 	beq	r7,zero,83018 <memset+0x114>
   82f34:	400f883a 	mov	r7,r8
   82f38:	18c00044 	addi	r3,r3,1
   82f3c:	32400005 	stb	r9,0(r6)
   82f40:	1a0000cc 	andi	r8,r3,3
   82f44:	403ff81e 	bne	r8,zero,82f28 <rx_descriptor_end+0xfff82ec8>
   82f48:	010000c4 	movi	r4,3
   82f4c:	21c02d2e 	bgeu	r4,r7,83004 <memset+0x100>
   82f50:	29003fcc 	andi	r4,r5,255
   82f54:	200c923a 	slli	r6,r4,8
   82f58:	3108b03a 	or	r4,r6,r4
   82f5c:	200c943a 	slli	r6,r4,16
   82f60:	218cb03a 	or	r6,r4,r6
   82f64:	010003c4 	movi	r4,15
   82f68:	21c0182e 	bgeu	r4,r7,82fcc <memset+0xc8>
   82f6c:	3b3ffc04 	addi	r12,r7,-16
   82f70:	6018d13a 	srli	r12,r12,4
   82f74:	1a000104 	addi	r8,r3,4
   82f78:	1ac00204 	addi	r11,r3,8
   82f7c:	6008913a 	slli	r4,r12,4
   82f80:	1a800304 	addi	r10,r3,12
   82f84:	1813883a 	mov	r9,r3
   82f88:	21000504 	addi	r4,r4,20
   82f8c:	1909883a 	add	r4,r3,r4
   82f90:	49800015 	stw	r6,0(r9)
   82f94:	41800015 	stw	r6,0(r8)
   82f98:	59800015 	stw	r6,0(r11)
   82f9c:	51800015 	stw	r6,0(r10)
   82fa0:	42000404 	addi	r8,r8,16
   82fa4:	4a400404 	addi	r9,r9,16
   82fa8:	5ac00404 	addi	r11,r11,16
   82fac:	52800404 	addi	r10,r10,16
   82fb0:	413ff71e 	bne	r8,r4,82f90 <rx_descriptor_end+0xfff82f30>
   82fb4:	63000044 	addi	r12,r12,1
   82fb8:	6018913a 	slli	r12,r12,4
   82fbc:	39c003cc 	andi	r7,r7,15
   82fc0:	010000c4 	movi	r4,3
   82fc4:	1b07883a 	add	r3,r3,r12
   82fc8:	21c00e2e 	bgeu	r4,r7,83004 <memset+0x100>
   82fcc:	1813883a 	mov	r9,r3
   82fd0:	3811883a 	mov	r8,r7
   82fd4:	010000c4 	movi	r4,3
   82fd8:	49800015 	stw	r6,0(r9)
   82fdc:	423fff04 	addi	r8,r8,-4
   82fe0:	4a400104 	addi	r9,r9,4
   82fe4:	223ffc36 	bltu	r4,r8,82fd8 <rx_descriptor_end+0xfff82f78>
   82fe8:	393fff04 	addi	r4,r7,-4
   82fec:	2008d0ba 	srli	r4,r4,2
   82ff0:	39c000cc 	andi	r7,r7,3
   82ff4:	21000044 	addi	r4,r4,1
   82ff8:	2109883a 	add	r4,r4,r4
   82ffc:	2109883a 	add	r4,r4,r4
   83000:	1907883a 	add	r3,r3,r4
   83004:	38000526 	beq	r7,zero,8301c <memset+0x118>
   83008:	19cf883a 	add	r7,r3,r7
   8300c:	19400005 	stb	r5,0(r3)
   83010:	18c00044 	addi	r3,r3,1
   83014:	38fffd1e 	bne	r7,r3,8300c <rx_descriptor_end+0xfff82fac>
   83018:	f800283a 	ret
   8301c:	f800283a 	ret
   83020:	2007883a 	mov	r3,r4
   83024:	300f883a 	mov	r7,r6
   83028:	003fc706 	br	82f48 <rx_descriptor_end+0xfff82ee8>

0008302c <_printf_r>:
   8302c:	defffd04 	addi	sp,sp,-12
   83030:	2805883a 	mov	r2,r5
   83034:	dfc00015 	stw	ra,0(sp)
   83038:	d9800115 	stw	r6,4(sp)
   8303c:	d9c00215 	stw	r7,8(sp)
   83040:	21400217 	ldw	r5,8(r4)
   83044:	d9c00104 	addi	r7,sp,4
   83048:	100d883a 	mov	r6,r2
   8304c:	00832280 	call	83228 <___vfprintf_internal_r>
   83050:	dfc00017 	ldw	ra,0(sp)
   83054:	dec00304 	addi	sp,sp,12
   83058:	f800283a 	ret

0008305c <printf>:
   8305c:	defffc04 	addi	sp,sp,-16
   83060:	dfc00015 	stw	ra,0(sp)
   83064:	d9400115 	stw	r5,4(sp)
   83068:	d9800215 	stw	r6,8(sp)
   8306c:	d9c00315 	stw	r7,12(sp)
   83070:	00800274 	movhi	r2,9
   83074:	10907304 	addi	r2,r2,16844
   83078:	10800017 	ldw	r2,0(r2)
   8307c:	200b883a 	mov	r5,r4
   83080:	d9800104 	addi	r6,sp,4
   83084:	11000217 	ldw	r4,8(r2)
   83088:	00854200 	call	85420 <__vfprintf_internal>
   8308c:	dfc00017 	ldw	ra,0(sp)
   83090:	dec00404 	addi	sp,sp,16
   83094:	f800283a 	ret

00083098 <_sbrk_r>:
   83098:	defffd04 	addi	sp,sp,-12
   8309c:	dc000015 	stw	r16,0(sp)
   830a0:	04000274 	movhi	r16,9
   830a4:	dc400115 	stw	r17,4(sp)
   830a8:	84186b04 	addi	r16,r16,25004
   830ac:	2023883a 	mov	r17,r4
   830b0:	2809883a 	mov	r4,r5
   830b4:	dfc00215 	stw	ra,8(sp)
   830b8:	80000015 	stw	zero,0(r16)
   830bc:	008ebf40 	call	8ebf4 <sbrk>
   830c0:	00ffffc4 	movi	r3,-1
   830c4:	10c00526 	beq	r2,r3,830dc <_sbrk_r+0x44>
   830c8:	dfc00217 	ldw	ra,8(sp)
   830cc:	dc400117 	ldw	r17,4(sp)
   830d0:	dc000017 	ldw	r16,0(sp)
   830d4:	dec00304 	addi	sp,sp,12
   830d8:	f800283a 	ret
   830dc:	80c00017 	ldw	r3,0(r16)
   830e0:	183ff926 	beq	r3,zero,830c8 <rx_descriptor_end+0xfff83068>
   830e4:	88c00015 	stw	r3,0(r17)
   830e8:	003ff706 	br	830c8 <rx_descriptor_end+0xfff83068>

000830ec <__sread>:
   830ec:	defffe04 	addi	sp,sp,-8
   830f0:	dc000015 	stw	r16,0(sp)
   830f4:	2821883a 	mov	r16,r5
   830f8:	2940038f 	ldh	r5,14(r5)
   830fc:	dfc00115 	stw	ra,4(sp)
   83100:	00885ac0 	call	885ac <_read_r>
   83104:	10000716 	blt	r2,zero,83124 <__sread+0x38>
   83108:	80c01417 	ldw	r3,80(r16)
   8310c:	1887883a 	add	r3,r3,r2
   83110:	80c01415 	stw	r3,80(r16)
   83114:	dfc00117 	ldw	ra,4(sp)
   83118:	dc000017 	ldw	r16,0(sp)
   8311c:	dec00204 	addi	sp,sp,8
   83120:	f800283a 	ret
   83124:	80c0030b 	ldhu	r3,12(r16)
   83128:	18fbffcc 	andi	r3,r3,61439
   8312c:	80c0030d 	sth	r3,12(r16)
   83130:	dfc00117 	ldw	ra,4(sp)
   83134:	dc000017 	ldw	r16,0(sp)
   83138:	dec00204 	addi	sp,sp,8
   8313c:	f800283a 	ret

00083140 <__seofread>:
   83140:	0005883a 	mov	r2,zero
   83144:	f800283a 	ret

00083148 <__swrite>:
   83148:	2880030b 	ldhu	r2,12(r5)
   8314c:	defffb04 	addi	sp,sp,-20
   83150:	dcc00315 	stw	r19,12(sp)
   83154:	dc800215 	stw	r18,8(sp)
   83158:	dc400115 	stw	r17,4(sp)
   8315c:	dc000015 	stw	r16,0(sp)
   83160:	dfc00415 	stw	ra,16(sp)
   83164:	10c0400c 	andi	r3,r2,256
   83168:	2821883a 	mov	r16,r5
   8316c:	2023883a 	mov	r17,r4
   83170:	3025883a 	mov	r18,r6
   83174:	3827883a 	mov	r19,r7
   83178:	18000526 	beq	r3,zero,83190 <__swrite+0x48>
   8317c:	2940038f 	ldh	r5,14(r5)
   83180:	01c00084 	movi	r7,2
   83184:	000d883a 	mov	r6,zero
   83188:	00871680 	call	87168 <_lseek_r>
   8318c:	8080030b 	ldhu	r2,12(r16)
   83190:	8140038f 	ldh	r5,14(r16)
   83194:	10bbffcc 	andi	r2,r2,61439
   83198:	980f883a 	mov	r7,r19
   8319c:	900d883a 	mov	r6,r18
   831a0:	8809883a 	mov	r4,r17
   831a4:	8080030d 	sth	r2,12(r16)
   831a8:	dfc00417 	ldw	ra,16(sp)
   831ac:	dcc00317 	ldw	r19,12(sp)
   831b0:	dc800217 	ldw	r18,8(sp)
   831b4:	dc400117 	ldw	r17,4(sp)
   831b8:	dc000017 	ldw	r16,0(sp)
   831bc:	dec00504 	addi	sp,sp,20
   831c0:	00854f81 	jmpi	854f8 <_write_r>

000831c4 <__sseek>:
   831c4:	defffe04 	addi	sp,sp,-8
   831c8:	dc000015 	stw	r16,0(sp)
   831cc:	2821883a 	mov	r16,r5
   831d0:	2940038f 	ldh	r5,14(r5)
   831d4:	dfc00115 	stw	ra,4(sp)
   831d8:	00871680 	call	87168 <_lseek_r>
   831dc:	00ffffc4 	movi	r3,-1
   831e0:	10c00826 	beq	r2,r3,83204 <__sseek+0x40>
   831e4:	80c0030b 	ldhu	r3,12(r16)
   831e8:	80801415 	stw	r2,80(r16)
   831ec:	18c40014 	ori	r3,r3,4096
   831f0:	80c0030d 	sth	r3,12(r16)
   831f4:	dfc00117 	ldw	ra,4(sp)
   831f8:	dc000017 	ldw	r16,0(sp)
   831fc:	dec00204 	addi	sp,sp,8
   83200:	f800283a 	ret
   83204:	80c0030b 	ldhu	r3,12(r16)
   83208:	18fbffcc 	andi	r3,r3,61439
   8320c:	80c0030d 	sth	r3,12(r16)
   83210:	dfc00117 	ldw	ra,4(sp)
   83214:	dc000017 	ldw	r16,0(sp)
   83218:	dec00204 	addi	sp,sp,8
   8321c:	f800283a 	ret

00083220 <__sclose>:
   83220:	2940038f 	ldh	r5,14(r5)
   83224:	00856ac1 	jmpi	856ac <_close_r>

00083228 <___vfprintf_internal_r>:
   83228:	deffb804 	addi	sp,sp,-288
   8322c:	dfc04715 	stw	ra,284(sp)
   83230:	ddc04515 	stw	r23,276(sp)
   83234:	dd404315 	stw	r21,268(sp)
   83238:	d9002c15 	stw	r4,176(sp)
   8323c:	282f883a 	mov	r23,r5
   83240:	302b883a 	mov	r21,r6
   83244:	d9c02d15 	stw	r7,180(sp)
   83248:	df004615 	stw	fp,280(sp)
   8324c:	dd804415 	stw	r22,272(sp)
   83250:	dd004215 	stw	r20,264(sp)
   83254:	dcc04115 	stw	r19,260(sp)
   83258:	dc804015 	stw	r18,256(sp)
   8325c:	dc403f15 	stw	r17,252(sp)
   83260:	dc003e15 	stw	r16,248(sp)
   83264:	00871380 	call	87138 <_localeconv_r>
   83268:	10800017 	ldw	r2,0(r2)
   8326c:	1009883a 	mov	r4,r2
   83270:	d8803415 	stw	r2,208(sp)
   83274:	008875c0 	call	8875c <strlen>
   83278:	d8803715 	stw	r2,220(sp)
   8327c:	d8802c17 	ldw	r2,176(sp)
   83280:	10000226 	beq	r2,zero,8328c <___vfprintf_internal_r+0x64>
   83284:	10800e17 	ldw	r2,56(r2)
   83288:	1000f926 	beq	r2,zero,83670 <___vfprintf_internal_r+0x448>
   8328c:	b880030b 	ldhu	r2,12(r23)
   83290:	10c8000c 	andi	r3,r2,8192
   83294:	1800061e 	bne	r3,zero,832b0 <___vfprintf_internal_r+0x88>
   83298:	b9001917 	ldw	r4,100(r23)
   8329c:	00f7ffc4 	movi	r3,-8193
   832a0:	10880014 	ori	r2,r2,8192
   832a4:	20c6703a 	and	r3,r4,r3
   832a8:	b880030d 	sth	r2,12(r23)
   832ac:	b8c01915 	stw	r3,100(r23)
   832b0:	10c0020c 	andi	r3,r2,8
   832b4:	1800c126 	beq	r3,zero,835bc <___vfprintf_internal_r+0x394>
   832b8:	b8c00417 	ldw	r3,16(r23)
   832bc:	1800bf26 	beq	r3,zero,835bc <___vfprintf_internal_r+0x394>
   832c0:	1080068c 	andi	r2,r2,26
   832c4:	00c00284 	movi	r3,10
   832c8:	10c0c426 	beq	r2,r3,835dc <___vfprintf_internal_r+0x3b4>
   832cc:	d8c00404 	addi	r3,sp,16
   832d0:	05000274 	movhi	r20,9
   832d4:	d9001e04 	addi	r4,sp,120
   832d8:	a507fa84 	addi	r20,r20,8170
   832dc:	d8c01e15 	stw	r3,120(sp)
   832e0:	d8002015 	stw	zero,128(sp)
   832e4:	d8001f15 	stw	zero,124(sp)
   832e8:	d8003315 	stw	zero,204(sp)
   832ec:	d8003615 	stw	zero,216(sp)
   832f0:	d8003815 	stw	zero,224(sp)
   832f4:	1811883a 	mov	r8,r3
   832f8:	d8003915 	stw	zero,228(sp)
   832fc:	d8003a15 	stw	zero,232(sp)
   83300:	d8002f15 	stw	zero,188(sp)
   83304:	d9002815 	stw	r4,160(sp)
   83308:	a8800007 	ldb	r2,0(r21)
   8330c:	10027b26 	beq	r2,zero,83cfc <___vfprintf_internal_r+0xad4>
   83310:	00c00944 	movi	r3,37
   83314:	a821883a 	mov	r16,r21
   83318:	10c0021e 	bne	r2,r3,83324 <___vfprintf_internal_r+0xfc>
   8331c:	00001406 	br	83370 <___vfprintf_internal_r+0x148>
   83320:	10c00326 	beq	r2,r3,83330 <___vfprintf_internal_r+0x108>
   83324:	84000044 	addi	r16,r16,1
   83328:	80800007 	ldb	r2,0(r16)
   8332c:	103ffc1e 	bne	r2,zero,83320 <rx_descriptor_end+0xfff832c0>
   83330:	8563c83a 	sub	r17,r16,r21
   83334:	88000e26 	beq	r17,zero,83370 <___vfprintf_internal_r+0x148>
   83338:	d8c02017 	ldw	r3,128(sp)
   8333c:	d8801f17 	ldw	r2,124(sp)
   83340:	45400015 	stw	r21,0(r8)
   83344:	1c47883a 	add	r3,r3,r17
   83348:	10800044 	addi	r2,r2,1
   8334c:	d8c02015 	stw	r3,128(sp)
   83350:	44400115 	stw	r17,4(r8)
   83354:	d8801f15 	stw	r2,124(sp)
   83358:	00c001c4 	movi	r3,7
   8335c:	1880a716 	blt	r3,r2,835fc <___vfprintf_internal_r+0x3d4>
   83360:	42000204 	addi	r8,r8,8
   83364:	d9402f17 	ldw	r5,188(sp)
   83368:	2c4b883a 	add	r5,r5,r17
   8336c:	d9402f15 	stw	r5,188(sp)
   83370:	80800007 	ldb	r2,0(r16)
   83374:	1000a826 	beq	r2,zero,83618 <___vfprintf_internal_r+0x3f0>
   83378:	84400047 	ldb	r17,1(r16)
   8337c:	00bfffc4 	movi	r2,-1
   83380:	85400044 	addi	r21,r16,1
   83384:	d8002785 	stb	zero,158(sp)
   83388:	0007883a 	mov	r3,zero
   8338c:	000f883a 	mov	r7,zero
   83390:	d8802915 	stw	r2,164(sp)
   83394:	d8003115 	stw	zero,196(sp)
   83398:	0025883a 	mov	r18,zero
   8339c:	01401604 	movi	r5,88
   833a0:	01800244 	movi	r6,9
   833a4:	02800a84 	movi	r10,42
   833a8:	02401b04 	movi	r9,108
   833ac:	ad400044 	addi	r21,r21,1
   833b0:	88bff804 	addi	r2,r17,-32
   833b4:	28830436 	bltu	r5,r2,83fc8 <___vfprintf_internal_r+0xda0>
   833b8:	100490ba 	slli	r2,r2,2
   833bc:	01000234 	movhi	r4,8
   833c0:	210cf404 	addi	r4,r4,13264
   833c4:	1105883a 	add	r2,r2,r4
   833c8:	10800017 	ldw	r2,0(r2)
   833cc:	1000683a 	jmp	r2
   833d0:	00083ee8 	cmpgeui	zero,zero,8443
   833d4:	00083fc8 	cmpgei	zero,zero,8447
   833d8:	00083fc8 	cmpgei	zero,zero,8447
   833dc:	00083f08 	cmpgei	zero,zero,8444
   833e0:	00083fc8 	cmpgei	zero,zero,8447
   833e4:	00083fc8 	cmpgei	zero,zero,8447
   833e8:	00083fc8 	cmpgei	zero,zero,8447
   833ec:	00083fc8 	cmpgei	zero,zero,8447
   833f0:	00083fc8 	cmpgei	zero,zero,8447
   833f4:	00083fc8 	cmpgei	zero,zero,8447
   833f8:	0008367c 	xorhi	zero,zero,8409
   833fc:	00083e24 	muli	zero,zero,8440
   83400:	00083fc8 	cmpgei	zero,zero,8447
   83404:	00083544 	movi	zero,8405
   83408:	000836a4 	muli	zero,zero,8410
   8340c:	00083fc8 	cmpgei	zero,zero,8447
   83410:	000836e4 	muli	zero,zero,8411
   83414:	000836f0 	cmpltui	zero,zero,8411
   83418:	000836f0 	cmpltui	zero,zero,8411
   8341c:	000836f0 	cmpltui	zero,zero,8411
   83420:	000836f0 	cmpltui	zero,zero,8411
   83424:	000836f0 	cmpltui	zero,zero,8411
   83428:	000836f0 	cmpltui	zero,zero,8411
   8342c:	000836f0 	cmpltui	zero,zero,8411
   83430:	000836f0 	cmpltui	zero,zero,8411
   83434:	000836f0 	cmpltui	zero,zero,8411
   83438:	00083fc8 	cmpgei	zero,zero,8447
   8343c:	00083fc8 	cmpgei	zero,zero,8447
   83440:	00083fc8 	cmpgei	zero,zero,8447
   83444:	00083fc8 	cmpgei	zero,zero,8447
   83448:	00083fc8 	cmpgei	zero,zero,8447
   8344c:	00083fc8 	cmpgei	zero,zero,8447
   83450:	00083fc8 	cmpgei	zero,zero,8447
   83454:	00083fc8 	cmpgei	zero,zero,8447
   83458:	00083fc8 	cmpgei	zero,zero,8447
   8345c:	00083fc8 	cmpgei	zero,zero,8447
   83460:	00083724 	muli	zero,zero,8412
   83464:	000837e0 	cmpeqi	zero,zero,8415
   83468:	00083fc8 	cmpgei	zero,zero,8447
   8346c:	000837e0 	cmpeqi	zero,zero,8415
   83470:	00083fc8 	cmpgei	zero,zero,8447
   83474:	00083fc8 	cmpgei	zero,zero,8447
   83478:	00083fc8 	cmpgei	zero,zero,8447
   8347c:	00083fc8 	cmpgei	zero,zero,8447
   83480:	00083880 	call	8388 <__alt_mem_main_memory-0x77c78>
   83484:	00083fc8 	cmpgei	zero,zero,8447
   83488:	00083fc8 	cmpgei	zero,zero,8447
   8348c:	0008388c 	andi	zero,zero,8418
   83490:	00083fc8 	cmpgei	zero,zero,8447
   83494:	00083fc8 	cmpgei	zero,zero,8447
   83498:	00083fc8 	cmpgei	zero,zero,8447
   8349c:	00083fc8 	cmpgei	zero,zero,8447
   834a0:	00083fc8 	cmpgei	zero,zero,8447
   834a4:	00083d04 	movi	zero,8436
   834a8:	00083fc8 	cmpgei	zero,zero,8447
   834ac:	00083fc8 	cmpgei	zero,zero,8447
   834b0:	00083d64 	muli	zero,zero,8437
   834b4:	00083fc8 	cmpgei	zero,zero,8447
   834b8:	00083fc8 	cmpgei	zero,zero,8447
   834bc:	00083fc8 	cmpgei	zero,zero,8447
   834c0:	00083fc8 	cmpgei	zero,zero,8447
   834c4:	00083fc8 	cmpgei	zero,zero,8447
   834c8:	00083fc8 	cmpgei	zero,zero,8447
   834cc:	00083fc8 	cmpgei	zero,zero,8447
   834d0:	00083fc8 	cmpgei	zero,zero,8447
   834d4:	00083fc8 	cmpgei	zero,zero,8447
   834d8:	00083fc8 	cmpgei	zero,zero,8447
   834dc:	00083f74 	movhi	zero,8445
   834e0:	00083f14 	movui	zero,8444
   834e4:	000837e0 	cmpeqi	zero,zero,8415
   834e8:	000837e0 	cmpeqi	zero,zero,8415
   834ec:	000837e0 	cmpeqi	zero,zero,8415
   834f0:	00083f24 	muli	zero,zero,8444
   834f4:	00083f14 	movui	zero,8444
   834f8:	00083fc8 	cmpgei	zero,zero,8447
   834fc:	00083fc8 	cmpgei	zero,zero,8447
   83500:	00083f30 	cmpltui	zero,zero,8444
   83504:	00083fc8 	cmpgei	zero,zero,8447
   83508:	00083f40 	call	83f4 <__alt_mem_main_memory-0x77c0c>
   8350c:	00083e14 	movui	zero,8440
   83510:	00083550 	cmplti	zero,zero,8405
   83514:	00083e34 	movhi	zero,8440
   83518:	00083fc8 	cmpgei	zero,zero,8447
   8351c:	00083e40 	call	83e4 <__alt_mem_main_memory-0x77c1c>
   83520:	00083fc8 	cmpgei	zero,zero,8447
   83524:	00083e9c 	xori	zero,zero,8442
   83528:	00083fc8 	cmpgei	zero,zero,8447
   8352c:	00083fc8 	cmpgei	zero,zero,8447
   83530:	00083eac 	andhi	zero,zero,8442
   83534:	d9003117 	ldw	r4,196(sp)
   83538:	d8802d15 	stw	r2,180(sp)
   8353c:	0109c83a 	sub	r4,zero,r4
   83540:	d9003115 	stw	r4,196(sp)
   83544:	94800114 	ori	r18,r18,4
   83548:	ac400007 	ldb	r17,0(r21)
   8354c:	003f9706 	br	833ac <rx_descriptor_end+0xfff8334c>
   83550:	00800c04 	movi	r2,48
   83554:	d9002d17 	ldw	r4,180(sp)
   83558:	d9402917 	ldw	r5,164(sp)
   8355c:	d8802705 	stb	r2,156(sp)
   83560:	00801e04 	movi	r2,120
   83564:	d8802745 	stb	r2,157(sp)
   83568:	d8002785 	stb	zero,158(sp)
   8356c:	20c00104 	addi	r3,r4,4
   83570:	24c00017 	ldw	r19,0(r4)
   83574:	002d883a 	mov	r22,zero
   83578:	90800094 	ori	r2,r18,2
   8357c:	28029a16 	blt	r5,zero,83fe8 <___vfprintf_internal_r+0xdc0>
   83580:	00bfdfc4 	movi	r2,-129
   83584:	90a4703a 	and	r18,r18,r2
   83588:	d8c02d15 	stw	r3,180(sp)
   8358c:	94800094 	ori	r18,r18,2
   83590:	9802871e 	bne	r19,zero,83fb0 <___vfprintf_internal_r+0xd88>
   83594:	00800274 	movhi	r2,9
   83598:	1087f304 	addi	r2,r2,8140
   8359c:	d8803915 	stw	r2,228(sp)
   835a0:	04401e04 	movi	r17,120
   835a4:	d8802917 	ldw	r2,164(sp)
   835a8:	0039883a 	mov	fp,zero
   835ac:	1001e926 	beq	r2,zero,83d54 <___vfprintf_internal_r+0xb2c>
   835b0:	0027883a 	mov	r19,zero
   835b4:	002d883a 	mov	r22,zero
   835b8:	00020506 	br	83dd0 <___vfprintf_internal_r+0xba8>
   835bc:	d9002c17 	ldw	r4,176(sp)
   835c0:	b80b883a 	mov	r5,r23
   835c4:	00855580 	call	85558 <__swsetup_r>
   835c8:	1005ac1e 	bne	r2,zero,84c7c <___vfprintf_internal_r+0x1a54>
   835cc:	b880030b 	ldhu	r2,12(r23)
   835d0:	00c00284 	movi	r3,10
   835d4:	1080068c 	andi	r2,r2,26
   835d8:	10ff3c1e 	bne	r2,r3,832cc <rx_descriptor_end+0xfff8326c>
   835dc:	b880038f 	ldh	r2,14(r23)
   835e0:	103f3a16 	blt	r2,zero,832cc <rx_descriptor_end+0xfff8326c>
   835e4:	d9c02d17 	ldw	r7,180(sp)
   835e8:	d9002c17 	ldw	r4,176(sp)
   835ec:	a80d883a 	mov	r6,r21
   835f0:	b80b883a 	mov	r5,r23
   835f4:	008543c0 	call	8543c <__sbprintf>
   835f8:	00001106 	br	83640 <___vfprintf_internal_r+0x418>
   835fc:	d9002c17 	ldw	r4,176(sp)
   83600:	d9801e04 	addi	r6,sp,120
   83604:	b80b883a 	mov	r5,r23
   83608:	00888f00 	call	888f0 <__sprint_r>
   8360c:	1000081e 	bne	r2,zero,83630 <___vfprintf_internal_r+0x408>
   83610:	da000404 	addi	r8,sp,16
   83614:	003f5306 	br	83364 <rx_descriptor_end+0xfff83304>
   83618:	d8802017 	ldw	r2,128(sp)
   8361c:	10000426 	beq	r2,zero,83630 <___vfprintf_internal_r+0x408>
   83620:	d9002c17 	ldw	r4,176(sp)
   83624:	d9801e04 	addi	r6,sp,120
   83628:	b80b883a 	mov	r5,r23
   8362c:	00888f00 	call	888f0 <__sprint_r>
   83630:	b880030b 	ldhu	r2,12(r23)
   83634:	1080100c 	andi	r2,r2,64
   83638:	1005901e 	bne	r2,zero,84c7c <___vfprintf_internal_r+0x1a54>
   8363c:	d8802f17 	ldw	r2,188(sp)
   83640:	dfc04717 	ldw	ra,284(sp)
   83644:	df004617 	ldw	fp,280(sp)
   83648:	ddc04517 	ldw	r23,276(sp)
   8364c:	dd804417 	ldw	r22,272(sp)
   83650:	dd404317 	ldw	r21,268(sp)
   83654:	dd004217 	ldw	r20,264(sp)
   83658:	dcc04117 	ldw	r19,260(sp)
   8365c:	dc804017 	ldw	r18,256(sp)
   83660:	dc403f17 	ldw	r17,252(sp)
   83664:	dc003e17 	ldw	r16,248(sp)
   83668:	dec04804 	addi	sp,sp,288
   8366c:	f800283a 	ret
   83670:	d9002c17 	ldw	r4,176(sp)
   83674:	0081f680 	call	81f68 <__sinit>
   83678:	003f0406 	br	8328c <rx_descriptor_end+0xfff8322c>
   8367c:	d8802d17 	ldw	r2,180(sp)
   83680:	d9002d17 	ldw	r4,180(sp)
   83684:	10800017 	ldw	r2,0(r2)
   83688:	d8803115 	stw	r2,196(sp)
   8368c:	20800104 	addi	r2,r4,4
   83690:	d9003117 	ldw	r4,196(sp)
   83694:	203fa716 	blt	r4,zero,83534 <rx_descriptor_end+0xfff834d4>
   83698:	d8802d15 	stw	r2,180(sp)
   8369c:	ac400007 	ldb	r17,0(r21)
   836a0:	003f4206 	br	833ac <rx_descriptor_end+0xfff8334c>
   836a4:	ac400007 	ldb	r17,0(r21)
   836a8:	aac00044 	addi	r11,r21,1
   836ac:	8a872826 	beq	r17,r10,85350 <___vfprintf_internal_r+0x2128>
   836b0:	88bff404 	addi	r2,r17,-48
   836b4:	0009883a 	mov	r4,zero
   836b8:	30867d36 	bltu	r6,r2,850b0 <___vfprintf_internal_r+0x1e88>
   836bc:	5c400007 	ldb	r17,0(r11)
   836c0:	210002a4 	muli	r4,r4,10
   836c4:	5d400044 	addi	r21,r11,1
   836c8:	a817883a 	mov	r11,r21
   836cc:	2089883a 	add	r4,r4,r2
   836d0:	88bff404 	addi	r2,r17,-48
   836d4:	30bff92e 	bgeu	r6,r2,836bc <rx_descriptor_end+0xfff8365c>
   836d8:	2005c916 	blt	r4,zero,84e00 <___vfprintf_internal_r+0x1bd8>
   836dc:	d9002915 	stw	r4,164(sp)
   836e0:	003f3306 	br	833b0 <rx_descriptor_end+0xfff83350>
   836e4:	94802014 	ori	r18,r18,128
   836e8:	ac400007 	ldb	r17,0(r21)
   836ec:	003f2f06 	br	833ac <rx_descriptor_end+0xfff8334c>
   836f0:	a809883a 	mov	r4,r21
   836f4:	d8003115 	stw	zero,196(sp)
   836f8:	88bff404 	addi	r2,r17,-48
   836fc:	0017883a 	mov	r11,zero
   83700:	24400007 	ldb	r17,0(r4)
   83704:	5ac002a4 	muli	r11,r11,10
   83708:	ad400044 	addi	r21,r21,1
   8370c:	a809883a 	mov	r4,r21
   83710:	12d7883a 	add	r11,r2,r11
   83714:	88bff404 	addi	r2,r17,-48
   83718:	30bff92e 	bgeu	r6,r2,83700 <rx_descriptor_end+0xfff836a0>
   8371c:	dac03115 	stw	r11,196(sp)
   83720:	003f2306 	br	833b0 <rx_descriptor_end+0xfff83350>
   83724:	18c03fcc 	andi	r3,r3,255
   83728:	18072b1e 	bne	r3,zero,853d8 <___vfprintf_internal_r+0x21b0>
   8372c:	94800414 	ori	r18,r18,16
   83730:	9080080c 	andi	r2,r18,32
   83734:	10037b26 	beq	r2,zero,84524 <___vfprintf_internal_r+0x12fc>
   83738:	d9402d17 	ldw	r5,180(sp)
   8373c:	28800117 	ldw	r2,4(r5)
   83740:	2cc00017 	ldw	r19,0(r5)
   83744:	29400204 	addi	r5,r5,8
   83748:	d9402d15 	stw	r5,180(sp)
   8374c:	102d883a 	mov	r22,r2
   83750:	10044b16 	blt	r2,zero,84880 <___vfprintf_internal_r+0x1658>
   83754:	d9402917 	ldw	r5,164(sp)
   83758:	df002783 	ldbu	fp,158(sp)
   8375c:	2803bc16 	blt	r5,zero,84650 <___vfprintf_internal_r+0x1428>
   83760:	00ffdfc4 	movi	r3,-129
   83764:	9d84b03a 	or	r2,r19,r22
   83768:	90e4703a 	and	r18,r18,r3
   8376c:	10017726 	beq	r2,zero,83d4c <___vfprintf_internal_r+0xb24>
   83770:	b0038326 	beq	r22,zero,84580 <___vfprintf_internal_r+0x1358>
   83774:	dc402a15 	stw	r17,168(sp)
   83778:	dc001e04 	addi	r16,sp,120
   8377c:	b023883a 	mov	r17,r22
   83780:	402d883a 	mov	r22,r8
   83784:	9809883a 	mov	r4,r19
   83788:	880b883a 	mov	r5,r17
   8378c:	01800284 	movi	r6,10
   83790:	000f883a 	mov	r7,zero
   83794:	008b4900 	call	8b490 <__umoddi3>
   83798:	10800c04 	addi	r2,r2,48
   8379c:	843fffc4 	addi	r16,r16,-1
   837a0:	9809883a 	mov	r4,r19
   837a4:	880b883a 	mov	r5,r17
   837a8:	80800005 	stb	r2,0(r16)
   837ac:	01800284 	movi	r6,10
   837b0:	000f883a 	mov	r7,zero
   837b4:	008af180 	call	8af18 <__udivdi3>
   837b8:	1027883a 	mov	r19,r2
   837bc:	10c4b03a 	or	r2,r2,r3
   837c0:	1823883a 	mov	r17,r3
   837c4:	103fef1e 	bne	r2,zero,83784 <rx_descriptor_end+0xfff83724>
   837c8:	d8c02817 	ldw	r3,160(sp)
   837cc:	dc402a17 	ldw	r17,168(sp)
   837d0:	b011883a 	mov	r8,r22
   837d4:	1c07c83a 	sub	r3,r3,r16
   837d8:	d8c02e15 	stw	r3,184(sp)
   837dc:	00005906 	br	83944 <___vfprintf_internal_r+0x71c>
   837e0:	18c03fcc 	andi	r3,r3,255
   837e4:	1806fa1e 	bne	r3,zero,853d0 <___vfprintf_internal_r+0x21a8>
   837e8:	9080020c 	andi	r2,r18,8
   837ec:	10048a26 	beq	r2,zero,84a18 <___vfprintf_internal_r+0x17f0>
   837f0:	d8c02d17 	ldw	r3,180(sp)
   837f4:	d9002d17 	ldw	r4,180(sp)
   837f8:	d9402d17 	ldw	r5,180(sp)
   837fc:	18c00017 	ldw	r3,0(r3)
   83800:	21000117 	ldw	r4,4(r4)
   83804:	29400204 	addi	r5,r5,8
   83808:	d8c03615 	stw	r3,216(sp)
   8380c:	d9003815 	stw	r4,224(sp)
   83810:	d9402d15 	stw	r5,180(sp)
   83814:	d9003617 	ldw	r4,216(sp)
   83818:	d9403817 	ldw	r5,224(sp)
   8381c:	da003d15 	stw	r8,244(sp)
   83820:	04000044 	movi	r16,1
   83824:	008860c0 	call	8860c <__fpclassifyd>
   83828:	da003d17 	ldw	r8,244(sp)
   8382c:	14041f1e 	bne	r2,r16,848ac <___vfprintf_internal_r+0x1684>
   83830:	d9003617 	ldw	r4,216(sp)
   83834:	d9403817 	ldw	r5,224(sp)
   83838:	000d883a 	mov	r6,zero
   8383c:	000f883a 	mov	r7,zero
   83840:	008ce740 	call	8ce74 <__ledf2>
   83844:	da003d17 	ldw	r8,244(sp)
   83848:	1005be16 	blt	r2,zero,84f44 <___vfprintf_internal_r+0x1d1c>
   8384c:	df002783 	ldbu	fp,158(sp)
   83850:	008011c4 	movi	r2,71
   83854:	1445330e 	bge	r2,r17,84d24 <___vfprintf_internal_r+0x1afc>
   83858:	04000274 	movhi	r16,9
   8385c:	8407eb04 	addi	r16,r16,8108
   83860:	00c000c4 	movi	r3,3
   83864:	00bfdfc4 	movi	r2,-129
   83868:	d8c02a15 	stw	r3,168(sp)
   8386c:	90a4703a 	and	r18,r18,r2
   83870:	d8c02e15 	stw	r3,184(sp)
   83874:	d8002915 	stw	zero,164(sp)
   83878:	d8003215 	stw	zero,200(sp)
   8387c:	00003706 	br	8395c <___vfprintf_internal_r+0x734>
   83880:	94800214 	ori	r18,r18,8
   83884:	ac400007 	ldb	r17,0(r21)
   83888:	003ec806 	br	833ac <rx_descriptor_end+0xfff8334c>
   8388c:	18c03fcc 	andi	r3,r3,255
   83890:	1806db1e 	bne	r3,zero,85400 <___vfprintf_internal_r+0x21d8>
   83894:	94800414 	ori	r18,r18,16
   83898:	9080080c 	andi	r2,r18,32
   8389c:	1002d826 	beq	r2,zero,84400 <___vfprintf_internal_r+0x11d8>
   838a0:	d9402d17 	ldw	r5,180(sp)
   838a4:	d8c02917 	ldw	r3,164(sp)
   838a8:	d8002785 	stb	zero,158(sp)
   838ac:	28800204 	addi	r2,r5,8
   838b0:	2cc00017 	ldw	r19,0(r5)
   838b4:	2d800117 	ldw	r22,4(r5)
   838b8:	18048f16 	blt	r3,zero,84af8 <___vfprintf_internal_r+0x18d0>
   838bc:	013fdfc4 	movi	r4,-129
   838c0:	9d86b03a 	or	r3,r19,r22
   838c4:	d8802d15 	stw	r2,180(sp)
   838c8:	9124703a 	and	r18,r18,r4
   838cc:	1802d91e 	bne	r3,zero,84434 <___vfprintf_internal_r+0x120c>
   838d0:	d8c02917 	ldw	r3,164(sp)
   838d4:	0039883a 	mov	fp,zero
   838d8:	1805c326 	beq	r3,zero,84fe8 <___vfprintf_internal_r+0x1dc0>
   838dc:	0027883a 	mov	r19,zero
   838e0:	002d883a 	mov	r22,zero
   838e4:	dc001e04 	addi	r16,sp,120
   838e8:	9806d0fa 	srli	r3,r19,3
   838ec:	b008977a 	slli	r4,r22,29
   838f0:	b02cd0fa 	srli	r22,r22,3
   838f4:	9cc001cc 	andi	r19,r19,7
   838f8:	98800c04 	addi	r2,r19,48
   838fc:	843fffc4 	addi	r16,r16,-1
   83900:	20e6b03a 	or	r19,r4,r3
   83904:	80800005 	stb	r2,0(r16)
   83908:	9d86b03a 	or	r3,r19,r22
   8390c:	183ff61e 	bne	r3,zero,838e8 <rx_descriptor_end+0xfff83888>
   83910:	90c0004c 	andi	r3,r18,1
   83914:	18013b26 	beq	r3,zero,83e04 <___vfprintf_internal_r+0xbdc>
   83918:	10803fcc 	andi	r2,r2,255
   8391c:	1080201c 	xori	r2,r2,128
   83920:	10bfe004 	addi	r2,r2,-128
   83924:	00c00c04 	movi	r3,48
   83928:	10c13626 	beq	r2,r3,83e04 <___vfprintf_internal_r+0xbdc>
   8392c:	80ffffc5 	stb	r3,-1(r16)
   83930:	d8c02817 	ldw	r3,160(sp)
   83934:	80bfffc4 	addi	r2,r16,-1
   83938:	1021883a 	mov	r16,r2
   8393c:	1887c83a 	sub	r3,r3,r2
   83940:	d8c02e15 	stw	r3,184(sp)
   83944:	d8802e17 	ldw	r2,184(sp)
   83948:	d9002917 	ldw	r4,164(sp)
   8394c:	1100010e 	bge	r2,r4,83954 <___vfprintf_internal_r+0x72c>
   83950:	2005883a 	mov	r2,r4
   83954:	d8802a15 	stw	r2,168(sp)
   83958:	d8003215 	stw	zero,200(sp)
   8395c:	e7003fcc 	andi	fp,fp,255
   83960:	e700201c 	xori	fp,fp,128
   83964:	e73fe004 	addi	fp,fp,-128
   83968:	e0000326 	beq	fp,zero,83978 <___vfprintf_internal_r+0x750>
   8396c:	d8c02a17 	ldw	r3,168(sp)
   83970:	18c00044 	addi	r3,r3,1
   83974:	d8c02a15 	stw	r3,168(sp)
   83978:	90c0008c 	andi	r3,r18,2
   8397c:	d8c02b15 	stw	r3,172(sp)
   83980:	18000326 	beq	r3,zero,83990 <___vfprintf_internal_r+0x768>
   83984:	d8c02a17 	ldw	r3,168(sp)
   83988:	18c00084 	addi	r3,r3,2
   8398c:	d8c02a15 	stw	r3,168(sp)
   83990:	90c0210c 	andi	r3,r18,132
   83994:	d8c03015 	stw	r3,192(sp)
   83998:	1801a31e 	bne	r3,zero,84028 <___vfprintf_internal_r+0xe00>
   8399c:	d9003117 	ldw	r4,196(sp)
   839a0:	d8c02a17 	ldw	r3,168(sp)
   839a4:	20e7c83a 	sub	r19,r4,r3
   839a8:	04c19f0e 	bge	zero,r19,84028 <___vfprintf_internal_r+0xe00>
   839ac:	02400404 	movi	r9,16
   839b0:	d8c02017 	ldw	r3,128(sp)
   839b4:	d8801f17 	ldw	r2,124(sp)
   839b8:	4cc50d0e 	bge	r9,r19,84df0 <___vfprintf_internal_r+0x1bc8>
   839bc:	01400274 	movhi	r5,9
   839c0:	2947fe84 	addi	r5,r5,8186
   839c4:	dc403b15 	stw	r17,236(sp)
   839c8:	d9403515 	stw	r5,212(sp)
   839cc:	9823883a 	mov	r17,r19
   839d0:	482d883a 	mov	r22,r9
   839d4:	9027883a 	mov	r19,r18
   839d8:	070001c4 	movi	fp,7
   839dc:	8025883a 	mov	r18,r16
   839e0:	dc002c17 	ldw	r16,176(sp)
   839e4:	00000306 	br	839f4 <___vfprintf_internal_r+0x7cc>
   839e8:	8c7ffc04 	addi	r17,r17,-16
   839ec:	42000204 	addi	r8,r8,8
   839f0:	b440130e 	bge	r22,r17,83a40 <___vfprintf_internal_r+0x818>
   839f4:	01000274 	movhi	r4,9
   839f8:	18c00404 	addi	r3,r3,16
   839fc:	10800044 	addi	r2,r2,1
   83a00:	2107fe84 	addi	r4,r4,8186
   83a04:	41000015 	stw	r4,0(r8)
   83a08:	45800115 	stw	r22,4(r8)
   83a0c:	d8c02015 	stw	r3,128(sp)
   83a10:	d8801f15 	stw	r2,124(sp)
   83a14:	e0bff40e 	bge	fp,r2,839e8 <rx_descriptor_end+0xfff83988>
   83a18:	d9801e04 	addi	r6,sp,120
   83a1c:	b80b883a 	mov	r5,r23
   83a20:	8009883a 	mov	r4,r16
   83a24:	00888f00 	call	888f0 <__sprint_r>
   83a28:	103f011e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   83a2c:	8c7ffc04 	addi	r17,r17,-16
   83a30:	d8c02017 	ldw	r3,128(sp)
   83a34:	d8801f17 	ldw	r2,124(sp)
   83a38:	da000404 	addi	r8,sp,16
   83a3c:	b47fed16 	blt	r22,r17,839f4 <rx_descriptor_end+0xfff83994>
   83a40:	9021883a 	mov	r16,r18
   83a44:	9825883a 	mov	r18,r19
   83a48:	8827883a 	mov	r19,r17
   83a4c:	dc403b17 	ldw	r17,236(sp)
   83a50:	d9403517 	ldw	r5,212(sp)
   83a54:	98c7883a 	add	r3,r19,r3
   83a58:	10800044 	addi	r2,r2,1
   83a5c:	41400015 	stw	r5,0(r8)
   83a60:	44c00115 	stw	r19,4(r8)
   83a64:	d8c02015 	stw	r3,128(sp)
   83a68:	d8801f15 	stw	r2,124(sp)
   83a6c:	010001c4 	movi	r4,7
   83a70:	2082a316 	blt	r4,r2,84500 <___vfprintf_internal_r+0x12d8>
   83a74:	df002787 	ldb	fp,158(sp)
   83a78:	42000204 	addi	r8,r8,8
   83a7c:	e0000c26 	beq	fp,zero,83ab0 <___vfprintf_internal_r+0x888>
   83a80:	d8801f17 	ldw	r2,124(sp)
   83a84:	d9002784 	addi	r4,sp,158
   83a88:	18c00044 	addi	r3,r3,1
   83a8c:	10800044 	addi	r2,r2,1
   83a90:	41000015 	stw	r4,0(r8)
   83a94:	01000044 	movi	r4,1
   83a98:	41000115 	stw	r4,4(r8)
   83a9c:	d8c02015 	stw	r3,128(sp)
   83aa0:	d8801f15 	stw	r2,124(sp)
   83aa4:	010001c4 	movi	r4,7
   83aa8:	20823c16 	blt	r4,r2,8439c <___vfprintf_internal_r+0x1174>
   83aac:	42000204 	addi	r8,r8,8
   83ab0:	d8802b17 	ldw	r2,172(sp)
   83ab4:	10000c26 	beq	r2,zero,83ae8 <___vfprintf_internal_r+0x8c0>
   83ab8:	d8801f17 	ldw	r2,124(sp)
   83abc:	d9002704 	addi	r4,sp,156
   83ac0:	18c00084 	addi	r3,r3,2
   83ac4:	10800044 	addi	r2,r2,1
   83ac8:	41000015 	stw	r4,0(r8)
   83acc:	01000084 	movi	r4,2
   83ad0:	41000115 	stw	r4,4(r8)
   83ad4:	d8c02015 	stw	r3,128(sp)
   83ad8:	d8801f15 	stw	r2,124(sp)
   83adc:	010001c4 	movi	r4,7
   83ae0:	20823616 	blt	r4,r2,843bc <___vfprintf_internal_r+0x1194>
   83ae4:	42000204 	addi	r8,r8,8
   83ae8:	d9003017 	ldw	r4,192(sp)
   83aec:	00802004 	movi	r2,128
   83af0:	20819926 	beq	r4,r2,84158 <___vfprintf_internal_r+0xf30>
   83af4:	d9402917 	ldw	r5,164(sp)
   83af8:	d8802e17 	ldw	r2,184(sp)
   83afc:	28adc83a 	sub	r22,r5,r2
   83b00:	0580310e 	bge	zero,r22,83bc8 <___vfprintf_internal_r+0x9a0>
   83b04:	07000404 	movi	fp,16
   83b08:	d8801f17 	ldw	r2,124(sp)
   83b0c:	e584140e 	bge	fp,r22,84b60 <___vfprintf_internal_r+0x1938>
   83b10:	01400274 	movhi	r5,9
   83b14:	2947fa84 	addi	r5,r5,8170
   83b18:	dc402915 	stw	r17,164(sp)
   83b1c:	d9402b15 	stw	r5,172(sp)
   83b20:	b023883a 	mov	r17,r22
   83b24:	04c001c4 	movi	r19,7
   83b28:	a82d883a 	mov	r22,r21
   83b2c:	902b883a 	mov	r21,r18
   83b30:	8025883a 	mov	r18,r16
   83b34:	dc002c17 	ldw	r16,176(sp)
   83b38:	00000306 	br	83b48 <___vfprintf_internal_r+0x920>
   83b3c:	8c7ffc04 	addi	r17,r17,-16
   83b40:	42000204 	addi	r8,r8,8
   83b44:	e440110e 	bge	fp,r17,83b8c <___vfprintf_internal_r+0x964>
   83b48:	18c00404 	addi	r3,r3,16
   83b4c:	10800044 	addi	r2,r2,1
   83b50:	45000015 	stw	r20,0(r8)
   83b54:	47000115 	stw	fp,4(r8)
   83b58:	d8c02015 	stw	r3,128(sp)
   83b5c:	d8801f15 	stw	r2,124(sp)
   83b60:	98bff60e 	bge	r19,r2,83b3c <rx_descriptor_end+0xfff83adc>
   83b64:	d9801e04 	addi	r6,sp,120
   83b68:	b80b883a 	mov	r5,r23
   83b6c:	8009883a 	mov	r4,r16
   83b70:	00888f00 	call	888f0 <__sprint_r>
   83b74:	103eae1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   83b78:	8c7ffc04 	addi	r17,r17,-16
   83b7c:	d8c02017 	ldw	r3,128(sp)
   83b80:	d8801f17 	ldw	r2,124(sp)
   83b84:	da000404 	addi	r8,sp,16
   83b88:	e47fef16 	blt	fp,r17,83b48 <rx_descriptor_end+0xfff83ae8>
   83b8c:	9021883a 	mov	r16,r18
   83b90:	a825883a 	mov	r18,r21
   83b94:	b02b883a 	mov	r21,r22
   83b98:	882d883a 	mov	r22,r17
   83b9c:	dc402917 	ldw	r17,164(sp)
   83ba0:	d9002b17 	ldw	r4,172(sp)
   83ba4:	1d87883a 	add	r3,r3,r22
   83ba8:	10800044 	addi	r2,r2,1
   83bac:	41000015 	stw	r4,0(r8)
   83bb0:	45800115 	stw	r22,4(r8)
   83bb4:	d8c02015 	stw	r3,128(sp)
   83bb8:	d8801f15 	stw	r2,124(sp)
   83bbc:	010001c4 	movi	r4,7
   83bc0:	2081ee16 	blt	r4,r2,8437c <___vfprintf_internal_r+0x1154>
   83bc4:	42000204 	addi	r8,r8,8
   83bc8:	9080400c 	andi	r2,r18,256
   83bcc:	1001181e 	bne	r2,zero,84030 <___vfprintf_internal_r+0xe08>
   83bd0:	d9402e17 	ldw	r5,184(sp)
   83bd4:	d8801f17 	ldw	r2,124(sp)
   83bd8:	44000015 	stw	r16,0(r8)
   83bdc:	1947883a 	add	r3,r3,r5
   83be0:	10800044 	addi	r2,r2,1
   83be4:	41400115 	stw	r5,4(r8)
   83be8:	d8c02015 	stw	r3,128(sp)
   83bec:	d8801f15 	stw	r2,124(sp)
   83bf0:	010001c4 	movi	r4,7
   83bf4:	2081d316 	blt	r4,r2,84344 <___vfprintf_internal_r+0x111c>
   83bf8:	42000204 	addi	r8,r8,8
   83bfc:	9480010c 	andi	r18,r18,4
   83c00:	90003226 	beq	r18,zero,83ccc <___vfprintf_internal_r+0xaa4>
   83c04:	d9403117 	ldw	r5,196(sp)
   83c08:	d8802a17 	ldw	r2,168(sp)
   83c0c:	28a1c83a 	sub	r16,r5,r2
   83c10:	04002e0e 	bge	zero,r16,83ccc <___vfprintf_internal_r+0xaa4>
   83c14:	04400404 	movi	r17,16
   83c18:	d8801f17 	ldw	r2,124(sp)
   83c1c:	8c04a20e 	bge	r17,r16,84ea8 <___vfprintf_internal_r+0x1c80>
   83c20:	01400274 	movhi	r5,9
   83c24:	2947fe84 	addi	r5,r5,8186
   83c28:	d9403515 	stw	r5,212(sp)
   83c2c:	048001c4 	movi	r18,7
   83c30:	dcc02c17 	ldw	r19,176(sp)
   83c34:	00000306 	br	83c44 <___vfprintf_internal_r+0xa1c>
   83c38:	843ffc04 	addi	r16,r16,-16
   83c3c:	42000204 	addi	r8,r8,8
   83c40:	8c00130e 	bge	r17,r16,83c90 <___vfprintf_internal_r+0xa68>
   83c44:	01000274 	movhi	r4,9
   83c48:	18c00404 	addi	r3,r3,16
   83c4c:	10800044 	addi	r2,r2,1
   83c50:	2107fe84 	addi	r4,r4,8186
   83c54:	41000015 	stw	r4,0(r8)
   83c58:	44400115 	stw	r17,4(r8)
   83c5c:	d8c02015 	stw	r3,128(sp)
   83c60:	d8801f15 	stw	r2,124(sp)
   83c64:	90bff40e 	bge	r18,r2,83c38 <rx_descriptor_end+0xfff83bd8>
   83c68:	d9801e04 	addi	r6,sp,120
   83c6c:	b80b883a 	mov	r5,r23
   83c70:	9809883a 	mov	r4,r19
   83c74:	00888f00 	call	888f0 <__sprint_r>
   83c78:	103e6d1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   83c7c:	843ffc04 	addi	r16,r16,-16
   83c80:	d8c02017 	ldw	r3,128(sp)
   83c84:	d8801f17 	ldw	r2,124(sp)
   83c88:	da000404 	addi	r8,sp,16
   83c8c:	8c3fed16 	blt	r17,r16,83c44 <rx_descriptor_end+0xfff83be4>
   83c90:	d9403517 	ldw	r5,212(sp)
   83c94:	1c07883a 	add	r3,r3,r16
   83c98:	10800044 	addi	r2,r2,1
   83c9c:	41400015 	stw	r5,0(r8)
   83ca0:	44000115 	stw	r16,4(r8)
   83ca4:	d8c02015 	stw	r3,128(sp)
   83ca8:	d8801f15 	stw	r2,124(sp)
   83cac:	010001c4 	movi	r4,7
   83cb0:	2080060e 	bge	r4,r2,83ccc <___vfprintf_internal_r+0xaa4>
   83cb4:	d9002c17 	ldw	r4,176(sp)
   83cb8:	d9801e04 	addi	r6,sp,120
   83cbc:	b80b883a 	mov	r5,r23
   83cc0:	00888f00 	call	888f0 <__sprint_r>
   83cc4:	103e5a1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   83cc8:	d8c02017 	ldw	r3,128(sp)
   83ccc:	d8803117 	ldw	r2,196(sp)
   83cd0:	d9002a17 	ldw	r4,168(sp)
   83cd4:	1100010e 	bge	r2,r4,83cdc <___vfprintf_internal_r+0xab4>
   83cd8:	2005883a 	mov	r2,r4
   83cdc:	d9402f17 	ldw	r5,188(sp)
   83ce0:	288b883a 	add	r5,r5,r2
   83ce4:	d9402f15 	stw	r5,188(sp)
   83ce8:	18019e1e 	bne	r3,zero,84364 <___vfprintf_internal_r+0x113c>
   83cec:	a8800007 	ldb	r2,0(r21)
   83cf0:	d8001f15 	stw	zero,124(sp)
   83cf4:	da000404 	addi	r8,sp,16
   83cf8:	103d851e 	bne	r2,zero,83310 <rx_descriptor_end+0xfff832b0>
   83cfc:	a821883a 	mov	r16,r21
   83d00:	003d9b06 	br	83370 <rx_descriptor_end+0xfff83310>
   83d04:	18c03fcc 	andi	r3,r3,255
   83d08:	1805c11e 	bne	r3,zero,85410 <___vfprintf_internal_r+0x21e8>
   83d0c:	94800414 	ori	r18,r18,16
   83d10:	9080080c 	andi	r2,r18,32
   83d14:	10020c26 	beq	r2,zero,84548 <___vfprintf_internal_r+0x1320>
   83d18:	d8802d17 	ldw	r2,180(sp)
   83d1c:	d9002917 	ldw	r4,164(sp)
   83d20:	d8002785 	stb	zero,158(sp)
   83d24:	10c00204 	addi	r3,r2,8
   83d28:	14c00017 	ldw	r19,0(r2)
   83d2c:	15800117 	ldw	r22,4(r2)
   83d30:	20040f16 	blt	r4,zero,84d70 <___vfprintf_internal_r+0x1b48>
   83d34:	013fdfc4 	movi	r4,-129
   83d38:	9d84b03a 	or	r2,r19,r22
   83d3c:	d8c02d15 	stw	r3,180(sp)
   83d40:	9124703a 	and	r18,r18,r4
   83d44:	0039883a 	mov	fp,zero
   83d48:	103e891e 	bne	r2,zero,83770 <rx_descriptor_end+0xfff83710>
   83d4c:	d9002917 	ldw	r4,164(sp)
   83d50:	2002c11e 	bne	r4,zero,84858 <___vfprintf_internal_r+0x1630>
   83d54:	d8002915 	stw	zero,164(sp)
   83d58:	d8002e15 	stw	zero,184(sp)
   83d5c:	dc001e04 	addi	r16,sp,120
   83d60:	003ef806 	br	83944 <rx_descriptor_end+0xfff838e4>
   83d64:	18c03fcc 	andi	r3,r3,255
   83d68:	18059d1e 	bne	r3,zero,853e0 <___vfprintf_internal_r+0x21b8>
   83d6c:	01400274 	movhi	r5,9
   83d70:	2947ee04 	addi	r5,r5,8120
   83d74:	d9403915 	stw	r5,228(sp)
   83d78:	9080080c 	andi	r2,r18,32
   83d7c:	10005226 	beq	r2,zero,83ec8 <___vfprintf_internal_r+0xca0>
   83d80:	d8802d17 	ldw	r2,180(sp)
   83d84:	14c00017 	ldw	r19,0(r2)
   83d88:	15800117 	ldw	r22,4(r2)
   83d8c:	10800204 	addi	r2,r2,8
   83d90:	d8802d15 	stw	r2,180(sp)
   83d94:	9080004c 	andi	r2,r18,1
   83d98:	10019026 	beq	r2,zero,843dc <___vfprintf_internal_r+0x11b4>
   83d9c:	9d84b03a 	or	r2,r19,r22
   83da0:	10036926 	beq	r2,zero,84b48 <___vfprintf_internal_r+0x1920>
   83da4:	d8c02917 	ldw	r3,164(sp)
   83da8:	00800c04 	movi	r2,48
   83dac:	d8802705 	stb	r2,156(sp)
   83db0:	dc402745 	stb	r17,157(sp)
   83db4:	d8002785 	stb	zero,158(sp)
   83db8:	90800094 	ori	r2,r18,2
   83dbc:	18045d16 	blt	r3,zero,84f34 <___vfprintf_internal_r+0x1d0c>
   83dc0:	00bfdfc4 	movi	r2,-129
   83dc4:	90a4703a 	and	r18,r18,r2
   83dc8:	94800094 	ori	r18,r18,2
   83dcc:	0039883a 	mov	fp,zero
   83dd0:	d9003917 	ldw	r4,228(sp)
   83dd4:	dc001e04 	addi	r16,sp,120
   83dd8:	988003cc 	andi	r2,r19,15
   83ddc:	b006973a 	slli	r3,r22,28
   83de0:	2085883a 	add	r2,r4,r2
   83de4:	9826d13a 	srli	r19,r19,4
   83de8:	10800003 	ldbu	r2,0(r2)
   83dec:	b02cd13a 	srli	r22,r22,4
   83df0:	843fffc4 	addi	r16,r16,-1
   83df4:	1ce6b03a 	or	r19,r3,r19
   83df8:	80800005 	stb	r2,0(r16)
   83dfc:	9d84b03a 	or	r2,r19,r22
   83e00:	103ff51e 	bne	r2,zero,83dd8 <rx_descriptor_end+0xfff83d78>
   83e04:	d8c02817 	ldw	r3,160(sp)
   83e08:	1c07c83a 	sub	r3,r3,r16
   83e0c:	d8c02e15 	stw	r3,184(sp)
   83e10:	003ecc06 	br	83944 <rx_descriptor_end+0xfff838e4>
   83e14:	18c03fcc 	andi	r3,r3,255
   83e18:	183e9f26 	beq	r3,zero,83898 <rx_descriptor_end+0xfff83838>
   83e1c:	d9c02785 	stb	r7,158(sp)
   83e20:	003e9d06 	br	83898 <rx_descriptor_end+0xfff83838>
   83e24:	00c00044 	movi	r3,1
   83e28:	01c00ac4 	movi	r7,43
   83e2c:	ac400007 	ldb	r17,0(r21)
   83e30:	003d5e06 	br	833ac <rx_descriptor_end+0xfff8334c>
   83e34:	94800814 	ori	r18,r18,32
   83e38:	ac400007 	ldb	r17,0(r21)
   83e3c:	003d5b06 	br	833ac <rx_descriptor_end+0xfff8334c>
   83e40:	d8c02d17 	ldw	r3,180(sp)
   83e44:	d8002785 	stb	zero,158(sp)
   83e48:	1c000017 	ldw	r16,0(r3)
   83e4c:	1cc00104 	addi	r19,r3,4
   83e50:	80041926 	beq	r16,zero,84eb8 <___vfprintf_internal_r+0x1c90>
   83e54:	d9002917 	ldw	r4,164(sp)
   83e58:	2003d016 	blt	r4,zero,84d9c <___vfprintf_internal_r+0x1b74>
   83e5c:	200d883a 	mov	r6,r4
   83e60:	000b883a 	mov	r5,zero
   83e64:	8009883a 	mov	r4,r16
   83e68:	da003d15 	stw	r8,244(sp)
   83e6c:	00873840 	call	87384 <memchr>
   83e70:	da003d17 	ldw	r8,244(sp)
   83e74:	10045426 	beq	r2,zero,84fc8 <___vfprintf_internal_r+0x1da0>
   83e78:	1405c83a 	sub	r2,r2,r16
   83e7c:	d8802e15 	stw	r2,184(sp)
   83e80:	1003cc16 	blt	r2,zero,84db4 <___vfprintf_internal_r+0x1b8c>
   83e84:	df002783 	ldbu	fp,158(sp)
   83e88:	d8802a15 	stw	r2,168(sp)
   83e8c:	dcc02d15 	stw	r19,180(sp)
   83e90:	d8002915 	stw	zero,164(sp)
   83e94:	d8003215 	stw	zero,200(sp)
   83e98:	003eb006 	br	8395c <rx_descriptor_end+0xfff838fc>
   83e9c:	18c03fcc 	andi	r3,r3,255
   83ea0:	183f9b26 	beq	r3,zero,83d10 <rx_descriptor_end+0xfff83cb0>
   83ea4:	d9c02785 	stb	r7,158(sp)
   83ea8:	003f9906 	br	83d10 <rx_descriptor_end+0xfff83cb0>
   83eac:	18c03fcc 	andi	r3,r3,255
   83eb0:	1805551e 	bne	r3,zero,85408 <___vfprintf_internal_r+0x21e0>
   83eb4:	01400274 	movhi	r5,9
   83eb8:	2947f304 	addi	r5,r5,8140
   83ebc:	d9403915 	stw	r5,228(sp)
   83ec0:	9080080c 	andi	r2,r18,32
   83ec4:	103fae1e 	bne	r2,zero,83d80 <rx_descriptor_end+0xfff83d20>
   83ec8:	9080040c 	andi	r2,r18,16
   83ecc:	1002de26 	beq	r2,zero,84a48 <___vfprintf_internal_r+0x1820>
   83ed0:	d8c02d17 	ldw	r3,180(sp)
   83ed4:	002d883a 	mov	r22,zero
   83ed8:	1cc00017 	ldw	r19,0(r3)
   83edc:	18c00104 	addi	r3,r3,4
   83ee0:	d8c02d15 	stw	r3,180(sp)
   83ee4:	003fab06 	br	83d94 <rx_descriptor_end+0xfff83d34>
   83ee8:	38803fcc 	andi	r2,r7,255
   83eec:	1080201c 	xori	r2,r2,128
   83ef0:	10bfe004 	addi	r2,r2,-128
   83ef4:	1002d21e 	bne	r2,zero,84a40 <___vfprintf_internal_r+0x1818>
   83ef8:	00c00044 	movi	r3,1
   83efc:	01c00804 	movi	r7,32
   83f00:	ac400007 	ldb	r17,0(r21)
   83f04:	003d2906 	br	833ac <rx_descriptor_end+0xfff8334c>
   83f08:	94800054 	ori	r18,r18,1
   83f0c:	ac400007 	ldb	r17,0(r21)
   83f10:	003d2606 	br	833ac <rx_descriptor_end+0xfff8334c>
   83f14:	18c03fcc 	andi	r3,r3,255
   83f18:	183e0526 	beq	r3,zero,83730 <rx_descriptor_end+0xfff836d0>
   83f1c:	d9c02785 	stb	r7,158(sp)
   83f20:	003e0306 	br	83730 <rx_descriptor_end+0xfff836d0>
   83f24:	94801014 	ori	r18,r18,64
   83f28:	ac400007 	ldb	r17,0(r21)
   83f2c:	003d1f06 	br	833ac <rx_descriptor_end+0xfff8334c>
   83f30:	ac400007 	ldb	r17,0(r21)
   83f34:	8a438726 	beq	r17,r9,84d54 <___vfprintf_internal_r+0x1b2c>
   83f38:	94800414 	ori	r18,r18,16
   83f3c:	003d1b06 	br	833ac <rx_descriptor_end+0xfff8334c>
   83f40:	18c03fcc 	andi	r3,r3,255
   83f44:	1805341e 	bne	r3,zero,85418 <___vfprintf_internal_r+0x21f0>
   83f48:	9080080c 	andi	r2,r18,32
   83f4c:	1002cd26 	beq	r2,zero,84a84 <___vfprintf_internal_r+0x185c>
   83f50:	d9402d17 	ldw	r5,180(sp)
   83f54:	d9002f17 	ldw	r4,188(sp)
   83f58:	28800017 	ldw	r2,0(r5)
   83f5c:	2007d7fa 	srai	r3,r4,31
   83f60:	29400104 	addi	r5,r5,4
   83f64:	d9402d15 	stw	r5,180(sp)
   83f68:	11000015 	stw	r4,0(r2)
   83f6c:	10c00115 	stw	r3,4(r2)
   83f70:	003ce506 	br	83308 <rx_descriptor_end+0xfff832a8>
   83f74:	d8c02d17 	ldw	r3,180(sp)
   83f78:	d9002d17 	ldw	r4,180(sp)
   83f7c:	d8002785 	stb	zero,158(sp)
   83f80:	18800017 	ldw	r2,0(r3)
   83f84:	21000104 	addi	r4,r4,4
   83f88:	00c00044 	movi	r3,1
   83f8c:	d8c02a15 	stw	r3,168(sp)
   83f90:	d8801405 	stb	r2,80(sp)
   83f94:	d9002d15 	stw	r4,180(sp)
   83f98:	d8c02e15 	stw	r3,184(sp)
   83f9c:	d8002915 	stw	zero,164(sp)
   83fa0:	d8003215 	stw	zero,200(sp)
   83fa4:	dc001404 	addi	r16,sp,80
   83fa8:	0039883a 	mov	fp,zero
   83fac:	003e7206 	br	83978 <rx_descriptor_end+0xfff83918>
   83fb0:	01000274 	movhi	r4,9
   83fb4:	2107f304 	addi	r4,r4,8140
   83fb8:	0039883a 	mov	fp,zero
   83fbc:	d9003915 	stw	r4,228(sp)
   83fc0:	04401e04 	movi	r17,120
   83fc4:	003f8206 	br	83dd0 <rx_descriptor_end+0xfff83d70>
   83fc8:	18c03fcc 	andi	r3,r3,255
   83fcc:	1805061e 	bne	r3,zero,853e8 <___vfprintf_internal_r+0x21c0>
   83fd0:	883d9126 	beq	r17,zero,83618 <rx_descriptor_end+0xfff835b8>
   83fd4:	00c00044 	movi	r3,1
   83fd8:	d8c02a15 	stw	r3,168(sp)
   83fdc:	dc401405 	stb	r17,80(sp)
   83fe0:	d8002785 	stb	zero,158(sp)
   83fe4:	003fec06 	br	83f98 <rx_descriptor_end+0xfff83f38>
   83fe8:	01400274 	movhi	r5,9
   83fec:	2947f304 	addi	r5,r5,8140
   83ff0:	d9403915 	stw	r5,228(sp)
   83ff4:	d8c02d15 	stw	r3,180(sp)
   83ff8:	1025883a 	mov	r18,r2
   83ffc:	04401e04 	movi	r17,120
   84000:	9d84b03a 	or	r2,r19,r22
   84004:	1000fc1e 	bne	r2,zero,843f8 <___vfprintf_internal_r+0x11d0>
   84008:	0039883a 	mov	fp,zero
   8400c:	00800084 	movi	r2,2
   84010:	10803fcc 	andi	r2,r2,255
   84014:	00c00044 	movi	r3,1
   84018:	10c20f26 	beq	r2,r3,84858 <___vfprintf_internal_r+0x1630>
   8401c:	00c00084 	movi	r3,2
   84020:	10fd6326 	beq	r2,r3,835b0 <rx_descriptor_end+0xfff83550>
   84024:	003e2d06 	br	838dc <rx_descriptor_end+0xfff8387c>
   84028:	d8c02017 	ldw	r3,128(sp)
   8402c:	003e9306 	br	83a7c <rx_descriptor_end+0xfff83a1c>
   84030:	00801944 	movi	r2,101
   84034:	14407e0e 	bge	r2,r17,84230 <___vfprintf_internal_r+0x1008>
   84038:	d9003617 	ldw	r4,216(sp)
   8403c:	d9403817 	ldw	r5,224(sp)
   84040:	000d883a 	mov	r6,zero
   84044:	000f883a 	mov	r7,zero
   84048:	d8c03c15 	stw	r3,240(sp)
   8404c:	da003d15 	stw	r8,244(sp)
   84050:	008cd100 	call	8cd10 <__eqdf2>
   84054:	d8c03c17 	ldw	r3,240(sp)
   84058:	da003d17 	ldw	r8,244(sp)
   8405c:	1000f71e 	bne	r2,zero,8443c <___vfprintf_internal_r+0x1214>
   84060:	d8801f17 	ldw	r2,124(sp)
   84064:	01000274 	movhi	r4,9
   84068:	2107fa04 	addi	r4,r4,8168
   8406c:	18c00044 	addi	r3,r3,1
   84070:	10800044 	addi	r2,r2,1
   84074:	41000015 	stw	r4,0(r8)
   84078:	01000044 	movi	r4,1
   8407c:	41000115 	stw	r4,4(r8)
   84080:	d8c02015 	stw	r3,128(sp)
   84084:	d8801f15 	stw	r2,124(sp)
   84088:	010001c4 	movi	r4,7
   8408c:	2082b816 	blt	r4,r2,84b70 <___vfprintf_internal_r+0x1948>
   84090:	42000204 	addi	r8,r8,8
   84094:	d8802617 	ldw	r2,152(sp)
   84098:	d9403317 	ldw	r5,204(sp)
   8409c:	11400216 	blt	r2,r5,840a8 <___vfprintf_internal_r+0xe80>
   840a0:	9080004c 	andi	r2,r18,1
   840a4:	103ed526 	beq	r2,zero,83bfc <rx_descriptor_end+0xfff83b9c>
   840a8:	d8803717 	ldw	r2,220(sp)
   840ac:	d9003417 	ldw	r4,208(sp)
   840b0:	d9403717 	ldw	r5,220(sp)
   840b4:	1887883a 	add	r3,r3,r2
   840b8:	d8801f17 	ldw	r2,124(sp)
   840bc:	41000015 	stw	r4,0(r8)
   840c0:	41400115 	stw	r5,4(r8)
   840c4:	10800044 	addi	r2,r2,1
   840c8:	d8c02015 	stw	r3,128(sp)
   840cc:	d8801f15 	stw	r2,124(sp)
   840d0:	010001c4 	movi	r4,7
   840d4:	20832916 	blt	r4,r2,84d7c <___vfprintf_internal_r+0x1b54>
   840d8:	42000204 	addi	r8,r8,8
   840dc:	d8803317 	ldw	r2,204(sp)
   840e0:	143fffc4 	addi	r16,r2,-1
   840e4:	043ec50e 	bge	zero,r16,83bfc <rx_descriptor_end+0xfff83b9c>
   840e8:	04400404 	movi	r17,16
   840ec:	d8801f17 	ldw	r2,124(sp)
   840f0:	8c00880e 	bge	r17,r16,84314 <___vfprintf_internal_r+0x10ec>
   840f4:	01400274 	movhi	r5,9
   840f8:	2947fa84 	addi	r5,r5,8170
   840fc:	d9402b15 	stw	r5,172(sp)
   84100:	058001c4 	movi	r22,7
   84104:	dcc02c17 	ldw	r19,176(sp)
   84108:	00000306 	br	84118 <___vfprintf_internal_r+0xef0>
   8410c:	42000204 	addi	r8,r8,8
   84110:	843ffc04 	addi	r16,r16,-16
   84114:	8c00820e 	bge	r17,r16,84320 <___vfprintf_internal_r+0x10f8>
   84118:	18c00404 	addi	r3,r3,16
   8411c:	10800044 	addi	r2,r2,1
   84120:	45000015 	stw	r20,0(r8)
   84124:	44400115 	stw	r17,4(r8)
   84128:	d8c02015 	stw	r3,128(sp)
   8412c:	d8801f15 	stw	r2,124(sp)
   84130:	b0bff60e 	bge	r22,r2,8410c <rx_descriptor_end+0xfff840ac>
   84134:	d9801e04 	addi	r6,sp,120
   84138:	b80b883a 	mov	r5,r23
   8413c:	9809883a 	mov	r4,r19
   84140:	00888f00 	call	888f0 <__sprint_r>
   84144:	103d3a1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84148:	d8c02017 	ldw	r3,128(sp)
   8414c:	d8801f17 	ldw	r2,124(sp)
   84150:	da000404 	addi	r8,sp,16
   84154:	003fee06 	br	84110 <rx_descriptor_end+0xfff840b0>
   84158:	d9403117 	ldw	r5,196(sp)
   8415c:	d8802a17 	ldw	r2,168(sp)
   84160:	28adc83a 	sub	r22,r5,r2
   84164:	05be630e 	bge	zero,r22,83af4 <rx_descriptor_end+0xfff83a94>
   84168:	07000404 	movi	fp,16
   8416c:	d8801f17 	ldw	r2,124(sp)
   84170:	e5838f0e 	bge	fp,r22,84fb0 <___vfprintf_internal_r+0x1d88>
   84174:	01400274 	movhi	r5,9
   84178:	2947fa84 	addi	r5,r5,8170
   8417c:	dc403015 	stw	r17,192(sp)
   84180:	d9402b15 	stw	r5,172(sp)
   84184:	b023883a 	mov	r17,r22
   84188:	04c001c4 	movi	r19,7
   8418c:	a82d883a 	mov	r22,r21
   84190:	902b883a 	mov	r21,r18
   84194:	8025883a 	mov	r18,r16
   84198:	dc002c17 	ldw	r16,176(sp)
   8419c:	00000306 	br	841ac <___vfprintf_internal_r+0xf84>
   841a0:	8c7ffc04 	addi	r17,r17,-16
   841a4:	42000204 	addi	r8,r8,8
   841a8:	e440110e 	bge	fp,r17,841f0 <___vfprintf_internal_r+0xfc8>
   841ac:	18c00404 	addi	r3,r3,16
   841b0:	10800044 	addi	r2,r2,1
   841b4:	45000015 	stw	r20,0(r8)
   841b8:	47000115 	stw	fp,4(r8)
   841bc:	d8c02015 	stw	r3,128(sp)
   841c0:	d8801f15 	stw	r2,124(sp)
   841c4:	98bff60e 	bge	r19,r2,841a0 <rx_descriptor_end+0xfff84140>
   841c8:	d9801e04 	addi	r6,sp,120
   841cc:	b80b883a 	mov	r5,r23
   841d0:	8009883a 	mov	r4,r16
   841d4:	00888f00 	call	888f0 <__sprint_r>
   841d8:	103d151e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   841dc:	8c7ffc04 	addi	r17,r17,-16
   841e0:	d8c02017 	ldw	r3,128(sp)
   841e4:	d8801f17 	ldw	r2,124(sp)
   841e8:	da000404 	addi	r8,sp,16
   841ec:	e47fef16 	blt	fp,r17,841ac <rx_descriptor_end+0xfff8414c>
   841f0:	9021883a 	mov	r16,r18
   841f4:	a825883a 	mov	r18,r21
   841f8:	b02b883a 	mov	r21,r22
   841fc:	882d883a 	mov	r22,r17
   84200:	dc403017 	ldw	r17,192(sp)
   84204:	d9002b17 	ldw	r4,172(sp)
   84208:	1d87883a 	add	r3,r3,r22
   8420c:	10800044 	addi	r2,r2,1
   84210:	41000015 	stw	r4,0(r8)
   84214:	45800115 	stw	r22,4(r8)
   84218:	d8c02015 	stw	r3,128(sp)
   8421c:	d8801f15 	stw	r2,124(sp)
   84220:	010001c4 	movi	r4,7
   84224:	20818e16 	blt	r4,r2,84860 <___vfprintf_internal_r+0x1638>
   84228:	42000204 	addi	r8,r8,8
   8422c:	003e3106 	br	83af4 <rx_descriptor_end+0xfff83a94>
   84230:	d9403317 	ldw	r5,204(sp)
   84234:	00800044 	movi	r2,1
   84238:	18c00044 	addi	r3,r3,1
   8423c:	1141530e 	bge	r2,r5,8478c <___vfprintf_internal_r+0x1564>
   84240:	dc401f17 	ldw	r17,124(sp)
   84244:	00800044 	movi	r2,1
   84248:	40800115 	stw	r2,4(r8)
   8424c:	8c400044 	addi	r17,r17,1
   84250:	44000015 	stw	r16,0(r8)
   84254:	d8c02015 	stw	r3,128(sp)
   84258:	dc401f15 	stw	r17,124(sp)
   8425c:	008001c4 	movi	r2,7
   84260:	14416b16 	blt	r2,r17,84810 <___vfprintf_internal_r+0x15e8>
   84264:	42000204 	addi	r8,r8,8
   84268:	d8803717 	ldw	r2,220(sp)
   8426c:	d9003417 	ldw	r4,208(sp)
   84270:	8c400044 	addi	r17,r17,1
   84274:	10c7883a 	add	r3,r2,r3
   84278:	40800115 	stw	r2,4(r8)
   8427c:	41000015 	stw	r4,0(r8)
   84280:	d8c02015 	stw	r3,128(sp)
   84284:	dc401f15 	stw	r17,124(sp)
   84288:	008001c4 	movi	r2,7
   8428c:	14416916 	blt	r2,r17,84834 <___vfprintf_internal_r+0x160c>
   84290:	45800204 	addi	r22,r8,8
   84294:	d9003617 	ldw	r4,216(sp)
   84298:	d9403817 	ldw	r5,224(sp)
   8429c:	000d883a 	mov	r6,zero
   842a0:	000f883a 	mov	r7,zero
   842a4:	d8c03c15 	stw	r3,240(sp)
   842a8:	008cd100 	call	8cd10 <__eqdf2>
   842ac:	d8c03c17 	ldw	r3,240(sp)
   842b0:	1000bc26 	beq	r2,zero,845a4 <___vfprintf_internal_r+0x137c>
   842b4:	d9403317 	ldw	r5,204(sp)
   842b8:	84000044 	addi	r16,r16,1
   842bc:	8c400044 	addi	r17,r17,1
   842c0:	28bfffc4 	addi	r2,r5,-1
   842c4:	1887883a 	add	r3,r3,r2
   842c8:	b0800115 	stw	r2,4(r22)
   842cc:	b4000015 	stw	r16,0(r22)
   842d0:	d8c02015 	stw	r3,128(sp)
   842d4:	dc401f15 	stw	r17,124(sp)
   842d8:	008001c4 	movi	r2,7
   842dc:	14414316 	blt	r2,r17,847ec <___vfprintf_internal_r+0x15c4>
   842e0:	b5800204 	addi	r22,r22,8
   842e4:	d9003a17 	ldw	r4,232(sp)
   842e8:	df0022c4 	addi	fp,sp,139
   842ec:	8c400044 	addi	r17,r17,1
   842f0:	20c7883a 	add	r3,r4,r3
   842f4:	b7000015 	stw	fp,0(r22)
   842f8:	b1000115 	stw	r4,4(r22)
   842fc:	d8c02015 	stw	r3,128(sp)
   84300:	dc401f15 	stw	r17,124(sp)
   84304:	008001c4 	movi	r2,7
   84308:	14400e16 	blt	r2,r17,84344 <___vfprintf_internal_r+0x111c>
   8430c:	b2000204 	addi	r8,r22,8
   84310:	003e3a06 	br	83bfc <rx_descriptor_end+0xfff83b9c>
   84314:	01000274 	movhi	r4,9
   84318:	2107fa84 	addi	r4,r4,8170
   8431c:	d9002b15 	stw	r4,172(sp)
   84320:	d9002b17 	ldw	r4,172(sp)
   84324:	1c07883a 	add	r3,r3,r16
   84328:	44000115 	stw	r16,4(r8)
   8432c:	41000015 	stw	r4,0(r8)
   84330:	10800044 	addi	r2,r2,1
   84334:	d8c02015 	stw	r3,128(sp)
   84338:	d8801f15 	stw	r2,124(sp)
   8433c:	010001c4 	movi	r4,7
   84340:	20be2d0e 	bge	r4,r2,83bf8 <rx_descriptor_end+0xfff83b98>
   84344:	d9002c17 	ldw	r4,176(sp)
   84348:	d9801e04 	addi	r6,sp,120
   8434c:	b80b883a 	mov	r5,r23
   84350:	00888f00 	call	888f0 <__sprint_r>
   84354:	103cb61e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84358:	d8c02017 	ldw	r3,128(sp)
   8435c:	da000404 	addi	r8,sp,16
   84360:	003e2606 	br	83bfc <rx_descriptor_end+0xfff83b9c>
   84364:	d9002c17 	ldw	r4,176(sp)
   84368:	d9801e04 	addi	r6,sp,120
   8436c:	b80b883a 	mov	r5,r23
   84370:	00888f00 	call	888f0 <__sprint_r>
   84374:	103e5d26 	beq	r2,zero,83cec <rx_descriptor_end+0xfff83c8c>
   84378:	003cad06 	br	83630 <rx_descriptor_end+0xfff835d0>
   8437c:	d9002c17 	ldw	r4,176(sp)
   84380:	d9801e04 	addi	r6,sp,120
   84384:	b80b883a 	mov	r5,r23
   84388:	00888f00 	call	888f0 <__sprint_r>
   8438c:	103ca81e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84390:	d8c02017 	ldw	r3,128(sp)
   84394:	da000404 	addi	r8,sp,16
   84398:	003e0b06 	br	83bc8 <rx_descriptor_end+0xfff83b68>
   8439c:	d9002c17 	ldw	r4,176(sp)
   843a0:	d9801e04 	addi	r6,sp,120
   843a4:	b80b883a 	mov	r5,r23
   843a8:	00888f00 	call	888f0 <__sprint_r>
   843ac:	103ca01e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   843b0:	d8c02017 	ldw	r3,128(sp)
   843b4:	da000404 	addi	r8,sp,16
   843b8:	003dbd06 	br	83ab0 <rx_descriptor_end+0xfff83a50>
   843bc:	d9002c17 	ldw	r4,176(sp)
   843c0:	d9801e04 	addi	r6,sp,120
   843c4:	b80b883a 	mov	r5,r23
   843c8:	00888f00 	call	888f0 <__sprint_r>
   843cc:	103c981e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   843d0:	d8c02017 	ldw	r3,128(sp)
   843d4:	da000404 	addi	r8,sp,16
   843d8:	003dc306 	br	83ae8 <rx_descriptor_end+0xfff83a88>
   843dc:	d8802917 	ldw	r2,164(sp)
   843e0:	d8002785 	stb	zero,158(sp)
   843e4:	103f0616 	blt	r2,zero,84000 <rx_descriptor_end+0xfff83fa0>
   843e8:	00ffdfc4 	movi	r3,-129
   843ec:	9d84b03a 	or	r2,r19,r22
   843f0:	90e4703a 	and	r18,r18,r3
   843f4:	103c6b26 	beq	r2,zero,835a4 <rx_descriptor_end+0xfff83544>
   843f8:	0039883a 	mov	fp,zero
   843fc:	003e7406 	br	83dd0 <rx_descriptor_end+0xfff83d70>
   84400:	9080040c 	andi	r2,r18,16
   84404:	1001b326 	beq	r2,zero,84ad4 <___vfprintf_internal_r+0x18ac>
   84408:	d9002d17 	ldw	r4,180(sp)
   8440c:	d9402917 	ldw	r5,164(sp)
   84410:	d8002785 	stb	zero,158(sp)
   84414:	20800104 	addi	r2,r4,4
   84418:	24c00017 	ldw	r19,0(r4)
   8441c:	002d883a 	mov	r22,zero
   84420:	2801b516 	blt	r5,zero,84af8 <___vfprintf_internal_r+0x18d0>
   84424:	00ffdfc4 	movi	r3,-129
   84428:	d8802d15 	stw	r2,180(sp)
   8442c:	90e4703a 	and	r18,r18,r3
   84430:	983d2726 	beq	r19,zero,838d0 <rx_descriptor_end+0xfff83870>
   84434:	0039883a 	mov	fp,zero
   84438:	003d2a06 	br	838e4 <rx_descriptor_end+0xfff83884>
   8443c:	dc402617 	ldw	r17,152(sp)
   84440:	0441d30e 	bge	zero,r17,84b90 <___vfprintf_internal_r+0x1968>
   84444:	dc403217 	ldw	r17,200(sp)
   84448:	d8803317 	ldw	r2,204(sp)
   8444c:	1440010e 	bge	r2,r17,84454 <___vfprintf_internal_r+0x122c>
   84450:	1023883a 	mov	r17,r2
   84454:	04400a0e 	bge	zero,r17,84480 <___vfprintf_internal_r+0x1258>
   84458:	d8801f17 	ldw	r2,124(sp)
   8445c:	1c47883a 	add	r3,r3,r17
   84460:	44000015 	stw	r16,0(r8)
   84464:	10800044 	addi	r2,r2,1
   84468:	44400115 	stw	r17,4(r8)
   8446c:	d8c02015 	stw	r3,128(sp)
   84470:	d8801f15 	stw	r2,124(sp)
   84474:	010001c4 	movi	r4,7
   84478:	20826516 	blt	r4,r2,84e10 <___vfprintf_internal_r+0x1be8>
   8447c:	42000204 	addi	r8,r8,8
   84480:	88026116 	blt	r17,zero,84e08 <___vfprintf_internal_r+0x1be0>
   84484:	d9003217 	ldw	r4,200(sp)
   84488:	2463c83a 	sub	r17,r4,r17
   8448c:	04407b0e 	bge	zero,r17,8467c <___vfprintf_internal_r+0x1454>
   84490:	05800404 	movi	r22,16
   84494:	d8801f17 	ldw	r2,124(sp)
   84498:	b4419d0e 	bge	r22,r17,84b10 <___vfprintf_internal_r+0x18e8>
   8449c:	01000274 	movhi	r4,9
   844a0:	2107fa84 	addi	r4,r4,8170
   844a4:	d9002b15 	stw	r4,172(sp)
   844a8:	070001c4 	movi	fp,7
   844ac:	dcc02c17 	ldw	r19,176(sp)
   844b0:	00000306 	br	844c0 <___vfprintf_internal_r+0x1298>
   844b4:	42000204 	addi	r8,r8,8
   844b8:	8c7ffc04 	addi	r17,r17,-16
   844bc:	b441970e 	bge	r22,r17,84b1c <___vfprintf_internal_r+0x18f4>
   844c0:	18c00404 	addi	r3,r3,16
   844c4:	10800044 	addi	r2,r2,1
   844c8:	45000015 	stw	r20,0(r8)
   844cc:	45800115 	stw	r22,4(r8)
   844d0:	d8c02015 	stw	r3,128(sp)
   844d4:	d8801f15 	stw	r2,124(sp)
   844d8:	e0bff60e 	bge	fp,r2,844b4 <rx_descriptor_end+0xfff84454>
   844dc:	d9801e04 	addi	r6,sp,120
   844e0:	b80b883a 	mov	r5,r23
   844e4:	9809883a 	mov	r4,r19
   844e8:	00888f00 	call	888f0 <__sprint_r>
   844ec:	103c501e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   844f0:	d8c02017 	ldw	r3,128(sp)
   844f4:	d8801f17 	ldw	r2,124(sp)
   844f8:	da000404 	addi	r8,sp,16
   844fc:	003fee06 	br	844b8 <rx_descriptor_end+0xfff84458>
   84500:	d9002c17 	ldw	r4,176(sp)
   84504:	d9801e04 	addi	r6,sp,120
   84508:	b80b883a 	mov	r5,r23
   8450c:	00888f00 	call	888f0 <__sprint_r>
   84510:	103c471e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84514:	d8c02017 	ldw	r3,128(sp)
   84518:	df002787 	ldb	fp,158(sp)
   8451c:	da000404 	addi	r8,sp,16
   84520:	003d5606 	br	83a7c <rx_descriptor_end+0xfff83a1c>
   84524:	9080040c 	andi	r2,r18,16
   84528:	10016126 	beq	r2,zero,84ab0 <___vfprintf_internal_r+0x1888>
   8452c:	d8802d17 	ldw	r2,180(sp)
   84530:	14c00017 	ldw	r19,0(r2)
   84534:	10800104 	addi	r2,r2,4
   84538:	d8802d15 	stw	r2,180(sp)
   8453c:	982dd7fa 	srai	r22,r19,31
   84540:	b005883a 	mov	r2,r22
   84544:	003c8206 	br	83750 <rx_descriptor_end+0xfff836f0>
   84548:	9080040c 	andi	r2,r18,16
   8454c:	10003526 	beq	r2,zero,84624 <___vfprintf_internal_r+0x13fc>
   84550:	d9402d17 	ldw	r5,180(sp)
   84554:	d8c02917 	ldw	r3,164(sp)
   84558:	d8002785 	stb	zero,158(sp)
   8455c:	28800104 	addi	r2,r5,4
   84560:	2cc00017 	ldw	r19,0(r5)
   84564:	002d883a 	mov	r22,zero
   84568:	18003716 	blt	r3,zero,84648 <___vfprintf_internal_r+0x1420>
   8456c:	00ffdfc4 	movi	r3,-129
   84570:	d8802d15 	stw	r2,180(sp)
   84574:	90e4703a 	and	r18,r18,r3
   84578:	0039883a 	mov	fp,zero
   8457c:	983df326 	beq	r19,zero,83d4c <rx_descriptor_end+0xfff83cec>
   84580:	00800244 	movi	r2,9
   84584:	14fc7b36 	bltu	r2,r19,83774 <rx_descriptor_end+0xfff83714>
   84588:	d8c02817 	ldw	r3,160(sp)
   8458c:	dc001dc4 	addi	r16,sp,119
   84590:	9cc00c04 	addi	r19,r19,48
   84594:	1c07c83a 	sub	r3,r3,r16
   84598:	dcc01dc5 	stb	r19,119(sp)
   8459c:	d8c02e15 	stw	r3,184(sp)
   845a0:	003ce806 	br	83944 <rx_descriptor_end+0xfff838e4>
   845a4:	d8803317 	ldw	r2,204(sp)
   845a8:	143fffc4 	addi	r16,r2,-1
   845ac:	043f4d0e 	bge	zero,r16,842e4 <rx_descriptor_end+0xfff84284>
   845b0:	07000404 	movi	fp,16
   845b4:	e400810e 	bge	fp,r16,847bc <___vfprintf_internal_r+0x1594>
   845b8:	01400274 	movhi	r5,9
   845bc:	2947fa84 	addi	r5,r5,8170
   845c0:	d9402b15 	stw	r5,172(sp)
   845c4:	01c001c4 	movi	r7,7
   845c8:	dcc02c17 	ldw	r19,176(sp)
   845cc:	00000306 	br	845dc <___vfprintf_internal_r+0x13b4>
   845d0:	b5800204 	addi	r22,r22,8
   845d4:	843ffc04 	addi	r16,r16,-16
   845d8:	e4007b0e 	bge	fp,r16,847c8 <___vfprintf_internal_r+0x15a0>
   845dc:	18c00404 	addi	r3,r3,16
   845e0:	8c400044 	addi	r17,r17,1
   845e4:	b5000015 	stw	r20,0(r22)
   845e8:	b7000115 	stw	fp,4(r22)
   845ec:	d8c02015 	stw	r3,128(sp)
   845f0:	dc401f15 	stw	r17,124(sp)
   845f4:	3c7ff60e 	bge	r7,r17,845d0 <rx_descriptor_end+0xfff84570>
   845f8:	d9801e04 	addi	r6,sp,120
   845fc:	b80b883a 	mov	r5,r23
   84600:	9809883a 	mov	r4,r19
   84604:	d9c03c15 	stw	r7,240(sp)
   84608:	00888f00 	call	888f0 <__sprint_r>
   8460c:	d9c03c17 	ldw	r7,240(sp)
   84610:	103c071e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84614:	d8c02017 	ldw	r3,128(sp)
   84618:	dc401f17 	ldw	r17,124(sp)
   8461c:	dd800404 	addi	r22,sp,16
   84620:	003fec06 	br	845d4 <rx_descriptor_end+0xfff84574>
   84624:	9080100c 	andi	r2,r18,64
   84628:	d8002785 	stb	zero,158(sp)
   8462c:	10010e26 	beq	r2,zero,84a68 <___vfprintf_internal_r+0x1840>
   84630:	d9002d17 	ldw	r4,180(sp)
   84634:	d9402917 	ldw	r5,164(sp)
   84638:	002d883a 	mov	r22,zero
   8463c:	20800104 	addi	r2,r4,4
   84640:	24c0000b 	ldhu	r19,0(r4)
   84644:	283fc90e 	bge	r5,zero,8456c <rx_descriptor_end+0xfff8450c>
   84648:	d8802d15 	stw	r2,180(sp)
   8464c:	0039883a 	mov	fp,zero
   84650:	9d84b03a 	or	r2,r19,r22
   84654:	103c461e 	bne	r2,zero,83770 <rx_descriptor_end+0xfff83710>
   84658:	00800044 	movi	r2,1
   8465c:	003e6c06 	br	84010 <rx_descriptor_end+0xfff83fb0>
   84660:	d9002c17 	ldw	r4,176(sp)
   84664:	d9801e04 	addi	r6,sp,120
   84668:	b80b883a 	mov	r5,r23
   8466c:	00888f00 	call	888f0 <__sprint_r>
   84670:	103bef1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84674:	d8c02017 	ldw	r3,128(sp)
   84678:	da000404 	addi	r8,sp,16
   8467c:	d9003217 	ldw	r4,200(sp)
   84680:	d8802617 	ldw	r2,152(sp)
   84684:	d9403317 	ldw	r5,204(sp)
   84688:	8123883a 	add	r17,r16,r4
   8468c:	11400216 	blt	r2,r5,84698 <___vfprintf_internal_r+0x1470>
   84690:	9100004c 	andi	r4,r18,1
   84694:	20000d26 	beq	r4,zero,846cc <___vfprintf_internal_r+0x14a4>
   84698:	d9003717 	ldw	r4,220(sp)
   8469c:	d9403417 	ldw	r5,208(sp)
   846a0:	1907883a 	add	r3,r3,r4
   846a4:	d9001f17 	ldw	r4,124(sp)
   846a8:	41400015 	stw	r5,0(r8)
   846ac:	d9403717 	ldw	r5,220(sp)
   846b0:	21000044 	addi	r4,r4,1
   846b4:	d8c02015 	stw	r3,128(sp)
   846b8:	41400115 	stw	r5,4(r8)
   846bc:	d9001f15 	stw	r4,124(sp)
   846c0:	014001c4 	movi	r5,7
   846c4:	2901e816 	blt	r5,r4,84e68 <___vfprintf_internal_r+0x1c40>
   846c8:	42000204 	addi	r8,r8,8
   846cc:	d9003317 	ldw	r4,204(sp)
   846d0:	8121883a 	add	r16,r16,r4
   846d4:	2085c83a 	sub	r2,r4,r2
   846d8:	8461c83a 	sub	r16,r16,r17
   846dc:	1400010e 	bge	r2,r16,846e4 <___vfprintf_internal_r+0x14bc>
   846e0:	1021883a 	mov	r16,r2
   846e4:	04000a0e 	bge	zero,r16,84710 <___vfprintf_internal_r+0x14e8>
   846e8:	d9001f17 	ldw	r4,124(sp)
   846ec:	1c07883a 	add	r3,r3,r16
   846f0:	44400015 	stw	r17,0(r8)
   846f4:	21000044 	addi	r4,r4,1
   846f8:	44000115 	stw	r16,4(r8)
   846fc:	d8c02015 	stw	r3,128(sp)
   84700:	d9001f15 	stw	r4,124(sp)
   84704:	014001c4 	movi	r5,7
   84708:	2901fb16 	blt	r5,r4,84ef8 <___vfprintf_internal_r+0x1cd0>
   8470c:	42000204 	addi	r8,r8,8
   84710:	8001f716 	blt	r16,zero,84ef0 <___vfprintf_internal_r+0x1cc8>
   84714:	1421c83a 	sub	r16,r2,r16
   84718:	043d380e 	bge	zero,r16,83bfc <rx_descriptor_end+0xfff83b9c>
   8471c:	04400404 	movi	r17,16
   84720:	d8801f17 	ldw	r2,124(sp)
   84724:	8c3efb0e 	bge	r17,r16,84314 <rx_descriptor_end+0xfff842b4>
   84728:	01400274 	movhi	r5,9
   8472c:	2947fa84 	addi	r5,r5,8170
   84730:	d9402b15 	stw	r5,172(sp)
   84734:	058001c4 	movi	r22,7
   84738:	dcc02c17 	ldw	r19,176(sp)
   8473c:	00000306 	br	8474c <___vfprintf_internal_r+0x1524>
   84740:	42000204 	addi	r8,r8,8
   84744:	843ffc04 	addi	r16,r16,-16
   84748:	8c3ef50e 	bge	r17,r16,84320 <rx_descriptor_end+0xfff842c0>
   8474c:	18c00404 	addi	r3,r3,16
   84750:	10800044 	addi	r2,r2,1
   84754:	45000015 	stw	r20,0(r8)
   84758:	44400115 	stw	r17,4(r8)
   8475c:	d8c02015 	stw	r3,128(sp)
   84760:	d8801f15 	stw	r2,124(sp)
   84764:	b0bff60e 	bge	r22,r2,84740 <rx_descriptor_end+0xfff846e0>
   84768:	d9801e04 	addi	r6,sp,120
   8476c:	b80b883a 	mov	r5,r23
   84770:	9809883a 	mov	r4,r19
   84774:	00888f00 	call	888f0 <__sprint_r>
   84778:	103bad1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   8477c:	d8c02017 	ldw	r3,128(sp)
   84780:	d8801f17 	ldw	r2,124(sp)
   84784:	da000404 	addi	r8,sp,16
   84788:	003fee06 	br	84744 <rx_descriptor_end+0xfff846e4>
   8478c:	9088703a 	and	r4,r18,r2
   84790:	203eab1e 	bne	r4,zero,84240 <rx_descriptor_end+0xfff841e0>
   84794:	dc401f17 	ldw	r17,124(sp)
   84798:	40800115 	stw	r2,4(r8)
   8479c:	44000015 	stw	r16,0(r8)
   847a0:	8c400044 	addi	r17,r17,1
   847a4:	d8c02015 	stw	r3,128(sp)
   847a8:	dc401f15 	stw	r17,124(sp)
   847ac:	008001c4 	movi	r2,7
   847b0:	14400e16 	blt	r2,r17,847ec <___vfprintf_internal_r+0x15c4>
   847b4:	45800204 	addi	r22,r8,8
   847b8:	003eca06 	br	842e4 <rx_descriptor_end+0xfff84284>
   847bc:	01000274 	movhi	r4,9
   847c0:	2107fa84 	addi	r4,r4,8170
   847c4:	d9002b15 	stw	r4,172(sp)
   847c8:	d8802b17 	ldw	r2,172(sp)
   847cc:	1c07883a 	add	r3,r3,r16
   847d0:	8c400044 	addi	r17,r17,1
   847d4:	b0800015 	stw	r2,0(r22)
   847d8:	b4000115 	stw	r16,4(r22)
   847dc:	d8c02015 	stw	r3,128(sp)
   847e0:	dc401f15 	stw	r17,124(sp)
   847e4:	008001c4 	movi	r2,7
   847e8:	147ebd0e 	bge	r2,r17,842e0 <rx_descriptor_end+0xfff84280>
   847ec:	d9002c17 	ldw	r4,176(sp)
   847f0:	d9801e04 	addi	r6,sp,120
   847f4:	b80b883a 	mov	r5,r23
   847f8:	00888f00 	call	888f0 <__sprint_r>
   847fc:	103b8c1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84800:	d8c02017 	ldw	r3,128(sp)
   84804:	dc401f17 	ldw	r17,124(sp)
   84808:	dd800404 	addi	r22,sp,16
   8480c:	003eb506 	br	842e4 <rx_descriptor_end+0xfff84284>
   84810:	d9002c17 	ldw	r4,176(sp)
   84814:	d9801e04 	addi	r6,sp,120
   84818:	b80b883a 	mov	r5,r23
   8481c:	00888f00 	call	888f0 <__sprint_r>
   84820:	103b831e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84824:	d8c02017 	ldw	r3,128(sp)
   84828:	dc401f17 	ldw	r17,124(sp)
   8482c:	da000404 	addi	r8,sp,16
   84830:	003e8d06 	br	84268 <rx_descriptor_end+0xfff84208>
   84834:	d9002c17 	ldw	r4,176(sp)
   84838:	d9801e04 	addi	r6,sp,120
   8483c:	b80b883a 	mov	r5,r23
   84840:	00888f00 	call	888f0 <__sprint_r>
   84844:	103b7a1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84848:	d8c02017 	ldw	r3,128(sp)
   8484c:	dc401f17 	ldw	r17,124(sp)
   84850:	dd800404 	addi	r22,sp,16
   84854:	003e8f06 	br	84294 <rx_descriptor_end+0xfff84234>
   84858:	0027883a 	mov	r19,zero
   8485c:	003f4a06 	br	84588 <rx_descriptor_end+0xfff84528>
   84860:	d9002c17 	ldw	r4,176(sp)
   84864:	d9801e04 	addi	r6,sp,120
   84868:	b80b883a 	mov	r5,r23
   8486c:	00888f00 	call	888f0 <__sprint_r>
   84870:	103b6f1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84874:	d8c02017 	ldw	r3,128(sp)
   84878:	da000404 	addi	r8,sp,16
   8487c:	003c9d06 	br	83af4 <rx_descriptor_end+0xfff83a94>
   84880:	04e7c83a 	sub	r19,zero,r19
   84884:	9804c03a 	cmpne	r2,r19,zero
   84888:	05adc83a 	sub	r22,zero,r22
   8488c:	b0adc83a 	sub	r22,r22,r2
   84890:	d8802917 	ldw	r2,164(sp)
   84894:	07000b44 	movi	fp,45
   84898:	df002785 	stb	fp,158(sp)
   8489c:	10017b16 	blt	r2,zero,84e8c <___vfprintf_internal_r+0x1c64>
   848a0:	00bfdfc4 	movi	r2,-129
   848a4:	90a4703a 	and	r18,r18,r2
   848a8:	003bb106 	br	83770 <rx_descriptor_end+0xfff83710>
   848ac:	d9003617 	ldw	r4,216(sp)
   848b0:	d9403817 	ldw	r5,224(sp)
   848b4:	da003d15 	stw	r8,244(sp)
   848b8:	008860c0 	call	8860c <__fpclassifyd>
   848bc:	da003d17 	ldw	r8,244(sp)
   848c0:	1000f026 	beq	r2,zero,84c84 <___vfprintf_internal_r+0x1a5c>
   848c4:	d9002917 	ldw	r4,164(sp)
   848c8:	05bff7c4 	movi	r22,-33
   848cc:	00bfffc4 	movi	r2,-1
   848d0:	8dac703a 	and	r22,r17,r22
   848d4:	20820026 	beq	r4,r2,850d8 <___vfprintf_internal_r+0x1eb0>
   848d8:	008011c4 	movi	r2,71
   848dc:	b081f726 	beq	r22,r2,850bc <___vfprintf_internal_r+0x1e94>
   848e0:	d9003817 	ldw	r4,224(sp)
   848e4:	90c04014 	ori	r3,r18,256
   848e8:	d8c02b15 	stw	r3,172(sp)
   848ec:	20021516 	blt	r4,zero,85144 <___vfprintf_internal_r+0x1f1c>
   848f0:	dcc03817 	ldw	r19,224(sp)
   848f4:	d8002a05 	stb	zero,168(sp)
   848f8:	00801984 	movi	r2,102
   848fc:	8881f926 	beq	r17,r2,850e4 <___vfprintf_internal_r+0x1ebc>
   84900:	00801184 	movi	r2,70
   84904:	88821c26 	beq	r17,r2,85178 <___vfprintf_internal_r+0x1f50>
   84908:	00801144 	movi	r2,69
   8490c:	b081ef26 	beq	r22,r2,850cc <___vfprintf_internal_r+0x1ea4>
   84910:	d8c02917 	ldw	r3,164(sp)
   84914:	d8802104 	addi	r2,sp,132
   84918:	d8800315 	stw	r2,12(sp)
   8491c:	d9403617 	ldw	r5,216(sp)
   84920:	d8802504 	addi	r2,sp,148
   84924:	d9002c17 	ldw	r4,176(sp)
   84928:	d8800215 	stw	r2,8(sp)
   8492c:	d8802604 	addi	r2,sp,152
   84930:	d8c00015 	stw	r3,0(sp)
   84934:	d8800115 	stw	r2,4(sp)
   84938:	01c00084 	movi	r7,2
   8493c:	980d883a 	mov	r6,r19
   84940:	d8c03c15 	stw	r3,240(sp)
   84944:	da003d15 	stw	r8,244(sp)
   84948:	00859000 	call	85900 <_dtoa_r>
   8494c:	1021883a 	mov	r16,r2
   84950:	008019c4 	movi	r2,103
   84954:	d8c03c17 	ldw	r3,240(sp)
   84958:	da003d17 	ldw	r8,244(sp)
   8495c:	88817126 	beq	r17,r2,84f24 <___vfprintf_internal_r+0x1cfc>
   84960:	008011c4 	movi	r2,71
   84964:	88829226 	beq	r17,r2,853b0 <___vfprintf_internal_r+0x2188>
   84968:	80f9883a 	add	fp,r16,r3
   8496c:	d9003617 	ldw	r4,216(sp)
   84970:	000d883a 	mov	r6,zero
   84974:	000f883a 	mov	r7,zero
   84978:	980b883a 	mov	r5,r19
   8497c:	da003d15 	stw	r8,244(sp)
   84980:	008cd100 	call	8cd10 <__eqdf2>
   84984:	da003d17 	ldw	r8,244(sp)
   84988:	10018d26 	beq	r2,zero,84fc0 <___vfprintf_internal_r+0x1d98>
   8498c:	d8802117 	ldw	r2,132(sp)
   84990:	1700062e 	bgeu	r2,fp,849ac <___vfprintf_internal_r+0x1784>
   84994:	01000c04 	movi	r4,48
   84998:	10c00044 	addi	r3,r2,1
   8499c:	d8c02115 	stw	r3,132(sp)
   849a0:	11000005 	stb	r4,0(r2)
   849a4:	d8802117 	ldw	r2,132(sp)
   849a8:	173ffb36 	bltu	r2,fp,84998 <rx_descriptor_end+0xfff84938>
   849ac:	1405c83a 	sub	r2,r2,r16
   849b0:	d8803315 	stw	r2,204(sp)
   849b4:	008011c4 	movi	r2,71
   849b8:	b0817626 	beq	r22,r2,84f94 <___vfprintf_internal_r+0x1d6c>
   849bc:	00801944 	movi	r2,101
   849c0:	1442810e 	bge	r2,r17,853c8 <___vfprintf_internal_r+0x21a0>
   849c4:	d8c02617 	ldw	r3,152(sp)
   849c8:	00801984 	movi	r2,102
   849cc:	d8c03215 	stw	r3,200(sp)
   849d0:	8881fe26 	beq	r17,r2,851cc <___vfprintf_internal_r+0x1fa4>
   849d4:	d8c03217 	ldw	r3,200(sp)
   849d8:	d9003317 	ldw	r4,204(sp)
   849dc:	1901dd16 	blt	r3,r4,85154 <___vfprintf_internal_r+0x1f2c>
   849e0:	9480004c 	andi	r18,r18,1
   849e4:	90022b1e 	bne	r18,zero,85294 <___vfprintf_internal_r+0x206c>
   849e8:	1805883a 	mov	r2,r3
   849ec:	18028016 	blt	r3,zero,853f0 <___vfprintf_internal_r+0x21c8>
   849f0:	d8c03217 	ldw	r3,200(sp)
   849f4:	044019c4 	movi	r17,103
   849f8:	d8c02e15 	stw	r3,184(sp)
   849fc:	df002a07 	ldb	fp,168(sp)
   84a00:	e001531e 	bne	fp,zero,84f50 <___vfprintf_internal_r+0x1d28>
   84a04:	df002783 	ldbu	fp,158(sp)
   84a08:	d8802a15 	stw	r2,168(sp)
   84a0c:	dc802b17 	ldw	r18,172(sp)
   84a10:	d8002915 	stw	zero,164(sp)
   84a14:	003bd106 	br	8395c <rx_descriptor_end+0xfff838fc>
   84a18:	d8802d17 	ldw	r2,180(sp)
   84a1c:	d8c02d17 	ldw	r3,180(sp)
   84a20:	d9002d17 	ldw	r4,180(sp)
   84a24:	10800017 	ldw	r2,0(r2)
   84a28:	18c00117 	ldw	r3,4(r3)
   84a2c:	21000204 	addi	r4,r4,8
   84a30:	d8803615 	stw	r2,216(sp)
   84a34:	d8c03815 	stw	r3,224(sp)
   84a38:	d9002d15 	stw	r4,180(sp)
   84a3c:	003b7506 	br	83814 <rx_descriptor_end+0xfff837b4>
   84a40:	ac400007 	ldb	r17,0(r21)
   84a44:	003a5906 	br	833ac <rx_descriptor_end+0xfff8334c>
   84a48:	9080100c 	andi	r2,r18,64
   84a4c:	1000a826 	beq	r2,zero,84cf0 <___vfprintf_internal_r+0x1ac8>
   84a50:	d9002d17 	ldw	r4,180(sp)
   84a54:	002d883a 	mov	r22,zero
   84a58:	24c0000b 	ldhu	r19,0(r4)
   84a5c:	21000104 	addi	r4,r4,4
   84a60:	d9002d15 	stw	r4,180(sp)
   84a64:	003ccb06 	br	83d94 <rx_descriptor_end+0xfff83d34>
   84a68:	d8c02d17 	ldw	r3,180(sp)
   84a6c:	d9002917 	ldw	r4,164(sp)
   84a70:	002d883a 	mov	r22,zero
   84a74:	18800104 	addi	r2,r3,4
   84a78:	1cc00017 	ldw	r19,0(r3)
   84a7c:	203ebb0e 	bge	r4,zero,8456c <rx_descriptor_end+0xfff8450c>
   84a80:	003ef106 	br	84648 <rx_descriptor_end+0xfff845e8>
   84a84:	9080040c 	andi	r2,r18,16
   84a88:	1000921e 	bne	r2,zero,84cd4 <___vfprintf_internal_r+0x1aac>
   84a8c:	9480100c 	andi	r18,r18,64
   84a90:	90013926 	beq	r18,zero,84f78 <___vfprintf_internal_r+0x1d50>
   84a94:	d9002d17 	ldw	r4,180(sp)
   84a98:	d9402f17 	ldw	r5,188(sp)
   84a9c:	20800017 	ldw	r2,0(r4)
   84aa0:	21000104 	addi	r4,r4,4
   84aa4:	d9002d15 	stw	r4,180(sp)
   84aa8:	1140000d 	sth	r5,0(r2)
   84aac:	003a1606 	br	83308 <rx_descriptor_end+0xfff832a8>
   84ab0:	9080100c 	andi	r2,r18,64
   84ab4:	10008026 	beq	r2,zero,84cb8 <___vfprintf_internal_r+0x1a90>
   84ab8:	d8c02d17 	ldw	r3,180(sp)
   84abc:	1cc0000f 	ldh	r19,0(r3)
   84ac0:	18c00104 	addi	r3,r3,4
   84ac4:	d8c02d15 	stw	r3,180(sp)
   84ac8:	982dd7fa 	srai	r22,r19,31
   84acc:	b005883a 	mov	r2,r22
   84ad0:	003b1f06 	br	83750 <rx_descriptor_end+0xfff836f0>
   84ad4:	9080100c 	andi	r2,r18,64
   84ad8:	d8002785 	stb	zero,158(sp)
   84adc:	10008a1e 	bne	r2,zero,84d08 <___vfprintf_internal_r+0x1ae0>
   84ae0:	d9402d17 	ldw	r5,180(sp)
   84ae4:	d8c02917 	ldw	r3,164(sp)
   84ae8:	002d883a 	mov	r22,zero
   84aec:	28800104 	addi	r2,r5,4
   84af0:	2cc00017 	ldw	r19,0(r5)
   84af4:	183e4b0e 	bge	r3,zero,84424 <rx_descriptor_end+0xfff843c4>
   84af8:	9d86b03a 	or	r3,r19,r22
   84afc:	d8802d15 	stw	r2,180(sp)
   84b00:	183e4c1e 	bne	r3,zero,84434 <rx_descriptor_end+0xfff843d4>
   84b04:	0039883a 	mov	fp,zero
   84b08:	0005883a 	mov	r2,zero
   84b0c:	003d4006 	br	84010 <rx_descriptor_end+0xfff83fb0>
   84b10:	01400274 	movhi	r5,9
   84b14:	2947fa84 	addi	r5,r5,8170
   84b18:	d9402b15 	stw	r5,172(sp)
   84b1c:	d9402b17 	ldw	r5,172(sp)
   84b20:	1c47883a 	add	r3,r3,r17
   84b24:	10800044 	addi	r2,r2,1
   84b28:	41400015 	stw	r5,0(r8)
   84b2c:	44400115 	stw	r17,4(r8)
   84b30:	d8c02015 	stw	r3,128(sp)
   84b34:	d8801f15 	stw	r2,124(sp)
   84b38:	010001c4 	movi	r4,7
   84b3c:	20bec816 	blt	r4,r2,84660 <rx_descriptor_end+0xfff84600>
   84b40:	42000204 	addi	r8,r8,8
   84b44:	003ecd06 	br	8467c <rx_descriptor_end+0xfff8461c>
   84b48:	d9002917 	ldw	r4,164(sp)
   84b4c:	d8002785 	stb	zero,158(sp)
   84b50:	203d2d16 	blt	r4,zero,84008 <rx_descriptor_end+0xfff83fa8>
   84b54:	00bfdfc4 	movi	r2,-129
   84b58:	90a4703a 	and	r18,r18,r2
   84b5c:	003a9106 	br	835a4 <rx_descriptor_end+0xfff83544>
   84b60:	01000274 	movhi	r4,9
   84b64:	2107fa84 	addi	r4,r4,8170
   84b68:	d9002b15 	stw	r4,172(sp)
   84b6c:	003c0c06 	br	83ba0 <rx_descriptor_end+0xfff83b40>
   84b70:	d9002c17 	ldw	r4,176(sp)
   84b74:	d9801e04 	addi	r6,sp,120
   84b78:	b80b883a 	mov	r5,r23
   84b7c:	00888f00 	call	888f0 <__sprint_r>
   84b80:	103aab1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84b84:	d8c02017 	ldw	r3,128(sp)
   84b88:	da000404 	addi	r8,sp,16
   84b8c:	003d4106 	br	84094 <rx_descriptor_end+0xfff84034>
   84b90:	d8801f17 	ldw	r2,124(sp)
   84b94:	01400274 	movhi	r5,9
   84b98:	01000044 	movi	r4,1
   84b9c:	18c00044 	addi	r3,r3,1
   84ba0:	10800044 	addi	r2,r2,1
   84ba4:	2947fa04 	addi	r5,r5,8168
   84ba8:	41000115 	stw	r4,4(r8)
   84bac:	41400015 	stw	r5,0(r8)
   84bb0:	d8c02015 	stw	r3,128(sp)
   84bb4:	d8801f15 	stw	r2,124(sp)
   84bb8:	010001c4 	movi	r4,7
   84bbc:	20805c16 	blt	r4,r2,84d30 <___vfprintf_internal_r+0x1b08>
   84bc0:	42000204 	addi	r8,r8,8
   84bc4:	8800041e 	bne	r17,zero,84bd8 <___vfprintf_internal_r+0x19b0>
   84bc8:	d8803317 	ldw	r2,204(sp)
   84bcc:	1000021e 	bne	r2,zero,84bd8 <___vfprintf_internal_r+0x19b0>
   84bd0:	9080004c 	andi	r2,r18,1
   84bd4:	103c0926 	beq	r2,zero,83bfc <rx_descriptor_end+0xfff83b9c>
   84bd8:	d9003717 	ldw	r4,220(sp)
   84bdc:	d8801f17 	ldw	r2,124(sp)
   84be0:	d9403417 	ldw	r5,208(sp)
   84be4:	20c7883a 	add	r3,r4,r3
   84be8:	10800044 	addi	r2,r2,1
   84bec:	41000115 	stw	r4,4(r8)
   84bf0:	41400015 	stw	r5,0(r8)
   84bf4:	d8c02015 	stw	r3,128(sp)
   84bf8:	d8801f15 	stw	r2,124(sp)
   84bfc:	010001c4 	movi	r4,7
   84c00:	20812116 	blt	r4,r2,85088 <___vfprintf_internal_r+0x1e60>
   84c04:	42000204 	addi	r8,r8,8
   84c08:	0463c83a 	sub	r17,zero,r17
   84c0c:	0440730e 	bge	zero,r17,84ddc <___vfprintf_internal_r+0x1bb4>
   84c10:	05800404 	movi	r22,16
   84c14:	b440860e 	bge	r22,r17,84e30 <___vfprintf_internal_r+0x1c08>
   84c18:	01400274 	movhi	r5,9
   84c1c:	2947fa84 	addi	r5,r5,8170
   84c20:	d9402b15 	stw	r5,172(sp)
   84c24:	070001c4 	movi	fp,7
   84c28:	dcc02c17 	ldw	r19,176(sp)
   84c2c:	00000306 	br	84c3c <___vfprintf_internal_r+0x1a14>
   84c30:	42000204 	addi	r8,r8,8
   84c34:	8c7ffc04 	addi	r17,r17,-16
   84c38:	b440800e 	bge	r22,r17,84e3c <___vfprintf_internal_r+0x1c14>
   84c3c:	18c00404 	addi	r3,r3,16
   84c40:	10800044 	addi	r2,r2,1
   84c44:	45000015 	stw	r20,0(r8)
   84c48:	45800115 	stw	r22,4(r8)
   84c4c:	d8c02015 	stw	r3,128(sp)
   84c50:	d8801f15 	stw	r2,124(sp)
   84c54:	e0bff60e 	bge	fp,r2,84c30 <rx_descriptor_end+0xfff84bd0>
   84c58:	d9801e04 	addi	r6,sp,120
   84c5c:	b80b883a 	mov	r5,r23
   84c60:	9809883a 	mov	r4,r19
   84c64:	00888f00 	call	888f0 <__sprint_r>
   84c68:	103a711e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84c6c:	d8c02017 	ldw	r3,128(sp)
   84c70:	d8801f17 	ldw	r2,124(sp)
   84c74:	da000404 	addi	r8,sp,16
   84c78:	003fee06 	br	84c34 <rx_descriptor_end+0xfff84bd4>
   84c7c:	00bfffc4 	movi	r2,-1
   84c80:	003a6f06 	br	83640 <rx_descriptor_end+0xfff835e0>
   84c84:	008011c4 	movi	r2,71
   84c88:	1440b816 	blt	r2,r17,84f6c <___vfprintf_internal_r+0x1d44>
   84c8c:	04000274 	movhi	r16,9
   84c90:	8407ec04 	addi	r16,r16,8112
   84c94:	00c000c4 	movi	r3,3
   84c98:	00bfdfc4 	movi	r2,-129
   84c9c:	d8c02a15 	stw	r3,168(sp)
   84ca0:	90a4703a 	and	r18,r18,r2
   84ca4:	df002783 	ldbu	fp,158(sp)
   84ca8:	d8c02e15 	stw	r3,184(sp)
   84cac:	d8002915 	stw	zero,164(sp)
   84cb0:	d8003215 	stw	zero,200(sp)
   84cb4:	003b2906 	br	8395c <rx_descriptor_end+0xfff838fc>
   84cb8:	d9002d17 	ldw	r4,180(sp)
   84cbc:	24c00017 	ldw	r19,0(r4)
   84cc0:	21000104 	addi	r4,r4,4
   84cc4:	d9002d15 	stw	r4,180(sp)
   84cc8:	982dd7fa 	srai	r22,r19,31
   84ccc:	b005883a 	mov	r2,r22
   84cd0:	003a9f06 	br	83750 <rx_descriptor_end+0xfff836f0>
   84cd4:	d9402d17 	ldw	r5,180(sp)
   84cd8:	d8c02f17 	ldw	r3,188(sp)
   84cdc:	28800017 	ldw	r2,0(r5)
   84ce0:	29400104 	addi	r5,r5,4
   84ce4:	d9402d15 	stw	r5,180(sp)
   84ce8:	10c00015 	stw	r3,0(r2)
   84cec:	00398606 	br	83308 <rx_descriptor_end+0xfff832a8>
   84cf0:	d9402d17 	ldw	r5,180(sp)
   84cf4:	002d883a 	mov	r22,zero
   84cf8:	2cc00017 	ldw	r19,0(r5)
   84cfc:	29400104 	addi	r5,r5,4
   84d00:	d9402d15 	stw	r5,180(sp)
   84d04:	003c2306 	br	83d94 <rx_descriptor_end+0xfff83d34>
   84d08:	d8c02d17 	ldw	r3,180(sp)
   84d0c:	d9002917 	ldw	r4,164(sp)
   84d10:	002d883a 	mov	r22,zero
   84d14:	18800104 	addi	r2,r3,4
   84d18:	1cc0000b 	ldhu	r19,0(r3)
   84d1c:	203dc10e 	bge	r4,zero,84424 <rx_descriptor_end+0xfff843c4>
   84d20:	003f7506 	br	84af8 <rx_descriptor_end+0xfff84a98>
   84d24:	04000274 	movhi	r16,9
   84d28:	8407ea04 	addi	r16,r16,8104
   84d2c:	003acc06 	br	83860 <rx_descriptor_end+0xfff83800>
   84d30:	d9002c17 	ldw	r4,176(sp)
   84d34:	d9801e04 	addi	r6,sp,120
   84d38:	b80b883a 	mov	r5,r23
   84d3c:	00888f00 	call	888f0 <__sprint_r>
   84d40:	103a3b1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84d44:	dc402617 	ldw	r17,152(sp)
   84d48:	d8c02017 	ldw	r3,128(sp)
   84d4c:	da000404 	addi	r8,sp,16
   84d50:	003f9c06 	br	84bc4 <rx_descriptor_end+0xfff84b64>
   84d54:	ac400043 	ldbu	r17,1(r21)
   84d58:	94800814 	ori	r18,r18,32
   84d5c:	ad400044 	addi	r21,r21,1
   84d60:	8c403fcc 	andi	r17,r17,255
   84d64:	8c40201c 	xori	r17,r17,128
   84d68:	8c7fe004 	addi	r17,r17,-128
   84d6c:	00398f06 	br	833ac <rx_descriptor_end+0xfff8334c>
   84d70:	d8c02d15 	stw	r3,180(sp)
   84d74:	0039883a 	mov	fp,zero
   84d78:	003e3506 	br	84650 <rx_descriptor_end+0xfff845f0>
   84d7c:	d9002c17 	ldw	r4,176(sp)
   84d80:	d9801e04 	addi	r6,sp,120
   84d84:	b80b883a 	mov	r5,r23
   84d88:	00888f00 	call	888f0 <__sprint_r>
   84d8c:	103a281e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84d90:	d8c02017 	ldw	r3,128(sp)
   84d94:	da000404 	addi	r8,sp,16
   84d98:	003cd006 	br	840dc <rx_descriptor_end+0xfff8407c>
   84d9c:	8009883a 	mov	r4,r16
   84da0:	da003d15 	stw	r8,244(sp)
   84da4:	008875c0 	call	8875c <strlen>
   84da8:	d8802e15 	stw	r2,184(sp)
   84dac:	da003d17 	ldw	r8,244(sp)
   84db0:	103c340e 	bge	r2,zero,83e84 <rx_descriptor_end+0xfff83e24>
   84db4:	0005883a 	mov	r2,zero
   84db8:	003c3206 	br	83e84 <rx_descriptor_end+0xfff83e24>
   84dbc:	d9002c17 	ldw	r4,176(sp)
   84dc0:	d9801e04 	addi	r6,sp,120
   84dc4:	b80b883a 	mov	r5,r23
   84dc8:	00888f00 	call	888f0 <__sprint_r>
   84dcc:	103a181e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84dd0:	d8c02017 	ldw	r3,128(sp)
   84dd4:	d8801f17 	ldw	r2,124(sp)
   84dd8:	da000404 	addi	r8,sp,16
   84ddc:	d9403317 	ldw	r5,204(sp)
   84de0:	10800044 	addi	r2,r2,1
   84de4:	44000015 	stw	r16,0(r8)
   84de8:	28c7883a 	add	r3,r5,r3
   84dec:	003b7d06 	br	83be4 <rx_descriptor_end+0xfff83b84>
   84df0:	01000274 	movhi	r4,9
   84df4:	2107fe84 	addi	r4,r4,8186
   84df8:	d9003515 	stw	r4,212(sp)
   84dfc:	003b1406 	br	83a50 <rx_descriptor_end+0xfff839f0>
   84e00:	013fffc4 	movi	r4,-1
   84e04:	003a3506 	br	836dc <rx_descriptor_end+0xfff8367c>
   84e08:	0023883a 	mov	r17,zero
   84e0c:	003d9d06 	br	84484 <rx_descriptor_end+0xfff84424>
   84e10:	d9002c17 	ldw	r4,176(sp)
   84e14:	d9801e04 	addi	r6,sp,120
   84e18:	b80b883a 	mov	r5,r23
   84e1c:	00888f00 	call	888f0 <__sprint_r>
   84e20:	103a031e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84e24:	d8c02017 	ldw	r3,128(sp)
   84e28:	da000404 	addi	r8,sp,16
   84e2c:	003d9406 	br	84480 <rx_descriptor_end+0xfff84420>
   84e30:	01000274 	movhi	r4,9
   84e34:	2107fa84 	addi	r4,r4,8170
   84e38:	d9002b15 	stw	r4,172(sp)
   84e3c:	d9002b17 	ldw	r4,172(sp)
   84e40:	1c47883a 	add	r3,r3,r17
   84e44:	10800044 	addi	r2,r2,1
   84e48:	41000015 	stw	r4,0(r8)
   84e4c:	44400115 	stw	r17,4(r8)
   84e50:	d8c02015 	stw	r3,128(sp)
   84e54:	d8801f15 	stw	r2,124(sp)
   84e58:	010001c4 	movi	r4,7
   84e5c:	20bfd716 	blt	r4,r2,84dbc <rx_descriptor_end+0xfff84d5c>
   84e60:	42000204 	addi	r8,r8,8
   84e64:	003fdd06 	br	84ddc <rx_descriptor_end+0xfff84d7c>
   84e68:	d9002c17 	ldw	r4,176(sp)
   84e6c:	d9801e04 	addi	r6,sp,120
   84e70:	b80b883a 	mov	r5,r23
   84e74:	00888f00 	call	888f0 <__sprint_r>
   84e78:	1039ed1e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84e7c:	d8802617 	ldw	r2,152(sp)
   84e80:	d8c02017 	ldw	r3,128(sp)
   84e84:	da000404 	addi	r8,sp,16
   84e88:	003e1006 	br	846cc <rx_descriptor_end+0xfff8466c>
   84e8c:	00800044 	movi	r2,1
   84e90:	10803fcc 	andi	r2,r2,255
   84e94:	00c00044 	movi	r3,1
   84e98:	10fa3526 	beq	r2,r3,83770 <rx_descriptor_end+0xfff83710>
   84e9c:	00c00084 	movi	r3,2
   84ea0:	10fbcb26 	beq	r2,r3,83dd0 <rx_descriptor_end+0xfff83d70>
   84ea4:	003a8f06 	br	838e4 <rx_descriptor_end+0xfff83884>
   84ea8:	01000274 	movhi	r4,9
   84eac:	2107fe84 	addi	r4,r4,8186
   84eb0:	d9003515 	stw	r4,212(sp)
   84eb4:	003b7606 	br	83c90 <rx_descriptor_end+0xfff83c30>
   84eb8:	d8802917 	ldw	r2,164(sp)
   84ebc:	00c00184 	movi	r3,6
   84ec0:	1880012e 	bgeu	r3,r2,84ec8 <___vfprintf_internal_r+0x1ca0>
   84ec4:	1805883a 	mov	r2,r3
   84ec8:	d8802e15 	stw	r2,184(sp)
   84ecc:	1000ef16 	blt	r2,zero,8528c <___vfprintf_internal_r+0x2064>
   84ed0:	04000274 	movhi	r16,9
   84ed4:	d8802a15 	stw	r2,168(sp)
   84ed8:	dcc02d15 	stw	r19,180(sp)
   84edc:	d8002915 	stw	zero,164(sp)
   84ee0:	d8003215 	stw	zero,200(sp)
   84ee4:	8407f804 	addi	r16,r16,8160
   84ee8:	0039883a 	mov	fp,zero
   84eec:	003aa206 	br	83978 <rx_descriptor_end+0xfff83918>
   84ef0:	0021883a 	mov	r16,zero
   84ef4:	003e0706 	br	84714 <rx_descriptor_end+0xfff846b4>
   84ef8:	d9002c17 	ldw	r4,176(sp)
   84efc:	d9801e04 	addi	r6,sp,120
   84f00:	b80b883a 	mov	r5,r23
   84f04:	00888f00 	call	888f0 <__sprint_r>
   84f08:	1039c91e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   84f0c:	d8802617 	ldw	r2,152(sp)
   84f10:	d9403317 	ldw	r5,204(sp)
   84f14:	d8c02017 	ldw	r3,128(sp)
   84f18:	da000404 	addi	r8,sp,16
   84f1c:	2885c83a 	sub	r2,r5,r2
   84f20:	003dfb06 	br	84710 <rx_descriptor_end+0xfff846b0>
   84f24:	9080004c 	andi	r2,r18,1
   84f28:	103e8f1e 	bne	r2,zero,84968 <rx_descriptor_end+0xfff84908>
   84f2c:	d8802117 	ldw	r2,132(sp)
   84f30:	003e9e06 	br	849ac <rx_descriptor_end+0xfff8494c>
   84f34:	1025883a 	mov	r18,r2
   84f38:	0039883a 	mov	fp,zero
   84f3c:	00800084 	movi	r2,2
   84f40:	003fd306 	br	84e90 <rx_descriptor_end+0xfff84e30>
   84f44:	07000b44 	movi	fp,45
   84f48:	df002785 	stb	fp,158(sp)
   84f4c:	003a4006 	br	83850 <rx_descriptor_end+0xfff837f0>
   84f50:	00c00b44 	movi	r3,45
   84f54:	d8c02785 	stb	r3,158(sp)
   84f58:	d8802a15 	stw	r2,168(sp)
   84f5c:	dc802b17 	ldw	r18,172(sp)
   84f60:	d8002915 	stw	zero,164(sp)
   84f64:	07000b44 	movi	fp,45
   84f68:	003a8006 	br	8396c <rx_descriptor_end+0xfff8390c>
   84f6c:	04000274 	movhi	r16,9
   84f70:	8407ed04 	addi	r16,r16,8116
   84f74:	003f4706 	br	84c94 <rx_descriptor_end+0xfff84c34>
   84f78:	d8c02d17 	ldw	r3,180(sp)
   84f7c:	d9002f17 	ldw	r4,188(sp)
   84f80:	18800017 	ldw	r2,0(r3)
   84f84:	18c00104 	addi	r3,r3,4
   84f88:	d8c02d15 	stw	r3,180(sp)
   84f8c:	11000015 	stw	r4,0(r2)
   84f90:	0038dd06 	br	83308 <rx_descriptor_end+0xfff832a8>
   84f94:	dd802617 	ldw	r22,152(sp)
   84f98:	00bfff44 	movi	r2,-3
   84f9c:	b0801c16 	blt	r22,r2,85010 <___vfprintf_internal_r+0x1de8>
   84fa0:	d9402917 	ldw	r5,164(sp)
   84fa4:	2d801a16 	blt	r5,r22,85010 <___vfprintf_internal_r+0x1de8>
   84fa8:	dd803215 	stw	r22,200(sp)
   84fac:	003e8906 	br	849d4 <rx_descriptor_end+0xfff84974>
   84fb0:	01000274 	movhi	r4,9
   84fb4:	2107fa84 	addi	r4,r4,8170
   84fb8:	d9002b15 	stw	r4,172(sp)
   84fbc:	003c9106 	br	84204 <rx_descriptor_end+0xfff841a4>
   84fc0:	e005883a 	mov	r2,fp
   84fc4:	003e7906 	br	849ac <rx_descriptor_end+0xfff8494c>
   84fc8:	d9402917 	ldw	r5,164(sp)
   84fcc:	df002783 	ldbu	fp,158(sp)
   84fd0:	dcc02d15 	stw	r19,180(sp)
   84fd4:	d9402a15 	stw	r5,168(sp)
   84fd8:	d9402e15 	stw	r5,184(sp)
   84fdc:	d8002915 	stw	zero,164(sp)
   84fe0:	d8003215 	stw	zero,200(sp)
   84fe4:	003a5d06 	br	8395c <rx_descriptor_end+0xfff838fc>
   84fe8:	9080004c 	andi	r2,r18,1
   84fec:	0039883a 	mov	fp,zero
   84ff0:	10000426 	beq	r2,zero,85004 <___vfprintf_internal_r+0x1ddc>
   84ff4:	00800c04 	movi	r2,48
   84ff8:	dc001dc4 	addi	r16,sp,119
   84ffc:	d8801dc5 	stb	r2,119(sp)
   85000:	003b8006 	br	83e04 <rx_descriptor_end+0xfff83da4>
   85004:	d8002e15 	stw	zero,184(sp)
   85008:	dc001e04 	addi	r16,sp,120
   8500c:	003a4d06 	br	83944 <rx_descriptor_end+0xfff838e4>
   85010:	8c7fff84 	addi	r17,r17,-2
   85014:	b5bfffc4 	addi	r22,r22,-1
   85018:	dd802615 	stw	r22,152(sp)
   8501c:	dc4022c5 	stb	r17,139(sp)
   85020:	b000bf16 	blt	r22,zero,85320 <___vfprintf_internal_r+0x20f8>
   85024:	00800ac4 	movi	r2,43
   85028:	d8802305 	stb	r2,140(sp)
   8502c:	00800244 	movi	r2,9
   85030:	15807016 	blt	r2,r22,851f4 <___vfprintf_internal_r+0x1fcc>
   85034:	00800c04 	movi	r2,48
   85038:	b5800c04 	addi	r22,r22,48
   8503c:	d8802345 	stb	r2,141(sp)
   85040:	dd802385 	stb	r22,142(sp)
   85044:	d88023c4 	addi	r2,sp,143
   85048:	df0022c4 	addi	fp,sp,139
   8504c:	d8c03317 	ldw	r3,204(sp)
   85050:	1739c83a 	sub	fp,r2,fp
   85054:	d9003317 	ldw	r4,204(sp)
   85058:	e0c7883a 	add	r3,fp,r3
   8505c:	df003a15 	stw	fp,232(sp)
   85060:	d8c02e15 	stw	r3,184(sp)
   85064:	00800044 	movi	r2,1
   85068:	1100b30e 	bge	r2,r4,85338 <___vfprintf_internal_r+0x2110>
   8506c:	d8c02e17 	ldw	r3,184(sp)
   85070:	18c00044 	addi	r3,r3,1
   85074:	d8c02e15 	stw	r3,184(sp)
   85078:	1805883a 	mov	r2,r3
   8507c:	1800ac16 	blt	r3,zero,85330 <___vfprintf_internal_r+0x2108>
   85080:	d8003215 	stw	zero,200(sp)
   85084:	003e5d06 	br	849fc <rx_descriptor_end+0xfff8499c>
   85088:	d9002c17 	ldw	r4,176(sp)
   8508c:	d9801e04 	addi	r6,sp,120
   85090:	b80b883a 	mov	r5,r23
   85094:	00888f00 	call	888f0 <__sprint_r>
   85098:	1039651e 	bne	r2,zero,83630 <rx_descriptor_end+0xfff835d0>
   8509c:	dc402617 	ldw	r17,152(sp)
   850a0:	d8c02017 	ldw	r3,128(sp)
   850a4:	d8801f17 	ldw	r2,124(sp)
   850a8:	da000404 	addi	r8,sp,16
   850ac:	003ed606 	br	84c08 <rx_descriptor_end+0xfff84ba8>
   850b0:	582b883a 	mov	r21,r11
   850b4:	d8002915 	stw	zero,164(sp)
   850b8:	0038bd06 	br	833b0 <rx_descriptor_end+0xfff83350>
   850bc:	d8802917 	ldw	r2,164(sp)
   850c0:	103e071e 	bne	r2,zero,848e0 <rx_descriptor_end+0xfff84880>
   850c4:	dc002915 	stw	r16,164(sp)
   850c8:	003e0506 	br	848e0 <rx_descriptor_end+0xfff84880>
   850cc:	d9002917 	ldw	r4,164(sp)
   850d0:	20c00044 	addi	r3,r4,1
   850d4:	003e0f06 	br	84914 <rx_descriptor_end+0xfff848b4>
   850d8:	01400184 	movi	r5,6
   850dc:	d9402915 	stw	r5,164(sp)
   850e0:	003dff06 	br	848e0 <rx_descriptor_end+0xfff84880>
   850e4:	d8802104 	addi	r2,sp,132
   850e8:	d8800315 	stw	r2,12(sp)
   850ec:	d8802504 	addi	r2,sp,148
   850f0:	d8800215 	stw	r2,8(sp)
   850f4:	d8802604 	addi	r2,sp,152
   850f8:	d8800115 	stw	r2,4(sp)
   850fc:	d8802917 	ldw	r2,164(sp)
   85100:	d9403617 	ldw	r5,216(sp)
   85104:	d9002c17 	ldw	r4,176(sp)
   85108:	d8800015 	stw	r2,0(sp)
   8510c:	01c000c4 	movi	r7,3
   85110:	980d883a 	mov	r6,r19
   85114:	da003d15 	stw	r8,244(sp)
   85118:	00859000 	call	85900 <_dtoa_r>
   8511c:	d8c02917 	ldw	r3,164(sp)
   85120:	da003d17 	ldw	r8,244(sp)
   85124:	1021883a 	mov	r16,r2
   85128:	10f9883a 	add	fp,r2,r3
   8512c:	81000007 	ldb	r4,0(r16)
   85130:	00800c04 	movi	r2,48
   85134:	20805e26 	beq	r4,r2,852b0 <___vfprintf_internal_r+0x2088>
   85138:	d8c02617 	ldw	r3,152(sp)
   8513c:	e0f9883a 	add	fp,fp,r3
   85140:	003e0a06 	br	8496c <rx_descriptor_end+0xfff8490c>
   85144:	00c00b44 	movi	r3,45
   85148:	24e0003c 	xorhi	r19,r4,32768
   8514c:	d8c02a05 	stb	r3,168(sp)
   85150:	003de906 	br	848f8 <rx_descriptor_end+0xfff84898>
   85154:	d8c03217 	ldw	r3,200(sp)
   85158:	00c07a0e 	bge	zero,r3,85344 <___vfprintf_internal_r+0x211c>
   8515c:	00800044 	movi	r2,1
   85160:	d9003317 	ldw	r4,204(sp)
   85164:	1105883a 	add	r2,r2,r4
   85168:	d8802e15 	stw	r2,184(sp)
   8516c:	10004e16 	blt	r2,zero,852a8 <___vfprintf_internal_r+0x2080>
   85170:	044019c4 	movi	r17,103
   85174:	003e2106 	br	849fc <rx_descriptor_end+0xfff8499c>
   85178:	d9002917 	ldw	r4,164(sp)
   8517c:	d8802104 	addi	r2,sp,132
   85180:	d8800315 	stw	r2,12(sp)
   85184:	d9000015 	stw	r4,0(sp)
   85188:	d8802504 	addi	r2,sp,148
   8518c:	d9403617 	ldw	r5,216(sp)
   85190:	d9002c17 	ldw	r4,176(sp)
   85194:	d8800215 	stw	r2,8(sp)
   85198:	d8802604 	addi	r2,sp,152
   8519c:	d8800115 	stw	r2,4(sp)
   851a0:	01c000c4 	movi	r7,3
   851a4:	980d883a 	mov	r6,r19
   851a8:	da003d15 	stw	r8,244(sp)
   851ac:	00859000 	call	85900 <_dtoa_r>
   851b0:	d8c02917 	ldw	r3,164(sp)
   851b4:	da003d17 	ldw	r8,244(sp)
   851b8:	1021883a 	mov	r16,r2
   851bc:	00801184 	movi	r2,70
   851c0:	80f9883a 	add	fp,r16,r3
   851c4:	88bfd926 	beq	r17,r2,8512c <rx_descriptor_end+0xfff850cc>
   851c8:	003de806 	br	8496c <rx_descriptor_end+0xfff8490c>
   851cc:	d9002917 	ldw	r4,164(sp)
   851d0:	00c04d0e 	bge	zero,r3,85308 <___vfprintf_internal_r+0x20e0>
   851d4:	2000441e 	bne	r4,zero,852e8 <___vfprintf_internal_r+0x20c0>
   851d8:	9480004c 	andi	r18,r18,1
   851dc:	9000421e 	bne	r18,zero,852e8 <___vfprintf_internal_r+0x20c0>
   851e0:	1805883a 	mov	r2,r3
   851e4:	18007016 	blt	r3,zero,853a8 <___vfprintf_internal_r+0x2180>
   851e8:	d8c03217 	ldw	r3,200(sp)
   851ec:	d8c02e15 	stw	r3,184(sp)
   851f0:	003e0206 	br	849fc <rx_descriptor_end+0xfff8499c>
   851f4:	df0022c4 	addi	fp,sp,139
   851f8:	dc002915 	stw	r16,164(sp)
   851fc:	4027883a 	mov	r19,r8
   85200:	e021883a 	mov	r16,fp
   85204:	b009883a 	mov	r4,r22
   85208:	01400284 	movi	r5,10
   8520c:	008ba4c0 	call	8ba4c <__modsi3>
   85210:	10800c04 	addi	r2,r2,48
   85214:	843fffc4 	addi	r16,r16,-1
   85218:	b009883a 	mov	r4,r22
   8521c:	01400284 	movi	r5,10
   85220:	80800005 	stb	r2,0(r16)
   85224:	008b9c80 	call	8b9c8 <__divsi3>
   85228:	102d883a 	mov	r22,r2
   8522c:	00800244 	movi	r2,9
   85230:	15bff416 	blt	r2,r22,85204 <rx_descriptor_end+0xfff851a4>
   85234:	9811883a 	mov	r8,r19
   85238:	b0800c04 	addi	r2,r22,48
   8523c:	8027883a 	mov	r19,r16
   85240:	997fffc4 	addi	r5,r19,-1
   85244:	98bfffc5 	stb	r2,-1(r19)
   85248:	dc002917 	ldw	r16,164(sp)
   8524c:	2f006a2e 	bgeu	r5,fp,853f8 <___vfprintf_internal_r+0x21d0>
   85250:	d9c02384 	addi	r7,sp,142
   85254:	3ccfc83a 	sub	r7,r7,r19
   85258:	d9002344 	addi	r4,sp,141
   8525c:	e1cf883a 	add	r7,fp,r7
   85260:	00000106 	br	85268 <___vfprintf_internal_r+0x2040>
   85264:	28800003 	ldbu	r2,0(r5)
   85268:	20800005 	stb	r2,0(r4)
   8526c:	21000044 	addi	r4,r4,1
   85270:	29400044 	addi	r5,r5,1
   85274:	393ffb1e 	bne	r7,r4,85264 <rx_descriptor_end+0xfff85204>
   85278:	d8802304 	addi	r2,sp,140
   8527c:	14c5c83a 	sub	r2,r2,r19
   85280:	d8c02344 	addi	r3,sp,141
   85284:	1885883a 	add	r2,r3,r2
   85288:	003f7006 	br	8504c <rx_descriptor_end+0xfff84fec>
   8528c:	0005883a 	mov	r2,zero
   85290:	003f0f06 	br	84ed0 <rx_descriptor_end+0xfff84e70>
   85294:	d8c03217 	ldw	r3,200(sp)
   85298:	18c00044 	addi	r3,r3,1
   8529c:	d8c02e15 	stw	r3,184(sp)
   852a0:	1805883a 	mov	r2,r3
   852a4:	183fb20e 	bge	r3,zero,85170 <rx_descriptor_end+0xfff85110>
   852a8:	0005883a 	mov	r2,zero
   852ac:	003fb006 	br	85170 <rx_descriptor_end+0xfff85110>
   852b0:	d9003617 	ldw	r4,216(sp)
   852b4:	000d883a 	mov	r6,zero
   852b8:	000f883a 	mov	r7,zero
   852bc:	980b883a 	mov	r5,r19
   852c0:	d8c03c15 	stw	r3,240(sp)
   852c4:	da003d15 	stw	r8,244(sp)
   852c8:	008cd100 	call	8cd10 <__eqdf2>
   852cc:	d8c03c17 	ldw	r3,240(sp)
   852d0:	da003d17 	ldw	r8,244(sp)
   852d4:	103f9826 	beq	r2,zero,85138 <rx_descriptor_end+0xfff850d8>
   852d8:	00800044 	movi	r2,1
   852dc:	10c7c83a 	sub	r3,r2,r3
   852e0:	d8c02615 	stw	r3,152(sp)
   852e4:	003f9506 	br	8513c <rx_descriptor_end+0xfff850dc>
   852e8:	d9002917 	ldw	r4,164(sp)
   852ec:	d8c03217 	ldw	r3,200(sp)
   852f0:	20800044 	addi	r2,r4,1
   852f4:	1885883a 	add	r2,r3,r2
   852f8:	d8802e15 	stw	r2,184(sp)
   852fc:	103dbf0e 	bge	r2,zero,849fc <rx_descriptor_end+0xfff8499c>
   85300:	0005883a 	mov	r2,zero
   85304:	003dbd06 	br	849fc <rx_descriptor_end+0xfff8499c>
   85308:	2000211e 	bne	r4,zero,85390 <___vfprintf_internal_r+0x2168>
   8530c:	9480004c 	andi	r18,r18,1
   85310:	90001f1e 	bne	r18,zero,85390 <___vfprintf_internal_r+0x2168>
   85314:	00800044 	movi	r2,1
   85318:	d8802e15 	stw	r2,184(sp)
   8531c:	003db706 	br	849fc <rx_descriptor_end+0xfff8499c>
   85320:	00800b44 	movi	r2,45
   85324:	05adc83a 	sub	r22,zero,r22
   85328:	d8802305 	stb	r2,140(sp)
   8532c:	003f3f06 	br	8502c <rx_descriptor_end+0xfff84fcc>
   85330:	0005883a 	mov	r2,zero
   85334:	003f5206 	br	85080 <rx_descriptor_end+0xfff85020>
   85338:	90a4703a 	and	r18,r18,r2
   8533c:	903f4e26 	beq	r18,zero,85078 <rx_descriptor_end+0xfff85018>
   85340:	003f4a06 	br	8506c <rx_descriptor_end+0xfff8500c>
   85344:	00800084 	movi	r2,2
   85348:	10c5c83a 	sub	r2,r2,r3
   8534c:	003f8406 	br	85160 <rx_descriptor_end+0xfff85100>
   85350:	d8802d17 	ldw	r2,180(sp)
   85354:	d9002d17 	ldw	r4,180(sp)
   85358:	ac400043 	ldbu	r17,1(r21)
   8535c:	10800017 	ldw	r2,0(r2)
   85360:	582b883a 	mov	r21,r11
   85364:	d8802915 	stw	r2,164(sp)
   85368:	20800104 	addi	r2,r4,4
   8536c:	d9002917 	ldw	r4,164(sp)
   85370:	d8802d15 	stw	r2,180(sp)
   85374:	203e7a0e 	bge	r4,zero,84d60 <rx_descriptor_end+0xfff84d00>
   85378:	8c403fcc 	andi	r17,r17,255
   8537c:	00bfffc4 	movi	r2,-1
   85380:	8c40201c 	xori	r17,r17,128
   85384:	d8802915 	stw	r2,164(sp)
   85388:	8c7fe004 	addi	r17,r17,-128
   8538c:	00380706 	br	833ac <rx_descriptor_end+0xfff8334c>
   85390:	d8c02917 	ldw	r3,164(sp)
   85394:	18c00084 	addi	r3,r3,2
   85398:	d8c02e15 	stw	r3,184(sp)
   8539c:	1805883a 	mov	r2,r3
   853a0:	183d960e 	bge	r3,zero,849fc <rx_descriptor_end+0xfff8499c>
   853a4:	003fd606 	br	85300 <rx_descriptor_end+0xfff852a0>
   853a8:	0005883a 	mov	r2,zero
   853ac:	003f8e06 	br	851e8 <rx_descriptor_end+0xfff85188>
   853b0:	9080004c 	andi	r2,r18,1
   853b4:	103f811e 	bne	r2,zero,851bc <rx_descriptor_end+0xfff8515c>
   853b8:	d8802117 	ldw	r2,132(sp)
   853bc:	1405c83a 	sub	r2,r2,r16
   853c0:	d8803315 	stw	r2,204(sp)
   853c4:	b47ef326 	beq	r22,r17,84f94 <rx_descriptor_end+0xfff84f34>
   853c8:	dd802617 	ldw	r22,152(sp)
   853cc:	003f1106 	br	85014 <rx_descriptor_end+0xfff84fb4>
   853d0:	d9c02785 	stb	r7,158(sp)
   853d4:	00390406 	br	837e8 <rx_descriptor_end+0xfff83788>
   853d8:	d9c02785 	stb	r7,158(sp)
   853dc:	0038d306 	br	8372c <rx_descriptor_end+0xfff836cc>
   853e0:	d9c02785 	stb	r7,158(sp)
   853e4:	003a6106 	br	83d6c <rx_descriptor_end+0xfff83d0c>
   853e8:	d9c02785 	stb	r7,158(sp)
   853ec:	003af806 	br	83fd0 <rx_descriptor_end+0xfff83f70>
   853f0:	0005883a 	mov	r2,zero
   853f4:	003d7e06 	br	849f0 <rx_descriptor_end+0xfff84990>
   853f8:	d8802344 	addi	r2,sp,141
   853fc:	003f1306 	br	8504c <rx_descriptor_end+0xfff84fec>
   85400:	d9c02785 	stb	r7,158(sp)
   85404:	00392306 	br	83894 <rx_descriptor_end+0xfff83834>
   85408:	d9c02785 	stb	r7,158(sp)
   8540c:	003aa906 	br	83eb4 <rx_descriptor_end+0xfff83e54>
   85410:	d9c02785 	stb	r7,158(sp)
   85414:	003a3d06 	br	83d0c <rx_descriptor_end+0xfff83cac>
   85418:	d9c02785 	stb	r7,158(sp)
   8541c:	003aca06 	br	83f48 <rx_descriptor_end+0xfff83ee8>

00085420 <__vfprintf_internal>:
   85420:	00800274 	movhi	r2,9
   85424:	10907304 	addi	r2,r2,16844
   85428:	300f883a 	mov	r7,r6
   8542c:	280d883a 	mov	r6,r5
   85430:	200b883a 	mov	r5,r4
   85434:	11000017 	ldw	r4,0(r2)
   85438:	00832281 	jmpi	83228 <___vfprintf_internal_r>

0008543c <__sbprintf>:
   8543c:	2880030b 	ldhu	r2,12(r5)
   85440:	2ac01917 	ldw	r11,100(r5)
   85444:	2a80038b 	ldhu	r10,14(r5)
   85448:	2a400717 	ldw	r9,28(r5)
   8544c:	2a000917 	ldw	r8,36(r5)
   85450:	defee204 	addi	sp,sp,-1144
   85454:	00c10004 	movi	r3,1024
   85458:	dc011a15 	stw	r16,1128(sp)
   8545c:	10bfff4c 	andi	r2,r2,65533
   85460:	2821883a 	mov	r16,r5
   85464:	d8cb883a 	add	r5,sp,r3
   85468:	dc811c15 	stw	r18,1136(sp)
   8546c:	dc411b15 	stw	r17,1132(sp)
   85470:	dfc11d15 	stw	ra,1140(sp)
   85474:	2025883a 	mov	r18,r4
   85478:	d881030d 	sth	r2,1036(sp)
   8547c:	dac11915 	stw	r11,1124(sp)
   85480:	da81038d 	sth	r10,1038(sp)
   85484:	da410715 	stw	r9,1052(sp)
   85488:	da010915 	stw	r8,1060(sp)
   8548c:	dec10015 	stw	sp,1024(sp)
   85490:	dec10415 	stw	sp,1040(sp)
   85494:	d8c10215 	stw	r3,1032(sp)
   85498:	d8c10515 	stw	r3,1044(sp)
   8549c:	d8010615 	stw	zero,1048(sp)
   854a0:	00832280 	call	83228 <___vfprintf_internal_r>
   854a4:	1023883a 	mov	r17,r2
   854a8:	10000416 	blt	r2,zero,854bc <__sbprintf+0x80>
   854ac:	d9410004 	addi	r5,sp,1024
   854b0:	9009883a 	mov	r4,r18
   854b4:	0081b8c0 	call	81b8c <_fflush_r>
   854b8:	10000d1e 	bne	r2,zero,854f0 <__sbprintf+0xb4>
   854bc:	d881030b 	ldhu	r2,1036(sp)
   854c0:	1080100c 	andi	r2,r2,64
   854c4:	10000326 	beq	r2,zero,854d4 <__sbprintf+0x98>
   854c8:	8080030b 	ldhu	r2,12(r16)
   854cc:	10801014 	ori	r2,r2,64
   854d0:	8080030d 	sth	r2,12(r16)
   854d4:	8805883a 	mov	r2,r17
   854d8:	dfc11d17 	ldw	ra,1140(sp)
   854dc:	dc811c17 	ldw	r18,1136(sp)
   854e0:	dc411b17 	ldw	r17,1132(sp)
   854e4:	dc011a17 	ldw	r16,1128(sp)
   854e8:	dec11e04 	addi	sp,sp,1144
   854ec:	f800283a 	ret
   854f0:	047fffc4 	movi	r17,-1
   854f4:	003ff106 	br	854bc <rx_descriptor_end+0xfff8545c>

000854f8 <_write_r>:
   854f8:	defffd04 	addi	sp,sp,-12
   854fc:	2805883a 	mov	r2,r5
   85500:	dc000015 	stw	r16,0(sp)
   85504:	04000274 	movhi	r16,9
   85508:	dc400115 	stw	r17,4(sp)
   8550c:	300b883a 	mov	r5,r6
   85510:	84186b04 	addi	r16,r16,25004
   85514:	2023883a 	mov	r17,r4
   85518:	380d883a 	mov	r6,r7
   8551c:	1009883a 	mov	r4,r2
   85520:	dfc00215 	stw	ra,8(sp)
   85524:	80000015 	stw	zero,0(r16)
   85528:	008ece00 	call	8ece0 <write>
   8552c:	00ffffc4 	movi	r3,-1
   85530:	10c00526 	beq	r2,r3,85548 <_write_r+0x50>
   85534:	dfc00217 	ldw	ra,8(sp)
   85538:	dc400117 	ldw	r17,4(sp)
   8553c:	dc000017 	ldw	r16,0(sp)
   85540:	dec00304 	addi	sp,sp,12
   85544:	f800283a 	ret
   85548:	80c00017 	ldw	r3,0(r16)
   8554c:	183ff926 	beq	r3,zero,85534 <rx_descriptor_end+0xfff854d4>
   85550:	88c00015 	stw	r3,0(r17)
   85554:	003ff706 	br	85534 <rx_descriptor_end+0xfff854d4>

00085558 <__swsetup_r>:
   85558:	00800274 	movhi	r2,9
   8555c:	defffd04 	addi	sp,sp,-12
   85560:	10907304 	addi	r2,r2,16844
   85564:	dc400115 	stw	r17,4(sp)
   85568:	2023883a 	mov	r17,r4
   8556c:	11000017 	ldw	r4,0(r2)
   85570:	dc000015 	stw	r16,0(sp)
   85574:	dfc00215 	stw	ra,8(sp)
   85578:	2821883a 	mov	r16,r5
   8557c:	20000226 	beq	r4,zero,85588 <__swsetup_r+0x30>
   85580:	20800e17 	ldw	r2,56(r4)
   85584:	10003126 	beq	r2,zero,8564c <__swsetup_r+0xf4>
   85588:	8080030b 	ldhu	r2,12(r16)
   8558c:	10c0020c 	andi	r3,r2,8
   85590:	1009883a 	mov	r4,r2
   85594:	18000f26 	beq	r3,zero,855d4 <__swsetup_r+0x7c>
   85598:	80c00417 	ldw	r3,16(r16)
   8559c:	18001526 	beq	r3,zero,855f4 <__swsetup_r+0x9c>
   855a0:	1100004c 	andi	r4,r2,1
   855a4:	20001c1e 	bne	r4,zero,85618 <__swsetup_r+0xc0>
   855a8:	1080008c 	andi	r2,r2,2
   855ac:	1000291e 	bne	r2,zero,85654 <__swsetup_r+0xfc>
   855b0:	80800517 	ldw	r2,20(r16)
   855b4:	80800215 	stw	r2,8(r16)
   855b8:	18001c26 	beq	r3,zero,8562c <__swsetup_r+0xd4>
   855bc:	0005883a 	mov	r2,zero
   855c0:	dfc00217 	ldw	ra,8(sp)
   855c4:	dc400117 	ldw	r17,4(sp)
   855c8:	dc000017 	ldw	r16,0(sp)
   855cc:	dec00304 	addi	sp,sp,12
   855d0:	f800283a 	ret
   855d4:	2080040c 	andi	r2,r4,16
   855d8:	10002e26 	beq	r2,zero,85694 <__swsetup_r+0x13c>
   855dc:	2080010c 	andi	r2,r4,4
   855e0:	10001e1e 	bne	r2,zero,8565c <__swsetup_r+0x104>
   855e4:	80c00417 	ldw	r3,16(r16)
   855e8:	20800214 	ori	r2,r4,8
   855ec:	8080030d 	sth	r2,12(r16)
   855f0:	183feb1e 	bne	r3,zero,855a0 <rx_descriptor_end+0xfff85540>
   855f4:	1100a00c 	andi	r4,r2,640
   855f8:	01408004 	movi	r5,512
   855fc:	217fe826 	beq	r4,r5,855a0 <rx_descriptor_end+0xfff85540>
   85600:	800b883a 	mov	r5,r16
   85604:	8809883a 	mov	r4,r17
   85608:	00871c80 	call	871c8 <__smakebuf_r>
   8560c:	8080030b 	ldhu	r2,12(r16)
   85610:	80c00417 	ldw	r3,16(r16)
   85614:	003fe206 	br	855a0 <rx_descriptor_end+0xfff85540>
   85618:	80800517 	ldw	r2,20(r16)
   8561c:	80000215 	stw	zero,8(r16)
   85620:	0085c83a 	sub	r2,zero,r2
   85624:	80800615 	stw	r2,24(r16)
   85628:	183fe41e 	bne	r3,zero,855bc <rx_descriptor_end+0xfff8555c>
   8562c:	80c0030b 	ldhu	r3,12(r16)
   85630:	0005883a 	mov	r2,zero
   85634:	1900200c 	andi	r4,r3,128
   85638:	203fe126 	beq	r4,zero,855c0 <rx_descriptor_end+0xfff85560>
   8563c:	18c01014 	ori	r3,r3,64
   85640:	80c0030d 	sth	r3,12(r16)
   85644:	00bfffc4 	movi	r2,-1
   85648:	003fdd06 	br	855c0 <rx_descriptor_end+0xfff85560>
   8564c:	0081f680 	call	81f68 <__sinit>
   85650:	003fcd06 	br	85588 <rx_descriptor_end+0xfff85528>
   85654:	0005883a 	mov	r2,zero
   85658:	003fd606 	br	855b4 <rx_descriptor_end+0xfff85554>
   8565c:	81400c17 	ldw	r5,48(r16)
   85660:	28000626 	beq	r5,zero,8567c <__swsetup_r+0x124>
   85664:	80801004 	addi	r2,r16,64
   85668:	28800326 	beq	r5,r2,85678 <__swsetup_r+0x120>
   8566c:	8809883a 	mov	r4,r17
   85670:	00820dc0 	call	820dc <_free_r>
   85674:	8100030b 	ldhu	r4,12(r16)
   85678:	80000c15 	stw	zero,48(r16)
   8567c:	80c00417 	ldw	r3,16(r16)
   85680:	00bff6c4 	movi	r2,-37
   85684:	1108703a 	and	r4,r2,r4
   85688:	80000115 	stw	zero,4(r16)
   8568c:	80c00015 	stw	r3,0(r16)
   85690:	003fd506 	br	855e8 <rx_descriptor_end+0xfff85588>
   85694:	00800244 	movi	r2,9
   85698:	88800015 	stw	r2,0(r17)
   8569c:	20801014 	ori	r2,r4,64
   856a0:	8080030d 	sth	r2,12(r16)
   856a4:	00bfffc4 	movi	r2,-1
   856a8:	003fc506 	br	855c0 <rx_descriptor_end+0xfff85560>

000856ac <_close_r>:
   856ac:	defffd04 	addi	sp,sp,-12
   856b0:	dc000015 	stw	r16,0(sp)
   856b4:	04000274 	movhi	r16,9
   856b8:	dc400115 	stw	r17,4(sp)
   856bc:	84186b04 	addi	r16,r16,25004
   856c0:	2023883a 	mov	r17,r4
   856c4:	2809883a 	mov	r4,r5
   856c8:	dfc00215 	stw	ra,8(sp)
   856cc:	80000015 	stw	zero,0(r16)
   856d0:	008e2200 	call	8e220 <close>
   856d4:	00ffffc4 	movi	r3,-1
   856d8:	10c00526 	beq	r2,r3,856f0 <_close_r+0x44>
   856dc:	dfc00217 	ldw	ra,8(sp)
   856e0:	dc400117 	ldw	r17,4(sp)
   856e4:	dc000017 	ldw	r16,0(sp)
   856e8:	dec00304 	addi	sp,sp,12
   856ec:	f800283a 	ret
   856f0:	80c00017 	ldw	r3,0(r16)
   856f4:	183ff926 	beq	r3,zero,856dc <rx_descriptor_end+0xfff8567c>
   856f8:	88c00015 	stw	r3,0(r17)
   856fc:	003ff706 	br	856dc <rx_descriptor_end+0xfff8567c>

00085700 <quorem>:
   85700:	defff704 	addi	sp,sp,-36
   85704:	dc800215 	stw	r18,8(sp)
   85708:	20800417 	ldw	r2,16(r4)
   8570c:	2c800417 	ldw	r18,16(r5)
   85710:	dfc00815 	stw	ra,32(sp)
   85714:	ddc00715 	stw	r23,28(sp)
   85718:	dd800615 	stw	r22,24(sp)
   8571c:	dd400515 	stw	r21,20(sp)
   85720:	dd000415 	stw	r20,16(sp)
   85724:	dcc00315 	stw	r19,12(sp)
   85728:	dc400115 	stw	r17,4(sp)
   8572c:	dc000015 	stw	r16,0(sp)
   85730:	14807116 	blt	r2,r18,858f8 <quorem+0x1f8>
   85734:	94bfffc4 	addi	r18,r18,-1
   85738:	94ad883a 	add	r22,r18,r18
   8573c:	b5ad883a 	add	r22,r22,r22
   85740:	2c400504 	addi	r17,r5,20
   85744:	8da9883a 	add	r20,r17,r22
   85748:	25400504 	addi	r21,r4,20
   8574c:	282f883a 	mov	r23,r5
   85750:	adad883a 	add	r22,r21,r22
   85754:	a1400017 	ldw	r5,0(r20)
   85758:	2021883a 	mov	r16,r4
   8575c:	b1000017 	ldw	r4,0(r22)
   85760:	29400044 	addi	r5,r5,1
   85764:	008bac00 	call	8bac0 <__udivsi3>
   85768:	1027883a 	mov	r19,r2
   8576c:	10002c26 	beq	r2,zero,85820 <quorem+0x120>
   85770:	a813883a 	mov	r9,r21
   85774:	880b883a 	mov	r5,r17
   85778:	0009883a 	mov	r4,zero
   8577c:	000d883a 	mov	r6,zero
   85780:	2a000017 	ldw	r8,0(r5)
   85784:	49c00017 	ldw	r7,0(r9)
   85788:	29400104 	addi	r5,r5,4
   8578c:	40bfffcc 	andi	r2,r8,65535
   85790:	14c5383a 	mul	r2,r2,r19
   85794:	4010d43a 	srli	r8,r8,16
   85798:	38ffffcc 	andi	r3,r7,65535
   8579c:	1105883a 	add	r2,r2,r4
   857a0:	1008d43a 	srli	r4,r2,16
   857a4:	44d1383a 	mul	r8,r8,r19
   857a8:	198d883a 	add	r6,r3,r6
   857ac:	10ffffcc 	andi	r3,r2,65535
   857b0:	30c7c83a 	sub	r3,r6,r3
   857b4:	380ed43a 	srli	r7,r7,16
   857b8:	4105883a 	add	r2,r8,r4
   857bc:	180dd43a 	srai	r6,r3,16
   857c0:	113fffcc 	andi	r4,r2,65535
   857c4:	390fc83a 	sub	r7,r7,r4
   857c8:	398d883a 	add	r6,r7,r6
   857cc:	300e943a 	slli	r7,r6,16
   857d0:	18ffffcc 	andi	r3,r3,65535
   857d4:	1008d43a 	srli	r4,r2,16
   857d8:	38ceb03a 	or	r7,r7,r3
   857dc:	49c00015 	stw	r7,0(r9)
   857e0:	300dd43a 	srai	r6,r6,16
   857e4:	4a400104 	addi	r9,r9,4
   857e8:	a17fe52e 	bgeu	r20,r5,85780 <rx_descriptor_end+0xfff85720>
   857ec:	b0800017 	ldw	r2,0(r22)
   857f0:	10000b1e 	bne	r2,zero,85820 <quorem+0x120>
   857f4:	b0bfff04 	addi	r2,r22,-4
   857f8:	a880082e 	bgeu	r21,r2,8581c <quorem+0x11c>
   857fc:	b0ffff17 	ldw	r3,-4(r22)
   85800:	18000326 	beq	r3,zero,85810 <quorem+0x110>
   85804:	00000506 	br	8581c <quorem+0x11c>
   85808:	10c00017 	ldw	r3,0(r2)
   8580c:	1800031e 	bne	r3,zero,8581c <quorem+0x11c>
   85810:	10bfff04 	addi	r2,r2,-4
   85814:	94bfffc4 	addi	r18,r18,-1
   85818:	a8bffb36 	bltu	r21,r2,85808 <rx_descriptor_end+0xfff857a8>
   8581c:	84800415 	stw	r18,16(r16)
   85820:	b80b883a 	mov	r5,r23
   85824:	8009883a 	mov	r4,r16
   85828:	0087e780 	call	87e78 <__mcmp>
   8582c:	10002616 	blt	r2,zero,858c8 <quorem+0x1c8>
   85830:	9cc00044 	addi	r19,r19,1
   85834:	a805883a 	mov	r2,r21
   85838:	000b883a 	mov	r5,zero
   8583c:	11000017 	ldw	r4,0(r2)
   85840:	89800017 	ldw	r6,0(r17)
   85844:	10800104 	addi	r2,r2,4
   85848:	20ffffcc 	andi	r3,r4,65535
   8584c:	194b883a 	add	r5,r3,r5
   85850:	30ffffcc 	andi	r3,r6,65535
   85854:	28c7c83a 	sub	r3,r5,r3
   85858:	300cd43a 	srli	r6,r6,16
   8585c:	2008d43a 	srli	r4,r4,16
   85860:	180bd43a 	srai	r5,r3,16
   85864:	18ffffcc 	andi	r3,r3,65535
   85868:	2189c83a 	sub	r4,r4,r6
   8586c:	2149883a 	add	r4,r4,r5
   85870:	200c943a 	slli	r6,r4,16
   85874:	8c400104 	addi	r17,r17,4
   85878:	200bd43a 	srai	r5,r4,16
   8587c:	30c6b03a 	or	r3,r6,r3
   85880:	10ffff15 	stw	r3,-4(r2)
   85884:	a47fed2e 	bgeu	r20,r17,8583c <rx_descriptor_end+0xfff857dc>
   85888:	9485883a 	add	r2,r18,r18
   8588c:	1085883a 	add	r2,r2,r2
   85890:	a887883a 	add	r3,r21,r2
   85894:	18800017 	ldw	r2,0(r3)
   85898:	10000b1e 	bne	r2,zero,858c8 <quorem+0x1c8>
   8589c:	18bfff04 	addi	r2,r3,-4
   858a0:	a880082e 	bgeu	r21,r2,858c4 <quorem+0x1c4>
   858a4:	18ffff17 	ldw	r3,-4(r3)
   858a8:	18000326 	beq	r3,zero,858b8 <quorem+0x1b8>
   858ac:	00000506 	br	858c4 <quorem+0x1c4>
   858b0:	10c00017 	ldw	r3,0(r2)
   858b4:	1800031e 	bne	r3,zero,858c4 <quorem+0x1c4>
   858b8:	10bfff04 	addi	r2,r2,-4
   858bc:	94bfffc4 	addi	r18,r18,-1
   858c0:	a8bffb36 	bltu	r21,r2,858b0 <rx_descriptor_end+0xfff85850>
   858c4:	84800415 	stw	r18,16(r16)
   858c8:	9805883a 	mov	r2,r19
   858cc:	dfc00817 	ldw	ra,32(sp)
   858d0:	ddc00717 	ldw	r23,28(sp)
   858d4:	dd800617 	ldw	r22,24(sp)
   858d8:	dd400517 	ldw	r21,20(sp)
   858dc:	dd000417 	ldw	r20,16(sp)
   858e0:	dcc00317 	ldw	r19,12(sp)
   858e4:	dc800217 	ldw	r18,8(sp)
   858e8:	dc400117 	ldw	r17,4(sp)
   858ec:	dc000017 	ldw	r16,0(sp)
   858f0:	dec00904 	addi	sp,sp,36
   858f4:	f800283a 	ret
   858f8:	0005883a 	mov	r2,zero
   858fc:	003ff306 	br	858cc <rx_descriptor_end+0xfff8586c>

00085900 <_dtoa_r>:
   85900:	20801017 	ldw	r2,64(r4)
   85904:	deffde04 	addi	sp,sp,-136
   85908:	df002015 	stw	fp,128(sp)
   8590c:	dcc01b15 	stw	r19,108(sp)
   85910:	dc801a15 	stw	r18,104(sp)
   85914:	dc401915 	stw	r17,100(sp)
   85918:	dc001815 	stw	r16,96(sp)
   8591c:	dfc02115 	stw	ra,132(sp)
   85920:	ddc01f15 	stw	r23,124(sp)
   85924:	dd801e15 	stw	r22,120(sp)
   85928:	dd401d15 	stw	r21,116(sp)
   8592c:	dd001c15 	stw	r20,112(sp)
   85930:	d9c00315 	stw	r7,12(sp)
   85934:	2039883a 	mov	fp,r4
   85938:	3023883a 	mov	r17,r6
   8593c:	2825883a 	mov	r18,r5
   85940:	dc002417 	ldw	r16,144(sp)
   85944:	3027883a 	mov	r19,r6
   85948:	10000826 	beq	r2,zero,8596c <_dtoa_r+0x6c>
   8594c:	21801117 	ldw	r6,68(r4)
   85950:	00c00044 	movi	r3,1
   85954:	100b883a 	mov	r5,r2
   85958:	1986983a 	sll	r3,r3,r6
   8595c:	11800115 	stw	r6,4(r2)
   85960:	10c00215 	stw	r3,8(r2)
   85964:	00876580 	call	87658 <_Bfree>
   85968:	e0001015 	stw	zero,64(fp)
   8596c:	88002e16 	blt	r17,zero,85a28 <_dtoa_r+0x128>
   85970:	80000015 	stw	zero,0(r16)
   85974:	889ffc2c 	andhi	r2,r17,32752
   85978:	00dffc34 	movhi	r3,32752
   8597c:	10c01c26 	beq	r2,r3,859f0 <_dtoa_r+0xf0>
   85980:	000d883a 	mov	r6,zero
   85984:	000f883a 	mov	r7,zero
   85988:	9009883a 	mov	r4,r18
   8598c:	980b883a 	mov	r5,r19
   85990:	008cd100 	call	8cd10 <__eqdf2>
   85994:	10002b1e 	bne	r2,zero,85a44 <_dtoa_r+0x144>
   85998:	d9c02317 	ldw	r7,140(sp)
   8599c:	00800044 	movi	r2,1
   859a0:	38800015 	stw	r2,0(r7)
   859a4:	d8802517 	ldw	r2,148(sp)
   859a8:	10019e26 	beq	r2,zero,86024 <_dtoa_r+0x724>
   859ac:	d8c02517 	ldw	r3,148(sp)
   859b0:	00800274 	movhi	r2,9
   859b4:	1087fa44 	addi	r2,r2,8169
   859b8:	18800015 	stw	r2,0(r3)
   859bc:	10bfffc4 	addi	r2,r2,-1
   859c0:	dfc02117 	ldw	ra,132(sp)
   859c4:	df002017 	ldw	fp,128(sp)
   859c8:	ddc01f17 	ldw	r23,124(sp)
   859cc:	dd801e17 	ldw	r22,120(sp)
   859d0:	dd401d17 	ldw	r21,116(sp)
   859d4:	dd001c17 	ldw	r20,112(sp)
   859d8:	dcc01b17 	ldw	r19,108(sp)
   859dc:	dc801a17 	ldw	r18,104(sp)
   859e0:	dc401917 	ldw	r17,100(sp)
   859e4:	dc001817 	ldw	r16,96(sp)
   859e8:	dec02204 	addi	sp,sp,136
   859ec:	f800283a 	ret
   859f0:	d8c02317 	ldw	r3,140(sp)
   859f4:	0089c3c4 	movi	r2,9999
   859f8:	18800015 	stw	r2,0(r3)
   859fc:	90017726 	beq	r18,zero,85fdc <_dtoa_r+0x6dc>
   85a00:	00800274 	movhi	r2,9
   85a04:	10880604 	addi	r2,r2,8216
   85a08:	d9002517 	ldw	r4,148(sp)
   85a0c:	203fec26 	beq	r4,zero,859c0 <rx_descriptor_end+0xfff85960>
   85a10:	10c000c7 	ldb	r3,3(r2)
   85a14:	1801781e 	bne	r3,zero,85ff8 <_dtoa_r+0x6f8>
   85a18:	10c000c4 	addi	r3,r2,3
   85a1c:	d9802517 	ldw	r6,148(sp)
   85a20:	30c00015 	stw	r3,0(r6)
   85a24:	003fe606 	br	859c0 <rx_descriptor_end+0xfff85960>
   85a28:	04e00034 	movhi	r19,32768
   85a2c:	9cffffc4 	addi	r19,r19,-1
   85a30:	00800044 	movi	r2,1
   85a34:	8ce6703a 	and	r19,r17,r19
   85a38:	80800015 	stw	r2,0(r16)
   85a3c:	9823883a 	mov	r17,r19
   85a40:	003fcc06 	br	85974 <rx_descriptor_end+0xfff85914>
   85a44:	d8800204 	addi	r2,sp,8
   85a48:	d8800015 	stw	r2,0(sp)
   85a4c:	d9c00104 	addi	r7,sp,4
   85a50:	900b883a 	mov	r5,r18
   85a54:	980d883a 	mov	r6,r19
   85a58:	e009883a 	mov	r4,fp
   85a5c:	8820d53a 	srli	r16,r17,20
   85a60:	00882440 	call	88244 <__d2b>
   85a64:	d8800915 	stw	r2,36(sp)
   85a68:	8001651e 	bne	r16,zero,86000 <_dtoa_r+0x700>
   85a6c:	dd800217 	ldw	r22,8(sp)
   85a70:	dc000117 	ldw	r16,4(sp)
   85a74:	00800804 	movi	r2,32
   85a78:	b421883a 	add	r16,r22,r16
   85a7c:	80c10c84 	addi	r3,r16,1074
   85a80:	10c2d10e 	bge	r2,r3,865c8 <_dtoa_r+0xcc8>
   85a84:	00801004 	movi	r2,64
   85a88:	81010484 	addi	r4,r16,1042
   85a8c:	10c7c83a 	sub	r3,r2,r3
   85a90:	9108d83a 	srl	r4,r18,r4
   85a94:	88e2983a 	sll	r17,r17,r3
   85a98:	2448b03a 	or	r4,r4,r17
   85a9c:	008e0d80 	call	8e0d8 <__floatunsidf>
   85aa0:	017f8434 	movhi	r5,65040
   85aa4:	01800044 	movi	r6,1
   85aa8:	1009883a 	mov	r4,r2
   85aac:	194b883a 	add	r5,r3,r5
   85ab0:	843fffc4 	addi	r16,r16,-1
   85ab4:	d9801115 	stw	r6,68(sp)
   85ab8:	000d883a 	mov	r6,zero
   85abc:	01cffe34 	movhi	r7,16376
   85ac0:	008d6800 	call	8d680 <__subdf3>
   85ac4:	0198dbf4 	movhi	r6,25455
   85ac8:	01cff4f4 	movhi	r7,16339
   85acc:	3190d844 	addi	r6,r6,17249
   85ad0:	39e1e9c4 	addi	r7,r7,-30809
   85ad4:	1009883a 	mov	r4,r2
   85ad8:	180b883a 	mov	r5,r3
   85adc:	008cf680 	call	8cf68 <__muldf3>
   85ae0:	01a2d874 	movhi	r6,35681
   85ae4:	01cff1f4 	movhi	r7,16327
   85ae8:	31b22cc4 	addi	r6,r6,-14157
   85aec:	39e28a04 	addi	r7,r7,-30168
   85af0:	180b883a 	mov	r5,r3
   85af4:	1009883a 	mov	r4,r2
   85af8:	008bb7c0 	call	8bb7c <__adddf3>
   85afc:	8009883a 	mov	r4,r16
   85b00:	1029883a 	mov	r20,r2
   85b04:	1823883a 	mov	r17,r3
   85b08:	008dffc0 	call	8dffc <__floatsidf>
   85b0c:	019427f4 	movhi	r6,20639
   85b10:	01cff4f4 	movhi	r7,16339
   85b14:	319e7ec4 	addi	r6,r6,31227
   85b18:	39d104c4 	addi	r7,r7,17427
   85b1c:	1009883a 	mov	r4,r2
   85b20:	180b883a 	mov	r5,r3
   85b24:	008cf680 	call	8cf68 <__muldf3>
   85b28:	100d883a 	mov	r6,r2
   85b2c:	180f883a 	mov	r7,r3
   85b30:	a009883a 	mov	r4,r20
   85b34:	880b883a 	mov	r5,r17
   85b38:	008bb7c0 	call	8bb7c <__adddf3>
   85b3c:	1009883a 	mov	r4,r2
   85b40:	180b883a 	mov	r5,r3
   85b44:	1029883a 	mov	r20,r2
   85b48:	1823883a 	mov	r17,r3
   85b4c:	008df7c0 	call	8df7c <__fixdfsi>
   85b50:	000d883a 	mov	r6,zero
   85b54:	000f883a 	mov	r7,zero
   85b58:	a009883a 	mov	r4,r20
   85b5c:	880b883a 	mov	r5,r17
   85b60:	d8800515 	stw	r2,20(sp)
   85b64:	008ce740 	call	8ce74 <__ledf2>
   85b68:	10028716 	blt	r2,zero,86588 <_dtoa_r+0xc88>
   85b6c:	d8c00517 	ldw	r3,20(sp)
   85b70:	00800584 	movi	r2,22
   85b74:	10c27536 	bltu	r2,r3,8654c <_dtoa_r+0xc4c>
   85b78:	180490fa 	slli	r2,r3,3
   85b7c:	00c00274 	movhi	r3,9
   85b80:	18c82104 	addi	r3,r3,8324
   85b84:	1885883a 	add	r2,r3,r2
   85b88:	11000017 	ldw	r4,0(r2)
   85b8c:	11400117 	ldw	r5,4(r2)
   85b90:	900d883a 	mov	r6,r18
   85b94:	980f883a 	mov	r7,r19
   85b98:	008cd980 	call	8cd98 <__gedf2>
   85b9c:	00828d0e 	bge	zero,r2,865d4 <_dtoa_r+0xcd4>
   85ba0:	d9000517 	ldw	r4,20(sp)
   85ba4:	d8000e15 	stw	zero,56(sp)
   85ba8:	213fffc4 	addi	r4,r4,-1
   85bac:	d9000515 	stw	r4,20(sp)
   85bb0:	b42dc83a 	sub	r22,r22,r16
   85bb4:	b5bfffc4 	addi	r22,r22,-1
   85bb8:	b0026f16 	blt	r22,zero,86578 <_dtoa_r+0xc78>
   85bbc:	d8000815 	stw	zero,32(sp)
   85bc0:	d9c00517 	ldw	r7,20(sp)
   85bc4:	38026416 	blt	r7,zero,86558 <_dtoa_r+0xc58>
   85bc8:	b1ed883a 	add	r22,r22,r7
   85bcc:	d9c00d15 	stw	r7,52(sp)
   85bd0:	d8000a15 	stw	zero,40(sp)
   85bd4:	d9800317 	ldw	r6,12(sp)
   85bd8:	00800244 	movi	r2,9
   85bdc:	11811436 	bltu	r2,r6,86030 <_dtoa_r+0x730>
   85be0:	00800144 	movi	r2,5
   85be4:	1184e10e 	bge	r2,r6,86f6c <_dtoa_r+0x166c>
   85be8:	31bfff04 	addi	r6,r6,-4
   85bec:	d9800315 	stw	r6,12(sp)
   85bf0:	0023883a 	mov	r17,zero
   85bf4:	d9800317 	ldw	r6,12(sp)
   85bf8:	008000c4 	movi	r2,3
   85bfc:	30836726 	beq	r6,r2,8699c <_dtoa_r+0x109c>
   85c00:	1183410e 	bge	r2,r6,86908 <_dtoa_r+0x1008>
   85c04:	d9c00317 	ldw	r7,12(sp)
   85c08:	00800104 	movi	r2,4
   85c0c:	38827c26 	beq	r7,r2,86600 <_dtoa_r+0xd00>
   85c10:	00800144 	movi	r2,5
   85c14:	3884c41e 	bne	r7,r2,86f28 <_dtoa_r+0x1628>
   85c18:	00800044 	movi	r2,1
   85c1c:	d8800b15 	stw	r2,44(sp)
   85c20:	d8c00517 	ldw	r3,20(sp)
   85c24:	d9002217 	ldw	r4,136(sp)
   85c28:	1907883a 	add	r3,r3,r4
   85c2c:	19800044 	addi	r6,r3,1
   85c30:	d8c00c15 	stw	r3,48(sp)
   85c34:	d9800615 	stw	r6,24(sp)
   85c38:	0183a40e 	bge	zero,r6,86acc <_dtoa_r+0x11cc>
   85c3c:	d9800617 	ldw	r6,24(sp)
   85c40:	3021883a 	mov	r16,r6
   85c44:	e0001115 	stw	zero,68(fp)
   85c48:	008005c4 	movi	r2,23
   85c4c:	1184c92e 	bgeu	r2,r6,86f74 <_dtoa_r+0x1674>
   85c50:	00c00044 	movi	r3,1
   85c54:	00800104 	movi	r2,4
   85c58:	1085883a 	add	r2,r2,r2
   85c5c:	11000504 	addi	r4,r2,20
   85c60:	180b883a 	mov	r5,r3
   85c64:	18c00044 	addi	r3,r3,1
   85c68:	313ffb2e 	bgeu	r6,r4,85c58 <rx_descriptor_end+0xfff85bf8>
   85c6c:	e1401115 	stw	r5,68(fp)
   85c70:	e009883a 	mov	r4,fp
   85c74:	00875b00 	call	875b0 <_Balloc>
   85c78:	d8800715 	stw	r2,28(sp)
   85c7c:	e0801015 	stw	r2,64(fp)
   85c80:	00800384 	movi	r2,14
   85c84:	1400f736 	bltu	r2,r16,86064 <_dtoa_r+0x764>
   85c88:	8800f626 	beq	r17,zero,86064 <_dtoa_r+0x764>
   85c8c:	d9c00517 	ldw	r7,20(sp)
   85c90:	01c39a0e 	bge	zero,r7,86afc <_dtoa_r+0x11fc>
   85c94:	388003cc 	andi	r2,r7,15
   85c98:	100490fa 	slli	r2,r2,3
   85c9c:	382bd13a 	srai	r21,r7,4
   85ca0:	00c00274 	movhi	r3,9
   85ca4:	18c82104 	addi	r3,r3,8324
   85ca8:	1885883a 	add	r2,r3,r2
   85cac:	a8c0040c 	andi	r3,r21,16
   85cb0:	12400017 	ldw	r9,0(r2)
   85cb4:	12000117 	ldw	r8,4(r2)
   85cb8:	18037926 	beq	r3,zero,86aa0 <_dtoa_r+0x11a0>
   85cbc:	00800274 	movhi	r2,9
   85cc0:	10881704 	addi	r2,r2,8284
   85cc4:	11800817 	ldw	r6,32(r2)
   85cc8:	11c00917 	ldw	r7,36(r2)
   85ccc:	9009883a 	mov	r4,r18
   85cd0:	980b883a 	mov	r5,r19
   85cd4:	da001715 	stw	r8,92(sp)
   85cd8:	da401615 	stw	r9,88(sp)
   85cdc:	008c4280 	call	8c428 <__divdf3>
   85ce0:	da001717 	ldw	r8,92(sp)
   85ce4:	da401617 	ldw	r9,88(sp)
   85ce8:	ad4003cc 	andi	r21,r21,15
   85cec:	040000c4 	movi	r16,3
   85cf0:	1023883a 	mov	r17,r2
   85cf4:	1829883a 	mov	r20,r3
   85cf8:	a8001126 	beq	r21,zero,85d40 <_dtoa_r+0x440>
   85cfc:	05c00274 	movhi	r23,9
   85d00:	bdc81704 	addi	r23,r23,8284
   85d04:	4805883a 	mov	r2,r9
   85d08:	4007883a 	mov	r3,r8
   85d0c:	a980004c 	andi	r6,r21,1
   85d10:	1009883a 	mov	r4,r2
   85d14:	a82bd07a 	srai	r21,r21,1
   85d18:	180b883a 	mov	r5,r3
   85d1c:	30000426 	beq	r6,zero,85d30 <_dtoa_r+0x430>
   85d20:	b9800017 	ldw	r6,0(r23)
   85d24:	b9c00117 	ldw	r7,4(r23)
   85d28:	84000044 	addi	r16,r16,1
   85d2c:	008cf680 	call	8cf68 <__muldf3>
   85d30:	bdc00204 	addi	r23,r23,8
   85d34:	a83ff51e 	bne	r21,zero,85d0c <rx_descriptor_end+0xfff85cac>
   85d38:	1013883a 	mov	r9,r2
   85d3c:	1811883a 	mov	r8,r3
   85d40:	480d883a 	mov	r6,r9
   85d44:	400f883a 	mov	r7,r8
   85d48:	8809883a 	mov	r4,r17
   85d4c:	a00b883a 	mov	r5,r20
   85d50:	008c4280 	call	8c428 <__divdf3>
   85d54:	d8800f15 	stw	r2,60(sp)
   85d58:	d8c01015 	stw	r3,64(sp)
   85d5c:	d8c00e17 	ldw	r3,56(sp)
   85d60:	18000626 	beq	r3,zero,85d7c <_dtoa_r+0x47c>
   85d64:	d9000f17 	ldw	r4,60(sp)
   85d68:	d9401017 	ldw	r5,64(sp)
   85d6c:	000d883a 	mov	r6,zero
   85d70:	01cffc34 	movhi	r7,16368
   85d74:	008ce740 	call	8ce74 <__ledf2>
   85d78:	10040b16 	blt	r2,zero,86da8 <_dtoa_r+0x14a8>
   85d7c:	8009883a 	mov	r4,r16
   85d80:	008dffc0 	call	8dffc <__floatsidf>
   85d84:	d9800f17 	ldw	r6,60(sp)
   85d88:	d9c01017 	ldw	r7,64(sp)
   85d8c:	1009883a 	mov	r4,r2
   85d90:	180b883a 	mov	r5,r3
   85d94:	008cf680 	call	8cf68 <__muldf3>
   85d98:	000d883a 	mov	r6,zero
   85d9c:	01d00734 	movhi	r7,16412
   85da0:	1009883a 	mov	r4,r2
   85da4:	180b883a 	mov	r5,r3
   85da8:	008bb7c0 	call	8bb7c <__adddf3>
   85dac:	1021883a 	mov	r16,r2
   85db0:	d8800617 	ldw	r2,24(sp)
   85db4:	047f3034 	movhi	r17,64704
   85db8:	1c63883a 	add	r17,r3,r17
   85dbc:	10031826 	beq	r2,zero,86a20 <_dtoa_r+0x1120>
   85dc0:	d8c00517 	ldw	r3,20(sp)
   85dc4:	db000617 	ldw	r12,24(sp)
   85dc8:	d8c01315 	stw	r3,76(sp)
   85dcc:	d9000b17 	ldw	r4,44(sp)
   85dd0:	20038f26 	beq	r4,zero,86c10 <_dtoa_r+0x1310>
   85dd4:	60bfffc4 	addi	r2,r12,-1
   85dd8:	100490fa 	slli	r2,r2,3
   85ddc:	00c00274 	movhi	r3,9
   85de0:	18c82104 	addi	r3,r3,8324
   85de4:	1885883a 	add	r2,r3,r2
   85de8:	11800017 	ldw	r6,0(r2)
   85dec:	11c00117 	ldw	r7,4(r2)
   85df0:	d8800717 	ldw	r2,28(sp)
   85df4:	0009883a 	mov	r4,zero
   85df8:	014ff834 	movhi	r5,16352
   85dfc:	db001615 	stw	r12,88(sp)
   85e00:	15c00044 	addi	r23,r2,1
   85e04:	008c4280 	call	8c428 <__divdf3>
   85e08:	800d883a 	mov	r6,r16
   85e0c:	880f883a 	mov	r7,r17
   85e10:	1009883a 	mov	r4,r2
   85e14:	180b883a 	mov	r5,r3
   85e18:	008d6800 	call	8d680 <__subdf3>
   85e1c:	d9401017 	ldw	r5,64(sp)
   85e20:	d9000f17 	ldw	r4,60(sp)
   85e24:	102b883a 	mov	r21,r2
   85e28:	d8c01215 	stw	r3,72(sp)
   85e2c:	008df7c0 	call	8df7c <__fixdfsi>
   85e30:	1009883a 	mov	r4,r2
   85e34:	1029883a 	mov	r20,r2
   85e38:	008dffc0 	call	8dffc <__floatsidf>
   85e3c:	d9000f17 	ldw	r4,60(sp)
   85e40:	d9401017 	ldw	r5,64(sp)
   85e44:	100d883a 	mov	r6,r2
   85e48:	180f883a 	mov	r7,r3
   85e4c:	008d6800 	call	8d680 <__subdf3>
   85e50:	1823883a 	mov	r17,r3
   85e54:	d8c00717 	ldw	r3,28(sp)
   85e58:	d9401217 	ldw	r5,72(sp)
   85e5c:	a2000c04 	addi	r8,r20,48
   85e60:	1021883a 	mov	r16,r2
   85e64:	1a000005 	stb	r8,0(r3)
   85e68:	800d883a 	mov	r6,r16
   85e6c:	880f883a 	mov	r7,r17
   85e70:	a809883a 	mov	r4,r21
   85e74:	4029883a 	mov	r20,r8
   85e78:	008cd980 	call	8cd98 <__gedf2>
   85e7c:	00841d16 	blt	zero,r2,86ef4 <_dtoa_r+0x15f4>
   85e80:	800d883a 	mov	r6,r16
   85e84:	880f883a 	mov	r7,r17
   85e88:	0009883a 	mov	r4,zero
   85e8c:	014ffc34 	movhi	r5,16368
   85e90:	008d6800 	call	8d680 <__subdf3>
   85e94:	d9401217 	ldw	r5,72(sp)
   85e98:	100d883a 	mov	r6,r2
   85e9c:	180f883a 	mov	r7,r3
   85ea0:	a809883a 	mov	r4,r21
   85ea4:	008cd980 	call	8cd98 <__gedf2>
   85ea8:	db001617 	ldw	r12,88(sp)
   85eac:	00840e16 	blt	zero,r2,86ee8 <_dtoa_r+0x15e8>
   85eb0:	00800044 	movi	r2,1
   85eb4:	13006b0e 	bge	r2,r12,86064 <_dtoa_r+0x764>
   85eb8:	d9000717 	ldw	r4,28(sp)
   85ebc:	dd800f15 	stw	r22,60(sp)
   85ec0:	dcc01015 	stw	r19,64(sp)
   85ec4:	2319883a 	add	r12,r4,r12
   85ec8:	dcc01217 	ldw	r19,72(sp)
   85ecc:	602d883a 	mov	r22,r12
   85ed0:	dc801215 	stw	r18,72(sp)
   85ed4:	b825883a 	mov	r18,r23
   85ed8:	00000906 	br	85f00 <_dtoa_r+0x600>
   85edc:	008d6800 	call	8d680 <__subdf3>
   85ee0:	a80d883a 	mov	r6,r21
   85ee4:	980f883a 	mov	r7,r19
   85ee8:	1009883a 	mov	r4,r2
   85eec:	180b883a 	mov	r5,r3
   85ef0:	008ce740 	call	8ce74 <__ledf2>
   85ef4:	1003e816 	blt	r2,zero,86e98 <_dtoa_r+0x1598>
   85ef8:	b825883a 	mov	r18,r23
   85efc:	bd83e926 	beq	r23,r22,86ea4 <_dtoa_r+0x15a4>
   85f00:	a809883a 	mov	r4,r21
   85f04:	980b883a 	mov	r5,r19
   85f08:	000d883a 	mov	r6,zero
   85f0c:	01d00934 	movhi	r7,16420
   85f10:	008cf680 	call	8cf68 <__muldf3>
   85f14:	000d883a 	mov	r6,zero
   85f18:	01d00934 	movhi	r7,16420
   85f1c:	8009883a 	mov	r4,r16
   85f20:	880b883a 	mov	r5,r17
   85f24:	102b883a 	mov	r21,r2
   85f28:	1827883a 	mov	r19,r3
   85f2c:	008cf680 	call	8cf68 <__muldf3>
   85f30:	180b883a 	mov	r5,r3
   85f34:	1009883a 	mov	r4,r2
   85f38:	1821883a 	mov	r16,r3
   85f3c:	1023883a 	mov	r17,r2
   85f40:	008df7c0 	call	8df7c <__fixdfsi>
   85f44:	1009883a 	mov	r4,r2
   85f48:	1029883a 	mov	r20,r2
   85f4c:	008dffc0 	call	8dffc <__floatsidf>
   85f50:	8809883a 	mov	r4,r17
   85f54:	800b883a 	mov	r5,r16
   85f58:	100d883a 	mov	r6,r2
   85f5c:	180f883a 	mov	r7,r3
   85f60:	008d6800 	call	8d680 <__subdf3>
   85f64:	a5000c04 	addi	r20,r20,48
   85f68:	a80d883a 	mov	r6,r21
   85f6c:	980f883a 	mov	r7,r19
   85f70:	1009883a 	mov	r4,r2
   85f74:	180b883a 	mov	r5,r3
   85f78:	95000005 	stb	r20,0(r18)
   85f7c:	1021883a 	mov	r16,r2
   85f80:	1823883a 	mov	r17,r3
   85f84:	008ce740 	call	8ce74 <__ledf2>
   85f88:	bdc00044 	addi	r23,r23,1
   85f8c:	800d883a 	mov	r6,r16
   85f90:	880f883a 	mov	r7,r17
   85f94:	0009883a 	mov	r4,zero
   85f98:	014ffc34 	movhi	r5,16368
   85f9c:	103fcf0e 	bge	r2,zero,85edc <rx_descriptor_end+0xfff85e7c>
   85fa0:	d8c01317 	ldw	r3,76(sp)
   85fa4:	d8c00515 	stw	r3,20(sp)
   85fa8:	d9400917 	ldw	r5,36(sp)
   85fac:	e009883a 	mov	r4,fp
   85fb0:	00876580 	call	87658 <_Bfree>
   85fb4:	d9000517 	ldw	r4,20(sp)
   85fb8:	d9802317 	ldw	r6,140(sp)
   85fbc:	d9c02517 	ldw	r7,148(sp)
   85fc0:	b8000005 	stb	zero,0(r23)
   85fc4:	20800044 	addi	r2,r4,1
   85fc8:	30800015 	stw	r2,0(r6)
   85fcc:	3802aa26 	beq	r7,zero,86a78 <_dtoa_r+0x1178>
   85fd0:	3dc00015 	stw	r23,0(r7)
   85fd4:	d8800717 	ldw	r2,28(sp)
   85fd8:	003e7906 	br	859c0 <rx_descriptor_end+0xfff85960>
   85fdc:	00800434 	movhi	r2,16
   85fe0:	10bfffc4 	addi	r2,r2,-1
   85fe4:	88a2703a 	and	r17,r17,r2
   85fe8:	883e851e 	bne	r17,zero,85a00 <rx_descriptor_end+0xfff859a0>
   85fec:	00800274 	movhi	r2,9
   85ff0:	10880304 	addi	r2,r2,8204
   85ff4:	003e8406 	br	85a08 <rx_descriptor_end+0xfff859a8>
   85ff8:	10c00204 	addi	r3,r2,8
   85ffc:	003e8706 	br	85a1c <rx_descriptor_end+0xfff859bc>
   86000:	01400434 	movhi	r5,16
   86004:	297fffc4 	addi	r5,r5,-1
   86008:	994a703a 	and	r5,r19,r5
   8600c:	9009883a 	mov	r4,r18
   86010:	843f0044 	addi	r16,r16,-1023
   86014:	294ffc34 	orhi	r5,r5,16368
   86018:	dd800217 	ldw	r22,8(sp)
   8601c:	d8001115 	stw	zero,68(sp)
   86020:	003ea506 	br	85ab8 <rx_descriptor_end+0xfff85a58>
   86024:	00800274 	movhi	r2,9
   86028:	1087fa04 	addi	r2,r2,8168
   8602c:	003e6406 	br	859c0 <rx_descriptor_end+0xfff85960>
   86030:	e0001115 	stw	zero,68(fp)
   86034:	000b883a 	mov	r5,zero
   86038:	e009883a 	mov	r4,fp
   8603c:	00875b00 	call	875b0 <_Balloc>
   86040:	01bfffc4 	movi	r6,-1
   86044:	01c00044 	movi	r7,1
   86048:	d8800715 	stw	r2,28(sp)
   8604c:	d9800c15 	stw	r6,48(sp)
   86050:	e0801015 	stw	r2,64(fp)
   86054:	d8000315 	stw	zero,12(sp)
   86058:	d9c00b15 	stw	r7,44(sp)
   8605c:	d9800615 	stw	r6,24(sp)
   86060:	d8002215 	stw	zero,136(sp)
   86064:	d8800117 	ldw	r2,4(sp)
   86068:	10008916 	blt	r2,zero,86290 <_dtoa_r+0x990>
   8606c:	d9000517 	ldw	r4,20(sp)
   86070:	00c00384 	movi	r3,14
   86074:	19008616 	blt	r3,r4,86290 <_dtoa_r+0x990>
   86078:	200490fa 	slli	r2,r4,3
   8607c:	00c00274 	movhi	r3,9
   86080:	d9802217 	ldw	r6,136(sp)
   86084:	18c82104 	addi	r3,r3,8324
   86088:	1885883a 	add	r2,r3,r2
   8608c:	14000017 	ldw	r16,0(r2)
   86090:	14400117 	ldw	r17,4(r2)
   86094:	30016316 	blt	r6,zero,86624 <_dtoa_r+0xd24>
   86098:	800d883a 	mov	r6,r16
   8609c:	880f883a 	mov	r7,r17
   860a0:	9009883a 	mov	r4,r18
   860a4:	980b883a 	mov	r5,r19
   860a8:	008c4280 	call	8c428 <__divdf3>
   860ac:	180b883a 	mov	r5,r3
   860b0:	1009883a 	mov	r4,r2
   860b4:	008df7c0 	call	8df7c <__fixdfsi>
   860b8:	1009883a 	mov	r4,r2
   860bc:	102b883a 	mov	r21,r2
   860c0:	008dffc0 	call	8dffc <__floatsidf>
   860c4:	800d883a 	mov	r6,r16
   860c8:	880f883a 	mov	r7,r17
   860cc:	1009883a 	mov	r4,r2
   860d0:	180b883a 	mov	r5,r3
   860d4:	008cf680 	call	8cf68 <__muldf3>
   860d8:	100d883a 	mov	r6,r2
   860dc:	180f883a 	mov	r7,r3
   860e0:	9009883a 	mov	r4,r18
   860e4:	980b883a 	mov	r5,r19
   860e8:	008d6800 	call	8d680 <__subdf3>
   860ec:	d9c00717 	ldw	r7,28(sp)
   860f0:	1009883a 	mov	r4,r2
   860f4:	a8800c04 	addi	r2,r21,48
   860f8:	38800005 	stb	r2,0(r7)
   860fc:	3dc00044 	addi	r23,r7,1
   86100:	d9c00617 	ldw	r7,24(sp)
   86104:	01800044 	movi	r6,1
   86108:	180b883a 	mov	r5,r3
   8610c:	2005883a 	mov	r2,r4
   86110:	39803826 	beq	r7,r6,861f4 <_dtoa_r+0x8f4>
   86114:	000d883a 	mov	r6,zero
   86118:	01d00934 	movhi	r7,16420
   8611c:	008cf680 	call	8cf68 <__muldf3>
   86120:	000d883a 	mov	r6,zero
   86124:	000f883a 	mov	r7,zero
   86128:	1009883a 	mov	r4,r2
   8612c:	180b883a 	mov	r5,r3
   86130:	1025883a 	mov	r18,r2
   86134:	1827883a 	mov	r19,r3
   86138:	008cd100 	call	8cd10 <__eqdf2>
   8613c:	103f9a26 	beq	r2,zero,85fa8 <rx_descriptor_end+0xfff85f48>
   86140:	d9c00617 	ldw	r7,24(sp)
   86144:	d8c00717 	ldw	r3,28(sp)
   86148:	b829883a 	mov	r20,r23
   8614c:	38bfffc4 	addi	r2,r7,-1
   86150:	18ad883a 	add	r22,r3,r2
   86154:	00000a06 	br	86180 <_dtoa_r+0x880>
   86158:	008cf680 	call	8cf68 <__muldf3>
   8615c:	000d883a 	mov	r6,zero
   86160:	000f883a 	mov	r7,zero
   86164:	1009883a 	mov	r4,r2
   86168:	180b883a 	mov	r5,r3
   8616c:	1025883a 	mov	r18,r2
   86170:	1827883a 	mov	r19,r3
   86174:	b829883a 	mov	r20,r23
   86178:	008cd100 	call	8cd10 <__eqdf2>
   8617c:	103f8a26 	beq	r2,zero,85fa8 <rx_descriptor_end+0xfff85f48>
   86180:	800d883a 	mov	r6,r16
   86184:	880f883a 	mov	r7,r17
   86188:	9009883a 	mov	r4,r18
   8618c:	980b883a 	mov	r5,r19
   86190:	008c4280 	call	8c428 <__divdf3>
   86194:	180b883a 	mov	r5,r3
   86198:	1009883a 	mov	r4,r2
   8619c:	008df7c0 	call	8df7c <__fixdfsi>
   861a0:	1009883a 	mov	r4,r2
   861a4:	102b883a 	mov	r21,r2
   861a8:	008dffc0 	call	8dffc <__floatsidf>
   861ac:	800d883a 	mov	r6,r16
   861b0:	880f883a 	mov	r7,r17
   861b4:	1009883a 	mov	r4,r2
   861b8:	180b883a 	mov	r5,r3
   861bc:	008cf680 	call	8cf68 <__muldf3>
   861c0:	100d883a 	mov	r6,r2
   861c4:	180f883a 	mov	r7,r3
   861c8:	9009883a 	mov	r4,r18
   861cc:	980b883a 	mov	r5,r19
   861d0:	008d6800 	call	8d680 <__subdf3>
   861d4:	aa000c04 	addi	r8,r21,48
   861d8:	a2000005 	stb	r8,0(r20)
   861dc:	000d883a 	mov	r6,zero
   861e0:	01d00934 	movhi	r7,16420
   861e4:	1009883a 	mov	r4,r2
   861e8:	180b883a 	mov	r5,r3
   861ec:	a5c00044 	addi	r23,r20,1
   861f0:	b53fd91e 	bne	r22,r20,86158 <rx_descriptor_end+0xfff860f8>
   861f4:	100d883a 	mov	r6,r2
   861f8:	180f883a 	mov	r7,r3
   861fc:	1009883a 	mov	r4,r2
   86200:	180b883a 	mov	r5,r3
   86204:	008bb7c0 	call	8bb7c <__adddf3>
   86208:	100d883a 	mov	r6,r2
   8620c:	180f883a 	mov	r7,r3
   86210:	8009883a 	mov	r4,r16
   86214:	880b883a 	mov	r5,r17
   86218:	1027883a 	mov	r19,r2
   8621c:	1825883a 	mov	r18,r3
   86220:	008ce740 	call	8ce74 <__ledf2>
   86224:	10000816 	blt	r2,zero,86248 <_dtoa_r+0x948>
   86228:	980d883a 	mov	r6,r19
   8622c:	900f883a 	mov	r7,r18
   86230:	8009883a 	mov	r4,r16
   86234:	880b883a 	mov	r5,r17
   86238:	008cd100 	call	8cd10 <__eqdf2>
   8623c:	103f5a1e 	bne	r2,zero,85fa8 <rx_descriptor_end+0xfff85f48>
   86240:	ad40004c 	andi	r21,r21,1
   86244:	a83f5826 	beq	r21,zero,85fa8 <rx_descriptor_end+0xfff85f48>
   86248:	bd3fffc3 	ldbu	r20,-1(r23)
   8624c:	b8bfffc4 	addi	r2,r23,-1
   86250:	1007883a 	mov	r3,r2
   86254:	01400e44 	movi	r5,57
   86258:	d9800717 	ldw	r6,28(sp)
   8625c:	00000506 	br	86274 <_dtoa_r+0x974>
   86260:	18ffffc4 	addi	r3,r3,-1
   86264:	11824726 	beq	r2,r6,86b84 <_dtoa_r+0x1284>
   86268:	1d000003 	ldbu	r20,0(r3)
   8626c:	102f883a 	mov	r23,r2
   86270:	10bfffc4 	addi	r2,r2,-1
   86274:	a1003fcc 	andi	r4,r20,255
   86278:	2100201c 	xori	r4,r4,128
   8627c:	213fe004 	addi	r4,r4,-128
   86280:	217ff726 	beq	r4,r5,86260 <rx_descriptor_end+0xfff86200>
   86284:	a2000044 	addi	r8,r20,1
   86288:	12000005 	stb	r8,0(r2)
   8628c:	003f4606 	br	85fa8 <rx_descriptor_end+0xfff85f48>
   86290:	d9000b17 	ldw	r4,44(sp)
   86294:	2000c826 	beq	r4,zero,865b8 <_dtoa_r+0xcb8>
   86298:	d9800317 	ldw	r6,12(sp)
   8629c:	00c00044 	movi	r3,1
   862a0:	1980f90e 	bge	r3,r6,86688 <_dtoa_r+0xd88>
   862a4:	d8800617 	ldw	r2,24(sp)
   862a8:	d8c00a17 	ldw	r3,40(sp)
   862ac:	157fffc4 	addi	r21,r2,-1
   862b0:	1d41f316 	blt	r3,r21,86a80 <_dtoa_r+0x1180>
   862b4:	1d6bc83a 	sub	r21,r3,r21
   862b8:	d9c00617 	ldw	r7,24(sp)
   862bc:	3802aa16 	blt	r7,zero,86d68 <_dtoa_r+0x1468>
   862c0:	dd000817 	ldw	r20,32(sp)
   862c4:	d8800617 	ldw	r2,24(sp)
   862c8:	d8c00817 	ldw	r3,32(sp)
   862cc:	01400044 	movi	r5,1
   862d0:	e009883a 	mov	r4,fp
   862d4:	1887883a 	add	r3,r3,r2
   862d8:	d8c00815 	stw	r3,32(sp)
   862dc:	b0ad883a 	add	r22,r22,r2
   862e0:	00879bc0 	call	879bc <__i2b>
   862e4:	1023883a 	mov	r17,r2
   862e8:	a0000826 	beq	r20,zero,8630c <_dtoa_r+0xa0c>
   862ec:	0580070e 	bge	zero,r22,8630c <_dtoa_r+0xa0c>
   862f0:	a005883a 	mov	r2,r20
   862f4:	b500b916 	blt	r22,r20,865dc <_dtoa_r+0xcdc>
   862f8:	d9000817 	ldw	r4,32(sp)
   862fc:	a0a9c83a 	sub	r20,r20,r2
   86300:	b0adc83a 	sub	r22,r22,r2
   86304:	2089c83a 	sub	r4,r4,r2
   86308:	d9000815 	stw	r4,32(sp)
   8630c:	d9800a17 	ldw	r6,40(sp)
   86310:	0181810e 	bge	zero,r6,86918 <_dtoa_r+0x1018>
   86314:	d9c00b17 	ldw	r7,44(sp)
   86318:	3800b326 	beq	r7,zero,865e8 <_dtoa_r+0xce8>
   8631c:	a800b226 	beq	r21,zero,865e8 <_dtoa_r+0xce8>
   86320:	880b883a 	mov	r5,r17
   86324:	a80d883a 	mov	r6,r21
   86328:	e009883a 	mov	r4,fp
   8632c:	0087bf00 	call	87bf0 <__pow5mult>
   86330:	d9800917 	ldw	r6,36(sp)
   86334:	100b883a 	mov	r5,r2
   86338:	e009883a 	mov	r4,fp
   8633c:	1023883a 	mov	r17,r2
   86340:	00879f80 	call	879f8 <__multiply>
   86344:	1021883a 	mov	r16,r2
   86348:	d8800a17 	ldw	r2,40(sp)
   8634c:	d9400917 	ldw	r5,36(sp)
   86350:	e009883a 	mov	r4,fp
   86354:	1545c83a 	sub	r2,r2,r21
   86358:	d8800a15 	stw	r2,40(sp)
   8635c:	00876580 	call	87658 <_Bfree>
   86360:	d8c00a17 	ldw	r3,40(sp)
   86364:	18009f1e 	bne	r3,zero,865e4 <_dtoa_r+0xce4>
   86368:	05c00044 	movi	r23,1
   8636c:	e009883a 	mov	r4,fp
   86370:	b80b883a 	mov	r5,r23
   86374:	00879bc0 	call	879bc <__i2b>
   86378:	d9000d17 	ldw	r4,52(sp)
   8637c:	102b883a 	mov	r21,r2
   86380:	2000ce26 	beq	r4,zero,866bc <_dtoa_r+0xdbc>
   86384:	200d883a 	mov	r6,r4
   86388:	100b883a 	mov	r5,r2
   8638c:	e009883a 	mov	r4,fp
   86390:	0087bf00 	call	87bf0 <__pow5mult>
   86394:	d9800317 	ldw	r6,12(sp)
   86398:	102b883a 	mov	r21,r2
   8639c:	b981810e 	bge	r23,r6,869a4 <_dtoa_r+0x10a4>
   863a0:	0027883a 	mov	r19,zero
   863a4:	a8800417 	ldw	r2,16(r21)
   863a8:	05c00804 	movi	r23,32
   863ac:	10800104 	addi	r2,r2,4
   863b0:	1085883a 	add	r2,r2,r2
   863b4:	1085883a 	add	r2,r2,r2
   863b8:	a885883a 	add	r2,r21,r2
   863bc:	11000017 	ldw	r4,0(r2)
   863c0:	00878a40 	call	878a4 <__hi0bits>
   863c4:	b885c83a 	sub	r2,r23,r2
   863c8:	1585883a 	add	r2,r2,r22
   863cc:	108007cc 	andi	r2,r2,31
   863d0:	1000b326 	beq	r2,zero,866a0 <_dtoa_r+0xda0>
   863d4:	00c00804 	movi	r3,32
   863d8:	1887c83a 	sub	r3,r3,r2
   863dc:	01000104 	movi	r4,4
   863e0:	20c2cd0e 	bge	r4,r3,86f18 <_dtoa_r+0x1618>
   863e4:	00c00704 	movi	r3,28
   863e8:	1885c83a 	sub	r2,r3,r2
   863ec:	d8c00817 	ldw	r3,32(sp)
   863f0:	a0a9883a 	add	r20,r20,r2
   863f4:	b0ad883a 	add	r22,r22,r2
   863f8:	1887883a 	add	r3,r3,r2
   863fc:	d8c00815 	stw	r3,32(sp)
   86400:	d9800817 	ldw	r6,32(sp)
   86404:	0180040e 	bge	zero,r6,86418 <_dtoa_r+0xb18>
   86408:	800b883a 	mov	r5,r16
   8640c:	e009883a 	mov	r4,fp
   86410:	0087d300 	call	87d30 <__lshift>
   86414:	1021883a 	mov	r16,r2
   86418:	0580050e 	bge	zero,r22,86430 <_dtoa_r+0xb30>
   8641c:	a80b883a 	mov	r5,r21
   86420:	b00d883a 	mov	r6,r22
   86424:	e009883a 	mov	r4,fp
   86428:	0087d300 	call	87d30 <__lshift>
   8642c:	102b883a 	mov	r21,r2
   86430:	d9c00e17 	ldw	r7,56(sp)
   86434:	3801211e 	bne	r7,zero,868bc <_dtoa_r+0xfbc>
   86438:	d9800617 	ldw	r6,24(sp)
   8643c:	0181380e 	bge	zero,r6,86920 <_dtoa_r+0x1020>
   86440:	d8c00b17 	ldw	r3,44(sp)
   86444:	1800ab1e 	bne	r3,zero,866f4 <_dtoa_r+0xdf4>
   86448:	dc800717 	ldw	r18,28(sp)
   8644c:	dcc00617 	ldw	r19,24(sp)
   86450:	9029883a 	mov	r20,r18
   86454:	00000206 	br	86460 <_dtoa_r+0xb60>
   86458:	00876800 	call	87680 <__multadd>
   8645c:	1021883a 	mov	r16,r2
   86460:	a80b883a 	mov	r5,r21
   86464:	8009883a 	mov	r4,r16
   86468:	00857000 	call	85700 <quorem>
   8646c:	10800c04 	addi	r2,r2,48
   86470:	90800005 	stb	r2,0(r18)
   86474:	94800044 	addi	r18,r18,1
   86478:	9507c83a 	sub	r3,r18,r20
   8647c:	000f883a 	mov	r7,zero
   86480:	01800284 	movi	r6,10
   86484:	800b883a 	mov	r5,r16
   86488:	e009883a 	mov	r4,fp
   8648c:	1cfff216 	blt	r3,r19,86458 <rx_descriptor_end+0xfff863f8>
   86490:	1011883a 	mov	r8,r2
   86494:	d8800617 	ldw	r2,24(sp)
   86498:	0082370e 	bge	zero,r2,86d78 <_dtoa_r+0x1478>
   8649c:	d9000717 	ldw	r4,28(sp)
   864a0:	0025883a 	mov	r18,zero
   864a4:	20af883a 	add	r23,r4,r2
   864a8:	01800044 	movi	r6,1
   864ac:	800b883a 	mov	r5,r16
   864b0:	e009883a 	mov	r4,fp
   864b4:	da001715 	stw	r8,92(sp)
   864b8:	0087d300 	call	87d30 <__lshift>
   864bc:	a80b883a 	mov	r5,r21
   864c0:	1009883a 	mov	r4,r2
   864c4:	d8800915 	stw	r2,36(sp)
   864c8:	0087e780 	call	87e78 <__mcmp>
   864cc:	da001717 	ldw	r8,92(sp)
   864d0:	0081800e 	bge	zero,r2,86ad4 <_dtoa_r+0x11d4>
   864d4:	b93fffc3 	ldbu	r4,-1(r23)
   864d8:	b8bfffc4 	addi	r2,r23,-1
   864dc:	1007883a 	mov	r3,r2
   864e0:	01800e44 	movi	r6,57
   864e4:	d9c00717 	ldw	r7,28(sp)
   864e8:	00000506 	br	86500 <_dtoa_r+0xc00>
   864ec:	18ffffc4 	addi	r3,r3,-1
   864f0:	11c12326 	beq	r2,r7,86980 <_dtoa_r+0x1080>
   864f4:	19000003 	ldbu	r4,0(r3)
   864f8:	102f883a 	mov	r23,r2
   864fc:	10bfffc4 	addi	r2,r2,-1
   86500:	21403fcc 	andi	r5,r4,255
   86504:	2940201c 	xori	r5,r5,128
   86508:	297fe004 	addi	r5,r5,-128
   8650c:	29bff726 	beq	r5,r6,864ec <rx_descriptor_end+0xfff8648c>
   86510:	21000044 	addi	r4,r4,1
   86514:	11000005 	stb	r4,0(r2)
   86518:	a80b883a 	mov	r5,r21
   8651c:	e009883a 	mov	r4,fp
   86520:	00876580 	call	87658 <_Bfree>
   86524:	883ea026 	beq	r17,zero,85fa8 <rx_descriptor_end+0xfff85f48>
   86528:	90000426 	beq	r18,zero,8653c <_dtoa_r+0xc3c>
   8652c:	94400326 	beq	r18,r17,8653c <_dtoa_r+0xc3c>
   86530:	900b883a 	mov	r5,r18
   86534:	e009883a 	mov	r4,fp
   86538:	00876580 	call	87658 <_Bfree>
   8653c:	880b883a 	mov	r5,r17
   86540:	e009883a 	mov	r4,fp
   86544:	00876580 	call	87658 <_Bfree>
   86548:	003e9706 	br	85fa8 <rx_descriptor_end+0xfff85f48>
   8654c:	01800044 	movi	r6,1
   86550:	d9800e15 	stw	r6,56(sp)
   86554:	003d9606 	br	85bb0 <rx_descriptor_end+0xfff85b50>
   86558:	d8800817 	ldw	r2,32(sp)
   8655c:	d8c00517 	ldw	r3,20(sp)
   86560:	d8000d15 	stw	zero,52(sp)
   86564:	10c5c83a 	sub	r2,r2,r3
   86568:	00c9c83a 	sub	r4,zero,r3
   8656c:	d8800815 	stw	r2,32(sp)
   86570:	d9000a15 	stw	r4,40(sp)
   86574:	003d9706 	br	85bd4 <rx_descriptor_end+0xfff85b74>
   86578:	05adc83a 	sub	r22,zero,r22
   8657c:	dd800815 	stw	r22,32(sp)
   86580:	002d883a 	mov	r22,zero
   86584:	003d8e06 	br	85bc0 <rx_descriptor_end+0xfff85b60>
   86588:	d9000517 	ldw	r4,20(sp)
   8658c:	008dffc0 	call	8dffc <__floatsidf>
   86590:	100d883a 	mov	r6,r2
   86594:	180f883a 	mov	r7,r3
   86598:	a009883a 	mov	r4,r20
   8659c:	880b883a 	mov	r5,r17
   865a0:	008cd100 	call	8cd10 <__eqdf2>
   865a4:	103d7126 	beq	r2,zero,85b6c <rx_descriptor_end+0xfff85b0c>
   865a8:	d9c00517 	ldw	r7,20(sp)
   865ac:	39ffffc4 	addi	r7,r7,-1
   865b0:	d9c00515 	stw	r7,20(sp)
   865b4:	003d6d06 	br	85b6c <rx_descriptor_end+0xfff85b0c>
   865b8:	dd400a17 	ldw	r21,40(sp)
   865bc:	dd000817 	ldw	r20,32(sp)
   865c0:	0023883a 	mov	r17,zero
   865c4:	003f4806 	br	862e8 <rx_descriptor_end+0xfff86288>
   865c8:	10e3c83a 	sub	r17,r2,r3
   865cc:	9448983a 	sll	r4,r18,r17
   865d0:	003d3206 	br	85a9c <rx_descriptor_end+0xfff85a3c>
   865d4:	d8000e15 	stw	zero,56(sp)
   865d8:	003d7506 	br	85bb0 <rx_descriptor_end+0xfff85b50>
   865dc:	b005883a 	mov	r2,r22
   865e0:	003f4506 	br	862f8 <rx_descriptor_end+0xfff86298>
   865e4:	dc000915 	stw	r16,36(sp)
   865e8:	d9800a17 	ldw	r6,40(sp)
   865ec:	d9400917 	ldw	r5,36(sp)
   865f0:	e009883a 	mov	r4,fp
   865f4:	0087bf00 	call	87bf0 <__pow5mult>
   865f8:	1021883a 	mov	r16,r2
   865fc:	003f5a06 	br	86368 <rx_descriptor_end+0xfff86308>
   86600:	01c00044 	movi	r7,1
   86604:	d9c00b15 	stw	r7,44(sp)
   86608:	d8802217 	ldw	r2,136(sp)
   8660c:	0081280e 	bge	zero,r2,86ab0 <_dtoa_r+0x11b0>
   86610:	100d883a 	mov	r6,r2
   86614:	1021883a 	mov	r16,r2
   86618:	d8800c15 	stw	r2,48(sp)
   8661c:	d8800615 	stw	r2,24(sp)
   86620:	003d8806 	br	85c44 <rx_descriptor_end+0xfff85be4>
   86624:	d8800617 	ldw	r2,24(sp)
   86628:	00be9b16 	blt	zero,r2,86098 <rx_descriptor_end+0xfff86038>
   8662c:	10010f1e 	bne	r2,zero,86a6c <_dtoa_r+0x116c>
   86630:	880b883a 	mov	r5,r17
   86634:	000d883a 	mov	r6,zero
   86638:	01d00534 	movhi	r7,16404
   8663c:	8009883a 	mov	r4,r16
   86640:	008cf680 	call	8cf68 <__muldf3>
   86644:	900d883a 	mov	r6,r18
   86648:	980f883a 	mov	r7,r19
   8664c:	1009883a 	mov	r4,r2
   86650:	180b883a 	mov	r5,r3
   86654:	008cd980 	call	8cd98 <__gedf2>
   86658:	002b883a 	mov	r21,zero
   8665c:	0023883a 	mov	r17,zero
   86660:	1000bf16 	blt	r2,zero,86960 <_dtoa_r+0x1060>
   86664:	d9802217 	ldw	r6,136(sp)
   86668:	ddc00717 	ldw	r23,28(sp)
   8666c:	018c303a 	nor	r6,zero,r6
   86670:	d9800515 	stw	r6,20(sp)
   86674:	a80b883a 	mov	r5,r21
   86678:	e009883a 	mov	r4,fp
   8667c:	00876580 	call	87658 <_Bfree>
   86680:	883e4926 	beq	r17,zero,85fa8 <rx_descriptor_end+0xfff85f48>
   86684:	003fad06 	br	8653c <rx_descriptor_end+0xfff864dc>
   86688:	d9c01117 	ldw	r7,68(sp)
   8668c:	3801bc26 	beq	r7,zero,86d80 <_dtoa_r+0x1480>
   86690:	10810cc4 	addi	r2,r2,1075
   86694:	dd400a17 	ldw	r21,40(sp)
   86698:	dd000817 	ldw	r20,32(sp)
   8669c:	003f0a06 	br	862c8 <rx_descriptor_end+0xfff86268>
   866a0:	00800704 	movi	r2,28
   866a4:	d9000817 	ldw	r4,32(sp)
   866a8:	a0a9883a 	add	r20,r20,r2
   866ac:	b0ad883a 	add	r22,r22,r2
   866b0:	2089883a 	add	r4,r4,r2
   866b4:	d9000815 	stw	r4,32(sp)
   866b8:	003f5106 	br	86400 <rx_descriptor_end+0xfff863a0>
   866bc:	d8c00317 	ldw	r3,12(sp)
   866c0:	b8c1fc0e 	bge	r23,r3,86eb4 <_dtoa_r+0x15b4>
   866c4:	0027883a 	mov	r19,zero
   866c8:	b805883a 	mov	r2,r23
   866cc:	003f3e06 	br	863c8 <rx_descriptor_end+0xfff86368>
   866d0:	880b883a 	mov	r5,r17
   866d4:	e009883a 	mov	r4,fp
   866d8:	000f883a 	mov	r7,zero
   866dc:	01800284 	movi	r6,10
   866e0:	00876800 	call	87680 <__multadd>
   866e4:	d9000c17 	ldw	r4,48(sp)
   866e8:	1023883a 	mov	r17,r2
   866ec:	0102040e 	bge	zero,r4,86f00 <_dtoa_r+0x1600>
   866f0:	d9000615 	stw	r4,24(sp)
   866f4:	0500050e 	bge	zero,r20,8670c <_dtoa_r+0xe0c>
   866f8:	880b883a 	mov	r5,r17
   866fc:	a00d883a 	mov	r6,r20
   86700:	e009883a 	mov	r4,fp
   86704:	0087d300 	call	87d30 <__lshift>
   86708:	1023883a 	mov	r17,r2
   8670c:	9801241e 	bne	r19,zero,86ba0 <_dtoa_r+0x12a0>
   86710:	8829883a 	mov	r20,r17
   86714:	d9000617 	ldw	r4,24(sp)
   86718:	dcc00717 	ldw	r19,28(sp)
   8671c:	9480004c 	andi	r18,r18,1
   86720:	20bfffc4 	addi	r2,r4,-1
   86724:	9885883a 	add	r2,r19,r2
   86728:	d8800415 	stw	r2,16(sp)
   8672c:	dc800615 	stw	r18,24(sp)
   86730:	a80b883a 	mov	r5,r21
   86734:	8009883a 	mov	r4,r16
   86738:	00857000 	call	85700 <quorem>
   8673c:	880b883a 	mov	r5,r17
   86740:	8009883a 	mov	r4,r16
   86744:	102f883a 	mov	r23,r2
   86748:	0087e780 	call	87e78 <__mcmp>
   8674c:	a80b883a 	mov	r5,r21
   86750:	a00d883a 	mov	r6,r20
   86754:	e009883a 	mov	r4,fp
   86758:	102d883a 	mov	r22,r2
   8675c:	0087ed80 	call	87ed8 <__mdiff>
   86760:	1007883a 	mov	r3,r2
   86764:	10800317 	ldw	r2,12(r2)
   86768:	bc800c04 	addi	r18,r23,48
   8676c:	180b883a 	mov	r5,r3
   86770:	10004e1e 	bne	r2,zero,868ac <_dtoa_r+0xfac>
   86774:	8009883a 	mov	r4,r16
   86778:	d8c01615 	stw	r3,88(sp)
   8677c:	0087e780 	call	87e78 <__mcmp>
   86780:	d8c01617 	ldw	r3,88(sp)
   86784:	e009883a 	mov	r4,fp
   86788:	d8801615 	stw	r2,88(sp)
   8678c:	180b883a 	mov	r5,r3
   86790:	00876580 	call	87658 <_Bfree>
   86794:	d8801617 	ldw	r2,88(sp)
   86798:	1000041e 	bne	r2,zero,867ac <_dtoa_r+0xeac>
   8679c:	d9800317 	ldw	r6,12(sp)
   867a0:	3000021e 	bne	r6,zero,867ac <_dtoa_r+0xeac>
   867a4:	d8c00617 	ldw	r3,24(sp)
   867a8:	18003726 	beq	r3,zero,86888 <_dtoa_r+0xf88>
   867ac:	b0002016 	blt	r22,zero,86830 <_dtoa_r+0xf30>
   867b0:	b000041e 	bne	r22,zero,867c4 <_dtoa_r+0xec4>
   867b4:	d9000317 	ldw	r4,12(sp)
   867b8:	2000021e 	bne	r4,zero,867c4 <_dtoa_r+0xec4>
   867bc:	d8c00617 	ldw	r3,24(sp)
   867c0:	18001b26 	beq	r3,zero,86830 <_dtoa_r+0xf30>
   867c4:	00810716 	blt	zero,r2,86be4 <_dtoa_r+0x12e4>
   867c8:	d8c00417 	ldw	r3,16(sp)
   867cc:	9d800044 	addi	r22,r19,1
   867d0:	9c800005 	stb	r18,0(r19)
   867d4:	b02f883a 	mov	r23,r22
   867d8:	98c10626 	beq	r19,r3,86bf4 <_dtoa_r+0x12f4>
   867dc:	800b883a 	mov	r5,r16
   867e0:	000f883a 	mov	r7,zero
   867e4:	01800284 	movi	r6,10
   867e8:	e009883a 	mov	r4,fp
   867ec:	00876800 	call	87680 <__multadd>
   867f0:	1021883a 	mov	r16,r2
   867f4:	000f883a 	mov	r7,zero
   867f8:	01800284 	movi	r6,10
   867fc:	880b883a 	mov	r5,r17
   86800:	e009883a 	mov	r4,fp
   86804:	8d002526 	beq	r17,r20,8689c <_dtoa_r+0xf9c>
   86808:	00876800 	call	87680 <__multadd>
   8680c:	a00b883a 	mov	r5,r20
   86810:	000f883a 	mov	r7,zero
   86814:	01800284 	movi	r6,10
   86818:	e009883a 	mov	r4,fp
   8681c:	1023883a 	mov	r17,r2
   86820:	00876800 	call	87680 <__multadd>
   86824:	1029883a 	mov	r20,r2
   86828:	b027883a 	mov	r19,r22
   8682c:	003fc006 	br	86730 <rx_descriptor_end+0xfff866d0>
   86830:	9011883a 	mov	r8,r18
   86834:	00800e0e 	bge	zero,r2,86870 <_dtoa_r+0xf70>
   86838:	800b883a 	mov	r5,r16
   8683c:	01800044 	movi	r6,1
   86840:	e009883a 	mov	r4,fp
   86844:	da001715 	stw	r8,92(sp)
   86848:	0087d300 	call	87d30 <__lshift>
   8684c:	a80b883a 	mov	r5,r21
   86850:	1009883a 	mov	r4,r2
   86854:	1021883a 	mov	r16,r2
   86858:	0087e780 	call	87e78 <__mcmp>
   8685c:	da001717 	ldw	r8,92(sp)
   86860:	0081960e 	bge	zero,r2,86ebc <_dtoa_r+0x15bc>
   86864:	00800e44 	movi	r2,57
   86868:	40817026 	beq	r8,r2,86e2c <_dtoa_r+0x152c>
   8686c:	ba000c44 	addi	r8,r23,49
   86870:	8825883a 	mov	r18,r17
   86874:	9dc00044 	addi	r23,r19,1
   86878:	9a000005 	stb	r8,0(r19)
   8687c:	a023883a 	mov	r17,r20
   86880:	dc000915 	stw	r16,36(sp)
   86884:	003f2406 	br	86518 <rx_descriptor_end+0xfff864b8>
   86888:	00800e44 	movi	r2,57
   8688c:	9011883a 	mov	r8,r18
   86890:	90816626 	beq	r18,r2,86e2c <_dtoa_r+0x152c>
   86894:	05bff516 	blt	zero,r22,8686c <rx_descriptor_end+0xfff8680c>
   86898:	003ff506 	br	86870 <rx_descriptor_end+0xfff86810>
   8689c:	00876800 	call	87680 <__multadd>
   868a0:	1023883a 	mov	r17,r2
   868a4:	1029883a 	mov	r20,r2
   868a8:	003fdf06 	br	86828 <rx_descriptor_end+0xfff867c8>
   868ac:	e009883a 	mov	r4,fp
   868b0:	00876580 	call	87658 <_Bfree>
   868b4:	00800044 	movi	r2,1
   868b8:	003fbc06 	br	867ac <rx_descriptor_end+0xfff8674c>
   868bc:	a80b883a 	mov	r5,r21
   868c0:	8009883a 	mov	r4,r16
   868c4:	0087e780 	call	87e78 <__mcmp>
   868c8:	103edb0e 	bge	r2,zero,86438 <rx_descriptor_end+0xfff863d8>
   868cc:	800b883a 	mov	r5,r16
   868d0:	000f883a 	mov	r7,zero
   868d4:	01800284 	movi	r6,10
   868d8:	e009883a 	mov	r4,fp
   868dc:	00876800 	call	87680 <__multadd>
   868e0:	1021883a 	mov	r16,r2
   868e4:	d8800517 	ldw	r2,20(sp)
   868e8:	d8c00b17 	ldw	r3,44(sp)
   868ec:	10bfffc4 	addi	r2,r2,-1
   868f0:	d8800515 	stw	r2,20(sp)
   868f4:	183f761e 	bne	r3,zero,866d0 <rx_descriptor_end+0xfff86670>
   868f8:	d9000c17 	ldw	r4,48(sp)
   868fc:	0101730e 	bge	zero,r4,86ecc <_dtoa_r+0x15cc>
   86900:	d9000615 	stw	r4,24(sp)
   86904:	003ed006 	br	86448 <rx_descriptor_end+0xfff863e8>
   86908:	00800084 	movi	r2,2
   8690c:	3081861e 	bne	r6,r2,86f28 <_dtoa_r+0x1628>
   86910:	d8000b15 	stw	zero,44(sp)
   86914:	003f3c06 	br	86608 <rx_descriptor_end+0xfff865a8>
   86918:	dc000917 	ldw	r16,36(sp)
   8691c:	003e9206 	br	86368 <rx_descriptor_end+0xfff86308>
   86920:	d9c00317 	ldw	r7,12(sp)
   86924:	00800084 	movi	r2,2
   86928:	11fec50e 	bge	r2,r7,86440 <rx_descriptor_end+0xfff863e0>
   8692c:	d9000617 	ldw	r4,24(sp)
   86930:	20013c1e 	bne	r4,zero,86e24 <_dtoa_r+0x1524>
   86934:	a80b883a 	mov	r5,r21
   86938:	000f883a 	mov	r7,zero
   8693c:	01800144 	movi	r6,5
   86940:	e009883a 	mov	r4,fp
   86944:	00876800 	call	87680 <__multadd>
   86948:	100b883a 	mov	r5,r2
   8694c:	8009883a 	mov	r4,r16
   86950:	102b883a 	mov	r21,r2
   86954:	0087e780 	call	87e78 <__mcmp>
   86958:	dc000915 	stw	r16,36(sp)
   8695c:	00bf410e 	bge	zero,r2,86664 <rx_descriptor_end+0xfff86604>
   86960:	d9c00717 	ldw	r7,28(sp)
   86964:	00800c44 	movi	r2,49
   86968:	38800005 	stb	r2,0(r7)
   8696c:	d8800517 	ldw	r2,20(sp)
   86970:	3dc00044 	addi	r23,r7,1
   86974:	10800044 	addi	r2,r2,1
   86978:	d8800515 	stw	r2,20(sp)
   8697c:	003f3d06 	br	86674 <rx_descriptor_end+0xfff86614>
   86980:	d9800517 	ldw	r6,20(sp)
   86984:	d9c00717 	ldw	r7,28(sp)
   86988:	00800c44 	movi	r2,49
   8698c:	31800044 	addi	r6,r6,1
   86990:	d9800515 	stw	r6,20(sp)
   86994:	38800005 	stb	r2,0(r7)
   86998:	003edf06 	br	86518 <rx_descriptor_end+0xfff864b8>
   8699c:	d8000b15 	stw	zero,44(sp)
   869a0:	003c9f06 	br	85c20 <rx_descriptor_end+0xfff85bc0>
   869a4:	903e7e1e 	bne	r18,zero,863a0 <rx_descriptor_end+0xfff86340>
   869a8:	00800434 	movhi	r2,16
   869ac:	10bfffc4 	addi	r2,r2,-1
   869b0:	9884703a 	and	r2,r19,r2
   869b4:	1000ea1e 	bne	r2,zero,86d60 <_dtoa_r+0x1460>
   869b8:	9cdffc2c 	andhi	r19,r19,32752
   869bc:	9800e826 	beq	r19,zero,86d60 <_dtoa_r+0x1460>
   869c0:	d9c00817 	ldw	r7,32(sp)
   869c4:	b5800044 	addi	r22,r22,1
   869c8:	04c00044 	movi	r19,1
   869cc:	39c00044 	addi	r7,r7,1
   869d0:	d9c00815 	stw	r7,32(sp)
   869d4:	d8800d17 	ldw	r2,52(sp)
   869d8:	103e721e 	bne	r2,zero,863a4 <rx_descriptor_end+0xfff86344>
   869dc:	00800044 	movi	r2,1
   869e0:	003e7906 	br	863c8 <rx_descriptor_end+0xfff86368>
   869e4:	8009883a 	mov	r4,r16
   869e8:	008dffc0 	call	8dffc <__floatsidf>
   869ec:	d9800f17 	ldw	r6,60(sp)
   869f0:	d9c01017 	ldw	r7,64(sp)
   869f4:	1009883a 	mov	r4,r2
   869f8:	180b883a 	mov	r5,r3
   869fc:	008cf680 	call	8cf68 <__muldf3>
   86a00:	000d883a 	mov	r6,zero
   86a04:	01d00734 	movhi	r7,16412
   86a08:	1009883a 	mov	r4,r2
   86a0c:	180b883a 	mov	r5,r3
   86a10:	008bb7c0 	call	8bb7c <__adddf3>
   86a14:	047f3034 	movhi	r17,64704
   86a18:	1021883a 	mov	r16,r2
   86a1c:	1c63883a 	add	r17,r3,r17
   86a20:	d9000f17 	ldw	r4,60(sp)
   86a24:	d9401017 	ldw	r5,64(sp)
   86a28:	000d883a 	mov	r6,zero
   86a2c:	01d00534 	movhi	r7,16404
   86a30:	008d6800 	call	8d680 <__subdf3>
   86a34:	800d883a 	mov	r6,r16
   86a38:	880f883a 	mov	r7,r17
   86a3c:	1009883a 	mov	r4,r2
   86a40:	180b883a 	mov	r5,r3
   86a44:	102b883a 	mov	r21,r2
   86a48:	1829883a 	mov	r20,r3
   86a4c:	008cd980 	call	8cd98 <__gedf2>
   86a50:	00806c16 	blt	zero,r2,86c04 <_dtoa_r+0x1304>
   86a54:	89e0003c 	xorhi	r7,r17,32768
   86a58:	800d883a 	mov	r6,r16
   86a5c:	a809883a 	mov	r4,r21
   86a60:	a00b883a 	mov	r5,r20
   86a64:	008ce740 	call	8ce74 <__ledf2>
   86a68:	103d7e0e 	bge	r2,zero,86064 <rx_descriptor_end+0xfff86004>
   86a6c:	002b883a 	mov	r21,zero
   86a70:	0023883a 	mov	r17,zero
   86a74:	003efb06 	br	86664 <rx_descriptor_end+0xfff86604>
   86a78:	d8800717 	ldw	r2,28(sp)
   86a7c:	003bd006 	br	859c0 <rx_descriptor_end+0xfff85960>
   86a80:	d9000a17 	ldw	r4,40(sp)
   86a84:	d9800d17 	ldw	r6,52(sp)
   86a88:	dd400a15 	stw	r21,40(sp)
   86a8c:	a905c83a 	sub	r2,r21,r4
   86a90:	308d883a 	add	r6,r6,r2
   86a94:	d9800d15 	stw	r6,52(sp)
   86a98:	002b883a 	mov	r21,zero
   86a9c:	003e0606 	br	862b8 <rx_descriptor_end+0xfff86258>
   86aa0:	9023883a 	mov	r17,r18
   86aa4:	9829883a 	mov	r20,r19
   86aa8:	04000084 	movi	r16,2
   86aac:	003c9206 	br	85cf8 <rx_descriptor_end+0xfff85c98>
   86ab0:	04000044 	movi	r16,1
   86ab4:	dc000c15 	stw	r16,48(sp)
   86ab8:	dc000615 	stw	r16,24(sp)
   86abc:	dc002215 	stw	r16,136(sp)
   86ac0:	e0001115 	stw	zero,68(fp)
   86ac4:	000b883a 	mov	r5,zero
   86ac8:	003c6906 	br	85c70 <rx_descriptor_end+0xfff85c10>
   86acc:	3021883a 	mov	r16,r6
   86ad0:	003ffb06 	br	86ac0 <rx_descriptor_end+0xfff86a60>
   86ad4:	1000021e 	bne	r2,zero,86ae0 <_dtoa_r+0x11e0>
   86ad8:	4200004c 	andi	r8,r8,1
   86adc:	403e7d1e 	bne	r8,zero,864d4 <rx_descriptor_end+0xfff86474>
   86ae0:	01000c04 	movi	r4,48
   86ae4:	00000106 	br	86aec <_dtoa_r+0x11ec>
   86ae8:	102f883a 	mov	r23,r2
   86aec:	b8bfffc4 	addi	r2,r23,-1
   86af0:	10c00007 	ldb	r3,0(r2)
   86af4:	193ffc26 	beq	r3,r4,86ae8 <rx_descriptor_end+0xfff86a88>
   86af8:	003e8706 	br	86518 <rx_descriptor_end+0xfff864b8>
   86afc:	d8800517 	ldw	r2,20(sp)
   86b00:	00a3c83a 	sub	r17,zero,r2
   86b04:	8800a426 	beq	r17,zero,86d98 <_dtoa_r+0x1498>
   86b08:	888003cc 	andi	r2,r17,15
   86b0c:	100490fa 	slli	r2,r2,3
   86b10:	00c00274 	movhi	r3,9
   86b14:	18c82104 	addi	r3,r3,8324
   86b18:	1885883a 	add	r2,r3,r2
   86b1c:	11800017 	ldw	r6,0(r2)
   86b20:	11c00117 	ldw	r7,4(r2)
   86b24:	9009883a 	mov	r4,r18
   86b28:	980b883a 	mov	r5,r19
   86b2c:	8823d13a 	srai	r17,r17,4
   86b30:	008cf680 	call	8cf68 <__muldf3>
   86b34:	d8800f15 	stw	r2,60(sp)
   86b38:	d8c01015 	stw	r3,64(sp)
   86b3c:	8800e826 	beq	r17,zero,86ee0 <_dtoa_r+0x15e0>
   86b40:	05000274 	movhi	r20,9
   86b44:	a5081704 	addi	r20,r20,8284
   86b48:	04000084 	movi	r16,2
   86b4c:	8980004c 	andi	r6,r17,1
   86b50:	1009883a 	mov	r4,r2
   86b54:	8823d07a 	srai	r17,r17,1
   86b58:	180b883a 	mov	r5,r3
   86b5c:	30000426 	beq	r6,zero,86b70 <_dtoa_r+0x1270>
   86b60:	a1800017 	ldw	r6,0(r20)
   86b64:	a1c00117 	ldw	r7,4(r20)
   86b68:	84000044 	addi	r16,r16,1
   86b6c:	008cf680 	call	8cf68 <__muldf3>
   86b70:	a5000204 	addi	r20,r20,8
   86b74:	883ff51e 	bne	r17,zero,86b4c <rx_descriptor_end+0xfff86aec>
   86b78:	d8800f15 	stw	r2,60(sp)
   86b7c:	d8c01015 	stw	r3,64(sp)
   86b80:	003c7606 	br	85d5c <rx_descriptor_end+0xfff85cfc>
   86b84:	00c00c04 	movi	r3,48
   86b88:	10c00005 	stb	r3,0(r2)
   86b8c:	d8c00517 	ldw	r3,20(sp)
   86b90:	bd3fffc3 	ldbu	r20,-1(r23)
   86b94:	18c00044 	addi	r3,r3,1
   86b98:	d8c00515 	stw	r3,20(sp)
   86b9c:	003db906 	br	86284 <rx_descriptor_end+0xfff86224>
   86ba0:	89400117 	ldw	r5,4(r17)
   86ba4:	e009883a 	mov	r4,fp
   86ba8:	00875b00 	call	875b0 <_Balloc>
   86bac:	89800417 	ldw	r6,16(r17)
   86bb0:	89400304 	addi	r5,r17,12
   86bb4:	11000304 	addi	r4,r2,12
   86bb8:	31800084 	addi	r6,r6,2
   86bbc:	318d883a 	add	r6,r6,r6
   86bc0:	318d883a 	add	r6,r6,r6
   86bc4:	1027883a 	mov	r19,r2
   86bc8:	00874680 	call	87468 <memcpy>
   86bcc:	01800044 	movi	r6,1
   86bd0:	980b883a 	mov	r5,r19
   86bd4:	e009883a 	mov	r4,fp
   86bd8:	0087d300 	call	87d30 <__lshift>
   86bdc:	1029883a 	mov	r20,r2
   86be0:	003ecc06 	br	86714 <rx_descriptor_end+0xfff866b4>
   86be4:	00800e44 	movi	r2,57
   86be8:	90809026 	beq	r18,r2,86e2c <_dtoa_r+0x152c>
   86bec:	92000044 	addi	r8,r18,1
   86bf0:	003f1f06 	br	86870 <rx_descriptor_end+0xfff86810>
   86bf4:	9011883a 	mov	r8,r18
   86bf8:	8825883a 	mov	r18,r17
   86bfc:	a023883a 	mov	r17,r20
   86c00:	003e2906 	br	864a8 <rx_descriptor_end+0xfff86448>
   86c04:	002b883a 	mov	r21,zero
   86c08:	0023883a 	mov	r17,zero
   86c0c:	003f5406 	br	86960 <rx_descriptor_end+0xfff86900>
   86c10:	61bfffc4 	addi	r6,r12,-1
   86c14:	300490fa 	slli	r2,r6,3
   86c18:	00c00274 	movhi	r3,9
   86c1c:	18c82104 	addi	r3,r3,8324
   86c20:	1885883a 	add	r2,r3,r2
   86c24:	11000017 	ldw	r4,0(r2)
   86c28:	11400117 	ldw	r5,4(r2)
   86c2c:	d8800717 	ldw	r2,28(sp)
   86c30:	880f883a 	mov	r7,r17
   86c34:	d9801215 	stw	r6,72(sp)
   86c38:	800d883a 	mov	r6,r16
   86c3c:	db001615 	stw	r12,88(sp)
   86c40:	15c00044 	addi	r23,r2,1
   86c44:	008cf680 	call	8cf68 <__muldf3>
   86c48:	d9401017 	ldw	r5,64(sp)
   86c4c:	d9000f17 	ldw	r4,60(sp)
   86c50:	d8c01515 	stw	r3,84(sp)
   86c54:	d8801415 	stw	r2,80(sp)
   86c58:	008df7c0 	call	8df7c <__fixdfsi>
   86c5c:	1009883a 	mov	r4,r2
   86c60:	1021883a 	mov	r16,r2
   86c64:	008dffc0 	call	8dffc <__floatsidf>
   86c68:	d9000f17 	ldw	r4,60(sp)
   86c6c:	d9401017 	ldw	r5,64(sp)
   86c70:	100d883a 	mov	r6,r2
   86c74:	180f883a 	mov	r7,r3
   86c78:	008d6800 	call	8d680 <__subdf3>
   86c7c:	1829883a 	mov	r20,r3
   86c80:	d8c00717 	ldw	r3,28(sp)
   86c84:	84000c04 	addi	r16,r16,48
   86c88:	1023883a 	mov	r17,r2
   86c8c:	1c000005 	stb	r16,0(r3)
   86c90:	db001617 	ldw	r12,88(sp)
   86c94:	00800044 	movi	r2,1
   86c98:	60802226 	beq	r12,r2,86d24 <_dtoa_r+0x1424>
   86c9c:	d9c00717 	ldw	r7,28(sp)
   86ca0:	8805883a 	mov	r2,r17
   86ca4:	b82b883a 	mov	r21,r23
   86ca8:	3b19883a 	add	r12,r7,r12
   86cac:	6023883a 	mov	r17,r12
   86cb0:	a007883a 	mov	r3,r20
   86cb4:	dc800f15 	stw	r18,60(sp)
   86cb8:	000d883a 	mov	r6,zero
   86cbc:	01d00934 	movhi	r7,16420
   86cc0:	1009883a 	mov	r4,r2
   86cc4:	180b883a 	mov	r5,r3
   86cc8:	008cf680 	call	8cf68 <__muldf3>
   86ccc:	180b883a 	mov	r5,r3
   86cd0:	1009883a 	mov	r4,r2
   86cd4:	1829883a 	mov	r20,r3
   86cd8:	1025883a 	mov	r18,r2
   86cdc:	008df7c0 	call	8df7c <__fixdfsi>
   86ce0:	1009883a 	mov	r4,r2
   86ce4:	1021883a 	mov	r16,r2
   86ce8:	008dffc0 	call	8dffc <__floatsidf>
   86cec:	100d883a 	mov	r6,r2
   86cf0:	180f883a 	mov	r7,r3
   86cf4:	9009883a 	mov	r4,r18
   86cf8:	a00b883a 	mov	r5,r20
   86cfc:	84000c04 	addi	r16,r16,48
   86d00:	008d6800 	call	8d680 <__subdf3>
   86d04:	ad400044 	addi	r21,r21,1
   86d08:	ac3fffc5 	stb	r16,-1(r21)
   86d0c:	ac7fea1e 	bne	r21,r17,86cb8 <rx_descriptor_end+0xfff86c58>
   86d10:	1023883a 	mov	r17,r2
   86d14:	d8801217 	ldw	r2,72(sp)
   86d18:	dc800f17 	ldw	r18,60(sp)
   86d1c:	1829883a 	mov	r20,r3
   86d20:	b8af883a 	add	r23,r23,r2
   86d24:	d9001417 	ldw	r4,80(sp)
   86d28:	d9401517 	ldw	r5,84(sp)
   86d2c:	000d883a 	mov	r6,zero
   86d30:	01cff834 	movhi	r7,16352
   86d34:	008bb7c0 	call	8bb7c <__adddf3>
   86d38:	880d883a 	mov	r6,r17
   86d3c:	a00f883a 	mov	r7,r20
   86d40:	1009883a 	mov	r4,r2
   86d44:	180b883a 	mov	r5,r3
   86d48:	008ce740 	call	8ce74 <__ledf2>
   86d4c:	10003e0e 	bge	r2,zero,86e48 <_dtoa_r+0x1548>
   86d50:	d9001317 	ldw	r4,76(sp)
   86d54:	bd3fffc3 	ldbu	r20,-1(r23)
   86d58:	d9000515 	stw	r4,20(sp)
   86d5c:	003d3b06 	br	8624c <rx_descriptor_end+0xfff861ec>
   86d60:	0027883a 	mov	r19,zero
   86d64:	003f1b06 	br	869d4 <rx_descriptor_end+0xfff86974>
   86d68:	d8800817 	ldw	r2,32(sp)
   86d6c:	11e9c83a 	sub	r20,r2,r7
   86d70:	0005883a 	mov	r2,zero
   86d74:	003d5406 	br	862c8 <rx_descriptor_end+0xfff86268>
   86d78:	00800044 	movi	r2,1
   86d7c:	003dc706 	br	8649c <rx_descriptor_end+0xfff8643c>
   86d80:	d8c00217 	ldw	r3,8(sp)
   86d84:	00800d84 	movi	r2,54
   86d88:	dd400a17 	ldw	r21,40(sp)
   86d8c:	10c5c83a 	sub	r2,r2,r3
   86d90:	dd000817 	ldw	r20,32(sp)
   86d94:	003d4c06 	br	862c8 <rx_descriptor_end+0xfff86268>
   86d98:	dc800f15 	stw	r18,60(sp)
   86d9c:	dcc01015 	stw	r19,64(sp)
   86da0:	04000084 	movi	r16,2
   86da4:	003bed06 	br	85d5c <rx_descriptor_end+0xfff85cfc>
   86da8:	d9000617 	ldw	r4,24(sp)
   86dac:	203f0d26 	beq	r4,zero,869e4 <rx_descriptor_end+0xfff86984>
   86db0:	d9800c17 	ldw	r6,48(sp)
   86db4:	01bcab0e 	bge	zero,r6,86064 <rx_descriptor_end+0xfff86004>
   86db8:	d9401017 	ldw	r5,64(sp)
   86dbc:	d9000f17 	ldw	r4,60(sp)
   86dc0:	000d883a 	mov	r6,zero
   86dc4:	01d00934 	movhi	r7,16420
   86dc8:	008cf680 	call	8cf68 <__muldf3>
   86dcc:	81000044 	addi	r4,r16,1
   86dd0:	d8800f15 	stw	r2,60(sp)
   86dd4:	d8c01015 	stw	r3,64(sp)
   86dd8:	008dffc0 	call	8dffc <__floatsidf>
   86ddc:	d9800f17 	ldw	r6,60(sp)
   86de0:	d9c01017 	ldw	r7,64(sp)
   86de4:	1009883a 	mov	r4,r2
   86de8:	180b883a 	mov	r5,r3
   86dec:	008cf680 	call	8cf68 <__muldf3>
   86df0:	01d00734 	movhi	r7,16412
   86df4:	000d883a 	mov	r6,zero
   86df8:	1009883a 	mov	r4,r2
   86dfc:	180b883a 	mov	r5,r3
   86e00:	008bb7c0 	call	8bb7c <__adddf3>
   86e04:	d9c00517 	ldw	r7,20(sp)
   86e08:	047f3034 	movhi	r17,64704
   86e0c:	1021883a 	mov	r16,r2
   86e10:	39ffffc4 	addi	r7,r7,-1
   86e14:	d9c01315 	stw	r7,76(sp)
   86e18:	1c63883a 	add	r17,r3,r17
   86e1c:	db000c17 	ldw	r12,48(sp)
   86e20:	003bea06 	br	85dcc <rx_descriptor_end+0xfff85d6c>
   86e24:	dc000915 	stw	r16,36(sp)
   86e28:	003e0e06 	br	86664 <rx_descriptor_end+0xfff86604>
   86e2c:	01000e44 	movi	r4,57
   86e30:	8825883a 	mov	r18,r17
   86e34:	9dc00044 	addi	r23,r19,1
   86e38:	99000005 	stb	r4,0(r19)
   86e3c:	a023883a 	mov	r17,r20
   86e40:	dc000915 	stw	r16,36(sp)
   86e44:	003da406 	br	864d8 <rx_descriptor_end+0xfff86478>
   86e48:	d9801417 	ldw	r6,80(sp)
   86e4c:	d9c01517 	ldw	r7,84(sp)
   86e50:	0009883a 	mov	r4,zero
   86e54:	014ff834 	movhi	r5,16352
   86e58:	008d6800 	call	8d680 <__subdf3>
   86e5c:	880d883a 	mov	r6,r17
   86e60:	a00f883a 	mov	r7,r20
   86e64:	1009883a 	mov	r4,r2
   86e68:	180b883a 	mov	r5,r3
   86e6c:	008cd980 	call	8cd98 <__gedf2>
   86e70:	00bc7c0e 	bge	zero,r2,86064 <rx_descriptor_end+0xfff86004>
   86e74:	01000c04 	movi	r4,48
   86e78:	00000106 	br	86e80 <_dtoa_r+0x1580>
   86e7c:	102f883a 	mov	r23,r2
   86e80:	b8bfffc4 	addi	r2,r23,-1
   86e84:	10c00007 	ldb	r3,0(r2)
   86e88:	193ffc26 	beq	r3,r4,86e7c <rx_descriptor_end+0xfff86e1c>
   86e8c:	d9801317 	ldw	r6,76(sp)
   86e90:	d9800515 	stw	r6,20(sp)
   86e94:	003c4406 	br	85fa8 <rx_descriptor_end+0xfff85f48>
   86e98:	d9801317 	ldw	r6,76(sp)
   86e9c:	d9800515 	stw	r6,20(sp)
   86ea0:	003cea06 	br	8624c <rx_descriptor_end+0xfff861ec>
   86ea4:	dd800f17 	ldw	r22,60(sp)
   86ea8:	dcc01017 	ldw	r19,64(sp)
   86eac:	dc801217 	ldw	r18,72(sp)
   86eb0:	003c6c06 	br	86064 <rx_descriptor_end+0xfff86004>
   86eb4:	903e031e 	bne	r18,zero,866c4 <rx_descriptor_end+0xfff86664>
   86eb8:	003ebb06 	br	869a8 <rx_descriptor_end+0xfff86948>
   86ebc:	103e6c1e 	bne	r2,zero,86870 <rx_descriptor_end+0xfff86810>
   86ec0:	4080004c 	andi	r2,r8,1
   86ec4:	103e6a26 	beq	r2,zero,86870 <rx_descriptor_end+0xfff86810>
   86ec8:	003e6606 	br	86864 <rx_descriptor_end+0xfff86804>
   86ecc:	d8c00317 	ldw	r3,12(sp)
   86ed0:	00800084 	movi	r2,2
   86ed4:	10c02916 	blt	r2,r3,86f7c <_dtoa_r+0x167c>
   86ed8:	d9000c17 	ldw	r4,48(sp)
   86edc:	003e8806 	br	86900 <rx_descriptor_end+0xfff868a0>
   86ee0:	04000084 	movi	r16,2
   86ee4:	003b9d06 	br	85d5c <rx_descriptor_end+0xfff85cfc>
   86ee8:	d9001317 	ldw	r4,76(sp)
   86eec:	d9000515 	stw	r4,20(sp)
   86ef0:	003cd606 	br	8624c <rx_descriptor_end+0xfff861ec>
   86ef4:	d8801317 	ldw	r2,76(sp)
   86ef8:	d8800515 	stw	r2,20(sp)
   86efc:	003c2a06 	br	85fa8 <rx_descriptor_end+0xfff85f48>
   86f00:	d9800317 	ldw	r6,12(sp)
   86f04:	00800084 	movi	r2,2
   86f08:	11801516 	blt	r2,r6,86f60 <_dtoa_r+0x1660>
   86f0c:	d9c00c17 	ldw	r7,48(sp)
   86f10:	d9c00615 	stw	r7,24(sp)
   86f14:	003df706 	br	866f4 <rx_descriptor_end+0xfff86694>
   86f18:	193d3926 	beq	r3,r4,86400 <rx_descriptor_end+0xfff863a0>
   86f1c:	00c00f04 	movi	r3,60
   86f20:	1885c83a 	sub	r2,r3,r2
   86f24:	003ddf06 	br	866a4 <rx_descriptor_end+0xfff86644>
   86f28:	e009883a 	mov	r4,fp
   86f2c:	e0001115 	stw	zero,68(fp)
   86f30:	000b883a 	mov	r5,zero
   86f34:	00875b00 	call	875b0 <_Balloc>
   86f38:	d8800715 	stw	r2,28(sp)
   86f3c:	d8c00717 	ldw	r3,28(sp)
   86f40:	00bfffc4 	movi	r2,-1
   86f44:	01000044 	movi	r4,1
   86f48:	d8800c15 	stw	r2,48(sp)
   86f4c:	e0c01015 	stw	r3,64(fp)
   86f50:	d9000b15 	stw	r4,44(sp)
   86f54:	d8800615 	stw	r2,24(sp)
   86f58:	d8002215 	stw	zero,136(sp)
   86f5c:	003c4106 	br	86064 <rx_descriptor_end+0xfff86004>
   86f60:	d8c00c17 	ldw	r3,48(sp)
   86f64:	d8c00615 	stw	r3,24(sp)
   86f68:	003e7006 	br	8692c <rx_descriptor_end+0xfff868cc>
   86f6c:	04400044 	movi	r17,1
   86f70:	003b2006 	br	85bf4 <rx_descriptor_end+0xfff85b94>
   86f74:	000b883a 	mov	r5,zero
   86f78:	003b3d06 	br	85c70 <rx_descriptor_end+0xfff85c10>
   86f7c:	d8800c17 	ldw	r2,48(sp)
   86f80:	d8800615 	stw	r2,24(sp)
   86f84:	003e6906 	br	8692c <rx_descriptor_end+0xfff868cc>

00086f88 <_fclose_r>:
   86f88:	28003926 	beq	r5,zero,87070 <_fclose_r+0xe8>
   86f8c:	defffc04 	addi	sp,sp,-16
   86f90:	dc400115 	stw	r17,4(sp)
   86f94:	dc000015 	stw	r16,0(sp)
   86f98:	dfc00315 	stw	ra,12(sp)
   86f9c:	dc800215 	stw	r18,8(sp)
   86fa0:	2023883a 	mov	r17,r4
   86fa4:	2821883a 	mov	r16,r5
   86fa8:	20000226 	beq	r4,zero,86fb4 <_fclose_r+0x2c>
   86fac:	20800e17 	ldw	r2,56(r4)
   86fb0:	10002726 	beq	r2,zero,87050 <_fclose_r+0xc8>
   86fb4:	8080030f 	ldh	r2,12(r16)
   86fb8:	1000071e 	bne	r2,zero,86fd8 <_fclose_r+0x50>
   86fbc:	0005883a 	mov	r2,zero
   86fc0:	dfc00317 	ldw	ra,12(sp)
   86fc4:	dc800217 	ldw	r18,8(sp)
   86fc8:	dc400117 	ldw	r17,4(sp)
   86fcc:	dc000017 	ldw	r16,0(sp)
   86fd0:	dec00404 	addi	sp,sp,16
   86fd4:	f800283a 	ret
   86fd8:	800b883a 	mov	r5,r16
   86fdc:	8809883a 	mov	r4,r17
   86fe0:	00819700 	call	81970 <__sflush_r>
   86fe4:	1025883a 	mov	r18,r2
   86fe8:	80800b17 	ldw	r2,44(r16)
   86fec:	10000426 	beq	r2,zero,87000 <_fclose_r+0x78>
   86ff0:	81400717 	ldw	r5,28(r16)
   86ff4:	8809883a 	mov	r4,r17
   86ff8:	103ee83a 	callr	r2
   86ffc:	10001616 	blt	r2,zero,87058 <_fclose_r+0xd0>
   87000:	8080030b 	ldhu	r2,12(r16)
   87004:	1080200c 	andi	r2,r2,128
   87008:	1000151e 	bne	r2,zero,87060 <_fclose_r+0xd8>
   8700c:	81400c17 	ldw	r5,48(r16)
   87010:	28000526 	beq	r5,zero,87028 <_fclose_r+0xa0>
   87014:	80801004 	addi	r2,r16,64
   87018:	28800226 	beq	r5,r2,87024 <_fclose_r+0x9c>
   8701c:	8809883a 	mov	r4,r17
   87020:	00820dc0 	call	820dc <_free_r>
   87024:	80000c15 	stw	zero,48(r16)
   87028:	81401117 	ldw	r5,68(r16)
   8702c:	28000326 	beq	r5,zero,8703c <_fclose_r+0xb4>
   87030:	8809883a 	mov	r4,r17
   87034:	00820dc0 	call	820dc <_free_r>
   87038:	80001115 	stw	zero,68(r16)
   8703c:	0081f780 	call	81f78 <__sfp_lock_acquire>
   87040:	8000030d 	sth	zero,12(r16)
   87044:	0081f7c0 	call	81f7c <__sfp_lock_release>
   87048:	9005883a 	mov	r2,r18
   8704c:	003fdc06 	br	86fc0 <rx_descriptor_end+0xfff86f60>
   87050:	0081f680 	call	81f68 <__sinit>
   87054:	003fd706 	br	86fb4 <rx_descriptor_end+0xfff86f54>
   87058:	04bfffc4 	movi	r18,-1
   8705c:	003fe806 	br	87000 <rx_descriptor_end+0xfff86fa0>
   87060:	81400417 	ldw	r5,16(r16)
   87064:	8809883a 	mov	r4,r17
   87068:	00820dc0 	call	820dc <_free_r>
   8706c:	003fe706 	br	8700c <rx_descriptor_end+0xfff86fac>
   87070:	0005883a 	mov	r2,zero
   87074:	f800283a 	ret

00087078 <fclose>:
   87078:	00800274 	movhi	r2,9
   8707c:	10907304 	addi	r2,r2,16844
   87080:	200b883a 	mov	r5,r4
   87084:	11000017 	ldw	r4,0(r2)
   87088:	0086f881 	jmpi	86f88 <_fclose_r>

0008708c <_setlocale_r>:
   8708c:	30001b26 	beq	r6,zero,870fc <_setlocale_r+0x70>
   87090:	01400274 	movhi	r5,9
   87094:	defffe04 	addi	sp,sp,-8
   87098:	29480704 	addi	r5,r5,8220
   8709c:	3009883a 	mov	r4,r6
   870a0:	dc000015 	stw	r16,0(sp)
   870a4:	dfc00115 	stw	ra,4(sp)
   870a8:	3021883a 	mov	r16,r6
   870ac:	00886800 	call	88680 <strcmp>
   870b0:	1000061e 	bne	r2,zero,870cc <_setlocale_r+0x40>
   870b4:	00800274 	movhi	r2,9
   870b8:	1087e904 	addi	r2,r2,8100
   870bc:	dfc00117 	ldw	ra,4(sp)
   870c0:	dc000017 	ldw	r16,0(sp)
   870c4:	dec00204 	addi	sp,sp,8
   870c8:	f800283a 	ret
   870cc:	01400274 	movhi	r5,9
   870d0:	2947e904 	addi	r5,r5,8100
   870d4:	8009883a 	mov	r4,r16
   870d8:	00886800 	call	88680 <strcmp>
   870dc:	103ff526 	beq	r2,zero,870b4 <rx_descriptor_end+0xfff87054>
   870e0:	01400274 	movhi	r5,9
   870e4:	2947f204 	addi	r5,r5,8136
   870e8:	8009883a 	mov	r4,r16
   870ec:	00886800 	call	88680 <strcmp>
   870f0:	103ff026 	beq	r2,zero,870b4 <rx_descriptor_end+0xfff87054>
   870f4:	0005883a 	mov	r2,zero
   870f8:	003ff006 	br	870bc <rx_descriptor_end+0xfff8705c>
   870fc:	00800274 	movhi	r2,9
   87100:	1087e904 	addi	r2,r2,8100
   87104:	f800283a 	ret

00087108 <__locale_charset>:
   87108:	00800274 	movhi	r2,9
   8710c:	108bc104 	addi	r2,r2,12036
   87110:	f800283a 	ret

00087114 <__locale_mb_cur_max>:
   87114:	00800274 	movhi	r2,9
   87118:	10907604 	addi	r2,r2,16856
   8711c:	10800017 	ldw	r2,0(r2)
   87120:	f800283a 	ret

00087124 <__locale_msgcharset>:
   87124:	00800274 	movhi	r2,9
   87128:	108bb904 	addi	r2,r2,12004
   8712c:	f800283a 	ret

00087130 <__locale_cjk_lang>:
   87130:	0005883a 	mov	r2,zero
   87134:	f800283a 	ret

00087138 <_localeconv_r>:
   87138:	00800274 	movhi	r2,9
   8713c:	108bc904 	addi	r2,r2,12068
   87140:	f800283a 	ret

00087144 <setlocale>:
   87144:	00800274 	movhi	r2,9
   87148:	10907304 	addi	r2,r2,16844
   8714c:	280d883a 	mov	r6,r5
   87150:	200b883a 	mov	r5,r4
   87154:	11000017 	ldw	r4,0(r2)
   87158:	008708c1 	jmpi	8708c <_setlocale_r>

0008715c <localeconv>:
   8715c:	00800274 	movhi	r2,9
   87160:	108bc904 	addi	r2,r2,12068
   87164:	f800283a 	ret

00087168 <_lseek_r>:
   87168:	defffd04 	addi	sp,sp,-12
   8716c:	2805883a 	mov	r2,r5
   87170:	dc000015 	stw	r16,0(sp)
   87174:	04000274 	movhi	r16,9
   87178:	dc400115 	stw	r17,4(sp)
   8717c:	300b883a 	mov	r5,r6
   87180:	84186b04 	addi	r16,r16,25004
   87184:	2023883a 	mov	r17,r4
   87188:	380d883a 	mov	r6,r7
   8718c:	1009883a 	mov	r4,r2
   87190:	dfc00215 	stw	ra,8(sp)
   87194:	80000015 	stw	zero,0(r16)
   87198:	008e6580 	call	8e658 <lseek>
   8719c:	00ffffc4 	movi	r3,-1
   871a0:	10c00526 	beq	r2,r3,871b8 <_lseek_r+0x50>
   871a4:	dfc00217 	ldw	ra,8(sp)
   871a8:	dc400117 	ldw	r17,4(sp)
   871ac:	dc000017 	ldw	r16,0(sp)
   871b0:	dec00304 	addi	sp,sp,12
   871b4:	f800283a 	ret
   871b8:	80c00017 	ldw	r3,0(r16)
   871bc:	183ff926 	beq	r3,zero,871a4 <rx_descriptor_end+0xfff87144>
   871c0:	88c00015 	stw	r3,0(r17)
   871c4:	003ff706 	br	871a4 <rx_descriptor_end+0xfff87144>

000871c8 <__smakebuf_r>:
   871c8:	2880030b 	ldhu	r2,12(r5)
   871cc:	10c0008c 	andi	r3,r2,2
   871d0:	1800411e 	bne	r3,zero,872d8 <__smakebuf_r+0x110>
   871d4:	deffec04 	addi	sp,sp,-80
   871d8:	dc000f15 	stw	r16,60(sp)
   871dc:	2821883a 	mov	r16,r5
   871e0:	2940038f 	ldh	r5,14(r5)
   871e4:	dc401015 	stw	r17,64(sp)
   871e8:	dfc01315 	stw	ra,76(sp)
   871ec:	dcc01215 	stw	r19,72(sp)
   871f0:	dc801115 	stw	r18,68(sp)
   871f4:	2023883a 	mov	r17,r4
   871f8:	28001c16 	blt	r5,zero,8726c <__smakebuf_r+0xa4>
   871fc:	d80d883a 	mov	r6,sp
   87200:	008a1080 	call	8a108 <_fstat_r>
   87204:	10001816 	blt	r2,zero,87268 <__smakebuf_r+0xa0>
   87208:	d8800117 	ldw	r2,4(sp)
   8720c:	00e00014 	movui	r3,32768
   87210:	10bc000c 	andi	r2,r2,61440
   87214:	14c80020 	cmpeqi	r19,r2,8192
   87218:	10c03726 	beq	r2,r3,872f8 <__smakebuf_r+0x130>
   8721c:	80c0030b 	ldhu	r3,12(r16)
   87220:	18c20014 	ori	r3,r3,2048
   87224:	80c0030d 	sth	r3,12(r16)
   87228:	00c80004 	movi	r3,8192
   8722c:	10c0521e 	bne	r2,r3,87378 <__smakebuf_r+0x1b0>
   87230:	8140038f 	ldh	r5,14(r16)
   87234:	8809883a 	mov	r4,r17
   87238:	008a6200 	call	8a620 <_isatty_r>
   8723c:	10004c26 	beq	r2,zero,87370 <__smakebuf_r+0x1a8>
   87240:	8080030b 	ldhu	r2,12(r16)
   87244:	80c010c4 	addi	r3,r16,67
   87248:	80c00015 	stw	r3,0(r16)
   8724c:	10800054 	ori	r2,r2,1
   87250:	8080030d 	sth	r2,12(r16)
   87254:	00800044 	movi	r2,1
   87258:	80c00415 	stw	r3,16(r16)
   8725c:	80800515 	stw	r2,20(r16)
   87260:	04810004 	movi	r18,1024
   87264:	00000706 	br	87284 <__smakebuf_r+0xbc>
   87268:	8080030b 	ldhu	r2,12(r16)
   8726c:	10c0200c 	andi	r3,r2,128
   87270:	18001f1e 	bne	r3,zero,872f0 <__smakebuf_r+0x128>
   87274:	04810004 	movi	r18,1024
   87278:	10820014 	ori	r2,r2,2048
   8727c:	8080030d 	sth	r2,12(r16)
   87280:	0027883a 	mov	r19,zero
   87284:	900b883a 	mov	r5,r18
   87288:	8809883a 	mov	r4,r17
   8728c:	008259c0 	call	8259c <_malloc_r>
   87290:	10002c26 	beq	r2,zero,87344 <__smakebuf_r+0x17c>
   87294:	80c0030b 	ldhu	r3,12(r16)
   87298:	01000234 	movhi	r4,8
   8729c:	21070804 	addi	r4,r4,7200
   872a0:	89000f15 	stw	r4,60(r17)
   872a4:	18c02014 	ori	r3,r3,128
   872a8:	80c0030d 	sth	r3,12(r16)
   872ac:	80800015 	stw	r2,0(r16)
   872b0:	80800415 	stw	r2,16(r16)
   872b4:	84800515 	stw	r18,20(r16)
   872b8:	98001a1e 	bne	r19,zero,87324 <__smakebuf_r+0x15c>
   872bc:	dfc01317 	ldw	ra,76(sp)
   872c0:	dcc01217 	ldw	r19,72(sp)
   872c4:	dc801117 	ldw	r18,68(sp)
   872c8:	dc401017 	ldw	r17,64(sp)
   872cc:	dc000f17 	ldw	r16,60(sp)
   872d0:	dec01404 	addi	sp,sp,80
   872d4:	f800283a 	ret
   872d8:	288010c4 	addi	r2,r5,67
   872dc:	28800015 	stw	r2,0(r5)
   872e0:	28800415 	stw	r2,16(r5)
   872e4:	00800044 	movi	r2,1
   872e8:	28800515 	stw	r2,20(r5)
   872ec:	f800283a 	ret
   872f0:	04801004 	movi	r18,64
   872f4:	003fe006 	br	87278 <rx_descriptor_end+0xfff87218>
   872f8:	81000a17 	ldw	r4,40(r16)
   872fc:	00c00234 	movhi	r3,8
   87300:	18cc7104 	addi	r3,r3,12740
   87304:	20ffc51e 	bne	r4,r3,8721c <rx_descriptor_end+0xfff871bc>
   87308:	8080030b 	ldhu	r2,12(r16)
   8730c:	04810004 	movi	r18,1024
   87310:	84801315 	stw	r18,76(r16)
   87314:	1484b03a 	or	r2,r2,r18
   87318:	8080030d 	sth	r2,12(r16)
   8731c:	0027883a 	mov	r19,zero
   87320:	003fd806 	br	87284 <rx_descriptor_end+0xfff87224>
   87324:	8140038f 	ldh	r5,14(r16)
   87328:	8809883a 	mov	r4,r17
   8732c:	008a6200 	call	8a620 <_isatty_r>
   87330:	103fe226 	beq	r2,zero,872bc <rx_descriptor_end+0xfff8725c>
   87334:	8080030b 	ldhu	r2,12(r16)
   87338:	10800054 	ori	r2,r2,1
   8733c:	8080030d 	sth	r2,12(r16)
   87340:	003fde06 	br	872bc <rx_descriptor_end+0xfff8725c>
   87344:	8080030b 	ldhu	r2,12(r16)
   87348:	10c0800c 	andi	r3,r2,512
   8734c:	183fdb1e 	bne	r3,zero,872bc <rx_descriptor_end+0xfff8725c>
   87350:	10800094 	ori	r2,r2,2
   87354:	80c010c4 	addi	r3,r16,67
   87358:	8080030d 	sth	r2,12(r16)
   8735c:	00800044 	movi	r2,1
   87360:	80c00015 	stw	r3,0(r16)
   87364:	80c00415 	stw	r3,16(r16)
   87368:	80800515 	stw	r2,20(r16)
   8736c:	003fd306 	br	872bc <rx_descriptor_end+0xfff8725c>
   87370:	04810004 	movi	r18,1024
   87374:	003fc306 	br	87284 <rx_descriptor_end+0xfff87224>
   87378:	0027883a 	mov	r19,zero
   8737c:	04810004 	movi	r18,1024
   87380:	003fc006 	br	87284 <rx_descriptor_end+0xfff87224>

00087384 <memchr>:
   87384:	208000cc 	andi	r2,r4,3
   87388:	280f883a 	mov	r7,r5
   8738c:	10003426 	beq	r2,zero,87460 <memchr+0xdc>
   87390:	30bfffc4 	addi	r2,r6,-1
   87394:	30001a26 	beq	r6,zero,87400 <memchr+0x7c>
   87398:	20c00003 	ldbu	r3,0(r4)
   8739c:	29803fcc 	andi	r6,r5,255
   873a0:	30c0051e 	bne	r6,r3,873b8 <memchr+0x34>
   873a4:	00001806 	br	87408 <memchr+0x84>
   873a8:	10001526 	beq	r2,zero,87400 <memchr+0x7c>
   873ac:	20c00003 	ldbu	r3,0(r4)
   873b0:	10bfffc4 	addi	r2,r2,-1
   873b4:	30c01426 	beq	r6,r3,87408 <memchr+0x84>
   873b8:	21000044 	addi	r4,r4,1
   873bc:	20c000cc 	andi	r3,r4,3
   873c0:	183ff91e 	bne	r3,zero,873a8 <rx_descriptor_end+0xfff87348>
   873c4:	020000c4 	movi	r8,3
   873c8:	40801136 	bltu	r8,r2,87410 <memchr+0x8c>
   873cc:	10000c26 	beq	r2,zero,87400 <memchr+0x7c>
   873d0:	20c00003 	ldbu	r3,0(r4)
   873d4:	29403fcc 	andi	r5,r5,255
   873d8:	28c00b26 	beq	r5,r3,87408 <memchr+0x84>
   873dc:	20c00044 	addi	r3,r4,1
   873e0:	39803fcc 	andi	r6,r7,255
   873e4:	2089883a 	add	r4,r4,r2
   873e8:	00000306 	br	873f8 <memchr+0x74>
   873ec:	18c00044 	addi	r3,r3,1
   873f0:	197fffc3 	ldbu	r5,-1(r3)
   873f4:	31400526 	beq	r6,r5,8740c <memchr+0x88>
   873f8:	1805883a 	mov	r2,r3
   873fc:	20fffb1e 	bne	r4,r3,873ec <rx_descriptor_end+0xfff8738c>
   87400:	0005883a 	mov	r2,zero
   87404:	f800283a 	ret
   87408:	2005883a 	mov	r2,r4
   8740c:	f800283a 	ret
   87410:	28c03fcc 	andi	r3,r5,255
   87414:	1812923a 	slli	r9,r3,8
   87418:	02ffbff4 	movhi	r11,65279
   8741c:	02a02074 	movhi	r10,32897
   87420:	48d2b03a 	or	r9,r9,r3
   87424:	4806943a 	slli	r3,r9,16
   87428:	5affbfc4 	addi	r11,r11,-257
   8742c:	52a02004 	addi	r10,r10,-32640
   87430:	48d2b03a 	or	r9,r9,r3
   87434:	20c00017 	ldw	r3,0(r4)
   87438:	48c6f03a 	xor	r3,r9,r3
   8743c:	1acd883a 	add	r6,r3,r11
   87440:	00c6303a 	nor	r3,zero,r3
   87444:	30c6703a 	and	r3,r6,r3
   87448:	1a86703a 	and	r3,r3,r10
   8744c:	183fe01e 	bne	r3,zero,873d0 <rx_descriptor_end+0xfff87370>
   87450:	10bfff04 	addi	r2,r2,-4
   87454:	21000104 	addi	r4,r4,4
   87458:	40bff636 	bltu	r8,r2,87434 <rx_descriptor_end+0xfff873d4>
   8745c:	003fdb06 	br	873cc <rx_descriptor_end+0xfff8736c>
   87460:	3005883a 	mov	r2,r6
   87464:	003fd706 	br	873c4 <rx_descriptor_end+0xfff87364>

00087468 <memcpy>:
   87468:	defffd04 	addi	sp,sp,-12
   8746c:	dfc00215 	stw	ra,8(sp)
   87470:	dc400115 	stw	r17,4(sp)
   87474:	dc000015 	stw	r16,0(sp)
   87478:	00c003c4 	movi	r3,15
   8747c:	2005883a 	mov	r2,r4
   87480:	1980452e 	bgeu	r3,r6,87598 <memcpy+0x130>
   87484:	2906b03a 	or	r3,r5,r4
   87488:	18c000cc 	andi	r3,r3,3
   8748c:	1800441e 	bne	r3,zero,875a0 <memcpy+0x138>
   87490:	347ffc04 	addi	r17,r6,-16
   87494:	8822d13a 	srli	r17,r17,4
   87498:	28c00104 	addi	r3,r5,4
   8749c:	23400104 	addi	r13,r4,4
   874a0:	8820913a 	slli	r16,r17,4
   874a4:	2b000204 	addi	r12,r5,8
   874a8:	22c00204 	addi	r11,r4,8
   874ac:	84000504 	addi	r16,r16,20
   874b0:	2a800304 	addi	r10,r5,12
   874b4:	22400304 	addi	r9,r4,12
   874b8:	2c21883a 	add	r16,r5,r16
   874bc:	2811883a 	mov	r8,r5
   874c0:	200f883a 	mov	r7,r4
   874c4:	41000017 	ldw	r4,0(r8)
   874c8:	1fc00017 	ldw	ra,0(r3)
   874cc:	63c00017 	ldw	r15,0(r12)
   874d0:	39000015 	stw	r4,0(r7)
   874d4:	53800017 	ldw	r14,0(r10)
   874d8:	6fc00015 	stw	ra,0(r13)
   874dc:	5bc00015 	stw	r15,0(r11)
   874e0:	4b800015 	stw	r14,0(r9)
   874e4:	18c00404 	addi	r3,r3,16
   874e8:	39c00404 	addi	r7,r7,16
   874ec:	42000404 	addi	r8,r8,16
   874f0:	6b400404 	addi	r13,r13,16
   874f4:	63000404 	addi	r12,r12,16
   874f8:	5ac00404 	addi	r11,r11,16
   874fc:	52800404 	addi	r10,r10,16
   87500:	4a400404 	addi	r9,r9,16
   87504:	1c3fef1e 	bne	r3,r16,874c4 <rx_descriptor_end+0xfff87464>
   87508:	89c00044 	addi	r7,r17,1
   8750c:	380e913a 	slli	r7,r7,4
   87510:	310003cc 	andi	r4,r6,15
   87514:	02c000c4 	movi	r11,3
   87518:	11c7883a 	add	r3,r2,r7
   8751c:	29cb883a 	add	r5,r5,r7
   87520:	5900212e 	bgeu	r11,r4,875a8 <memcpy+0x140>
   87524:	1813883a 	mov	r9,r3
   87528:	2811883a 	mov	r8,r5
   8752c:	200f883a 	mov	r7,r4
   87530:	42800017 	ldw	r10,0(r8)
   87534:	4a400104 	addi	r9,r9,4
   87538:	39ffff04 	addi	r7,r7,-4
   8753c:	4abfff15 	stw	r10,-4(r9)
   87540:	42000104 	addi	r8,r8,4
   87544:	59fffa36 	bltu	r11,r7,87530 <rx_descriptor_end+0xfff874d0>
   87548:	213fff04 	addi	r4,r4,-4
   8754c:	2008d0ba 	srli	r4,r4,2
   87550:	318000cc 	andi	r6,r6,3
   87554:	21000044 	addi	r4,r4,1
   87558:	2109883a 	add	r4,r4,r4
   8755c:	2109883a 	add	r4,r4,r4
   87560:	1907883a 	add	r3,r3,r4
   87564:	290b883a 	add	r5,r5,r4
   87568:	30000626 	beq	r6,zero,87584 <memcpy+0x11c>
   8756c:	198d883a 	add	r6,r3,r6
   87570:	29c00003 	ldbu	r7,0(r5)
   87574:	18c00044 	addi	r3,r3,1
   87578:	29400044 	addi	r5,r5,1
   8757c:	19ffffc5 	stb	r7,-1(r3)
   87580:	19bffb1e 	bne	r3,r6,87570 <rx_descriptor_end+0xfff87510>
   87584:	dfc00217 	ldw	ra,8(sp)
   87588:	dc400117 	ldw	r17,4(sp)
   8758c:	dc000017 	ldw	r16,0(sp)
   87590:	dec00304 	addi	sp,sp,12
   87594:	f800283a 	ret
   87598:	2007883a 	mov	r3,r4
   8759c:	003ff206 	br	87568 <rx_descriptor_end+0xfff87508>
   875a0:	2007883a 	mov	r3,r4
   875a4:	003ff106 	br	8756c <rx_descriptor_end+0xfff8750c>
   875a8:	200d883a 	mov	r6,r4
   875ac:	003fee06 	br	87568 <rx_descriptor_end+0xfff87508>

000875b0 <_Balloc>:
   875b0:	20801317 	ldw	r2,76(r4)
   875b4:	defffc04 	addi	sp,sp,-16
   875b8:	dc400115 	stw	r17,4(sp)
   875bc:	dc000015 	stw	r16,0(sp)
   875c0:	dfc00315 	stw	ra,12(sp)
   875c4:	dc800215 	stw	r18,8(sp)
   875c8:	2023883a 	mov	r17,r4
   875cc:	2821883a 	mov	r16,r5
   875d0:	10000f26 	beq	r2,zero,87610 <_Balloc+0x60>
   875d4:	8407883a 	add	r3,r16,r16
   875d8:	18c7883a 	add	r3,r3,r3
   875dc:	10c7883a 	add	r3,r2,r3
   875e0:	18800017 	ldw	r2,0(r3)
   875e4:	10001126 	beq	r2,zero,8762c <_Balloc+0x7c>
   875e8:	11000017 	ldw	r4,0(r2)
   875ec:	19000015 	stw	r4,0(r3)
   875f0:	10000415 	stw	zero,16(r2)
   875f4:	10000315 	stw	zero,12(r2)
   875f8:	dfc00317 	ldw	ra,12(sp)
   875fc:	dc800217 	ldw	r18,8(sp)
   87600:	dc400117 	ldw	r17,4(sp)
   87604:	dc000017 	ldw	r16,0(sp)
   87608:	dec00404 	addi	sp,sp,16
   8760c:	f800283a 	ret
   87610:	01800844 	movi	r6,33
   87614:	01400104 	movi	r5,4
   87618:	0089e3c0 	call	89e3c <_calloc_r>
   8761c:	88801315 	stw	r2,76(r17)
   87620:	103fec1e 	bne	r2,zero,875d4 <rx_descriptor_end+0xfff87574>
   87624:	0005883a 	mov	r2,zero
   87628:	003ff306 	br	875f8 <rx_descriptor_end+0xfff87598>
   8762c:	01400044 	movi	r5,1
   87630:	2c24983a 	sll	r18,r5,r16
   87634:	8809883a 	mov	r4,r17
   87638:	91800144 	addi	r6,r18,5
   8763c:	318d883a 	add	r6,r6,r6
   87640:	318d883a 	add	r6,r6,r6
   87644:	0089e3c0 	call	89e3c <_calloc_r>
   87648:	103ff626 	beq	r2,zero,87624 <rx_descriptor_end+0xfff875c4>
   8764c:	14000115 	stw	r16,4(r2)
   87650:	14800215 	stw	r18,8(r2)
   87654:	003fe606 	br	875f0 <rx_descriptor_end+0xfff87590>

00087658 <_Bfree>:
   87658:	28000826 	beq	r5,zero,8767c <_Bfree+0x24>
   8765c:	28c00117 	ldw	r3,4(r5)
   87660:	20801317 	ldw	r2,76(r4)
   87664:	18c7883a 	add	r3,r3,r3
   87668:	18c7883a 	add	r3,r3,r3
   8766c:	10c5883a 	add	r2,r2,r3
   87670:	10c00017 	ldw	r3,0(r2)
   87674:	28c00015 	stw	r3,0(r5)
   87678:	11400015 	stw	r5,0(r2)
   8767c:	f800283a 	ret

00087680 <__multadd>:
   87680:	defffa04 	addi	sp,sp,-24
   87684:	dc800315 	stw	r18,12(sp)
   87688:	dc400215 	stw	r17,8(sp)
   8768c:	dc000115 	stw	r16,4(sp)
   87690:	2823883a 	mov	r17,r5
   87694:	2c000417 	ldw	r16,16(r5)
   87698:	dfc00515 	stw	ra,20(sp)
   8769c:	dcc00415 	stw	r19,16(sp)
   876a0:	2025883a 	mov	r18,r4
   876a4:	29400504 	addi	r5,r5,20
   876a8:	0011883a 	mov	r8,zero
   876ac:	28c00017 	ldw	r3,0(r5)
   876b0:	29400104 	addi	r5,r5,4
   876b4:	42000044 	addi	r8,r8,1
   876b8:	18bfffcc 	andi	r2,r3,65535
   876bc:	1185383a 	mul	r2,r2,r6
   876c0:	1806d43a 	srli	r3,r3,16
   876c4:	11cf883a 	add	r7,r2,r7
   876c8:	3808d43a 	srli	r4,r7,16
   876cc:	1987383a 	mul	r3,r3,r6
   876d0:	38bfffcc 	andi	r2,r7,65535
   876d4:	1907883a 	add	r3,r3,r4
   876d8:	1808943a 	slli	r4,r3,16
   876dc:	180ed43a 	srli	r7,r3,16
   876e0:	2085883a 	add	r2,r4,r2
   876e4:	28bfff15 	stw	r2,-4(r5)
   876e8:	443ff016 	blt	r8,r16,876ac <rx_descriptor_end+0xfff8764c>
   876ec:	38000926 	beq	r7,zero,87714 <__multadd+0x94>
   876f0:	88800217 	ldw	r2,8(r17)
   876f4:	80800f0e 	bge	r16,r2,87734 <__multadd+0xb4>
   876f8:	80800144 	addi	r2,r16,5
   876fc:	1085883a 	add	r2,r2,r2
   87700:	1085883a 	add	r2,r2,r2
   87704:	8885883a 	add	r2,r17,r2
   87708:	11c00015 	stw	r7,0(r2)
   8770c:	84000044 	addi	r16,r16,1
   87710:	8c000415 	stw	r16,16(r17)
   87714:	8805883a 	mov	r2,r17
   87718:	dfc00517 	ldw	ra,20(sp)
   8771c:	dcc00417 	ldw	r19,16(sp)
   87720:	dc800317 	ldw	r18,12(sp)
   87724:	dc400217 	ldw	r17,8(sp)
   87728:	dc000117 	ldw	r16,4(sp)
   8772c:	dec00604 	addi	sp,sp,24
   87730:	f800283a 	ret
   87734:	89400117 	ldw	r5,4(r17)
   87738:	9009883a 	mov	r4,r18
   8773c:	d9c00015 	stw	r7,0(sp)
   87740:	29400044 	addi	r5,r5,1
   87744:	00875b00 	call	875b0 <_Balloc>
   87748:	89800417 	ldw	r6,16(r17)
   8774c:	89400304 	addi	r5,r17,12
   87750:	11000304 	addi	r4,r2,12
   87754:	31800084 	addi	r6,r6,2
   87758:	318d883a 	add	r6,r6,r6
   8775c:	318d883a 	add	r6,r6,r6
   87760:	1027883a 	mov	r19,r2
   87764:	00874680 	call	87468 <memcpy>
   87768:	d9c00017 	ldw	r7,0(sp)
   8776c:	88000a26 	beq	r17,zero,87798 <__multadd+0x118>
   87770:	88c00117 	ldw	r3,4(r17)
   87774:	90801317 	ldw	r2,76(r18)
   87778:	18c7883a 	add	r3,r3,r3
   8777c:	18c7883a 	add	r3,r3,r3
   87780:	10c5883a 	add	r2,r2,r3
   87784:	10c00017 	ldw	r3,0(r2)
   87788:	88c00015 	stw	r3,0(r17)
   8778c:	14400015 	stw	r17,0(r2)
   87790:	9823883a 	mov	r17,r19
   87794:	003fd806 	br	876f8 <rx_descriptor_end+0xfff87698>
   87798:	9823883a 	mov	r17,r19
   8779c:	003fd606 	br	876f8 <rx_descriptor_end+0xfff87698>

000877a0 <__s2b>:
   877a0:	defff904 	addi	sp,sp,-28
   877a4:	dc400115 	stw	r17,4(sp)
   877a8:	dc000015 	stw	r16,0(sp)
   877ac:	2023883a 	mov	r17,r4
   877b0:	2821883a 	mov	r16,r5
   877b4:	39000204 	addi	r4,r7,8
   877b8:	01400244 	movi	r5,9
   877bc:	dcc00315 	stw	r19,12(sp)
   877c0:	dc800215 	stw	r18,8(sp)
   877c4:	dfc00615 	stw	ra,24(sp)
   877c8:	dd400515 	stw	r21,20(sp)
   877cc:	dd000415 	stw	r20,16(sp)
   877d0:	3825883a 	mov	r18,r7
   877d4:	3027883a 	mov	r19,r6
   877d8:	008b9c80 	call	8b9c8 <__divsi3>
   877dc:	00c00044 	movi	r3,1
   877e0:	000b883a 	mov	r5,zero
   877e4:	1880030e 	bge	r3,r2,877f4 <__s2b+0x54>
   877e8:	18c7883a 	add	r3,r3,r3
   877ec:	29400044 	addi	r5,r5,1
   877f0:	18bffd16 	blt	r3,r2,877e8 <rx_descriptor_end+0xfff87788>
   877f4:	8809883a 	mov	r4,r17
   877f8:	00875b00 	call	875b0 <_Balloc>
   877fc:	d8c00717 	ldw	r3,28(sp)
   87800:	10c00515 	stw	r3,20(r2)
   87804:	00c00044 	movi	r3,1
   87808:	10c00415 	stw	r3,16(r2)
   8780c:	00c00244 	movi	r3,9
   87810:	1cc0210e 	bge	r3,r19,87898 <__s2b+0xf8>
   87814:	80eb883a 	add	r21,r16,r3
   87818:	a829883a 	mov	r20,r21
   8781c:	84e1883a 	add	r16,r16,r19
   87820:	a1c00007 	ldb	r7,0(r20)
   87824:	01800284 	movi	r6,10
   87828:	a5000044 	addi	r20,r20,1
   8782c:	100b883a 	mov	r5,r2
   87830:	39fff404 	addi	r7,r7,-48
   87834:	8809883a 	mov	r4,r17
   87838:	00876800 	call	87680 <__multadd>
   8783c:	a43ff81e 	bne	r20,r16,87820 <rx_descriptor_end+0xfff877c0>
   87840:	ace1883a 	add	r16,r21,r19
   87844:	843ffe04 	addi	r16,r16,-8
   87848:	9c800a0e 	bge	r19,r18,87874 <__s2b+0xd4>
   8784c:	94e5c83a 	sub	r18,r18,r19
   87850:	84a5883a 	add	r18,r16,r18
   87854:	81c00007 	ldb	r7,0(r16)
   87858:	01800284 	movi	r6,10
   8785c:	84000044 	addi	r16,r16,1
   87860:	100b883a 	mov	r5,r2
   87864:	39fff404 	addi	r7,r7,-48
   87868:	8809883a 	mov	r4,r17
   8786c:	00876800 	call	87680 <__multadd>
   87870:	84bff81e 	bne	r16,r18,87854 <rx_descriptor_end+0xfff877f4>
   87874:	dfc00617 	ldw	ra,24(sp)
   87878:	dd400517 	ldw	r21,20(sp)
   8787c:	dd000417 	ldw	r20,16(sp)
   87880:	dcc00317 	ldw	r19,12(sp)
   87884:	dc800217 	ldw	r18,8(sp)
   87888:	dc400117 	ldw	r17,4(sp)
   8788c:	dc000017 	ldw	r16,0(sp)
   87890:	dec00704 	addi	sp,sp,28
   87894:	f800283a 	ret
   87898:	84000284 	addi	r16,r16,10
   8789c:	1827883a 	mov	r19,r3
   878a0:	003fe906 	br	87848 <rx_descriptor_end+0xfff877e8>

000878a4 <__hi0bits>:
   878a4:	20bfffec 	andhi	r2,r4,65535
   878a8:	1000141e 	bne	r2,zero,878fc <__hi0bits+0x58>
   878ac:	2008943a 	slli	r4,r4,16
   878b0:	00800404 	movi	r2,16
   878b4:	20ffc02c 	andhi	r3,r4,65280
   878b8:	1800021e 	bne	r3,zero,878c4 <__hi0bits+0x20>
   878bc:	2008923a 	slli	r4,r4,8
   878c0:	10800204 	addi	r2,r2,8
   878c4:	20fc002c 	andhi	r3,r4,61440
   878c8:	1800021e 	bne	r3,zero,878d4 <__hi0bits+0x30>
   878cc:	2008913a 	slli	r4,r4,4
   878d0:	10800104 	addi	r2,r2,4
   878d4:	20f0002c 	andhi	r3,r4,49152
   878d8:	1800031e 	bne	r3,zero,878e8 <__hi0bits+0x44>
   878dc:	2109883a 	add	r4,r4,r4
   878e0:	10800084 	addi	r2,r2,2
   878e4:	2109883a 	add	r4,r4,r4
   878e8:	20000316 	blt	r4,zero,878f8 <__hi0bits+0x54>
   878ec:	2110002c 	andhi	r4,r4,16384
   878f0:	2000041e 	bne	r4,zero,87904 <__hi0bits+0x60>
   878f4:	00800804 	movi	r2,32
   878f8:	f800283a 	ret
   878fc:	0005883a 	mov	r2,zero
   87900:	003fec06 	br	878b4 <rx_descriptor_end+0xfff87854>
   87904:	10800044 	addi	r2,r2,1
   87908:	f800283a 	ret

0008790c <__lo0bits>:
   8790c:	20c00017 	ldw	r3,0(r4)
   87910:	188001cc 	andi	r2,r3,7
   87914:	10000826 	beq	r2,zero,87938 <__lo0bits+0x2c>
   87918:	1880004c 	andi	r2,r3,1
   8791c:	1000211e 	bne	r2,zero,879a4 <__lo0bits+0x98>
   87920:	1880008c 	andi	r2,r3,2
   87924:	1000211e 	bne	r2,zero,879ac <__lo0bits+0xa0>
   87928:	1806d0ba 	srli	r3,r3,2
   8792c:	00800084 	movi	r2,2
   87930:	20c00015 	stw	r3,0(r4)
   87934:	f800283a 	ret
   87938:	18bfffcc 	andi	r2,r3,65535
   8793c:	10001326 	beq	r2,zero,8798c <__lo0bits+0x80>
   87940:	0005883a 	mov	r2,zero
   87944:	19403fcc 	andi	r5,r3,255
   87948:	2800021e 	bne	r5,zero,87954 <__lo0bits+0x48>
   8794c:	1806d23a 	srli	r3,r3,8
   87950:	10800204 	addi	r2,r2,8
   87954:	194003cc 	andi	r5,r3,15
   87958:	2800021e 	bne	r5,zero,87964 <__lo0bits+0x58>
   8795c:	1806d13a 	srli	r3,r3,4
   87960:	10800104 	addi	r2,r2,4
   87964:	194000cc 	andi	r5,r3,3
   87968:	2800021e 	bne	r5,zero,87974 <__lo0bits+0x68>
   8796c:	1806d0ba 	srli	r3,r3,2
   87970:	10800084 	addi	r2,r2,2
   87974:	1940004c 	andi	r5,r3,1
   87978:	2800081e 	bne	r5,zero,8799c <__lo0bits+0x90>
   8797c:	1806d07a 	srli	r3,r3,1
   87980:	1800051e 	bne	r3,zero,87998 <__lo0bits+0x8c>
   87984:	00800804 	movi	r2,32
   87988:	f800283a 	ret
   8798c:	1806d43a 	srli	r3,r3,16
   87990:	00800404 	movi	r2,16
   87994:	003feb06 	br	87944 <rx_descriptor_end+0xfff878e4>
   87998:	10800044 	addi	r2,r2,1
   8799c:	20c00015 	stw	r3,0(r4)
   879a0:	f800283a 	ret
   879a4:	0005883a 	mov	r2,zero
   879a8:	f800283a 	ret
   879ac:	1806d07a 	srli	r3,r3,1
   879b0:	00800044 	movi	r2,1
   879b4:	20c00015 	stw	r3,0(r4)
   879b8:	f800283a 	ret

000879bc <__i2b>:
   879bc:	defffd04 	addi	sp,sp,-12
   879c0:	dc000015 	stw	r16,0(sp)
   879c4:	04000044 	movi	r16,1
   879c8:	dc400115 	stw	r17,4(sp)
   879cc:	2823883a 	mov	r17,r5
   879d0:	800b883a 	mov	r5,r16
   879d4:	dfc00215 	stw	ra,8(sp)
   879d8:	00875b00 	call	875b0 <_Balloc>
   879dc:	14400515 	stw	r17,20(r2)
   879e0:	14000415 	stw	r16,16(r2)
   879e4:	dfc00217 	ldw	ra,8(sp)
   879e8:	dc400117 	ldw	r17,4(sp)
   879ec:	dc000017 	ldw	r16,0(sp)
   879f0:	dec00304 	addi	sp,sp,12
   879f4:	f800283a 	ret

000879f8 <__multiply>:
   879f8:	defffa04 	addi	sp,sp,-24
   879fc:	dcc00315 	stw	r19,12(sp)
   87a00:	dc800215 	stw	r18,8(sp)
   87a04:	34c00417 	ldw	r19,16(r6)
   87a08:	2c800417 	ldw	r18,16(r5)
   87a0c:	dd000415 	stw	r20,16(sp)
   87a10:	dc400115 	stw	r17,4(sp)
   87a14:	dfc00515 	stw	ra,20(sp)
   87a18:	dc000015 	stw	r16,0(sp)
   87a1c:	2829883a 	mov	r20,r5
   87a20:	3023883a 	mov	r17,r6
   87a24:	94c0050e 	bge	r18,r19,87a3c <__multiply+0x44>
   87a28:	9007883a 	mov	r3,r18
   87a2c:	3029883a 	mov	r20,r6
   87a30:	9825883a 	mov	r18,r19
   87a34:	2823883a 	mov	r17,r5
   87a38:	1827883a 	mov	r19,r3
   87a3c:	a0800217 	ldw	r2,8(r20)
   87a40:	94e1883a 	add	r16,r18,r19
   87a44:	a1400117 	ldw	r5,4(r20)
   87a48:	1400010e 	bge	r2,r16,87a50 <__multiply+0x58>
   87a4c:	29400044 	addi	r5,r5,1
   87a50:	00875b00 	call	875b0 <_Balloc>
   87a54:	8415883a 	add	r10,r16,r16
   87a58:	12c00504 	addi	r11,r2,20
   87a5c:	5295883a 	add	r10,r10,r10
   87a60:	5a95883a 	add	r10,r11,r10
   87a64:	5807883a 	mov	r3,r11
   87a68:	5a80032e 	bgeu	r11,r10,87a78 <__multiply+0x80>
   87a6c:	18000015 	stw	zero,0(r3)
   87a70:	18c00104 	addi	r3,r3,4
   87a74:	1abffd36 	bltu	r3,r10,87a6c <rx_descriptor_end+0xfff87a0c>
   87a78:	9ce7883a 	add	r19,r19,r19
   87a7c:	94a5883a 	add	r18,r18,r18
   87a80:	89800504 	addi	r6,r17,20
   87a84:	9ce7883a 	add	r19,r19,r19
   87a88:	a3400504 	addi	r13,r20,20
   87a8c:	94a5883a 	add	r18,r18,r18
   87a90:	34d9883a 	add	r12,r6,r19
   87a94:	6c93883a 	add	r9,r13,r18
   87a98:	3300422e 	bgeu	r6,r12,87ba4 <__multiply+0x1ac>
   87a9c:	37c00017 	ldw	ra,0(r6)
   87aa0:	fbffffcc 	andi	r15,ra,65535
   87aa4:	78001b26 	beq	r15,zero,87b14 <__multiply+0x11c>
   87aa8:	5811883a 	mov	r8,r11
   87aac:	681d883a 	mov	r14,r13
   87ab0:	000f883a 	mov	r7,zero
   87ab4:	71000017 	ldw	r4,0(r14)
   87ab8:	40c00017 	ldw	r3,0(r8)
   87abc:	73800104 	addi	r14,r14,4
   87ac0:	217fffcc 	andi	r5,r4,65535
   87ac4:	2bcb383a 	mul	r5,r5,r15
   87ac8:	2008d43a 	srli	r4,r4,16
   87acc:	1c7fffcc 	andi	r17,r3,65535
   87ad0:	2c4b883a 	add	r5,r5,r17
   87ad4:	29cb883a 	add	r5,r5,r7
   87ad8:	23c9383a 	mul	r4,r4,r15
   87adc:	1806d43a 	srli	r3,r3,16
   87ae0:	280ed43a 	srli	r7,r5,16
   87ae4:	297fffcc 	andi	r5,r5,65535
   87ae8:	20c7883a 	add	r3,r4,r3
   87aec:	19c7883a 	add	r3,r3,r7
   87af0:	1808943a 	slli	r4,r3,16
   87af4:	4023883a 	mov	r17,r8
   87af8:	180ed43a 	srli	r7,r3,16
   87afc:	214ab03a 	or	r5,r4,r5
   87b00:	41400015 	stw	r5,0(r8)
   87b04:	42000104 	addi	r8,r8,4
   87b08:	727fea36 	bltu	r14,r9,87ab4 <rx_descriptor_end+0xfff87a54>
   87b0c:	89c00115 	stw	r7,4(r17)
   87b10:	37c00017 	ldw	ra,0(r6)
   87b14:	f83ed43a 	srli	ra,ra,16
   87b18:	f8001f26 	beq	ra,zero,87b98 <__multiply+0x1a0>
   87b1c:	58c00017 	ldw	r3,0(r11)
   87b20:	681d883a 	mov	r14,r13
   87b24:	581f883a 	mov	r15,r11
   87b28:	1811883a 	mov	r8,r3
   87b2c:	5825883a 	mov	r18,r11
   87b30:	000f883a 	mov	r7,zero
   87b34:	00000106 	br	87b3c <__multiply+0x144>
   87b38:	8825883a 	mov	r18,r17
   87b3c:	7140000b 	ldhu	r5,0(r14)
   87b40:	4010d43a 	srli	r8,r8,16
   87b44:	193fffcc 	andi	r4,r3,65535
   87b48:	2fcb383a 	mul	r5,r5,ra
   87b4c:	7bc00104 	addi	r15,r15,4
   87b50:	73800104 	addi	r14,r14,4
   87b54:	2a0b883a 	add	r5,r5,r8
   87b58:	29cb883a 	add	r5,r5,r7
   87b5c:	2806943a 	slli	r3,r5,16
   87b60:	94400104 	addi	r17,r18,4
   87b64:	280ad43a 	srli	r5,r5,16
   87b68:	1908b03a 	or	r4,r3,r4
   87b6c:	793fff15 	stw	r4,-4(r15)
   87b70:	70ffff17 	ldw	r3,-4(r14)
   87b74:	8a000017 	ldw	r8,0(r17)
   87b78:	1806d43a 	srli	r3,r3,16
   87b7c:	413fffcc 	andi	r4,r8,65535
   87b80:	1fc7383a 	mul	r3,r3,ra
   87b84:	1907883a 	add	r3,r3,r4
   87b88:	1947883a 	add	r3,r3,r5
   87b8c:	180ed43a 	srli	r7,r3,16
   87b90:	727fe936 	bltu	r14,r9,87b38 <rx_descriptor_end+0xfff87ad8>
   87b94:	90c00115 	stw	r3,4(r18)
   87b98:	31800104 	addi	r6,r6,4
   87b9c:	5ac00104 	addi	r11,r11,4
   87ba0:	333fbe36 	bltu	r6,r12,87a9c <rx_descriptor_end+0xfff87a3c>
   87ba4:	0400090e 	bge	zero,r16,87bcc <__multiply+0x1d4>
   87ba8:	50ffff17 	ldw	r3,-4(r10)
   87bac:	52bfff04 	addi	r10,r10,-4
   87bb0:	18000326 	beq	r3,zero,87bc0 <__multiply+0x1c8>
   87bb4:	00000506 	br	87bcc <__multiply+0x1d4>
   87bb8:	50c00017 	ldw	r3,0(r10)
   87bbc:	1800031e 	bne	r3,zero,87bcc <__multiply+0x1d4>
   87bc0:	843fffc4 	addi	r16,r16,-1
   87bc4:	52bfff04 	addi	r10,r10,-4
   87bc8:	803ffb1e 	bne	r16,zero,87bb8 <rx_descriptor_end+0xfff87b58>
   87bcc:	14000415 	stw	r16,16(r2)
   87bd0:	dfc00517 	ldw	ra,20(sp)
   87bd4:	dd000417 	ldw	r20,16(sp)
   87bd8:	dcc00317 	ldw	r19,12(sp)
   87bdc:	dc800217 	ldw	r18,8(sp)
   87be0:	dc400117 	ldw	r17,4(sp)
   87be4:	dc000017 	ldw	r16,0(sp)
   87be8:	dec00604 	addi	sp,sp,24
   87bec:	f800283a 	ret

00087bf0 <__pow5mult>:
   87bf0:	defffa04 	addi	sp,sp,-24
   87bf4:	dcc00315 	stw	r19,12(sp)
   87bf8:	dc000015 	stw	r16,0(sp)
   87bfc:	dfc00515 	stw	ra,20(sp)
   87c00:	dd000415 	stw	r20,16(sp)
   87c04:	dc800215 	stw	r18,8(sp)
   87c08:	dc400115 	stw	r17,4(sp)
   87c0c:	308000cc 	andi	r2,r6,3
   87c10:	3021883a 	mov	r16,r6
   87c14:	2027883a 	mov	r19,r4
   87c18:	10002f1e 	bne	r2,zero,87cd8 <__pow5mult+0xe8>
   87c1c:	2825883a 	mov	r18,r5
   87c20:	8021d0ba 	srai	r16,r16,2
   87c24:	80001a26 	beq	r16,zero,87c90 <__pow5mult+0xa0>
   87c28:	9c401217 	ldw	r17,72(r19)
   87c2c:	8800061e 	bne	r17,zero,87c48 <__pow5mult+0x58>
   87c30:	00003406 	br	87d04 <__pow5mult+0x114>
   87c34:	8021d07a 	srai	r16,r16,1
   87c38:	80001526 	beq	r16,zero,87c90 <__pow5mult+0xa0>
   87c3c:	88800017 	ldw	r2,0(r17)
   87c40:	10001c26 	beq	r2,zero,87cb4 <__pow5mult+0xc4>
   87c44:	1023883a 	mov	r17,r2
   87c48:	8080004c 	andi	r2,r16,1
   87c4c:	103ff926 	beq	r2,zero,87c34 <rx_descriptor_end+0xfff87bd4>
   87c50:	880d883a 	mov	r6,r17
   87c54:	900b883a 	mov	r5,r18
   87c58:	9809883a 	mov	r4,r19
   87c5c:	00879f80 	call	879f8 <__multiply>
   87c60:	90001b26 	beq	r18,zero,87cd0 <__pow5mult+0xe0>
   87c64:	91000117 	ldw	r4,4(r18)
   87c68:	98c01317 	ldw	r3,76(r19)
   87c6c:	8021d07a 	srai	r16,r16,1
   87c70:	2109883a 	add	r4,r4,r4
   87c74:	2109883a 	add	r4,r4,r4
   87c78:	1907883a 	add	r3,r3,r4
   87c7c:	19000017 	ldw	r4,0(r3)
   87c80:	91000015 	stw	r4,0(r18)
   87c84:	1c800015 	stw	r18,0(r3)
   87c88:	1025883a 	mov	r18,r2
   87c8c:	803feb1e 	bne	r16,zero,87c3c <rx_descriptor_end+0xfff87bdc>
   87c90:	9005883a 	mov	r2,r18
   87c94:	dfc00517 	ldw	ra,20(sp)
   87c98:	dd000417 	ldw	r20,16(sp)
   87c9c:	dcc00317 	ldw	r19,12(sp)
   87ca0:	dc800217 	ldw	r18,8(sp)
   87ca4:	dc400117 	ldw	r17,4(sp)
   87ca8:	dc000017 	ldw	r16,0(sp)
   87cac:	dec00604 	addi	sp,sp,24
   87cb0:	f800283a 	ret
   87cb4:	880d883a 	mov	r6,r17
   87cb8:	880b883a 	mov	r5,r17
   87cbc:	9809883a 	mov	r4,r19
   87cc0:	00879f80 	call	879f8 <__multiply>
   87cc4:	88800015 	stw	r2,0(r17)
   87cc8:	10000015 	stw	zero,0(r2)
   87ccc:	003fdd06 	br	87c44 <rx_descriptor_end+0xfff87be4>
   87cd0:	1025883a 	mov	r18,r2
   87cd4:	003fd706 	br	87c34 <rx_descriptor_end+0xfff87bd4>
   87cd8:	10bfffc4 	addi	r2,r2,-1
   87cdc:	1085883a 	add	r2,r2,r2
   87ce0:	00c00274 	movhi	r3,9
   87ce4:	18c80a04 	addi	r3,r3,8232
   87ce8:	1085883a 	add	r2,r2,r2
   87cec:	1885883a 	add	r2,r3,r2
   87cf0:	11800017 	ldw	r6,0(r2)
   87cf4:	000f883a 	mov	r7,zero
   87cf8:	00876800 	call	87680 <__multadd>
   87cfc:	1025883a 	mov	r18,r2
   87d00:	003fc706 	br	87c20 <rx_descriptor_end+0xfff87bc0>
   87d04:	05000044 	movi	r20,1
   87d08:	a00b883a 	mov	r5,r20
   87d0c:	9809883a 	mov	r4,r19
   87d10:	00875b00 	call	875b0 <_Balloc>
   87d14:	1023883a 	mov	r17,r2
   87d18:	00809c44 	movi	r2,625
   87d1c:	88800515 	stw	r2,20(r17)
   87d20:	8d000415 	stw	r20,16(r17)
   87d24:	9c401215 	stw	r17,72(r19)
   87d28:	88000015 	stw	zero,0(r17)
   87d2c:	003fc606 	br	87c48 <rx_descriptor_end+0xfff87be8>

00087d30 <__lshift>:
   87d30:	defff904 	addi	sp,sp,-28
   87d34:	dd400515 	stw	r21,20(sp)
   87d38:	dcc00315 	stw	r19,12(sp)
   87d3c:	302bd17a 	srai	r21,r6,5
   87d40:	2cc00417 	ldw	r19,16(r5)
   87d44:	28800217 	ldw	r2,8(r5)
   87d48:	dd000415 	stw	r20,16(sp)
   87d4c:	ace7883a 	add	r19,r21,r19
   87d50:	dc800215 	stw	r18,8(sp)
   87d54:	dc400115 	stw	r17,4(sp)
   87d58:	dc000015 	stw	r16,0(sp)
   87d5c:	dfc00615 	stw	ra,24(sp)
   87d60:	9c000044 	addi	r16,r19,1
   87d64:	2823883a 	mov	r17,r5
   87d68:	3029883a 	mov	r20,r6
   87d6c:	2025883a 	mov	r18,r4
   87d70:	29400117 	ldw	r5,4(r5)
   87d74:	1400030e 	bge	r2,r16,87d84 <__lshift+0x54>
   87d78:	1085883a 	add	r2,r2,r2
   87d7c:	29400044 	addi	r5,r5,1
   87d80:	143ffd16 	blt	r2,r16,87d78 <rx_descriptor_end+0xfff87d18>
   87d84:	9009883a 	mov	r4,r18
   87d88:	00875b00 	call	875b0 <_Balloc>
   87d8c:	10c00504 	addi	r3,r2,20
   87d90:	0540070e 	bge	zero,r21,87db0 <__lshift+0x80>
   87d94:	ad6b883a 	add	r21,r21,r21
   87d98:	ad6b883a 	add	r21,r21,r21
   87d9c:	1809883a 	mov	r4,r3
   87da0:	1d47883a 	add	r3,r3,r21
   87da4:	20000015 	stw	zero,0(r4)
   87da8:	21000104 	addi	r4,r4,4
   87dac:	193ffd1e 	bne	r3,r4,87da4 <rx_descriptor_end+0xfff87d44>
   87db0:	8a000417 	ldw	r8,16(r17)
   87db4:	89000504 	addi	r4,r17,20
   87db8:	a18007cc 	andi	r6,r20,31
   87dbc:	4211883a 	add	r8,r8,r8
   87dc0:	4211883a 	add	r8,r8,r8
   87dc4:	2211883a 	add	r8,r4,r8
   87dc8:	30002326 	beq	r6,zero,87e58 <__lshift+0x128>
   87dcc:	02400804 	movi	r9,32
   87dd0:	4993c83a 	sub	r9,r9,r6
   87dd4:	000b883a 	mov	r5,zero
   87dd8:	21c00017 	ldw	r7,0(r4)
   87ddc:	1815883a 	mov	r10,r3
   87de0:	18c00104 	addi	r3,r3,4
   87de4:	398e983a 	sll	r7,r7,r6
   87de8:	21000104 	addi	r4,r4,4
   87dec:	394ab03a 	or	r5,r7,r5
   87df0:	197fff15 	stw	r5,-4(r3)
   87df4:	217fff17 	ldw	r5,-4(r4)
   87df8:	2a4ad83a 	srl	r5,r5,r9
   87dfc:	223ff636 	bltu	r4,r8,87dd8 <rx_descriptor_end+0xfff87d78>
   87e00:	51400115 	stw	r5,4(r10)
   87e04:	28001a1e 	bne	r5,zero,87e70 <__lshift+0x140>
   87e08:	843fffc4 	addi	r16,r16,-1
   87e0c:	14000415 	stw	r16,16(r2)
   87e10:	88000826 	beq	r17,zero,87e34 <__lshift+0x104>
   87e14:	89000117 	ldw	r4,4(r17)
   87e18:	90c01317 	ldw	r3,76(r18)
   87e1c:	2109883a 	add	r4,r4,r4
   87e20:	2109883a 	add	r4,r4,r4
   87e24:	1907883a 	add	r3,r3,r4
   87e28:	19000017 	ldw	r4,0(r3)
   87e2c:	89000015 	stw	r4,0(r17)
   87e30:	1c400015 	stw	r17,0(r3)
   87e34:	dfc00617 	ldw	ra,24(sp)
   87e38:	dd400517 	ldw	r21,20(sp)
   87e3c:	dd000417 	ldw	r20,16(sp)
   87e40:	dcc00317 	ldw	r19,12(sp)
   87e44:	dc800217 	ldw	r18,8(sp)
   87e48:	dc400117 	ldw	r17,4(sp)
   87e4c:	dc000017 	ldw	r16,0(sp)
   87e50:	dec00704 	addi	sp,sp,28
   87e54:	f800283a 	ret
   87e58:	21400017 	ldw	r5,0(r4)
   87e5c:	18c00104 	addi	r3,r3,4
   87e60:	21000104 	addi	r4,r4,4
   87e64:	197fff15 	stw	r5,-4(r3)
   87e68:	223ffb36 	bltu	r4,r8,87e58 <rx_descriptor_end+0xfff87df8>
   87e6c:	003fe606 	br	87e08 <rx_descriptor_end+0xfff87da8>
   87e70:	9c000084 	addi	r16,r19,2
   87e74:	003fe406 	br	87e08 <rx_descriptor_end+0xfff87da8>

00087e78 <__mcmp>:
   87e78:	20800417 	ldw	r2,16(r4)
   87e7c:	28c00417 	ldw	r3,16(r5)
   87e80:	10c5c83a 	sub	r2,r2,r3
   87e84:	1000111e 	bne	r2,zero,87ecc <__mcmp+0x54>
   87e88:	18c7883a 	add	r3,r3,r3
   87e8c:	18c7883a 	add	r3,r3,r3
   87e90:	21000504 	addi	r4,r4,20
   87e94:	29400504 	addi	r5,r5,20
   87e98:	20c5883a 	add	r2,r4,r3
   87e9c:	28cb883a 	add	r5,r5,r3
   87ea0:	00000106 	br	87ea8 <__mcmp+0x30>
   87ea4:	20800a2e 	bgeu	r4,r2,87ed0 <__mcmp+0x58>
   87ea8:	10bfff04 	addi	r2,r2,-4
   87eac:	297fff04 	addi	r5,r5,-4
   87eb0:	11800017 	ldw	r6,0(r2)
   87eb4:	28c00017 	ldw	r3,0(r5)
   87eb8:	30fffa26 	beq	r6,r3,87ea4 <rx_descriptor_end+0xfff87e44>
   87ebc:	30c00236 	bltu	r6,r3,87ec8 <__mcmp+0x50>
   87ec0:	00800044 	movi	r2,1
   87ec4:	f800283a 	ret
   87ec8:	00bfffc4 	movi	r2,-1
   87ecc:	f800283a 	ret
   87ed0:	0005883a 	mov	r2,zero
   87ed4:	f800283a 	ret

00087ed8 <__mdiff>:
   87ed8:	28c00417 	ldw	r3,16(r5)
   87edc:	30800417 	ldw	r2,16(r6)
   87ee0:	defffa04 	addi	sp,sp,-24
   87ee4:	dcc00315 	stw	r19,12(sp)
   87ee8:	dc800215 	stw	r18,8(sp)
   87eec:	dfc00515 	stw	ra,20(sp)
   87ef0:	dd000415 	stw	r20,16(sp)
   87ef4:	dc400115 	stw	r17,4(sp)
   87ef8:	dc000015 	stw	r16,0(sp)
   87efc:	1887c83a 	sub	r3,r3,r2
   87f00:	2825883a 	mov	r18,r5
   87f04:	3027883a 	mov	r19,r6
   87f08:	1800141e 	bne	r3,zero,87f5c <__mdiff+0x84>
   87f0c:	1085883a 	add	r2,r2,r2
   87f10:	1085883a 	add	r2,r2,r2
   87f14:	2a000504 	addi	r8,r5,20
   87f18:	34000504 	addi	r16,r6,20
   87f1c:	4087883a 	add	r3,r8,r2
   87f20:	8085883a 	add	r2,r16,r2
   87f24:	00000106 	br	87f2c <__mdiff+0x54>
   87f28:	40c0592e 	bgeu	r8,r3,88090 <__mdiff+0x1b8>
   87f2c:	18ffff04 	addi	r3,r3,-4
   87f30:	10bfff04 	addi	r2,r2,-4
   87f34:	19c00017 	ldw	r7,0(r3)
   87f38:	11400017 	ldw	r5,0(r2)
   87f3c:	397ffa26 	beq	r7,r5,87f28 <rx_descriptor_end+0xfff87ec8>
   87f40:	3940592e 	bgeu	r7,r5,880a8 <__mdiff+0x1d0>
   87f44:	9005883a 	mov	r2,r18
   87f48:	4023883a 	mov	r17,r8
   87f4c:	9825883a 	mov	r18,r19
   87f50:	05000044 	movi	r20,1
   87f54:	1027883a 	mov	r19,r2
   87f58:	00000406 	br	87f6c <__mdiff+0x94>
   87f5c:	18005616 	blt	r3,zero,880b8 <__mdiff+0x1e0>
   87f60:	34400504 	addi	r17,r6,20
   87f64:	2c000504 	addi	r16,r5,20
   87f68:	0029883a 	mov	r20,zero
   87f6c:	91400117 	ldw	r5,4(r18)
   87f70:	00875b00 	call	875b0 <_Balloc>
   87f74:	92400417 	ldw	r9,16(r18)
   87f78:	9b000417 	ldw	r12,16(r19)
   87f7c:	12c00504 	addi	r11,r2,20
   87f80:	4a51883a 	add	r8,r9,r9
   87f84:	6319883a 	add	r12,r12,r12
   87f88:	4211883a 	add	r8,r8,r8
   87f8c:	6319883a 	add	r12,r12,r12
   87f90:	15000315 	stw	r20,12(r2)
   87f94:	8211883a 	add	r8,r16,r8
   87f98:	8b19883a 	add	r12,r17,r12
   87f9c:	0007883a 	mov	r3,zero
   87fa0:	81400017 	ldw	r5,0(r16)
   87fa4:	89c00017 	ldw	r7,0(r17)
   87fa8:	59800104 	addi	r6,r11,4
   87fac:	293fffcc 	andi	r4,r5,65535
   87fb0:	20c7883a 	add	r3,r4,r3
   87fb4:	393fffcc 	andi	r4,r7,65535
   87fb8:	1909c83a 	sub	r4,r3,r4
   87fbc:	280ad43a 	srli	r5,r5,16
   87fc0:	380ed43a 	srli	r7,r7,16
   87fc4:	2007d43a 	srai	r3,r4,16
   87fc8:	213fffcc 	andi	r4,r4,65535
   87fcc:	29cbc83a 	sub	r5,r5,r7
   87fd0:	28c7883a 	add	r3,r5,r3
   87fd4:	180a943a 	slli	r5,r3,16
   87fd8:	8c400104 	addi	r17,r17,4
   87fdc:	84000104 	addi	r16,r16,4
   87fe0:	2908b03a 	or	r4,r5,r4
   87fe4:	59000015 	stw	r4,0(r11)
   87fe8:	1807d43a 	srai	r3,r3,16
   87fec:	3015883a 	mov	r10,r6
   87ff0:	3017883a 	mov	r11,r6
   87ff4:	8b3fea36 	bltu	r17,r12,87fa0 <rx_descriptor_end+0xfff87f40>
   87ff8:	8200162e 	bgeu	r16,r8,88054 <__mdiff+0x17c>
   87ffc:	8017883a 	mov	r11,r16
   88000:	59400017 	ldw	r5,0(r11)
   88004:	31800104 	addi	r6,r6,4
   88008:	5ac00104 	addi	r11,r11,4
   8800c:	293fffcc 	andi	r4,r5,65535
   88010:	20c7883a 	add	r3,r4,r3
   88014:	280ed43a 	srli	r7,r5,16
   88018:	180bd43a 	srai	r5,r3,16
   8801c:	193fffcc 	andi	r4,r3,65535
   88020:	3947883a 	add	r3,r7,r5
   88024:	180a943a 	slli	r5,r3,16
   88028:	1807d43a 	srai	r3,r3,16
   8802c:	2908b03a 	or	r4,r5,r4
   88030:	313fff15 	stw	r4,-4(r6)
   88034:	5a3ff236 	bltu	r11,r8,88000 <rx_descriptor_end+0xfff87fa0>
   88038:	0406303a 	nor	r3,zero,r16
   8803c:	1a07883a 	add	r3,r3,r8
   88040:	1806d0ba 	srli	r3,r3,2
   88044:	18c00044 	addi	r3,r3,1
   88048:	18c7883a 	add	r3,r3,r3
   8804c:	18c7883a 	add	r3,r3,r3
   88050:	50d5883a 	add	r10,r10,r3
   88054:	50ffff04 	addi	r3,r10,-4
   88058:	2000041e 	bne	r4,zero,8806c <__mdiff+0x194>
   8805c:	18ffff04 	addi	r3,r3,-4
   88060:	19000017 	ldw	r4,0(r3)
   88064:	4a7fffc4 	addi	r9,r9,-1
   88068:	203ffc26 	beq	r4,zero,8805c <rx_descriptor_end+0xfff87ffc>
   8806c:	12400415 	stw	r9,16(r2)
   88070:	dfc00517 	ldw	ra,20(sp)
   88074:	dd000417 	ldw	r20,16(sp)
   88078:	dcc00317 	ldw	r19,12(sp)
   8807c:	dc800217 	ldw	r18,8(sp)
   88080:	dc400117 	ldw	r17,4(sp)
   88084:	dc000017 	ldw	r16,0(sp)
   88088:	dec00604 	addi	sp,sp,24
   8808c:	f800283a 	ret
   88090:	000b883a 	mov	r5,zero
   88094:	00875b00 	call	875b0 <_Balloc>
   88098:	00c00044 	movi	r3,1
   8809c:	10c00415 	stw	r3,16(r2)
   880a0:	10000515 	stw	zero,20(r2)
   880a4:	003ff206 	br	88070 <rx_descriptor_end+0xfff88010>
   880a8:	8023883a 	mov	r17,r16
   880ac:	0029883a 	mov	r20,zero
   880b0:	4021883a 	mov	r16,r8
   880b4:	003fad06 	br	87f6c <rx_descriptor_end+0xfff87f0c>
   880b8:	9005883a 	mov	r2,r18
   880bc:	94400504 	addi	r17,r18,20
   880c0:	9c000504 	addi	r16,r19,20
   880c4:	9825883a 	mov	r18,r19
   880c8:	05000044 	movi	r20,1
   880cc:	1027883a 	mov	r19,r2
   880d0:	003fa606 	br	87f6c <rx_descriptor_end+0xfff87f0c>

000880d4 <__ulp>:
   880d4:	295ffc2c 	andhi	r5,r5,32752
   880d8:	00bf3034 	movhi	r2,64704
   880dc:	2887883a 	add	r3,r5,r2
   880e0:	00c0020e 	bge	zero,r3,880ec <__ulp+0x18>
   880e4:	0005883a 	mov	r2,zero
   880e8:	f800283a 	ret
   880ec:	00c7c83a 	sub	r3,zero,r3
   880f0:	1807d53a 	srai	r3,r3,20
   880f4:	008004c4 	movi	r2,19
   880f8:	10c00b0e 	bge	r2,r3,88128 <__ulp+0x54>
   880fc:	18bffb04 	addi	r2,r3,-20
   88100:	01000784 	movi	r4,30
   88104:	0007883a 	mov	r3,zero
   88108:	20800516 	blt	r4,r2,88120 <__ulp+0x4c>
   8810c:	010007c4 	movi	r4,31
   88110:	2089c83a 	sub	r4,r4,r2
   88114:	00800044 	movi	r2,1
   88118:	1104983a 	sll	r2,r2,r4
   8811c:	f800283a 	ret
   88120:	00800044 	movi	r2,1
   88124:	f800283a 	ret
   88128:	01400234 	movhi	r5,8
   8812c:	28c7d83a 	sra	r3,r5,r3
   88130:	0005883a 	mov	r2,zero
   88134:	f800283a 	ret

00088138 <__b2d>:
   88138:	defffa04 	addi	sp,sp,-24
   8813c:	dc000015 	stw	r16,0(sp)
   88140:	24000417 	ldw	r16,16(r4)
   88144:	dc400115 	stw	r17,4(sp)
   88148:	24400504 	addi	r17,r4,20
   8814c:	8421883a 	add	r16,r16,r16
   88150:	8421883a 	add	r16,r16,r16
   88154:	8c21883a 	add	r16,r17,r16
   88158:	dc800215 	stw	r18,8(sp)
   8815c:	84bfff17 	ldw	r18,-4(r16)
   88160:	dd000415 	stw	r20,16(sp)
   88164:	dcc00315 	stw	r19,12(sp)
   88168:	9009883a 	mov	r4,r18
   8816c:	2829883a 	mov	r20,r5
   88170:	dfc00515 	stw	ra,20(sp)
   88174:	00878a40 	call	878a4 <__hi0bits>
   88178:	00c00804 	movi	r3,32
   8817c:	1889c83a 	sub	r4,r3,r2
   88180:	a1000015 	stw	r4,0(r20)
   88184:	01000284 	movi	r4,10
   88188:	84ffff04 	addi	r19,r16,-4
   8818c:	20801216 	blt	r4,r2,881d8 <__b2d+0xa0>
   88190:	018002c4 	movi	r6,11
   88194:	308dc83a 	sub	r6,r6,r2
   88198:	9186d83a 	srl	r3,r18,r6
   8819c:	18cffc34 	orhi	r3,r3,16368
   881a0:	8cc0212e 	bgeu	r17,r19,88228 <__b2d+0xf0>
   881a4:	813ffe17 	ldw	r4,-8(r16)
   881a8:	218cd83a 	srl	r6,r4,r6
   881ac:	10800544 	addi	r2,r2,21
   881b0:	9084983a 	sll	r2,r18,r2
   881b4:	1184b03a 	or	r2,r2,r6
   881b8:	dfc00517 	ldw	ra,20(sp)
   881bc:	dd000417 	ldw	r20,16(sp)
   881c0:	dcc00317 	ldw	r19,12(sp)
   881c4:	dc800217 	ldw	r18,8(sp)
   881c8:	dc400117 	ldw	r17,4(sp)
   881cc:	dc000017 	ldw	r16,0(sp)
   881d0:	dec00604 	addi	sp,sp,24
   881d4:	f800283a 	ret
   881d8:	8cc00f2e 	bgeu	r17,r19,88218 <__b2d+0xe0>
   881dc:	117ffd44 	addi	r5,r2,-11
   881e0:	80bffe17 	ldw	r2,-8(r16)
   881e4:	28000e26 	beq	r5,zero,88220 <__b2d+0xe8>
   881e8:	1949c83a 	sub	r4,r3,r5
   881ec:	9164983a 	sll	r18,r18,r5
   881f0:	1106d83a 	srl	r3,r2,r4
   881f4:	81bffe04 	addi	r6,r16,-8
   881f8:	948ffc34 	orhi	r18,r18,16368
   881fc:	90c6b03a 	or	r3,r18,r3
   88200:	89800e2e 	bgeu	r17,r6,8823c <__b2d+0x104>
   88204:	81bffd17 	ldw	r6,-12(r16)
   88208:	1144983a 	sll	r2,r2,r5
   8820c:	310ad83a 	srl	r5,r6,r4
   88210:	2884b03a 	or	r2,r5,r2
   88214:	003fe806 	br	881b8 <rx_descriptor_end+0xfff88158>
   88218:	10bffd44 	addi	r2,r2,-11
   8821c:	1000041e 	bne	r2,zero,88230 <__b2d+0xf8>
   88220:	90cffc34 	orhi	r3,r18,16368
   88224:	003fe406 	br	881b8 <rx_descriptor_end+0xfff88158>
   88228:	000d883a 	mov	r6,zero
   8822c:	003fdf06 	br	881ac <rx_descriptor_end+0xfff8814c>
   88230:	90a4983a 	sll	r18,r18,r2
   88234:	0005883a 	mov	r2,zero
   88238:	003ff906 	br	88220 <rx_descriptor_end+0xfff881c0>
   8823c:	1144983a 	sll	r2,r2,r5
   88240:	003fdd06 	br	881b8 <rx_descriptor_end+0xfff88158>

00088244 <__d2b>:
   88244:	defff804 	addi	sp,sp,-32
   88248:	dc000215 	stw	r16,8(sp)
   8824c:	3021883a 	mov	r16,r6
   88250:	dc400315 	stw	r17,12(sp)
   88254:	8022907a 	slli	r17,r16,1
   88258:	dd000615 	stw	r20,24(sp)
   8825c:	2829883a 	mov	r20,r5
   88260:	01400044 	movi	r5,1
   88264:	dcc00515 	stw	r19,20(sp)
   88268:	dc800415 	stw	r18,16(sp)
   8826c:	dfc00715 	stw	ra,28(sp)
   88270:	3825883a 	mov	r18,r7
   88274:	8822d57a 	srli	r17,r17,21
   88278:	00875b00 	call	875b0 <_Balloc>
   8827c:	1027883a 	mov	r19,r2
   88280:	00800434 	movhi	r2,16
   88284:	10bfffc4 	addi	r2,r2,-1
   88288:	808c703a 	and	r6,r16,r2
   8828c:	88000126 	beq	r17,zero,88294 <__d2b+0x50>
   88290:	31800434 	orhi	r6,r6,16
   88294:	d9800015 	stw	r6,0(sp)
   88298:	a0002426 	beq	r20,zero,8832c <__d2b+0xe8>
   8829c:	d9000104 	addi	r4,sp,4
   882a0:	dd000115 	stw	r20,4(sp)
   882a4:	008790c0 	call	8790c <__lo0bits>
   882a8:	d8c00017 	ldw	r3,0(sp)
   882ac:	10002f1e 	bne	r2,zero,8836c <__d2b+0x128>
   882b0:	d9000117 	ldw	r4,4(sp)
   882b4:	99000515 	stw	r4,20(r19)
   882b8:	1821003a 	cmpeq	r16,r3,zero
   882bc:	01000084 	movi	r4,2
   882c0:	2421c83a 	sub	r16,r4,r16
   882c4:	98c00615 	stw	r3,24(r19)
   882c8:	9c000415 	stw	r16,16(r19)
   882cc:	88001f1e 	bne	r17,zero,8834c <__d2b+0x108>
   882d0:	10bef384 	addi	r2,r2,-1074
   882d4:	90800015 	stw	r2,0(r18)
   882d8:	00900034 	movhi	r2,16384
   882dc:	10bfffc4 	addi	r2,r2,-1
   882e0:	8085883a 	add	r2,r16,r2
   882e4:	1085883a 	add	r2,r2,r2
   882e8:	1085883a 	add	r2,r2,r2
   882ec:	9885883a 	add	r2,r19,r2
   882f0:	11000517 	ldw	r4,20(r2)
   882f4:	8020917a 	slli	r16,r16,5
   882f8:	00878a40 	call	878a4 <__hi0bits>
   882fc:	d8c00817 	ldw	r3,32(sp)
   88300:	8085c83a 	sub	r2,r16,r2
   88304:	18800015 	stw	r2,0(r3)
   88308:	9805883a 	mov	r2,r19
   8830c:	dfc00717 	ldw	ra,28(sp)
   88310:	dd000617 	ldw	r20,24(sp)
   88314:	dcc00517 	ldw	r19,20(sp)
   88318:	dc800417 	ldw	r18,16(sp)
   8831c:	dc400317 	ldw	r17,12(sp)
   88320:	dc000217 	ldw	r16,8(sp)
   88324:	dec00804 	addi	sp,sp,32
   88328:	f800283a 	ret
   8832c:	d809883a 	mov	r4,sp
   88330:	008790c0 	call	8790c <__lo0bits>
   88334:	d8c00017 	ldw	r3,0(sp)
   88338:	04000044 	movi	r16,1
   8833c:	9c000415 	stw	r16,16(r19)
   88340:	98c00515 	stw	r3,20(r19)
   88344:	10800804 	addi	r2,r2,32
   88348:	883fe126 	beq	r17,zero,882d0 <rx_descriptor_end+0xfff88270>
   8834c:	00c00d44 	movi	r3,53
   88350:	8c7ef344 	addi	r17,r17,-1075
   88354:	88a3883a 	add	r17,r17,r2
   88358:	1885c83a 	sub	r2,r3,r2
   8835c:	d8c00817 	ldw	r3,32(sp)
   88360:	94400015 	stw	r17,0(r18)
   88364:	18800015 	stw	r2,0(r3)
   88368:	003fe706 	br	88308 <rx_descriptor_end+0xfff882a8>
   8836c:	01000804 	movi	r4,32
   88370:	2089c83a 	sub	r4,r4,r2
   88374:	1908983a 	sll	r4,r3,r4
   88378:	d9400117 	ldw	r5,4(sp)
   8837c:	1886d83a 	srl	r3,r3,r2
   88380:	2148b03a 	or	r4,r4,r5
   88384:	99000515 	stw	r4,20(r19)
   88388:	d8c00015 	stw	r3,0(sp)
   8838c:	003fca06 	br	882b8 <rx_descriptor_end+0xfff88258>

00088390 <__ratio>:
   88390:	defff904 	addi	sp,sp,-28
   88394:	dc400315 	stw	r17,12(sp)
   88398:	2823883a 	mov	r17,r5
   8839c:	d9400104 	addi	r5,sp,4
   883a0:	dfc00615 	stw	ra,24(sp)
   883a4:	dcc00515 	stw	r19,20(sp)
   883a8:	dc800415 	stw	r18,16(sp)
   883ac:	2027883a 	mov	r19,r4
   883b0:	dc000215 	stw	r16,8(sp)
   883b4:	00881380 	call	88138 <__b2d>
   883b8:	d80b883a 	mov	r5,sp
   883bc:	8809883a 	mov	r4,r17
   883c0:	1025883a 	mov	r18,r2
   883c4:	1821883a 	mov	r16,r3
   883c8:	00881380 	call	88138 <__b2d>
   883cc:	8a000417 	ldw	r8,16(r17)
   883d0:	99000417 	ldw	r4,16(r19)
   883d4:	d9400117 	ldw	r5,4(sp)
   883d8:	2209c83a 	sub	r4,r4,r8
   883dc:	2010917a 	slli	r8,r4,5
   883e0:	d9000017 	ldw	r4,0(sp)
   883e4:	2909c83a 	sub	r4,r5,r4
   883e8:	4109883a 	add	r4,r8,r4
   883ec:	01000e0e 	bge	zero,r4,88428 <__ratio+0x98>
   883f0:	2008953a 	slli	r4,r4,20
   883f4:	2421883a 	add	r16,r4,r16
   883f8:	100d883a 	mov	r6,r2
   883fc:	180f883a 	mov	r7,r3
   88400:	9009883a 	mov	r4,r18
   88404:	800b883a 	mov	r5,r16
   88408:	008c4280 	call	8c428 <__divdf3>
   8840c:	dfc00617 	ldw	ra,24(sp)
   88410:	dcc00517 	ldw	r19,20(sp)
   88414:	dc800417 	ldw	r18,16(sp)
   88418:	dc400317 	ldw	r17,12(sp)
   8841c:	dc000217 	ldw	r16,8(sp)
   88420:	dec00704 	addi	sp,sp,28
   88424:	f800283a 	ret
   88428:	2008953a 	slli	r4,r4,20
   8842c:	1907c83a 	sub	r3,r3,r4
   88430:	003ff106 	br	883f8 <rx_descriptor_end+0xfff88398>

00088434 <_mprec_log10>:
   88434:	defffe04 	addi	sp,sp,-8
   88438:	dc000015 	stw	r16,0(sp)
   8843c:	dfc00115 	stw	ra,4(sp)
   88440:	008005c4 	movi	r2,23
   88444:	2021883a 	mov	r16,r4
   88448:	11000d0e 	bge	r2,r4,88480 <_mprec_log10+0x4c>
   8844c:	0005883a 	mov	r2,zero
   88450:	00cffc34 	movhi	r3,16368
   88454:	843fffc4 	addi	r16,r16,-1
   88458:	000d883a 	mov	r6,zero
   8845c:	01d00934 	movhi	r7,16420
   88460:	1009883a 	mov	r4,r2
   88464:	180b883a 	mov	r5,r3
   88468:	008cf680 	call	8cf68 <__muldf3>
   8846c:	803ff91e 	bne	r16,zero,88454 <rx_descriptor_end+0xfff883f4>
   88470:	dfc00117 	ldw	ra,4(sp)
   88474:	dc000017 	ldw	r16,0(sp)
   88478:	dec00204 	addi	sp,sp,8
   8847c:	f800283a 	ret
   88480:	202090fa 	slli	r16,r4,3
   88484:	00800274 	movhi	r2,9
   88488:	10882104 	addi	r2,r2,8324
   8848c:	1421883a 	add	r16,r2,r16
   88490:	80800017 	ldw	r2,0(r16)
   88494:	80c00117 	ldw	r3,4(r16)
   88498:	dfc00117 	ldw	ra,4(sp)
   8849c:	dc000017 	ldw	r16,0(sp)
   884a0:	dec00204 	addi	sp,sp,8
   884a4:	f800283a 	ret

000884a8 <__copybits>:
   884a8:	297fffc4 	addi	r5,r5,-1
   884ac:	280fd17a 	srai	r7,r5,5
   884b0:	30c00417 	ldw	r3,16(r6)
   884b4:	30800504 	addi	r2,r6,20
   884b8:	39c00044 	addi	r7,r7,1
   884bc:	18c7883a 	add	r3,r3,r3
   884c0:	39cf883a 	add	r7,r7,r7
   884c4:	18c7883a 	add	r3,r3,r3
   884c8:	39cf883a 	add	r7,r7,r7
   884cc:	10c7883a 	add	r3,r2,r3
   884d0:	21cf883a 	add	r7,r4,r7
   884d4:	10c00d2e 	bgeu	r2,r3,8850c <__copybits+0x64>
   884d8:	200b883a 	mov	r5,r4
   884dc:	12000017 	ldw	r8,0(r2)
   884e0:	29400104 	addi	r5,r5,4
   884e4:	10800104 	addi	r2,r2,4
   884e8:	2a3fff15 	stw	r8,-4(r5)
   884ec:	10fffb36 	bltu	r2,r3,884dc <rx_descriptor_end+0xfff8847c>
   884f0:	1985c83a 	sub	r2,r3,r6
   884f4:	10bffac4 	addi	r2,r2,-21
   884f8:	1004d0ba 	srli	r2,r2,2
   884fc:	10800044 	addi	r2,r2,1
   88500:	1085883a 	add	r2,r2,r2
   88504:	1085883a 	add	r2,r2,r2
   88508:	2089883a 	add	r4,r4,r2
   8850c:	21c0032e 	bgeu	r4,r7,8851c <__copybits+0x74>
   88510:	20000015 	stw	zero,0(r4)
   88514:	21000104 	addi	r4,r4,4
   88518:	21fffd36 	bltu	r4,r7,88510 <rx_descriptor_end+0xfff884b0>
   8851c:	f800283a 	ret

00088520 <__any_on>:
   88520:	20c00417 	ldw	r3,16(r4)
   88524:	2805d17a 	srai	r2,r5,5
   88528:	21000504 	addi	r4,r4,20
   8852c:	18800d0e 	bge	r3,r2,88564 <__any_on+0x44>
   88530:	18c7883a 	add	r3,r3,r3
   88534:	18c7883a 	add	r3,r3,r3
   88538:	20c7883a 	add	r3,r4,r3
   8853c:	20c0192e 	bgeu	r4,r3,885a4 <__any_on+0x84>
   88540:	18bfff17 	ldw	r2,-4(r3)
   88544:	18ffff04 	addi	r3,r3,-4
   88548:	1000041e 	bne	r2,zero,8855c <__any_on+0x3c>
   8854c:	20c0142e 	bgeu	r4,r3,885a0 <__any_on+0x80>
   88550:	18ffff04 	addi	r3,r3,-4
   88554:	19400017 	ldw	r5,0(r3)
   88558:	283ffc26 	beq	r5,zero,8854c <rx_descriptor_end+0xfff884ec>
   8855c:	00800044 	movi	r2,1
   88560:	f800283a 	ret
   88564:	10c00a0e 	bge	r2,r3,88590 <__any_on+0x70>
   88568:	1085883a 	add	r2,r2,r2
   8856c:	1085883a 	add	r2,r2,r2
   88570:	294007cc 	andi	r5,r5,31
   88574:	2087883a 	add	r3,r4,r2
   88578:	283ff026 	beq	r5,zero,8853c <rx_descriptor_end+0xfff884dc>
   8857c:	19800017 	ldw	r6,0(r3)
   88580:	3144d83a 	srl	r2,r6,r5
   88584:	114a983a 	sll	r5,r2,r5
   88588:	317ff41e 	bne	r6,r5,8855c <rx_descriptor_end+0xfff884fc>
   8858c:	003feb06 	br	8853c <rx_descriptor_end+0xfff884dc>
   88590:	1085883a 	add	r2,r2,r2
   88594:	1085883a 	add	r2,r2,r2
   88598:	2087883a 	add	r3,r4,r2
   8859c:	003fe706 	br	8853c <rx_descriptor_end+0xfff884dc>
   885a0:	f800283a 	ret
   885a4:	0005883a 	mov	r2,zero
   885a8:	f800283a 	ret

000885ac <_read_r>:
   885ac:	defffd04 	addi	sp,sp,-12
   885b0:	2805883a 	mov	r2,r5
   885b4:	dc000015 	stw	r16,0(sp)
   885b8:	04000274 	movhi	r16,9
   885bc:	dc400115 	stw	r17,4(sp)
   885c0:	300b883a 	mov	r5,r6
   885c4:	84186b04 	addi	r16,r16,25004
   885c8:	2023883a 	mov	r17,r4
   885cc:	380d883a 	mov	r6,r7
   885d0:	1009883a 	mov	r4,r2
   885d4:	dfc00215 	stw	ra,8(sp)
   885d8:	80000015 	stw	zero,0(r16)
   885dc:	008ea940 	call	8ea94 <read>
   885e0:	00ffffc4 	movi	r3,-1
   885e4:	10c00526 	beq	r2,r3,885fc <_read_r+0x50>
   885e8:	dfc00217 	ldw	ra,8(sp)
   885ec:	dc400117 	ldw	r17,4(sp)
   885f0:	dc000017 	ldw	r16,0(sp)
   885f4:	dec00304 	addi	sp,sp,12
   885f8:	f800283a 	ret
   885fc:	80c00017 	ldw	r3,0(r16)
   88600:	183ff926 	beq	r3,zero,885e8 <rx_descriptor_end+0xfff88588>
   88604:	88c00015 	stw	r3,0(r17)
   88608:	003ff706 	br	885e8 <rx_descriptor_end+0xfff88588>

0008860c <__fpclassifyd>:
   8860c:	00a00034 	movhi	r2,32768
   88610:	10bfffc4 	addi	r2,r2,-1
   88614:	2884703a 	and	r2,r5,r2
   88618:	10000726 	beq	r2,zero,88638 <__fpclassifyd+0x2c>
   8861c:	00fffc34 	movhi	r3,65520
   88620:	019ff834 	movhi	r6,32736
   88624:	28c7883a 	add	r3,r5,r3
   88628:	31bfffc4 	addi	r6,r6,-1
   8862c:	30c00536 	bltu	r6,r3,88644 <__fpclassifyd+0x38>
   88630:	00800104 	movi	r2,4
   88634:	f800283a 	ret
   88638:	2000021e 	bne	r4,zero,88644 <__fpclassifyd+0x38>
   8863c:	00800084 	movi	r2,2
   88640:	f800283a 	ret
   88644:	00dffc34 	movhi	r3,32752
   88648:	019ff834 	movhi	r6,32736
   8864c:	28cb883a 	add	r5,r5,r3
   88650:	31bfffc4 	addi	r6,r6,-1
   88654:	317ff62e 	bgeu	r6,r5,88630 <rx_descriptor_end+0xfff885d0>
   88658:	01400434 	movhi	r5,16
   8865c:	297fffc4 	addi	r5,r5,-1
   88660:	28800236 	bltu	r5,r2,8866c <__fpclassifyd+0x60>
   88664:	008000c4 	movi	r2,3
   88668:	f800283a 	ret
   8866c:	10c00226 	beq	r2,r3,88678 <__fpclassifyd+0x6c>
   88670:	0005883a 	mov	r2,zero
   88674:	f800283a 	ret
   88678:	2005003a 	cmpeq	r2,r4,zero
   8867c:	f800283a 	ret

00088680 <strcmp>:
   88680:	2144b03a 	or	r2,r4,r5
   88684:	108000cc 	andi	r2,r2,3
   88688:	1000171e 	bne	r2,zero,886e8 <strcmp+0x68>
   8868c:	20800017 	ldw	r2,0(r4)
   88690:	28c00017 	ldw	r3,0(r5)
   88694:	10c0141e 	bne	r2,r3,886e8 <strcmp+0x68>
   88698:	027fbff4 	movhi	r9,65279
   8869c:	4a7fbfc4 	addi	r9,r9,-257
   886a0:	0086303a 	nor	r3,zero,r2
   886a4:	02202074 	movhi	r8,32897
   886a8:	1245883a 	add	r2,r2,r9
   886ac:	42202004 	addi	r8,r8,-32640
   886b0:	10c4703a 	and	r2,r2,r3
   886b4:	1204703a 	and	r2,r2,r8
   886b8:	10000226 	beq	r2,zero,886c4 <strcmp+0x44>
   886bc:	00002306 	br	8874c <strcmp+0xcc>
   886c0:	1000221e 	bne	r2,zero,8874c <strcmp+0xcc>
   886c4:	21000104 	addi	r4,r4,4
   886c8:	20c00017 	ldw	r3,0(r4)
   886cc:	29400104 	addi	r5,r5,4
   886d0:	29800017 	ldw	r6,0(r5)
   886d4:	1a4f883a 	add	r7,r3,r9
   886d8:	00c4303a 	nor	r2,zero,r3
   886dc:	3884703a 	and	r2,r7,r2
   886e0:	1204703a 	and	r2,r2,r8
   886e4:	19bff626 	beq	r3,r6,886c0 <rx_descriptor_end+0xfff88660>
   886e8:	20800003 	ldbu	r2,0(r4)
   886ec:	10c03fcc 	andi	r3,r2,255
   886f0:	18c0201c 	xori	r3,r3,128
   886f4:	18ffe004 	addi	r3,r3,-128
   886f8:	18000c26 	beq	r3,zero,8872c <strcmp+0xac>
   886fc:	29800007 	ldb	r6,0(r5)
   88700:	19800326 	beq	r3,r6,88710 <strcmp+0x90>
   88704:	00001306 	br	88754 <strcmp+0xd4>
   88708:	29800007 	ldb	r6,0(r5)
   8870c:	11800b1e 	bne	r2,r6,8873c <strcmp+0xbc>
   88710:	21000044 	addi	r4,r4,1
   88714:	20c00003 	ldbu	r3,0(r4)
   88718:	29400044 	addi	r5,r5,1
   8871c:	18803fcc 	andi	r2,r3,255
   88720:	1080201c 	xori	r2,r2,128
   88724:	10bfe004 	addi	r2,r2,-128
   88728:	103ff71e 	bne	r2,zero,88708 <rx_descriptor_end+0xfff886a8>
   8872c:	0007883a 	mov	r3,zero
   88730:	28800003 	ldbu	r2,0(r5)
   88734:	1885c83a 	sub	r2,r3,r2
   88738:	f800283a 	ret
   8873c:	28800003 	ldbu	r2,0(r5)
   88740:	18c03fcc 	andi	r3,r3,255
   88744:	1885c83a 	sub	r2,r3,r2
   88748:	f800283a 	ret
   8874c:	0005883a 	mov	r2,zero
   88750:	f800283a 	ret
   88754:	10c03fcc 	andi	r3,r2,255
   88758:	003ff506 	br	88730 <rx_descriptor_end+0xfff886d0>

0008875c <strlen>:
   8875c:	208000cc 	andi	r2,r4,3
   88760:	10002026 	beq	r2,zero,887e4 <strlen+0x88>
   88764:	20800007 	ldb	r2,0(r4)
   88768:	10002026 	beq	r2,zero,887ec <strlen+0x90>
   8876c:	2005883a 	mov	r2,r4
   88770:	00000206 	br	8877c <strlen+0x20>
   88774:	10c00007 	ldb	r3,0(r2)
   88778:	18001826 	beq	r3,zero,887dc <strlen+0x80>
   8877c:	10800044 	addi	r2,r2,1
   88780:	10c000cc 	andi	r3,r2,3
   88784:	183ffb1e 	bne	r3,zero,88774 <rx_descriptor_end+0xfff88714>
   88788:	10c00017 	ldw	r3,0(r2)
   8878c:	01ffbff4 	movhi	r7,65279
   88790:	39ffbfc4 	addi	r7,r7,-257
   88794:	00ca303a 	nor	r5,zero,r3
   88798:	01a02074 	movhi	r6,32897
   8879c:	19c7883a 	add	r3,r3,r7
   887a0:	31a02004 	addi	r6,r6,-32640
   887a4:	1946703a 	and	r3,r3,r5
   887a8:	1986703a 	and	r3,r3,r6
   887ac:	1800091e 	bne	r3,zero,887d4 <strlen+0x78>
   887b0:	10800104 	addi	r2,r2,4
   887b4:	10c00017 	ldw	r3,0(r2)
   887b8:	19cb883a 	add	r5,r3,r7
   887bc:	00c6303a 	nor	r3,zero,r3
   887c0:	28c6703a 	and	r3,r5,r3
   887c4:	1986703a 	and	r3,r3,r6
   887c8:	183ff926 	beq	r3,zero,887b0 <rx_descriptor_end+0xfff88750>
   887cc:	00000106 	br	887d4 <strlen+0x78>
   887d0:	10800044 	addi	r2,r2,1
   887d4:	10c00007 	ldb	r3,0(r2)
   887d8:	183ffd1e 	bne	r3,zero,887d0 <rx_descriptor_end+0xfff88770>
   887dc:	1105c83a 	sub	r2,r2,r4
   887e0:	f800283a 	ret
   887e4:	2005883a 	mov	r2,r4
   887e8:	003fe706 	br	88788 <rx_descriptor_end+0xfff88728>
   887ec:	0005883a 	mov	r2,zero
   887f0:	f800283a 	ret

000887f4 <__sprint_r.part.0>:
   887f4:	28801917 	ldw	r2,100(r5)
   887f8:	defff604 	addi	sp,sp,-40
   887fc:	dd400515 	stw	r21,20(sp)
   88800:	dfc00915 	stw	ra,36(sp)
   88804:	df000815 	stw	fp,32(sp)
   88808:	ddc00715 	stw	r23,28(sp)
   8880c:	dd800615 	stw	r22,24(sp)
   88810:	dd000415 	stw	r20,16(sp)
   88814:	dcc00315 	stw	r19,12(sp)
   88818:	dc800215 	stw	r18,8(sp)
   8881c:	dc400115 	stw	r17,4(sp)
   88820:	dc000015 	stw	r16,0(sp)
   88824:	1088000c 	andi	r2,r2,8192
   88828:	302b883a 	mov	r21,r6
   8882c:	10002e26 	beq	r2,zero,888e8 <__sprint_r.part.0+0xf4>
   88830:	30800217 	ldw	r2,8(r6)
   88834:	35800017 	ldw	r22,0(r6)
   88838:	10002926 	beq	r2,zero,888e0 <__sprint_r.part.0+0xec>
   8883c:	2827883a 	mov	r19,r5
   88840:	2029883a 	mov	r20,r4
   88844:	b5c00104 	addi	r23,r22,4
   88848:	04bfffc4 	movi	r18,-1
   8884c:	bc400017 	ldw	r17,0(r23)
   88850:	b4000017 	ldw	r16,0(r22)
   88854:	0039883a 	mov	fp,zero
   88858:	8822d0ba 	srli	r17,r17,2
   8885c:	8800031e 	bne	r17,zero,8886c <__sprint_r.part.0+0x78>
   88860:	00001806 	br	888c4 <__sprint_r.part.0+0xd0>
   88864:	84000104 	addi	r16,r16,4
   88868:	8f001526 	beq	r17,fp,888c0 <__sprint_r.part.0+0xcc>
   8886c:	81400017 	ldw	r5,0(r16)
   88870:	980d883a 	mov	r6,r19
   88874:	a009883a 	mov	r4,r20
   88878:	008a0640 	call	8a064 <_fputwc_r>
   8887c:	e7000044 	addi	fp,fp,1
   88880:	14bff81e 	bne	r2,r18,88864 <rx_descriptor_end+0xfff88804>
   88884:	9005883a 	mov	r2,r18
   88888:	a8000215 	stw	zero,8(r21)
   8888c:	a8000115 	stw	zero,4(r21)
   88890:	dfc00917 	ldw	ra,36(sp)
   88894:	df000817 	ldw	fp,32(sp)
   88898:	ddc00717 	ldw	r23,28(sp)
   8889c:	dd800617 	ldw	r22,24(sp)
   888a0:	dd400517 	ldw	r21,20(sp)
   888a4:	dd000417 	ldw	r20,16(sp)
   888a8:	dcc00317 	ldw	r19,12(sp)
   888ac:	dc800217 	ldw	r18,8(sp)
   888b0:	dc400117 	ldw	r17,4(sp)
   888b4:	dc000017 	ldw	r16,0(sp)
   888b8:	dec00a04 	addi	sp,sp,40
   888bc:	f800283a 	ret
   888c0:	a8800217 	ldw	r2,8(r21)
   888c4:	8c63883a 	add	r17,r17,r17
   888c8:	8c63883a 	add	r17,r17,r17
   888cc:	1445c83a 	sub	r2,r2,r17
   888d0:	a8800215 	stw	r2,8(r21)
   888d4:	b5800204 	addi	r22,r22,8
   888d8:	bdc00204 	addi	r23,r23,8
   888dc:	103fdb1e 	bne	r2,zero,8884c <rx_descriptor_end+0xfff887ec>
   888e0:	0005883a 	mov	r2,zero
   888e4:	003fe806 	br	88888 <rx_descriptor_end+0xfff88828>
   888e8:	008a1640 	call	8a164 <__sfvwrite_r>
   888ec:	003fe606 	br	88888 <rx_descriptor_end+0xfff88828>

000888f0 <__sprint_r>:
   888f0:	30c00217 	ldw	r3,8(r6)
   888f4:	18000126 	beq	r3,zero,888fc <__sprint_r+0xc>
   888f8:	00887f41 	jmpi	887f4 <__sprint_r.part.0>
   888fc:	30000115 	stw	zero,4(r6)
   88900:	0005883a 	mov	r2,zero
   88904:	f800283a 	ret

00088908 <___vfiprintf_internal_r>:
   88908:	deffc904 	addi	sp,sp,-220
   8890c:	df003515 	stw	fp,212(sp)
   88910:	dd003115 	stw	r20,196(sp)
   88914:	dfc03615 	stw	ra,216(sp)
   88918:	ddc03415 	stw	r23,208(sp)
   8891c:	dd803315 	stw	r22,204(sp)
   88920:	dd403215 	stw	r21,200(sp)
   88924:	dcc03015 	stw	r19,192(sp)
   88928:	dc802f15 	stw	r18,188(sp)
   8892c:	dc402e15 	stw	r17,184(sp)
   88930:	dc002d15 	stw	r16,180(sp)
   88934:	d9002015 	stw	r4,128(sp)
   88938:	d9c02215 	stw	r7,136(sp)
   8893c:	2829883a 	mov	r20,r5
   88940:	3039883a 	mov	fp,r6
   88944:	20000226 	beq	r4,zero,88950 <___vfiprintf_internal_r+0x48>
   88948:	20800e17 	ldw	r2,56(r4)
   8894c:	1000cf26 	beq	r2,zero,88c8c <___vfiprintf_internal_r+0x384>
   88950:	a080030b 	ldhu	r2,12(r20)
   88954:	10c8000c 	andi	r3,r2,8192
   88958:	1800061e 	bne	r3,zero,88974 <___vfiprintf_internal_r+0x6c>
   8895c:	a1001917 	ldw	r4,100(r20)
   88960:	00f7ffc4 	movi	r3,-8193
   88964:	10880014 	ori	r2,r2,8192
   88968:	20c6703a 	and	r3,r4,r3
   8896c:	a080030d 	sth	r2,12(r20)
   88970:	a0c01915 	stw	r3,100(r20)
   88974:	10c0020c 	andi	r3,r2,8
   88978:	1800a926 	beq	r3,zero,88c20 <___vfiprintf_internal_r+0x318>
   8897c:	a0c00417 	ldw	r3,16(r20)
   88980:	1800a726 	beq	r3,zero,88c20 <___vfiprintf_internal_r+0x318>
   88984:	1080068c 	andi	r2,r2,26
   88988:	00c00284 	movi	r3,10
   8898c:	10c0ac26 	beq	r2,r3,88c40 <___vfiprintf_internal_r+0x338>
   88990:	da801a04 	addi	r10,sp,104
   88994:	da801e15 	stw	r10,120(sp)
   88998:	d8801e17 	ldw	r2,120(sp)
   8899c:	da8019c4 	addi	r10,sp,103
   889a0:	05800274 	movhi	r22,9
   889a4:	05c00274 	movhi	r23,9
   889a8:	da801f15 	stw	r10,124(sp)
   889ac:	1295c83a 	sub	r10,r2,r10
   889b0:	b5885704 	addi	r22,r22,8540
   889b4:	bdc85304 	addi	r23,r23,8524
   889b8:	dec01a15 	stw	sp,104(sp)
   889bc:	d8001c15 	stw	zero,112(sp)
   889c0:	d8001b15 	stw	zero,108(sp)
   889c4:	d8002615 	stw	zero,152(sp)
   889c8:	d8002315 	stw	zero,140(sp)
   889cc:	da802715 	stw	r10,156(sp)
   889d0:	d811883a 	mov	r8,sp
   889d4:	dd002115 	stw	r20,132(sp)
   889d8:	e021883a 	mov	r16,fp
   889dc:	80800007 	ldb	r2,0(r16)
   889e0:	1003ea26 	beq	r2,zero,8998c <___vfiprintf_internal_r+0x1084>
   889e4:	00c00944 	movi	r3,37
   889e8:	8025883a 	mov	r18,r16
   889ec:	10c0021e 	bne	r2,r3,889f8 <___vfiprintf_internal_r+0xf0>
   889f0:	00001606 	br	88a4c <___vfiprintf_internal_r+0x144>
   889f4:	10c00326 	beq	r2,r3,88a04 <___vfiprintf_internal_r+0xfc>
   889f8:	94800044 	addi	r18,r18,1
   889fc:	90800007 	ldb	r2,0(r18)
   88a00:	103ffc1e 	bne	r2,zero,889f4 <rx_descriptor_end+0xfff88994>
   88a04:	9423c83a 	sub	r17,r18,r16
   88a08:	88001026 	beq	r17,zero,88a4c <___vfiprintf_internal_r+0x144>
   88a0c:	d8c01c17 	ldw	r3,112(sp)
   88a10:	d8801b17 	ldw	r2,108(sp)
   88a14:	44000015 	stw	r16,0(r8)
   88a18:	88c7883a 	add	r3,r17,r3
   88a1c:	10800044 	addi	r2,r2,1
   88a20:	44400115 	stw	r17,4(r8)
   88a24:	d8c01c15 	stw	r3,112(sp)
   88a28:	d8801b15 	stw	r2,108(sp)
   88a2c:	010001c4 	movi	r4,7
   88a30:	2080760e 	bge	r4,r2,88c0c <___vfiprintf_internal_r+0x304>
   88a34:	1803821e 	bne	r3,zero,89840 <___vfiprintf_internal_r+0xf38>
   88a38:	da802317 	ldw	r10,140(sp)
   88a3c:	d8001b15 	stw	zero,108(sp)
   88a40:	d811883a 	mov	r8,sp
   88a44:	5455883a 	add	r10,r10,r17
   88a48:	da802315 	stw	r10,140(sp)
   88a4c:	90800007 	ldb	r2,0(r18)
   88a50:	10044626 	beq	r2,zero,89b6c <___vfiprintf_internal_r+0x1264>
   88a54:	90c00047 	ldb	r3,1(r18)
   88a58:	94000044 	addi	r16,r18,1
   88a5c:	d8001d85 	stb	zero,118(sp)
   88a60:	0009883a 	mov	r4,zero
   88a64:	000f883a 	mov	r7,zero
   88a68:	027fffc4 	movi	r9,-1
   88a6c:	0023883a 	mov	r17,zero
   88a70:	0029883a 	mov	r20,zero
   88a74:	01401604 	movi	r5,88
   88a78:	01800244 	movi	r6,9
   88a7c:	03400a84 	movi	r13,42
   88a80:	03001b04 	movi	r12,108
   88a84:	84000044 	addi	r16,r16,1
   88a88:	18bff804 	addi	r2,r3,-32
   88a8c:	28827336 	bltu	r5,r2,8945c <___vfiprintf_internal_r+0xb54>
   88a90:	100490ba 	slli	r2,r2,2
   88a94:	02800274 	movhi	r10,9
   88a98:	52a2aa04 	addi	r10,r10,-30040
   88a9c:	1285883a 	add	r2,r2,r10
   88aa0:	10800017 	ldw	r2,0(r2)
   88aa4:	1000683a 	jmp	r2
   88aa8:	00089190 	cmplti	zero,zero,8774
   88aac:	0008945c 	xori	zero,zero,8785
   88ab0:	0008945c 	xori	zero,zero,8785
   88ab4:	000891b0 	cmpltui	zero,zero,8774
   88ab8:	0008945c 	xori	zero,zero,8785
   88abc:	0008945c 	xori	zero,zero,8785
   88ac0:	0008945c 	xori	zero,zero,8785
   88ac4:	0008945c 	xori	zero,zero,8785
   88ac8:	0008945c 	xori	zero,zero,8785
   88acc:	0008945c 	xori	zero,zero,8785
   88ad0:	00089398 	cmpnei	zero,zero,8782
   88ad4:	000893b4 	movhi	zero,8782
   88ad8:	0008945c 	xori	zero,zero,8785
   88adc:	00088c9c 	xori	zero,zero,8754
   88ae0:	000893c4 	movi	zero,8783
   88ae4:	0008945c 	xori	zero,zero,8785
   88ae8:	000891bc 	xorhi	zero,zero,8774
   88aec:	000891c8 	cmpgei	zero,zero,8775
   88af0:	000891c8 	cmpgei	zero,zero,8775
   88af4:	000891c8 	cmpgei	zero,zero,8775
   88af8:	000891c8 	cmpgei	zero,zero,8775
   88afc:	000891c8 	cmpgei	zero,zero,8775
   88b00:	000891c8 	cmpgei	zero,zero,8775
   88b04:	000891c8 	cmpgei	zero,zero,8775
   88b08:	000891c8 	cmpgei	zero,zero,8775
   88b0c:	000891c8 	cmpgei	zero,zero,8775
   88b10:	0008945c 	xori	zero,zero,8785
   88b14:	0008945c 	xori	zero,zero,8785
   88b18:	0008945c 	xori	zero,zero,8785
   88b1c:	0008945c 	xori	zero,zero,8785
   88b20:	0008945c 	xori	zero,zero,8785
   88b24:	0008945c 	xori	zero,zero,8785
   88b28:	0008945c 	xori	zero,zero,8785
   88b2c:	0008945c 	xori	zero,zero,8785
   88b30:	0008945c 	xori	zero,zero,8785
   88b34:	0008945c 	xori	zero,zero,8785
   88b38:	000891f4 	movhi	zero,8775
   88b3c:	0008945c 	xori	zero,zero,8785
   88b40:	0008945c 	xori	zero,zero,8785
   88b44:	0008945c 	xori	zero,zero,8785
   88b48:	0008945c 	xori	zero,zero,8785
   88b4c:	0008945c 	xori	zero,zero,8785
   88b50:	0008945c 	xori	zero,zero,8785
   88b54:	0008945c 	xori	zero,zero,8785
   88b58:	0008945c 	xori	zero,zero,8785
   88b5c:	0008945c 	xori	zero,zero,8785
   88b60:	0008945c 	xori	zero,zero,8785
   88b64:	0008922c 	andhi	zero,zero,8776
   88b68:	0008945c 	xori	zero,zero,8785
   88b6c:	0008945c 	xori	zero,zero,8785
   88b70:	0008945c 	xori	zero,zero,8785
   88b74:	0008945c 	xori	zero,zero,8785
   88b78:	0008945c 	xori	zero,zero,8785
   88b7c:	00089284 	movi	zero,8778
   88b80:	0008945c 	xori	zero,zero,8785
   88b84:	0008945c 	xori	zero,zero,8785
   88b88:	000892f4 	movhi	zero,8779
   88b8c:	0008945c 	xori	zero,zero,8785
   88b90:	0008945c 	xori	zero,zero,8785
   88b94:	0008945c 	xori	zero,zero,8785
   88b98:	0008945c 	xori	zero,zero,8785
   88b9c:	0008945c 	xori	zero,zero,8785
   88ba0:	0008945c 	xori	zero,zero,8785
   88ba4:	0008945c 	xori	zero,zero,8785
   88ba8:	0008945c 	xori	zero,zero,8785
   88bac:	0008945c 	xori	zero,zero,8785
   88bb0:	0008945c 	xori	zero,zero,8785
   88bb4:	000890a0 	cmpeqi	zero,zero,8770
   88bb8:	000890cc 	andi	zero,zero,8771
   88bbc:	0008945c 	xori	zero,zero,8785
   88bc0:	0008945c 	xori	zero,zero,8785
   88bc4:	0008945c 	xori	zero,zero,8785
   88bc8:	00089404 	movi	zero,8784
   88bcc:	000890cc 	andi	zero,zero,8771
   88bd0:	0008945c 	xori	zero,zero,8785
   88bd4:	0008945c 	xori	zero,zero,8785
   88bd8:	00088f60 	cmpeqi	zero,zero,8765
   88bdc:	0008945c 	xori	zero,zero,8785
   88be0:	00088f70 	cmpltui	zero,zero,8765
   88be4:	00088fac 	andhi	zero,zero,8766
   88be8:	00088ca8 	cmpgeui	zero,zero,8754
   88bec:	00088f54 	movui	zero,8765
   88bf0:	0008945c 	xori	zero,zero,8785
   88bf4:	00089330 	cmpltui	zero,zero,8780
   88bf8:	0008945c 	xori	zero,zero,8785
   88bfc:	00089388 	cmpgei	zero,zero,8782
   88c00:	0008945c 	xori	zero,zero,8785
   88c04:	0008945c 	xori	zero,zero,8785
   88c08:	0008904c 	andi	zero,zero,8769
   88c0c:	42000204 	addi	r8,r8,8
   88c10:	da802317 	ldw	r10,140(sp)
   88c14:	5455883a 	add	r10,r10,r17
   88c18:	da802315 	stw	r10,140(sp)
   88c1c:	003f8b06 	br	88a4c <rx_descriptor_end+0xfff889ec>
   88c20:	d9002017 	ldw	r4,128(sp)
   88c24:	a00b883a 	mov	r5,r20
   88c28:	00855580 	call	85558 <__swsetup_r>
   88c2c:	1003b11e 	bne	r2,zero,89af4 <___vfiprintf_internal_r+0x11ec>
   88c30:	a080030b 	ldhu	r2,12(r20)
   88c34:	00c00284 	movi	r3,10
   88c38:	1080068c 	andi	r2,r2,26
   88c3c:	10ff541e 	bne	r2,r3,88990 <rx_descriptor_end+0xfff88930>
   88c40:	a080038f 	ldh	r2,14(r20)
   88c44:	103f5216 	blt	r2,zero,88990 <rx_descriptor_end+0xfff88930>
   88c48:	d9c02217 	ldw	r7,136(sp)
   88c4c:	d9002017 	ldw	r4,128(sp)
   88c50:	e00d883a 	mov	r6,fp
   88c54:	a00b883a 	mov	r5,r20
   88c58:	0089d800 	call	89d80 <__sbprintf>
   88c5c:	dfc03617 	ldw	ra,216(sp)
   88c60:	df003517 	ldw	fp,212(sp)
   88c64:	ddc03417 	ldw	r23,208(sp)
   88c68:	dd803317 	ldw	r22,204(sp)
   88c6c:	dd403217 	ldw	r21,200(sp)
   88c70:	dd003117 	ldw	r20,196(sp)
   88c74:	dcc03017 	ldw	r19,192(sp)
   88c78:	dc802f17 	ldw	r18,188(sp)
   88c7c:	dc402e17 	ldw	r17,184(sp)
   88c80:	dc002d17 	ldw	r16,180(sp)
   88c84:	dec03704 	addi	sp,sp,220
   88c88:	f800283a 	ret
   88c8c:	0081f680 	call	81f68 <__sinit>
   88c90:	003f2f06 	br	88950 <rx_descriptor_end+0xfff888f0>
   88c94:	0463c83a 	sub	r17,zero,r17
   88c98:	d8802215 	stw	r2,136(sp)
   88c9c:	a5000114 	ori	r20,r20,4
   88ca0:	80c00007 	ldb	r3,0(r16)
   88ca4:	003f7706 	br	88a84 <rx_descriptor_end+0xfff88a24>
   88ca8:	00800c04 	movi	r2,48
   88cac:	da802217 	ldw	r10,136(sp)
   88cb0:	d8801d05 	stb	r2,116(sp)
   88cb4:	00801e04 	movi	r2,120
   88cb8:	d8801d45 	stb	r2,117(sp)
   88cbc:	d8001d85 	stb	zero,118(sp)
   88cc0:	50c00104 	addi	r3,r10,4
   88cc4:	54800017 	ldw	r18,0(r10)
   88cc8:	0027883a 	mov	r19,zero
   88ccc:	a0800094 	ori	r2,r20,2
   88cd0:	48030b16 	blt	r9,zero,89900 <___vfiprintf_internal_r+0xff8>
   88cd4:	00bfdfc4 	movi	r2,-129
   88cd8:	a096703a 	and	r11,r20,r2
   88cdc:	d8c02215 	stw	r3,136(sp)
   88ce0:	5d000094 	ori	r20,r11,2
   88ce4:	90032b1e 	bne	r18,zero,89994 <___vfiprintf_internal_r+0x108c>
   88ce8:	00800274 	movhi	r2,9
   88cec:	1087f304 	addi	r2,r2,8140
   88cf0:	d8802615 	stw	r2,152(sp)
   88cf4:	0039883a 	mov	fp,zero
   88cf8:	48017b1e 	bne	r9,zero,892e8 <___vfiprintf_internal_r+0x9e0>
   88cfc:	0013883a 	mov	r9,zero
   88d00:	0027883a 	mov	r19,zero
   88d04:	dd401a04 	addi	r21,sp,104
   88d08:	4825883a 	mov	r18,r9
   88d0c:	4cc0010e 	bge	r9,r19,88d14 <___vfiprintf_internal_r+0x40c>
   88d10:	9825883a 	mov	r18,r19
   88d14:	e7003fcc 	andi	fp,fp,255
   88d18:	e700201c 	xori	fp,fp,128
   88d1c:	e73fe004 	addi	fp,fp,-128
   88d20:	e0000126 	beq	fp,zero,88d28 <___vfiprintf_internal_r+0x420>
   88d24:	94800044 	addi	r18,r18,1
   88d28:	a380008c 	andi	r14,r20,2
   88d2c:	70000126 	beq	r14,zero,88d34 <___vfiprintf_internal_r+0x42c>
   88d30:	94800084 	addi	r18,r18,2
   88d34:	a700210c 	andi	fp,r20,132
   88d38:	e001df1e 	bne	fp,zero,894b8 <___vfiprintf_internal_r+0xbb0>
   88d3c:	8c87c83a 	sub	r3,r17,r18
   88d40:	00c1dd0e 	bge	zero,r3,894b8 <___vfiprintf_internal_r+0xbb0>
   88d44:	01c00404 	movi	r7,16
   88d48:	d8801c17 	ldw	r2,112(sp)
   88d4c:	38c3ad0e 	bge	r7,r3,89c04 <___vfiprintf_internal_r+0x12fc>
   88d50:	02800274 	movhi	r10,9
   88d54:	52885704 	addi	r10,r10,8540
   88d58:	dc002915 	stw	r16,164(sp)
   88d5c:	d9801b17 	ldw	r6,108(sp)
   88d60:	da802415 	stw	r10,144(sp)
   88d64:	03c001c4 	movi	r15,7
   88d68:	da402515 	stw	r9,148(sp)
   88d6c:	db802815 	stw	r14,160(sp)
   88d70:	1821883a 	mov	r16,r3
   88d74:	00000506 	br	88d8c <___vfiprintf_internal_r+0x484>
   88d78:	31400084 	addi	r5,r6,2
   88d7c:	42000204 	addi	r8,r8,8
   88d80:	200d883a 	mov	r6,r4
   88d84:	843ffc04 	addi	r16,r16,-16
   88d88:	3c000d0e 	bge	r7,r16,88dc0 <___vfiprintf_internal_r+0x4b8>
   88d8c:	10800404 	addi	r2,r2,16
   88d90:	31000044 	addi	r4,r6,1
   88d94:	45800015 	stw	r22,0(r8)
   88d98:	41c00115 	stw	r7,4(r8)
   88d9c:	d8801c15 	stw	r2,112(sp)
   88da0:	d9001b15 	stw	r4,108(sp)
   88da4:	793ff40e 	bge	r15,r4,88d78 <rx_descriptor_end+0xfff88d18>
   88da8:	1001b51e 	bne	r2,zero,89480 <___vfiprintf_internal_r+0xb78>
   88dac:	843ffc04 	addi	r16,r16,-16
   88db0:	000d883a 	mov	r6,zero
   88db4:	01400044 	movi	r5,1
   88db8:	d811883a 	mov	r8,sp
   88dbc:	3c3ff316 	blt	r7,r16,88d8c <rx_descriptor_end+0xfff88d2c>
   88dc0:	8007883a 	mov	r3,r16
   88dc4:	da402517 	ldw	r9,148(sp)
   88dc8:	db802817 	ldw	r14,160(sp)
   88dcc:	dc002917 	ldw	r16,164(sp)
   88dd0:	da802417 	ldw	r10,144(sp)
   88dd4:	1885883a 	add	r2,r3,r2
   88dd8:	40c00115 	stw	r3,4(r8)
   88ddc:	42800015 	stw	r10,0(r8)
   88de0:	d8801c15 	stw	r2,112(sp)
   88de4:	d9401b15 	stw	r5,108(sp)
   88de8:	00c001c4 	movi	r3,7
   88dec:	19426016 	blt	r3,r5,89770 <___vfiprintf_internal_r+0xe68>
   88df0:	d8c01d87 	ldb	r3,118(sp)
   88df4:	42000204 	addi	r8,r8,8
   88df8:	29000044 	addi	r4,r5,1
   88dfc:	1801b31e 	bne	r3,zero,894cc <___vfiprintf_internal_r+0xbc4>
   88e00:	7001c026 	beq	r14,zero,89504 <___vfiprintf_internal_r+0xbfc>
   88e04:	d8c01d04 	addi	r3,sp,116
   88e08:	10800084 	addi	r2,r2,2
   88e0c:	40c00015 	stw	r3,0(r8)
   88e10:	00c00084 	movi	r3,2
   88e14:	40c00115 	stw	r3,4(r8)
   88e18:	d8801c15 	stw	r2,112(sp)
   88e1c:	d9001b15 	stw	r4,108(sp)
   88e20:	00c001c4 	movi	r3,7
   88e24:	1902650e 	bge	r3,r4,897bc <___vfiprintf_internal_r+0xeb4>
   88e28:	10029a1e 	bne	r2,zero,89894 <___vfiprintf_internal_r+0xf8c>
   88e2c:	00c02004 	movi	r3,128
   88e30:	01000044 	movi	r4,1
   88e34:	000b883a 	mov	r5,zero
   88e38:	d811883a 	mov	r8,sp
   88e3c:	e0c1b31e 	bne	fp,r3,8950c <___vfiprintf_internal_r+0xc04>
   88e40:	8cb9c83a 	sub	fp,r17,r18
   88e44:	0701b10e 	bge	zero,fp,8950c <___vfiprintf_internal_r+0xc04>
   88e48:	01c00404 	movi	r7,16
   88e4c:	3f03890e 	bge	r7,fp,89c74 <___vfiprintf_internal_r+0x136c>
   88e50:	00c00274 	movhi	r3,9
   88e54:	18c85304 	addi	r3,r3,8524
   88e58:	d8c02415 	stw	r3,144(sp)
   88e5c:	8007883a 	mov	r3,r16
   88e60:	034001c4 	movi	r13,7
   88e64:	e021883a 	mov	r16,fp
   88e68:	da402515 	stw	r9,148(sp)
   88e6c:	1839883a 	mov	fp,r3
   88e70:	00000506 	br	88e88 <___vfiprintf_internal_r+0x580>
   88e74:	29800084 	addi	r6,r5,2
   88e78:	42000204 	addi	r8,r8,8
   88e7c:	180b883a 	mov	r5,r3
   88e80:	843ffc04 	addi	r16,r16,-16
   88e84:	3c000d0e 	bge	r7,r16,88ebc <___vfiprintf_internal_r+0x5b4>
   88e88:	10800404 	addi	r2,r2,16
   88e8c:	28c00044 	addi	r3,r5,1
   88e90:	45c00015 	stw	r23,0(r8)
   88e94:	41c00115 	stw	r7,4(r8)
   88e98:	d8801c15 	stw	r2,112(sp)
   88e9c:	d8c01b15 	stw	r3,108(sp)
   88ea0:	68fff40e 	bge	r13,r3,88e74 <rx_descriptor_end+0xfff88e14>
   88ea4:	1002241e 	bne	r2,zero,89738 <___vfiprintf_internal_r+0xe30>
   88ea8:	843ffc04 	addi	r16,r16,-16
   88eac:	01800044 	movi	r6,1
   88eb0:	000b883a 	mov	r5,zero
   88eb4:	d811883a 	mov	r8,sp
   88eb8:	3c3ff316 	blt	r7,r16,88e88 <rx_descriptor_end+0xfff88e28>
   88ebc:	da402517 	ldw	r9,148(sp)
   88ec0:	e007883a 	mov	r3,fp
   88ec4:	8039883a 	mov	fp,r16
   88ec8:	1821883a 	mov	r16,r3
   88ecc:	d8c02417 	ldw	r3,144(sp)
   88ed0:	1705883a 	add	r2,r2,fp
   88ed4:	47000115 	stw	fp,4(r8)
   88ed8:	40c00015 	stw	r3,0(r8)
   88edc:	d8801c15 	stw	r2,112(sp)
   88ee0:	d9801b15 	stw	r6,108(sp)
   88ee4:	00c001c4 	movi	r3,7
   88ee8:	19827616 	blt	r3,r6,898c4 <___vfiprintf_internal_r+0xfbc>
   88eec:	4cf9c83a 	sub	fp,r9,r19
   88ef0:	42000204 	addi	r8,r8,8
   88ef4:	31000044 	addi	r4,r6,1
   88ef8:	300b883a 	mov	r5,r6
   88efc:	07018516 	blt	zero,fp,89514 <___vfiprintf_internal_r+0xc0c>
   88f00:	9885883a 	add	r2,r19,r2
   88f04:	45400015 	stw	r21,0(r8)
   88f08:	44c00115 	stw	r19,4(r8)
   88f0c:	d8801c15 	stw	r2,112(sp)
   88f10:	d9001b15 	stw	r4,108(sp)
   88f14:	00c001c4 	movi	r3,7
   88f18:	1901dd0e 	bge	r3,r4,89690 <___vfiprintf_internal_r+0xd88>
   88f1c:	1002401e 	bne	r2,zero,89820 <___vfiprintf_internal_r+0xf18>
   88f20:	d8001b15 	stw	zero,108(sp)
   88f24:	a2c0010c 	andi	r11,r20,4
   88f28:	58000226 	beq	r11,zero,88f34 <___vfiprintf_internal_r+0x62c>
   88f2c:	8ca7c83a 	sub	r19,r17,r18
   88f30:	04c2f216 	blt	zero,r19,89afc <___vfiprintf_internal_r+0x11f4>
   88f34:	8c80010e 	bge	r17,r18,88f3c <___vfiprintf_internal_r+0x634>
   88f38:	9023883a 	mov	r17,r18
   88f3c:	da802317 	ldw	r10,140(sp)
   88f40:	5455883a 	add	r10,r10,r17
   88f44:	da802315 	stw	r10,140(sp)
   88f48:	d8001b15 	stw	zero,108(sp)
   88f4c:	d811883a 	mov	r8,sp
   88f50:	003ea206 	br	889dc <rx_descriptor_end+0xfff8897c>
   88f54:	a5000814 	ori	r20,r20,32
   88f58:	80c00007 	ldb	r3,0(r16)
   88f5c:	003ec906 	br	88a84 <rx_descriptor_end+0xfff88a24>
   88f60:	80c00007 	ldb	r3,0(r16)
   88f64:	1b030926 	beq	r3,r12,89b8c <___vfiprintf_internal_r+0x1284>
   88f68:	a5000414 	ori	r20,r20,16
   88f6c:	003ec506 	br	88a84 <rx_descriptor_end+0xfff88a24>
   88f70:	21003fcc 	andi	r4,r4,255
   88f74:	20035e1e 	bne	r4,zero,89cf0 <___vfiprintf_internal_r+0x13e8>
   88f78:	a080080c 	andi	r2,r20,32
   88f7c:	1002a526 	beq	r2,zero,89a14 <___vfiprintf_internal_r+0x110c>
   88f80:	da802217 	ldw	r10,136(sp)
   88f84:	50800017 	ldw	r2,0(r10)
   88f88:	da802317 	ldw	r10,140(sp)
   88f8c:	5007d7fa 	srai	r3,r10,31
   88f90:	da802217 	ldw	r10,136(sp)
   88f94:	10c00115 	stw	r3,4(r2)
   88f98:	52800104 	addi	r10,r10,4
   88f9c:	da802215 	stw	r10,136(sp)
   88fa0:	da802317 	ldw	r10,140(sp)
   88fa4:	12800015 	stw	r10,0(r2)
   88fa8:	003e8c06 	br	889dc <rx_descriptor_end+0xfff8897c>
   88fac:	21003fcc 	andi	r4,r4,255
   88fb0:	2003511e 	bne	r4,zero,89cf8 <___vfiprintf_internal_r+0x13f0>
   88fb4:	a080080c 	andi	r2,r20,32
   88fb8:	1000a126 	beq	r2,zero,89240 <___vfiprintf_internal_r+0x938>
   88fbc:	da802217 	ldw	r10,136(sp)
   88fc0:	d8001d85 	stb	zero,118(sp)
   88fc4:	50800204 	addi	r2,r10,8
   88fc8:	54800017 	ldw	r18,0(r10)
   88fcc:	54c00117 	ldw	r19,4(r10)
   88fd0:	4802b416 	blt	r9,zero,89aa4 <___vfiprintf_internal_r+0x119c>
   88fd4:	013fdfc4 	movi	r4,-129
   88fd8:	94c6b03a 	or	r3,r18,r19
   88fdc:	d8802215 	stw	r2,136(sp)
   88fe0:	a128703a 	and	r20,r20,r4
   88fe4:	1800a226 	beq	r3,zero,89270 <___vfiprintf_internal_r+0x968>
   88fe8:	0039883a 	mov	fp,zero
   88fec:	dd401a04 	addi	r21,sp,104
   88ff0:	9006d0fa 	srli	r3,r18,3
   88ff4:	9808977a 	slli	r4,r19,29
   88ff8:	9826d0fa 	srli	r19,r19,3
   88ffc:	948001cc 	andi	r18,r18,7
   89000:	90800c04 	addi	r2,r18,48
   89004:	ad7fffc4 	addi	r21,r21,-1
   89008:	20e4b03a 	or	r18,r4,r3
   8900c:	a8800005 	stb	r2,0(r21)
   89010:	94c6b03a 	or	r3,r18,r19
   89014:	183ff61e 	bne	r3,zero,88ff0 <rx_descriptor_end+0xfff88f90>
   89018:	a0c0004c 	andi	r3,r20,1
   8901c:	18005926 	beq	r3,zero,89184 <___vfiprintf_internal_r+0x87c>
   89020:	10803fcc 	andi	r2,r2,255
   89024:	1080201c 	xori	r2,r2,128
   89028:	10bfe004 	addi	r2,r2,-128
   8902c:	00c00c04 	movi	r3,48
   89030:	10c05426 	beq	r2,r3,89184 <___vfiprintf_internal_r+0x87c>
   89034:	da801e17 	ldw	r10,120(sp)
   89038:	a8bfffc4 	addi	r2,r21,-1
   8903c:	a8ffffc5 	stb	r3,-1(r21)
   89040:	50a7c83a 	sub	r19,r10,r2
   89044:	102b883a 	mov	r21,r2
   89048:	003f2f06 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   8904c:	21003fcc 	andi	r4,r4,255
   89050:	2003421e 	bne	r4,zero,89d5c <___vfiprintf_internal_r+0x1454>
   89054:	00800274 	movhi	r2,9
   89058:	1087f304 	addi	r2,r2,8140
   8905c:	d8802615 	stw	r2,152(sp)
   89060:	a080080c 	andi	r2,r20,32
   89064:	1000aa26 	beq	r2,zero,89310 <___vfiprintf_internal_r+0xa08>
   89068:	da802217 	ldw	r10,136(sp)
   8906c:	54800017 	ldw	r18,0(r10)
   89070:	54c00117 	ldw	r19,4(r10)
   89074:	52800204 	addi	r10,r10,8
   89078:	da802215 	stw	r10,136(sp)
   8907c:	a080004c 	andi	r2,r20,1
   89080:	1001d226 	beq	r2,zero,897cc <___vfiprintf_internal_r+0xec4>
   89084:	94c4b03a 	or	r2,r18,r19
   89088:	1002351e 	bne	r2,zero,89960 <___vfiprintf_internal_r+0x1058>
   8908c:	d8001d85 	stb	zero,118(sp)
   89090:	48022216 	blt	r9,zero,8991c <___vfiprintf_internal_r+0x1014>
   89094:	00bfdfc4 	movi	r2,-129
   89098:	a0a8703a 	and	r20,r20,r2
   8909c:	003f1506 	br	88cf4 <rx_descriptor_end+0xfff88c94>
   890a0:	da802217 	ldw	r10,136(sp)
   890a4:	04800044 	movi	r18,1
   890a8:	d8001d85 	stb	zero,118(sp)
   890ac:	50800017 	ldw	r2,0(r10)
   890b0:	52800104 	addi	r10,r10,4
   890b4:	da802215 	stw	r10,136(sp)
   890b8:	d8801005 	stb	r2,64(sp)
   890bc:	9027883a 	mov	r19,r18
   890c0:	dd401004 	addi	r21,sp,64
   890c4:	0013883a 	mov	r9,zero
   890c8:	003f1706 	br	88d28 <rx_descriptor_end+0xfff88cc8>
   890cc:	21003fcc 	andi	r4,r4,255
   890d0:	2003201e 	bne	r4,zero,89d54 <___vfiprintf_internal_r+0x144c>
   890d4:	a080080c 	andi	r2,r20,32
   890d8:	10004b26 	beq	r2,zero,89208 <___vfiprintf_internal_r+0x900>
   890dc:	da802217 	ldw	r10,136(sp)
   890e0:	50800117 	ldw	r2,4(r10)
   890e4:	54800017 	ldw	r18,0(r10)
   890e8:	52800204 	addi	r10,r10,8
   890ec:	da802215 	stw	r10,136(sp)
   890f0:	1027883a 	mov	r19,r2
   890f4:	10022c16 	blt	r2,zero,899a8 <___vfiprintf_internal_r+0x10a0>
   890f8:	df001d83 	ldbu	fp,118(sp)
   890fc:	48007216 	blt	r9,zero,892c8 <___vfiprintf_internal_r+0x9c0>
   89100:	00ffdfc4 	movi	r3,-129
   89104:	94c4b03a 	or	r2,r18,r19
   89108:	a0e8703a 	and	r20,r20,r3
   8910c:	1000cc26 	beq	r2,zero,89440 <___vfiprintf_internal_r+0xb38>
   89110:	98021026 	beq	r19,zero,89954 <___vfiprintf_internal_r+0x104c>
   89114:	dc402415 	stw	r17,144(sp)
   89118:	dc002515 	stw	r16,148(sp)
   8911c:	9823883a 	mov	r17,r19
   89120:	9021883a 	mov	r16,r18
   89124:	dd401a04 	addi	r21,sp,104
   89128:	4825883a 	mov	r18,r9
   8912c:	4027883a 	mov	r19,r8
   89130:	8009883a 	mov	r4,r16
   89134:	880b883a 	mov	r5,r17
   89138:	01800284 	movi	r6,10
   8913c:	000f883a 	mov	r7,zero
   89140:	008b4900 	call	8b490 <__umoddi3>
   89144:	10800c04 	addi	r2,r2,48
   89148:	ad7fffc4 	addi	r21,r21,-1
   8914c:	8009883a 	mov	r4,r16
   89150:	880b883a 	mov	r5,r17
   89154:	a8800005 	stb	r2,0(r21)
   89158:	01800284 	movi	r6,10
   8915c:	000f883a 	mov	r7,zero
   89160:	008af180 	call	8af18 <__udivdi3>
   89164:	1021883a 	mov	r16,r2
   89168:	10c4b03a 	or	r2,r2,r3
   8916c:	1823883a 	mov	r17,r3
   89170:	103fef1e 	bne	r2,zero,89130 <rx_descriptor_end+0xfff890d0>
   89174:	dc402417 	ldw	r17,144(sp)
   89178:	dc002517 	ldw	r16,148(sp)
   8917c:	9013883a 	mov	r9,r18
   89180:	9811883a 	mov	r8,r19
   89184:	da801e17 	ldw	r10,120(sp)
   89188:	5567c83a 	sub	r19,r10,r21
   8918c:	003ede06 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   89190:	38803fcc 	andi	r2,r7,255
   89194:	1080201c 	xori	r2,r2,128
   89198:	10bfe004 	addi	r2,r2,-128
   8919c:	1002371e 	bne	r2,zero,89a7c <___vfiprintf_internal_r+0x1174>
   891a0:	01000044 	movi	r4,1
   891a4:	01c00804 	movi	r7,32
   891a8:	80c00007 	ldb	r3,0(r16)
   891ac:	003e3506 	br	88a84 <rx_descriptor_end+0xfff88a24>
   891b0:	a5000054 	ori	r20,r20,1
   891b4:	80c00007 	ldb	r3,0(r16)
   891b8:	003e3206 	br	88a84 <rx_descriptor_end+0xfff88a24>
   891bc:	a5002014 	ori	r20,r20,128
   891c0:	80c00007 	ldb	r3,0(r16)
   891c4:	003e2f06 	br	88a84 <rx_descriptor_end+0xfff88a24>
   891c8:	8015883a 	mov	r10,r16
   891cc:	0023883a 	mov	r17,zero
   891d0:	18bff404 	addi	r2,r3,-48
   891d4:	50c00007 	ldb	r3,0(r10)
   891d8:	8c4002a4 	muli	r17,r17,10
   891dc:	84000044 	addi	r16,r16,1
   891e0:	8015883a 	mov	r10,r16
   891e4:	1463883a 	add	r17,r2,r17
   891e8:	18bff404 	addi	r2,r3,-48
   891ec:	30bff92e 	bgeu	r6,r2,891d4 <rx_descriptor_end+0xfff89174>
   891f0:	003e2506 	br	88a88 <rx_descriptor_end+0xfff88a28>
   891f4:	21003fcc 	andi	r4,r4,255
   891f8:	2002d41e 	bne	r4,zero,89d4c <___vfiprintf_internal_r+0x1444>
   891fc:	a5000414 	ori	r20,r20,16
   89200:	a080080c 	andi	r2,r20,32
   89204:	103fb51e 	bne	r2,zero,890dc <rx_descriptor_end+0xfff8907c>
   89208:	a080040c 	andi	r2,r20,16
   8920c:	1001f826 	beq	r2,zero,899f0 <___vfiprintf_internal_r+0x10e8>
   89210:	da802217 	ldw	r10,136(sp)
   89214:	54800017 	ldw	r18,0(r10)
   89218:	52800104 	addi	r10,r10,4
   8921c:	da802215 	stw	r10,136(sp)
   89220:	9027d7fa 	srai	r19,r18,31
   89224:	9805883a 	mov	r2,r19
   89228:	003fb206 	br	890f4 <rx_descriptor_end+0xfff89094>
   8922c:	21003fcc 	andi	r4,r4,255
   89230:	2002c41e 	bne	r4,zero,89d44 <___vfiprintf_internal_r+0x143c>
   89234:	a5000414 	ori	r20,r20,16
   89238:	a080080c 	andi	r2,r20,32
   8923c:	103f5f1e 	bne	r2,zero,88fbc <rx_descriptor_end+0xfff88f5c>
   89240:	a080040c 	andi	r2,r20,16
   89244:	10020f26 	beq	r2,zero,89a84 <___vfiprintf_internal_r+0x117c>
   89248:	da802217 	ldw	r10,136(sp)
   8924c:	d8001d85 	stb	zero,118(sp)
   89250:	0027883a 	mov	r19,zero
   89254:	50800104 	addi	r2,r10,4
   89258:	54800017 	ldw	r18,0(r10)
   8925c:	48021116 	blt	r9,zero,89aa4 <___vfiprintf_internal_r+0x119c>
   89260:	00ffdfc4 	movi	r3,-129
   89264:	d8802215 	stw	r2,136(sp)
   89268:	a0e8703a 	and	r20,r20,r3
   8926c:	903f5e1e 	bne	r18,zero,88fe8 <rx_descriptor_end+0xfff88f88>
   89270:	0039883a 	mov	fp,zero
   89274:	4802a626 	beq	r9,zero,89d10 <___vfiprintf_internal_r+0x1408>
   89278:	0025883a 	mov	r18,zero
   8927c:	0027883a 	mov	r19,zero
   89280:	003f5a06 	br	88fec <rx_descriptor_end+0xfff88f8c>
   89284:	21003fcc 	andi	r4,r4,255
   89288:	20029f1e 	bne	r4,zero,89d08 <___vfiprintf_internal_r+0x1400>
   8928c:	a5000414 	ori	r20,r20,16
   89290:	a080080c 	andi	r2,r20,32
   89294:	10005e1e 	bne	r2,zero,89410 <___vfiprintf_internal_r+0xb08>
   89298:	a080040c 	andi	r2,r20,16
   8929c:	1001a21e 	bne	r2,zero,89928 <___vfiprintf_internal_r+0x1020>
   892a0:	a080100c 	andi	r2,r20,64
   892a4:	d8001d85 	stb	zero,118(sp)
   892a8:	da802217 	ldw	r10,136(sp)
   892ac:	1002231e 	bne	r2,zero,89b3c <___vfiprintf_internal_r+0x1234>
   892b0:	50800104 	addi	r2,r10,4
   892b4:	54800017 	ldw	r18,0(r10)
   892b8:	0027883a 	mov	r19,zero
   892bc:	4801a00e 	bge	r9,zero,89940 <___vfiprintf_internal_r+0x1038>
   892c0:	d8802215 	stw	r2,136(sp)
   892c4:	0039883a 	mov	fp,zero
   892c8:	94c4b03a 	or	r2,r18,r19
   892cc:	103f901e 	bne	r2,zero,89110 <rx_descriptor_end+0xfff890b0>
   892d0:	00800044 	movi	r2,1
   892d4:	10803fcc 	andi	r2,r2,255
   892d8:	00c00044 	movi	r3,1
   892dc:	10c05926 	beq	r2,r3,89444 <___vfiprintf_internal_r+0xb3c>
   892e0:	00c00084 	movi	r3,2
   892e4:	10ffe41e 	bne	r2,r3,89278 <rx_descriptor_end+0xfff89218>
   892e8:	0025883a 	mov	r18,zero
   892ec:	0027883a 	mov	r19,zero
   892f0:	00013d06 	br	897e8 <___vfiprintf_internal_r+0xee0>
   892f4:	21003fcc 	andi	r4,r4,255
   892f8:	2002811e 	bne	r4,zero,89d00 <___vfiprintf_internal_r+0x13f8>
   892fc:	00800274 	movhi	r2,9
   89300:	1087ee04 	addi	r2,r2,8120
   89304:	d8802615 	stw	r2,152(sp)
   89308:	a080080c 	andi	r2,r20,32
   8930c:	103f561e 	bne	r2,zero,89068 <rx_descriptor_end+0xfff89008>
   89310:	a080040c 	andi	r2,r20,16
   89314:	1001d126 	beq	r2,zero,89a5c <___vfiprintf_internal_r+0x1154>
   89318:	da802217 	ldw	r10,136(sp)
   8931c:	0027883a 	mov	r19,zero
   89320:	54800017 	ldw	r18,0(r10)
   89324:	52800104 	addi	r10,r10,4
   89328:	da802215 	stw	r10,136(sp)
   8932c:	003f5306 	br	8907c <rx_descriptor_end+0xfff8901c>
   89330:	da802217 	ldw	r10,136(sp)
   89334:	d8001d85 	stb	zero,118(sp)
   89338:	55400017 	ldw	r21,0(r10)
   8933c:	50c00104 	addi	r3,r10,4
   89340:	a8024226 	beq	r21,zero,89c4c <___vfiprintf_internal_r+0x1344>
   89344:	48021816 	blt	r9,zero,89ba8 <___vfiprintf_internal_r+0x12a0>
   89348:	480d883a 	mov	r6,r9
   8934c:	000b883a 	mov	r5,zero
   89350:	a809883a 	mov	r4,r21
   89354:	d8c02a15 	stw	r3,168(sp)
   89358:	da002b15 	stw	r8,172(sp)
   8935c:	da402c15 	stw	r9,176(sp)
   89360:	00873840 	call	87384 <memchr>
   89364:	d8c02a17 	ldw	r3,168(sp)
   89368:	da002b17 	ldw	r8,172(sp)
   8936c:	da402c17 	ldw	r9,176(sp)
   89370:	10024826 	beq	r2,zero,89c94 <___vfiprintf_internal_r+0x138c>
   89374:	1567c83a 	sub	r19,r2,r21
   89378:	df001d83 	ldbu	fp,118(sp)
   8937c:	d8c02215 	stw	r3,136(sp)
   89380:	0013883a 	mov	r9,zero
   89384:	003e6006 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   89388:	21003fcc 	andi	r4,r4,255
   8938c:	203fc026 	beq	r4,zero,89290 <rx_descriptor_end+0xfff89230>
   89390:	d9c01d85 	stb	r7,118(sp)
   89394:	003fbe06 	br	89290 <rx_descriptor_end+0xfff89230>
   89398:	da802217 	ldw	r10,136(sp)
   8939c:	54400017 	ldw	r17,0(r10)
   893a0:	50800104 	addi	r2,r10,4
   893a4:	883e3b16 	blt	r17,zero,88c94 <rx_descriptor_end+0xfff88c34>
   893a8:	d8802215 	stw	r2,136(sp)
   893ac:	80c00007 	ldb	r3,0(r16)
   893b0:	003db406 	br	88a84 <rx_descriptor_end+0xfff88a24>
   893b4:	01000044 	movi	r4,1
   893b8:	01c00ac4 	movi	r7,43
   893bc:	80c00007 	ldb	r3,0(r16)
   893c0:	003db006 	br	88a84 <rx_descriptor_end+0xfff88a24>
   893c4:	80c00007 	ldb	r3,0(r16)
   893c8:	82800044 	addi	r10,r16,1
   893cc:	1b423c26 	beq	r3,r13,89cc0 <___vfiprintf_internal_r+0x13b8>
   893d0:	18bff404 	addi	r2,r3,-48
   893d4:	0013883a 	mov	r9,zero
   893d8:	30822b36 	bltu	r6,r2,89c88 <___vfiprintf_internal_r+0x1380>
   893dc:	50c00007 	ldb	r3,0(r10)
   893e0:	4a4002a4 	muli	r9,r9,10
   893e4:	54000044 	addi	r16,r10,1
   893e8:	8015883a 	mov	r10,r16
   893ec:	4893883a 	add	r9,r9,r2
   893f0:	18bff404 	addi	r2,r3,-48
   893f4:	30bff92e 	bgeu	r6,r2,893dc <rx_descriptor_end+0xfff8937c>
   893f8:	483da30e 	bge	r9,zero,88a88 <rx_descriptor_end+0xfff88a28>
   893fc:	027fffc4 	movi	r9,-1
   89400:	003da106 	br	88a88 <rx_descriptor_end+0xfff88a28>
   89404:	a5001014 	ori	r20,r20,64
   89408:	80c00007 	ldb	r3,0(r16)
   8940c:	003d9d06 	br	88a84 <rx_descriptor_end+0xfff88a24>
   89410:	da802217 	ldw	r10,136(sp)
   89414:	d8001d85 	stb	zero,118(sp)
   89418:	50c00204 	addi	r3,r10,8
   8941c:	54800017 	ldw	r18,0(r10)
   89420:	54c00117 	ldw	r19,4(r10)
   89424:	4801ca16 	blt	r9,zero,89b50 <___vfiprintf_internal_r+0x1248>
   89428:	013fdfc4 	movi	r4,-129
   8942c:	94c4b03a 	or	r2,r18,r19
   89430:	d8c02215 	stw	r3,136(sp)
   89434:	a128703a 	and	r20,r20,r4
   89438:	0039883a 	mov	fp,zero
   8943c:	103f341e 	bne	r2,zero,89110 <rx_descriptor_end+0xfff890b0>
   89440:	483e2e26 	beq	r9,zero,88cfc <rx_descriptor_end+0xfff88c9c>
   89444:	0025883a 	mov	r18,zero
   89448:	94800c04 	addi	r18,r18,48
   8944c:	dc8019c5 	stb	r18,103(sp)
   89450:	dcc02717 	ldw	r19,156(sp)
   89454:	dd4019c4 	addi	r21,sp,103
   89458:	003e2b06 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   8945c:	21003fcc 	andi	r4,r4,255
   89460:	2002361e 	bne	r4,zero,89d3c <___vfiprintf_internal_r+0x1434>
   89464:	1801c126 	beq	r3,zero,89b6c <___vfiprintf_internal_r+0x1264>
   89468:	04800044 	movi	r18,1
   8946c:	d8c01005 	stb	r3,64(sp)
   89470:	d8001d85 	stb	zero,118(sp)
   89474:	9027883a 	mov	r19,r18
   89478:	dd401004 	addi	r21,sp,64
   8947c:	003f1106 	br	890c4 <rx_descriptor_end+0xfff89064>
   89480:	d9402117 	ldw	r5,132(sp)
   89484:	d9002017 	ldw	r4,128(sp)
   89488:	d9801a04 	addi	r6,sp,104
   8948c:	d9c02b15 	stw	r7,172(sp)
   89490:	dbc02a15 	stw	r15,168(sp)
   89494:	00887f40 	call	887f4 <__sprint_r.part.0>
   89498:	d9c02b17 	ldw	r7,172(sp)
   8949c:	dbc02a17 	ldw	r15,168(sp)
   894a0:	10006d1e 	bne	r2,zero,89658 <___vfiprintf_internal_r+0xd50>
   894a4:	d9801b17 	ldw	r6,108(sp)
   894a8:	d8801c17 	ldw	r2,112(sp)
   894ac:	d811883a 	mov	r8,sp
   894b0:	31400044 	addi	r5,r6,1
   894b4:	003e3306 	br	88d84 <rx_descriptor_end+0xfff88d24>
   894b8:	d9401b17 	ldw	r5,108(sp)
   894bc:	d8801c17 	ldw	r2,112(sp)
   894c0:	29000044 	addi	r4,r5,1
   894c4:	d8c01d87 	ldb	r3,118(sp)
   894c8:	183e4d26 	beq	r3,zero,88e00 <rx_descriptor_end+0xfff88da0>
   894cc:	00c00044 	movi	r3,1
   894d0:	d9401d84 	addi	r5,sp,118
   894d4:	10c5883a 	add	r2,r2,r3
   894d8:	41400015 	stw	r5,0(r8)
   894dc:	40c00115 	stw	r3,4(r8)
   894e0:	d8801c15 	stw	r2,112(sp)
   894e4:	d9001b15 	stw	r4,108(sp)
   894e8:	014001c4 	movi	r5,7
   894ec:	2900a90e 	bge	r5,r4,89794 <___vfiprintf_internal_r+0xe8c>
   894f0:	1000da1e 	bne	r2,zero,8985c <___vfiprintf_internal_r+0xf54>
   894f4:	7000ab1e 	bne	r14,zero,897a4 <___vfiprintf_internal_r+0xe9c>
   894f8:	000b883a 	mov	r5,zero
   894fc:	1809883a 	mov	r4,r3
   89500:	d811883a 	mov	r8,sp
   89504:	00c02004 	movi	r3,128
   89508:	e0fe4d26 	beq	fp,r3,88e40 <rx_descriptor_end+0xfff88de0>
   8950c:	4cf9c83a 	sub	fp,r9,r19
   89510:	073e7b0e 	bge	zero,fp,88f00 <rx_descriptor_end+0xfff88ea0>
   89514:	01c00404 	movi	r7,16
   89518:	3f01900e 	bge	r7,fp,89b5c <___vfiprintf_internal_r+0x1254>
   8951c:	00c00274 	movhi	r3,9
   89520:	18c85304 	addi	r3,r3,8524
   89524:	d8c02415 	stw	r3,144(sp)
   89528:	034001c4 	movi	r13,7
   8952c:	00000506 	br	89544 <___vfiprintf_internal_r+0xc3c>
   89530:	29000084 	addi	r4,r5,2
   89534:	42000204 	addi	r8,r8,8
   89538:	180b883a 	mov	r5,r3
   8953c:	e73ffc04 	addi	fp,fp,-16
   89540:	3f000d0e 	bge	r7,fp,89578 <___vfiprintf_internal_r+0xc70>
   89544:	10800404 	addi	r2,r2,16
   89548:	28c00044 	addi	r3,r5,1
   8954c:	45c00015 	stw	r23,0(r8)
   89550:	41c00115 	stw	r7,4(r8)
   89554:	d8801c15 	stw	r2,112(sp)
   89558:	d8c01b15 	stw	r3,108(sp)
   8955c:	68fff40e 	bge	r13,r3,89530 <rx_descriptor_end+0xfff894d0>
   89560:	1000101e 	bne	r2,zero,895a4 <___vfiprintf_internal_r+0xc9c>
   89564:	e73ffc04 	addi	fp,fp,-16
   89568:	01000044 	movi	r4,1
   8956c:	000b883a 	mov	r5,zero
   89570:	d811883a 	mov	r8,sp
   89574:	3f3ff316 	blt	r7,fp,89544 <rx_descriptor_end+0xfff894e4>
   89578:	da802417 	ldw	r10,144(sp)
   8957c:	1705883a 	add	r2,r2,fp
   89580:	47000115 	stw	fp,4(r8)
   89584:	42800015 	stw	r10,0(r8)
   89588:	d8801c15 	stw	r2,112(sp)
   8958c:	d9001b15 	stw	r4,108(sp)
   89590:	00c001c4 	movi	r3,7
   89594:	19003616 	blt	r3,r4,89670 <___vfiprintf_internal_r+0xd68>
   89598:	42000204 	addi	r8,r8,8
   8959c:	21000044 	addi	r4,r4,1
   895a0:	003e5706 	br	88f00 <rx_descriptor_end+0xfff88ea0>
   895a4:	d9402117 	ldw	r5,132(sp)
   895a8:	d9002017 	ldw	r4,128(sp)
   895ac:	d9801a04 	addi	r6,sp,104
   895b0:	d9c02b15 	stw	r7,172(sp)
   895b4:	db402a15 	stw	r13,168(sp)
   895b8:	00887f40 	call	887f4 <__sprint_r.part.0>
   895bc:	d9c02b17 	ldw	r7,172(sp)
   895c0:	db402a17 	ldw	r13,168(sp)
   895c4:	1000241e 	bne	r2,zero,89658 <___vfiprintf_internal_r+0xd50>
   895c8:	d9401b17 	ldw	r5,108(sp)
   895cc:	d8801c17 	ldw	r2,112(sp)
   895d0:	d811883a 	mov	r8,sp
   895d4:	29000044 	addi	r4,r5,1
   895d8:	003fd806 	br	8953c <rx_descriptor_end+0xfff894dc>
   895dc:	d9401b17 	ldw	r5,108(sp)
   895e0:	00c00274 	movhi	r3,9
   895e4:	18c85704 	addi	r3,r3,8540
   895e8:	d8c02415 	stw	r3,144(sp)
   895ec:	29400044 	addi	r5,r5,1
   895f0:	d8c02417 	ldw	r3,144(sp)
   895f4:	14c5883a 	add	r2,r2,r19
   895f8:	44c00115 	stw	r19,4(r8)
   895fc:	40c00015 	stw	r3,0(r8)
   89600:	d8801c15 	stw	r2,112(sp)
   89604:	d9401b15 	stw	r5,108(sp)
   89608:	00c001c4 	movi	r3,7
   8960c:	1940070e 	bge	r3,r5,8962c <___vfiprintf_internal_r+0xd24>
   89610:	103e4826 	beq	r2,zero,88f34 <rx_descriptor_end+0xfff88ed4>
   89614:	d9402117 	ldw	r5,132(sp)
   89618:	d9002017 	ldw	r4,128(sp)
   8961c:	d9801a04 	addi	r6,sp,104
   89620:	00887f40 	call	887f4 <__sprint_r.part.0>
   89624:	10000c1e 	bne	r2,zero,89658 <___vfiprintf_internal_r+0xd50>
   89628:	d8801c17 	ldw	r2,112(sp)
   8962c:	8c80010e 	bge	r17,r18,89634 <___vfiprintf_internal_r+0xd2c>
   89630:	9023883a 	mov	r17,r18
   89634:	da802317 	ldw	r10,140(sp)
   89638:	5455883a 	add	r10,r10,r17
   8963c:	da802315 	stw	r10,140(sp)
   89640:	103e4126 	beq	r2,zero,88f48 <rx_descriptor_end+0xfff88ee8>
   89644:	d9402117 	ldw	r5,132(sp)
   89648:	d9002017 	ldw	r4,128(sp)
   8964c:	d9801a04 	addi	r6,sp,104
   89650:	00887f40 	call	887f4 <__sprint_r.part.0>
   89654:	103e3c26 	beq	r2,zero,88f48 <rx_descriptor_end+0xfff88ee8>
   89658:	dd002117 	ldw	r20,132(sp)
   8965c:	a080030b 	ldhu	r2,12(r20)
   89660:	1080100c 	andi	r2,r2,64
   89664:	1001231e 	bne	r2,zero,89af4 <___vfiprintf_internal_r+0x11ec>
   89668:	d8802317 	ldw	r2,140(sp)
   8966c:	003d7b06 	br	88c5c <rx_descriptor_end+0xfff88bfc>
   89670:	1000991e 	bne	r2,zero,898d8 <___vfiprintf_internal_r+0xfd0>
   89674:	00c00044 	movi	r3,1
   89678:	9805883a 	mov	r2,r19
   8967c:	dd400015 	stw	r21,0(sp)
   89680:	dcc00115 	stw	r19,4(sp)
   89684:	dcc01c15 	stw	r19,112(sp)
   89688:	d8c01b15 	stw	r3,108(sp)
   8968c:	d811883a 	mov	r8,sp
   89690:	42000204 	addi	r8,r8,8
   89694:	a2c0010c 	andi	r11,r20,4
   89698:	583fe426 	beq	r11,zero,8962c <rx_descriptor_end+0xfff895cc>
   8969c:	8ca7c83a 	sub	r19,r17,r18
   896a0:	04ffe20e 	bge	zero,r19,8962c <rx_descriptor_end+0xfff895cc>
   896a4:	01c00404 	movi	r7,16
   896a8:	3cffcc0e 	bge	r7,r19,895dc <rx_descriptor_end+0xfff8957c>
   896ac:	02800274 	movhi	r10,9
   896b0:	52885704 	addi	r10,r10,8540
   896b4:	d9001b17 	ldw	r4,108(sp)
   896b8:	da802415 	stw	r10,144(sp)
   896bc:	382b883a 	mov	r21,r7
   896c0:	050001c4 	movi	r20,7
   896c4:	df002017 	ldw	fp,128(sp)
   896c8:	00000506 	br	896e0 <___vfiprintf_internal_r+0xdd8>
   896cc:	21400084 	addi	r5,r4,2
   896d0:	42000204 	addi	r8,r8,8
   896d4:	1809883a 	mov	r4,r3
   896d8:	9cfffc04 	addi	r19,r19,-16
   896dc:	acffc40e 	bge	r21,r19,895f0 <rx_descriptor_end+0xfff89590>
   896e0:	10800404 	addi	r2,r2,16
   896e4:	20c00044 	addi	r3,r4,1
   896e8:	45800015 	stw	r22,0(r8)
   896ec:	45400115 	stw	r21,4(r8)
   896f0:	d8801c15 	stw	r2,112(sp)
   896f4:	d8c01b15 	stw	r3,108(sp)
   896f8:	a0fff40e 	bge	r20,r3,896cc <rx_descriptor_end+0xfff8966c>
   896fc:	1000041e 	bne	r2,zero,89710 <___vfiprintf_internal_r+0xe08>
   89700:	01400044 	movi	r5,1
   89704:	0009883a 	mov	r4,zero
   89708:	d811883a 	mov	r8,sp
   8970c:	003ff206 	br	896d8 <rx_descriptor_end+0xfff89678>
   89710:	d9402117 	ldw	r5,132(sp)
   89714:	d9801a04 	addi	r6,sp,104
   89718:	e009883a 	mov	r4,fp
   8971c:	00887f40 	call	887f4 <__sprint_r.part.0>
   89720:	103fcd1e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   89724:	d9001b17 	ldw	r4,108(sp)
   89728:	d8801c17 	ldw	r2,112(sp)
   8972c:	d811883a 	mov	r8,sp
   89730:	21400044 	addi	r5,r4,1
   89734:	003fe806 	br	896d8 <rx_descriptor_end+0xfff89678>
   89738:	d9402117 	ldw	r5,132(sp)
   8973c:	d9002017 	ldw	r4,128(sp)
   89740:	d9801a04 	addi	r6,sp,104
   89744:	d9c02b15 	stw	r7,172(sp)
   89748:	db402a15 	stw	r13,168(sp)
   8974c:	00887f40 	call	887f4 <__sprint_r.part.0>
   89750:	d9c02b17 	ldw	r7,172(sp)
   89754:	db402a17 	ldw	r13,168(sp)
   89758:	103fbf1e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   8975c:	d9401b17 	ldw	r5,108(sp)
   89760:	d8801c17 	ldw	r2,112(sp)
   89764:	d811883a 	mov	r8,sp
   89768:	29800044 	addi	r6,r5,1
   8976c:	003dc406 	br	88e80 <rx_descriptor_end+0xfff88e20>
   89770:	1000d21e 	bne	r2,zero,89abc <___vfiprintf_internal_r+0x11b4>
   89774:	d8c01d87 	ldb	r3,118(sp)
   89778:	18009526 	beq	r3,zero,899d0 <___vfiprintf_internal_r+0x10c8>
   8977c:	00800044 	movi	r2,1
   89780:	d8c01d84 	addi	r3,sp,118
   89784:	1009883a 	mov	r4,r2
   89788:	d8c00015 	stw	r3,0(sp)
   8978c:	d8800115 	stw	r2,4(sp)
   89790:	d811883a 	mov	r8,sp
   89794:	200b883a 	mov	r5,r4
   89798:	42000204 	addi	r8,r8,8
   8979c:	21000044 	addi	r4,r4,1
   897a0:	003d9706 	br	88e00 <rx_descriptor_end+0xfff88da0>
   897a4:	d9001d04 	addi	r4,sp,116
   897a8:	00800084 	movi	r2,2
   897ac:	d9000015 	stw	r4,0(sp)
   897b0:	d8800115 	stw	r2,4(sp)
   897b4:	1809883a 	mov	r4,r3
   897b8:	d811883a 	mov	r8,sp
   897bc:	200b883a 	mov	r5,r4
   897c0:	42000204 	addi	r8,r8,8
   897c4:	21000044 	addi	r4,r4,1
   897c8:	003f4e06 	br	89504 <rx_descriptor_end+0xfff894a4>
   897cc:	d8001d85 	stb	zero,118(sp)
   897d0:	48005016 	blt	r9,zero,89914 <___vfiprintf_internal_r+0x100c>
   897d4:	00ffdfc4 	movi	r3,-129
   897d8:	94c4b03a 	or	r2,r18,r19
   897dc:	a0e8703a 	and	r20,r20,r3
   897e0:	103d4426 	beq	r2,zero,88cf4 <rx_descriptor_end+0xfff88c94>
   897e4:	0039883a 	mov	fp,zero
   897e8:	d9002617 	ldw	r4,152(sp)
   897ec:	dd401a04 	addi	r21,sp,104
   897f0:	908003cc 	andi	r2,r18,15
   897f4:	9806973a 	slli	r3,r19,28
   897f8:	2085883a 	add	r2,r4,r2
   897fc:	9024d13a 	srli	r18,r18,4
   89800:	10800003 	ldbu	r2,0(r2)
   89804:	9826d13a 	srli	r19,r19,4
   89808:	ad7fffc4 	addi	r21,r21,-1
   8980c:	1ca4b03a 	or	r18,r3,r18
   89810:	a8800005 	stb	r2,0(r21)
   89814:	94c4b03a 	or	r2,r18,r19
   89818:	103ff51e 	bne	r2,zero,897f0 <rx_descriptor_end+0xfff89790>
   8981c:	003e5906 	br	89184 <rx_descriptor_end+0xfff89124>
   89820:	d9402117 	ldw	r5,132(sp)
   89824:	d9002017 	ldw	r4,128(sp)
   89828:	d9801a04 	addi	r6,sp,104
   8982c:	00887f40 	call	887f4 <__sprint_r.part.0>
   89830:	103f891e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   89834:	d8801c17 	ldw	r2,112(sp)
   89838:	d811883a 	mov	r8,sp
   8983c:	003f9506 	br	89694 <rx_descriptor_end+0xfff89634>
   89840:	d9402117 	ldw	r5,132(sp)
   89844:	d9002017 	ldw	r4,128(sp)
   89848:	d9801a04 	addi	r6,sp,104
   8984c:	00887f40 	call	887f4 <__sprint_r.part.0>
   89850:	103f811e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   89854:	d811883a 	mov	r8,sp
   89858:	003ced06 	br	88c10 <rx_descriptor_end+0xfff88bb0>
   8985c:	d9402117 	ldw	r5,132(sp)
   89860:	d9002017 	ldw	r4,128(sp)
   89864:	d9801a04 	addi	r6,sp,104
   89868:	da402c15 	stw	r9,176(sp)
   8986c:	db802a15 	stw	r14,168(sp)
   89870:	00887f40 	call	887f4 <__sprint_r.part.0>
   89874:	da402c17 	ldw	r9,176(sp)
   89878:	db802a17 	ldw	r14,168(sp)
   8987c:	103f761e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   89880:	d9401b17 	ldw	r5,108(sp)
   89884:	d8801c17 	ldw	r2,112(sp)
   89888:	d811883a 	mov	r8,sp
   8988c:	29000044 	addi	r4,r5,1
   89890:	003d5b06 	br	88e00 <rx_descriptor_end+0xfff88da0>
   89894:	d9402117 	ldw	r5,132(sp)
   89898:	d9002017 	ldw	r4,128(sp)
   8989c:	d9801a04 	addi	r6,sp,104
   898a0:	da402c15 	stw	r9,176(sp)
   898a4:	00887f40 	call	887f4 <__sprint_r.part.0>
   898a8:	da402c17 	ldw	r9,176(sp)
   898ac:	103f6a1e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   898b0:	d9401b17 	ldw	r5,108(sp)
   898b4:	d8801c17 	ldw	r2,112(sp)
   898b8:	d811883a 	mov	r8,sp
   898bc:	29000044 	addi	r4,r5,1
   898c0:	003f1006 	br	89504 <rx_descriptor_end+0xfff894a4>
   898c4:	1000c31e 	bne	r2,zero,89bd4 <___vfiprintf_internal_r+0x12cc>
   898c8:	01000044 	movi	r4,1
   898cc:	000b883a 	mov	r5,zero
   898d0:	d811883a 	mov	r8,sp
   898d4:	003f0d06 	br	8950c <rx_descriptor_end+0xfff894ac>
   898d8:	d9402117 	ldw	r5,132(sp)
   898dc:	d9002017 	ldw	r4,128(sp)
   898e0:	d9801a04 	addi	r6,sp,104
   898e4:	00887f40 	call	887f4 <__sprint_r.part.0>
   898e8:	103f5b1e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   898ec:	d9001b17 	ldw	r4,108(sp)
   898f0:	d8801c17 	ldw	r2,112(sp)
   898f4:	d811883a 	mov	r8,sp
   898f8:	21000044 	addi	r4,r4,1
   898fc:	003d8006 	br	88f00 <rx_descriptor_end+0xfff88ea0>
   89900:	01000274 	movhi	r4,9
   89904:	2107f304 	addi	r4,r4,8140
   89908:	d9002615 	stw	r4,152(sp)
   8990c:	d8c02215 	stw	r3,136(sp)
   89910:	1029883a 	mov	r20,r2
   89914:	94c4b03a 	or	r2,r18,r19
   89918:	103fb21e 	bne	r2,zero,897e4 <rx_descriptor_end+0xfff89784>
   8991c:	0039883a 	mov	fp,zero
   89920:	00800084 	movi	r2,2
   89924:	003e6b06 	br	892d4 <rx_descriptor_end+0xfff89274>
   89928:	da802217 	ldw	r10,136(sp)
   8992c:	d8001d85 	stb	zero,118(sp)
   89930:	0027883a 	mov	r19,zero
   89934:	50800104 	addi	r2,r10,4
   89938:	54800017 	ldw	r18,0(r10)
   8993c:	483e6016 	blt	r9,zero,892c0 <rx_descriptor_end+0xfff89260>
   89940:	00ffdfc4 	movi	r3,-129
   89944:	d8802215 	stw	r2,136(sp)
   89948:	a0e8703a 	and	r20,r20,r3
   8994c:	0039883a 	mov	fp,zero
   89950:	903ebb26 	beq	r18,zero,89440 <rx_descriptor_end+0xfff893e0>
   89954:	00800244 	movi	r2,9
   89958:	14bdee36 	bltu	r2,r18,89114 <rx_descriptor_end+0xfff890b4>
   8995c:	003eba06 	br	89448 <rx_descriptor_end+0xfff893e8>
   89960:	00800c04 	movi	r2,48
   89964:	d8c01d45 	stb	r3,117(sp)
   89968:	d8801d05 	stb	r2,116(sp)
   8996c:	d8001d85 	stb	zero,118(sp)
   89970:	a0c00094 	ori	r3,r20,2
   89974:	4800a916 	blt	r9,zero,89c1c <___vfiprintf_internal_r+0x1314>
   89978:	00bfdfc4 	movi	r2,-129
   8997c:	a096703a 	and	r11,r20,r2
   89980:	5d000094 	ori	r20,r11,2
   89984:	0039883a 	mov	fp,zero
   89988:	003f9706 	br	897e8 <rx_descriptor_end+0xfff89788>
   8998c:	8025883a 	mov	r18,r16
   89990:	003c2e06 	br	88a4c <rx_descriptor_end+0xfff889ec>
   89994:	00800274 	movhi	r2,9
   89998:	1087f304 	addi	r2,r2,8140
   8999c:	0039883a 	mov	fp,zero
   899a0:	d8802615 	stw	r2,152(sp)
   899a4:	003f9006 	br	897e8 <rx_descriptor_end+0xfff89788>
   899a8:	04a5c83a 	sub	r18,zero,r18
   899ac:	07000b44 	movi	fp,45
   899b0:	9004c03a 	cmpne	r2,r18,zero
   899b4:	04e7c83a 	sub	r19,zero,r19
   899b8:	df001d85 	stb	fp,118(sp)
   899bc:	98a7c83a 	sub	r19,r19,r2
   899c0:	48009f16 	blt	r9,zero,89c40 <___vfiprintf_internal_r+0x1338>
   899c4:	00bfdfc4 	movi	r2,-129
   899c8:	a0a8703a 	and	r20,r20,r2
   899cc:	003dd006 	br	89110 <rx_descriptor_end+0xfff890b0>
   899d0:	70004c26 	beq	r14,zero,89b04 <___vfiprintf_internal_r+0x11fc>
   899d4:	00800084 	movi	r2,2
   899d8:	d8c01d04 	addi	r3,sp,116
   899dc:	d8c00015 	stw	r3,0(sp)
   899e0:	d8800115 	stw	r2,4(sp)
   899e4:	01000044 	movi	r4,1
   899e8:	d811883a 	mov	r8,sp
   899ec:	003f7306 	br	897bc <rx_descriptor_end+0xfff8975c>
   899f0:	a080100c 	andi	r2,r20,64
   899f4:	da802217 	ldw	r10,136(sp)
   899f8:	103e0626 	beq	r2,zero,89214 <rx_descriptor_end+0xfff891b4>
   899fc:	5480000f 	ldh	r18,0(r10)
   89a00:	52800104 	addi	r10,r10,4
   89a04:	da802215 	stw	r10,136(sp)
   89a08:	9027d7fa 	srai	r19,r18,31
   89a0c:	9805883a 	mov	r2,r19
   89a10:	003db806 	br	890f4 <rx_descriptor_end+0xfff89094>
   89a14:	a080040c 	andi	r2,r20,16
   89a18:	1000091e 	bne	r2,zero,89a40 <___vfiprintf_internal_r+0x1138>
   89a1c:	a2c0100c 	andi	r11,r20,64
   89a20:	58000726 	beq	r11,zero,89a40 <___vfiprintf_internal_r+0x1138>
   89a24:	da802217 	ldw	r10,136(sp)
   89a28:	50800017 	ldw	r2,0(r10)
   89a2c:	52800104 	addi	r10,r10,4
   89a30:	da802215 	stw	r10,136(sp)
   89a34:	da802317 	ldw	r10,140(sp)
   89a38:	1280000d 	sth	r10,0(r2)
   89a3c:	003be706 	br	889dc <rx_descriptor_end+0xfff8897c>
   89a40:	da802217 	ldw	r10,136(sp)
   89a44:	50800017 	ldw	r2,0(r10)
   89a48:	52800104 	addi	r10,r10,4
   89a4c:	da802215 	stw	r10,136(sp)
   89a50:	da802317 	ldw	r10,140(sp)
   89a54:	12800015 	stw	r10,0(r2)
   89a58:	003be006 	br	889dc <rx_descriptor_end+0xfff8897c>
   89a5c:	a080100c 	andi	r2,r20,64
   89a60:	da802217 	ldw	r10,136(sp)
   89a64:	10003026 	beq	r2,zero,89b28 <___vfiprintf_internal_r+0x1220>
   89a68:	5480000b 	ldhu	r18,0(r10)
   89a6c:	52800104 	addi	r10,r10,4
   89a70:	0027883a 	mov	r19,zero
   89a74:	da802215 	stw	r10,136(sp)
   89a78:	003d8006 	br	8907c <rx_descriptor_end+0xfff8901c>
   89a7c:	80c00007 	ldb	r3,0(r16)
   89a80:	003c0006 	br	88a84 <rx_descriptor_end+0xfff88a24>
   89a84:	a080100c 	andi	r2,r20,64
   89a88:	d8001d85 	stb	zero,118(sp)
   89a8c:	da802217 	ldw	r10,136(sp)
   89a90:	1000201e 	bne	r2,zero,89b14 <___vfiprintf_internal_r+0x120c>
   89a94:	50800104 	addi	r2,r10,4
   89a98:	54800017 	ldw	r18,0(r10)
   89a9c:	0027883a 	mov	r19,zero
   89aa0:	483def0e 	bge	r9,zero,89260 <rx_descriptor_end+0xfff89200>
   89aa4:	94c6b03a 	or	r3,r18,r19
   89aa8:	d8802215 	stw	r2,136(sp)
   89aac:	183d4e1e 	bne	r3,zero,88fe8 <rx_descriptor_end+0xfff88f88>
   89ab0:	0039883a 	mov	fp,zero
   89ab4:	0005883a 	mov	r2,zero
   89ab8:	003e0606 	br	892d4 <rx_descriptor_end+0xfff89274>
   89abc:	d9402117 	ldw	r5,132(sp)
   89ac0:	d9002017 	ldw	r4,128(sp)
   89ac4:	d9801a04 	addi	r6,sp,104
   89ac8:	da402c15 	stw	r9,176(sp)
   89acc:	db802a15 	stw	r14,168(sp)
   89ad0:	00887f40 	call	887f4 <__sprint_r.part.0>
   89ad4:	da402c17 	ldw	r9,176(sp)
   89ad8:	db802a17 	ldw	r14,168(sp)
   89adc:	103ede1e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   89ae0:	d9401b17 	ldw	r5,108(sp)
   89ae4:	d8801c17 	ldw	r2,112(sp)
   89ae8:	d811883a 	mov	r8,sp
   89aec:	29000044 	addi	r4,r5,1
   89af0:	003e7406 	br	894c4 <rx_descriptor_end+0xfff89464>
   89af4:	00bfffc4 	movi	r2,-1
   89af8:	003c5806 	br	88c5c <rx_descriptor_end+0xfff88bfc>
   89afc:	d811883a 	mov	r8,sp
   89b00:	003ee806 	br	896a4 <rx_descriptor_end+0xfff89644>
   89b04:	000b883a 	mov	r5,zero
   89b08:	01000044 	movi	r4,1
   89b0c:	d811883a 	mov	r8,sp
   89b10:	003e7c06 	br	89504 <rx_descriptor_end+0xfff894a4>
   89b14:	50800104 	addi	r2,r10,4
   89b18:	5480000b 	ldhu	r18,0(r10)
   89b1c:	0027883a 	mov	r19,zero
   89b20:	483dcf0e 	bge	r9,zero,89260 <rx_descriptor_end+0xfff89200>
   89b24:	003fdf06 	br	89aa4 <rx_descriptor_end+0xfff89a44>
   89b28:	54800017 	ldw	r18,0(r10)
   89b2c:	52800104 	addi	r10,r10,4
   89b30:	0027883a 	mov	r19,zero
   89b34:	da802215 	stw	r10,136(sp)
   89b38:	003d5006 	br	8907c <rx_descriptor_end+0xfff8901c>
   89b3c:	50800104 	addi	r2,r10,4
   89b40:	5480000b 	ldhu	r18,0(r10)
   89b44:	0027883a 	mov	r19,zero
   89b48:	483f7d0e 	bge	r9,zero,89940 <rx_descriptor_end+0xfff898e0>
   89b4c:	003ddc06 	br	892c0 <rx_descriptor_end+0xfff89260>
   89b50:	d8c02215 	stw	r3,136(sp)
   89b54:	0039883a 	mov	fp,zero
   89b58:	003ddb06 	br	892c8 <rx_descriptor_end+0xfff89268>
   89b5c:	02800274 	movhi	r10,9
   89b60:	52885304 	addi	r10,r10,8524
   89b64:	da802415 	stw	r10,144(sp)
   89b68:	003e8306 	br	89578 <rx_descriptor_end+0xfff89518>
   89b6c:	d8801c17 	ldw	r2,112(sp)
   89b70:	dd002117 	ldw	r20,132(sp)
   89b74:	103eb926 	beq	r2,zero,8965c <rx_descriptor_end+0xfff895fc>
   89b78:	d9002017 	ldw	r4,128(sp)
   89b7c:	d9801a04 	addi	r6,sp,104
   89b80:	a00b883a 	mov	r5,r20
   89b84:	00887f40 	call	887f4 <__sprint_r.part.0>
   89b88:	003eb406 	br	8965c <rx_descriptor_end+0xfff895fc>
   89b8c:	80c00043 	ldbu	r3,1(r16)
   89b90:	a5000814 	ori	r20,r20,32
   89b94:	84000044 	addi	r16,r16,1
   89b98:	18c03fcc 	andi	r3,r3,255
   89b9c:	18c0201c 	xori	r3,r3,128
   89ba0:	18ffe004 	addi	r3,r3,-128
   89ba4:	003bb706 	br	88a84 <rx_descriptor_end+0xfff88a24>
   89ba8:	a809883a 	mov	r4,r21
   89bac:	d8c02a15 	stw	r3,168(sp)
   89bb0:	da002b15 	stw	r8,172(sp)
   89bb4:	008875c0 	call	8875c <strlen>
   89bb8:	d8c02a17 	ldw	r3,168(sp)
   89bbc:	1027883a 	mov	r19,r2
   89bc0:	df001d83 	ldbu	fp,118(sp)
   89bc4:	d8c02215 	stw	r3,136(sp)
   89bc8:	0013883a 	mov	r9,zero
   89bcc:	da002b17 	ldw	r8,172(sp)
   89bd0:	003c4d06 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   89bd4:	d9402117 	ldw	r5,132(sp)
   89bd8:	d9002017 	ldw	r4,128(sp)
   89bdc:	d9801a04 	addi	r6,sp,104
   89be0:	da402c15 	stw	r9,176(sp)
   89be4:	00887f40 	call	887f4 <__sprint_r.part.0>
   89be8:	da402c17 	ldw	r9,176(sp)
   89bec:	103e9a1e 	bne	r2,zero,89658 <rx_descriptor_end+0xfff895f8>
   89bf0:	d9401b17 	ldw	r5,108(sp)
   89bf4:	d8801c17 	ldw	r2,112(sp)
   89bf8:	d811883a 	mov	r8,sp
   89bfc:	29000044 	addi	r4,r5,1
   89c00:	003e4206 	br	8950c <rx_descriptor_end+0xfff894ac>
   89c04:	d9401b17 	ldw	r5,108(sp)
   89c08:	01000274 	movhi	r4,9
   89c0c:	21085704 	addi	r4,r4,8540
   89c10:	d9002415 	stw	r4,144(sp)
   89c14:	29400044 	addi	r5,r5,1
   89c18:	003c6d06 	br	88dd0 <rx_descriptor_end+0xfff88d70>
   89c1c:	0039883a 	mov	fp,zero
   89c20:	00800084 	movi	r2,2
   89c24:	10803fcc 	andi	r2,r2,255
   89c28:	01000044 	movi	r4,1
   89c2c:	11001e26 	beq	r2,r4,89ca8 <___vfiprintf_internal_r+0x13a0>
   89c30:	01000084 	movi	r4,2
   89c34:	11001e1e 	bne	r2,r4,89cb0 <___vfiprintf_internal_r+0x13a8>
   89c38:	1829883a 	mov	r20,r3
   89c3c:	003eea06 	br	897e8 <rx_descriptor_end+0xfff89788>
   89c40:	a007883a 	mov	r3,r20
   89c44:	00800044 	movi	r2,1
   89c48:	003ff606 	br	89c24 <rx_descriptor_end+0xfff89bc4>
   89c4c:	00800184 	movi	r2,6
   89c50:	1240012e 	bgeu	r2,r9,89c58 <___vfiprintf_internal_r+0x1350>
   89c54:	1013883a 	mov	r9,r2
   89c58:	4827883a 	mov	r19,r9
   89c5c:	4825883a 	mov	r18,r9
   89c60:	48001516 	blt	r9,zero,89cb8 <___vfiprintf_internal_r+0x13b0>
   89c64:	05400274 	movhi	r21,9
   89c68:	d8c02215 	stw	r3,136(sp)
   89c6c:	ad47f804 	addi	r21,r21,8160
   89c70:	003d1406 	br	890c4 <rx_descriptor_end+0xfff89064>
   89c74:	02800274 	movhi	r10,9
   89c78:	52885304 	addi	r10,r10,8524
   89c7c:	da802415 	stw	r10,144(sp)
   89c80:	200d883a 	mov	r6,r4
   89c84:	003c9106 	br	88ecc <rx_descriptor_end+0xfff88e6c>
   89c88:	5021883a 	mov	r16,r10
   89c8c:	0013883a 	mov	r9,zero
   89c90:	003b7d06 	br	88a88 <rx_descriptor_end+0xfff88a28>
   89c94:	4827883a 	mov	r19,r9
   89c98:	df001d83 	ldbu	fp,118(sp)
   89c9c:	d8c02215 	stw	r3,136(sp)
   89ca0:	0013883a 	mov	r9,zero
   89ca4:	003c1806 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   89ca8:	1829883a 	mov	r20,r3
   89cac:	003d1806 	br	89110 <rx_descriptor_end+0xfff890b0>
   89cb0:	1829883a 	mov	r20,r3
   89cb4:	003ccd06 	br	88fec <rx_descriptor_end+0xfff88f8c>
   89cb8:	0025883a 	mov	r18,zero
   89cbc:	003fe906 	br	89c64 <rx_descriptor_end+0xfff89c04>
   89cc0:	d8802217 	ldw	r2,136(sp)
   89cc4:	80c00043 	ldbu	r3,1(r16)
   89cc8:	5021883a 	mov	r16,r10
   89ccc:	12400017 	ldw	r9,0(r2)
   89cd0:	10800104 	addi	r2,r2,4
   89cd4:	d8802215 	stw	r2,136(sp)
   89cd8:	483faf0e 	bge	r9,zero,89b98 <rx_descriptor_end+0xfff89b38>
   89cdc:	18c03fcc 	andi	r3,r3,255
   89ce0:	18c0201c 	xori	r3,r3,128
   89ce4:	027fffc4 	movi	r9,-1
   89ce8:	18ffe004 	addi	r3,r3,-128
   89cec:	003b6506 	br	88a84 <rx_descriptor_end+0xfff88a24>
   89cf0:	d9c01d85 	stb	r7,118(sp)
   89cf4:	003ca006 	br	88f78 <rx_descriptor_end+0xfff88f18>
   89cf8:	d9c01d85 	stb	r7,118(sp)
   89cfc:	003cad06 	br	88fb4 <rx_descriptor_end+0xfff88f54>
   89d00:	d9c01d85 	stb	r7,118(sp)
   89d04:	003d7d06 	br	892fc <rx_descriptor_end+0xfff8929c>
   89d08:	d9c01d85 	stb	r7,118(sp)
   89d0c:	003d5f06 	br	8928c <rx_descriptor_end+0xfff8922c>
   89d10:	a080004c 	andi	r2,r20,1
   89d14:	0039883a 	mov	fp,zero
   89d18:	10000526 	beq	r2,zero,89d30 <___vfiprintf_internal_r+0x1428>
   89d1c:	00800c04 	movi	r2,48
   89d20:	d88019c5 	stb	r2,103(sp)
   89d24:	dcc02717 	ldw	r19,156(sp)
   89d28:	dd4019c4 	addi	r21,sp,103
   89d2c:	003bf606 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   89d30:	0027883a 	mov	r19,zero
   89d34:	dd401a04 	addi	r21,sp,104
   89d38:	003bf306 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   89d3c:	d9c01d85 	stb	r7,118(sp)
   89d40:	003dc806 	br	89464 <rx_descriptor_end+0xfff89404>
   89d44:	d9c01d85 	stb	r7,118(sp)
   89d48:	003d3a06 	br	89234 <rx_descriptor_end+0xfff891d4>
   89d4c:	d9c01d85 	stb	r7,118(sp)
   89d50:	003d2a06 	br	891fc <rx_descriptor_end+0xfff8919c>
   89d54:	d9c01d85 	stb	r7,118(sp)
   89d58:	003cde06 	br	890d4 <rx_descriptor_end+0xfff89074>
   89d5c:	d9c01d85 	stb	r7,118(sp)
   89d60:	003cbc06 	br	89054 <rx_descriptor_end+0xfff88ff4>

00089d64 <__vfiprintf_internal>:
   89d64:	00800274 	movhi	r2,9
   89d68:	10907304 	addi	r2,r2,16844
   89d6c:	300f883a 	mov	r7,r6
   89d70:	280d883a 	mov	r6,r5
   89d74:	200b883a 	mov	r5,r4
   89d78:	11000017 	ldw	r4,0(r2)
   89d7c:	00889081 	jmpi	88908 <___vfiprintf_internal_r>

00089d80 <__sbprintf>:
   89d80:	2880030b 	ldhu	r2,12(r5)
   89d84:	2ac01917 	ldw	r11,100(r5)
   89d88:	2a80038b 	ldhu	r10,14(r5)
   89d8c:	2a400717 	ldw	r9,28(r5)
   89d90:	2a000917 	ldw	r8,36(r5)
   89d94:	defee204 	addi	sp,sp,-1144
   89d98:	00c10004 	movi	r3,1024
   89d9c:	dc011a15 	stw	r16,1128(sp)
   89da0:	10bfff4c 	andi	r2,r2,65533
   89da4:	2821883a 	mov	r16,r5
   89da8:	d8cb883a 	add	r5,sp,r3
   89dac:	dc811c15 	stw	r18,1136(sp)
   89db0:	dc411b15 	stw	r17,1132(sp)
   89db4:	dfc11d15 	stw	ra,1140(sp)
   89db8:	2025883a 	mov	r18,r4
   89dbc:	d881030d 	sth	r2,1036(sp)
   89dc0:	dac11915 	stw	r11,1124(sp)
   89dc4:	da81038d 	sth	r10,1038(sp)
   89dc8:	da410715 	stw	r9,1052(sp)
   89dcc:	da010915 	stw	r8,1060(sp)
   89dd0:	dec10015 	stw	sp,1024(sp)
   89dd4:	dec10415 	stw	sp,1040(sp)
   89dd8:	d8c10215 	stw	r3,1032(sp)
   89ddc:	d8c10515 	stw	r3,1044(sp)
   89de0:	d8010615 	stw	zero,1048(sp)
   89de4:	00889080 	call	88908 <___vfiprintf_internal_r>
   89de8:	1023883a 	mov	r17,r2
   89dec:	10000416 	blt	r2,zero,89e00 <__sbprintf+0x80>
   89df0:	d9410004 	addi	r5,sp,1024
   89df4:	9009883a 	mov	r4,r18
   89df8:	0081b8c0 	call	81b8c <_fflush_r>
   89dfc:	10000d1e 	bne	r2,zero,89e34 <__sbprintf+0xb4>
   89e00:	d881030b 	ldhu	r2,1036(sp)
   89e04:	1080100c 	andi	r2,r2,64
   89e08:	10000326 	beq	r2,zero,89e18 <__sbprintf+0x98>
   89e0c:	8080030b 	ldhu	r2,12(r16)
   89e10:	10801014 	ori	r2,r2,64
   89e14:	8080030d 	sth	r2,12(r16)
   89e18:	8805883a 	mov	r2,r17
   89e1c:	dfc11d17 	ldw	ra,1140(sp)
   89e20:	dc811c17 	ldw	r18,1136(sp)
   89e24:	dc411b17 	ldw	r17,1132(sp)
   89e28:	dc011a17 	ldw	r16,1128(sp)
   89e2c:	dec11e04 	addi	sp,sp,1144
   89e30:	f800283a 	ret
   89e34:	047fffc4 	movi	r17,-1
   89e38:	003ff106 	br	89e00 <rx_descriptor_end+0xfff89da0>

00089e3c <_calloc_r>:
   89e3c:	298b383a 	mul	r5,r5,r6
   89e40:	defffe04 	addi	sp,sp,-8
   89e44:	dfc00115 	stw	ra,4(sp)
   89e48:	dc000015 	stw	r16,0(sp)
   89e4c:	008259c0 	call	8259c <_malloc_r>
   89e50:	10002926 	beq	r2,zero,89ef8 <_calloc_r+0xbc>
   89e54:	11bfff17 	ldw	r6,-4(r2)
   89e58:	1021883a 	mov	r16,r2
   89e5c:	00bfff04 	movi	r2,-4
   89e60:	308c703a 	and	r6,r6,r2
   89e64:	00c00904 	movi	r3,36
   89e68:	308d883a 	add	r6,r6,r2
   89e6c:	19801636 	bltu	r3,r6,89ec8 <_calloc_r+0x8c>
   89e70:	008004c4 	movi	r2,19
   89e74:	11800b2e 	bgeu	r2,r6,89ea4 <_calloc_r+0x68>
   89e78:	80000015 	stw	zero,0(r16)
   89e7c:	80000115 	stw	zero,4(r16)
   89e80:	008006c4 	movi	r2,27
   89e84:	11801a2e 	bgeu	r2,r6,89ef0 <_calloc_r+0xb4>
   89e88:	80000215 	stw	zero,8(r16)
   89e8c:	80000315 	stw	zero,12(r16)
   89e90:	30c0151e 	bne	r6,r3,89ee8 <_calloc_r+0xac>
   89e94:	80000415 	stw	zero,16(r16)
   89e98:	80800604 	addi	r2,r16,24
   89e9c:	80000515 	stw	zero,20(r16)
   89ea0:	00000106 	br	89ea8 <_calloc_r+0x6c>
   89ea4:	8005883a 	mov	r2,r16
   89ea8:	10000015 	stw	zero,0(r2)
   89eac:	10000115 	stw	zero,4(r2)
   89eb0:	10000215 	stw	zero,8(r2)
   89eb4:	8005883a 	mov	r2,r16
   89eb8:	dfc00117 	ldw	ra,4(sp)
   89ebc:	dc000017 	ldw	r16,0(sp)
   89ec0:	dec00204 	addi	sp,sp,8
   89ec4:	f800283a 	ret
   89ec8:	000b883a 	mov	r5,zero
   89ecc:	8009883a 	mov	r4,r16
   89ed0:	0082f040 	call	82f04 <memset>
   89ed4:	8005883a 	mov	r2,r16
   89ed8:	dfc00117 	ldw	ra,4(sp)
   89edc:	dc000017 	ldw	r16,0(sp)
   89ee0:	dec00204 	addi	sp,sp,8
   89ee4:	f800283a 	ret
   89ee8:	80800404 	addi	r2,r16,16
   89eec:	003fee06 	br	89ea8 <rx_descriptor_end+0xfff89e48>
   89ef0:	80800204 	addi	r2,r16,8
   89ef4:	003fec06 	br	89ea8 <rx_descriptor_end+0xfff89e48>
   89ef8:	0005883a 	mov	r2,zero
   89efc:	003fee06 	br	89eb8 <rx_descriptor_end+0xfff89e58>

00089f00 <__fputwc>:
   89f00:	defff804 	addi	sp,sp,-32
   89f04:	dcc00415 	stw	r19,16(sp)
   89f08:	dc800315 	stw	r18,12(sp)
   89f0c:	dc000115 	stw	r16,4(sp)
   89f10:	dfc00715 	stw	ra,28(sp)
   89f14:	dd400615 	stw	r21,24(sp)
   89f18:	dd000515 	stw	r20,20(sp)
   89f1c:	dc400215 	stw	r17,8(sp)
   89f20:	2027883a 	mov	r19,r4
   89f24:	2825883a 	mov	r18,r5
   89f28:	3021883a 	mov	r16,r6
   89f2c:	00871140 	call	87114 <__locale_mb_cur_max>
   89f30:	00c00044 	movi	r3,1
   89f34:	10c03e26 	beq	r2,r3,8a030 <__fputwc+0x130>
   89f38:	81c01704 	addi	r7,r16,92
   89f3c:	900d883a 	mov	r6,r18
   89f40:	d80b883a 	mov	r5,sp
   89f44:	9809883a 	mov	r4,r19
   89f48:	008ad300 	call	8ad30 <_wcrtomb_r>
   89f4c:	1029883a 	mov	r20,r2
   89f50:	00bfffc4 	movi	r2,-1
   89f54:	a0802026 	beq	r20,r2,89fd8 <__fputwc+0xd8>
   89f58:	d9400003 	ldbu	r5,0(sp)
   89f5c:	a0001c26 	beq	r20,zero,89fd0 <__fputwc+0xd0>
   89f60:	0023883a 	mov	r17,zero
   89f64:	05400284 	movi	r21,10
   89f68:	00000906 	br	89f90 <__fputwc+0x90>
   89f6c:	80800017 	ldw	r2,0(r16)
   89f70:	11400005 	stb	r5,0(r2)
   89f74:	80c00017 	ldw	r3,0(r16)
   89f78:	18c00044 	addi	r3,r3,1
   89f7c:	80c00015 	stw	r3,0(r16)
   89f80:	8c400044 	addi	r17,r17,1
   89f84:	dc45883a 	add	r2,sp,r17
   89f88:	8d00112e 	bgeu	r17,r20,89fd0 <__fputwc+0xd0>
   89f8c:	11400003 	ldbu	r5,0(r2)
   89f90:	80c00217 	ldw	r3,8(r16)
   89f94:	18ffffc4 	addi	r3,r3,-1
   89f98:	80c00215 	stw	r3,8(r16)
   89f9c:	183ff30e 	bge	r3,zero,89f6c <rx_descriptor_end+0xfff89f0c>
   89fa0:	80800617 	ldw	r2,24(r16)
   89fa4:	18801916 	blt	r3,r2,8a00c <__fputwc+0x10c>
   89fa8:	80800017 	ldw	r2,0(r16)
   89fac:	11400005 	stb	r5,0(r2)
   89fb0:	80800017 	ldw	r2,0(r16)
   89fb4:	10c00003 	ldbu	r3,0(r2)
   89fb8:	10800044 	addi	r2,r2,1
   89fbc:	1d402326 	beq	r3,r21,8a04c <__fputwc+0x14c>
   89fc0:	80800015 	stw	r2,0(r16)
   89fc4:	8c400044 	addi	r17,r17,1
   89fc8:	dc45883a 	add	r2,sp,r17
   89fcc:	8d3fef36 	bltu	r17,r20,89f8c <rx_descriptor_end+0xfff89f2c>
   89fd0:	9005883a 	mov	r2,r18
   89fd4:	00000406 	br	89fe8 <__fputwc+0xe8>
   89fd8:	80c0030b 	ldhu	r3,12(r16)
   89fdc:	a005883a 	mov	r2,r20
   89fe0:	18c01014 	ori	r3,r3,64
   89fe4:	80c0030d 	sth	r3,12(r16)
   89fe8:	dfc00717 	ldw	ra,28(sp)
   89fec:	dd400617 	ldw	r21,24(sp)
   89ff0:	dd000517 	ldw	r20,20(sp)
   89ff4:	dcc00417 	ldw	r19,16(sp)
   89ff8:	dc800317 	ldw	r18,12(sp)
   89ffc:	dc400217 	ldw	r17,8(sp)
   8a000:	dc000117 	ldw	r16,4(sp)
   8a004:	dec00804 	addi	sp,sp,32
   8a008:	f800283a 	ret
   8a00c:	800d883a 	mov	r6,r16
   8a010:	29403fcc 	andi	r5,r5,255
   8a014:	9809883a 	mov	r4,r19
   8a018:	008abd80 	call	8abd8 <__swbuf_r>
   8a01c:	10bfffe0 	cmpeqi	r2,r2,-1
   8a020:	10803fcc 	andi	r2,r2,255
   8a024:	103fd626 	beq	r2,zero,89f80 <rx_descriptor_end+0xfff89f20>
   8a028:	00bfffc4 	movi	r2,-1
   8a02c:	003fee06 	br	89fe8 <rx_descriptor_end+0xfff89f88>
   8a030:	90ffffc4 	addi	r3,r18,-1
   8a034:	01003f84 	movi	r4,254
   8a038:	20ffbf36 	bltu	r4,r3,89f38 <rx_descriptor_end+0xfff89ed8>
   8a03c:	900b883a 	mov	r5,r18
   8a040:	dc800005 	stb	r18,0(sp)
   8a044:	1029883a 	mov	r20,r2
   8a048:	003fc506 	br	89f60 <rx_descriptor_end+0xfff89f00>
   8a04c:	800d883a 	mov	r6,r16
   8a050:	a80b883a 	mov	r5,r21
   8a054:	9809883a 	mov	r4,r19
   8a058:	008abd80 	call	8abd8 <__swbuf_r>
   8a05c:	10bfffe0 	cmpeqi	r2,r2,-1
   8a060:	003fef06 	br	8a020 <rx_descriptor_end+0xfff89fc0>

0008a064 <_fputwc_r>:
   8a064:	3080030b 	ldhu	r2,12(r6)
   8a068:	10c8000c 	andi	r3,r2,8192
   8a06c:	1800051e 	bne	r3,zero,8a084 <_fputwc_r+0x20>
   8a070:	30c01917 	ldw	r3,100(r6)
   8a074:	10880014 	ori	r2,r2,8192
   8a078:	3080030d 	sth	r2,12(r6)
   8a07c:	18880014 	ori	r2,r3,8192
   8a080:	30801915 	stw	r2,100(r6)
   8a084:	0089f001 	jmpi	89f00 <__fputwc>

0008a088 <fputwc>:
   8a088:	00800274 	movhi	r2,9
   8a08c:	defffc04 	addi	sp,sp,-16
   8a090:	10907304 	addi	r2,r2,16844
   8a094:	dc000115 	stw	r16,4(sp)
   8a098:	14000017 	ldw	r16,0(r2)
   8a09c:	dc400215 	stw	r17,8(sp)
   8a0a0:	dfc00315 	stw	ra,12(sp)
   8a0a4:	2023883a 	mov	r17,r4
   8a0a8:	80000226 	beq	r16,zero,8a0b4 <fputwc+0x2c>
   8a0ac:	80800e17 	ldw	r2,56(r16)
   8a0b0:	10001026 	beq	r2,zero,8a0f4 <fputwc+0x6c>
   8a0b4:	2880030b 	ldhu	r2,12(r5)
   8a0b8:	10c8000c 	andi	r3,r2,8192
   8a0bc:	1800051e 	bne	r3,zero,8a0d4 <fputwc+0x4c>
   8a0c0:	28c01917 	ldw	r3,100(r5)
   8a0c4:	10880014 	ori	r2,r2,8192
   8a0c8:	2880030d 	sth	r2,12(r5)
   8a0cc:	18880014 	ori	r2,r3,8192
   8a0d0:	28801915 	stw	r2,100(r5)
   8a0d4:	280d883a 	mov	r6,r5
   8a0d8:	8009883a 	mov	r4,r16
   8a0dc:	880b883a 	mov	r5,r17
   8a0e0:	dfc00317 	ldw	ra,12(sp)
   8a0e4:	dc400217 	ldw	r17,8(sp)
   8a0e8:	dc000117 	ldw	r16,4(sp)
   8a0ec:	dec00404 	addi	sp,sp,16
   8a0f0:	0089f001 	jmpi	89f00 <__fputwc>
   8a0f4:	8009883a 	mov	r4,r16
   8a0f8:	d9400015 	stw	r5,0(sp)
   8a0fc:	0081f680 	call	81f68 <__sinit>
   8a100:	d9400017 	ldw	r5,0(sp)
   8a104:	003feb06 	br	8a0b4 <rx_descriptor_end+0xfff8a054>

0008a108 <_fstat_r>:
   8a108:	defffd04 	addi	sp,sp,-12
   8a10c:	2805883a 	mov	r2,r5
   8a110:	dc000015 	stw	r16,0(sp)
   8a114:	04000274 	movhi	r16,9
   8a118:	dc400115 	stw	r17,4(sp)
   8a11c:	84186b04 	addi	r16,r16,25004
   8a120:	2023883a 	mov	r17,r4
   8a124:	300b883a 	mov	r5,r6
   8a128:	1009883a 	mov	r4,r2
   8a12c:	dfc00215 	stw	ra,8(sp)
   8a130:	80000015 	stw	zero,0(r16)
   8a134:	008e3a00 	call	8e3a0 <fstat>
   8a138:	00ffffc4 	movi	r3,-1
   8a13c:	10c00526 	beq	r2,r3,8a154 <_fstat_r+0x4c>
   8a140:	dfc00217 	ldw	ra,8(sp)
   8a144:	dc400117 	ldw	r17,4(sp)
   8a148:	dc000017 	ldw	r16,0(sp)
   8a14c:	dec00304 	addi	sp,sp,12
   8a150:	f800283a 	ret
   8a154:	80c00017 	ldw	r3,0(r16)
   8a158:	183ff926 	beq	r3,zero,8a140 <rx_descriptor_end+0xfff8a0e0>
   8a15c:	88c00015 	stw	r3,0(r17)
   8a160:	003ff706 	br	8a140 <rx_descriptor_end+0xfff8a0e0>

0008a164 <__sfvwrite_r>:
   8a164:	30800217 	ldw	r2,8(r6)
   8a168:	10006726 	beq	r2,zero,8a308 <__sfvwrite_r+0x1a4>
   8a16c:	28c0030b 	ldhu	r3,12(r5)
   8a170:	defff404 	addi	sp,sp,-48
   8a174:	dd400715 	stw	r21,28(sp)
   8a178:	dd000615 	stw	r20,24(sp)
   8a17c:	dc000215 	stw	r16,8(sp)
   8a180:	dfc00b15 	stw	ra,44(sp)
   8a184:	df000a15 	stw	fp,40(sp)
   8a188:	ddc00915 	stw	r23,36(sp)
   8a18c:	dd800815 	stw	r22,32(sp)
   8a190:	dcc00515 	stw	r19,20(sp)
   8a194:	dc800415 	stw	r18,16(sp)
   8a198:	dc400315 	stw	r17,12(sp)
   8a19c:	1880020c 	andi	r2,r3,8
   8a1a0:	2821883a 	mov	r16,r5
   8a1a4:	202b883a 	mov	r21,r4
   8a1a8:	3029883a 	mov	r20,r6
   8a1ac:	10002726 	beq	r2,zero,8a24c <__sfvwrite_r+0xe8>
   8a1b0:	28800417 	ldw	r2,16(r5)
   8a1b4:	10002526 	beq	r2,zero,8a24c <__sfvwrite_r+0xe8>
   8a1b8:	1880008c 	andi	r2,r3,2
   8a1bc:	a4400017 	ldw	r17,0(r20)
   8a1c0:	10002a26 	beq	r2,zero,8a26c <__sfvwrite_r+0x108>
   8a1c4:	05a00034 	movhi	r22,32768
   8a1c8:	0027883a 	mov	r19,zero
   8a1cc:	0025883a 	mov	r18,zero
   8a1d0:	b5bf0004 	addi	r22,r22,-1024
   8a1d4:	980d883a 	mov	r6,r19
   8a1d8:	a809883a 	mov	r4,r21
   8a1dc:	90004626 	beq	r18,zero,8a2f8 <__sfvwrite_r+0x194>
   8a1e0:	900f883a 	mov	r7,r18
   8a1e4:	b480022e 	bgeu	r22,r18,8a1f0 <__sfvwrite_r+0x8c>
   8a1e8:	01e00034 	movhi	r7,32768
   8a1ec:	39ff0004 	addi	r7,r7,-1024
   8a1f0:	80800917 	ldw	r2,36(r16)
   8a1f4:	81400717 	ldw	r5,28(r16)
   8a1f8:	103ee83a 	callr	r2
   8a1fc:	0080570e 	bge	zero,r2,8a35c <__sfvwrite_r+0x1f8>
   8a200:	a0c00217 	ldw	r3,8(r20)
   8a204:	98a7883a 	add	r19,r19,r2
   8a208:	90a5c83a 	sub	r18,r18,r2
   8a20c:	1885c83a 	sub	r2,r3,r2
   8a210:	a0800215 	stw	r2,8(r20)
   8a214:	103fef1e 	bne	r2,zero,8a1d4 <rx_descriptor_end+0xfff8a174>
   8a218:	0005883a 	mov	r2,zero
   8a21c:	dfc00b17 	ldw	ra,44(sp)
   8a220:	df000a17 	ldw	fp,40(sp)
   8a224:	ddc00917 	ldw	r23,36(sp)
   8a228:	dd800817 	ldw	r22,32(sp)
   8a22c:	dd400717 	ldw	r21,28(sp)
   8a230:	dd000617 	ldw	r20,24(sp)
   8a234:	dcc00517 	ldw	r19,20(sp)
   8a238:	dc800417 	ldw	r18,16(sp)
   8a23c:	dc400317 	ldw	r17,12(sp)
   8a240:	dc000217 	ldw	r16,8(sp)
   8a244:	dec00c04 	addi	sp,sp,48
   8a248:	f800283a 	ret
   8a24c:	800b883a 	mov	r5,r16
   8a250:	a809883a 	mov	r4,r21
   8a254:	00855580 	call	85558 <__swsetup_r>
   8a258:	1000eb1e 	bne	r2,zero,8a608 <__sfvwrite_r+0x4a4>
   8a25c:	80c0030b 	ldhu	r3,12(r16)
   8a260:	a4400017 	ldw	r17,0(r20)
   8a264:	1880008c 	andi	r2,r3,2
   8a268:	103fd61e 	bne	r2,zero,8a1c4 <rx_descriptor_end+0xfff8a164>
   8a26c:	1880004c 	andi	r2,r3,1
   8a270:	10003f1e 	bne	r2,zero,8a370 <__sfvwrite_r+0x20c>
   8a274:	0039883a 	mov	fp,zero
   8a278:	0025883a 	mov	r18,zero
   8a27c:	90001a26 	beq	r18,zero,8a2e8 <__sfvwrite_r+0x184>
   8a280:	1880800c 	andi	r2,r3,512
   8a284:	84c00217 	ldw	r19,8(r16)
   8a288:	10002126 	beq	r2,zero,8a310 <__sfvwrite_r+0x1ac>
   8a28c:	982f883a 	mov	r23,r19
   8a290:	94c09336 	bltu	r18,r19,8a4e0 <__sfvwrite_r+0x37c>
   8a294:	1881200c 	andi	r2,r3,1152
   8a298:	10009e1e 	bne	r2,zero,8a514 <__sfvwrite_r+0x3b0>
   8a29c:	81000017 	ldw	r4,0(r16)
   8a2a0:	b80d883a 	mov	r6,r23
   8a2a4:	e00b883a 	mov	r5,fp
   8a2a8:	0082da80 	call	82da8 <memmove>
   8a2ac:	80c00217 	ldw	r3,8(r16)
   8a2b0:	81000017 	ldw	r4,0(r16)
   8a2b4:	9005883a 	mov	r2,r18
   8a2b8:	1ce7c83a 	sub	r19,r3,r19
   8a2bc:	25cf883a 	add	r7,r4,r23
   8a2c0:	84c00215 	stw	r19,8(r16)
   8a2c4:	81c00015 	stw	r7,0(r16)
   8a2c8:	a0c00217 	ldw	r3,8(r20)
   8a2cc:	e0b9883a 	add	fp,fp,r2
   8a2d0:	90a5c83a 	sub	r18,r18,r2
   8a2d4:	18a7c83a 	sub	r19,r3,r2
   8a2d8:	a4c00215 	stw	r19,8(r20)
   8a2dc:	983fce26 	beq	r19,zero,8a218 <rx_descriptor_end+0xfff8a1b8>
   8a2e0:	80c0030b 	ldhu	r3,12(r16)
   8a2e4:	903fe61e 	bne	r18,zero,8a280 <rx_descriptor_end+0xfff8a220>
   8a2e8:	8f000017 	ldw	fp,0(r17)
   8a2ec:	8c800117 	ldw	r18,4(r17)
   8a2f0:	8c400204 	addi	r17,r17,8
   8a2f4:	003fe106 	br	8a27c <rx_descriptor_end+0xfff8a21c>
   8a2f8:	8cc00017 	ldw	r19,0(r17)
   8a2fc:	8c800117 	ldw	r18,4(r17)
   8a300:	8c400204 	addi	r17,r17,8
   8a304:	003fb306 	br	8a1d4 <rx_descriptor_end+0xfff8a174>
   8a308:	0005883a 	mov	r2,zero
   8a30c:	f800283a 	ret
   8a310:	81000017 	ldw	r4,0(r16)
   8a314:	80800417 	ldw	r2,16(r16)
   8a318:	11005736 	bltu	r2,r4,8a478 <__sfvwrite_r+0x314>
   8a31c:	85c00517 	ldw	r23,20(r16)
   8a320:	95c05536 	bltu	r18,r23,8a478 <__sfvwrite_r+0x314>
   8a324:	00a00034 	movhi	r2,32768
   8a328:	10bfffc4 	addi	r2,r2,-1
   8a32c:	9009883a 	mov	r4,r18
   8a330:	1480012e 	bgeu	r2,r18,8a338 <__sfvwrite_r+0x1d4>
   8a334:	1009883a 	mov	r4,r2
   8a338:	b80b883a 	mov	r5,r23
   8a33c:	008b9c80 	call	8b9c8 <__divsi3>
   8a340:	15cf383a 	mul	r7,r2,r23
   8a344:	81400717 	ldw	r5,28(r16)
   8a348:	80800917 	ldw	r2,36(r16)
   8a34c:	e00d883a 	mov	r6,fp
   8a350:	a809883a 	mov	r4,r21
   8a354:	103ee83a 	callr	r2
   8a358:	00bfdb16 	blt	zero,r2,8a2c8 <rx_descriptor_end+0xfff8a268>
   8a35c:	8080030b 	ldhu	r2,12(r16)
   8a360:	10801014 	ori	r2,r2,64
   8a364:	8080030d 	sth	r2,12(r16)
   8a368:	00bfffc4 	movi	r2,-1
   8a36c:	003fab06 	br	8a21c <rx_descriptor_end+0xfff8a1bc>
   8a370:	0027883a 	mov	r19,zero
   8a374:	0011883a 	mov	r8,zero
   8a378:	0039883a 	mov	fp,zero
   8a37c:	0025883a 	mov	r18,zero
   8a380:	90001f26 	beq	r18,zero,8a400 <__sfvwrite_r+0x29c>
   8a384:	40005a26 	beq	r8,zero,8a4f0 <__sfvwrite_r+0x38c>
   8a388:	982d883a 	mov	r22,r19
   8a38c:	94c0012e 	bgeu	r18,r19,8a394 <__sfvwrite_r+0x230>
   8a390:	902d883a 	mov	r22,r18
   8a394:	81000017 	ldw	r4,0(r16)
   8a398:	80800417 	ldw	r2,16(r16)
   8a39c:	b02f883a 	mov	r23,r22
   8a3a0:	81c00517 	ldw	r7,20(r16)
   8a3a4:	1100032e 	bgeu	r2,r4,8a3b4 <__sfvwrite_r+0x250>
   8a3a8:	80c00217 	ldw	r3,8(r16)
   8a3ac:	38c7883a 	add	r3,r7,r3
   8a3b0:	1d801816 	blt	r3,r22,8a414 <__sfvwrite_r+0x2b0>
   8a3b4:	b1c03e16 	blt	r22,r7,8a4b0 <__sfvwrite_r+0x34c>
   8a3b8:	80800917 	ldw	r2,36(r16)
   8a3bc:	81400717 	ldw	r5,28(r16)
   8a3c0:	e00d883a 	mov	r6,fp
   8a3c4:	da000115 	stw	r8,4(sp)
   8a3c8:	a809883a 	mov	r4,r21
   8a3cc:	103ee83a 	callr	r2
   8a3d0:	102f883a 	mov	r23,r2
   8a3d4:	da000117 	ldw	r8,4(sp)
   8a3d8:	00bfe00e 	bge	zero,r2,8a35c <rx_descriptor_end+0xfff8a2fc>
   8a3dc:	9de7c83a 	sub	r19,r19,r23
   8a3e0:	98001f26 	beq	r19,zero,8a460 <__sfvwrite_r+0x2fc>
   8a3e4:	a0800217 	ldw	r2,8(r20)
   8a3e8:	e5f9883a 	add	fp,fp,r23
   8a3ec:	95e5c83a 	sub	r18,r18,r23
   8a3f0:	15efc83a 	sub	r23,r2,r23
   8a3f4:	a5c00215 	stw	r23,8(r20)
   8a3f8:	b83f8726 	beq	r23,zero,8a218 <rx_descriptor_end+0xfff8a1b8>
   8a3fc:	903fe11e 	bne	r18,zero,8a384 <rx_descriptor_end+0xfff8a324>
   8a400:	8f000017 	ldw	fp,0(r17)
   8a404:	8c800117 	ldw	r18,4(r17)
   8a408:	0011883a 	mov	r8,zero
   8a40c:	8c400204 	addi	r17,r17,8
   8a410:	003fdb06 	br	8a380 <rx_descriptor_end+0xfff8a320>
   8a414:	180d883a 	mov	r6,r3
   8a418:	e00b883a 	mov	r5,fp
   8a41c:	da000115 	stw	r8,4(sp)
   8a420:	d8c00015 	stw	r3,0(sp)
   8a424:	0082da80 	call	82da8 <memmove>
   8a428:	d8c00017 	ldw	r3,0(sp)
   8a42c:	80800017 	ldw	r2,0(r16)
   8a430:	800b883a 	mov	r5,r16
   8a434:	a809883a 	mov	r4,r21
   8a438:	10c5883a 	add	r2,r2,r3
   8a43c:	80800015 	stw	r2,0(r16)
   8a440:	d8c00015 	stw	r3,0(sp)
   8a444:	0081b8c0 	call	81b8c <_fflush_r>
   8a448:	d8c00017 	ldw	r3,0(sp)
   8a44c:	da000117 	ldw	r8,4(sp)
   8a450:	103fc21e 	bne	r2,zero,8a35c <rx_descriptor_end+0xfff8a2fc>
   8a454:	182f883a 	mov	r23,r3
   8a458:	9de7c83a 	sub	r19,r19,r23
   8a45c:	983fe11e 	bne	r19,zero,8a3e4 <rx_descriptor_end+0xfff8a384>
   8a460:	800b883a 	mov	r5,r16
   8a464:	a809883a 	mov	r4,r21
   8a468:	0081b8c0 	call	81b8c <_fflush_r>
   8a46c:	103fbb1e 	bne	r2,zero,8a35c <rx_descriptor_end+0xfff8a2fc>
   8a470:	0011883a 	mov	r8,zero
   8a474:	003fdb06 	br	8a3e4 <rx_descriptor_end+0xfff8a384>
   8a478:	94c0012e 	bgeu	r18,r19,8a480 <__sfvwrite_r+0x31c>
   8a47c:	9027883a 	mov	r19,r18
   8a480:	980d883a 	mov	r6,r19
   8a484:	e00b883a 	mov	r5,fp
   8a488:	0082da80 	call	82da8 <memmove>
   8a48c:	80800217 	ldw	r2,8(r16)
   8a490:	80c00017 	ldw	r3,0(r16)
   8a494:	14c5c83a 	sub	r2,r2,r19
   8a498:	1cc7883a 	add	r3,r3,r19
   8a49c:	80800215 	stw	r2,8(r16)
   8a4a0:	80c00015 	stw	r3,0(r16)
   8a4a4:	10004326 	beq	r2,zero,8a5b4 <__sfvwrite_r+0x450>
   8a4a8:	9805883a 	mov	r2,r19
   8a4ac:	003f8606 	br	8a2c8 <rx_descriptor_end+0xfff8a268>
   8a4b0:	b00d883a 	mov	r6,r22
   8a4b4:	e00b883a 	mov	r5,fp
   8a4b8:	da000115 	stw	r8,4(sp)
   8a4bc:	0082da80 	call	82da8 <memmove>
   8a4c0:	80800217 	ldw	r2,8(r16)
   8a4c4:	80c00017 	ldw	r3,0(r16)
   8a4c8:	da000117 	ldw	r8,4(sp)
   8a4cc:	1585c83a 	sub	r2,r2,r22
   8a4d0:	1dad883a 	add	r22,r3,r22
   8a4d4:	80800215 	stw	r2,8(r16)
   8a4d8:	85800015 	stw	r22,0(r16)
   8a4dc:	003fbf06 	br	8a3dc <rx_descriptor_end+0xfff8a37c>
   8a4e0:	81000017 	ldw	r4,0(r16)
   8a4e4:	9027883a 	mov	r19,r18
   8a4e8:	902f883a 	mov	r23,r18
   8a4ec:	003f6c06 	br	8a2a0 <rx_descriptor_end+0xfff8a240>
   8a4f0:	900d883a 	mov	r6,r18
   8a4f4:	01400284 	movi	r5,10
   8a4f8:	e009883a 	mov	r4,fp
   8a4fc:	00873840 	call	87384 <memchr>
   8a500:	10003e26 	beq	r2,zero,8a5fc <__sfvwrite_r+0x498>
   8a504:	10800044 	addi	r2,r2,1
   8a508:	1727c83a 	sub	r19,r2,fp
   8a50c:	02000044 	movi	r8,1
   8a510:	003f9d06 	br	8a388 <rx_descriptor_end+0xfff8a328>
   8a514:	80800517 	ldw	r2,20(r16)
   8a518:	81400417 	ldw	r5,16(r16)
   8a51c:	81c00017 	ldw	r7,0(r16)
   8a520:	10a7883a 	add	r19,r2,r2
   8a524:	9885883a 	add	r2,r19,r2
   8a528:	1026d7fa 	srli	r19,r2,31
   8a52c:	396dc83a 	sub	r22,r7,r5
   8a530:	b1000044 	addi	r4,r22,1
   8a534:	9885883a 	add	r2,r19,r2
   8a538:	1027d07a 	srai	r19,r2,1
   8a53c:	2485883a 	add	r2,r4,r18
   8a540:	980d883a 	mov	r6,r19
   8a544:	9880022e 	bgeu	r19,r2,8a550 <__sfvwrite_r+0x3ec>
   8a548:	1027883a 	mov	r19,r2
   8a54c:	100d883a 	mov	r6,r2
   8a550:	18c1000c 	andi	r3,r3,1024
   8a554:	18001c26 	beq	r3,zero,8a5c8 <__sfvwrite_r+0x464>
   8a558:	300b883a 	mov	r5,r6
   8a55c:	a809883a 	mov	r4,r21
   8a560:	008259c0 	call	8259c <_malloc_r>
   8a564:	102f883a 	mov	r23,r2
   8a568:	10002926 	beq	r2,zero,8a610 <__sfvwrite_r+0x4ac>
   8a56c:	81400417 	ldw	r5,16(r16)
   8a570:	b00d883a 	mov	r6,r22
   8a574:	1009883a 	mov	r4,r2
   8a578:	00874680 	call	87468 <memcpy>
   8a57c:	8080030b 	ldhu	r2,12(r16)
   8a580:	00fedfc4 	movi	r3,-1153
   8a584:	10c4703a 	and	r2,r2,r3
   8a588:	10802014 	ori	r2,r2,128
   8a58c:	8080030d 	sth	r2,12(r16)
   8a590:	bd89883a 	add	r4,r23,r22
   8a594:	9d8fc83a 	sub	r7,r19,r22
   8a598:	85c00415 	stw	r23,16(r16)
   8a59c:	84c00515 	stw	r19,20(r16)
   8a5a0:	81000015 	stw	r4,0(r16)
   8a5a4:	9027883a 	mov	r19,r18
   8a5a8:	81c00215 	stw	r7,8(r16)
   8a5ac:	902f883a 	mov	r23,r18
   8a5b0:	003f3b06 	br	8a2a0 <rx_descriptor_end+0xfff8a240>
   8a5b4:	800b883a 	mov	r5,r16
   8a5b8:	a809883a 	mov	r4,r21
   8a5bc:	0081b8c0 	call	81b8c <_fflush_r>
   8a5c0:	103fb926 	beq	r2,zero,8a4a8 <rx_descriptor_end+0xfff8a448>
   8a5c4:	003f6506 	br	8a35c <rx_descriptor_end+0xfff8a2fc>
   8a5c8:	a809883a 	mov	r4,r21
   8a5cc:	008a6740 	call	8a674 <_realloc_r>
   8a5d0:	102f883a 	mov	r23,r2
   8a5d4:	103fee1e 	bne	r2,zero,8a590 <rx_descriptor_end+0xfff8a530>
   8a5d8:	81400417 	ldw	r5,16(r16)
   8a5dc:	a809883a 	mov	r4,r21
   8a5e0:	00820dc0 	call	820dc <_free_r>
   8a5e4:	8080030b 	ldhu	r2,12(r16)
   8a5e8:	00ffdfc4 	movi	r3,-129
   8a5ec:	1884703a 	and	r2,r3,r2
   8a5f0:	00c00304 	movi	r3,12
   8a5f4:	a8c00015 	stw	r3,0(r21)
   8a5f8:	003f5906 	br	8a360 <rx_descriptor_end+0xfff8a300>
   8a5fc:	94c00044 	addi	r19,r18,1
   8a600:	02000044 	movi	r8,1
   8a604:	003f6006 	br	8a388 <rx_descriptor_end+0xfff8a328>
   8a608:	00bfffc4 	movi	r2,-1
   8a60c:	003f0306 	br	8a21c <rx_descriptor_end+0xfff8a1bc>
   8a610:	00800304 	movi	r2,12
   8a614:	a8800015 	stw	r2,0(r21)
   8a618:	8080030b 	ldhu	r2,12(r16)
   8a61c:	003f5006 	br	8a360 <rx_descriptor_end+0xfff8a300>

0008a620 <_isatty_r>:
   8a620:	defffd04 	addi	sp,sp,-12
   8a624:	dc000015 	stw	r16,0(sp)
   8a628:	04000274 	movhi	r16,9
   8a62c:	dc400115 	stw	r17,4(sp)
   8a630:	84186b04 	addi	r16,r16,25004
   8a634:	2023883a 	mov	r17,r4
   8a638:	2809883a 	mov	r4,r5
   8a63c:	dfc00215 	stw	ra,8(sp)
   8a640:	80000015 	stw	zero,0(r16)
   8a644:	008e48c0 	call	8e48c <isatty>
   8a648:	00ffffc4 	movi	r3,-1
   8a64c:	10c00526 	beq	r2,r3,8a664 <_isatty_r+0x44>
   8a650:	dfc00217 	ldw	ra,8(sp)
   8a654:	dc400117 	ldw	r17,4(sp)
   8a658:	dc000017 	ldw	r16,0(sp)
   8a65c:	dec00304 	addi	sp,sp,12
   8a660:	f800283a 	ret
   8a664:	80c00017 	ldw	r3,0(r16)
   8a668:	183ff926 	beq	r3,zero,8a650 <rx_descriptor_end+0xfff8a5f0>
   8a66c:	88c00015 	stw	r3,0(r17)
   8a670:	003ff706 	br	8a650 <rx_descriptor_end+0xfff8a5f0>

0008a674 <_realloc_r>:
   8a674:	defff604 	addi	sp,sp,-40
   8a678:	dc800215 	stw	r18,8(sp)
   8a67c:	dfc00915 	stw	ra,36(sp)
   8a680:	df000815 	stw	fp,32(sp)
   8a684:	ddc00715 	stw	r23,28(sp)
   8a688:	dd800615 	stw	r22,24(sp)
   8a68c:	dd400515 	stw	r21,20(sp)
   8a690:	dd000415 	stw	r20,16(sp)
   8a694:	dcc00315 	stw	r19,12(sp)
   8a698:	dc400115 	stw	r17,4(sp)
   8a69c:	dc000015 	stw	r16,0(sp)
   8a6a0:	3025883a 	mov	r18,r6
   8a6a4:	2800b726 	beq	r5,zero,8a984 <_realloc_r+0x310>
   8a6a8:	282b883a 	mov	r21,r5
   8a6ac:	2029883a 	mov	r20,r4
   8a6b0:	008e7a80 	call	8e7a8 <__malloc_lock>
   8a6b4:	a8bfff17 	ldw	r2,-4(r21)
   8a6b8:	043fff04 	movi	r16,-4
   8a6bc:	90c002c4 	addi	r3,r18,11
   8a6c0:	01000584 	movi	r4,22
   8a6c4:	acfffe04 	addi	r19,r21,-8
   8a6c8:	1420703a 	and	r16,r2,r16
   8a6cc:	20c0332e 	bgeu	r4,r3,8a79c <_realloc_r+0x128>
   8a6d0:	047ffe04 	movi	r17,-8
   8a6d4:	1c62703a 	and	r17,r3,r17
   8a6d8:	8807883a 	mov	r3,r17
   8a6dc:	88005816 	blt	r17,zero,8a840 <_realloc_r+0x1cc>
   8a6e0:	8c805736 	bltu	r17,r18,8a840 <_realloc_r+0x1cc>
   8a6e4:	80c0300e 	bge	r16,r3,8a7a8 <_realloc_r+0x134>
   8a6e8:	07000274 	movhi	fp,9
   8a6ec:	e70ab704 	addi	fp,fp,10972
   8a6f0:	e1c00217 	ldw	r7,8(fp)
   8a6f4:	9c09883a 	add	r4,r19,r16
   8a6f8:	22000117 	ldw	r8,4(r4)
   8a6fc:	21c06326 	beq	r4,r7,8a88c <_realloc_r+0x218>
   8a700:	017fff84 	movi	r5,-2
   8a704:	414a703a 	and	r5,r8,r5
   8a708:	214b883a 	add	r5,r4,r5
   8a70c:	29800117 	ldw	r6,4(r5)
   8a710:	3180004c 	andi	r6,r6,1
   8a714:	30003f26 	beq	r6,zero,8a814 <_realloc_r+0x1a0>
   8a718:	1080004c 	andi	r2,r2,1
   8a71c:	10008326 	beq	r2,zero,8a92c <_realloc_r+0x2b8>
   8a720:	900b883a 	mov	r5,r18
   8a724:	a009883a 	mov	r4,r20
   8a728:	008259c0 	call	8259c <_malloc_r>
   8a72c:	1025883a 	mov	r18,r2
   8a730:	10011e26 	beq	r2,zero,8abac <_realloc_r+0x538>
   8a734:	a93fff17 	ldw	r4,-4(r21)
   8a738:	10fffe04 	addi	r3,r2,-8
   8a73c:	00bfff84 	movi	r2,-2
   8a740:	2084703a 	and	r2,r4,r2
   8a744:	9885883a 	add	r2,r19,r2
   8a748:	1880ee26 	beq	r3,r2,8ab04 <_realloc_r+0x490>
   8a74c:	81bfff04 	addi	r6,r16,-4
   8a750:	00800904 	movi	r2,36
   8a754:	1180b836 	bltu	r2,r6,8aa38 <_realloc_r+0x3c4>
   8a758:	00c004c4 	movi	r3,19
   8a75c:	19809636 	bltu	r3,r6,8a9b8 <_realloc_r+0x344>
   8a760:	9005883a 	mov	r2,r18
   8a764:	a807883a 	mov	r3,r21
   8a768:	19000017 	ldw	r4,0(r3)
   8a76c:	11000015 	stw	r4,0(r2)
   8a770:	19000117 	ldw	r4,4(r3)
   8a774:	11000115 	stw	r4,4(r2)
   8a778:	18c00217 	ldw	r3,8(r3)
   8a77c:	10c00215 	stw	r3,8(r2)
   8a780:	a80b883a 	mov	r5,r21
   8a784:	a009883a 	mov	r4,r20
   8a788:	00820dc0 	call	820dc <_free_r>
   8a78c:	a009883a 	mov	r4,r20
   8a790:	008e7cc0 	call	8e7cc <__malloc_unlock>
   8a794:	9005883a 	mov	r2,r18
   8a798:	00001206 	br	8a7e4 <_realloc_r+0x170>
   8a79c:	00c00404 	movi	r3,16
   8a7a0:	1823883a 	mov	r17,r3
   8a7a4:	003fce06 	br	8a6e0 <rx_descriptor_end+0xfff8a680>
   8a7a8:	a825883a 	mov	r18,r21
   8a7ac:	8445c83a 	sub	r2,r16,r17
   8a7b0:	00c003c4 	movi	r3,15
   8a7b4:	18802636 	bltu	r3,r2,8a850 <_realloc_r+0x1dc>
   8a7b8:	99800117 	ldw	r6,4(r19)
   8a7bc:	9c07883a 	add	r3,r19,r16
   8a7c0:	3180004c 	andi	r6,r6,1
   8a7c4:	3420b03a 	or	r16,r6,r16
   8a7c8:	9c000115 	stw	r16,4(r19)
   8a7cc:	18800117 	ldw	r2,4(r3)
   8a7d0:	10800054 	ori	r2,r2,1
   8a7d4:	18800115 	stw	r2,4(r3)
   8a7d8:	a009883a 	mov	r4,r20
   8a7dc:	008e7cc0 	call	8e7cc <__malloc_unlock>
   8a7e0:	9005883a 	mov	r2,r18
   8a7e4:	dfc00917 	ldw	ra,36(sp)
   8a7e8:	df000817 	ldw	fp,32(sp)
   8a7ec:	ddc00717 	ldw	r23,28(sp)
   8a7f0:	dd800617 	ldw	r22,24(sp)
   8a7f4:	dd400517 	ldw	r21,20(sp)
   8a7f8:	dd000417 	ldw	r20,16(sp)
   8a7fc:	dcc00317 	ldw	r19,12(sp)
   8a800:	dc800217 	ldw	r18,8(sp)
   8a804:	dc400117 	ldw	r17,4(sp)
   8a808:	dc000017 	ldw	r16,0(sp)
   8a80c:	dec00a04 	addi	sp,sp,40
   8a810:	f800283a 	ret
   8a814:	017fff04 	movi	r5,-4
   8a818:	414a703a 	and	r5,r8,r5
   8a81c:	814d883a 	add	r6,r16,r5
   8a820:	30c01f16 	blt	r6,r3,8a8a0 <_realloc_r+0x22c>
   8a824:	20800317 	ldw	r2,12(r4)
   8a828:	20c00217 	ldw	r3,8(r4)
   8a82c:	a825883a 	mov	r18,r21
   8a830:	3021883a 	mov	r16,r6
   8a834:	18800315 	stw	r2,12(r3)
   8a838:	10c00215 	stw	r3,8(r2)
   8a83c:	003fdb06 	br	8a7ac <rx_descriptor_end+0xfff8a74c>
   8a840:	00800304 	movi	r2,12
   8a844:	a0800015 	stw	r2,0(r20)
   8a848:	0005883a 	mov	r2,zero
   8a84c:	003fe506 	br	8a7e4 <rx_descriptor_end+0xfff8a784>
   8a850:	98c00117 	ldw	r3,4(r19)
   8a854:	9c4b883a 	add	r5,r19,r17
   8a858:	11000054 	ori	r4,r2,1
   8a85c:	18c0004c 	andi	r3,r3,1
   8a860:	1c62b03a 	or	r17,r3,r17
   8a864:	9c400115 	stw	r17,4(r19)
   8a868:	29000115 	stw	r4,4(r5)
   8a86c:	2885883a 	add	r2,r5,r2
   8a870:	10c00117 	ldw	r3,4(r2)
   8a874:	29400204 	addi	r5,r5,8
   8a878:	a009883a 	mov	r4,r20
   8a87c:	18c00054 	ori	r3,r3,1
   8a880:	10c00115 	stw	r3,4(r2)
   8a884:	00820dc0 	call	820dc <_free_r>
   8a888:	003fd306 	br	8a7d8 <rx_descriptor_end+0xfff8a778>
   8a88c:	017fff04 	movi	r5,-4
   8a890:	414a703a 	and	r5,r8,r5
   8a894:	89800404 	addi	r6,r17,16
   8a898:	8151883a 	add	r8,r16,r5
   8a89c:	4180590e 	bge	r8,r6,8aa04 <_realloc_r+0x390>
   8a8a0:	1080004c 	andi	r2,r2,1
   8a8a4:	103f9e1e 	bne	r2,zero,8a720 <rx_descriptor_end+0xfff8a6c0>
   8a8a8:	adbffe17 	ldw	r22,-8(r21)
   8a8ac:	00bfff04 	movi	r2,-4
   8a8b0:	9dadc83a 	sub	r22,r19,r22
   8a8b4:	b1800117 	ldw	r6,4(r22)
   8a8b8:	3084703a 	and	r2,r6,r2
   8a8bc:	20002026 	beq	r4,zero,8a940 <_realloc_r+0x2cc>
   8a8c0:	80af883a 	add	r23,r16,r2
   8a8c4:	b96f883a 	add	r23,r23,r5
   8a8c8:	21c05f26 	beq	r4,r7,8aa48 <_realloc_r+0x3d4>
   8a8cc:	b8c01c16 	blt	r23,r3,8a940 <_realloc_r+0x2cc>
   8a8d0:	20800317 	ldw	r2,12(r4)
   8a8d4:	20c00217 	ldw	r3,8(r4)
   8a8d8:	81bfff04 	addi	r6,r16,-4
   8a8dc:	01000904 	movi	r4,36
   8a8e0:	18800315 	stw	r2,12(r3)
   8a8e4:	10c00215 	stw	r3,8(r2)
   8a8e8:	b0c00217 	ldw	r3,8(r22)
   8a8ec:	b0800317 	ldw	r2,12(r22)
   8a8f0:	b4800204 	addi	r18,r22,8
   8a8f4:	18800315 	stw	r2,12(r3)
   8a8f8:	10c00215 	stw	r3,8(r2)
   8a8fc:	21801b36 	bltu	r4,r6,8a96c <_realloc_r+0x2f8>
   8a900:	008004c4 	movi	r2,19
   8a904:	1180352e 	bgeu	r2,r6,8a9dc <_realloc_r+0x368>
   8a908:	a8800017 	ldw	r2,0(r21)
   8a90c:	b0800215 	stw	r2,8(r22)
   8a910:	a8800117 	ldw	r2,4(r21)
   8a914:	b0800315 	stw	r2,12(r22)
   8a918:	008006c4 	movi	r2,27
   8a91c:	11807f36 	bltu	r2,r6,8ab1c <_realloc_r+0x4a8>
   8a920:	b0800404 	addi	r2,r22,16
   8a924:	ad400204 	addi	r21,r21,8
   8a928:	00002d06 	br	8a9e0 <_realloc_r+0x36c>
   8a92c:	adbffe17 	ldw	r22,-8(r21)
   8a930:	00bfff04 	movi	r2,-4
   8a934:	9dadc83a 	sub	r22,r19,r22
   8a938:	b1000117 	ldw	r4,4(r22)
   8a93c:	2084703a 	and	r2,r4,r2
   8a940:	b03f7726 	beq	r22,zero,8a720 <rx_descriptor_end+0xfff8a6c0>
   8a944:	80af883a 	add	r23,r16,r2
   8a948:	b8ff7516 	blt	r23,r3,8a720 <rx_descriptor_end+0xfff8a6c0>
   8a94c:	b0800317 	ldw	r2,12(r22)
   8a950:	b0c00217 	ldw	r3,8(r22)
   8a954:	81bfff04 	addi	r6,r16,-4
   8a958:	01000904 	movi	r4,36
   8a95c:	18800315 	stw	r2,12(r3)
   8a960:	10c00215 	stw	r3,8(r2)
   8a964:	b4800204 	addi	r18,r22,8
   8a968:	21bfe52e 	bgeu	r4,r6,8a900 <rx_descriptor_end+0xfff8a8a0>
   8a96c:	a80b883a 	mov	r5,r21
   8a970:	9009883a 	mov	r4,r18
   8a974:	0082da80 	call	82da8 <memmove>
   8a978:	b821883a 	mov	r16,r23
   8a97c:	b027883a 	mov	r19,r22
   8a980:	003f8a06 	br	8a7ac <rx_descriptor_end+0xfff8a74c>
   8a984:	300b883a 	mov	r5,r6
   8a988:	dfc00917 	ldw	ra,36(sp)
   8a98c:	df000817 	ldw	fp,32(sp)
   8a990:	ddc00717 	ldw	r23,28(sp)
   8a994:	dd800617 	ldw	r22,24(sp)
   8a998:	dd400517 	ldw	r21,20(sp)
   8a99c:	dd000417 	ldw	r20,16(sp)
   8a9a0:	dcc00317 	ldw	r19,12(sp)
   8a9a4:	dc800217 	ldw	r18,8(sp)
   8a9a8:	dc400117 	ldw	r17,4(sp)
   8a9ac:	dc000017 	ldw	r16,0(sp)
   8a9b0:	dec00a04 	addi	sp,sp,40
   8a9b4:	008259c1 	jmpi	8259c <_malloc_r>
   8a9b8:	a8c00017 	ldw	r3,0(r21)
   8a9bc:	90c00015 	stw	r3,0(r18)
   8a9c0:	a8c00117 	ldw	r3,4(r21)
   8a9c4:	90c00115 	stw	r3,4(r18)
   8a9c8:	00c006c4 	movi	r3,27
   8a9cc:	19804536 	bltu	r3,r6,8aae4 <_realloc_r+0x470>
   8a9d0:	90800204 	addi	r2,r18,8
   8a9d4:	a8c00204 	addi	r3,r21,8
   8a9d8:	003f6306 	br	8a768 <rx_descriptor_end+0xfff8a708>
   8a9dc:	9005883a 	mov	r2,r18
   8a9e0:	a8c00017 	ldw	r3,0(r21)
   8a9e4:	b821883a 	mov	r16,r23
   8a9e8:	b027883a 	mov	r19,r22
   8a9ec:	10c00015 	stw	r3,0(r2)
   8a9f0:	a8c00117 	ldw	r3,4(r21)
   8a9f4:	10c00115 	stw	r3,4(r2)
   8a9f8:	a8c00217 	ldw	r3,8(r21)
   8a9fc:	10c00215 	stw	r3,8(r2)
   8aa00:	003f6a06 	br	8a7ac <rx_descriptor_end+0xfff8a74c>
   8aa04:	9c67883a 	add	r19,r19,r17
   8aa08:	4445c83a 	sub	r2,r8,r17
   8aa0c:	e4c00215 	stw	r19,8(fp)
   8aa10:	10800054 	ori	r2,r2,1
   8aa14:	98800115 	stw	r2,4(r19)
   8aa18:	a8bfff17 	ldw	r2,-4(r21)
   8aa1c:	a009883a 	mov	r4,r20
   8aa20:	1080004c 	andi	r2,r2,1
   8aa24:	1462b03a 	or	r17,r2,r17
   8aa28:	ac7fff15 	stw	r17,-4(r21)
   8aa2c:	008e7cc0 	call	8e7cc <__malloc_unlock>
   8aa30:	a805883a 	mov	r2,r21
   8aa34:	003f6b06 	br	8a7e4 <rx_descriptor_end+0xfff8a784>
   8aa38:	a80b883a 	mov	r5,r21
   8aa3c:	9009883a 	mov	r4,r18
   8aa40:	0082da80 	call	82da8 <memmove>
   8aa44:	003f4e06 	br	8a780 <rx_descriptor_end+0xfff8a720>
   8aa48:	89000404 	addi	r4,r17,16
   8aa4c:	b93fbc16 	blt	r23,r4,8a940 <rx_descriptor_end+0xfff8a8e0>
   8aa50:	b0800317 	ldw	r2,12(r22)
   8aa54:	b0c00217 	ldw	r3,8(r22)
   8aa58:	81bfff04 	addi	r6,r16,-4
   8aa5c:	01000904 	movi	r4,36
   8aa60:	18800315 	stw	r2,12(r3)
   8aa64:	10c00215 	stw	r3,8(r2)
   8aa68:	b4800204 	addi	r18,r22,8
   8aa6c:	21804336 	bltu	r4,r6,8ab7c <_realloc_r+0x508>
   8aa70:	008004c4 	movi	r2,19
   8aa74:	11803f2e 	bgeu	r2,r6,8ab74 <_realloc_r+0x500>
   8aa78:	a8800017 	ldw	r2,0(r21)
   8aa7c:	b0800215 	stw	r2,8(r22)
   8aa80:	a8800117 	ldw	r2,4(r21)
   8aa84:	b0800315 	stw	r2,12(r22)
   8aa88:	008006c4 	movi	r2,27
   8aa8c:	11803f36 	bltu	r2,r6,8ab8c <_realloc_r+0x518>
   8aa90:	b0800404 	addi	r2,r22,16
   8aa94:	ad400204 	addi	r21,r21,8
   8aa98:	a8c00017 	ldw	r3,0(r21)
   8aa9c:	10c00015 	stw	r3,0(r2)
   8aaa0:	a8c00117 	ldw	r3,4(r21)
   8aaa4:	10c00115 	stw	r3,4(r2)
   8aaa8:	a8c00217 	ldw	r3,8(r21)
   8aaac:	10c00215 	stw	r3,8(r2)
   8aab0:	b447883a 	add	r3,r22,r17
   8aab4:	bc45c83a 	sub	r2,r23,r17
   8aab8:	e0c00215 	stw	r3,8(fp)
   8aabc:	10800054 	ori	r2,r2,1
   8aac0:	18800115 	stw	r2,4(r3)
   8aac4:	b0800117 	ldw	r2,4(r22)
   8aac8:	a009883a 	mov	r4,r20
   8aacc:	1080004c 	andi	r2,r2,1
   8aad0:	1462b03a 	or	r17,r2,r17
   8aad4:	b4400115 	stw	r17,4(r22)
   8aad8:	008e7cc0 	call	8e7cc <__malloc_unlock>
   8aadc:	9005883a 	mov	r2,r18
   8aae0:	003f4006 	br	8a7e4 <rx_descriptor_end+0xfff8a784>
   8aae4:	a8c00217 	ldw	r3,8(r21)
   8aae8:	90c00215 	stw	r3,8(r18)
   8aaec:	a8c00317 	ldw	r3,12(r21)
   8aaf0:	90c00315 	stw	r3,12(r18)
   8aaf4:	30801126 	beq	r6,r2,8ab3c <_realloc_r+0x4c8>
   8aaf8:	90800404 	addi	r2,r18,16
   8aafc:	a8c00404 	addi	r3,r21,16
   8ab00:	003f1906 	br	8a768 <rx_descriptor_end+0xfff8a708>
   8ab04:	90ffff17 	ldw	r3,-4(r18)
   8ab08:	00bfff04 	movi	r2,-4
   8ab0c:	a825883a 	mov	r18,r21
   8ab10:	1884703a 	and	r2,r3,r2
   8ab14:	80a1883a 	add	r16,r16,r2
   8ab18:	003f2406 	br	8a7ac <rx_descriptor_end+0xfff8a74c>
   8ab1c:	a8800217 	ldw	r2,8(r21)
   8ab20:	b0800415 	stw	r2,16(r22)
   8ab24:	a8800317 	ldw	r2,12(r21)
   8ab28:	b0800515 	stw	r2,20(r22)
   8ab2c:	31000a26 	beq	r6,r4,8ab58 <_realloc_r+0x4e4>
   8ab30:	b0800604 	addi	r2,r22,24
   8ab34:	ad400404 	addi	r21,r21,16
   8ab38:	003fa906 	br	8a9e0 <rx_descriptor_end+0xfff8a980>
   8ab3c:	a9000417 	ldw	r4,16(r21)
   8ab40:	90800604 	addi	r2,r18,24
   8ab44:	a8c00604 	addi	r3,r21,24
   8ab48:	91000415 	stw	r4,16(r18)
   8ab4c:	a9000517 	ldw	r4,20(r21)
   8ab50:	91000515 	stw	r4,20(r18)
   8ab54:	003f0406 	br	8a768 <rx_descriptor_end+0xfff8a708>
   8ab58:	a8c00417 	ldw	r3,16(r21)
   8ab5c:	ad400604 	addi	r21,r21,24
   8ab60:	b0800804 	addi	r2,r22,32
   8ab64:	b0c00615 	stw	r3,24(r22)
   8ab68:	a8ffff17 	ldw	r3,-4(r21)
   8ab6c:	b0c00715 	stw	r3,28(r22)
   8ab70:	003f9b06 	br	8a9e0 <rx_descriptor_end+0xfff8a980>
   8ab74:	9005883a 	mov	r2,r18
   8ab78:	003fc706 	br	8aa98 <rx_descriptor_end+0xfff8aa38>
   8ab7c:	a80b883a 	mov	r5,r21
   8ab80:	9009883a 	mov	r4,r18
   8ab84:	0082da80 	call	82da8 <memmove>
   8ab88:	003fc906 	br	8aab0 <rx_descriptor_end+0xfff8aa50>
   8ab8c:	a8800217 	ldw	r2,8(r21)
   8ab90:	b0800415 	stw	r2,16(r22)
   8ab94:	a8800317 	ldw	r2,12(r21)
   8ab98:	b0800515 	stw	r2,20(r22)
   8ab9c:	31000726 	beq	r6,r4,8abbc <_realloc_r+0x548>
   8aba0:	b0800604 	addi	r2,r22,24
   8aba4:	ad400404 	addi	r21,r21,16
   8aba8:	003fbb06 	br	8aa98 <rx_descriptor_end+0xfff8aa38>
   8abac:	a009883a 	mov	r4,r20
   8abb0:	008e7cc0 	call	8e7cc <__malloc_unlock>
   8abb4:	0005883a 	mov	r2,zero
   8abb8:	003f0a06 	br	8a7e4 <rx_descriptor_end+0xfff8a784>
   8abbc:	a8c00417 	ldw	r3,16(r21)
   8abc0:	ad400604 	addi	r21,r21,24
   8abc4:	b0800804 	addi	r2,r22,32
   8abc8:	b0c00615 	stw	r3,24(r22)
   8abcc:	a8ffff17 	ldw	r3,-4(r21)
   8abd0:	b0c00715 	stw	r3,28(r22)
   8abd4:	003fb006 	br	8aa98 <rx_descriptor_end+0xfff8aa38>

0008abd8 <__swbuf_r>:
   8abd8:	defffb04 	addi	sp,sp,-20
   8abdc:	dcc00315 	stw	r19,12(sp)
   8abe0:	dc800215 	stw	r18,8(sp)
   8abe4:	dc000015 	stw	r16,0(sp)
   8abe8:	dfc00415 	stw	ra,16(sp)
   8abec:	dc400115 	stw	r17,4(sp)
   8abf0:	2025883a 	mov	r18,r4
   8abf4:	2827883a 	mov	r19,r5
   8abf8:	3021883a 	mov	r16,r6
   8abfc:	20000226 	beq	r4,zero,8ac08 <__swbuf_r+0x30>
   8ac00:	20800e17 	ldw	r2,56(r4)
   8ac04:	10004226 	beq	r2,zero,8ad10 <__swbuf_r+0x138>
   8ac08:	80800617 	ldw	r2,24(r16)
   8ac0c:	8100030b 	ldhu	r4,12(r16)
   8ac10:	80800215 	stw	r2,8(r16)
   8ac14:	2080020c 	andi	r2,r4,8
   8ac18:	10003626 	beq	r2,zero,8acf4 <__swbuf_r+0x11c>
   8ac1c:	80c00417 	ldw	r3,16(r16)
   8ac20:	18003426 	beq	r3,zero,8acf4 <__swbuf_r+0x11c>
   8ac24:	2088000c 	andi	r2,r4,8192
   8ac28:	9c403fcc 	andi	r17,r19,255
   8ac2c:	10001a26 	beq	r2,zero,8ac98 <__swbuf_r+0xc0>
   8ac30:	80800017 	ldw	r2,0(r16)
   8ac34:	81000517 	ldw	r4,20(r16)
   8ac38:	10c7c83a 	sub	r3,r2,r3
   8ac3c:	1900200e 	bge	r3,r4,8acc0 <__swbuf_r+0xe8>
   8ac40:	18c00044 	addi	r3,r3,1
   8ac44:	81000217 	ldw	r4,8(r16)
   8ac48:	11400044 	addi	r5,r2,1
   8ac4c:	81400015 	stw	r5,0(r16)
   8ac50:	213fffc4 	addi	r4,r4,-1
   8ac54:	81000215 	stw	r4,8(r16)
   8ac58:	14c00005 	stb	r19,0(r2)
   8ac5c:	80800517 	ldw	r2,20(r16)
   8ac60:	10c01e26 	beq	r2,r3,8acdc <__swbuf_r+0x104>
   8ac64:	8080030b 	ldhu	r2,12(r16)
   8ac68:	1080004c 	andi	r2,r2,1
   8ac6c:	10000226 	beq	r2,zero,8ac78 <__swbuf_r+0xa0>
   8ac70:	00800284 	movi	r2,10
   8ac74:	88801926 	beq	r17,r2,8acdc <__swbuf_r+0x104>
   8ac78:	8805883a 	mov	r2,r17
   8ac7c:	dfc00417 	ldw	ra,16(sp)
   8ac80:	dcc00317 	ldw	r19,12(sp)
   8ac84:	dc800217 	ldw	r18,8(sp)
   8ac88:	dc400117 	ldw	r17,4(sp)
   8ac8c:	dc000017 	ldw	r16,0(sp)
   8ac90:	dec00504 	addi	sp,sp,20
   8ac94:	f800283a 	ret
   8ac98:	81401917 	ldw	r5,100(r16)
   8ac9c:	00b7ffc4 	movi	r2,-8193
   8aca0:	21080014 	ori	r4,r4,8192
   8aca4:	2884703a 	and	r2,r5,r2
   8aca8:	80801915 	stw	r2,100(r16)
   8acac:	80800017 	ldw	r2,0(r16)
   8acb0:	8100030d 	sth	r4,12(r16)
   8acb4:	81000517 	ldw	r4,20(r16)
   8acb8:	10c7c83a 	sub	r3,r2,r3
   8acbc:	193fe016 	blt	r3,r4,8ac40 <rx_descriptor_end+0xfff8abe0>
   8acc0:	800b883a 	mov	r5,r16
   8acc4:	9009883a 	mov	r4,r18
   8acc8:	0081b8c0 	call	81b8c <_fflush_r>
   8accc:	1000071e 	bne	r2,zero,8acec <__swbuf_r+0x114>
   8acd0:	80800017 	ldw	r2,0(r16)
   8acd4:	00c00044 	movi	r3,1
   8acd8:	003fda06 	br	8ac44 <rx_descriptor_end+0xfff8abe4>
   8acdc:	800b883a 	mov	r5,r16
   8ace0:	9009883a 	mov	r4,r18
   8ace4:	0081b8c0 	call	81b8c <_fflush_r>
   8ace8:	103fe326 	beq	r2,zero,8ac78 <rx_descriptor_end+0xfff8ac18>
   8acec:	00bfffc4 	movi	r2,-1
   8acf0:	003fe206 	br	8ac7c <rx_descriptor_end+0xfff8ac1c>
   8acf4:	800b883a 	mov	r5,r16
   8acf8:	9009883a 	mov	r4,r18
   8acfc:	00855580 	call	85558 <__swsetup_r>
   8ad00:	103ffa1e 	bne	r2,zero,8acec <rx_descriptor_end+0xfff8ac8c>
   8ad04:	8100030b 	ldhu	r4,12(r16)
   8ad08:	80c00417 	ldw	r3,16(r16)
   8ad0c:	003fc506 	br	8ac24 <rx_descriptor_end+0xfff8abc4>
   8ad10:	0081f680 	call	81f68 <__sinit>
   8ad14:	003fbc06 	br	8ac08 <rx_descriptor_end+0xfff8aba8>

0008ad18 <__swbuf>:
   8ad18:	00800274 	movhi	r2,9
   8ad1c:	10907304 	addi	r2,r2,16844
   8ad20:	280d883a 	mov	r6,r5
   8ad24:	200b883a 	mov	r5,r4
   8ad28:	11000017 	ldw	r4,0(r2)
   8ad2c:	008abd81 	jmpi	8abd8 <__swbuf_r>

0008ad30 <_wcrtomb_r>:
   8ad30:	defff604 	addi	sp,sp,-40
   8ad34:	00800274 	movhi	r2,9
   8ad38:	dc800815 	stw	r18,32(sp)
   8ad3c:	dc400715 	stw	r17,28(sp)
   8ad40:	dc000615 	stw	r16,24(sp)
   8ad44:	10907704 	addi	r2,r2,16860
   8ad48:	dfc00915 	stw	ra,36(sp)
   8ad4c:	2021883a 	mov	r16,r4
   8ad50:	3823883a 	mov	r17,r7
   8ad54:	14800017 	ldw	r18,0(r2)
   8ad58:	28001426 	beq	r5,zero,8adac <_wcrtomb_r+0x7c>
   8ad5c:	d9400415 	stw	r5,16(sp)
   8ad60:	d9800515 	stw	r6,20(sp)
   8ad64:	00871080 	call	87108 <__locale_charset>
   8ad68:	d9800517 	ldw	r6,20(sp)
   8ad6c:	d9400417 	ldw	r5,16(sp)
   8ad70:	100f883a 	mov	r7,r2
   8ad74:	dc400015 	stw	r17,0(sp)
   8ad78:	8009883a 	mov	r4,r16
   8ad7c:	903ee83a 	callr	r18
   8ad80:	00ffffc4 	movi	r3,-1
   8ad84:	10c0031e 	bne	r2,r3,8ad94 <_wcrtomb_r+0x64>
   8ad88:	88000015 	stw	zero,0(r17)
   8ad8c:	00c02284 	movi	r3,138
   8ad90:	80c00015 	stw	r3,0(r16)
   8ad94:	dfc00917 	ldw	ra,36(sp)
   8ad98:	dc800817 	ldw	r18,32(sp)
   8ad9c:	dc400717 	ldw	r17,28(sp)
   8ada0:	dc000617 	ldw	r16,24(sp)
   8ada4:	dec00a04 	addi	sp,sp,40
   8ada8:	f800283a 	ret
   8adac:	00871080 	call	87108 <__locale_charset>
   8adb0:	100f883a 	mov	r7,r2
   8adb4:	dc400015 	stw	r17,0(sp)
   8adb8:	000d883a 	mov	r6,zero
   8adbc:	d9400104 	addi	r5,sp,4
   8adc0:	8009883a 	mov	r4,r16
   8adc4:	903ee83a 	callr	r18
   8adc8:	003fed06 	br	8ad80 <rx_descriptor_end+0xfff8ad20>

0008adcc <wcrtomb>:
   8adcc:	defff604 	addi	sp,sp,-40
   8add0:	00800274 	movhi	r2,9
   8add4:	dc800615 	stw	r18,24(sp)
   8add8:	dc400515 	stw	r17,20(sp)
   8addc:	10907304 	addi	r2,r2,16844
   8ade0:	dfc00915 	stw	ra,36(sp)
   8ade4:	dd000815 	stw	r20,32(sp)
   8ade8:	dcc00715 	stw	r19,28(sp)
   8adec:	dc000415 	stw	r16,16(sp)
   8adf0:	3025883a 	mov	r18,r6
   8adf4:	14400017 	ldw	r17,0(r2)
   8adf8:	20001926 	beq	r4,zero,8ae60 <wcrtomb+0x94>
   8adfc:	00800274 	movhi	r2,9
   8ae00:	10907704 	addi	r2,r2,16860
   8ae04:	15000017 	ldw	r20,0(r2)
   8ae08:	2021883a 	mov	r16,r4
   8ae0c:	2827883a 	mov	r19,r5
   8ae10:	00871080 	call	87108 <__locale_charset>
   8ae14:	100f883a 	mov	r7,r2
   8ae18:	dc800015 	stw	r18,0(sp)
   8ae1c:	980d883a 	mov	r6,r19
   8ae20:	800b883a 	mov	r5,r16
   8ae24:	8809883a 	mov	r4,r17
   8ae28:	a03ee83a 	callr	r20
   8ae2c:	00ffffc4 	movi	r3,-1
   8ae30:	10c0031e 	bne	r2,r3,8ae40 <wcrtomb+0x74>
   8ae34:	90000015 	stw	zero,0(r18)
   8ae38:	00c02284 	movi	r3,138
   8ae3c:	88c00015 	stw	r3,0(r17)
   8ae40:	dfc00917 	ldw	ra,36(sp)
   8ae44:	dd000817 	ldw	r20,32(sp)
   8ae48:	dcc00717 	ldw	r19,28(sp)
   8ae4c:	dc800617 	ldw	r18,24(sp)
   8ae50:	dc400517 	ldw	r17,20(sp)
   8ae54:	dc000417 	ldw	r16,16(sp)
   8ae58:	dec00a04 	addi	sp,sp,40
   8ae5c:	f800283a 	ret
   8ae60:	00800274 	movhi	r2,9
   8ae64:	10907704 	addi	r2,r2,16860
   8ae68:	14000017 	ldw	r16,0(r2)
   8ae6c:	00871080 	call	87108 <__locale_charset>
   8ae70:	100f883a 	mov	r7,r2
   8ae74:	dc800015 	stw	r18,0(sp)
   8ae78:	000d883a 	mov	r6,zero
   8ae7c:	d9400104 	addi	r5,sp,4
   8ae80:	8809883a 	mov	r4,r17
   8ae84:	803ee83a 	callr	r16
   8ae88:	003fe806 	br	8ae2c <rx_descriptor_end+0xfff8adcc>

0008ae8c <__ascii_wctomb>:
   8ae8c:	28000526 	beq	r5,zero,8aea4 <__ascii_wctomb+0x18>
   8ae90:	00803fc4 	movi	r2,255
   8ae94:	11800536 	bltu	r2,r6,8aeac <__ascii_wctomb+0x20>
   8ae98:	29800005 	stb	r6,0(r5)
   8ae9c:	00800044 	movi	r2,1
   8aea0:	f800283a 	ret
   8aea4:	0005883a 	mov	r2,zero
   8aea8:	f800283a 	ret
   8aeac:	00802284 	movi	r2,138
   8aeb0:	20800015 	stw	r2,0(r4)
   8aeb4:	00bfffc4 	movi	r2,-1
   8aeb8:	f800283a 	ret

0008aebc <_wctomb_r>:
   8aebc:	00800274 	movhi	r2,9
   8aec0:	defff904 	addi	sp,sp,-28
   8aec4:	10907704 	addi	r2,r2,16860
   8aec8:	dfc00615 	stw	ra,24(sp)
   8aecc:	dc400515 	stw	r17,20(sp)
   8aed0:	dc000415 	stw	r16,16(sp)
   8aed4:	3823883a 	mov	r17,r7
   8aed8:	14000017 	ldw	r16,0(r2)
   8aedc:	d9000115 	stw	r4,4(sp)
   8aee0:	d9400215 	stw	r5,8(sp)
   8aee4:	d9800315 	stw	r6,12(sp)
   8aee8:	00871080 	call	87108 <__locale_charset>
   8aeec:	d9800317 	ldw	r6,12(sp)
   8aef0:	d9400217 	ldw	r5,8(sp)
   8aef4:	d9000117 	ldw	r4,4(sp)
   8aef8:	100f883a 	mov	r7,r2
   8aefc:	dc400015 	stw	r17,0(sp)
   8af00:	803ee83a 	callr	r16
   8af04:	dfc00617 	ldw	ra,24(sp)
   8af08:	dc400517 	ldw	r17,20(sp)
   8af0c:	dc000417 	ldw	r16,16(sp)
   8af10:	dec00704 	addi	sp,sp,28
   8af14:	f800283a 	ret

0008af18 <__udivdi3>:
   8af18:	defff504 	addi	sp,sp,-44
   8af1c:	dcc00415 	stw	r19,16(sp)
   8af20:	dc000115 	stw	r16,4(sp)
   8af24:	dfc00a15 	stw	ra,40(sp)
   8af28:	df000915 	stw	fp,36(sp)
   8af2c:	ddc00815 	stw	r23,32(sp)
   8af30:	dd800715 	stw	r22,28(sp)
   8af34:	dd400615 	stw	r21,24(sp)
   8af38:	dd000515 	stw	r20,20(sp)
   8af3c:	dc800315 	stw	r18,12(sp)
   8af40:	dc400215 	stw	r17,8(sp)
   8af44:	2027883a 	mov	r19,r4
   8af48:	2821883a 	mov	r16,r5
   8af4c:	3800411e 	bne	r7,zero,8b054 <__udivdi3+0x13c>
   8af50:	3023883a 	mov	r17,r6
   8af54:	2025883a 	mov	r18,r4
   8af58:	2980522e 	bgeu	r5,r6,8b0a4 <__udivdi3+0x18c>
   8af5c:	00bfffd4 	movui	r2,65535
   8af60:	282d883a 	mov	r22,r5
   8af64:	1180a836 	bltu	r2,r6,8b208 <__udivdi3+0x2f0>
   8af68:	00803fc4 	movi	r2,255
   8af6c:	1185803a 	cmpltu	r2,r2,r6
   8af70:	100490fa 	slli	r2,r2,3
   8af74:	3086d83a 	srl	r3,r6,r2
   8af78:	01000274 	movhi	r4,9
   8af7c:	21085b04 	addi	r4,r4,8556
   8af80:	20c7883a 	add	r3,r4,r3
   8af84:	18c00003 	ldbu	r3,0(r3)
   8af88:	1885883a 	add	r2,r3,r2
   8af8c:	00c00804 	movi	r3,32
   8af90:	1887c83a 	sub	r3,r3,r2
   8af94:	18000526 	beq	r3,zero,8afac <__udivdi3+0x94>
   8af98:	80e0983a 	sll	r16,r16,r3
   8af9c:	9884d83a 	srl	r2,r19,r2
   8afa0:	30e2983a 	sll	r17,r6,r3
   8afa4:	98e4983a 	sll	r18,r19,r3
   8afa8:	142cb03a 	or	r22,r2,r16
   8afac:	882ad43a 	srli	r21,r17,16
   8afb0:	b009883a 	mov	r4,r22
   8afb4:	8d3fffcc 	andi	r20,r17,65535
   8afb8:	a80b883a 	mov	r5,r21
   8afbc:	008bb240 	call	8bb24 <__umodsi3>
   8afc0:	b009883a 	mov	r4,r22
   8afc4:	a80b883a 	mov	r5,r21
   8afc8:	1027883a 	mov	r19,r2
   8afcc:	008bac00 	call	8bac0 <__udivsi3>
   8afd0:	102d883a 	mov	r22,r2
   8afd4:	9826943a 	slli	r19,r19,16
   8afd8:	9004d43a 	srli	r2,r18,16
   8afdc:	a5a1383a 	mul	r16,r20,r22
   8afe0:	14c4b03a 	or	r2,r2,r19
   8afe4:	1400052e 	bgeu	r2,r16,8affc <__udivdi3+0xe4>
   8afe8:	1445883a 	add	r2,r2,r17
   8afec:	b0ffffc4 	addi	r3,r22,-1
   8aff0:	14400136 	bltu	r2,r17,8aff8 <__udivdi3+0xe0>
   8aff4:	14012336 	bltu	r2,r16,8b484 <__udivdi3+0x56c>
   8aff8:	182d883a 	mov	r22,r3
   8affc:	1421c83a 	sub	r16,r2,r16
   8b000:	a80b883a 	mov	r5,r21
   8b004:	8009883a 	mov	r4,r16
   8b008:	008bb240 	call	8bb24 <__umodsi3>
   8b00c:	1027883a 	mov	r19,r2
   8b010:	a80b883a 	mov	r5,r21
   8b014:	8009883a 	mov	r4,r16
   8b018:	008bac00 	call	8bac0 <__udivsi3>
   8b01c:	9826943a 	slli	r19,r19,16
   8b020:	a0a9383a 	mul	r20,r20,r2
   8b024:	94bfffcc 	andi	r18,r18,65535
   8b028:	94e4b03a 	or	r18,r18,r19
   8b02c:	9500052e 	bgeu	r18,r20,8b044 <__udivdi3+0x12c>
   8b030:	8ca5883a 	add	r18,r17,r18
   8b034:	10ffffc4 	addi	r3,r2,-1
   8b038:	9440f136 	bltu	r18,r17,8b400 <__udivdi3+0x4e8>
   8b03c:	9500f02e 	bgeu	r18,r20,8b400 <__udivdi3+0x4e8>
   8b040:	10bfff84 	addi	r2,r2,-2
   8b044:	b00c943a 	slli	r6,r22,16
   8b048:	0007883a 	mov	r3,zero
   8b04c:	3084b03a 	or	r2,r6,r2
   8b050:	00005906 	br	8b1b8 <__udivdi3+0x2a0>
   8b054:	29c05636 	bltu	r5,r7,8b1b0 <__udivdi3+0x298>
   8b058:	00bfffd4 	movui	r2,65535
   8b05c:	11c0622e 	bgeu	r2,r7,8b1e8 <__udivdi3+0x2d0>
   8b060:	00804034 	movhi	r2,256
   8b064:	10bfffc4 	addi	r2,r2,-1
   8b068:	11c0ee36 	bltu	r2,r7,8b424 <__udivdi3+0x50c>
   8b06c:	00800404 	movi	r2,16
   8b070:	3886d83a 	srl	r3,r7,r2
   8b074:	01000274 	movhi	r4,9
   8b078:	21085b04 	addi	r4,r4,8556
   8b07c:	20c7883a 	add	r3,r4,r3
   8b080:	18c00003 	ldbu	r3,0(r3)
   8b084:	05400804 	movi	r21,32
   8b088:	1885883a 	add	r2,r3,r2
   8b08c:	a8abc83a 	sub	r21,r21,r2
   8b090:	a800621e 	bne	r21,zero,8b21c <__udivdi3+0x304>
   8b094:	3c00e936 	bltu	r7,r16,8b43c <__udivdi3+0x524>
   8b098:	9985403a 	cmpgeu	r2,r19,r6
   8b09c:	0007883a 	mov	r3,zero
   8b0a0:	00004506 	br	8b1b8 <__udivdi3+0x2a0>
   8b0a4:	3000041e 	bne	r6,zero,8b0b8 <__udivdi3+0x1a0>
   8b0a8:	000b883a 	mov	r5,zero
   8b0ac:	01000044 	movi	r4,1
   8b0b0:	008bac00 	call	8bac0 <__udivsi3>
   8b0b4:	1023883a 	mov	r17,r2
   8b0b8:	00bfffd4 	movui	r2,65535
   8b0bc:	14404e2e 	bgeu	r2,r17,8b1f8 <__udivdi3+0x2e0>
   8b0c0:	00804034 	movhi	r2,256
   8b0c4:	10bfffc4 	addi	r2,r2,-1
   8b0c8:	1440d836 	bltu	r2,r17,8b42c <__udivdi3+0x514>
   8b0cc:	00800404 	movi	r2,16
   8b0d0:	8886d83a 	srl	r3,r17,r2
   8b0d4:	01000274 	movhi	r4,9
   8b0d8:	21085b04 	addi	r4,r4,8556
   8b0dc:	20c7883a 	add	r3,r4,r3
   8b0e0:	18c00003 	ldbu	r3,0(r3)
   8b0e4:	1885883a 	add	r2,r3,r2
   8b0e8:	00c00804 	movi	r3,32
   8b0ec:	1887c83a 	sub	r3,r3,r2
   8b0f0:	18008f1e 	bne	r3,zero,8b330 <__udivdi3+0x418>
   8b0f4:	882ad43a 	srli	r21,r17,16
   8b0f8:	8461c83a 	sub	r16,r16,r17
   8b0fc:	8d3fffcc 	andi	r20,r17,65535
   8b100:	00c00044 	movi	r3,1
   8b104:	8009883a 	mov	r4,r16
   8b108:	a80b883a 	mov	r5,r21
   8b10c:	d8c00015 	stw	r3,0(sp)
   8b110:	008bb240 	call	8bb24 <__umodsi3>
   8b114:	8009883a 	mov	r4,r16
   8b118:	a80b883a 	mov	r5,r21
   8b11c:	1027883a 	mov	r19,r2
   8b120:	008bac00 	call	8bac0 <__udivsi3>
   8b124:	9826943a 	slli	r19,r19,16
   8b128:	9008d43a 	srli	r4,r18,16
   8b12c:	1521383a 	mul	r16,r2,r20
   8b130:	102d883a 	mov	r22,r2
   8b134:	24c8b03a 	or	r4,r4,r19
   8b138:	d8c00017 	ldw	r3,0(sp)
   8b13c:	2400052e 	bgeu	r4,r16,8b154 <__udivdi3+0x23c>
   8b140:	2449883a 	add	r4,r4,r17
   8b144:	b0bfffc4 	addi	r2,r22,-1
   8b148:	24400136 	bltu	r4,r17,8b150 <__udivdi3+0x238>
   8b14c:	2400ca36 	bltu	r4,r16,8b478 <__udivdi3+0x560>
   8b150:	102d883a 	mov	r22,r2
   8b154:	2421c83a 	sub	r16,r4,r16
   8b158:	a80b883a 	mov	r5,r21
   8b15c:	8009883a 	mov	r4,r16
   8b160:	d8c00015 	stw	r3,0(sp)
   8b164:	008bb240 	call	8bb24 <__umodsi3>
   8b168:	1027883a 	mov	r19,r2
   8b16c:	a80b883a 	mov	r5,r21
   8b170:	8009883a 	mov	r4,r16
   8b174:	008bac00 	call	8bac0 <__udivsi3>
   8b178:	9826943a 	slli	r19,r19,16
   8b17c:	1529383a 	mul	r20,r2,r20
   8b180:	94bfffcc 	andi	r18,r18,65535
   8b184:	94e4b03a 	or	r18,r18,r19
   8b188:	d8c00017 	ldw	r3,0(sp)
   8b18c:	9500052e 	bgeu	r18,r20,8b1a4 <__udivdi3+0x28c>
   8b190:	8ca5883a 	add	r18,r17,r18
   8b194:	113fffc4 	addi	r4,r2,-1
   8b198:	94409736 	bltu	r18,r17,8b3f8 <__udivdi3+0x4e0>
   8b19c:	9500962e 	bgeu	r18,r20,8b3f8 <__udivdi3+0x4e0>
   8b1a0:	10bfff84 	addi	r2,r2,-2
   8b1a4:	b00c943a 	slli	r6,r22,16
   8b1a8:	3084b03a 	or	r2,r6,r2
   8b1ac:	00000206 	br	8b1b8 <__udivdi3+0x2a0>
   8b1b0:	0007883a 	mov	r3,zero
   8b1b4:	0005883a 	mov	r2,zero
   8b1b8:	dfc00a17 	ldw	ra,40(sp)
   8b1bc:	df000917 	ldw	fp,36(sp)
   8b1c0:	ddc00817 	ldw	r23,32(sp)
   8b1c4:	dd800717 	ldw	r22,28(sp)
   8b1c8:	dd400617 	ldw	r21,24(sp)
   8b1cc:	dd000517 	ldw	r20,20(sp)
   8b1d0:	dcc00417 	ldw	r19,16(sp)
   8b1d4:	dc800317 	ldw	r18,12(sp)
   8b1d8:	dc400217 	ldw	r17,8(sp)
   8b1dc:	dc000117 	ldw	r16,4(sp)
   8b1e0:	dec00b04 	addi	sp,sp,44
   8b1e4:	f800283a 	ret
   8b1e8:	00803fc4 	movi	r2,255
   8b1ec:	11c5803a 	cmpltu	r2,r2,r7
   8b1f0:	100490fa 	slli	r2,r2,3
   8b1f4:	003f9e06 	br	8b070 <rx_descriptor_end+0xfff8b010>
   8b1f8:	00803fc4 	movi	r2,255
   8b1fc:	1445803a 	cmpltu	r2,r2,r17
   8b200:	100490fa 	slli	r2,r2,3
   8b204:	003fb206 	br	8b0d0 <rx_descriptor_end+0xfff8b070>
   8b208:	00804034 	movhi	r2,256
   8b20c:	10bfffc4 	addi	r2,r2,-1
   8b210:	11808836 	bltu	r2,r6,8b434 <__udivdi3+0x51c>
   8b214:	00800404 	movi	r2,16
   8b218:	003f5606 	br	8af74 <rx_descriptor_end+0xfff8af14>
   8b21c:	30aed83a 	srl	r23,r6,r2
   8b220:	3d4e983a 	sll	r7,r7,r21
   8b224:	80acd83a 	srl	r22,r16,r2
   8b228:	9884d83a 	srl	r2,r19,r2
   8b22c:	3deeb03a 	or	r23,r7,r23
   8b230:	b824d43a 	srli	r18,r23,16
   8b234:	8560983a 	sll	r16,r16,r21
   8b238:	b009883a 	mov	r4,r22
   8b23c:	900b883a 	mov	r5,r18
   8b240:	3568983a 	sll	r20,r6,r21
   8b244:	1420b03a 	or	r16,r2,r16
   8b248:	008bb240 	call	8bb24 <__umodsi3>
   8b24c:	b009883a 	mov	r4,r22
   8b250:	900b883a 	mov	r5,r18
   8b254:	1023883a 	mov	r17,r2
   8b258:	008bac00 	call	8bac0 <__udivsi3>
   8b25c:	8808943a 	slli	r4,r17,16
   8b260:	bf3fffcc 	andi	fp,r23,65535
   8b264:	8006d43a 	srli	r3,r16,16
   8b268:	e0a3383a 	mul	r17,fp,r2
   8b26c:	100d883a 	mov	r6,r2
   8b270:	1906b03a 	or	r3,r3,r4
   8b274:	1c40042e 	bgeu	r3,r17,8b288 <__udivdi3+0x370>
   8b278:	1dc7883a 	add	r3,r3,r23
   8b27c:	10bfffc4 	addi	r2,r2,-1
   8b280:	1dc0752e 	bgeu	r3,r23,8b458 <__udivdi3+0x540>
   8b284:	100d883a 	mov	r6,r2
   8b288:	1c63c83a 	sub	r17,r3,r17
   8b28c:	900b883a 	mov	r5,r18
   8b290:	8809883a 	mov	r4,r17
   8b294:	d9800015 	stw	r6,0(sp)
   8b298:	008bb240 	call	8bb24 <__umodsi3>
   8b29c:	102d883a 	mov	r22,r2
   8b2a0:	8809883a 	mov	r4,r17
   8b2a4:	900b883a 	mov	r5,r18
   8b2a8:	008bac00 	call	8bac0 <__udivsi3>
   8b2ac:	b02c943a 	slli	r22,r22,16
   8b2b0:	e089383a 	mul	r4,fp,r2
   8b2b4:	843fffcc 	andi	r16,r16,65535
   8b2b8:	85a0b03a 	or	r16,r16,r22
   8b2bc:	d9800017 	ldw	r6,0(sp)
   8b2c0:	8100042e 	bgeu	r16,r4,8b2d4 <__udivdi3+0x3bc>
   8b2c4:	85e1883a 	add	r16,r16,r23
   8b2c8:	10ffffc4 	addi	r3,r2,-1
   8b2cc:	85c05e2e 	bgeu	r16,r23,8b448 <__udivdi3+0x530>
   8b2d0:	1805883a 	mov	r2,r3
   8b2d4:	300c943a 	slli	r6,r6,16
   8b2d8:	a17fffcc 	andi	r5,r20,65535
   8b2dc:	a028d43a 	srli	r20,r20,16
   8b2e0:	3084b03a 	or	r2,r6,r2
   8b2e4:	10ffffcc 	andi	r3,r2,65535
   8b2e8:	100cd43a 	srli	r6,r2,16
   8b2ec:	194f383a 	mul	r7,r3,r5
   8b2f0:	1d07383a 	mul	r3,r3,r20
   8b2f4:	314b383a 	mul	r5,r6,r5
   8b2f8:	3810d43a 	srli	r8,r7,16
   8b2fc:	8121c83a 	sub	r16,r16,r4
   8b300:	1947883a 	add	r3,r3,r5
   8b304:	40c7883a 	add	r3,r8,r3
   8b308:	350d383a 	mul	r6,r6,r20
   8b30c:	1940022e 	bgeu	r3,r5,8b318 <__udivdi3+0x400>
   8b310:	01000074 	movhi	r4,1
   8b314:	310d883a 	add	r6,r6,r4
   8b318:	1828d43a 	srli	r20,r3,16
   8b31c:	a18d883a 	add	r6,r20,r6
   8b320:	81803e36 	bltu	r16,r6,8b41c <__udivdi3+0x504>
   8b324:	81803826 	beq	r16,r6,8b408 <__udivdi3+0x4f0>
   8b328:	0007883a 	mov	r3,zero
   8b32c:	003fa206 	br	8b1b8 <rx_descriptor_end+0xfff8b158>
   8b330:	88e2983a 	sll	r17,r17,r3
   8b334:	80a8d83a 	srl	r20,r16,r2
   8b338:	80e0983a 	sll	r16,r16,r3
   8b33c:	882ad43a 	srli	r21,r17,16
   8b340:	9884d83a 	srl	r2,r19,r2
   8b344:	a009883a 	mov	r4,r20
   8b348:	a80b883a 	mov	r5,r21
   8b34c:	142eb03a 	or	r23,r2,r16
   8b350:	98e4983a 	sll	r18,r19,r3
   8b354:	008bb240 	call	8bb24 <__umodsi3>
   8b358:	a009883a 	mov	r4,r20
   8b35c:	a80b883a 	mov	r5,r21
   8b360:	1021883a 	mov	r16,r2
   8b364:	008bac00 	call	8bac0 <__udivsi3>
   8b368:	1039883a 	mov	fp,r2
   8b36c:	8d3fffcc 	andi	r20,r17,65535
   8b370:	8020943a 	slli	r16,r16,16
   8b374:	b804d43a 	srli	r2,r23,16
   8b378:	a72d383a 	mul	r22,r20,fp
   8b37c:	1404b03a 	or	r2,r2,r16
   8b380:	1580062e 	bgeu	r2,r22,8b39c <__udivdi3+0x484>
   8b384:	1445883a 	add	r2,r2,r17
   8b388:	e0ffffc4 	addi	r3,fp,-1
   8b38c:	14403836 	bltu	r2,r17,8b470 <__udivdi3+0x558>
   8b390:	1580372e 	bgeu	r2,r22,8b470 <__udivdi3+0x558>
   8b394:	e73fff84 	addi	fp,fp,-2
   8b398:	1445883a 	add	r2,r2,r17
   8b39c:	15adc83a 	sub	r22,r2,r22
   8b3a0:	a80b883a 	mov	r5,r21
   8b3a4:	b009883a 	mov	r4,r22
   8b3a8:	008bb240 	call	8bb24 <__umodsi3>
   8b3ac:	1027883a 	mov	r19,r2
   8b3b0:	b009883a 	mov	r4,r22
   8b3b4:	a80b883a 	mov	r5,r21
   8b3b8:	008bac00 	call	8bac0 <__udivsi3>
   8b3bc:	9826943a 	slli	r19,r19,16
   8b3c0:	a0a1383a 	mul	r16,r20,r2
   8b3c4:	b93fffcc 	andi	r4,r23,65535
   8b3c8:	24c8b03a 	or	r4,r4,r19
   8b3cc:	2400062e 	bgeu	r4,r16,8b3e8 <__udivdi3+0x4d0>
   8b3d0:	2449883a 	add	r4,r4,r17
   8b3d4:	10ffffc4 	addi	r3,r2,-1
   8b3d8:	24402336 	bltu	r4,r17,8b468 <__udivdi3+0x550>
   8b3dc:	2400222e 	bgeu	r4,r16,8b468 <__udivdi3+0x550>
   8b3e0:	10bfff84 	addi	r2,r2,-2
   8b3e4:	2449883a 	add	r4,r4,r17
   8b3e8:	e038943a 	slli	fp,fp,16
   8b3ec:	2421c83a 	sub	r16,r4,r16
   8b3f0:	e086b03a 	or	r3,fp,r2
   8b3f4:	003f4306 	br	8b104 <rx_descriptor_end+0xfff8b0a4>
   8b3f8:	2005883a 	mov	r2,r4
   8b3fc:	003f6906 	br	8b1a4 <rx_descriptor_end+0xfff8b144>
   8b400:	1805883a 	mov	r2,r3
   8b404:	003f0f06 	br	8b044 <rx_descriptor_end+0xfff8afe4>
   8b408:	1806943a 	slli	r3,r3,16
   8b40c:	9d66983a 	sll	r19,r19,r21
   8b410:	39ffffcc 	andi	r7,r7,65535
   8b414:	19c7883a 	add	r3,r3,r7
   8b418:	98ffc32e 	bgeu	r19,r3,8b328 <rx_descriptor_end+0xfff8b2c8>
   8b41c:	10bfffc4 	addi	r2,r2,-1
   8b420:	003fc106 	br	8b328 <rx_descriptor_end+0xfff8b2c8>
   8b424:	00800604 	movi	r2,24
   8b428:	003f1106 	br	8b070 <rx_descriptor_end+0xfff8b010>
   8b42c:	00800604 	movi	r2,24
   8b430:	003f2706 	br	8b0d0 <rx_descriptor_end+0xfff8b070>
   8b434:	00800604 	movi	r2,24
   8b438:	003ece06 	br	8af74 <rx_descriptor_end+0xfff8af14>
   8b43c:	0007883a 	mov	r3,zero
   8b440:	00800044 	movi	r2,1
   8b444:	003f5c06 	br	8b1b8 <rx_descriptor_end+0xfff8b158>
   8b448:	813fa12e 	bgeu	r16,r4,8b2d0 <rx_descriptor_end+0xfff8b270>
   8b44c:	10bfff84 	addi	r2,r2,-2
   8b450:	85e1883a 	add	r16,r16,r23
   8b454:	003f9f06 	br	8b2d4 <rx_descriptor_end+0xfff8b274>
   8b458:	1c7f8a2e 	bgeu	r3,r17,8b284 <rx_descriptor_end+0xfff8b224>
   8b45c:	31bfff84 	addi	r6,r6,-2
   8b460:	1dc7883a 	add	r3,r3,r23
   8b464:	003f8806 	br	8b288 <rx_descriptor_end+0xfff8b228>
   8b468:	1805883a 	mov	r2,r3
   8b46c:	003fde06 	br	8b3e8 <rx_descriptor_end+0xfff8b388>
   8b470:	1839883a 	mov	fp,r3
   8b474:	003fc906 	br	8b39c <rx_descriptor_end+0xfff8b33c>
   8b478:	b5bfff84 	addi	r22,r22,-2
   8b47c:	2449883a 	add	r4,r4,r17
   8b480:	003f3406 	br	8b154 <rx_descriptor_end+0xfff8b0f4>
   8b484:	b5bfff84 	addi	r22,r22,-2
   8b488:	1445883a 	add	r2,r2,r17
   8b48c:	003edb06 	br	8affc <rx_descriptor_end+0xfff8af9c>

0008b490 <__umoddi3>:
   8b490:	defff404 	addi	sp,sp,-48
   8b494:	df000a15 	stw	fp,40(sp)
   8b498:	dc400315 	stw	r17,12(sp)
   8b49c:	dc000215 	stw	r16,8(sp)
   8b4a0:	dfc00b15 	stw	ra,44(sp)
   8b4a4:	ddc00915 	stw	r23,36(sp)
   8b4a8:	dd800815 	stw	r22,32(sp)
   8b4ac:	dd400715 	stw	r21,28(sp)
   8b4b0:	dd000615 	stw	r20,24(sp)
   8b4b4:	dcc00515 	stw	r19,20(sp)
   8b4b8:	dc800415 	stw	r18,16(sp)
   8b4bc:	2021883a 	mov	r16,r4
   8b4c0:	2823883a 	mov	r17,r5
   8b4c4:	2839883a 	mov	fp,r5
   8b4c8:	38003c1e 	bne	r7,zero,8b5bc <__umoddi3+0x12c>
   8b4cc:	3027883a 	mov	r19,r6
   8b4d0:	2029883a 	mov	r20,r4
   8b4d4:	2980512e 	bgeu	r5,r6,8b61c <__umoddi3+0x18c>
   8b4d8:	00bfffd4 	movui	r2,65535
   8b4dc:	11809a36 	bltu	r2,r6,8b748 <__umoddi3+0x2b8>
   8b4e0:	01003fc4 	movi	r4,255
   8b4e4:	2189803a 	cmpltu	r4,r4,r6
   8b4e8:	200890fa 	slli	r4,r4,3
   8b4ec:	3104d83a 	srl	r2,r6,r4
   8b4f0:	00c00274 	movhi	r3,9
   8b4f4:	18c85b04 	addi	r3,r3,8556
   8b4f8:	1885883a 	add	r2,r3,r2
   8b4fc:	10c00003 	ldbu	r3,0(r2)
   8b500:	00800804 	movi	r2,32
   8b504:	1909883a 	add	r4,r3,r4
   8b508:	1125c83a 	sub	r18,r2,r4
   8b50c:	90000526 	beq	r18,zero,8b524 <__umoddi3+0x94>
   8b510:	8ca2983a 	sll	r17,r17,r18
   8b514:	8108d83a 	srl	r4,r16,r4
   8b518:	34a6983a 	sll	r19,r6,r18
   8b51c:	84a8983a 	sll	r20,r16,r18
   8b520:	2478b03a 	or	fp,r4,r17
   8b524:	982ed43a 	srli	r23,r19,16
   8b528:	e009883a 	mov	r4,fp
   8b52c:	9dbfffcc 	andi	r22,r19,65535
   8b530:	b80b883a 	mov	r5,r23
   8b534:	008bb240 	call	8bb24 <__umodsi3>
   8b538:	e009883a 	mov	r4,fp
   8b53c:	b80b883a 	mov	r5,r23
   8b540:	102b883a 	mov	r21,r2
   8b544:	008bac00 	call	8bac0 <__udivsi3>
   8b548:	a806943a 	slli	r3,r21,16
   8b54c:	a008d43a 	srli	r4,r20,16
   8b550:	b085383a 	mul	r2,r22,r2
   8b554:	20c8b03a 	or	r4,r4,r3
   8b558:	2080032e 	bgeu	r4,r2,8b568 <__umoddi3+0xd8>
   8b55c:	24c9883a 	add	r4,r4,r19
   8b560:	24c00136 	bltu	r4,r19,8b568 <__umoddi3+0xd8>
   8b564:	20811036 	bltu	r4,r2,8b9a8 <__umoddi3+0x518>
   8b568:	20abc83a 	sub	r21,r4,r2
   8b56c:	b80b883a 	mov	r5,r23
   8b570:	a809883a 	mov	r4,r21
   8b574:	008bb240 	call	8bb24 <__umodsi3>
   8b578:	1023883a 	mov	r17,r2
   8b57c:	b80b883a 	mov	r5,r23
   8b580:	a809883a 	mov	r4,r21
   8b584:	008bac00 	call	8bac0 <__udivsi3>
   8b588:	8822943a 	slli	r17,r17,16
   8b58c:	b085383a 	mul	r2,r22,r2
   8b590:	a0ffffcc 	andi	r3,r20,65535
   8b594:	1c46b03a 	or	r3,r3,r17
   8b598:	1880042e 	bgeu	r3,r2,8b5ac <__umoddi3+0x11c>
   8b59c:	1cc7883a 	add	r3,r3,r19
   8b5a0:	1cc00236 	bltu	r3,r19,8b5ac <__umoddi3+0x11c>
   8b5a4:	1880012e 	bgeu	r3,r2,8b5ac <__umoddi3+0x11c>
   8b5a8:	1cc7883a 	add	r3,r3,r19
   8b5ac:	1885c83a 	sub	r2,r3,r2
   8b5b0:	1484d83a 	srl	r2,r2,r18
   8b5b4:	0007883a 	mov	r3,zero
   8b5b8:	00004f06 	br	8b6f8 <__umoddi3+0x268>
   8b5bc:	29c04c36 	bltu	r5,r7,8b6f0 <__umoddi3+0x260>
   8b5c0:	00bfffd4 	movui	r2,65535
   8b5c4:	11c0582e 	bgeu	r2,r7,8b728 <__umoddi3+0x298>
   8b5c8:	00804034 	movhi	r2,256
   8b5cc:	10bfffc4 	addi	r2,r2,-1
   8b5d0:	11c0e736 	bltu	r2,r7,8b970 <__umoddi3+0x4e0>
   8b5d4:	01000404 	movi	r4,16
   8b5d8:	3904d83a 	srl	r2,r7,r4
   8b5dc:	00c00274 	movhi	r3,9
   8b5e0:	18c85b04 	addi	r3,r3,8556
   8b5e4:	1885883a 	add	r2,r3,r2
   8b5e8:	14c00003 	ldbu	r19,0(r2)
   8b5ec:	00c00804 	movi	r3,32
   8b5f0:	9927883a 	add	r19,r19,r4
   8b5f4:	1ce9c83a 	sub	r20,r3,r19
   8b5f8:	a000581e 	bne	r20,zero,8b75c <__umoddi3+0x2cc>
   8b5fc:	3c400136 	bltu	r7,r17,8b604 <__umoddi3+0x174>
   8b600:	8180eb36 	bltu	r16,r6,8b9b0 <__umoddi3+0x520>
   8b604:	8185c83a 	sub	r2,r16,r6
   8b608:	89e3c83a 	sub	r17,r17,r7
   8b60c:	8089803a 	cmpltu	r4,r16,r2
   8b610:	8939c83a 	sub	fp,r17,r4
   8b614:	e007883a 	mov	r3,fp
   8b618:	00003706 	br	8b6f8 <__umoddi3+0x268>
   8b61c:	3000041e 	bne	r6,zero,8b630 <__umoddi3+0x1a0>
   8b620:	000b883a 	mov	r5,zero
   8b624:	01000044 	movi	r4,1
   8b628:	008bac00 	call	8bac0 <__udivsi3>
   8b62c:	1027883a 	mov	r19,r2
   8b630:	00bfffd4 	movui	r2,65535
   8b634:	14c0402e 	bgeu	r2,r19,8b738 <__umoddi3+0x2a8>
   8b638:	00804034 	movhi	r2,256
   8b63c:	10bfffc4 	addi	r2,r2,-1
   8b640:	14c0cd36 	bltu	r2,r19,8b978 <__umoddi3+0x4e8>
   8b644:	00800404 	movi	r2,16
   8b648:	9886d83a 	srl	r3,r19,r2
   8b64c:	01000274 	movhi	r4,9
   8b650:	21085b04 	addi	r4,r4,8556
   8b654:	20c7883a 	add	r3,r4,r3
   8b658:	18c00003 	ldbu	r3,0(r3)
   8b65c:	1887883a 	add	r3,r3,r2
   8b660:	00800804 	movi	r2,32
   8b664:	10e5c83a 	sub	r18,r2,r3
   8b668:	9000901e 	bne	r18,zero,8b8ac <__umoddi3+0x41c>
   8b66c:	982cd43a 	srli	r22,r19,16
   8b670:	8ce3c83a 	sub	r17,r17,r19
   8b674:	9d7fffcc 	andi	r21,r19,65535
   8b678:	b00b883a 	mov	r5,r22
   8b67c:	8809883a 	mov	r4,r17
   8b680:	008bb240 	call	8bb24 <__umodsi3>
   8b684:	8809883a 	mov	r4,r17
   8b688:	b00b883a 	mov	r5,r22
   8b68c:	1021883a 	mov	r16,r2
   8b690:	008bac00 	call	8bac0 <__udivsi3>
   8b694:	8006943a 	slli	r3,r16,16
   8b698:	a008d43a 	srli	r4,r20,16
   8b69c:	1545383a 	mul	r2,r2,r21
   8b6a0:	20c8b03a 	or	r4,r4,r3
   8b6a4:	2080042e 	bgeu	r4,r2,8b6b8 <__umoddi3+0x228>
   8b6a8:	24c9883a 	add	r4,r4,r19
   8b6ac:	24c00236 	bltu	r4,r19,8b6b8 <__umoddi3+0x228>
   8b6b0:	2080012e 	bgeu	r4,r2,8b6b8 <__umoddi3+0x228>
   8b6b4:	24c9883a 	add	r4,r4,r19
   8b6b8:	20a1c83a 	sub	r16,r4,r2
   8b6bc:	b00b883a 	mov	r5,r22
   8b6c0:	8009883a 	mov	r4,r16
   8b6c4:	008bb240 	call	8bb24 <__umodsi3>
   8b6c8:	1023883a 	mov	r17,r2
   8b6cc:	b00b883a 	mov	r5,r22
   8b6d0:	8009883a 	mov	r4,r16
   8b6d4:	008bac00 	call	8bac0 <__udivsi3>
   8b6d8:	8822943a 	slli	r17,r17,16
   8b6dc:	1545383a 	mul	r2,r2,r21
   8b6e0:	a53fffcc 	andi	r20,r20,65535
   8b6e4:	a446b03a 	or	r3,r20,r17
   8b6e8:	18bfb02e 	bgeu	r3,r2,8b5ac <rx_descriptor_end+0xfff8b54c>
   8b6ec:	003fab06 	br	8b59c <rx_descriptor_end+0xfff8b53c>
   8b6f0:	2005883a 	mov	r2,r4
   8b6f4:	2807883a 	mov	r3,r5
   8b6f8:	dfc00b17 	ldw	ra,44(sp)
   8b6fc:	df000a17 	ldw	fp,40(sp)
   8b700:	ddc00917 	ldw	r23,36(sp)
   8b704:	dd800817 	ldw	r22,32(sp)
   8b708:	dd400717 	ldw	r21,28(sp)
   8b70c:	dd000617 	ldw	r20,24(sp)
   8b710:	dcc00517 	ldw	r19,20(sp)
   8b714:	dc800417 	ldw	r18,16(sp)
   8b718:	dc400317 	ldw	r17,12(sp)
   8b71c:	dc000217 	ldw	r16,8(sp)
   8b720:	dec00c04 	addi	sp,sp,48
   8b724:	f800283a 	ret
   8b728:	04c03fc4 	movi	r19,255
   8b72c:	99c9803a 	cmpltu	r4,r19,r7
   8b730:	200890fa 	slli	r4,r4,3
   8b734:	003fa806 	br	8b5d8 <rx_descriptor_end+0xfff8b578>
   8b738:	00803fc4 	movi	r2,255
   8b73c:	14c5803a 	cmpltu	r2,r2,r19
   8b740:	100490fa 	slli	r2,r2,3
   8b744:	003fc006 	br	8b648 <rx_descriptor_end+0xfff8b5e8>
   8b748:	00804034 	movhi	r2,256
   8b74c:	10bfffc4 	addi	r2,r2,-1
   8b750:	11808b36 	bltu	r2,r6,8b980 <__umoddi3+0x4f0>
   8b754:	01000404 	movi	r4,16
   8b758:	003f6406 	br	8b4ec <rx_descriptor_end+0xfff8b48c>
   8b75c:	34c4d83a 	srl	r2,r6,r19
   8b760:	3d0e983a 	sll	r7,r7,r20
   8b764:	8cf8d83a 	srl	fp,r17,r19
   8b768:	8d10983a 	sll	r8,r17,r20
   8b76c:	38aab03a 	or	r21,r7,r2
   8b770:	a82cd43a 	srli	r22,r21,16
   8b774:	84e2d83a 	srl	r17,r16,r19
   8b778:	e009883a 	mov	r4,fp
   8b77c:	b00b883a 	mov	r5,r22
   8b780:	8a22b03a 	or	r17,r17,r8
   8b784:	3524983a 	sll	r18,r6,r20
   8b788:	008bb240 	call	8bb24 <__umodsi3>
   8b78c:	e009883a 	mov	r4,fp
   8b790:	b00b883a 	mov	r5,r22
   8b794:	102f883a 	mov	r23,r2
   8b798:	008bac00 	call	8bac0 <__udivsi3>
   8b79c:	100d883a 	mov	r6,r2
   8b7a0:	b808943a 	slli	r4,r23,16
   8b7a4:	aa3fffcc 	andi	r8,r21,65535
   8b7a8:	8804d43a 	srli	r2,r17,16
   8b7ac:	41af383a 	mul	r23,r8,r6
   8b7b0:	8520983a 	sll	r16,r16,r20
   8b7b4:	1104b03a 	or	r2,r2,r4
   8b7b8:	15c0042e 	bgeu	r2,r23,8b7cc <__umoddi3+0x33c>
   8b7bc:	1545883a 	add	r2,r2,r21
   8b7c0:	30ffffc4 	addi	r3,r6,-1
   8b7c4:	1540742e 	bgeu	r2,r21,8b998 <__umoddi3+0x508>
   8b7c8:	180d883a 	mov	r6,r3
   8b7cc:	15efc83a 	sub	r23,r2,r23
   8b7d0:	b00b883a 	mov	r5,r22
   8b7d4:	b809883a 	mov	r4,r23
   8b7d8:	d9800115 	stw	r6,4(sp)
   8b7dc:	da000015 	stw	r8,0(sp)
   8b7e0:	008bb240 	call	8bb24 <__umodsi3>
   8b7e4:	b00b883a 	mov	r5,r22
   8b7e8:	b809883a 	mov	r4,r23
   8b7ec:	1039883a 	mov	fp,r2
   8b7f0:	008bac00 	call	8bac0 <__udivsi3>
   8b7f4:	da000017 	ldw	r8,0(sp)
   8b7f8:	e038943a 	slli	fp,fp,16
   8b7fc:	100b883a 	mov	r5,r2
   8b800:	4089383a 	mul	r4,r8,r2
   8b804:	8a3fffcc 	andi	r8,r17,65535
   8b808:	4710b03a 	or	r8,r8,fp
   8b80c:	d9800117 	ldw	r6,4(sp)
   8b810:	4100042e 	bgeu	r8,r4,8b824 <__umoddi3+0x394>
   8b814:	4551883a 	add	r8,r8,r21
   8b818:	10bfffc4 	addi	r2,r2,-1
   8b81c:	45405a2e 	bgeu	r8,r21,8b988 <__umoddi3+0x4f8>
   8b820:	100b883a 	mov	r5,r2
   8b824:	300c943a 	slli	r6,r6,16
   8b828:	91ffffcc 	andi	r7,r18,65535
   8b82c:	9004d43a 	srli	r2,r18,16
   8b830:	314cb03a 	or	r6,r6,r5
   8b834:	317fffcc 	andi	r5,r6,65535
   8b838:	300cd43a 	srli	r6,r6,16
   8b83c:	29d3383a 	mul	r9,r5,r7
   8b840:	288b383a 	mul	r5,r5,r2
   8b844:	31cf383a 	mul	r7,r6,r7
   8b848:	4806d43a 	srli	r3,r9,16
   8b84c:	4111c83a 	sub	r8,r8,r4
   8b850:	29cb883a 	add	r5,r5,r7
   8b854:	194b883a 	add	r5,r3,r5
   8b858:	3085383a 	mul	r2,r6,r2
   8b85c:	29c0022e 	bgeu	r5,r7,8b868 <__umoddi3+0x3d8>
   8b860:	00c00074 	movhi	r3,1
   8b864:	10c5883a 	add	r2,r2,r3
   8b868:	2808d43a 	srli	r4,r5,16
   8b86c:	280a943a 	slli	r5,r5,16
   8b870:	4a7fffcc 	andi	r9,r9,65535
   8b874:	2085883a 	add	r2,r4,r2
   8b878:	2a4b883a 	add	r5,r5,r9
   8b87c:	40803636 	bltu	r8,r2,8b958 <__umoddi3+0x4c8>
   8b880:	40804d26 	beq	r8,r2,8b9b8 <__umoddi3+0x528>
   8b884:	4089c83a 	sub	r4,r8,r2
   8b888:	280f883a 	mov	r7,r5
   8b88c:	81cfc83a 	sub	r7,r16,r7
   8b890:	81c7803a 	cmpltu	r3,r16,r7
   8b894:	20c7c83a 	sub	r3,r4,r3
   8b898:	1cc4983a 	sll	r2,r3,r19
   8b89c:	3d0ed83a 	srl	r7,r7,r20
   8b8a0:	1d06d83a 	srl	r3,r3,r20
   8b8a4:	11c4b03a 	or	r2,r2,r7
   8b8a8:	003f9306 	br	8b6f8 <rx_descriptor_end+0xfff8b698>
   8b8ac:	9ca6983a 	sll	r19,r19,r18
   8b8b0:	88e8d83a 	srl	r20,r17,r3
   8b8b4:	80c4d83a 	srl	r2,r16,r3
   8b8b8:	982cd43a 	srli	r22,r19,16
   8b8bc:	8ca2983a 	sll	r17,r17,r18
   8b8c0:	a009883a 	mov	r4,r20
   8b8c4:	b00b883a 	mov	r5,r22
   8b8c8:	1478b03a 	or	fp,r2,r17
   8b8cc:	008bb240 	call	8bb24 <__umodsi3>
   8b8d0:	a009883a 	mov	r4,r20
   8b8d4:	b00b883a 	mov	r5,r22
   8b8d8:	1023883a 	mov	r17,r2
   8b8dc:	008bac00 	call	8bac0 <__udivsi3>
   8b8e0:	9d7fffcc 	andi	r21,r19,65535
   8b8e4:	880a943a 	slli	r5,r17,16
   8b8e8:	e008d43a 	srli	r4,fp,16
   8b8ec:	a885383a 	mul	r2,r21,r2
   8b8f0:	84a8983a 	sll	r20,r16,r18
   8b8f4:	2148b03a 	or	r4,r4,r5
   8b8f8:	2080042e 	bgeu	r4,r2,8b90c <__umoddi3+0x47c>
   8b8fc:	24c9883a 	add	r4,r4,r19
   8b900:	24c00236 	bltu	r4,r19,8b90c <__umoddi3+0x47c>
   8b904:	2080012e 	bgeu	r4,r2,8b90c <__umoddi3+0x47c>
   8b908:	24c9883a 	add	r4,r4,r19
   8b90c:	20a3c83a 	sub	r17,r4,r2
   8b910:	b00b883a 	mov	r5,r22
   8b914:	8809883a 	mov	r4,r17
   8b918:	008bb240 	call	8bb24 <__umodsi3>
   8b91c:	102f883a 	mov	r23,r2
   8b920:	8809883a 	mov	r4,r17
   8b924:	b00b883a 	mov	r5,r22
   8b928:	008bac00 	call	8bac0 <__udivsi3>
   8b92c:	b82e943a 	slli	r23,r23,16
   8b930:	a885383a 	mul	r2,r21,r2
   8b934:	e13fffcc 	andi	r4,fp,65535
   8b938:	25c8b03a 	or	r4,r4,r23
   8b93c:	2080042e 	bgeu	r4,r2,8b950 <__umoddi3+0x4c0>
   8b940:	24c9883a 	add	r4,r4,r19
   8b944:	24c00236 	bltu	r4,r19,8b950 <__umoddi3+0x4c0>
   8b948:	2080012e 	bgeu	r4,r2,8b950 <__umoddi3+0x4c0>
   8b94c:	24c9883a 	add	r4,r4,r19
   8b950:	20a3c83a 	sub	r17,r4,r2
   8b954:	003f4806 	br	8b678 <rx_descriptor_end+0xfff8b618>
   8b958:	2c8fc83a 	sub	r7,r5,r18
   8b95c:	1545c83a 	sub	r2,r2,r21
   8b960:	29cb803a 	cmpltu	r5,r5,r7
   8b964:	1145c83a 	sub	r2,r2,r5
   8b968:	4089c83a 	sub	r4,r8,r2
   8b96c:	003fc706 	br	8b88c <rx_descriptor_end+0xfff8b82c>
   8b970:	01000604 	movi	r4,24
   8b974:	003f1806 	br	8b5d8 <rx_descriptor_end+0xfff8b578>
   8b978:	00800604 	movi	r2,24
   8b97c:	003f3206 	br	8b648 <rx_descriptor_end+0xfff8b5e8>
   8b980:	01000604 	movi	r4,24
   8b984:	003ed906 	br	8b4ec <rx_descriptor_end+0xfff8b48c>
   8b988:	413fa52e 	bgeu	r8,r4,8b820 <rx_descriptor_end+0xfff8b7c0>
   8b98c:	297fff84 	addi	r5,r5,-2
   8b990:	4551883a 	add	r8,r8,r21
   8b994:	003fa306 	br	8b824 <rx_descriptor_end+0xfff8b7c4>
   8b998:	15ff8b2e 	bgeu	r2,r23,8b7c8 <rx_descriptor_end+0xfff8b768>
   8b99c:	31bfff84 	addi	r6,r6,-2
   8b9a0:	1545883a 	add	r2,r2,r21
   8b9a4:	003f8906 	br	8b7cc <rx_descriptor_end+0xfff8b76c>
   8b9a8:	24c9883a 	add	r4,r4,r19
   8b9ac:	003eee06 	br	8b568 <rx_descriptor_end+0xfff8b508>
   8b9b0:	8005883a 	mov	r2,r16
   8b9b4:	003f1706 	br	8b614 <rx_descriptor_end+0xfff8b5b4>
   8b9b8:	817fe736 	bltu	r16,r5,8b958 <rx_descriptor_end+0xfff8b8f8>
   8b9bc:	280f883a 	mov	r7,r5
   8b9c0:	0009883a 	mov	r4,zero
   8b9c4:	003fb106 	br	8b88c <rx_descriptor_end+0xfff8b82c>

0008b9c8 <__divsi3>:
   8b9c8:	20001b16 	blt	r4,zero,8ba38 <__divsi3+0x70>
   8b9cc:	000f883a 	mov	r7,zero
   8b9d0:	28001616 	blt	r5,zero,8ba2c <__divsi3+0x64>
   8b9d4:	200d883a 	mov	r6,r4
   8b9d8:	29001a2e 	bgeu	r5,r4,8ba44 <__divsi3+0x7c>
   8b9dc:	00800804 	movi	r2,32
   8b9e0:	00c00044 	movi	r3,1
   8b9e4:	00000106 	br	8b9ec <__divsi3+0x24>
   8b9e8:	10000d26 	beq	r2,zero,8ba20 <__divsi3+0x58>
   8b9ec:	294b883a 	add	r5,r5,r5
   8b9f0:	10bfffc4 	addi	r2,r2,-1
   8b9f4:	18c7883a 	add	r3,r3,r3
   8b9f8:	293ffb36 	bltu	r5,r4,8b9e8 <rx_descriptor_end+0xfff8b988>
   8b9fc:	0005883a 	mov	r2,zero
   8ba00:	18000726 	beq	r3,zero,8ba20 <__divsi3+0x58>
   8ba04:	0005883a 	mov	r2,zero
   8ba08:	31400236 	bltu	r6,r5,8ba14 <__divsi3+0x4c>
   8ba0c:	314dc83a 	sub	r6,r6,r5
   8ba10:	10c4b03a 	or	r2,r2,r3
   8ba14:	1806d07a 	srli	r3,r3,1
   8ba18:	280ad07a 	srli	r5,r5,1
   8ba1c:	183ffa1e 	bne	r3,zero,8ba08 <rx_descriptor_end+0xfff8b9a8>
   8ba20:	38000126 	beq	r7,zero,8ba28 <__divsi3+0x60>
   8ba24:	0085c83a 	sub	r2,zero,r2
   8ba28:	f800283a 	ret
   8ba2c:	014bc83a 	sub	r5,zero,r5
   8ba30:	39c0005c 	xori	r7,r7,1
   8ba34:	003fe706 	br	8b9d4 <rx_descriptor_end+0xfff8b974>
   8ba38:	0109c83a 	sub	r4,zero,r4
   8ba3c:	01c00044 	movi	r7,1
   8ba40:	003fe306 	br	8b9d0 <rx_descriptor_end+0xfff8b970>
   8ba44:	00c00044 	movi	r3,1
   8ba48:	003fee06 	br	8ba04 <rx_descriptor_end+0xfff8b9a4>

0008ba4c <__modsi3>:
   8ba4c:	20001716 	blt	r4,zero,8baac <__modsi3+0x60>
   8ba50:	000f883a 	mov	r7,zero
   8ba54:	2005883a 	mov	r2,r4
   8ba58:	28001216 	blt	r5,zero,8baa4 <__modsi3+0x58>
   8ba5c:	2900162e 	bgeu	r5,r4,8bab8 <__modsi3+0x6c>
   8ba60:	01800804 	movi	r6,32
   8ba64:	00c00044 	movi	r3,1
   8ba68:	00000106 	br	8ba70 <__modsi3+0x24>
   8ba6c:	30000a26 	beq	r6,zero,8ba98 <__modsi3+0x4c>
   8ba70:	294b883a 	add	r5,r5,r5
   8ba74:	31bfffc4 	addi	r6,r6,-1
   8ba78:	18c7883a 	add	r3,r3,r3
   8ba7c:	293ffb36 	bltu	r5,r4,8ba6c <rx_descriptor_end+0xfff8ba0c>
   8ba80:	18000526 	beq	r3,zero,8ba98 <__modsi3+0x4c>
   8ba84:	1806d07a 	srli	r3,r3,1
   8ba88:	11400136 	bltu	r2,r5,8ba90 <__modsi3+0x44>
   8ba8c:	1145c83a 	sub	r2,r2,r5
   8ba90:	280ad07a 	srli	r5,r5,1
   8ba94:	183ffb1e 	bne	r3,zero,8ba84 <rx_descriptor_end+0xfff8ba24>
   8ba98:	38000126 	beq	r7,zero,8baa0 <__modsi3+0x54>
   8ba9c:	0085c83a 	sub	r2,zero,r2
   8baa0:	f800283a 	ret
   8baa4:	014bc83a 	sub	r5,zero,r5
   8baa8:	003fec06 	br	8ba5c <rx_descriptor_end+0xfff8b9fc>
   8baac:	0109c83a 	sub	r4,zero,r4
   8bab0:	01c00044 	movi	r7,1
   8bab4:	003fe706 	br	8ba54 <rx_descriptor_end+0xfff8b9f4>
   8bab8:	00c00044 	movi	r3,1
   8babc:	003ff106 	br	8ba84 <rx_descriptor_end+0xfff8ba24>

0008bac0 <__udivsi3>:
   8bac0:	200d883a 	mov	r6,r4
   8bac4:	2900152e 	bgeu	r5,r4,8bb1c <__udivsi3+0x5c>
   8bac8:	28001416 	blt	r5,zero,8bb1c <__udivsi3+0x5c>
   8bacc:	00800804 	movi	r2,32
   8bad0:	00c00044 	movi	r3,1
   8bad4:	00000206 	br	8bae0 <__udivsi3+0x20>
   8bad8:	10000e26 	beq	r2,zero,8bb14 <__udivsi3+0x54>
   8badc:	28000516 	blt	r5,zero,8baf4 <__udivsi3+0x34>
   8bae0:	294b883a 	add	r5,r5,r5
   8bae4:	10bfffc4 	addi	r2,r2,-1
   8bae8:	18c7883a 	add	r3,r3,r3
   8baec:	293ffa36 	bltu	r5,r4,8bad8 <rx_descriptor_end+0xfff8ba78>
   8baf0:	18000826 	beq	r3,zero,8bb14 <__udivsi3+0x54>
   8baf4:	0005883a 	mov	r2,zero
   8baf8:	31400236 	bltu	r6,r5,8bb04 <__udivsi3+0x44>
   8bafc:	314dc83a 	sub	r6,r6,r5
   8bb00:	10c4b03a 	or	r2,r2,r3
   8bb04:	1806d07a 	srli	r3,r3,1
   8bb08:	280ad07a 	srli	r5,r5,1
   8bb0c:	183ffa1e 	bne	r3,zero,8baf8 <rx_descriptor_end+0xfff8ba98>
   8bb10:	f800283a 	ret
   8bb14:	0005883a 	mov	r2,zero
   8bb18:	f800283a 	ret
   8bb1c:	00c00044 	movi	r3,1
   8bb20:	003ff406 	br	8baf4 <rx_descriptor_end+0xfff8ba94>

0008bb24 <__umodsi3>:
   8bb24:	2005883a 	mov	r2,r4
   8bb28:	2900122e 	bgeu	r5,r4,8bb74 <__umodsi3+0x50>
   8bb2c:	28001116 	blt	r5,zero,8bb74 <__umodsi3+0x50>
   8bb30:	01800804 	movi	r6,32
   8bb34:	00c00044 	movi	r3,1
   8bb38:	00000206 	br	8bb44 <__umodsi3+0x20>
   8bb3c:	30000c26 	beq	r6,zero,8bb70 <__umodsi3+0x4c>
   8bb40:	28000516 	blt	r5,zero,8bb58 <__umodsi3+0x34>
   8bb44:	294b883a 	add	r5,r5,r5
   8bb48:	31bfffc4 	addi	r6,r6,-1
   8bb4c:	18c7883a 	add	r3,r3,r3
   8bb50:	293ffa36 	bltu	r5,r4,8bb3c <rx_descriptor_end+0xfff8badc>
   8bb54:	18000626 	beq	r3,zero,8bb70 <__umodsi3+0x4c>
   8bb58:	1806d07a 	srli	r3,r3,1
   8bb5c:	11400136 	bltu	r2,r5,8bb64 <__umodsi3+0x40>
   8bb60:	1145c83a 	sub	r2,r2,r5
   8bb64:	280ad07a 	srli	r5,r5,1
   8bb68:	183ffb1e 	bne	r3,zero,8bb58 <rx_descriptor_end+0xfff8baf8>
   8bb6c:	f800283a 	ret
   8bb70:	f800283a 	ret
   8bb74:	00c00044 	movi	r3,1
   8bb78:	003ff706 	br	8bb58 <rx_descriptor_end+0xfff8baf8>

0008bb7c <__adddf3>:
   8bb7c:	02c00434 	movhi	r11,16
   8bb80:	5affffc4 	addi	r11,r11,-1
   8bb84:	2806d7fa 	srli	r3,r5,31
   8bb88:	2ad4703a 	and	r10,r5,r11
   8bb8c:	3ad2703a 	and	r9,r7,r11
   8bb90:	3804d53a 	srli	r2,r7,20
   8bb94:	3018d77a 	srli	r12,r6,29
   8bb98:	280ad53a 	srli	r5,r5,20
   8bb9c:	501490fa 	slli	r10,r10,3
   8bba0:	2010d77a 	srli	r8,r4,29
   8bba4:	481290fa 	slli	r9,r9,3
   8bba8:	380ed7fa 	srli	r7,r7,31
   8bbac:	defffb04 	addi	sp,sp,-20
   8bbb0:	dc800215 	stw	r18,8(sp)
   8bbb4:	dc400115 	stw	r17,4(sp)
   8bbb8:	dc000015 	stw	r16,0(sp)
   8bbbc:	dfc00415 	stw	ra,16(sp)
   8bbc0:	dcc00315 	stw	r19,12(sp)
   8bbc4:	1c803fcc 	andi	r18,r3,255
   8bbc8:	2c01ffcc 	andi	r16,r5,2047
   8bbcc:	5210b03a 	or	r8,r10,r8
   8bbd0:	202290fa 	slli	r17,r4,3
   8bbd4:	1081ffcc 	andi	r2,r2,2047
   8bbd8:	4b12b03a 	or	r9,r9,r12
   8bbdc:	300c90fa 	slli	r6,r6,3
   8bbe0:	91c07526 	beq	r18,r7,8bdb8 <__adddf3+0x23c>
   8bbe4:	8087c83a 	sub	r3,r16,r2
   8bbe8:	00c0ab0e 	bge	zero,r3,8be98 <__adddf3+0x31c>
   8bbec:	10002a1e 	bne	r2,zero,8bc98 <__adddf3+0x11c>
   8bbf0:	4984b03a 	or	r2,r9,r6
   8bbf4:	1000961e 	bne	r2,zero,8be50 <__adddf3+0x2d4>
   8bbf8:	888001cc 	andi	r2,r17,7
   8bbfc:	10000726 	beq	r2,zero,8bc1c <__adddf3+0xa0>
   8bc00:	888003cc 	andi	r2,r17,15
   8bc04:	00c00104 	movi	r3,4
   8bc08:	10c00426 	beq	r2,r3,8bc1c <__adddf3+0xa0>
   8bc0c:	88c7883a 	add	r3,r17,r3
   8bc10:	1c63803a 	cmpltu	r17,r3,r17
   8bc14:	4451883a 	add	r8,r8,r17
   8bc18:	1823883a 	mov	r17,r3
   8bc1c:	4080202c 	andhi	r2,r8,128
   8bc20:	10005926 	beq	r2,zero,8bd88 <__adddf3+0x20c>
   8bc24:	84000044 	addi	r16,r16,1
   8bc28:	0081ffc4 	movi	r2,2047
   8bc2c:	8080ba26 	beq	r16,r2,8bf18 <__adddf3+0x39c>
   8bc30:	00bfe034 	movhi	r2,65408
   8bc34:	10bfffc4 	addi	r2,r2,-1
   8bc38:	4090703a 	and	r8,r8,r2
   8bc3c:	4004977a 	slli	r2,r8,29
   8bc40:	4010927a 	slli	r8,r8,9
   8bc44:	8822d0fa 	srli	r17,r17,3
   8bc48:	8401ffcc 	andi	r16,r16,2047
   8bc4c:	4010d33a 	srli	r8,r8,12
   8bc50:	9007883a 	mov	r3,r18
   8bc54:	1444b03a 	or	r2,r2,r17
   8bc58:	8401ffcc 	andi	r16,r16,2047
   8bc5c:	8020953a 	slli	r16,r16,20
   8bc60:	18c03fcc 	andi	r3,r3,255
   8bc64:	01000434 	movhi	r4,16
   8bc68:	213fffc4 	addi	r4,r4,-1
   8bc6c:	180697fa 	slli	r3,r3,31
   8bc70:	4110703a 	and	r8,r8,r4
   8bc74:	4410b03a 	or	r8,r8,r16
   8bc78:	40c6b03a 	or	r3,r8,r3
   8bc7c:	dfc00417 	ldw	ra,16(sp)
   8bc80:	dcc00317 	ldw	r19,12(sp)
   8bc84:	dc800217 	ldw	r18,8(sp)
   8bc88:	dc400117 	ldw	r17,4(sp)
   8bc8c:	dc000017 	ldw	r16,0(sp)
   8bc90:	dec00504 	addi	sp,sp,20
   8bc94:	f800283a 	ret
   8bc98:	0081ffc4 	movi	r2,2047
   8bc9c:	80bfd626 	beq	r16,r2,8bbf8 <rx_descriptor_end+0xfff8bb98>
   8bca0:	4a402034 	orhi	r9,r9,128
   8bca4:	00800e04 	movi	r2,56
   8bca8:	10c09f16 	blt	r2,r3,8bf28 <__adddf3+0x3ac>
   8bcac:	008007c4 	movi	r2,31
   8bcb0:	10c0c216 	blt	r2,r3,8bfbc <__adddf3+0x440>
   8bcb4:	00800804 	movi	r2,32
   8bcb8:	10c5c83a 	sub	r2,r2,r3
   8bcbc:	488a983a 	sll	r5,r9,r2
   8bcc0:	30c8d83a 	srl	r4,r6,r3
   8bcc4:	3084983a 	sll	r2,r6,r2
   8bcc8:	48c6d83a 	srl	r3,r9,r3
   8bccc:	290cb03a 	or	r6,r5,r4
   8bcd0:	1004c03a 	cmpne	r2,r2,zero
   8bcd4:	308cb03a 	or	r6,r6,r2
   8bcd8:	898dc83a 	sub	r6,r17,r6
   8bcdc:	89a3803a 	cmpltu	r17,r17,r6
   8bce0:	40d1c83a 	sub	r8,r8,r3
   8bce4:	4451c83a 	sub	r8,r8,r17
   8bce8:	3023883a 	mov	r17,r6
   8bcec:	4080202c 	andhi	r2,r8,128
   8bcf0:	10002326 	beq	r2,zero,8bd80 <__adddf3+0x204>
   8bcf4:	04c02034 	movhi	r19,128
   8bcf8:	9cffffc4 	addi	r19,r19,-1
   8bcfc:	44e6703a 	and	r19,r8,r19
   8bd00:	98007626 	beq	r19,zero,8bedc <__adddf3+0x360>
   8bd04:	9809883a 	mov	r4,r19
   8bd08:	008e1800 	call	8e180 <__clzsi2>
   8bd0c:	10fffe04 	addi	r3,r2,-8
   8bd10:	010007c4 	movi	r4,31
   8bd14:	20c07716 	blt	r4,r3,8bef4 <__adddf3+0x378>
   8bd18:	00800804 	movi	r2,32
   8bd1c:	10c5c83a 	sub	r2,r2,r3
   8bd20:	8884d83a 	srl	r2,r17,r2
   8bd24:	98d0983a 	sll	r8,r19,r3
   8bd28:	88e2983a 	sll	r17,r17,r3
   8bd2c:	1204b03a 	or	r2,r2,r8
   8bd30:	1c007416 	blt	r3,r16,8bf04 <__adddf3+0x388>
   8bd34:	1c21c83a 	sub	r16,r3,r16
   8bd38:	82000044 	addi	r8,r16,1
   8bd3c:	00c007c4 	movi	r3,31
   8bd40:	1a009116 	blt	r3,r8,8bf88 <__adddf3+0x40c>
   8bd44:	00c00804 	movi	r3,32
   8bd48:	1a07c83a 	sub	r3,r3,r8
   8bd4c:	8a08d83a 	srl	r4,r17,r8
   8bd50:	88e2983a 	sll	r17,r17,r3
   8bd54:	10c6983a 	sll	r3,r2,r3
   8bd58:	1210d83a 	srl	r8,r2,r8
   8bd5c:	8804c03a 	cmpne	r2,r17,zero
   8bd60:	1906b03a 	or	r3,r3,r4
   8bd64:	18a2b03a 	or	r17,r3,r2
   8bd68:	0021883a 	mov	r16,zero
   8bd6c:	003fa206 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8bd70:	1890b03a 	or	r8,r3,r2
   8bd74:	40017d26 	beq	r8,zero,8c36c <__adddf3+0x7f0>
   8bd78:	1011883a 	mov	r8,r2
   8bd7c:	1823883a 	mov	r17,r3
   8bd80:	888001cc 	andi	r2,r17,7
   8bd84:	103f9e1e 	bne	r2,zero,8bc00 <rx_descriptor_end+0xfff8bba0>
   8bd88:	4004977a 	slli	r2,r8,29
   8bd8c:	8822d0fa 	srli	r17,r17,3
   8bd90:	4010d0fa 	srli	r8,r8,3
   8bd94:	9007883a 	mov	r3,r18
   8bd98:	1444b03a 	or	r2,r2,r17
   8bd9c:	0101ffc4 	movi	r4,2047
   8bda0:	81002426 	beq	r16,r4,8be34 <__adddf3+0x2b8>
   8bda4:	8120703a 	and	r16,r16,r4
   8bda8:	01000434 	movhi	r4,16
   8bdac:	213fffc4 	addi	r4,r4,-1
   8bdb0:	4110703a 	and	r8,r8,r4
   8bdb4:	003fa806 	br	8bc58 <rx_descriptor_end+0xfff8bbf8>
   8bdb8:	8089c83a 	sub	r4,r16,r2
   8bdbc:	01005e0e 	bge	zero,r4,8bf38 <__adddf3+0x3bc>
   8bdc0:	10002b26 	beq	r2,zero,8be70 <__adddf3+0x2f4>
   8bdc4:	0081ffc4 	movi	r2,2047
   8bdc8:	80bf8b26 	beq	r16,r2,8bbf8 <rx_descriptor_end+0xfff8bb98>
   8bdcc:	4a402034 	orhi	r9,r9,128
   8bdd0:	00800e04 	movi	r2,56
   8bdd4:	1100a40e 	bge	r2,r4,8c068 <__adddf3+0x4ec>
   8bdd8:	498cb03a 	or	r6,r9,r6
   8bddc:	300ac03a 	cmpne	r5,r6,zero
   8bde0:	0013883a 	mov	r9,zero
   8bde4:	2c4b883a 	add	r5,r5,r17
   8bde8:	2c63803a 	cmpltu	r17,r5,r17
   8bdec:	4a11883a 	add	r8,r9,r8
   8bdf0:	8a11883a 	add	r8,r17,r8
   8bdf4:	2823883a 	mov	r17,r5
   8bdf8:	4080202c 	andhi	r2,r8,128
   8bdfc:	103fe026 	beq	r2,zero,8bd80 <rx_descriptor_end+0xfff8bd20>
   8be00:	84000044 	addi	r16,r16,1
   8be04:	0081ffc4 	movi	r2,2047
   8be08:	8080d226 	beq	r16,r2,8c154 <__adddf3+0x5d8>
   8be0c:	00bfe034 	movhi	r2,65408
   8be10:	10bfffc4 	addi	r2,r2,-1
   8be14:	4090703a 	and	r8,r8,r2
   8be18:	880ad07a 	srli	r5,r17,1
   8be1c:	400897fa 	slli	r4,r8,31
   8be20:	88c0004c 	andi	r3,r17,1
   8be24:	28e2b03a 	or	r17,r5,r3
   8be28:	4010d07a 	srli	r8,r8,1
   8be2c:	2462b03a 	or	r17,r4,r17
   8be30:	003f7106 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8be34:	4088b03a 	or	r4,r8,r2
   8be38:	20014526 	beq	r4,zero,8c350 <__adddf3+0x7d4>
   8be3c:	01000434 	movhi	r4,16
   8be40:	42000234 	orhi	r8,r8,8
   8be44:	213fffc4 	addi	r4,r4,-1
   8be48:	4110703a 	and	r8,r8,r4
   8be4c:	003f8206 	br	8bc58 <rx_descriptor_end+0xfff8bbf8>
   8be50:	18ffffc4 	addi	r3,r3,-1
   8be54:	1800491e 	bne	r3,zero,8bf7c <__adddf3+0x400>
   8be58:	898bc83a 	sub	r5,r17,r6
   8be5c:	8963803a 	cmpltu	r17,r17,r5
   8be60:	4251c83a 	sub	r8,r8,r9
   8be64:	4451c83a 	sub	r8,r8,r17
   8be68:	2823883a 	mov	r17,r5
   8be6c:	003f9f06 	br	8bcec <rx_descriptor_end+0xfff8bc8c>
   8be70:	4984b03a 	or	r2,r9,r6
   8be74:	103f6026 	beq	r2,zero,8bbf8 <rx_descriptor_end+0xfff8bb98>
   8be78:	213fffc4 	addi	r4,r4,-1
   8be7c:	2000931e 	bne	r4,zero,8c0cc <__adddf3+0x550>
   8be80:	898d883a 	add	r6,r17,r6
   8be84:	3463803a 	cmpltu	r17,r6,r17
   8be88:	4251883a 	add	r8,r8,r9
   8be8c:	8a11883a 	add	r8,r17,r8
   8be90:	3023883a 	mov	r17,r6
   8be94:	003fd806 	br	8bdf8 <rx_descriptor_end+0xfff8bd98>
   8be98:	1800541e 	bne	r3,zero,8bfec <__adddf3+0x470>
   8be9c:	80800044 	addi	r2,r16,1
   8bea0:	1081ffcc 	andi	r2,r2,2047
   8bea4:	00c00044 	movi	r3,1
   8bea8:	1880a00e 	bge	r3,r2,8c12c <__adddf3+0x5b0>
   8beac:	8989c83a 	sub	r4,r17,r6
   8beb0:	8905803a 	cmpltu	r2,r17,r4
   8beb4:	4267c83a 	sub	r19,r8,r9
   8beb8:	98a7c83a 	sub	r19,r19,r2
   8bebc:	9880202c 	andhi	r2,r19,128
   8bec0:	10006326 	beq	r2,zero,8c050 <__adddf3+0x4d4>
   8bec4:	3463c83a 	sub	r17,r6,r17
   8bec8:	4a07c83a 	sub	r3,r9,r8
   8becc:	344d803a 	cmpltu	r6,r6,r17
   8bed0:	19a7c83a 	sub	r19,r3,r6
   8bed4:	3825883a 	mov	r18,r7
   8bed8:	983f8a1e 	bne	r19,zero,8bd04 <rx_descriptor_end+0xfff8bca4>
   8bedc:	8809883a 	mov	r4,r17
   8bee0:	008e1800 	call	8e180 <__clzsi2>
   8bee4:	10800804 	addi	r2,r2,32
   8bee8:	10fffe04 	addi	r3,r2,-8
   8beec:	010007c4 	movi	r4,31
   8bef0:	20ff890e 	bge	r4,r3,8bd18 <rx_descriptor_end+0xfff8bcb8>
   8bef4:	10bff604 	addi	r2,r2,-40
   8bef8:	8884983a 	sll	r2,r17,r2
   8befc:	0023883a 	mov	r17,zero
   8bf00:	1c3f8c0e 	bge	r3,r16,8bd34 <rx_descriptor_end+0xfff8bcd4>
   8bf04:	023fe034 	movhi	r8,65408
   8bf08:	423fffc4 	addi	r8,r8,-1
   8bf0c:	80e1c83a 	sub	r16,r16,r3
   8bf10:	1210703a 	and	r8,r2,r8
   8bf14:	003f3806 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8bf18:	9007883a 	mov	r3,r18
   8bf1c:	0011883a 	mov	r8,zero
   8bf20:	0005883a 	mov	r2,zero
   8bf24:	003f4c06 	br	8bc58 <rx_descriptor_end+0xfff8bbf8>
   8bf28:	498cb03a 	or	r6,r9,r6
   8bf2c:	300cc03a 	cmpne	r6,r6,zero
   8bf30:	0007883a 	mov	r3,zero
   8bf34:	003f6806 	br	8bcd8 <rx_descriptor_end+0xfff8bc78>
   8bf38:	20009c1e 	bne	r4,zero,8c1ac <__adddf3+0x630>
   8bf3c:	80800044 	addi	r2,r16,1
   8bf40:	1141ffcc 	andi	r5,r2,2047
   8bf44:	01000044 	movi	r4,1
   8bf48:	2140670e 	bge	r4,r5,8c0e8 <__adddf3+0x56c>
   8bf4c:	0101ffc4 	movi	r4,2047
   8bf50:	11007f26 	beq	r2,r4,8c150 <__adddf3+0x5d4>
   8bf54:	898d883a 	add	r6,r17,r6
   8bf58:	4247883a 	add	r3,r8,r9
   8bf5c:	3451803a 	cmpltu	r8,r6,r17
   8bf60:	40d1883a 	add	r8,r8,r3
   8bf64:	402297fa 	slli	r17,r8,31
   8bf68:	300cd07a 	srli	r6,r6,1
   8bf6c:	4010d07a 	srli	r8,r8,1
   8bf70:	1021883a 	mov	r16,r2
   8bf74:	89a2b03a 	or	r17,r17,r6
   8bf78:	003f1f06 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8bf7c:	0081ffc4 	movi	r2,2047
   8bf80:	80bf481e 	bne	r16,r2,8bca4 <rx_descriptor_end+0xfff8bc44>
   8bf84:	003f1c06 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8bf88:	843ff844 	addi	r16,r16,-31
   8bf8c:	01000804 	movi	r4,32
   8bf90:	1406d83a 	srl	r3,r2,r16
   8bf94:	41005026 	beq	r8,r4,8c0d8 <__adddf3+0x55c>
   8bf98:	01001004 	movi	r4,64
   8bf9c:	2211c83a 	sub	r8,r4,r8
   8bfa0:	1204983a 	sll	r2,r2,r8
   8bfa4:	88a2b03a 	or	r17,r17,r2
   8bfa8:	8822c03a 	cmpne	r17,r17,zero
   8bfac:	1c62b03a 	or	r17,r3,r17
   8bfb0:	0011883a 	mov	r8,zero
   8bfb4:	0021883a 	mov	r16,zero
   8bfb8:	003f7106 	br	8bd80 <rx_descriptor_end+0xfff8bd20>
   8bfbc:	193ff804 	addi	r4,r3,-32
   8bfc0:	00800804 	movi	r2,32
   8bfc4:	4908d83a 	srl	r4,r9,r4
   8bfc8:	18804526 	beq	r3,r2,8c0e0 <__adddf3+0x564>
   8bfcc:	00801004 	movi	r2,64
   8bfd0:	10c5c83a 	sub	r2,r2,r3
   8bfd4:	4886983a 	sll	r3,r9,r2
   8bfd8:	198cb03a 	or	r6,r3,r6
   8bfdc:	300cc03a 	cmpne	r6,r6,zero
   8bfe0:	218cb03a 	or	r6,r4,r6
   8bfe4:	0007883a 	mov	r3,zero
   8bfe8:	003f3b06 	br	8bcd8 <rx_descriptor_end+0xfff8bc78>
   8bfec:	80002a26 	beq	r16,zero,8c098 <__adddf3+0x51c>
   8bff0:	0101ffc4 	movi	r4,2047
   8bff4:	11006826 	beq	r2,r4,8c198 <__adddf3+0x61c>
   8bff8:	00c7c83a 	sub	r3,zero,r3
   8bffc:	42002034 	orhi	r8,r8,128
   8c000:	01000e04 	movi	r4,56
   8c004:	20c07c16 	blt	r4,r3,8c1f8 <__adddf3+0x67c>
   8c008:	010007c4 	movi	r4,31
   8c00c:	20c0da16 	blt	r4,r3,8c378 <__adddf3+0x7fc>
   8c010:	01000804 	movi	r4,32
   8c014:	20c9c83a 	sub	r4,r4,r3
   8c018:	4114983a 	sll	r10,r8,r4
   8c01c:	88cad83a 	srl	r5,r17,r3
   8c020:	8908983a 	sll	r4,r17,r4
   8c024:	40c6d83a 	srl	r3,r8,r3
   8c028:	5162b03a 	or	r17,r10,r5
   8c02c:	2008c03a 	cmpne	r4,r4,zero
   8c030:	8922b03a 	or	r17,r17,r4
   8c034:	3463c83a 	sub	r17,r6,r17
   8c038:	48c7c83a 	sub	r3,r9,r3
   8c03c:	344d803a 	cmpltu	r6,r6,r17
   8c040:	1991c83a 	sub	r8,r3,r6
   8c044:	1021883a 	mov	r16,r2
   8c048:	3825883a 	mov	r18,r7
   8c04c:	003f2706 	br	8bcec <rx_descriptor_end+0xfff8bc8c>
   8c050:	24d0b03a 	or	r8,r4,r19
   8c054:	40001b1e 	bne	r8,zero,8c0c4 <__adddf3+0x548>
   8c058:	0005883a 	mov	r2,zero
   8c05c:	0007883a 	mov	r3,zero
   8c060:	0021883a 	mov	r16,zero
   8c064:	003f4d06 	br	8bd9c <rx_descriptor_end+0xfff8bd3c>
   8c068:	008007c4 	movi	r2,31
   8c06c:	11003c16 	blt	r2,r4,8c160 <__adddf3+0x5e4>
   8c070:	00800804 	movi	r2,32
   8c074:	1105c83a 	sub	r2,r2,r4
   8c078:	488e983a 	sll	r7,r9,r2
   8c07c:	310ad83a 	srl	r5,r6,r4
   8c080:	3084983a 	sll	r2,r6,r2
   8c084:	4912d83a 	srl	r9,r9,r4
   8c088:	394ab03a 	or	r5,r7,r5
   8c08c:	1004c03a 	cmpne	r2,r2,zero
   8c090:	288ab03a 	or	r5,r5,r2
   8c094:	003f5306 	br	8bde4 <rx_descriptor_end+0xfff8bd84>
   8c098:	4448b03a 	or	r4,r8,r17
   8c09c:	20003e26 	beq	r4,zero,8c198 <__adddf3+0x61c>
   8c0a0:	00c6303a 	nor	r3,zero,r3
   8c0a4:	18003a1e 	bne	r3,zero,8c190 <__adddf3+0x614>
   8c0a8:	3463c83a 	sub	r17,r6,r17
   8c0ac:	4a07c83a 	sub	r3,r9,r8
   8c0b0:	344d803a 	cmpltu	r6,r6,r17
   8c0b4:	1991c83a 	sub	r8,r3,r6
   8c0b8:	1021883a 	mov	r16,r2
   8c0bc:	3825883a 	mov	r18,r7
   8c0c0:	003f0a06 	br	8bcec <rx_descriptor_end+0xfff8bc8c>
   8c0c4:	2023883a 	mov	r17,r4
   8c0c8:	003f0d06 	br	8bd00 <rx_descriptor_end+0xfff8bca0>
   8c0cc:	0081ffc4 	movi	r2,2047
   8c0d0:	80bf3f1e 	bne	r16,r2,8bdd0 <rx_descriptor_end+0xfff8bd70>
   8c0d4:	003ec806 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c0d8:	0005883a 	mov	r2,zero
   8c0dc:	003fb106 	br	8bfa4 <rx_descriptor_end+0xfff8bf44>
   8c0e0:	0007883a 	mov	r3,zero
   8c0e4:	003fbc06 	br	8bfd8 <rx_descriptor_end+0xfff8bf78>
   8c0e8:	4444b03a 	or	r2,r8,r17
   8c0ec:	8000871e 	bne	r16,zero,8c30c <__adddf3+0x790>
   8c0f0:	1000ba26 	beq	r2,zero,8c3dc <__adddf3+0x860>
   8c0f4:	4984b03a 	or	r2,r9,r6
   8c0f8:	103ebf26 	beq	r2,zero,8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c0fc:	8985883a 	add	r2,r17,r6
   8c100:	4247883a 	add	r3,r8,r9
   8c104:	1451803a 	cmpltu	r8,r2,r17
   8c108:	40d1883a 	add	r8,r8,r3
   8c10c:	40c0202c 	andhi	r3,r8,128
   8c110:	1023883a 	mov	r17,r2
   8c114:	183f1a26 	beq	r3,zero,8bd80 <rx_descriptor_end+0xfff8bd20>
   8c118:	00bfe034 	movhi	r2,65408
   8c11c:	10bfffc4 	addi	r2,r2,-1
   8c120:	2021883a 	mov	r16,r4
   8c124:	4090703a 	and	r8,r8,r2
   8c128:	003eb306 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c12c:	4444b03a 	or	r2,r8,r17
   8c130:	8000291e 	bne	r16,zero,8c1d8 <__adddf3+0x65c>
   8c134:	10004b1e 	bne	r2,zero,8c264 <__adddf3+0x6e8>
   8c138:	4990b03a 	or	r8,r9,r6
   8c13c:	40008b26 	beq	r8,zero,8c36c <__adddf3+0x7f0>
   8c140:	4811883a 	mov	r8,r9
   8c144:	3023883a 	mov	r17,r6
   8c148:	3825883a 	mov	r18,r7
   8c14c:	003eaa06 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c150:	1021883a 	mov	r16,r2
   8c154:	0011883a 	mov	r8,zero
   8c158:	0005883a 	mov	r2,zero
   8c15c:	003f0f06 	br	8bd9c <rx_descriptor_end+0xfff8bd3c>
   8c160:	217ff804 	addi	r5,r4,-32
   8c164:	00800804 	movi	r2,32
   8c168:	494ad83a 	srl	r5,r9,r5
   8c16c:	20807d26 	beq	r4,r2,8c364 <__adddf3+0x7e8>
   8c170:	00801004 	movi	r2,64
   8c174:	1109c83a 	sub	r4,r2,r4
   8c178:	4912983a 	sll	r9,r9,r4
   8c17c:	498cb03a 	or	r6,r9,r6
   8c180:	300cc03a 	cmpne	r6,r6,zero
   8c184:	298ab03a 	or	r5,r5,r6
   8c188:	0013883a 	mov	r9,zero
   8c18c:	003f1506 	br	8bde4 <rx_descriptor_end+0xfff8bd84>
   8c190:	0101ffc4 	movi	r4,2047
   8c194:	113f9a1e 	bne	r2,r4,8c000 <rx_descriptor_end+0xfff8bfa0>
   8c198:	4811883a 	mov	r8,r9
   8c19c:	3023883a 	mov	r17,r6
   8c1a0:	1021883a 	mov	r16,r2
   8c1a4:	3825883a 	mov	r18,r7
   8c1a8:	003e9306 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c1ac:	8000161e 	bne	r16,zero,8c208 <__adddf3+0x68c>
   8c1b0:	444ab03a 	or	r5,r8,r17
   8c1b4:	28005126 	beq	r5,zero,8c2fc <__adddf3+0x780>
   8c1b8:	0108303a 	nor	r4,zero,r4
   8c1bc:	20004d1e 	bne	r4,zero,8c2f4 <__adddf3+0x778>
   8c1c0:	89a3883a 	add	r17,r17,r6
   8c1c4:	4253883a 	add	r9,r8,r9
   8c1c8:	898d803a 	cmpltu	r6,r17,r6
   8c1cc:	3251883a 	add	r8,r6,r9
   8c1d0:	1021883a 	mov	r16,r2
   8c1d4:	003f0806 	br	8bdf8 <rx_descriptor_end+0xfff8bd98>
   8c1d8:	1000301e 	bne	r2,zero,8c29c <__adddf3+0x720>
   8c1dc:	4984b03a 	or	r2,r9,r6
   8c1e0:	10007126 	beq	r2,zero,8c3a8 <__adddf3+0x82c>
   8c1e4:	4811883a 	mov	r8,r9
   8c1e8:	3023883a 	mov	r17,r6
   8c1ec:	3825883a 	mov	r18,r7
   8c1f0:	0401ffc4 	movi	r16,2047
   8c1f4:	003e8006 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c1f8:	4462b03a 	or	r17,r8,r17
   8c1fc:	8822c03a 	cmpne	r17,r17,zero
   8c200:	0007883a 	mov	r3,zero
   8c204:	003f8b06 	br	8c034 <rx_descriptor_end+0xfff8bfd4>
   8c208:	0141ffc4 	movi	r5,2047
   8c20c:	11403b26 	beq	r2,r5,8c2fc <__adddf3+0x780>
   8c210:	0109c83a 	sub	r4,zero,r4
   8c214:	42002034 	orhi	r8,r8,128
   8c218:	01400e04 	movi	r5,56
   8c21c:	29006716 	blt	r5,r4,8c3bc <__adddf3+0x840>
   8c220:	014007c4 	movi	r5,31
   8c224:	29007016 	blt	r5,r4,8c3e8 <__adddf3+0x86c>
   8c228:	01400804 	movi	r5,32
   8c22c:	290bc83a 	sub	r5,r5,r4
   8c230:	4154983a 	sll	r10,r8,r5
   8c234:	890ed83a 	srl	r7,r17,r4
   8c238:	894a983a 	sll	r5,r17,r5
   8c23c:	4108d83a 	srl	r4,r8,r4
   8c240:	51e2b03a 	or	r17,r10,r7
   8c244:	280ac03a 	cmpne	r5,r5,zero
   8c248:	8962b03a 	or	r17,r17,r5
   8c24c:	89a3883a 	add	r17,r17,r6
   8c250:	2253883a 	add	r9,r4,r9
   8c254:	898d803a 	cmpltu	r6,r17,r6
   8c258:	3251883a 	add	r8,r6,r9
   8c25c:	1021883a 	mov	r16,r2
   8c260:	003ee506 	br	8bdf8 <rx_descriptor_end+0xfff8bd98>
   8c264:	4984b03a 	or	r2,r9,r6
   8c268:	103e6326 	beq	r2,zero,8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c26c:	8987c83a 	sub	r3,r17,r6
   8c270:	88c9803a 	cmpltu	r4,r17,r3
   8c274:	4245c83a 	sub	r2,r8,r9
   8c278:	1105c83a 	sub	r2,r2,r4
   8c27c:	1100202c 	andhi	r4,r2,128
   8c280:	203ebb26 	beq	r4,zero,8bd70 <rx_descriptor_end+0xfff8bd10>
   8c284:	3463c83a 	sub	r17,r6,r17
   8c288:	4a07c83a 	sub	r3,r9,r8
   8c28c:	344d803a 	cmpltu	r6,r6,r17
   8c290:	1991c83a 	sub	r8,r3,r6
   8c294:	3825883a 	mov	r18,r7
   8c298:	003e5706 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c29c:	4984b03a 	or	r2,r9,r6
   8c2a0:	10002e26 	beq	r2,zero,8c35c <__adddf3+0x7e0>
   8c2a4:	4004d0fa 	srli	r2,r8,3
   8c2a8:	8822d0fa 	srli	r17,r17,3
   8c2ac:	4010977a 	slli	r8,r8,29
   8c2b0:	10c0022c 	andhi	r3,r2,8
   8c2b4:	4462b03a 	or	r17,r8,r17
   8c2b8:	18000826 	beq	r3,zero,8c2dc <__adddf3+0x760>
   8c2bc:	4808d0fa 	srli	r4,r9,3
   8c2c0:	20c0022c 	andhi	r3,r4,8
   8c2c4:	1800051e 	bne	r3,zero,8c2dc <__adddf3+0x760>
   8c2c8:	300cd0fa 	srli	r6,r6,3
   8c2cc:	4806977a 	slli	r3,r9,29
   8c2d0:	2005883a 	mov	r2,r4
   8c2d4:	3825883a 	mov	r18,r7
   8c2d8:	19a2b03a 	or	r17,r3,r6
   8c2dc:	8810d77a 	srli	r8,r17,29
   8c2e0:	100490fa 	slli	r2,r2,3
   8c2e4:	882290fa 	slli	r17,r17,3
   8c2e8:	0401ffc4 	movi	r16,2047
   8c2ec:	4090b03a 	or	r8,r8,r2
   8c2f0:	003e4106 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c2f4:	0141ffc4 	movi	r5,2047
   8c2f8:	117fc71e 	bne	r2,r5,8c218 <rx_descriptor_end+0xfff8c1b8>
   8c2fc:	4811883a 	mov	r8,r9
   8c300:	3023883a 	mov	r17,r6
   8c304:	1021883a 	mov	r16,r2
   8c308:	003e3b06 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c30c:	10002f26 	beq	r2,zero,8c3cc <__adddf3+0x850>
   8c310:	4984b03a 	or	r2,r9,r6
   8c314:	10001126 	beq	r2,zero,8c35c <__adddf3+0x7e0>
   8c318:	4004d0fa 	srli	r2,r8,3
   8c31c:	8822d0fa 	srli	r17,r17,3
   8c320:	4010977a 	slli	r8,r8,29
   8c324:	10c0022c 	andhi	r3,r2,8
   8c328:	4462b03a 	or	r17,r8,r17
   8c32c:	183feb26 	beq	r3,zero,8c2dc <rx_descriptor_end+0xfff8c27c>
   8c330:	4808d0fa 	srli	r4,r9,3
   8c334:	20c0022c 	andhi	r3,r4,8
   8c338:	183fe81e 	bne	r3,zero,8c2dc <rx_descriptor_end+0xfff8c27c>
   8c33c:	300cd0fa 	srli	r6,r6,3
   8c340:	4806977a 	slli	r3,r9,29
   8c344:	2005883a 	mov	r2,r4
   8c348:	19a2b03a 	or	r17,r3,r6
   8c34c:	003fe306 	br	8c2dc <rx_descriptor_end+0xfff8c27c>
   8c350:	0011883a 	mov	r8,zero
   8c354:	0005883a 	mov	r2,zero
   8c358:	003e3f06 	br	8bc58 <rx_descriptor_end+0xfff8bbf8>
   8c35c:	0401ffc4 	movi	r16,2047
   8c360:	003e2506 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c364:	0013883a 	mov	r9,zero
   8c368:	003f8406 	br	8c17c <rx_descriptor_end+0xfff8c11c>
   8c36c:	0005883a 	mov	r2,zero
   8c370:	0007883a 	mov	r3,zero
   8c374:	003e8906 	br	8bd9c <rx_descriptor_end+0xfff8bd3c>
   8c378:	197ff804 	addi	r5,r3,-32
   8c37c:	01000804 	movi	r4,32
   8c380:	414ad83a 	srl	r5,r8,r5
   8c384:	19002426 	beq	r3,r4,8c418 <__adddf3+0x89c>
   8c388:	01001004 	movi	r4,64
   8c38c:	20c7c83a 	sub	r3,r4,r3
   8c390:	40c6983a 	sll	r3,r8,r3
   8c394:	1c46b03a 	or	r3,r3,r17
   8c398:	1806c03a 	cmpne	r3,r3,zero
   8c39c:	28e2b03a 	or	r17,r5,r3
   8c3a0:	0007883a 	mov	r3,zero
   8c3a4:	003f2306 	br	8c034 <rx_descriptor_end+0xfff8bfd4>
   8c3a8:	0007883a 	mov	r3,zero
   8c3ac:	5811883a 	mov	r8,r11
   8c3b0:	00bfffc4 	movi	r2,-1
   8c3b4:	0401ffc4 	movi	r16,2047
   8c3b8:	003e7806 	br	8bd9c <rx_descriptor_end+0xfff8bd3c>
   8c3bc:	4462b03a 	or	r17,r8,r17
   8c3c0:	8822c03a 	cmpne	r17,r17,zero
   8c3c4:	0009883a 	mov	r4,zero
   8c3c8:	003fa006 	br	8c24c <rx_descriptor_end+0xfff8c1ec>
   8c3cc:	4811883a 	mov	r8,r9
   8c3d0:	3023883a 	mov	r17,r6
   8c3d4:	0401ffc4 	movi	r16,2047
   8c3d8:	003e0706 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c3dc:	4811883a 	mov	r8,r9
   8c3e0:	3023883a 	mov	r17,r6
   8c3e4:	003e0406 	br	8bbf8 <rx_descriptor_end+0xfff8bb98>
   8c3e8:	21fff804 	addi	r7,r4,-32
   8c3ec:	01400804 	movi	r5,32
   8c3f0:	41ced83a 	srl	r7,r8,r7
   8c3f4:	21400a26 	beq	r4,r5,8c420 <__adddf3+0x8a4>
   8c3f8:	01401004 	movi	r5,64
   8c3fc:	2909c83a 	sub	r4,r5,r4
   8c400:	4108983a 	sll	r4,r8,r4
   8c404:	2448b03a 	or	r4,r4,r17
   8c408:	2008c03a 	cmpne	r4,r4,zero
   8c40c:	3922b03a 	or	r17,r7,r4
   8c410:	0009883a 	mov	r4,zero
   8c414:	003f8d06 	br	8c24c <rx_descriptor_end+0xfff8c1ec>
   8c418:	0007883a 	mov	r3,zero
   8c41c:	003fdd06 	br	8c394 <rx_descriptor_end+0xfff8c334>
   8c420:	0009883a 	mov	r4,zero
   8c424:	003ff706 	br	8c404 <rx_descriptor_end+0xfff8c3a4>

0008c428 <__divdf3>:
   8c428:	defff204 	addi	sp,sp,-56
   8c42c:	dd400915 	stw	r21,36(sp)
   8c430:	282ad53a 	srli	r21,r5,20
   8c434:	dd000815 	stw	r20,32(sp)
   8c438:	2828d7fa 	srli	r20,r5,31
   8c43c:	dc000415 	stw	r16,16(sp)
   8c440:	04000434 	movhi	r16,16
   8c444:	df000c15 	stw	fp,48(sp)
   8c448:	843fffc4 	addi	r16,r16,-1
   8c44c:	dfc00d15 	stw	ra,52(sp)
   8c450:	ddc00b15 	stw	r23,44(sp)
   8c454:	dd800a15 	stw	r22,40(sp)
   8c458:	dcc00715 	stw	r19,28(sp)
   8c45c:	dc800615 	stw	r18,24(sp)
   8c460:	dc400515 	stw	r17,20(sp)
   8c464:	ad41ffcc 	andi	r21,r21,2047
   8c468:	2c20703a 	and	r16,r5,r16
   8c46c:	a7003fcc 	andi	fp,r20,255
   8c470:	a8006126 	beq	r21,zero,8c5f8 <__divdf3+0x1d0>
   8c474:	0081ffc4 	movi	r2,2047
   8c478:	2025883a 	mov	r18,r4
   8c47c:	a8803726 	beq	r21,r2,8c55c <__divdf3+0x134>
   8c480:	80800434 	orhi	r2,r16,16
   8c484:	100490fa 	slli	r2,r2,3
   8c488:	2020d77a 	srli	r16,r4,29
   8c48c:	202490fa 	slli	r18,r4,3
   8c490:	ad7f0044 	addi	r21,r21,-1023
   8c494:	80a0b03a 	or	r16,r16,r2
   8c498:	0027883a 	mov	r19,zero
   8c49c:	0013883a 	mov	r9,zero
   8c4a0:	3804d53a 	srli	r2,r7,20
   8c4a4:	382cd7fa 	srli	r22,r7,31
   8c4a8:	04400434 	movhi	r17,16
   8c4ac:	8c7fffc4 	addi	r17,r17,-1
   8c4b0:	1081ffcc 	andi	r2,r2,2047
   8c4b4:	3011883a 	mov	r8,r6
   8c4b8:	3c62703a 	and	r17,r7,r17
   8c4bc:	b5c03fcc 	andi	r23,r22,255
   8c4c0:	10006c26 	beq	r2,zero,8c674 <__divdf3+0x24c>
   8c4c4:	00c1ffc4 	movi	r3,2047
   8c4c8:	10c06426 	beq	r2,r3,8c65c <__divdf3+0x234>
   8c4cc:	88c00434 	orhi	r3,r17,16
   8c4d0:	180690fa 	slli	r3,r3,3
   8c4d4:	3022d77a 	srli	r17,r6,29
   8c4d8:	301090fa 	slli	r8,r6,3
   8c4dc:	10bf0044 	addi	r2,r2,-1023
   8c4e0:	88e2b03a 	or	r17,r17,r3
   8c4e4:	000f883a 	mov	r7,zero
   8c4e8:	a58cf03a 	xor	r6,r20,r22
   8c4ec:	3cc8b03a 	or	r4,r7,r19
   8c4f0:	a8abc83a 	sub	r21,r21,r2
   8c4f4:	008003c4 	movi	r2,15
   8c4f8:	3007883a 	mov	r3,r6
   8c4fc:	34c03fcc 	andi	r19,r6,255
   8c500:	11009036 	bltu	r2,r4,8c744 <__divdf3+0x31c>
   8c504:	200890ba 	slli	r4,r4,2
   8c508:	00800274 	movhi	r2,9
   8c50c:	10b14704 	addi	r2,r2,-15076
   8c510:	2089883a 	add	r4,r4,r2
   8c514:	20800017 	ldw	r2,0(r4)
   8c518:	1000683a 	jmp	r2
   8c51c:	0008c744 	movi	zero,8989
   8c520:	0008c594 	movui	zero,8982
   8c524:	0008c734 	movhi	zero,8988
   8c528:	0008c588 	cmpgei	zero,zero,8982
   8c52c:	0008c734 	movhi	zero,8988
   8c530:	0008c708 	cmpgei	zero,zero,8988
   8c534:	0008c734 	movhi	zero,8988
   8c538:	0008c588 	cmpgei	zero,zero,8982
   8c53c:	0008c594 	movui	zero,8982
   8c540:	0008c594 	movui	zero,8982
   8c544:	0008c708 	cmpgei	zero,zero,8988
   8c548:	0008c588 	cmpgei	zero,zero,8982
   8c54c:	0008c578 	rdprs	zero,zero,8981
   8c550:	0008c578 	rdprs	zero,zero,8981
   8c554:	0008c578 	rdprs	zero,zero,8981
   8c558:	0008ca28 	cmpgeui	zero,zero,9000
   8c55c:	2404b03a 	or	r2,r4,r16
   8c560:	1000661e 	bne	r2,zero,8c6fc <__divdf3+0x2d4>
   8c564:	04c00204 	movi	r19,8
   8c568:	0021883a 	mov	r16,zero
   8c56c:	0025883a 	mov	r18,zero
   8c570:	02400084 	movi	r9,2
   8c574:	003fca06 	br	8c4a0 <rx_descriptor_end+0xfff8c440>
   8c578:	8023883a 	mov	r17,r16
   8c57c:	9011883a 	mov	r8,r18
   8c580:	e02f883a 	mov	r23,fp
   8c584:	480f883a 	mov	r7,r9
   8c588:	00800084 	movi	r2,2
   8c58c:	3881311e 	bne	r7,r2,8ca54 <__divdf3+0x62c>
   8c590:	b827883a 	mov	r19,r23
   8c594:	98c0004c 	andi	r3,r19,1
   8c598:	0081ffc4 	movi	r2,2047
   8c59c:	000b883a 	mov	r5,zero
   8c5a0:	0025883a 	mov	r18,zero
   8c5a4:	1004953a 	slli	r2,r2,20
   8c5a8:	18c03fcc 	andi	r3,r3,255
   8c5ac:	04400434 	movhi	r17,16
   8c5b0:	8c7fffc4 	addi	r17,r17,-1
   8c5b4:	180697fa 	slli	r3,r3,31
   8c5b8:	2c4a703a 	and	r5,r5,r17
   8c5bc:	288ab03a 	or	r5,r5,r2
   8c5c0:	28c6b03a 	or	r3,r5,r3
   8c5c4:	9005883a 	mov	r2,r18
   8c5c8:	dfc00d17 	ldw	ra,52(sp)
   8c5cc:	df000c17 	ldw	fp,48(sp)
   8c5d0:	ddc00b17 	ldw	r23,44(sp)
   8c5d4:	dd800a17 	ldw	r22,40(sp)
   8c5d8:	dd400917 	ldw	r21,36(sp)
   8c5dc:	dd000817 	ldw	r20,32(sp)
   8c5e0:	dcc00717 	ldw	r19,28(sp)
   8c5e4:	dc800617 	ldw	r18,24(sp)
   8c5e8:	dc400517 	ldw	r17,20(sp)
   8c5ec:	dc000417 	ldw	r16,16(sp)
   8c5f0:	dec00e04 	addi	sp,sp,56
   8c5f4:	f800283a 	ret
   8c5f8:	2404b03a 	or	r2,r4,r16
   8c5fc:	2027883a 	mov	r19,r4
   8c600:	10003926 	beq	r2,zero,8c6e8 <__divdf3+0x2c0>
   8c604:	80012e26 	beq	r16,zero,8cac0 <__divdf3+0x698>
   8c608:	8009883a 	mov	r4,r16
   8c60c:	d9800315 	stw	r6,12(sp)
   8c610:	d9c00215 	stw	r7,8(sp)
   8c614:	008e1800 	call	8e180 <__clzsi2>
   8c618:	d9800317 	ldw	r6,12(sp)
   8c61c:	d9c00217 	ldw	r7,8(sp)
   8c620:	113ffd44 	addi	r4,r2,-11
   8c624:	00c00704 	movi	r3,28
   8c628:	19012116 	blt	r3,r4,8cab0 <__divdf3+0x688>
   8c62c:	00c00744 	movi	r3,29
   8c630:	147ffe04 	addi	r17,r2,-8
   8c634:	1907c83a 	sub	r3,r3,r4
   8c638:	8460983a 	sll	r16,r16,r17
   8c63c:	98c6d83a 	srl	r3,r19,r3
   8c640:	9c64983a 	sll	r18,r19,r17
   8c644:	1c20b03a 	or	r16,r3,r16
   8c648:	1080fcc4 	addi	r2,r2,1011
   8c64c:	00abc83a 	sub	r21,zero,r2
   8c650:	0027883a 	mov	r19,zero
   8c654:	0013883a 	mov	r9,zero
   8c658:	003f9106 	br	8c4a0 <rx_descriptor_end+0xfff8c440>
   8c65c:	3446b03a 	or	r3,r6,r17
   8c660:	18001f1e 	bne	r3,zero,8c6e0 <__divdf3+0x2b8>
   8c664:	0023883a 	mov	r17,zero
   8c668:	0011883a 	mov	r8,zero
   8c66c:	01c00084 	movi	r7,2
   8c670:	003f9d06 	br	8c4e8 <rx_descriptor_end+0xfff8c488>
   8c674:	3446b03a 	or	r3,r6,r17
   8c678:	18001526 	beq	r3,zero,8c6d0 <__divdf3+0x2a8>
   8c67c:	88011b26 	beq	r17,zero,8caec <__divdf3+0x6c4>
   8c680:	8809883a 	mov	r4,r17
   8c684:	d9800315 	stw	r6,12(sp)
   8c688:	da400115 	stw	r9,4(sp)
   8c68c:	008e1800 	call	8e180 <__clzsi2>
   8c690:	d9800317 	ldw	r6,12(sp)
   8c694:	da400117 	ldw	r9,4(sp)
   8c698:	113ffd44 	addi	r4,r2,-11
   8c69c:	00c00704 	movi	r3,28
   8c6a0:	19010e16 	blt	r3,r4,8cadc <__divdf3+0x6b4>
   8c6a4:	00c00744 	movi	r3,29
   8c6a8:	123ffe04 	addi	r8,r2,-8
   8c6ac:	1907c83a 	sub	r3,r3,r4
   8c6b0:	8a22983a 	sll	r17,r17,r8
   8c6b4:	30c6d83a 	srl	r3,r6,r3
   8c6b8:	3210983a 	sll	r8,r6,r8
   8c6bc:	1c62b03a 	or	r17,r3,r17
   8c6c0:	1080fcc4 	addi	r2,r2,1011
   8c6c4:	0085c83a 	sub	r2,zero,r2
   8c6c8:	000f883a 	mov	r7,zero
   8c6cc:	003f8606 	br	8c4e8 <rx_descriptor_end+0xfff8c488>
   8c6d0:	0023883a 	mov	r17,zero
   8c6d4:	0011883a 	mov	r8,zero
   8c6d8:	01c00044 	movi	r7,1
   8c6dc:	003f8206 	br	8c4e8 <rx_descriptor_end+0xfff8c488>
   8c6e0:	01c000c4 	movi	r7,3
   8c6e4:	003f8006 	br	8c4e8 <rx_descriptor_end+0xfff8c488>
   8c6e8:	04c00104 	movi	r19,4
   8c6ec:	0021883a 	mov	r16,zero
   8c6f0:	0025883a 	mov	r18,zero
   8c6f4:	02400044 	movi	r9,1
   8c6f8:	003f6906 	br	8c4a0 <rx_descriptor_end+0xfff8c440>
   8c6fc:	04c00304 	movi	r19,12
   8c700:	024000c4 	movi	r9,3
   8c704:	003f6606 	br	8c4a0 <rx_descriptor_end+0xfff8c440>
   8c708:	01400434 	movhi	r5,16
   8c70c:	0007883a 	mov	r3,zero
   8c710:	297fffc4 	addi	r5,r5,-1
   8c714:	04bfffc4 	movi	r18,-1
   8c718:	0081ffc4 	movi	r2,2047
   8c71c:	003fa106 	br	8c5a4 <rx_descriptor_end+0xfff8c544>
   8c720:	00c00044 	movi	r3,1
   8c724:	1887c83a 	sub	r3,r3,r2
   8c728:	01000e04 	movi	r4,56
   8c72c:	20c1210e 	bge	r4,r3,8cbb4 <__divdf3+0x78c>
   8c730:	98c0004c 	andi	r3,r19,1
   8c734:	0005883a 	mov	r2,zero
   8c738:	000b883a 	mov	r5,zero
   8c73c:	0025883a 	mov	r18,zero
   8c740:	003f9806 	br	8c5a4 <rx_descriptor_end+0xfff8c544>
   8c744:	8c00fd36 	bltu	r17,r16,8cb3c <__divdf3+0x714>
   8c748:	8440fb26 	beq	r16,r17,8cb38 <__divdf3+0x710>
   8c74c:	8007883a 	mov	r3,r16
   8c750:	ad7fffc4 	addi	r21,r21,-1
   8c754:	0021883a 	mov	r16,zero
   8c758:	4004d63a 	srli	r2,r8,24
   8c75c:	8822923a 	slli	r17,r17,8
   8c760:	1809883a 	mov	r4,r3
   8c764:	402c923a 	slli	r22,r8,8
   8c768:	88b8b03a 	or	fp,r17,r2
   8c76c:	e028d43a 	srli	r20,fp,16
   8c770:	d8c00015 	stw	r3,0(sp)
   8c774:	e5ffffcc 	andi	r23,fp,65535
   8c778:	a00b883a 	mov	r5,r20
   8c77c:	008bac00 	call	8bac0 <__udivsi3>
   8c780:	d8c00017 	ldw	r3,0(sp)
   8c784:	a00b883a 	mov	r5,r20
   8c788:	d8800315 	stw	r2,12(sp)
   8c78c:	1809883a 	mov	r4,r3
   8c790:	008bb240 	call	8bb24 <__umodsi3>
   8c794:	d9800317 	ldw	r6,12(sp)
   8c798:	1006943a 	slli	r3,r2,16
   8c79c:	9004d43a 	srli	r2,r18,16
   8c7a0:	b9a3383a 	mul	r17,r23,r6
   8c7a4:	10c4b03a 	or	r2,r2,r3
   8c7a8:	1440062e 	bgeu	r2,r17,8c7c4 <__divdf3+0x39c>
   8c7ac:	1705883a 	add	r2,r2,fp
   8c7b0:	30ffffc4 	addi	r3,r6,-1
   8c7b4:	1700ee36 	bltu	r2,fp,8cb70 <__divdf3+0x748>
   8c7b8:	1440ed2e 	bgeu	r2,r17,8cb70 <__divdf3+0x748>
   8c7bc:	31bfff84 	addi	r6,r6,-2
   8c7c0:	1705883a 	add	r2,r2,fp
   8c7c4:	1463c83a 	sub	r17,r2,r17
   8c7c8:	a00b883a 	mov	r5,r20
   8c7cc:	8809883a 	mov	r4,r17
   8c7d0:	d9800315 	stw	r6,12(sp)
   8c7d4:	008bac00 	call	8bac0 <__udivsi3>
   8c7d8:	a00b883a 	mov	r5,r20
   8c7dc:	8809883a 	mov	r4,r17
   8c7e0:	d8800215 	stw	r2,8(sp)
   8c7e4:	008bb240 	call	8bb24 <__umodsi3>
   8c7e8:	d9c00217 	ldw	r7,8(sp)
   8c7ec:	1004943a 	slli	r2,r2,16
   8c7f0:	94bfffcc 	andi	r18,r18,65535
   8c7f4:	b9d1383a 	mul	r8,r23,r7
   8c7f8:	90a4b03a 	or	r18,r18,r2
   8c7fc:	d9800317 	ldw	r6,12(sp)
   8c800:	9200062e 	bgeu	r18,r8,8c81c <__divdf3+0x3f4>
   8c804:	9725883a 	add	r18,r18,fp
   8c808:	38bfffc4 	addi	r2,r7,-1
   8c80c:	9700d636 	bltu	r18,fp,8cb68 <__divdf3+0x740>
   8c810:	9200d52e 	bgeu	r18,r8,8cb68 <__divdf3+0x740>
   8c814:	39ffff84 	addi	r7,r7,-2
   8c818:	9725883a 	add	r18,r18,fp
   8c81c:	3004943a 	slli	r2,r6,16
   8c820:	b012d43a 	srli	r9,r22,16
   8c824:	b1bfffcc 	andi	r6,r22,65535
   8c828:	11e2b03a 	or	r17,r2,r7
   8c82c:	8806d43a 	srli	r3,r17,16
   8c830:	893fffcc 	andi	r4,r17,65535
   8c834:	218b383a 	mul	r5,r4,r6
   8c838:	30c5383a 	mul	r2,r6,r3
   8c83c:	2249383a 	mul	r4,r4,r9
   8c840:	280ed43a 	srli	r7,r5,16
   8c844:	9225c83a 	sub	r18,r18,r8
   8c848:	2089883a 	add	r4,r4,r2
   8c84c:	3909883a 	add	r4,r7,r4
   8c850:	1a47383a 	mul	r3,r3,r9
   8c854:	2080022e 	bgeu	r4,r2,8c860 <__divdf3+0x438>
   8c858:	00800074 	movhi	r2,1
   8c85c:	1887883a 	add	r3,r3,r2
   8c860:	2004d43a 	srli	r2,r4,16
   8c864:	2008943a 	slli	r4,r4,16
   8c868:	297fffcc 	andi	r5,r5,65535
   8c86c:	10c7883a 	add	r3,r2,r3
   8c870:	2149883a 	add	r4,r4,r5
   8c874:	90c0a536 	bltu	r18,r3,8cb0c <__divdf3+0x6e4>
   8c878:	90c0bf26 	beq	r18,r3,8cb78 <__divdf3+0x750>
   8c87c:	90c7c83a 	sub	r3,r18,r3
   8c880:	810fc83a 	sub	r7,r16,r4
   8c884:	81e5803a 	cmpltu	r18,r16,r7
   8c888:	1ca5c83a 	sub	r18,r3,r18
   8c88c:	e480c126 	beq	fp,r18,8cb94 <__divdf3+0x76c>
   8c890:	a00b883a 	mov	r5,r20
   8c894:	9009883a 	mov	r4,r18
   8c898:	d9800315 	stw	r6,12(sp)
   8c89c:	d9c00215 	stw	r7,8(sp)
   8c8a0:	da400115 	stw	r9,4(sp)
   8c8a4:	008bac00 	call	8bac0 <__udivsi3>
   8c8a8:	a00b883a 	mov	r5,r20
   8c8ac:	9009883a 	mov	r4,r18
   8c8b0:	d8800015 	stw	r2,0(sp)
   8c8b4:	008bb240 	call	8bb24 <__umodsi3>
   8c8b8:	d9c00217 	ldw	r7,8(sp)
   8c8bc:	da000017 	ldw	r8,0(sp)
   8c8c0:	1006943a 	slli	r3,r2,16
   8c8c4:	3804d43a 	srli	r2,r7,16
   8c8c8:	ba21383a 	mul	r16,r23,r8
   8c8cc:	d9800317 	ldw	r6,12(sp)
   8c8d0:	10c4b03a 	or	r2,r2,r3
   8c8d4:	da400117 	ldw	r9,4(sp)
   8c8d8:	1400062e 	bgeu	r2,r16,8c8f4 <__divdf3+0x4cc>
   8c8dc:	1705883a 	add	r2,r2,fp
   8c8e0:	40ffffc4 	addi	r3,r8,-1
   8c8e4:	1700ad36 	bltu	r2,fp,8cb9c <__divdf3+0x774>
   8c8e8:	1400ac2e 	bgeu	r2,r16,8cb9c <__divdf3+0x774>
   8c8ec:	423fff84 	addi	r8,r8,-2
   8c8f0:	1705883a 	add	r2,r2,fp
   8c8f4:	1421c83a 	sub	r16,r2,r16
   8c8f8:	a00b883a 	mov	r5,r20
   8c8fc:	8009883a 	mov	r4,r16
   8c900:	d9800315 	stw	r6,12(sp)
   8c904:	d9c00215 	stw	r7,8(sp)
   8c908:	da000015 	stw	r8,0(sp)
   8c90c:	da400115 	stw	r9,4(sp)
   8c910:	008bac00 	call	8bac0 <__udivsi3>
   8c914:	8009883a 	mov	r4,r16
   8c918:	a00b883a 	mov	r5,r20
   8c91c:	1025883a 	mov	r18,r2
   8c920:	008bb240 	call	8bb24 <__umodsi3>
   8c924:	d9c00217 	ldw	r7,8(sp)
   8c928:	1004943a 	slli	r2,r2,16
   8c92c:	bcaf383a 	mul	r23,r23,r18
   8c930:	393fffcc 	andi	r4,r7,65535
   8c934:	2088b03a 	or	r4,r4,r2
   8c938:	d9800317 	ldw	r6,12(sp)
   8c93c:	da000017 	ldw	r8,0(sp)
   8c940:	da400117 	ldw	r9,4(sp)
   8c944:	25c0062e 	bgeu	r4,r23,8c960 <__divdf3+0x538>
   8c948:	2709883a 	add	r4,r4,fp
   8c94c:	90bfffc4 	addi	r2,r18,-1
   8c950:	27009436 	bltu	r4,fp,8cba4 <__divdf3+0x77c>
   8c954:	25c0932e 	bgeu	r4,r23,8cba4 <__divdf3+0x77c>
   8c958:	94bfff84 	addi	r18,r18,-2
   8c95c:	2709883a 	add	r4,r4,fp
   8c960:	4004943a 	slli	r2,r8,16
   8c964:	25efc83a 	sub	r23,r4,r23
   8c968:	1490b03a 	or	r8,r2,r18
   8c96c:	4008d43a 	srli	r4,r8,16
   8c970:	40ffffcc 	andi	r3,r8,65535
   8c974:	30c5383a 	mul	r2,r6,r3
   8c978:	1a47383a 	mul	r3,r3,r9
   8c97c:	310d383a 	mul	r6,r6,r4
   8c980:	100ad43a 	srli	r5,r2,16
   8c984:	4913383a 	mul	r9,r9,r4
   8c988:	1987883a 	add	r3,r3,r6
   8c98c:	28c7883a 	add	r3,r5,r3
   8c990:	1980022e 	bgeu	r3,r6,8c99c <__divdf3+0x574>
   8c994:	01000074 	movhi	r4,1
   8c998:	4913883a 	add	r9,r9,r4
   8c99c:	1808d43a 	srli	r4,r3,16
   8c9a0:	1806943a 	slli	r3,r3,16
   8c9a4:	10bfffcc 	andi	r2,r2,65535
   8c9a8:	2253883a 	add	r9,r4,r9
   8c9ac:	1887883a 	add	r3,r3,r2
   8c9b0:	ba403836 	bltu	r23,r9,8ca94 <__divdf3+0x66c>
   8c9b4:	ba403626 	beq	r23,r9,8ca90 <__divdf3+0x668>
   8c9b8:	42000054 	ori	r8,r8,1
   8c9bc:	a880ffc4 	addi	r2,r21,1023
   8c9c0:	00bf570e 	bge	zero,r2,8c720 <rx_descriptor_end+0xfff8c6c0>
   8c9c4:	40c001cc 	andi	r3,r8,7
   8c9c8:	18000726 	beq	r3,zero,8c9e8 <__divdf3+0x5c0>
   8c9cc:	40c003cc 	andi	r3,r8,15
   8c9d0:	01000104 	movi	r4,4
   8c9d4:	19000426 	beq	r3,r4,8c9e8 <__divdf3+0x5c0>
   8c9d8:	4107883a 	add	r3,r8,r4
   8c9dc:	1a11803a 	cmpltu	r8,r3,r8
   8c9e0:	8a23883a 	add	r17,r17,r8
   8c9e4:	1811883a 	mov	r8,r3
   8c9e8:	88c0402c 	andhi	r3,r17,256
   8c9ec:	18000426 	beq	r3,zero,8ca00 <__divdf3+0x5d8>
   8c9f0:	00ffc034 	movhi	r3,65280
   8c9f4:	18ffffc4 	addi	r3,r3,-1
   8c9f8:	a8810004 	addi	r2,r21,1024
   8c9fc:	88e2703a 	and	r17,r17,r3
   8ca00:	00c1ff84 	movi	r3,2046
   8ca04:	18bee316 	blt	r3,r2,8c594 <rx_descriptor_end+0xfff8c534>
   8ca08:	8824977a 	slli	r18,r17,29
   8ca0c:	4010d0fa 	srli	r8,r8,3
   8ca10:	8822927a 	slli	r17,r17,9
   8ca14:	1081ffcc 	andi	r2,r2,2047
   8ca18:	9224b03a 	or	r18,r18,r8
   8ca1c:	880ad33a 	srli	r5,r17,12
   8ca20:	98c0004c 	andi	r3,r19,1
   8ca24:	003edf06 	br	8c5a4 <rx_descriptor_end+0xfff8c544>
   8ca28:	8080022c 	andhi	r2,r16,8
   8ca2c:	10001226 	beq	r2,zero,8ca78 <__divdf3+0x650>
   8ca30:	8880022c 	andhi	r2,r17,8
   8ca34:	1000101e 	bne	r2,zero,8ca78 <__divdf3+0x650>
   8ca38:	00800434 	movhi	r2,16
   8ca3c:	89400234 	orhi	r5,r17,8
   8ca40:	10bfffc4 	addi	r2,r2,-1
   8ca44:	b007883a 	mov	r3,r22
   8ca48:	288a703a 	and	r5,r5,r2
   8ca4c:	4025883a 	mov	r18,r8
   8ca50:	003f3106 	br	8c718 <rx_descriptor_end+0xfff8c6b8>
   8ca54:	008000c4 	movi	r2,3
   8ca58:	3880a626 	beq	r7,r2,8ccf4 <__divdf3+0x8cc>
   8ca5c:	00800044 	movi	r2,1
   8ca60:	3880521e 	bne	r7,r2,8cbac <__divdf3+0x784>
   8ca64:	b807883a 	mov	r3,r23
   8ca68:	0005883a 	mov	r2,zero
   8ca6c:	000b883a 	mov	r5,zero
   8ca70:	0025883a 	mov	r18,zero
   8ca74:	003ecb06 	br	8c5a4 <rx_descriptor_end+0xfff8c544>
   8ca78:	00800434 	movhi	r2,16
   8ca7c:	81400234 	orhi	r5,r16,8
   8ca80:	10bfffc4 	addi	r2,r2,-1
   8ca84:	a007883a 	mov	r3,r20
   8ca88:	288a703a 	and	r5,r5,r2
   8ca8c:	003f2206 	br	8c718 <rx_descriptor_end+0xfff8c6b8>
   8ca90:	183fca26 	beq	r3,zero,8c9bc <rx_descriptor_end+0xfff8c95c>
   8ca94:	e5ef883a 	add	r23,fp,r23
   8ca98:	40bfffc4 	addi	r2,r8,-1
   8ca9c:	bf00392e 	bgeu	r23,fp,8cb84 <__divdf3+0x75c>
   8caa0:	1011883a 	mov	r8,r2
   8caa4:	ba7fc41e 	bne	r23,r9,8c9b8 <rx_descriptor_end+0xfff8c958>
   8caa8:	b0ffc31e 	bne	r22,r3,8c9b8 <rx_descriptor_end+0xfff8c958>
   8caac:	003fc306 	br	8c9bc <rx_descriptor_end+0xfff8c95c>
   8cab0:	143ff604 	addi	r16,r2,-40
   8cab4:	9c20983a 	sll	r16,r19,r16
   8cab8:	0025883a 	mov	r18,zero
   8cabc:	003ee206 	br	8c648 <rx_descriptor_end+0xfff8c5e8>
   8cac0:	d9800315 	stw	r6,12(sp)
   8cac4:	d9c00215 	stw	r7,8(sp)
   8cac8:	008e1800 	call	8e180 <__clzsi2>
   8cacc:	10800804 	addi	r2,r2,32
   8cad0:	d9c00217 	ldw	r7,8(sp)
   8cad4:	d9800317 	ldw	r6,12(sp)
   8cad8:	003ed106 	br	8c620 <rx_descriptor_end+0xfff8c5c0>
   8cadc:	147ff604 	addi	r17,r2,-40
   8cae0:	3462983a 	sll	r17,r6,r17
   8cae4:	0011883a 	mov	r8,zero
   8cae8:	003ef506 	br	8c6c0 <rx_descriptor_end+0xfff8c660>
   8caec:	3009883a 	mov	r4,r6
   8caf0:	d9800315 	stw	r6,12(sp)
   8caf4:	da400115 	stw	r9,4(sp)
   8caf8:	008e1800 	call	8e180 <__clzsi2>
   8cafc:	10800804 	addi	r2,r2,32
   8cb00:	da400117 	ldw	r9,4(sp)
   8cb04:	d9800317 	ldw	r6,12(sp)
   8cb08:	003ee306 	br	8c698 <rx_descriptor_end+0xfff8c638>
   8cb0c:	85a1883a 	add	r16,r16,r22
   8cb10:	8585803a 	cmpltu	r2,r16,r22
   8cb14:	1705883a 	add	r2,r2,fp
   8cb18:	14a5883a 	add	r18,r2,r18
   8cb1c:	88bfffc4 	addi	r2,r17,-1
   8cb20:	e4800c2e 	bgeu	fp,r18,8cb54 <__divdf3+0x72c>
   8cb24:	90c03e36 	bltu	r18,r3,8cc20 <__divdf3+0x7f8>
   8cb28:	1c806926 	beq	r3,r18,8ccd0 <__divdf3+0x8a8>
   8cb2c:	90c7c83a 	sub	r3,r18,r3
   8cb30:	1023883a 	mov	r17,r2
   8cb34:	003f5206 	br	8c880 <rx_descriptor_end+0xfff8c820>
   8cb38:	923f0436 	bltu	r18,r8,8c74c <rx_descriptor_end+0xfff8c6ec>
   8cb3c:	800897fa 	slli	r4,r16,31
   8cb40:	9004d07a 	srli	r2,r18,1
   8cb44:	8006d07a 	srli	r3,r16,1
   8cb48:	902097fa 	slli	r16,r18,31
   8cb4c:	20a4b03a 	or	r18,r4,r2
   8cb50:	003f0106 	br	8c758 <rx_descriptor_end+0xfff8c6f8>
   8cb54:	e4bff51e 	bne	fp,r18,8cb2c <rx_descriptor_end+0xfff8cacc>
   8cb58:	85bff22e 	bgeu	r16,r22,8cb24 <rx_descriptor_end+0xfff8cac4>
   8cb5c:	e0c7c83a 	sub	r3,fp,r3
   8cb60:	1023883a 	mov	r17,r2
   8cb64:	003f4606 	br	8c880 <rx_descriptor_end+0xfff8c820>
   8cb68:	100f883a 	mov	r7,r2
   8cb6c:	003f2b06 	br	8c81c <rx_descriptor_end+0xfff8c7bc>
   8cb70:	180d883a 	mov	r6,r3
   8cb74:	003f1306 	br	8c7c4 <rx_descriptor_end+0xfff8c764>
   8cb78:	813fe436 	bltu	r16,r4,8cb0c <rx_descriptor_end+0xfff8caac>
   8cb7c:	0007883a 	mov	r3,zero
   8cb80:	003f3f06 	br	8c880 <rx_descriptor_end+0xfff8c820>
   8cb84:	ba402c36 	bltu	r23,r9,8cc38 <__divdf3+0x810>
   8cb88:	4dc05426 	beq	r9,r23,8ccdc <__divdf3+0x8b4>
   8cb8c:	1011883a 	mov	r8,r2
   8cb90:	003f8906 	br	8c9b8 <rx_descriptor_end+0xfff8c958>
   8cb94:	023fffc4 	movi	r8,-1
   8cb98:	003f8806 	br	8c9bc <rx_descriptor_end+0xfff8c95c>
   8cb9c:	1811883a 	mov	r8,r3
   8cba0:	003f5406 	br	8c8f4 <rx_descriptor_end+0xfff8c894>
   8cba4:	1025883a 	mov	r18,r2
   8cba8:	003f6d06 	br	8c960 <rx_descriptor_end+0xfff8c900>
   8cbac:	b827883a 	mov	r19,r23
   8cbb0:	003f8206 	br	8c9bc <rx_descriptor_end+0xfff8c95c>
   8cbb4:	010007c4 	movi	r4,31
   8cbb8:	20c02616 	blt	r4,r3,8cc54 <__divdf3+0x82c>
   8cbbc:	00800804 	movi	r2,32
   8cbc0:	10c5c83a 	sub	r2,r2,r3
   8cbc4:	888a983a 	sll	r5,r17,r2
   8cbc8:	40c8d83a 	srl	r4,r8,r3
   8cbcc:	4084983a 	sll	r2,r8,r2
   8cbd0:	88e2d83a 	srl	r17,r17,r3
   8cbd4:	2906b03a 	or	r3,r5,r4
   8cbd8:	1004c03a 	cmpne	r2,r2,zero
   8cbdc:	1886b03a 	or	r3,r3,r2
   8cbe0:	188001cc 	andi	r2,r3,7
   8cbe4:	10000726 	beq	r2,zero,8cc04 <__divdf3+0x7dc>
   8cbe8:	188003cc 	andi	r2,r3,15
   8cbec:	01000104 	movi	r4,4
   8cbf0:	11000426 	beq	r2,r4,8cc04 <__divdf3+0x7dc>
   8cbf4:	1805883a 	mov	r2,r3
   8cbf8:	10c00104 	addi	r3,r2,4
   8cbfc:	1885803a 	cmpltu	r2,r3,r2
   8cc00:	88a3883a 	add	r17,r17,r2
   8cc04:	8880202c 	andhi	r2,r17,128
   8cc08:	10002726 	beq	r2,zero,8cca8 <__divdf3+0x880>
   8cc0c:	98c0004c 	andi	r3,r19,1
   8cc10:	00800044 	movi	r2,1
   8cc14:	000b883a 	mov	r5,zero
   8cc18:	0025883a 	mov	r18,zero
   8cc1c:	003e6106 	br	8c5a4 <rx_descriptor_end+0xfff8c544>
   8cc20:	85a1883a 	add	r16,r16,r22
   8cc24:	8585803a 	cmpltu	r2,r16,r22
   8cc28:	1705883a 	add	r2,r2,fp
   8cc2c:	14a5883a 	add	r18,r2,r18
   8cc30:	8c7fff84 	addi	r17,r17,-2
   8cc34:	003f1106 	br	8c87c <rx_descriptor_end+0xfff8c81c>
   8cc38:	b589883a 	add	r4,r22,r22
   8cc3c:	25ad803a 	cmpltu	r22,r4,r22
   8cc40:	b739883a 	add	fp,r22,fp
   8cc44:	40bfff84 	addi	r2,r8,-2
   8cc48:	bf2f883a 	add	r23,r23,fp
   8cc4c:	202d883a 	mov	r22,r4
   8cc50:	003f9306 	br	8caa0 <rx_descriptor_end+0xfff8ca40>
   8cc54:	013ff844 	movi	r4,-31
   8cc58:	2085c83a 	sub	r2,r4,r2
   8cc5c:	8888d83a 	srl	r4,r17,r2
   8cc60:	00800804 	movi	r2,32
   8cc64:	18802126 	beq	r3,r2,8ccec <__divdf3+0x8c4>
   8cc68:	00801004 	movi	r2,64
   8cc6c:	10c5c83a 	sub	r2,r2,r3
   8cc70:	8884983a 	sll	r2,r17,r2
   8cc74:	1204b03a 	or	r2,r2,r8
   8cc78:	1004c03a 	cmpne	r2,r2,zero
   8cc7c:	2084b03a 	or	r2,r4,r2
   8cc80:	144001cc 	andi	r17,r2,7
   8cc84:	88000d1e 	bne	r17,zero,8ccbc <__divdf3+0x894>
   8cc88:	000b883a 	mov	r5,zero
   8cc8c:	1024d0fa 	srli	r18,r2,3
   8cc90:	98c0004c 	andi	r3,r19,1
   8cc94:	0005883a 	mov	r2,zero
   8cc98:	9464b03a 	or	r18,r18,r17
   8cc9c:	003e4106 	br	8c5a4 <rx_descriptor_end+0xfff8c544>
   8cca0:	1007883a 	mov	r3,r2
   8cca4:	0023883a 	mov	r17,zero
   8cca8:	880a927a 	slli	r5,r17,9
   8ccac:	1805883a 	mov	r2,r3
   8ccb0:	8822977a 	slli	r17,r17,29
   8ccb4:	280ad33a 	srli	r5,r5,12
   8ccb8:	003ff406 	br	8cc8c <rx_descriptor_end+0xfff8cc2c>
   8ccbc:	10c003cc 	andi	r3,r2,15
   8ccc0:	01000104 	movi	r4,4
   8ccc4:	193ff626 	beq	r3,r4,8cca0 <rx_descriptor_end+0xfff8cc40>
   8ccc8:	0023883a 	mov	r17,zero
   8cccc:	003fca06 	br	8cbf8 <rx_descriptor_end+0xfff8cb98>
   8ccd0:	813fd336 	bltu	r16,r4,8cc20 <rx_descriptor_end+0xfff8cbc0>
   8ccd4:	1023883a 	mov	r17,r2
   8ccd8:	003fa806 	br	8cb7c <rx_descriptor_end+0xfff8cb1c>
   8ccdc:	b0ffd636 	bltu	r22,r3,8cc38 <rx_descriptor_end+0xfff8cbd8>
   8cce0:	1011883a 	mov	r8,r2
   8cce4:	b0ff341e 	bne	r22,r3,8c9b8 <rx_descriptor_end+0xfff8c958>
   8cce8:	003f3406 	br	8c9bc <rx_descriptor_end+0xfff8c95c>
   8ccec:	0005883a 	mov	r2,zero
   8ccf0:	003fe006 	br	8cc74 <rx_descriptor_end+0xfff8cc14>
   8ccf4:	00800434 	movhi	r2,16
   8ccf8:	89400234 	orhi	r5,r17,8
   8ccfc:	10bfffc4 	addi	r2,r2,-1
   8cd00:	b807883a 	mov	r3,r23
   8cd04:	288a703a 	and	r5,r5,r2
   8cd08:	4025883a 	mov	r18,r8
   8cd0c:	003e8206 	br	8c718 <rx_descriptor_end+0xfff8c6b8>

0008cd10 <__eqdf2>:
   8cd10:	2804d53a 	srli	r2,r5,20
   8cd14:	3806d53a 	srli	r3,r7,20
   8cd18:	02000434 	movhi	r8,16
   8cd1c:	423fffc4 	addi	r8,r8,-1
   8cd20:	1081ffcc 	andi	r2,r2,2047
   8cd24:	0281ffc4 	movi	r10,2047
   8cd28:	2a12703a 	and	r9,r5,r8
   8cd2c:	18c1ffcc 	andi	r3,r3,2047
   8cd30:	3a10703a 	and	r8,r7,r8
   8cd34:	280ad7fa 	srli	r5,r5,31
   8cd38:	380ed7fa 	srli	r7,r7,31
   8cd3c:	12801026 	beq	r2,r10,8cd80 <__eqdf2+0x70>
   8cd40:	0281ffc4 	movi	r10,2047
   8cd44:	1a800a26 	beq	r3,r10,8cd70 <__eqdf2+0x60>
   8cd48:	10c00226 	beq	r2,r3,8cd54 <__eqdf2+0x44>
   8cd4c:	00800044 	movi	r2,1
   8cd50:	f800283a 	ret
   8cd54:	4a3ffd1e 	bne	r9,r8,8cd4c <rx_descriptor_end+0xfff8ccec>
   8cd58:	21bffc1e 	bne	r4,r6,8cd4c <rx_descriptor_end+0xfff8ccec>
   8cd5c:	29c00c26 	beq	r5,r7,8cd90 <__eqdf2+0x80>
   8cd60:	103ffa1e 	bne	r2,zero,8cd4c <rx_descriptor_end+0xfff8ccec>
   8cd64:	2244b03a 	or	r2,r4,r9
   8cd68:	1004c03a 	cmpne	r2,r2,zero
   8cd6c:	f800283a 	ret
   8cd70:	3214b03a 	or	r10,r6,r8
   8cd74:	503ff426 	beq	r10,zero,8cd48 <rx_descriptor_end+0xfff8cce8>
   8cd78:	00800044 	movi	r2,1
   8cd7c:	f800283a 	ret
   8cd80:	2254b03a 	or	r10,r4,r9
   8cd84:	503fee26 	beq	r10,zero,8cd40 <rx_descriptor_end+0xfff8cce0>
   8cd88:	00800044 	movi	r2,1
   8cd8c:	f800283a 	ret
   8cd90:	0005883a 	mov	r2,zero
   8cd94:	f800283a 	ret

0008cd98 <__gedf2>:
   8cd98:	2804d53a 	srli	r2,r5,20
   8cd9c:	3806d53a 	srli	r3,r7,20
   8cda0:	02000434 	movhi	r8,16
   8cda4:	423fffc4 	addi	r8,r8,-1
   8cda8:	1081ffcc 	andi	r2,r2,2047
   8cdac:	0241ffc4 	movi	r9,2047
   8cdb0:	2a14703a 	and	r10,r5,r8
   8cdb4:	18c1ffcc 	andi	r3,r3,2047
   8cdb8:	3a10703a 	and	r8,r7,r8
   8cdbc:	280ad7fa 	srli	r5,r5,31
   8cdc0:	380ed7fa 	srli	r7,r7,31
   8cdc4:	12401d26 	beq	r2,r9,8ce3c <__gedf2+0xa4>
   8cdc8:	0241ffc4 	movi	r9,2047
   8cdcc:	1a401226 	beq	r3,r9,8ce18 <__gedf2+0x80>
   8cdd0:	1000081e 	bne	r2,zero,8cdf4 <__gedf2+0x5c>
   8cdd4:	2296b03a 	or	r11,r4,r10
   8cdd8:	5813003a 	cmpeq	r9,r11,zero
   8cddc:	1800091e 	bne	r3,zero,8ce04 <__gedf2+0x6c>
   8cde0:	3218b03a 	or	r12,r6,r8
   8cde4:	6000071e 	bne	r12,zero,8ce04 <__gedf2+0x6c>
   8cde8:	0005883a 	mov	r2,zero
   8cdec:	5800101e 	bne	r11,zero,8ce30 <__gedf2+0x98>
   8cdf0:	f800283a 	ret
   8cdf4:	18000c1e 	bne	r3,zero,8ce28 <__gedf2+0x90>
   8cdf8:	3212b03a 	or	r9,r6,r8
   8cdfc:	48000c26 	beq	r9,zero,8ce30 <__gedf2+0x98>
   8ce00:	0013883a 	mov	r9,zero
   8ce04:	39c03fcc 	andi	r7,r7,255
   8ce08:	48000826 	beq	r9,zero,8ce2c <__gedf2+0x94>
   8ce0c:	38000926 	beq	r7,zero,8ce34 <__gedf2+0x9c>
   8ce10:	00800044 	movi	r2,1
   8ce14:	f800283a 	ret
   8ce18:	3212b03a 	or	r9,r6,r8
   8ce1c:	483fec26 	beq	r9,zero,8cdd0 <rx_descriptor_end+0xfff8cd70>
   8ce20:	00bfff84 	movi	r2,-2
   8ce24:	f800283a 	ret
   8ce28:	39c03fcc 	andi	r7,r7,255
   8ce2c:	29c00626 	beq	r5,r7,8ce48 <__gedf2+0xb0>
   8ce30:	283ff726 	beq	r5,zero,8ce10 <rx_descriptor_end+0xfff8cdb0>
   8ce34:	00bfffc4 	movi	r2,-1
   8ce38:	f800283a 	ret
   8ce3c:	2292b03a 	or	r9,r4,r10
   8ce40:	483fe126 	beq	r9,zero,8cdc8 <rx_descriptor_end+0xfff8cd68>
   8ce44:	003ff606 	br	8ce20 <rx_descriptor_end+0xfff8cdc0>
   8ce48:	18bff916 	blt	r3,r2,8ce30 <rx_descriptor_end+0xfff8cdd0>
   8ce4c:	10c00316 	blt	r2,r3,8ce5c <__gedf2+0xc4>
   8ce50:	42bff736 	bltu	r8,r10,8ce30 <rx_descriptor_end+0xfff8cdd0>
   8ce54:	52000326 	beq	r10,r8,8ce64 <__gedf2+0xcc>
   8ce58:	5200042e 	bgeu	r10,r8,8ce6c <__gedf2+0xd4>
   8ce5c:	283fec1e 	bne	r5,zero,8ce10 <rx_descriptor_end+0xfff8cdb0>
   8ce60:	003ff406 	br	8ce34 <rx_descriptor_end+0xfff8cdd4>
   8ce64:	313ff236 	bltu	r6,r4,8ce30 <rx_descriptor_end+0xfff8cdd0>
   8ce68:	21bffc36 	bltu	r4,r6,8ce5c <rx_descriptor_end+0xfff8cdfc>
   8ce6c:	0005883a 	mov	r2,zero
   8ce70:	f800283a 	ret

0008ce74 <__ledf2>:
   8ce74:	2804d53a 	srli	r2,r5,20
   8ce78:	3810d53a 	srli	r8,r7,20
   8ce7c:	00c00434 	movhi	r3,16
   8ce80:	18ffffc4 	addi	r3,r3,-1
   8ce84:	1081ffcc 	andi	r2,r2,2047
   8ce88:	0241ffc4 	movi	r9,2047
   8ce8c:	28d4703a 	and	r10,r5,r3
   8ce90:	4201ffcc 	andi	r8,r8,2047
   8ce94:	38c6703a 	and	r3,r7,r3
   8ce98:	280ad7fa 	srli	r5,r5,31
   8ce9c:	380ed7fa 	srli	r7,r7,31
   8cea0:	12401f26 	beq	r2,r9,8cf20 <__ledf2+0xac>
   8cea4:	0241ffc4 	movi	r9,2047
   8cea8:	42401426 	beq	r8,r9,8cefc <__ledf2+0x88>
   8ceac:	1000091e 	bne	r2,zero,8ced4 <__ledf2+0x60>
   8ceb0:	2296b03a 	or	r11,r4,r10
   8ceb4:	5813003a 	cmpeq	r9,r11,zero
   8ceb8:	29403fcc 	andi	r5,r5,255
   8cebc:	40000a1e 	bne	r8,zero,8cee8 <__ledf2+0x74>
   8cec0:	30d8b03a 	or	r12,r6,r3
   8cec4:	6000081e 	bne	r12,zero,8cee8 <__ledf2+0x74>
   8cec8:	0005883a 	mov	r2,zero
   8cecc:	5800111e 	bne	r11,zero,8cf14 <__ledf2+0xa0>
   8ced0:	f800283a 	ret
   8ced4:	29403fcc 	andi	r5,r5,255
   8ced8:	40000c1e 	bne	r8,zero,8cf0c <__ledf2+0x98>
   8cedc:	30d2b03a 	or	r9,r6,r3
   8cee0:	48000c26 	beq	r9,zero,8cf14 <__ledf2+0xa0>
   8cee4:	0013883a 	mov	r9,zero
   8cee8:	39c03fcc 	andi	r7,r7,255
   8ceec:	48000826 	beq	r9,zero,8cf10 <__ledf2+0x9c>
   8cef0:	38001126 	beq	r7,zero,8cf38 <__ledf2+0xc4>
   8cef4:	00800044 	movi	r2,1
   8cef8:	f800283a 	ret
   8cefc:	30d2b03a 	or	r9,r6,r3
   8cf00:	483fea26 	beq	r9,zero,8ceac <rx_descriptor_end+0xfff8ce4c>
   8cf04:	00800084 	movi	r2,2
   8cf08:	f800283a 	ret
   8cf0c:	39c03fcc 	andi	r7,r7,255
   8cf10:	39400726 	beq	r7,r5,8cf30 <__ledf2+0xbc>
   8cf14:	2800081e 	bne	r5,zero,8cf38 <__ledf2+0xc4>
   8cf18:	00800044 	movi	r2,1
   8cf1c:	f800283a 	ret
   8cf20:	2292b03a 	or	r9,r4,r10
   8cf24:	483fdf26 	beq	r9,zero,8cea4 <rx_descriptor_end+0xfff8ce44>
   8cf28:	00800084 	movi	r2,2
   8cf2c:	f800283a 	ret
   8cf30:	4080030e 	bge	r8,r2,8cf40 <__ledf2+0xcc>
   8cf34:	383fef26 	beq	r7,zero,8cef4 <rx_descriptor_end+0xfff8ce94>
   8cf38:	00bfffc4 	movi	r2,-1
   8cf3c:	f800283a 	ret
   8cf40:	123feb16 	blt	r2,r8,8cef0 <rx_descriptor_end+0xfff8ce90>
   8cf44:	1abff336 	bltu	r3,r10,8cf14 <rx_descriptor_end+0xfff8ceb4>
   8cf48:	50c00326 	beq	r10,r3,8cf58 <__ledf2+0xe4>
   8cf4c:	50c0042e 	bgeu	r10,r3,8cf60 <__ledf2+0xec>
   8cf50:	283fe81e 	bne	r5,zero,8cef4 <rx_descriptor_end+0xfff8ce94>
   8cf54:	003ff806 	br	8cf38 <rx_descriptor_end+0xfff8ced8>
   8cf58:	313fee36 	bltu	r6,r4,8cf14 <rx_descriptor_end+0xfff8ceb4>
   8cf5c:	21bffc36 	bltu	r4,r6,8cf50 <rx_descriptor_end+0xfff8cef0>
   8cf60:	0005883a 	mov	r2,zero
   8cf64:	f800283a 	ret

0008cf68 <__muldf3>:
   8cf68:	defff304 	addi	sp,sp,-52
   8cf6c:	2804d53a 	srli	r2,r5,20
   8cf70:	dd800915 	stw	r22,36(sp)
   8cf74:	282cd7fa 	srli	r22,r5,31
   8cf78:	dc000315 	stw	r16,12(sp)
   8cf7c:	04000434 	movhi	r16,16
   8cf80:	dd400815 	stw	r21,32(sp)
   8cf84:	dc800515 	stw	r18,20(sp)
   8cf88:	843fffc4 	addi	r16,r16,-1
   8cf8c:	dfc00c15 	stw	ra,48(sp)
   8cf90:	df000b15 	stw	fp,44(sp)
   8cf94:	ddc00a15 	stw	r23,40(sp)
   8cf98:	dd000715 	stw	r20,28(sp)
   8cf9c:	dcc00615 	stw	r19,24(sp)
   8cfa0:	dc400415 	stw	r17,16(sp)
   8cfa4:	1481ffcc 	andi	r18,r2,2047
   8cfa8:	2c20703a 	and	r16,r5,r16
   8cfac:	b02b883a 	mov	r21,r22
   8cfb0:	b2403fcc 	andi	r9,r22,255
   8cfb4:	90006026 	beq	r18,zero,8d138 <__muldf3+0x1d0>
   8cfb8:	0081ffc4 	movi	r2,2047
   8cfbc:	2029883a 	mov	r20,r4
   8cfc0:	90803626 	beq	r18,r2,8d09c <__muldf3+0x134>
   8cfc4:	80800434 	orhi	r2,r16,16
   8cfc8:	100490fa 	slli	r2,r2,3
   8cfcc:	2020d77a 	srli	r16,r4,29
   8cfd0:	202890fa 	slli	r20,r4,3
   8cfd4:	94bf0044 	addi	r18,r18,-1023
   8cfd8:	80a0b03a 	or	r16,r16,r2
   8cfdc:	0027883a 	mov	r19,zero
   8cfe0:	0039883a 	mov	fp,zero
   8cfe4:	3804d53a 	srli	r2,r7,20
   8cfe8:	382ed7fa 	srli	r23,r7,31
   8cfec:	04400434 	movhi	r17,16
   8cff0:	8c7fffc4 	addi	r17,r17,-1
   8cff4:	1081ffcc 	andi	r2,r2,2047
   8cff8:	3011883a 	mov	r8,r6
   8cffc:	3c62703a 	and	r17,r7,r17
   8d000:	ba803fcc 	andi	r10,r23,255
   8d004:	10006d26 	beq	r2,zero,8d1bc <__muldf3+0x254>
   8d008:	00c1ffc4 	movi	r3,2047
   8d00c:	10c06526 	beq	r2,r3,8d1a4 <__muldf3+0x23c>
   8d010:	88c00434 	orhi	r3,r17,16
   8d014:	180690fa 	slli	r3,r3,3
   8d018:	3022d77a 	srli	r17,r6,29
   8d01c:	301090fa 	slli	r8,r6,3
   8d020:	10bf0044 	addi	r2,r2,-1023
   8d024:	88e2b03a 	or	r17,r17,r3
   8d028:	000b883a 	mov	r5,zero
   8d02c:	9085883a 	add	r2,r18,r2
   8d030:	2cc8b03a 	or	r4,r5,r19
   8d034:	00c003c4 	movi	r3,15
   8d038:	bdacf03a 	xor	r22,r23,r22
   8d03c:	12c00044 	addi	r11,r2,1
   8d040:	19009936 	bltu	r3,r4,8d2a8 <__muldf3+0x340>
   8d044:	200890ba 	slli	r4,r4,2
   8d048:	00c00274 	movhi	r3,9
   8d04c:	18f41704 	addi	r3,r3,-12196
   8d050:	20c9883a 	add	r4,r4,r3
   8d054:	20c00017 	ldw	r3,0(r4)
   8d058:	1800683a 	jmp	r3
   8d05c:	0008d2a8 	cmpgeui	zero,zero,9034
   8d060:	0008d0bc 	xorhi	zero,zero,9026
   8d064:	0008d0bc 	xorhi	zero,zero,9026
   8d068:	0008d0b8 	rdprs	zero,zero,9026
   8d06c:	0008d284 	movi	zero,9034
   8d070:	0008d284 	movi	zero,9034
   8d074:	0008d26c 	andhi	zero,zero,9033
   8d078:	0008d0b8 	rdprs	zero,zero,9026
   8d07c:	0008d284 	movi	zero,9034
   8d080:	0008d26c 	andhi	zero,zero,9033
   8d084:	0008d284 	movi	zero,9034
   8d088:	0008d0b8 	rdprs	zero,zero,9026
   8d08c:	0008d294 	movui	zero,9034
   8d090:	0008d294 	movui	zero,9034
   8d094:	0008d294 	movui	zero,9034
   8d098:	0008d4b0 	cmpltui	zero,zero,9042
   8d09c:	2404b03a 	or	r2,r4,r16
   8d0a0:	10006f1e 	bne	r2,zero,8d260 <__muldf3+0x2f8>
   8d0a4:	04c00204 	movi	r19,8
   8d0a8:	0021883a 	mov	r16,zero
   8d0ac:	0029883a 	mov	r20,zero
   8d0b0:	07000084 	movi	fp,2
   8d0b4:	003fcb06 	br	8cfe4 <rx_descriptor_end+0xfff8cf84>
   8d0b8:	502d883a 	mov	r22,r10
   8d0bc:	00800084 	movi	r2,2
   8d0c0:	28805726 	beq	r5,r2,8d220 <__muldf3+0x2b8>
   8d0c4:	008000c4 	movi	r2,3
   8d0c8:	28816626 	beq	r5,r2,8d664 <__muldf3+0x6fc>
   8d0cc:	00800044 	movi	r2,1
   8d0d0:	2881411e 	bne	r5,r2,8d5d8 <__muldf3+0x670>
   8d0d4:	b02b883a 	mov	r21,r22
   8d0d8:	0005883a 	mov	r2,zero
   8d0dc:	000b883a 	mov	r5,zero
   8d0e0:	0029883a 	mov	r20,zero
   8d0e4:	1004953a 	slli	r2,r2,20
   8d0e8:	a8c03fcc 	andi	r3,r21,255
   8d0ec:	04400434 	movhi	r17,16
   8d0f0:	8c7fffc4 	addi	r17,r17,-1
   8d0f4:	180697fa 	slli	r3,r3,31
   8d0f8:	2c4a703a 	and	r5,r5,r17
   8d0fc:	288ab03a 	or	r5,r5,r2
   8d100:	28c6b03a 	or	r3,r5,r3
   8d104:	a005883a 	mov	r2,r20
   8d108:	dfc00c17 	ldw	ra,48(sp)
   8d10c:	df000b17 	ldw	fp,44(sp)
   8d110:	ddc00a17 	ldw	r23,40(sp)
   8d114:	dd800917 	ldw	r22,36(sp)
   8d118:	dd400817 	ldw	r21,32(sp)
   8d11c:	dd000717 	ldw	r20,28(sp)
   8d120:	dcc00617 	ldw	r19,24(sp)
   8d124:	dc800517 	ldw	r18,20(sp)
   8d128:	dc400417 	ldw	r17,16(sp)
   8d12c:	dc000317 	ldw	r16,12(sp)
   8d130:	dec00d04 	addi	sp,sp,52
   8d134:	f800283a 	ret
   8d138:	2404b03a 	or	r2,r4,r16
   8d13c:	2027883a 	mov	r19,r4
   8d140:	10004226 	beq	r2,zero,8d24c <__muldf3+0x2e4>
   8d144:	8000fc26 	beq	r16,zero,8d538 <__muldf3+0x5d0>
   8d148:	8009883a 	mov	r4,r16
   8d14c:	d9800215 	stw	r6,8(sp)
   8d150:	d9c00015 	stw	r7,0(sp)
   8d154:	da400115 	stw	r9,4(sp)
   8d158:	008e1800 	call	8e180 <__clzsi2>
   8d15c:	d9800217 	ldw	r6,8(sp)
   8d160:	d9c00017 	ldw	r7,0(sp)
   8d164:	da400117 	ldw	r9,4(sp)
   8d168:	113ffd44 	addi	r4,r2,-11
   8d16c:	00c00704 	movi	r3,28
   8d170:	1900ed16 	blt	r3,r4,8d528 <__muldf3+0x5c0>
   8d174:	00c00744 	movi	r3,29
   8d178:	147ffe04 	addi	r17,r2,-8
   8d17c:	1907c83a 	sub	r3,r3,r4
   8d180:	8460983a 	sll	r16,r16,r17
   8d184:	98c6d83a 	srl	r3,r19,r3
   8d188:	9c68983a 	sll	r20,r19,r17
   8d18c:	1c20b03a 	or	r16,r3,r16
   8d190:	1080fcc4 	addi	r2,r2,1011
   8d194:	00a5c83a 	sub	r18,zero,r2
   8d198:	0027883a 	mov	r19,zero
   8d19c:	0039883a 	mov	fp,zero
   8d1a0:	003f9006 	br	8cfe4 <rx_descriptor_end+0xfff8cf84>
   8d1a4:	3446b03a 	or	r3,r6,r17
   8d1a8:	1800261e 	bne	r3,zero,8d244 <__muldf3+0x2dc>
   8d1ac:	0023883a 	mov	r17,zero
   8d1b0:	0011883a 	mov	r8,zero
   8d1b4:	01400084 	movi	r5,2
   8d1b8:	003f9c06 	br	8d02c <rx_descriptor_end+0xfff8cfcc>
   8d1bc:	3446b03a 	or	r3,r6,r17
   8d1c0:	18001c26 	beq	r3,zero,8d234 <__muldf3+0x2cc>
   8d1c4:	8800ce26 	beq	r17,zero,8d500 <__muldf3+0x598>
   8d1c8:	8809883a 	mov	r4,r17
   8d1cc:	d9800215 	stw	r6,8(sp)
   8d1d0:	da400115 	stw	r9,4(sp)
   8d1d4:	da800015 	stw	r10,0(sp)
   8d1d8:	008e1800 	call	8e180 <__clzsi2>
   8d1dc:	d9800217 	ldw	r6,8(sp)
   8d1e0:	da400117 	ldw	r9,4(sp)
   8d1e4:	da800017 	ldw	r10,0(sp)
   8d1e8:	113ffd44 	addi	r4,r2,-11
   8d1ec:	00c00704 	movi	r3,28
   8d1f0:	1900bf16 	blt	r3,r4,8d4f0 <__muldf3+0x588>
   8d1f4:	00c00744 	movi	r3,29
   8d1f8:	123ffe04 	addi	r8,r2,-8
   8d1fc:	1907c83a 	sub	r3,r3,r4
   8d200:	8a22983a 	sll	r17,r17,r8
   8d204:	30c6d83a 	srl	r3,r6,r3
   8d208:	3210983a 	sll	r8,r6,r8
   8d20c:	1c62b03a 	or	r17,r3,r17
   8d210:	1080fcc4 	addi	r2,r2,1011
   8d214:	0085c83a 	sub	r2,zero,r2
   8d218:	000b883a 	mov	r5,zero
   8d21c:	003f8306 	br	8d02c <rx_descriptor_end+0xfff8cfcc>
   8d220:	b02b883a 	mov	r21,r22
   8d224:	0081ffc4 	movi	r2,2047
   8d228:	000b883a 	mov	r5,zero
   8d22c:	0029883a 	mov	r20,zero
   8d230:	003fac06 	br	8d0e4 <rx_descriptor_end+0xfff8d084>
   8d234:	0023883a 	mov	r17,zero
   8d238:	0011883a 	mov	r8,zero
   8d23c:	01400044 	movi	r5,1
   8d240:	003f7a06 	br	8d02c <rx_descriptor_end+0xfff8cfcc>
   8d244:	014000c4 	movi	r5,3
   8d248:	003f7806 	br	8d02c <rx_descriptor_end+0xfff8cfcc>
   8d24c:	04c00104 	movi	r19,4
   8d250:	0021883a 	mov	r16,zero
   8d254:	0029883a 	mov	r20,zero
   8d258:	07000044 	movi	fp,1
   8d25c:	003f6106 	br	8cfe4 <rx_descriptor_end+0xfff8cf84>
   8d260:	04c00304 	movi	r19,12
   8d264:	070000c4 	movi	fp,3
   8d268:	003f5e06 	br	8cfe4 <rx_descriptor_end+0xfff8cf84>
   8d26c:	01400434 	movhi	r5,16
   8d270:	002b883a 	mov	r21,zero
   8d274:	297fffc4 	addi	r5,r5,-1
   8d278:	053fffc4 	movi	r20,-1
   8d27c:	0081ffc4 	movi	r2,2047
   8d280:	003f9806 	br	8d0e4 <rx_descriptor_end+0xfff8d084>
   8d284:	8023883a 	mov	r17,r16
   8d288:	a011883a 	mov	r8,r20
   8d28c:	e00b883a 	mov	r5,fp
   8d290:	003f8a06 	br	8d0bc <rx_descriptor_end+0xfff8d05c>
   8d294:	8023883a 	mov	r17,r16
   8d298:	a011883a 	mov	r8,r20
   8d29c:	482d883a 	mov	r22,r9
   8d2a0:	e00b883a 	mov	r5,fp
   8d2a4:	003f8506 	br	8d0bc <rx_descriptor_end+0xfff8d05c>
   8d2a8:	a00ad43a 	srli	r5,r20,16
   8d2ac:	401ad43a 	srli	r13,r8,16
   8d2b0:	a53fffcc 	andi	r20,r20,65535
   8d2b4:	423fffcc 	andi	r8,r8,65535
   8d2b8:	4519383a 	mul	r12,r8,r20
   8d2bc:	4147383a 	mul	r3,r8,r5
   8d2c0:	6d09383a 	mul	r4,r13,r20
   8d2c4:	600cd43a 	srli	r6,r12,16
   8d2c8:	2b5d383a 	mul	r14,r5,r13
   8d2cc:	20c9883a 	add	r4,r4,r3
   8d2d0:	310d883a 	add	r6,r6,r4
   8d2d4:	30c0022e 	bgeu	r6,r3,8d2e0 <__muldf3+0x378>
   8d2d8:	00c00074 	movhi	r3,1
   8d2dc:	70dd883a 	add	r14,r14,r3
   8d2e0:	8826d43a 	srli	r19,r17,16
   8d2e4:	8bffffcc 	andi	r15,r17,65535
   8d2e8:	7d23383a 	mul	r17,r15,r20
   8d2ec:	7949383a 	mul	r4,r15,r5
   8d2f0:	9d29383a 	mul	r20,r19,r20
   8d2f4:	8814d43a 	srli	r10,r17,16
   8d2f8:	3012943a 	slli	r9,r6,16
   8d2fc:	a129883a 	add	r20,r20,r4
   8d300:	633fffcc 	andi	r12,r12,65535
   8d304:	5515883a 	add	r10,r10,r20
   8d308:	3006d43a 	srli	r3,r6,16
   8d30c:	4b13883a 	add	r9,r9,r12
   8d310:	2ccb383a 	mul	r5,r5,r19
   8d314:	5100022e 	bgeu	r10,r4,8d320 <__muldf3+0x3b8>
   8d318:	01000074 	movhi	r4,1
   8d31c:	290b883a 	add	r5,r5,r4
   8d320:	802ad43a 	srli	r21,r16,16
   8d324:	843fffcc 	andi	r16,r16,65535
   8d328:	440d383a 	mul	r6,r8,r16
   8d32c:	4565383a 	mul	r18,r8,r21
   8d330:	8349383a 	mul	r4,r16,r13
   8d334:	500e943a 	slli	r7,r10,16
   8d338:	3010d43a 	srli	r8,r6,16
   8d33c:	5028d43a 	srli	r20,r10,16
   8d340:	2489883a 	add	r4,r4,r18
   8d344:	8abfffcc 	andi	r10,r17,65535
   8d348:	3a95883a 	add	r10,r7,r10
   8d34c:	4119883a 	add	r12,r8,r4
   8d350:	a169883a 	add	r20,r20,r5
   8d354:	1a87883a 	add	r3,r3,r10
   8d358:	6d5b383a 	mul	r13,r13,r21
   8d35c:	6480022e 	bgeu	r12,r18,8d368 <__muldf3+0x400>
   8d360:	01000074 	movhi	r4,1
   8d364:	691b883a 	add	r13,r13,r4
   8d368:	7c25383a 	mul	r18,r15,r16
   8d36c:	7d4b383a 	mul	r5,r15,r21
   8d370:	84cf383a 	mul	r7,r16,r19
   8d374:	901ed43a 	srli	r15,r18,16
   8d378:	6008d43a 	srli	r4,r12,16
   8d37c:	6010943a 	slli	r8,r12,16
   8d380:	394f883a 	add	r7,r7,r5
   8d384:	333fffcc 	andi	r12,r6,65535
   8d388:	79df883a 	add	r15,r15,r7
   8d38c:	235b883a 	add	r13,r4,r13
   8d390:	9d63383a 	mul	r17,r19,r21
   8d394:	4309883a 	add	r4,r8,r12
   8d398:	7940022e 	bgeu	r15,r5,8d3a4 <__muldf3+0x43c>
   8d39c:	01400074 	movhi	r5,1
   8d3a0:	8963883a 	add	r17,r17,r5
   8d3a4:	780a943a 	slli	r5,r15,16
   8d3a8:	91bfffcc 	andi	r6,r18,65535
   8d3ac:	70c7883a 	add	r3,r14,r3
   8d3b0:	298d883a 	add	r6,r5,r6
   8d3b4:	1a8f803a 	cmpltu	r7,r3,r10
   8d3b8:	350b883a 	add	r5,r6,r20
   8d3bc:	20c7883a 	add	r3,r4,r3
   8d3c0:	3955883a 	add	r10,r7,r5
   8d3c4:	1909803a 	cmpltu	r4,r3,r4
   8d3c8:	6a91883a 	add	r8,r13,r10
   8d3cc:	780cd43a 	srli	r6,r15,16
   8d3d0:	2219883a 	add	r12,r4,r8
   8d3d4:	2d0b803a 	cmpltu	r5,r5,r20
   8d3d8:	51cf803a 	cmpltu	r7,r10,r7
   8d3dc:	29ceb03a 	or	r7,r5,r7
   8d3e0:	4351803a 	cmpltu	r8,r8,r13
   8d3e4:	610b803a 	cmpltu	r5,r12,r4
   8d3e8:	4148b03a 	or	r4,r8,r5
   8d3ec:	398f883a 	add	r7,r7,r6
   8d3f0:	3909883a 	add	r4,r7,r4
   8d3f4:	1810927a 	slli	r8,r3,9
   8d3f8:	2449883a 	add	r4,r4,r17
   8d3fc:	2008927a 	slli	r4,r4,9
   8d400:	6022d5fa 	srli	r17,r12,23
   8d404:	1806d5fa 	srli	r3,r3,23
   8d408:	4252b03a 	or	r9,r8,r9
   8d40c:	600a927a 	slli	r5,r12,9
   8d410:	4810c03a 	cmpne	r8,r9,zero
   8d414:	2462b03a 	or	r17,r4,r17
   8d418:	40c6b03a 	or	r3,r8,r3
   8d41c:	8900402c 	andhi	r4,r17,256
   8d420:	1950b03a 	or	r8,r3,r5
   8d424:	20000726 	beq	r4,zero,8d444 <__muldf3+0x4dc>
   8d428:	4006d07a 	srli	r3,r8,1
   8d42c:	880497fa 	slli	r2,r17,31
   8d430:	4200004c 	andi	r8,r8,1
   8d434:	8822d07a 	srli	r17,r17,1
   8d438:	1a10b03a 	or	r8,r3,r8
   8d43c:	1210b03a 	or	r8,r2,r8
   8d440:	5805883a 	mov	r2,r11
   8d444:	1140ffc4 	addi	r5,r2,1023
   8d448:	0140440e 	bge	zero,r5,8d55c <__muldf3+0x5f4>
   8d44c:	40c001cc 	andi	r3,r8,7
   8d450:	18000726 	beq	r3,zero,8d470 <__muldf3+0x508>
   8d454:	40c003cc 	andi	r3,r8,15
   8d458:	01000104 	movi	r4,4
   8d45c:	19000426 	beq	r3,r4,8d470 <__muldf3+0x508>
   8d460:	4107883a 	add	r3,r8,r4
   8d464:	1a11803a 	cmpltu	r8,r3,r8
   8d468:	8a23883a 	add	r17,r17,r8
   8d46c:	1811883a 	mov	r8,r3
   8d470:	88c0402c 	andhi	r3,r17,256
   8d474:	18000426 	beq	r3,zero,8d488 <__muldf3+0x520>
   8d478:	11410004 	addi	r5,r2,1024
   8d47c:	00bfc034 	movhi	r2,65280
   8d480:	10bfffc4 	addi	r2,r2,-1
   8d484:	88a2703a 	and	r17,r17,r2
   8d488:	0081ff84 	movi	r2,2046
   8d48c:	117f6416 	blt	r2,r5,8d220 <rx_descriptor_end+0xfff8d1c0>
   8d490:	8828977a 	slli	r20,r17,29
   8d494:	4010d0fa 	srli	r8,r8,3
   8d498:	8822927a 	slli	r17,r17,9
   8d49c:	2881ffcc 	andi	r2,r5,2047
   8d4a0:	a228b03a 	or	r20,r20,r8
   8d4a4:	880ad33a 	srli	r5,r17,12
   8d4a8:	b02b883a 	mov	r21,r22
   8d4ac:	003f0d06 	br	8d0e4 <rx_descriptor_end+0xfff8d084>
   8d4b0:	8080022c 	andhi	r2,r16,8
   8d4b4:	10000926 	beq	r2,zero,8d4dc <__muldf3+0x574>
   8d4b8:	8880022c 	andhi	r2,r17,8
   8d4bc:	1000071e 	bne	r2,zero,8d4dc <__muldf3+0x574>
   8d4c0:	00800434 	movhi	r2,16
   8d4c4:	89400234 	orhi	r5,r17,8
   8d4c8:	10bfffc4 	addi	r2,r2,-1
   8d4cc:	b82b883a 	mov	r21,r23
   8d4d0:	288a703a 	and	r5,r5,r2
   8d4d4:	4029883a 	mov	r20,r8
   8d4d8:	003f6806 	br	8d27c <rx_descriptor_end+0xfff8d21c>
   8d4dc:	00800434 	movhi	r2,16
   8d4e0:	81400234 	orhi	r5,r16,8
   8d4e4:	10bfffc4 	addi	r2,r2,-1
   8d4e8:	288a703a 	and	r5,r5,r2
   8d4ec:	003f6306 	br	8d27c <rx_descriptor_end+0xfff8d21c>
   8d4f0:	147ff604 	addi	r17,r2,-40
   8d4f4:	3462983a 	sll	r17,r6,r17
   8d4f8:	0011883a 	mov	r8,zero
   8d4fc:	003f4406 	br	8d210 <rx_descriptor_end+0xfff8d1b0>
   8d500:	3009883a 	mov	r4,r6
   8d504:	d9800215 	stw	r6,8(sp)
   8d508:	da400115 	stw	r9,4(sp)
   8d50c:	da800015 	stw	r10,0(sp)
   8d510:	008e1800 	call	8e180 <__clzsi2>
   8d514:	10800804 	addi	r2,r2,32
   8d518:	da800017 	ldw	r10,0(sp)
   8d51c:	da400117 	ldw	r9,4(sp)
   8d520:	d9800217 	ldw	r6,8(sp)
   8d524:	003f3006 	br	8d1e8 <rx_descriptor_end+0xfff8d188>
   8d528:	143ff604 	addi	r16,r2,-40
   8d52c:	9c20983a 	sll	r16,r19,r16
   8d530:	0029883a 	mov	r20,zero
   8d534:	003f1606 	br	8d190 <rx_descriptor_end+0xfff8d130>
   8d538:	d9800215 	stw	r6,8(sp)
   8d53c:	d9c00015 	stw	r7,0(sp)
   8d540:	da400115 	stw	r9,4(sp)
   8d544:	008e1800 	call	8e180 <__clzsi2>
   8d548:	10800804 	addi	r2,r2,32
   8d54c:	da400117 	ldw	r9,4(sp)
   8d550:	d9c00017 	ldw	r7,0(sp)
   8d554:	d9800217 	ldw	r6,8(sp)
   8d558:	003f0306 	br	8d168 <rx_descriptor_end+0xfff8d108>
   8d55c:	00c00044 	movi	r3,1
   8d560:	1947c83a 	sub	r3,r3,r5
   8d564:	00800e04 	movi	r2,56
   8d568:	10feda16 	blt	r2,r3,8d0d4 <rx_descriptor_end+0xfff8d074>
   8d56c:	008007c4 	movi	r2,31
   8d570:	10c01b16 	blt	r2,r3,8d5e0 <__muldf3+0x678>
   8d574:	00800804 	movi	r2,32
   8d578:	10c5c83a 	sub	r2,r2,r3
   8d57c:	888a983a 	sll	r5,r17,r2
   8d580:	40c8d83a 	srl	r4,r8,r3
   8d584:	4084983a 	sll	r2,r8,r2
   8d588:	88e2d83a 	srl	r17,r17,r3
   8d58c:	2906b03a 	or	r3,r5,r4
   8d590:	1004c03a 	cmpne	r2,r2,zero
   8d594:	1886b03a 	or	r3,r3,r2
   8d598:	188001cc 	andi	r2,r3,7
   8d59c:	10000726 	beq	r2,zero,8d5bc <__muldf3+0x654>
   8d5a0:	188003cc 	andi	r2,r3,15
   8d5a4:	01000104 	movi	r4,4
   8d5a8:	11000426 	beq	r2,r4,8d5bc <__muldf3+0x654>
   8d5ac:	1805883a 	mov	r2,r3
   8d5b0:	10c00104 	addi	r3,r2,4
   8d5b4:	1885803a 	cmpltu	r2,r3,r2
   8d5b8:	88a3883a 	add	r17,r17,r2
   8d5bc:	8880202c 	andhi	r2,r17,128
   8d5c0:	10001c26 	beq	r2,zero,8d634 <__muldf3+0x6cc>
   8d5c4:	b02b883a 	mov	r21,r22
   8d5c8:	00800044 	movi	r2,1
   8d5cc:	000b883a 	mov	r5,zero
   8d5d0:	0029883a 	mov	r20,zero
   8d5d4:	003ec306 	br	8d0e4 <rx_descriptor_end+0xfff8d084>
   8d5d8:	5805883a 	mov	r2,r11
   8d5dc:	003f9906 	br	8d444 <rx_descriptor_end+0xfff8d3e4>
   8d5e0:	00bff844 	movi	r2,-31
   8d5e4:	1145c83a 	sub	r2,r2,r5
   8d5e8:	8888d83a 	srl	r4,r17,r2
   8d5ec:	00800804 	movi	r2,32
   8d5f0:	18801a26 	beq	r3,r2,8d65c <__muldf3+0x6f4>
   8d5f4:	00801004 	movi	r2,64
   8d5f8:	10c5c83a 	sub	r2,r2,r3
   8d5fc:	8884983a 	sll	r2,r17,r2
   8d600:	1204b03a 	or	r2,r2,r8
   8d604:	1004c03a 	cmpne	r2,r2,zero
   8d608:	2084b03a 	or	r2,r4,r2
   8d60c:	144001cc 	andi	r17,r2,7
   8d610:	88000d1e 	bne	r17,zero,8d648 <__muldf3+0x6e0>
   8d614:	000b883a 	mov	r5,zero
   8d618:	1028d0fa 	srli	r20,r2,3
   8d61c:	b02b883a 	mov	r21,r22
   8d620:	0005883a 	mov	r2,zero
   8d624:	a468b03a 	or	r20,r20,r17
   8d628:	003eae06 	br	8d0e4 <rx_descriptor_end+0xfff8d084>
   8d62c:	1007883a 	mov	r3,r2
   8d630:	0023883a 	mov	r17,zero
   8d634:	880a927a 	slli	r5,r17,9
   8d638:	1805883a 	mov	r2,r3
   8d63c:	8822977a 	slli	r17,r17,29
   8d640:	280ad33a 	srli	r5,r5,12
   8d644:	003ff406 	br	8d618 <rx_descriptor_end+0xfff8d5b8>
   8d648:	10c003cc 	andi	r3,r2,15
   8d64c:	01000104 	movi	r4,4
   8d650:	193ff626 	beq	r3,r4,8d62c <rx_descriptor_end+0xfff8d5cc>
   8d654:	0023883a 	mov	r17,zero
   8d658:	003fd506 	br	8d5b0 <rx_descriptor_end+0xfff8d550>
   8d65c:	0005883a 	mov	r2,zero
   8d660:	003fe706 	br	8d600 <rx_descriptor_end+0xfff8d5a0>
   8d664:	00800434 	movhi	r2,16
   8d668:	89400234 	orhi	r5,r17,8
   8d66c:	10bfffc4 	addi	r2,r2,-1
   8d670:	b02b883a 	mov	r21,r22
   8d674:	288a703a 	and	r5,r5,r2
   8d678:	4029883a 	mov	r20,r8
   8d67c:	003eff06 	br	8d27c <rx_descriptor_end+0xfff8d21c>

0008d680 <__subdf3>:
   8d680:	02000434 	movhi	r8,16
   8d684:	423fffc4 	addi	r8,r8,-1
   8d688:	defffb04 	addi	sp,sp,-20
   8d68c:	2a14703a 	and	r10,r5,r8
   8d690:	3812d53a 	srli	r9,r7,20
   8d694:	3a10703a 	and	r8,r7,r8
   8d698:	2006d77a 	srli	r3,r4,29
   8d69c:	3004d77a 	srli	r2,r6,29
   8d6a0:	dc000015 	stw	r16,0(sp)
   8d6a4:	501490fa 	slli	r10,r10,3
   8d6a8:	2820d53a 	srli	r16,r5,20
   8d6ac:	401090fa 	slli	r8,r8,3
   8d6b0:	dc800215 	stw	r18,8(sp)
   8d6b4:	dc400115 	stw	r17,4(sp)
   8d6b8:	dfc00415 	stw	ra,16(sp)
   8d6bc:	202290fa 	slli	r17,r4,3
   8d6c0:	dcc00315 	stw	r19,12(sp)
   8d6c4:	4a41ffcc 	andi	r9,r9,2047
   8d6c8:	0101ffc4 	movi	r4,2047
   8d6cc:	2824d7fa 	srli	r18,r5,31
   8d6d0:	8401ffcc 	andi	r16,r16,2047
   8d6d4:	50c6b03a 	or	r3,r10,r3
   8d6d8:	380ed7fa 	srli	r7,r7,31
   8d6dc:	408ab03a 	or	r5,r8,r2
   8d6e0:	300c90fa 	slli	r6,r6,3
   8d6e4:	49009626 	beq	r9,r4,8d940 <__subdf3+0x2c0>
   8d6e8:	39c0005c 	xori	r7,r7,1
   8d6ec:	8245c83a 	sub	r2,r16,r9
   8d6f0:	3c807426 	beq	r7,r18,8d8c4 <__subdf3+0x244>
   8d6f4:	0080af0e 	bge	zero,r2,8d9b4 <__subdf3+0x334>
   8d6f8:	48002a1e 	bne	r9,zero,8d7a4 <__subdf3+0x124>
   8d6fc:	2988b03a 	or	r4,r5,r6
   8d700:	20009a1e 	bne	r4,zero,8d96c <__subdf3+0x2ec>
   8d704:	888001cc 	andi	r2,r17,7
   8d708:	10000726 	beq	r2,zero,8d728 <__subdf3+0xa8>
   8d70c:	888003cc 	andi	r2,r17,15
   8d710:	01000104 	movi	r4,4
   8d714:	11000426 	beq	r2,r4,8d728 <__subdf3+0xa8>
   8d718:	890b883a 	add	r5,r17,r4
   8d71c:	2c63803a 	cmpltu	r17,r5,r17
   8d720:	1c47883a 	add	r3,r3,r17
   8d724:	2823883a 	mov	r17,r5
   8d728:	1880202c 	andhi	r2,r3,128
   8d72c:	10005926 	beq	r2,zero,8d894 <__subdf3+0x214>
   8d730:	84000044 	addi	r16,r16,1
   8d734:	0081ffc4 	movi	r2,2047
   8d738:	8080be26 	beq	r16,r2,8da34 <__subdf3+0x3b4>
   8d73c:	017fe034 	movhi	r5,65408
   8d740:	297fffc4 	addi	r5,r5,-1
   8d744:	1946703a 	and	r3,r3,r5
   8d748:	1804977a 	slli	r2,r3,29
   8d74c:	1806927a 	slli	r3,r3,9
   8d750:	8822d0fa 	srli	r17,r17,3
   8d754:	8401ffcc 	andi	r16,r16,2047
   8d758:	180ad33a 	srli	r5,r3,12
   8d75c:	9100004c 	andi	r4,r18,1
   8d760:	1444b03a 	or	r2,r2,r17
   8d764:	80c1ffcc 	andi	r3,r16,2047
   8d768:	1820953a 	slli	r16,r3,20
   8d76c:	20c03fcc 	andi	r3,r4,255
   8d770:	180897fa 	slli	r4,r3,31
   8d774:	00c00434 	movhi	r3,16
   8d778:	18ffffc4 	addi	r3,r3,-1
   8d77c:	28c6703a 	and	r3,r5,r3
   8d780:	1c06b03a 	or	r3,r3,r16
   8d784:	1906b03a 	or	r3,r3,r4
   8d788:	dfc00417 	ldw	ra,16(sp)
   8d78c:	dcc00317 	ldw	r19,12(sp)
   8d790:	dc800217 	ldw	r18,8(sp)
   8d794:	dc400117 	ldw	r17,4(sp)
   8d798:	dc000017 	ldw	r16,0(sp)
   8d79c:	dec00504 	addi	sp,sp,20
   8d7a0:	f800283a 	ret
   8d7a4:	0101ffc4 	movi	r4,2047
   8d7a8:	813fd626 	beq	r16,r4,8d704 <rx_descriptor_end+0xfff8d6a4>
   8d7ac:	29402034 	orhi	r5,r5,128
   8d7b0:	01000e04 	movi	r4,56
   8d7b4:	2080a316 	blt	r4,r2,8da44 <__subdf3+0x3c4>
   8d7b8:	010007c4 	movi	r4,31
   8d7bc:	2080c616 	blt	r4,r2,8dad8 <__subdf3+0x458>
   8d7c0:	01000804 	movi	r4,32
   8d7c4:	2089c83a 	sub	r4,r4,r2
   8d7c8:	2910983a 	sll	r8,r5,r4
   8d7cc:	308ed83a 	srl	r7,r6,r2
   8d7d0:	3108983a 	sll	r4,r6,r4
   8d7d4:	2884d83a 	srl	r2,r5,r2
   8d7d8:	41ccb03a 	or	r6,r8,r7
   8d7dc:	2008c03a 	cmpne	r4,r4,zero
   8d7e0:	310cb03a 	or	r6,r6,r4
   8d7e4:	898dc83a 	sub	r6,r17,r6
   8d7e8:	89a3803a 	cmpltu	r17,r17,r6
   8d7ec:	1887c83a 	sub	r3,r3,r2
   8d7f0:	1c47c83a 	sub	r3,r3,r17
   8d7f4:	3023883a 	mov	r17,r6
   8d7f8:	1880202c 	andhi	r2,r3,128
   8d7fc:	10002326 	beq	r2,zero,8d88c <__subdf3+0x20c>
   8d800:	04c02034 	movhi	r19,128
   8d804:	9cffffc4 	addi	r19,r19,-1
   8d808:	1ce6703a 	and	r19,r3,r19
   8d80c:	98007a26 	beq	r19,zero,8d9f8 <__subdf3+0x378>
   8d810:	9809883a 	mov	r4,r19
   8d814:	008e1800 	call	8e180 <__clzsi2>
   8d818:	113ffe04 	addi	r4,r2,-8
   8d81c:	00c007c4 	movi	r3,31
   8d820:	19007b16 	blt	r3,r4,8da10 <__subdf3+0x390>
   8d824:	00800804 	movi	r2,32
   8d828:	1105c83a 	sub	r2,r2,r4
   8d82c:	8884d83a 	srl	r2,r17,r2
   8d830:	9906983a 	sll	r3,r19,r4
   8d834:	8922983a 	sll	r17,r17,r4
   8d838:	10c4b03a 	or	r2,r2,r3
   8d83c:	24007816 	blt	r4,r16,8da20 <__subdf3+0x3a0>
   8d840:	2421c83a 	sub	r16,r4,r16
   8d844:	80c00044 	addi	r3,r16,1
   8d848:	010007c4 	movi	r4,31
   8d84c:	20c09516 	blt	r4,r3,8daa4 <__subdf3+0x424>
   8d850:	01400804 	movi	r5,32
   8d854:	28cbc83a 	sub	r5,r5,r3
   8d858:	88c8d83a 	srl	r4,r17,r3
   8d85c:	8962983a 	sll	r17,r17,r5
   8d860:	114a983a 	sll	r5,r2,r5
   8d864:	10c6d83a 	srl	r3,r2,r3
   8d868:	8804c03a 	cmpne	r2,r17,zero
   8d86c:	290ab03a 	or	r5,r5,r4
   8d870:	28a2b03a 	or	r17,r5,r2
   8d874:	0021883a 	mov	r16,zero
   8d878:	003fa206 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8d87c:	2090b03a 	or	r8,r4,r2
   8d880:	40018e26 	beq	r8,zero,8debc <__subdf3+0x83c>
   8d884:	1007883a 	mov	r3,r2
   8d888:	2023883a 	mov	r17,r4
   8d88c:	888001cc 	andi	r2,r17,7
   8d890:	103f9e1e 	bne	r2,zero,8d70c <rx_descriptor_end+0xfff8d6ac>
   8d894:	1804977a 	slli	r2,r3,29
   8d898:	8822d0fa 	srli	r17,r17,3
   8d89c:	1810d0fa 	srli	r8,r3,3
   8d8a0:	9100004c 	andi	r4,r18,1
   8d8a4:	1444b03a 	or	r2,r2,r17
   8d8a8:	00c1ffc4 	movi	r3,2047
   8d8ac:	80c02826 	beq	r16,r3,8d950 <__subdf3+0x2d0>
   8d8b0:	01400434 	movhi	r5,16
   8d8b4:	297fffc4 	addi	r5,r5,-1
   8d8b8:	80e0703a 	and	r16,r16,r3
   8d8bc:	414a703a 	and	r5,r8,r5
   8d8c0:	003fa806 	br	8d764 <rx_descriptor_end+0xfff8d704>
   8d8c4:	0080630e 	bge	zero,r2,8da54 <__subdf3+0x3d4>
   8d8c8:	48003026 	beq	r9,zero,8d98c <__subdf3+0x30c>
   8d8cc:	0101ffc4 	movi	r4,2047
   8d8d0:	813f8c26 	beq	r16,r4,8d704 <rx_descriptor_end+0xfff8d6a4>
   8d8d4:	29402034 	orhi	r5,r5,128
   8d8d8:	01000e04 	movi	r4,56
   8d8dc:	2080a90e 	bge	r4,r2,8db84 <__subdf3+0x504>
   8d8e0:	298cb03a 	or	r6,r5,r6
   8d8e4:	3012c03a 	cmpne	r9,r6,zero
   8d8e8:	0005883a 	mov	r2,zero
   8d8ec:	4c53883a 	add	r9,r9,r17
   8d8f0:	4c63803a 	cmpltu	r17,r9,r17
   8d8f4:	10c7883a 	add	r3,r2,r3
   8d8f8:	88c7883a 	add	r3,r17,r3
   8d8fc:	4823883a 	mov	r17,r9
   8d900:	1880202c 	andhi	r2,r3,128
   8d904:	1000d026 	beq	r2,zero,8dc48 <__subdf3+0x5c8>
   8d908:	84000044 	addi	r16,r16,1
   8d90c:	0081ffc4 	movi	r2,2047
   8d910:	8080fe26 	beq	r16,r2,8dd0c <__subdf3+0x68c>
   8d914:	00bfe034 	movhi	r2,65408
   8d918:	10bfffc4 	addi	r2,r2,-1
   8d91c:	1886703a 	and	r3,r3,r2
   8d920:	880ad07a 	srli	r5,r17,1
   8d924:	180497fa 	slli	r2,r3,31
   8d928:	8900004c 	andi	r4,r17,1
   8d92c:	2922b03a 	or	r17,r5,r4
   8d930:	1806d07a 	srli	r3,r3,1
   8d934:	1462b03a 	or	r17,r2,r17
   8d938:	3825883a 	mov	r18,r7
   8d93c:	003f7106 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8d940:	2984b03a 	or	r2,r5,r6
   8d944:	103f6826 	beq	r2,zero,8d6e8 <rx_descriptor_end+0xfff8d688>
   8d948:	39c03fcc 	andi	r7,r7,255
   8d94c:	003f6706 	br	8d6ec <rx_descriptor_end+0xfff8d68c>
   8d950:	4086b03a 	or	r3,r8,r2
   8d954:	18015226 	beq	r3,zero,8dea0 <__subdf3+0x820>
   8d958:	00c00434 	movhi	r3,16
   8d95c:	41400234 	orhi	r5,r8,8
   8d960:	18ffffc4 	addi	r3,r3,-1
   8d964:	28ca703a 	and	r5,r5,r3
   8d968:	003f7e06 	br	8d764 <rx_descriptor_end+0xfff8d704>
   8d96c:	10bfffc4 	addi	r2,r2,-1
   8d970:	1000491e 	bne	r2,zero,8da98 <__subdf3+0x418>
   8d974:	898fc83a 	sub	r7,r17,r6
   8d978:	89e3803a 	cmpltu	r17,r17,r7
   8d97c:	1947c83a 	sub	r3,r3,r5
   8d980:	1c47c83a 	sub	r3,r3,r17
   8d984:	3823883a 	mov	r17,r7
   8d988:	003f9b06 	br	8d7f8 <rx_descriptor_end+0xfff8d798>
   8d98c:	2988b03a 	or	r4,r5,r6
   8d990:	203f5c26 	beq	r4,zero,8d704 <rx_descriptor_end+0xfff8d6a4>
   8d994:	10bfffc4 	addi	r2,r2,-1
   8d998:	1000931e 	bne	r2,zero,8dbe8 <__subdf3+0x568>
   8d99c:	898d883a 	add	r6,r17,r6
   8d9a0:	3463803a 	cmpltu	r17,r6,r17
   8d9a4:	1947883a 	add	r3,r3,r5
   8d9a8:	88c7883a 	add	r3,r17,r3
   8d9ac:	3023883a 	mov	r17,r6
   8d9b0:	003fd306 	br	8d900 <rx_descriptor_end+0xfff8d8a0>
   8d9b4:	1000541e 	bne	r2,zero,8db08 <__subdf3+0x488>
   8d9b8:	80800044 	addi	r2,r16,1
   8d9bc:	1081ffcc 	andi	r2,r2,2047
   8d9c0:	01000044 	movi	r4,1
   8d9c4:	2080a20e 	bge	r4,r2,8dc50 <__subdf3+0x5d0>
   8d9c8:	8989c83a 	sub	r4,r17,r6
   8d9cc:	8905803a 	cmpltu	r2,r17,r4
   8d9d0:	1967c83a 	sub	r19,r3,r5
   8d9d4:	98a7c83a 	sub	r19,r19,r2
   8d9d8:	9880202c 	andhi	r2,r19,128
   8d9dc:	10006326 	beq	r2,zero,8db6c <__subdf3+0x4ec>
   8d9e0:	3463c83a 	sub	r17,r6,r17
   8d9e4:	28c7c83a 	sub	r3,r5,r3
   8d9e8:	344d803a 	cmpltu	r6,r6,r17
   8d9ec:	19a7c83a 	sub	r19,r3,r6
   8d9f0:	3825883a 	mov	r18,r7
   8d9f4:	983f861e 	bne	r19,zero,8d810 <rx_descriptor_end+0xfff8d7b0>
   8d9f8:	8809883a 	mov	r4,r17
   8d9fc:	008e1800 	call	8e180 <__clzsi2>
   8da00:	10800804 	addi	r2,r2,32
   8da04:	113ffe04 	addi	r4,r2,-8
   8da08:	00c007c4 	movi	r3,31
   8da0c:	193f850e 	bge	r3,r4,8d824 <rx_descriptor_end+0xfff8d7c4>
   8da10:	10bff604 	addi	r2,r2,-40
   8da14:	8884983a 	sll	r2,r17,r2
   8da18:	0023883a 	mov	r17,zero
   8da1c:	243f880e 	bge	r4,r16,8d840 <rx_descriptor_end+0xfff8d7e0>
   8da20:	00ffe034 	movhi	r3,65408
   8da24:	18ffffc4 	addi	r3,r3,-1
   8da28:	8121c83a 	sub	r16,r16,r4
   8da2c:	10c6703a 	and	r3,r2,r3
   8da30:	003f3406 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8da34:	9100004c 	andi	r4,r18,1
   8da38:	000b883a 	mov	r5,zero
   8da3c:	0005883a 	mov	r2,zero
   8da40:	003f4806 	br	8d764 <rx_descriptor_end+0xfff8d704>
   8da44:	298cb03a 	or	r6,r5,r6
   8da48:	300cc03a 	cmpne	r6,r6,zero
   8da4c:	0005883a 	mov	r2,zero
   8da50:	003f6406 	br	8d7e4 <rx_descriptor_end+0xfff8d784>
   8da54:	10009a1e 	bne	r2,zero,8dcc0 <__subdf3+0x640>
   8da58:	82400044 	addi	r9,r16,1
   8da5c:	4881ffcc 	andi	r2,r9,2047
   8da60:	02800044 	movi	r10,1
   8da64:	5080670e 	bge	r10,r2,8dc04 <__subdf3+0x584>
   8da68:	0081ffc4 	movi	r2,2047
   8da6c:	4880af26 	beq	r9,r2,8dd2c <__subdf3+0x6ac>
   8da70:	898d883a 	add	r6,r17,r6
   8da74:	1945883a 	add	r2,r3,r5
   8da78:	3447803a 	cmpltu	r3,r6,r17
   8da7c:	1887883a 	add	r3,r3,r2
   8da80:	182297fa 	slli	r17,r3,31
   8da84:	300cd07a 	srli	r6,r6,1
   8da88:	1806d07a 	srli	r3,r3,1
   8da8c:	4821883a 	mov	r16,r9
   8da90:	89a2b03a 	or	r17,r17,r6
   8da94:	003f1b06 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8da98:	0101ffc4 	movi	r4,2047
   8da9c:	813f441e 	bne	r16,r4,8d7b0 <rx_descriptor_end+0xfff8d750>
   8daa0:	003f1806 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8daa4:	843ff844 	addi	r16,r16,-31
   8daa8:	01400804 	movi	r5,32
   8daac:	1408d83a 	srl	r4,r2,r16
   8dab0:	19405026 	beq	r3,r5,8dbf4 <__subdf3+0x574>
   8dab4:	01401004 	movi	r5,64
   8dab8:	28c7c83a 	sub	r3,r5,r3
   8dabc:	10c4983a 	sll	r2,r2,r3
   8dac0:	88a2b03a 	or	r17,r17,r2
   8dac4:	8822c03a 	cmpne	r17,r17,zero
   8dac8:	2462b03a 	or	r17,r4,r17
   8dacc:	0007883a 	mov	r3,zero
   8dad0:	0021883a 	mov	r16,zero
   8dad4:	003f6d06 	br	8d88c <rx_descriptor_end+0xfff8d82c>
   8dad8:	11fff804 	addi	r7,r2,-32
   8dadc:	01000804 	movi	r4,32
   8dae0:	29ced83a 	srl	r7,r5,r7
   8dae4:	11004526 	beq	r2,r4,8dbfc <__subdf3+0x57c>
   8dae8:	01001004 	movi	r4,64
   8daec:	2089c83a 	sub	r4,r4,r2
   8daf0:	2904983a 	sll	r2,r5,r4
   8daf4:	118cb03a 	or	r6,r2,r6
   8daf8:	300cc03a 	cmpne	r6,r6,zero
   8dafc:	398cb03a 	or	r6,r7,r6
   8db00:	0005883a 	mov	r2,zero
   8db04:	003f3706 	br	8d7e4 <rx_descriptor_end+0xfff8d784>
   8db08:	80002a26 	beq	r16,zero,8dbb4 <__subdf3+0x534>
   8db0c:	0101ffc4 	movi	r4,2047
   8db10:	49006626 	beq	r9,r4,8dcac <__subdf3+0x62c>
   8db14:	0085c83a 	sub	r2,zero,r2
   8db18:	18c02034 	orhi	r3,r3,128
   8db1c:	01000e04 	movi	r4,56
   8db20:	20807e16 	blt	r4,r2,8dd1c <__subdf3+0x69c>
   8db24:	010007c4 	movi	r4,31
   8db28:	2080e716 	blt	r4,r2,8dec8 <__subdf3+0x848>
   8db2c:	01000804 	movi	r4,32
   8db30:	2089c83a 	sub	r4,r4,r2
   8db34:	1914983a 	sll	r10,r3,r4
   8db38:	8890d83a 	srl	r8,r17,r2
   8db3c:	8908983a 	sll	r4,r17,r4
   8db40:	1884d83a 	srl	r2,r3,r2
   8db44:	5222b03a 	or	r17,r10,r8
   8db48:	2006c03a 	cmpne	r3,r4,zero
   8db4c:	88e2b03a 	or	r17,r17,r3
   8db50:	3463c83a 	sub	r17,r6,r17
   8db54:	2885c83a 	sub	r2,r5,r2
   8db58:	344d803a 	cmpltu	r6,r6,r17
   8db5c:	1187c83a 	sub	r3,r2,r6
   8db60:	4821883a 	mov	r16,r9
   8db64:	3825883a 	mov	r18,r7
   8db68:	003f2306 	br	8d7f8 <rx_descriptor_end+0xfff8d798>
   8db6c:	24d0b03a 	or	r8,r4,r19
   8db70:	40001b1e 	bne	r8,zero,8dbe0 <__subdf3+0x560>
   8db74:	0005883a 	mov	r2,zero
   8db78:	0009883a 	mov	r4,zero
   8db7c:	0021883a 	mov	r16,zero
   8db80:	003f4906 	br	8d8a8 <rx_descriptor_end+0xfff8d848>
   8db84:	010007c4 	movi	r4,31
   8db88:	20803a16 	blt	r4,r2,8dc74 <__subdf3+0x5f4>
   8db8c:	01000804 	movi	r4,32
   8db90:	2089c83a 	sub	r4,r4,r2
   8db94:	2912983a 	sll	r9,r5,r4
   8db98:	3090d83a 	srl	r8,r6,r2
   8db9c:	3108983a 	sll	r4,r6,r4
   8dba0:	2884d83a 	srl	r2,r5,r2
   8dba4:	4a12b03a 	or	r9,r9,r8
   8dba8:	2008c03a 	cmpne	r4,r4,zero
   8dbac:	4912b03a 	or	r9,r9,r4
   8dbb0:	003f4e06 	br	8d8ec <rx_descriptor_end+0xfff8d88c>
   8dbb4:	1c48b03a 	or	r4,r3,r17
   8dbb8:	20003c26 	beq	r4,zero,8dcac <__subdf3+0x62c>
   8dbbc:	0084303a 	nor	r2,zero,r2
   8dbc0:	1000381e 	bne	r2,zero,8dca4 <__subdf3+0x624>
   8dbc4:	3463c83a 	sub	r17,r6,r17
   8dbc8:	28c5c83a 	sub	r2,r5,r3
   8dbcc:	344d803a 	cmpltu	r6,r6,r17
   8dbd0:	1187c83a 	sub	r3,r2,r6
   8dbd4:	4821883a 	mov	r16,r9
   8dbd8:	3825883a 	mov	r18,r7
   8dbdc:	003f0606 	br	8d7f8 <rx_descriptor_end+0xfff8d798>
   8dbe0:	2023883a 	mov	r17,r4
   8dbe4:	003f0906 	br	8d80c <rx_descriptor_end+0xfff8d7ac>
   8dbe8:	0101ffc4 	movi	r4,2047
   8dbec:	813f3a1e 	bne	r16,r4,8d8d8 <rx_descriptor_end+0xfff8d878>
   8dbf0:	003ec406 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8dbf4:	0005883a 	mov	r2,zero
   8dbf8:	003fb106 	br	8dac0 <rx_descriptor_end+0xfff8da60>
   8dbfc:	0005883a 	mov	r2,zero
   8dc00:	003fbc06 	br	8daf4 <rx_descriptor_end+0xfff8da94>
   8dc04:	1c44b03a 	or	r2,r3,r17
   8dc08:	80008e1e 	bne	r16,zero,8de44 <__subdf3+0x7c4>
   8dc0c:	1000c826 	beq	r2,zero,8df30 <__subdf3+0x8b0>
   8dc10:	2984b03a 	or	r2,r5,r6
   8dc14:	103ebb26 	beq	r2,zero,8d704 <rx_descriptor_end+0xfff8d6a4>
   8dc18:	8989883a 	add	r4,r17,r6
   8dc1c:	1945883a 	add	r2,r3,r5
   8dc20:	2447803a 	cmpltu	r3,r4,r17
   8dc24:	1887883a 	add	r3,r3,r2
   8dc28:	1880202c 	andhi	r2,r3,128
   8dc2c:	2023883a 	mov	r17,r4
   8dc30:	103f1626 	beq	r2,zero,8d88c <rx_descriptor_end+0xfff8d82c>
   8dc34:	00bfe034 	movhi	r2,65408
   8dc38:	10bfffc4 	addi	r2,r2,-1
   8dc3c:	5021883a 	mov	r16,r10
   8dc40:	1886703a 	and	r3,r3,r2
   8dc44:	003eaf06 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8dc48:	3825883a 	mov	r18,r7
   8dc4c:	003f0f06 	br	8d88c <rx_descriptor_end+0xfff8d82c>
   8dc50:	1c44b03a 	or	r2,r3,r17
   8dc54:	8000251e 	bne	r16,zero,8dcec <__subdf3+0x66c>
   8dc58:	1000661e 	bne	r2,zero,8ddf4 <__subdf3+0x774>
   8dc5c:	2990b03a 	or	r8,r5,r6
   8dc60:	40009626 	beq	r8,zero,8debc <__subdf3+0x83c>
   8dc64:	2807883a 	mov	r3,r5
   8dc68:	3023883a 	mov	r17,r6
   8dc6c:	3825883a 	mov	r18,r7
   8dc70:	003ea406 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8dc74:	127ff804 	addi	r9,r2,-32
   8dc78:	01000804 	movi	r4,32
   8dc7c:	2a52d83a 	srl	r9,r5,r9
   8dc80:	11008c26 	beq	r2,r4,8deb4 <__subdf3+0x834>
   8dc84:	01001004 	movi	r4,64
   8dc88:	2085c83a 	sub	r2,r4,r2
   8dc8c:	2884983a 	sll	r2,r5,r2
   8dc90:	118cb03a 	or	r6,r2,r6
   8dc94:	300cc03a 	cmpne	r6,r6,zero
   8dc98:	4992b03a 	or	r9,r9,r6
   8dc9c:	0005883a 	mov	r2,zero
   8dca0:	003f1206 	br	8d8ec <rx_descriptor_end+0xfff8d88c>
   8dca4:	0101ffc4 	movi	r4,2047
   8dca8:	493f9c1e 	bne	r9,r4,8db1c <rx_descriptor_end+0xfff8dabc>
   8dcac:	2807883a 	mov	r3,r5
   8dcb0:	3023883a 	mov	r17,r6
   8dcb4:	4821883a 	mov	r16,r9
   8dcb8:	3825883a 	mov	r18,r7
   8dcbc:	003e9106 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8dcc0:	80001f1e 	bne	r16,zero,8dd40 <__subdf3+0x6c0>
   8dcc4:	1c48b03a 	or	r4,r3,r17
   8dcc8:	20005a26 	beq	r4,zero,8de34 <__subdf3+0x7b4>
   8dccc:	0084303a 	nor	r2,zero,r2
   8dcd0:	1000561e 	bne	r2,zero,8de2c <__subdf3+0x7ac>
   8dcd4:	89a3883a 	add	r17,r17,r6
   8dcd8:	1945883a 	add	r2,r3,r5
   8dcdc:	898d803a 	cmpltu	r6,r17,r6
   8dce0:	3087883a 	add	r3,r6,r2
   8dce4:	4821883a 	mov	r16,r9
   8dce8:	003f0506 	br	8d900 <rx_descriptor_end+0xfff8d8a0>
   8dcec:	10002b1e 	bne	r2,zero,8dd9c <__subdf3+0x71c>
   8dcf0:	2984b03a 	or	r2,r5,r6
   8dcf4:	10008026 	beq	r2,zero,8def8 <__subdf3+0x878>
   8dcf8:	2807883a 	mov	r3,r5
   8dcfc:	3023883a 	mov	r17,r6
   8dd00:	3825883a 	mov	r18,r7
   8dd04:	0401ffc4 	movi	r16,2047
   8dd08:	003e7e06 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8dd0c:	3809883a 	mov	r4,r7
   8dd10:	0011883a 	mov	r8,zero
   8dd14:	0005883a 	mov	r2,zero
   8dd18:	003ee306 	br	8d8a8 <rx_descriptor_end+0xfff8d848>
   8dd1c:	1c62b03a 	or	r17,r3,r17
   8dd20:	8822c03a 	cmpne	r17,r17,zero
   8dd24:	0005883a 	mov	r2,zero
   8dd28:	003f8906 	br	8db50 <rx_descriptor_end+0xfff8daf0>
   8dd2c:	3809883a 	mov	r4,r7
   8dd30:	4821883a 	mov	r16,r9
   8dd34:	0011883a 	mov	r8,zero
   8dd38:	0005883a 	mov	r2,zero
   8dd3c:	003eda06 	br	8d8a8 <rx_descriptor_end+0xfff8d848>
   8dd40:	0101ffc4 	movi	r4,2047
   8dd44:	49003b26 	beq	r9,r4,8de34 <__subdf3+0x7b4>
   8dd48:	0085c83a 	sub	r2,zero,r2
   8dd4c:	18c02034 	orhi	r3,r3,128
   8dd50:	01000e04 	movi	r4,56
   8dd54:	20806e16 	blt	r4,r2,8df10 <__subdf3+0x890>
   8dd58:	010007c4 	movi	r4,31
   8dd5c:	20807716 	blt	r4,r2,8df3c <__subdf3+0x8bc>
   8dd60:	01000804 	movi	r4,32
   8dd64:	2089c83a 	sub	r4,r4,r2
   8dd68:	1914983a 	sll	r10,r3,r4
   8dd6c:	8890d83a 	srl	r8,r17,r2
   8dd70:	8908983a 	sll	r4,r17,r4
   8dd74:	1884d83a 	srl	r2,r3,r2
   8dd78:	5222b03a 	or	r17,r10,r8
   8dd7c:	2006c03a 	cmpne	r3,r4,zero
   8dd80:	88e2b03a 	or	r17,r17,r3
   8dd84:	89a3883a 	add	r17,r17,r6
   8dd88:	1145883a 	add	r2,r2,r5
   8dd8c:	898d803a 	cmpltu	r6,r17,r6
   8dd90:	3087883a 	add	r3,r6,r2
   8dd94:	4821883a 	mov	r16,r9
   8dd98:	003ed906 	br	8d900 <rx_descriptor_end+0xfff8d8a0>
   8dd9c:	2984b03a 	or	r2,r5,r6
   8dda0:	10004226 	beq	r2,zero,8deac <__subdf3+0x82c>
   8dda4:	1808d0fa 	srli	r4,r3,3
   8dda8:	8822d0fa 	srli	r17,r17,3
   8ddac:	1806977a 	slli	r3,r3,29
   8ddb0:	2080022c 	andhi	r2,r4,8
   8ddb4:	1c62b03a 	or	r17,r3,r17
   8ddb8:	10000826 	beq	r2,zero,8dddc <__subdf3+0x75c>
   8ddbc:	2812d0fa 	srli	r9,r5,3
   8ddc0:	4880022c 	andhi	r2,r9,8
   8ddc4:	1000051e 	bne	r2,zero,8dddc <__subdf3+0x75c>
   8ddc8:	300cd0fa 	srli	r6,r6,3
   8ddcc:	2804977a 	slli	r2,r5,29
   8ddd0:	4809883a 	mov	r4,r9
   8ddd4:	3825883a 	mov	r18,r7
   8ddd8:	11a2b03a 	or	r17,r2,r6
   8dddc:	8806d77a 	srli	r3,r17,29
   8dde0:	200890fa 	slli	r4,r4,3
   8dde4:	882290fa 	slli	r17,r17,3
   8dde8:	0401ffc4 	movi	r16,2047
   8ddec:	1906b03a 	or	r3,r3,r4
   8ddf0:	003e4406 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8ddf4:	2984b03a 	or	r2,r5,r6
   8ddf8:	103e4226 	beq	r2,zero,8d704 <rx_descriptor_end+0xfff8d6a4>
   8ddfc:	8989c83a 	sub	r4,r17,r6
   8de00:	8911803a 	cmpltu	r8,r17,r4
   8de04:	1945c83a 	sub	r2,r3,r5
   8de08:	1205c83a 	sub	r2,r2,r8
   8de0c:	1200202c 	andhi	r8,r2,128
   8de10:	403e9a26 	beq	r8,zero,8d87c <rx_descriptor_end+0xfff8d81c>
   8de14:	3463c83a 	sub	r17,r6,r17
   8de18:	28c5c83a 	sub	r2,r5,r3
   8de1c:	344d803a 	cmpltu	r6,r6,r17
   8de20:	1187c83a 	sub	r3,r2,r6
   8de24:	3825883a 	mov	r18,r7
   8de28:	003e3606 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8de2c:	0101ffc4 	movi	r4,2047
   8de30:	493fc71e 	bne	r9,r4,8dd50 <rx_descriptor_end+0xfff8dcf0>
   8de34:	2807883a 	mov	r3,r5
   8de38:	3023883a 	mov	r17,r6
   8de3c:	4821883a 	mov	r16,r9
   8de40:	003e3006 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8de44:	10003626 	beq	r2,zero,8df20 <__subdf3+0x8a0>
   8de48:	2984b03a 	or	r2,r5,r6
   8de4c:	10001726 	beq	r2,zero,8deac <__subdf3+0x82c>
   8de50:	1808d0fa 	srli	r4,r3,3
   8de54:	8822d0fa 	srli	r17,r17,3
   8de58:	1806977a 	slli	r3,r3,29
   8de5c:	2080022c 	andhi	r2,r4,8
   8de60:	1c62b03a 	or	r17,r3,r17
   8de64:	10000726 	beq	r2,zero,8de84 <__subdf3+0x804>
   8de68:	2812d0fa 	srli	r9,r5,3
   8de6c:	4880022c 	andhi	r2,r9,8
   8de70:	1000041e 	bne	r2,zero,8de84 <__subdf3+0x804>
   8de74:	300cd0fa 	srli	r6,r6,3
   8de78:	2804977a 	slli	r2,r5,29
   8de7c:	4809883a 	mov	r4,r9
   8de80:	11a2b03a 	or	r17,r2,r6
   8de84:	8806d77a 	srli	r3,r17,29
   8de88:	200890fa 	slli	r4,r4,3
   8de8c:	882290fa 	slli	r17,r17,3
   8de90:	3825883a 	mov	r18,r7
   8de94:	1906b03a 	or	r3,r3,r4
   8de98:	0401ffc4 	movi	r16,2047
   8de9c:	003e1906 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8dea0:	000b883a 	mov	r5,zero
   8dea4:	0005883a 	mov	r2,zero
   8dea8:	003e2e06 	br	8d764 <rx_descriptor_end+0xfff8d704>
   8deac:	0401ffc4 	movi	r16,2047
   8deb0:	003e1406 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8deb4:	0005883a 	mov	r2,zero
   8deb8:	003f7506 	br	8dc90 <rx_descriptor_end+0xfff8dc30>
   8debc:	0005883a 	mov	r2,zero
   8dec0:	0009883a 	mov	r4,zero
   8dec4:	003e7806 	br	8d8a8 <rx_descriptor_end+0xfff8d848>
   8dec8:	123ff804 	addi	r8,r2,-32
   8decc:	01000804 	movi	r4,32
   8ded0:	1a10d83a 	srl	r8,r3,r8
   8ded4:	11002526 	beq	r2,r4,8df6c <__subdf3+0x8ec>
   8ded8:	01001004 	movi	r4,64
   8dedc:	2085c83a 	sub	r2,r4,r2
   8dee0:	1884983a 	sll	r2,r3,r2
   8dee4:	1444b03a 	or	r2,r2,r17
   8dee8:	1004c03a 	cmpne	r2,r2,zero
   8deec:	40a2b03a 	or	r17,r8,r2
   8def0:	0005883a 	mov	r2,zero
   8def4:	003f1606 	br	8db50 <rx_descriptor_end+0xfff8daf0>
   8def8:	02000434 	movhi	r8,16
   8defc:	0009883a 	mov	r4,zero
   8df00:	423fffc4 	addi	r8,r8,-1
   8df04:	00bfffc4 	movi	r2,-1
   8df08:	0401ffc4 	movi	r16,2047
   8df0c:	003e6606 	br	8d8a8 <rx_descriptor_end+0xfff8d848>
   8df10:	1c62b03a 	or	r17,r3,r17
   8df14:	8822c03a 	cmpne	r17,r17,zero
   8df18:	0005883a 	mov	r2,zero
   8df1c:	003f9906 	br	8dd84 <rx_descriptor_end+0xfff8dd24>
   8df20:	2807883a 	mov	r3,r5
   8df24:	3023883a 	mov	r17,r6
   8df28:	0401ffc4 	movi	r16,2047
   8df2c:	003df506 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8df30:	2807883a 	mov	r3,r5
   8df34:	3023883a 	mov	r17,r6
   8df38:	003df206 	br	8d704 <rx_descriptor_end+0xfff8d6a4>
   8df3c:	123ff804 	addi	r8,r2,-32
   8df40:	01000804 	movi	r4,32
   8df44:	1a10d83a 	srl	r8,r3,r8
   8df48:	11000a26 	beq	r2,r4,8df74 <__subdf3+0x8f4>
   8df4c:	01001004 	movi	r4,64
   8df50:	2085c83a 	sub	r2,r4,r2
   8df54:	1884983a 	sll	r2,r3,r2
   8df58:	1444b03a 	or	r2,r2,r17
   8df5c:	1004c03a 	cmpne	r2,r2,zero
   8df60:	40a2b03a 	or	r17,r8,r2
   8df64:	0005883a 	mov	r2,zero
   8df68:	003f8606 	br	8dd84 <rx_descriptor_end+0xfff8dd24>
   8df6c:	0005883a 	mov	r2,zero
   8df70:	003fdc06 	br	8dee4 <rx_descriptor_end+0xfff8de84>
   8df74:	0005883a 	mov	r2,zero
   8df78:	003ff706 	br	8df58 <rx_descriptor_end+0xfff8def8>

0008df7c <__fixdfsi>:
   8df7c:	280cd53a 	srli	r6,r5,20
   8df80:	00c00434 	movhi	r3,16
   8df84:	18ffffc4 	addi	r3,r3,-1
   8df88:	3181ffcc 	andi	r6,r6,2047
   8df8c:	01c0ff84 	movi	r7,1022
   8df90:	28c6703a 	and	r3,r5,r3
   8df94:	280ad7fa 	srli	r5,r5,31
   8df98:	3980120e 	bge	r7,r6,8dfe4 <__fixdfsi+0x68>
   8df9c:	00810744 	movi	r2,1053
   8dfa0:	11800c16 	blt	r2,r6,8dfd4 <__fixdfsi+0x58>
   8dfa4:	00810cc4 	movi	r2,1075
   8dfa8:	1185c83a 	sub	r2,r2,r6
   8dfac:	01c007c4 	movi	r7,31
   8dfb0:	18c00434 	orhi	r3,r3,16
   8dfb4:	38800d16 	blt	r7,r2,8dfec <__fixdfsi+0x70>
   8dfb8:	31befb44 	addi	r6,r6,-1043
   8dfbc:	2084d83a 	srl	r2,r4,r2
   8dfc0:	1986983a 	sll	r3,r3,r6
   8dfc4:	1884b03a 	or	r2,r3,r2
   8dfc8:	28000726 	beq	r5,zero,8dfe8 <__fixdfsi+0x6c>
   8dfcc:	0085c83a 	sub	r2,zero,r2
   8dfd0:	f800283a 	ret
   8dfd4:	00a00034 	movhi	r2,32768
   8dfd8:	10bfffc4 	addi	r2,r2,-1
   8dfdc:	2885883a 	add	r2,r5,r2
   8dfe0:	f800283a 	ret
   8dfe4:	0005883a 	mov	r2,zero
   8dfe8:	f800283a 	ret
   8dfec:	008104c4 	movi	r2,1043
   8dff0:	1185c83a 	sub	r2,r2,r6
   8dff4:	1884d83a 	srl	r2,r3,r2
   8dff8:	003ff306 	br	8dfc8 <rx_descriptor_end+0xfff8df68>

0008dffc <__floatsidf>:
   8dffc:	defffd04 	addi	sp,sp,-12
   8e000:	dfc00215 	stw	ra,8(sp)
   8e004:	dc400115 	stw	r17,4(sp)
   8e008:	dc000015 	stw	r16,0(sp)
   8e00c:	20002b26 	beq	r4,zero,8e0bc <__floatsidf+0xc0>
   8e010:	2023883a 	mov	r17,r4
   8e014:	2020d7fa 	srli	r16,r4,31
   8e018:	20002d16 	blt	r4,zero,8e0d0 <__floatsidf+0xd4>
   8e01c:	8809883a 	mov	r4,r17
   8e020:	008e1800 	call	8e180 <__clzsi2>
   8e024:	01410784 	movi	r5,1054
   8e028:	288bc83a 	sub	r5,r5,r2
   8e02c:	01010cc4 	movi	r4,1075
   8e030:	2149c83a 	sub	r4,r4,r5
   8e034:	00c007c4 	movi	r3,31
   8e038:	1900160e 	bge	r3,r4,8e094 <__floatsidf+0x98>
   8e03c:	00c104c4 	movi	r3,1043
   8e040:	1947c83a 	sub	r3,r3,r5
   8e044:	88c6983a 	sll	r3,r17,r3
   8e048:	00800434 	movhi	r2,16
   8e04c:	10bfffc4 	addi	r2,r2,-1
   8e050:	1886703a 	and	r3,r3,r2
   8e054:	2941ffcc 	andi	r5,r5,2047
   8e058:	800d883a 	mov	r6,r16
   8e05c:	0005883a 	mov	r2,zero
   8e060:	280a953a 	slli	r5,r5,20
   8e064:	31803fcc 	andi	r6,r6,255
   8e068:	01000434 	movhi	r4,16
   8e06c:	300c97fa 	slli	r6,r6,31
   8e070:	213fffc4 	addi	r4,r4,-1
   8e074:	1906703a 	and	r3,r3,r4
   8e078:	1946b03a 	or	r3,r3,r5
   8e07c:	1986b03a 	or	r3,r3,r6
   8e080:	dfc00217 	ldw	ra,8(sp)
   8e084:	dc400117 	ldw	r17,4(sp)
   8e088:	dc000017 	ldw	r16,0(sp)
   8e08c:	dec00304 	addi	sp,sp,12
   8e090:	f800283a 	ret
   8e094:	00c002c4 	movi	r3,11
   8e098:	1887c83a 	sub	r3,r3,r2
   8e09c:	88c6d83a 	srl	r3,r17,r3
   8e0a0:	8904983a 	sll	r2,r17,r4
   8e0a4:	01000434 	movhi	r4,16
   8e0a8:	213fffc4 	addi	r4,r4,-1
   8e0ac:	2941ffcc 	andi	r5,r5,2047
   8e0b0:	1906703a 	and	r3,r3,r4
   8e0b4:	800d883a 	mov	r6,r16
   8e0b8:	003fe906 	br	8e060 <rx_descriptor_end+0xfff8e000>
   8e0bc:	000d883a 	mov	r6,zero
   8e0c0:	000b883a 	mov	r5,zero
   8e0c4:	0007883a 	mov	r3,zero
   8e0c8:	0005883a 	mov	r2,zero
   8e0cc:	003fe406 	br	8e060 <rx_descriptor_end+0xfff8e000>
   8e0d0:	0123c83a 	sub	r17,zero,r4
   8e0d4:	003fd106 	br	8e01c <rx_descriptor_end+0xfff8dfbc>

0008e0d8 <__floatunsidf>:
   8e0d8:	defffe04 	addi	sp,sp,-8
   8e0dc:	dc000015 	stw	r16,0(sp)
   8e0e0:	dfc00115 	stw	ra,4(sp)
   8e0e4:	2021883a 	mov	r16,r4
   8e0e8:	20002226 	beq	r4,zero,8e174 <__floatunsidf+0x9c>
   8e0ec:	008e1800 	call	8e180 <__clzsi2>
   8e0f0:	01010784 	movi	r4,1054
   8e0f4:	2089c83a 	sub	r4,r4,r2
   8e0f8:	01810cc4 	movi	r6,1075
   8e0fc:	310dc83a 	sub	r6,r6,r4
   8e100:	00c007c4 	movi	r3,31
   8e104:	1980120e 	bge	r3,r6,8e150 <__floatunsidf+0x78>
   8e108:	00c104c4 	movi	r3,1043
   8e10c:	1907c83a 	sub	r3,r3,r4
   8e110:	80ca983a 	sll	r5,r16,r3
   8e114:	00800434 	movhi	r2,16
   8e118:	10bfffc4 	addi	r2,r2,-1
   8e11c:	2101ffcc 	andi	r4,r4,2047
   8e120:	0021883a 	mov	r16,zero
   8e124:	288a703a 	and	r5,r5,r2
   8e128:	2008953a 	slli	r4,r4,20
   8e12c:	00c00434 	movhi	r3,16
   8e130:	18ffffc4 	addi	r3,r3,-1
   8e134:	28c6703a 	and	r3,r5,r3
   8e138:	8005883a 	mov	r2,r16
   8e13c:	1906b03a 	or	r3,r3,r4
   8e140:	dfc00117 	ldw	ra,4(sp)
   8e144:	dc000017 	ldw	r16,0(sp)
   8e148:	dec00204 	addi	sp,sp,8
   8e14c:	f800283a 	ret
   8e150:	00c002c4 	movi	r3,11
   8e154:	188bc83a 	sub	r5,r3,r2
   8e158:	814ad83a 	srl	r5,r16,r5
   8e15c:	00c00434 	movhi	r3,16
   8e160:	18ffffc4 	addi	r3,r3,-1
   8e164:	81a0983a 	sll	r16,r16,r6
   8e168:	2101ffcc 	andi	r4,r4,2047
   8e16c:	28ca703a 	and	r5,r5,r3
   8e170:	003fed06 	br	8e128 <rx_descriptor_end+0xfff8e0c8>
   8e174:	0009883a 	mov	r4,zero
   8e178:	000b883a 	mov	r5,zero
   8e17c:	003fea06 	br	8e128 <rx_descriptor_end+0xfff8e0c8>

0008e180 <__clzsi2>:
   8e180:	00bfffd4 	movui	r2,65535
   8e184:	11000536 	bltu	r2,r4,8e19c <__clzsi2+0x1c>
   8e188:	00803fc4 	movi	r2,255
   8e18c:	11000f36 	bltu	r2,r4,8e1cc <__clzsi2+0x4c>
   8e190:	00800804 	movi	r2,32
   8e194:	0007883a 	mov	r3,zero
   8e198:	00000506 	br	8e1b0 <__clzsi2+0x30>
   8e19c:	00804034 	movhi	r2,256
   8e1a0:	10bfffc4 	addi	r2,r2,-1
   8e1a4:	11000c2e 	bgeu	r2,r4,8e1d8 <__clzsi2+0x58>
   8e1a8:	00800204 	movi	r2,8
   8e1ac:	00c00604 	movi	r3,24
   8e1b0:	20c8d83a 	srl	r4,r4,r3
   8e1b4:	00c00274 	movhi	r3,9
   8e1b8:	18c85b04 	addi	r3,r3,8556
   8e1bc:	1909883a 	add	r4,r3,r4
   8e1c0:	20c00003 	ldbu	r3,0(r4)
   8e1c4:	10c5c83a 	sub	r2,r2,r3
   8e1c8:	f800283a 	ret
   8e1cc:	00800604 	movi	r2,24
   8e1d0:	00c00204 	movi	r3,8
   8e1d4:	003ff606 	br	8e1b0 <rx_descriptor_end+0xfff8e150>
   8e1d8:	00800404 	movi	r2,16
   8e1dc:	1007883a 	mov	r3,r2
   8e1e0:	003ff306 	br	8e1b0 <rx_descriptor_end+0xfff8e150>

0008e1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e1e4:	defffe04 	addi	sp,sp,-8
   8e1e8:	dfc00115 	stw	ra,4(sp)
   8e1ec:	df000015 	stw	fp,0(sp)
   8e1f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e1f4:	d0a00c17 	ldw	r2,-32720(gp)
   8e1f8:	10000326 	beq	r2,zero,8e208 <alt_get_errno+0x24>
   8e1fc:	d0a00c17 	ldw	r2,-32720(gp)
   8e200:	103ee83a 	callr	r2
   8e204:	00000106 	br	8e20c <alt_get_errno+0x28>
   8e208:	d0a7fa04 	addi	r2,gp,-24600
}
   8e20c:	e037883a 	mov	sp,fp
   8e210:	dfc00117 	ldw	ra,4(sp)
   8e214:	df000017 	ldw	fp,0(sp)
   8e218:	dec00204 	addi	sp,sp,8
   8e21c:	f800283a 	ret

0008e220 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e220:	defffb04 	addi	sp,sp,-20
   8e224:	dfc00415 	stw	ra,16(sp)
   8e228:	df000315 	stw	fp,12(sp)
   8e22c:	df000304 	addi	fp,sp,12
   8e230:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e234:	e0bfff17 	ldw	r2,-4(fp)
   8e238:	10000616 	blt	r2,zero,8e254 <close+0x34>
   8e23c:	e0bfff17 	ldw	r2,-4(fp)
   8e240:	10c00324 	muli	r3,r2,12
   8e244:	00800274 	movhi	r2,9
   8e248:	108be104 	addi	r2,r2,12164
   8e24c:	1885883a 	add	r2,r3,r2
   8e250:	00000106 	br	8e258 <close+0x38>
   8e254:	0005883a 	mov	r2,zero
   8e258:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8e25c:	e0bffd17 	ldw	r2,-12(fp)
   8e260:	10001926 	beq	r2,zero,8e2c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e264:	e0bffd17 	ldw	r2,-12(fp)
   8e268:	10800017 	ldw	r2,0(r2)
   8e26c:	10800417 	ldw	r2,16(r2)
   8e270:	10000626 	beq	r2,zero,8e28c <close+0x6c>
   8e274:	e0bffd17 	ldw	r2,-12(fp)
   8e278:	10800017 	ldw	r2,0(r2)
   8e27c:	10800417 	ldw	r2,16(r2)
   8e280:	e13ffd17 	ldw	r4,-12(fp)
   8e284:	103ee83a 	callr	r2
   8e288:	00000106 	br	8e290 <close+0x70>
   8e28c:	0005883a 	mov	r2,zero
   8e290:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e294:	e13fff17 	ldw	r4,-4(fp)
   8e298:	008eb900 	call	8eb90 <alt_release_fd>
    if (rval < 0)
   8e29c:	e0bffe17 	ldw	r2,-8(fp)
   8e2a0:	1000070e 	bge	r2,zero,8e2c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8e2a4:	008e1e40 	call	8e1e4 <alt_get_errno>
   8e2a8:	1007883a 	mov	r3,r2
   8e2ac:	e0bffe17 	ldw	r2,-8(fp)
   8e2b0:	0085c83a 	sub	r2,zero,r2
   8e2b4:	18800015 	stw	r2,0(r3)
      return -1;
   8e2b8:	00bfffc4 	movi	r2,-1
   8e2bc:	00000706 	br	8e2dc <close+0xbc>
    }
    return 0;
   8e2c0:	0005883a 	mov	r2,zero
   8e2c4:	00000506 	br	8e2dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e2c8:	008e1e40 	call	8e1e4 <alt_get_errno>
   8e2cc:	1007883a 	mov	r3,r2
   8e2d0:	00801444 	movi	r2,81
   8e2d4:	18800015 	stw	r2,0(r3)
    return -1;
   8e2d8:	00bfffc4 	movi	r2,-1
  }
}
   8e2dc:	e037883a 	mov	sp,fp
   8e2e0:	dfc00117 	ldw	ra,4(sp)
   8e2e4:	df000017 	ldw	fp,0(sp)
   8e2e8:	dec00204 	addi	sp,sp,8
   8e2ec:	f800283a 	ret

0008e2f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8e2f0:	defffe04 	addi	sp,sp,-8
   8e2f4:	df000115 	stw	fp,4(sp)
   8e2f8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8e2fc:	e03fff15 	stw	zero,-4(fp)
   8e300:	00000506 	br	8e318 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8e304:	e0bfff17 	ldw	r2,-4(fp)
   8e308:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8e30c:	e0bfff17 	ldw	r2,-4(fp)
   8e310:	10800804 	addi	r2,r2,32
   8e314:	e0bfff15 	stw	r2,-4(fp)
   8e318:	e0bfff17 	ldw	r2,-4(fp)
   8e31c:	10820030 	cmpltui	r2,r2,2048
   8e320:	103ff81e 	bne	r2,zero,8e304 <rx_descriptor_end+0xfff8e2a4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8e324:	0001883a 	nop
   8e328:	e037883a 	mov	sp,fp
   8e32c:	df000017 	ldw	fp,0(sp)
   8e330:	dec00104 	addi	sp,sp,4
   8e334:	f800283a 	ret

0008e338 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8e338:	defffc04 	addi	sp,sp,-16
   8e33c:	df000315 	stw	fp,12(sp)
   8e340:	df000304 	addi	fp,sp,12
   8e344:	e13ffd15 	stw	r4,-12(fp)
   8e348:	e17ffe15 	stw	r5,-8(fp)
   8e34c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8e350:	e0bfff17 	ldw	r2,-4(fp)
}
   8e354:	e037883a 	mov	sp,fp
   8e358:	df000017 	ldw	fp,0(sp)
   8e35c:	dec00104 	addi	sp,sp,4
   8e360:	f800283a 	ret

0008e364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e364:	defffe04 	addi	sp,sp,-8
   8e368:	dfc00115 	stw	ra,4(sp)
   8e36c:	df000015 	stw	fp,0(sp)
   8e370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e374:	d0a00c17 	ldw	r2,-32720(gp)
   8e378:	10000326 	beq	r2,zero,8e388 <alt_get_errno+0x24>
   8e37c:	d0a00c17 	ldw	r2,-32720(gp)
   8e380:	103ee83a 	callr	r2
   8e384:	00000106 	br	8e38c <alt_get_errno+0x28>
   8e388:	d0a7fa04 	addi	r2,gp,-24600
}
   8e38c:	e037883a 	mov	sp,fp
   8e390:	dfc00117 	ldw	ra,4(sp)
   8e394:	df000017 	ldw	fp,0(sp)
   8e398:	dec00204 	addi	sp,sp,8
   8e39c:	f800283a 	ret

0008e3a0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e3a0:	defffb04 	addi	sp,sp,-20
   8e3a4:	dfc00415 	stw	ra,16(sp)
   8e3a8:	df000315 	stw	fp,12(sp)
   8e3ac:	df000304 	addi	fp,sp,12
   8e3b0:	e13ffe15 	stw	r4,-8(fp)
   8e3b4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e3b8:	e0bffe17 	ldw	r2,-8(fp)
   8e3bc:	10000616 	blt	r2,zero,8e3d8 <fstat+0x38>
   8e3c0:	e0bffe17 	ldw	r2,-8(fp)
   8e3c4:	10c00324 	muli	r3,r2,12
   8e3c8:	00800274 	movhi	r2,9
   8e3cc:	108be104 	addi	r2,r2,12164
   8e3d0:	1885883a 	add	r2,r3,r2
   8e3d4:	00000106 	br	8e3dc <fstat+0x3c>
   8e3d8:	0005883a 	mov	r2,zero
   8e3dc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8e3e0:	e0bffd17 	ldw	r2,-12(fp)
   8e3e4:	10001026 	beq	r2,zero,8e428 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e3e8:	e0bffd17 	ldw	r2,-12(fp)
   8e3ec:	10800017 	ldw	r2,0(r2)
   8e3f0:	10800817 	ldw	r2,32(r2)
   8e3f4:	10000726 	beq	r2,zero,8e414 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8e3f8:	e0bffd17 	ldw	r2,-12(fp)
   8e3fc:	10800017 	ldw	r2,0(r2)
   8e400:	10800817 	ldw	r2,32(r2)
   8e404:	e17fff17 	ldw	r5,-4(fp)
   8e408:	e13ffd17 	ldw	r4,-12(fp)
   8e40c:	103ee83a 	callr	r2
   8e410:	00000a06 	br	8e43c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e414:	e0bfff17 	ldw	r2,-4(fp)
   8e418:	00c80004 	movi	r3,8192
   8e41c:	10c00115 	stw	r3,4(r2)
      return 0;
   8e420:	0005883a 	mov	r2,zero
   8e424:	00000506 	br	8e43c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e428:	008e3640 	call	8e364 <alt_get_errno>
   8e42c:	1007883a 	mov	r3,r2
   8e430:	00801444 	movi	r2,81
   8e434:	18800015 	stw	r2,0(r3)
    return -1;
   8e438:	00bfffc4 	movi	r2,-1
  }
}
   8e43c:	e037883a 	mov	sp,fp
   8e440:	dfc00117 	ldw	ra,4(sp)
   8e444:	df000017 	ldw	fp,0(sp)
   8e448:	dec00204 	addi	sp,sp,8
   8e44c:	f800283a 	ret

0008e450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e450:	defffe04 	addi	sp,sp,-8
   8e454:	dfc00115 	stw	ra,4(sp)
   8e458:	df000015 	stw	fp,0(sp)
   8e45c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e460:	d0a00c17 	ldw	r2,-32720(gp)
   8e464:	10000326 	beq	r2,zero,8e474 <alt_get_errno+0x24>
   8e468:	d0a00c17 	ldw	r2,-32720(gp)
   8e46c:	103ee83a 	callr	r2
   8e470:	00000106 	br	8e478 <alt_get_errno+0x28>
   8e474:	d0a7fa04 	addi	r2,gp,-24600
}
   8e478:	e037883a 	mov	sp,fp
   8e47c:	dfc00117 	ldw	ra,4(sp)
   8e480:	df000017 	ldw	fp,0(sp)
   8e484:	dec00204 	addi	sp,sp,8
   8e488:	f800283a 	ret

0008e48c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e48c:	deffed04 	addi	sp,sp,-76
   8e490:	dfc01215 	stw	ra,72(sp)
   8e494:	df001115 	stw	fp,68(sp)
   8e498:	df001104 	addi	fp,sp,68
   8e49c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e4a0:	e0bfff17 	ldw	r2,-4(fp)
   8e4a4:	10000616 	blt	r2,zero,8e4c0 <isatty+0x34>
   8e4a8:	e0bfff17 	ldw	r2,-4(fp)
   8e4ac:	10c00324 	muli	r3,r2,12
   8e4b0:	00800274 	movhi	r2,9
   8e4b4:	108be104 	addi	r2,r2,12164
   8e4b8:	1885883a 	add	r2,r3,r2
   8e4bc:	00000106 	br	8e4c4 <isatty+0x38>
   8e4c0:	0005883a 	mov	r2,zero
   8e4c4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8e4c8:	e0bfef17 	ldw	r2,-68(fp)
   8e4cc:	10000e26 	beq	r2,zero,8e508 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e4d0:	e0bfef17 	ldw	r2,-68(fp)
   8e4d4:	10800017 	ldw	r2,0(r2)
   8e4d8:	10800817 	ldw	r2,32(r2)
   8e4dc:	1000021e 	bne	r2,zero,8e4e8 <isatty+0x5c>
    {
      return 1;
   8e4e0:	00800044 	movi	r2,1
   8e4e4:	00000d06 	br	8e51c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e4e8:	e0bff004 	addi	r2,fp,-64
   8e4ec:	100b883a 	mov	r5,r2
   8e4f0:	e13fff17 	ldw	r4,-4(fp)
   8e4f4:	008e3a00 	call	8e3a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e4f8:	e0bff117 	ldw	r2,-60(fp)
   8e4fc:	10880020 	cmpeqi	r2,r2,8192
   8e500:	10803fcc 	andi	r2,r2,255
   8e504:	00000506 	br	8e51c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e508:	008e4500 	call	8e450 <alt_get_errno>
   8e50c:	1007883a 	mov	r3,r2
   8e510:	00801444 	movi	r2,81
   8e514:	18800015 	stw	r2,0(r3)
    return 0;
   8e518:	0005883a 	mov	r2,zero
  }
}
   8e51c:	e037883a 	mov	sp,fp
   8e520:	dfc00117 	ldw	ra,4(sp)
   8e524:	df000017 	ldw	fp,0(sp)
   8e528:	dec00204 	addi	sp,sp,8
   8e52c:	f800283a 	ret

0008e530 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e530:	defffc04 	addi	sp,sp,-16
   8e534:	df000315 	stw	fp,12(sp)
   8e538:	df000304 	addi	fp,sp,12
   8e53c:	e13ffd15 	stw	r4,-12(fp)
   8e540:	e17ffe15 	stw	r5,-8(fp)
   8e544:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e548:	e0fffe17 	ldw	r3,-8(fp)
   8e54c:	e0bffd17 	ldw	r2,-12(fp)
   8e550:	18800c26 	beq	r3,r2,8e584 <alt_load_section+0x54>
  {
    while( to != end )
   8e554:	00000806 	br	8e578 <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e558:	e0bffe17 	ldw	r2,-8(fp)
   8e55c:	10c00104 	addi	r3,r2,4
   8e560:	e0fffe15 	stw	r3,-8(fp)
   8e564:	e0fffd17 	ldw	r3,-12(fp)
   8e568:	19000104 	addi	r4,r3,4
   8e56c:	e13ffd15 	stw	r4,-12(fp)
   8e570:	18c00017 	ldw	r3,0(r3)
   8e574:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e578:	e0fffe17 	ldw	r3,-8(fp)
   8e57c:	e0bfff17 	ldw	r2,-4(fp)
   8e580:	18bff51e 	bne	r3,r2,8e558 <rx_descriptor_end+0xfff8e4f8>
    {
      *to++ = *from++;
    }
  }
}
   8e584:	0001883a 	nop
   8e588:	e037883a 	mov	sp,fp
   8e58c:	df000017 	ldw	fp,0(sp)
   8e590:	dec00104 	addi	sp,sp,4
   8e594:	f800283a 	ret

0008e598 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e598:	defffe04 	addi	sp,sp,-8
   8e59c:	dfc00115 	stw	ra,4(sp)
   8e5a0:	df000015 	stw	fp,0(sp)
   8e5a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e5a8:	01800274 	movhi	r6,9
   8e5ac:	31908404 	addi	r6,r6,16912
   8e5b0:	01400274 	movhi	r5,9
   8e5b4:	2948ae04 	addi	r5,r5,8888
   8e5b8:	01000274 	movhi	r4,9
   8e5bc:	21108404 	addi	r4,r4,16912
   8e5c0:	008e5300 	call	8e530 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e5c4:	01800234 	movhi	r6,8
   8e5c8:	31809104 	addi	r6,r6,580
   8e5cc:	01400234 	movhi	r5,8
   8e5d0:	29400804 	addi	r5,r5,32
   8e5d4:	01000234 	movhi	r4,8
   8e5d8:	21000804 	addi	r4,r4,32
   8e5dc:	008e5300 	call	8e530 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e5e0:	01800274 	movhi	r6,9
   8e5e4:	3188ae04 	addi	r6,r6,8888
   8e5e8:	01400274 	movhi	r5,9
   8e5ec:	2946e704 	addi	r5,r5,7068
   8e5f0:	01000274 	movhi	r4,9
   8e5f4:	2106e704 	addi	r4,r4,7068
   8e5f8:	008e5300 	call	8e530 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e5fc:	008e2f00 	call	8e2f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e600:	0090b980 	call	90b98 <alt_icache_flush_all>
}
   8e604:	0001883a 	nop
   8e608:	e037883a 	mov	sp,fp
   8e60c:	dfc00117 	ldw	ra,4(sp)
   8e610:	df000017 	ldw	fp,0(sp)
   8e614:	dec00204 	addi	sp,sp,8
   8e618:	f800283a 	ret

0008e61c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e61c:	defffe04 	addi	sp,sp,-8
   8e620:	dfc00115 	stw	ra,4(sp)
   8e624:	df000015 	stw	fp,0(sp)
   8e628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e62c:	d0a00c17 	ldw	r2,-32720(gp)
   8e630:	10000326 	beq	r2,zero,8e640 <alt_get_errno+0x24>
   8e634:	d0a00c17 	ldw	r2,-32720(gp)
   8e638:	103ee83a 	callr	r2
   8e63c:	00000106 	br	8e644 <alt_get_errno+0x28>
   8e640:	d0a7fa04 	addi	r2,gp,-24600
}
   8e644:	e037883a 	mov	sp,fp
   8e648:	dfc00117 	ldw	ra,4(sp)
   8e64c:	df000017 	ldw	fp,0(sp)
   8e650:	dec00204 	addi	sp,sp,8
   8e654:	f800283a 	ret

0008e658 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e658:	defff904 	addi	sp,sp,-28
   8e65c:	dfc00615 	stw	ra,24(sp)
   8e660:	df000515 	stw	fp,20(sp)
   8e664:	df000504 	addi	fp,sp,20
   8e668:	e13ffd15 	stw	r4,-12(fp)
   8e66c:	e17ffe15 	stw	r5,-8(fp)
   8e670:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e674:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e678:	e0bffd17 	ldw	r2,-12(fp)
   8e67c:	10000616 	blt	r2,zero,8e698 <lseek+0x40>
   8e680:	e0bffd17 	ldw	r2,-12(fp)
   8e684:	10c00324 	muli	r3,r2,12
   8e688:	00800274 	movhi	r2,9
   8e68c:	108be104 	addi	r2,r2,12164
   8e690:	1885883a 	add	r2,r3,r2
   8e694:	00000106 	br	8e69c <lseek+0x44>
   8e698:	0005883a 	mov	r2,zero
   8e69c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e6a0:	e0bffc17 	ldw	r2,-16(fp)
   8e6a4:	10001026 	beq	r2,zero,8e6e8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e6a8:	e0bffc17 	ldw	r2,-16(fp)
   8e6ac:	10800017 	ldw	r2,0(r2)
   8e6b0:	10800717 	ldw	r2,28(r2)
   8e6b4:	10000926 	beq	r2,zero,8e6dc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e6b8:	e0bffc17 	ldw	r2,-16(fp)
   8e6bc:	10800017 	ldw	r2,0(r2)
   8e6c0:	10800717 	ldw	r2,28(r2)
   8e6c4:	e1bfff17 	ldw	r6,-4(fp)
   8e6c8:	e17ffe17 	ldw	r5,-8(fp)
   8e6cc:	e13ffc17 	ldw	r4,-16(fp)
   8e6d0:	103ee83a 	callr	r2
   8e6d4:	e0bffb15 	stw	r2,-20(fp)
   8e6d8:	00000506 	br	8e6f0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e6dc:	00bfde84 	movi	r2,-134
   8e6e0:	e0bffb15 	stw	r2,-20(fp)
   8e6e4:	00000206 	br	8e6f0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e6e8:	00bfebc4 	movi	r2,-81
   8e6ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e6f0:	e0bffb17 	ldw	r2,-20(fp)
   8e6f4:	1000070e 	bge	r2,zero,8e714 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8e6f8:	008e61c0 	call	8e61c <alt_get_errno>
   8e6fc:	1007883a 	mov	r3,r2
   8e700:	e0bffb17 	ldw	r2,-20(fp)
   8e704:	0085c83a 	sub	r2,zero,r2
   8e708:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e70c:	00bfffc4 	movi	r2,-1
   8e710:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e714:	e0bffb17 	ldw	r2,-20(fp)
}
   8e718:	e037883a 	mov	sp,fp
   8e71c:	dfc00117 	ldw	ra,4(sp)
   8e720:	df000017 	ldw	fp,0(sp)
   8e724:	dec00204 	addi	sp,sp,8
   8e728:	f800283a 	ret

0008e72c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e72c:	defffd04 	addi	sp,sp,-12
   8e730:	dfc00215 	stw	ra,8(sp)
   8e734:	df000115 	stw	fp,4(sp)
   8e738:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e73c:	0009883a 	mov	r4,zero
   8e740:	008ee0c0 	call	8ee0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e744:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e748:	008ee440 	call	8ee44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e74c:	01800274 	movhi	r6,9
   8e750:	31889e04 	addi	r6,r6,8824
   8e754:	01400274 	movhi	r5,9
   8e758:	29489e04 	addi	r5,r5,8824
   8e75c:	01000274 	movhi	r4,9
   8e760:	21089e04 	addi	r4,r4,8824
   8e764:	0090f300 	call	90f30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e768:	0090a480 	call	90a48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e76c:	01000274 	movhi	r4,9
   8e770:	2102aa04 	addi	r4,r4,2728
   8e774:	00916a00 	call	916a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e778:	d0a7fe17 	ldw	r2,-24584(gp)
   8e77c:	d0e7ff17 	ldw	r3,-24580(gp)
   8e780:	d1280017 	ldw	r4,-24576(gp)
   8e784:	200d883a 	mov	r6,r4
   8e788:	180b883a 	mov	r5,r3
   8e78c:	1009883a 	mov	r4,r2
   8e790:	008169c0 	call	8169c <main>
   8e794:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8e798:	01000044 	movi	r4,1
   8e79c:	008e2200 	call	8e220 <close>
  exit (result);
   8e7a0:	e13fff17 	ldw	r4,-4(fp)
   8e7a4:	00916b40 	call	916b4 <exit>

0008e7a8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8e7a8:	defffe04 	addi	sp,sp,-8
   8e7ac:	df000115 	stw	fp,4(sp)
   8e7b0:	df000104 	addi	fp,sp,4
   8e7b4:	e13fff15 	stw	r4,-4(fp)
}
   8e7b8:	0001883a 	nop
   8e7bc:	e037883a 	mov	sp,fp
   8e7c0:	df000017 	ldw	fp,0(sp)
   8e7c4:	dec00104 	addi	sp,sp,4
   8e7c8:	f800283a 	ret

0008e7cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e7cc:	defffe04 	addi	sp,sp,-8
   8e7d0:	df000115 	stw	fp,4(sp)
   8e7d4:	df000104 	addi	fp,sp,4
   8e7d8:	e13fff15 	stw	r4,-4(fp)
}
   8e7dc:	0001883a 	nop
   8e7e0:	e037883a 	mov	sp,fp
   8e7e4:	df000017 	ldw	fp,0(sp)
   8e7e8:	dec00104 	addi	sp,sp,4
   8e7ec:	f800283a 	ret

0008e7f0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8e7f0:	defff204 	addi	sp,sp,-56
   8e7f4:	dfc00a15 	stw	ra,40(sp)
   8e7f8:	df000915 	stw	fp,36(sp)
   8e7fc:	df000904 	addi	fp,sp,36
   8e800:	e13fff15 	stw	r4,-4(fp)
   8e804:	e1400215 	stw	r5,8(fp)
   8e808:	e1800315 	stw	r6,12(fp)
   8e80c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   8e810:	e0800204 	addi	r2,fp,8
   8e814:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8e818:	e0bfff17 	ldw	r2,-4(fp)
   8e81c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   8e820:	00006f06 	br	8e9e0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8e824:	e0bff807 	ldb	r2,-32(fp)
   8e828:	10800960 	cmpeqi	r2,r2,37
   8e82c:	1000041e 	bne	r2,zero,8e840 <alt_printf+0x50>
        {
            alt_putchar(c);
   8e830:	e0bff807 	ldb	r2,-32(fp)
   8e834:	1009883a 	mov	r4,r2
   8e838:	008ea1c0 	call	8ea1c <alt_putchar>
   8e83c:	00006806 	br	8e9e0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8e840:	e0bff717 	ldw	r2,-36(fp)
   8e844:	10c00044 	addi	r3,r2,1
   8e848:	e0fff715 	stw	r3,-36(fp)
   8e84c:	10800003 	ldbu	r2,0(r2)
   8e850:	e0bff805 	stb	r2,-32(fp)
   8e854:	e0bff807 	ldb	r2,-32(fp)
   8e858:	10006926 	beq	r2,zero,8ea00 <alt_printf+0x210>
            {
                if (c == '%')
   8e85c:	e0bff807 	ldb	r2,-32(fp)
   8e860:	10800958 	cmpnei	r2,r2,37
   8e864:	1000041e 	bne	r2,zero,8e878 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8e868:	e0bff807 	ldb	r2,-32(fp)
   8e86c:	1009883a 	mov	r4,r2
   8e870:	008ea1c0 	call	8ea1c <alt_putchar>
   8e874:	00005a06 	br	8e9e0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   8e878:	e0bff807 	ldb	r2,-32(fp)
   8e87c:	108018d8 	cmpnei	r2,r2,99
   8e880:	1000081e 	bne	r2,zero,8e8a4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   8e884:	e0bffe17 	ldw	r2,-8(fp)
   8e888:	10c00104 	addi	r3,r2,4
   8e88c:	e0fffe15 	stw	r3,-8(fp)
   8e890:	10800017 	ldw	r2,0(r2)
   8e894:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   8e898:	e13ffd17 	ldw	r4,-12(fp)
   8e89c:	008ea1c0 	call	8ea1c <alt_putchar>
   8e8a0:	00004f06 	br	8e9e0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   8e8a4:	e0bff807 	ldb	r2,-32(fp)
   8e8a8:	10801e18 	cmpnei	r2,r2,120
   8e8ac:	1000341e 	bne	r2,zero,8e980 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8e8b0:	e0bffe17 	ldw	r2,-8(fp)
   8e8b4:	10c00104 	addi	r3,r2,4
   8e8b8:	e0fffe15 	stw	r3,-8(fp)
   8e8bc:	10800017 	ldw	r2,0(r2)
   8e8c0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8e8c4:	e0bffb17 	ldw	r2,-20(fp)
   8e8c8:	1000031e 	bne	r2,zero,8e8d8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   8e8cc:	01000c04 	movi	r4,48
   8e8d0:	008ea1c0 	call	8ea1c <alt_putchar>
                        continue;
   8e8d4:	00004206 	br	8e9e0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   8e8d8:	00800704 	movi	r2,28
   8e8dc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   8e8e0:	00000306 	br	8e8f0 <alt_printf+0x100>
                        digit_shift -= 4;
   8e8e4:	e0bff917 	ldw	r2,-28(fp)
   8e8e8:	10bfff04 	addi	r2,r2,-4
   8e8ec:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8e8f0:	00c003c4 	movi	r3,15
   8e8f4:	e0bff917 	ldw	r2,-28(fp)
   8e8f8:	1884983a 	sll	r2,r3,r2
   8e8fc:	1007883a 	mov	r3,r2
   8e900:	e0bffb17 	ldw	r2,-20(fp)
   8e904:	1884703a 	and	r2,r3,r2
   8e908:	103ff626 	beq	r2,zero,8e8e4 <rx_descriptor_end+0xfff8e884>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8e90c:	00001906 	br	8e974 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8e910:	00c003c4 	movi	r3,15
   8e914:	e0bff917 	ldw	r2,-28(fp)
   8e918:	1884983a 	sll	r2,r3,r2
   8e91c:	1007883a 	mov	r3,r2
   8e920:	e0bffb17 	ldw	r2,-20(fp)
   8e924:	1886703a 	and	r3,r3,r2
   8e928:	e0bff917 	ldw	r2,-28(fp)
   8e92c:	1884d83a 	srl	r2,r3,r2
   8e930:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   8e934:	e0bffc17 	ldw	r2,-16(fp)
   8e938:	108002a8 	cmpgeui	r2,r2,10
   8e93c:	1000041e 	bne	r2,zero,8e950 <alt_printf+0x160>
                            c = '0' + digit;
   8e940:	e0bffc17 	ldw	r2,-16(fp)
   8e944:	10800c04 	addi	r2,r2,48
   8e948:	e0bff805 	stb	r2,-32(fp)
   8e94c:	00000306 	br	8e95c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   8e950:	e0bffc17 	ldw	r2,-16(fp)
   8e954:	108015c4 	addi	r2,r2,87
   8e958:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   8e95c:	e0bff807 	ldb	r2,-32(fp)
   8e960:	1009883a 	mov	r4,r2
   8e964:	008ea1c0 	call	8ea1c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8e968:	e0bff917 	ldw	r2,-28(fp)
   8e96c:	10bfff04 	addi	r2,r2,-4
   8e970:	e0bff915 	stw	r2,-28(fp)
   8e974:	e0bff917 	ldw	r2,-28(fp)
   8e978:	103fe50e 	bge	r2,zero,8e910 <rx_descriptor_end+0xfff8e8b0>
   8e97c:	00001806 	br	8e9e0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8e980:	e0bff807 	ldb	r2,-32(fp)
   8e984:	10801cd8 	cmpnei	r2,r2,115
   8e988:	1000151e 	bne	r2,zero,8e9e0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8e98c:	e0bffe17 	ldw	r2,-8(fp)
   8e990:	10c00104 	addi	r3,r2,4
   8e994:	e0fffe15 	stw	r3,-8(fp)
   8e998:	10800017 	ldw	r2,0(r2)
   8e99c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   8e9a0:	00000906 	br	8e9c8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   8e9a4:	e0bffa17 	ldw	r2,-24(fp)
   8e9a8:	10c00044 	addi	r3,r2,1
   8e9ac:	e0fffa15 	stw	r3,-24(fp)
   8e9b0:	10800003 	ldbu	r2,0(r2)
   8e9b4:	10803fcc 	andi	r2,r2,255
   8e9b8:	1080201c 	xori	r2,r2,128
   8e9bc:	10bfe004 	addi	r2,r2,-128
   8e9c0:	1009883a 	mov	r4,r2
   8e9c4:	008ea1c0 	call	8ea1c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8e9c8:	e0bffa17 	ldw	r2,-24(fp)
   8e9cc:	10800003 	ldbu	r2,0(r2)
   8e9d0:	10803fcc 	andi	r2,r2,255
   8e9d4:	1080201c 	xori	r2,r2,128
   8e9d8:	10bfe004 	addi	r2,r2,-128
   8e9dc:	103ff11e 	bne	r2,zero,8e9a4 <rx_descriptor_end+0xfff8e944>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8e9e0:	e0bff717 	ldw	r2,-36(fp)
   8e9e4:	10c00044 	addi	r3,r2,1
   8e9e8:	e0fff715 	stw	r3,-36(fp)
   8e9ec:	10800003 	ldbu	r2,0(r2)
   8e9f0:	e0bff805 	stb	r2,-32(fp)
   8e9f4:	e0bff807 	ldb	r2,-32(fp)
   8e9f8:	103f8a1e 	bne	r2,zero,8e824 <rx_descriptor_end+0xfff8e7c4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8e9fc:	00000106 	br	8ea04 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   8ea00:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8ea04:	0001883a 	nop
   8ea08:	e037883a 	mov	sp,fp
   8ea0c:	dfc00117 	ldw	ra,4(sp)
   8ea10:	df000017 	ldw	fp,0(sp)
   8ea14:	dec00504 	addi	sp,sp,20
   8ea18:	f800283a 	ret

0008ea1c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8ea1c:	defffd04 	addi	sp,sp,-12
   8ea20:	dfc00215 	stw	ra,8(sp)
   8ea24:	df000115 	stw	fp,4(sp)
   8ea28:	df000104 	addi	fp,sp,4
   8ea2c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   8ea30:	d0a00217 	ldw	r2,-32760(gp)
   8ea34:	10800217 	ldw	r2,8(r2)
   8ea38:	100b883a 	mov	r5,r2
   8ea3c:	e13fff17 	ldw	r4,-4(fp)
   8ea40:	00918080 	call	91808 <putc>
#endif
#endif
}
   8ea44:	e037883a 	mov	sp,fp
   8ea48:	dfc00117 	ldw	ra,4(sp)
   8ea4c:	df000017 	ldw	fp,0(sp)
   8ea50:	dec00204 	addi	sp,sp,8
   8ea54:	f800283a 	ret

0008ea58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ea58:	defffe04 	addi	sp,sp,-8
   8ea5c:	dfc00115 	stw	ra,4(sp)
   8ea60:	df000015 	stw	fp,0(sp)
   8ea64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ea68:	d0a00c17 	ldw	r2,-32720(gp)
   8ea6c:	10000326 	beq	r2,zero,8ea7c <alt_get_errno+0x24>
   8ea70:	d0a00c17 	ldw	r2,-32720(gp)
   8ea74:	103ee83a 	callr	r2
   8ea78:	00000106 	br	8ea80 <alt_get_errno+0x28>
   8ea7c:	d0a7fa04 	addi	r2,gp,-24600
}
   8ea80:	e037883a 	mov	sp,fp
   8ea84:	dfc00117 	ldw	ra,4(sp)
   8ea88:	df000017 	ldw	fp,0(sp)
   8ea8c:	dec00204 	addi	sp,sp,8
   8ea90:	f800283a 	ret

0008ea94 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8ea94:	defff904 	addi	sp,sp,-28
   8ea98:	dfc00615 	stw	ra,24(sp)
   8ea9c:	df000515 	stw	fp,20(sp)
   8eaa0:	df000504 	addi	fp,sp,20
   8eaa4:	e13ffd15 	stw	r4,-12(fp)
   8eaa8:	e17ffe15 	stw	r5,-8(fp)
   8eaac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8eab0:	e0bffd17 	ldw	r2,-12(fp)
   8eab4:	10000616 	blt	r2,zero,8ead0 <read+0x3c>
   8eab8:	e0bffd17 	ldw	r2,-12(fp)
   8eabc:	10c00324 	muli	r3,r2,12
   8eac0:	00800274 	movhi	r2,9
   8eac4:	108be104 	addi	r2,r2,12164
   8eac8:	1885883a 	add	r2,r3,r2
   8eacc:	00000106 	br	8ead4 <read+0x40>
   8ead0:	0005883a 	mov	r2,zero
   8ead4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ead8:	e0bffb17 	ldw	r2,-20(fp)
   8eadc:	10002226 	beq	r2,zero,8eb68 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eae0:	e0bffb17 	ldw	r2,-20(fp)
   8eae4:	10800217 	ldw	r2,8(r2)
   8eae8:	108000cc 	andi	r2,r2,3
   8eaec:	10800060 	cmpeqi	r2,r2,1
   8eaf0:	1000181e 	bne	r2,zero,8eb54 <read+0xc0>
        (fd->dev->read))
   8eaf4:	e0bffb17 	ldw	r2,-20(fp)
   8eaf8:	10800017 	ldw	r2,0(r2)
   8eafc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eb00:	10001426 	beq	r2,zero,8eb54 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8eb04:	e0bffb17 	ldw	r2,-20(fp)
   8eb08:	10800017 	ldw	r2,0(r2)
   8eb0c:	10800517 	ldw	r2,20(r2)
   8eb10:	e0ffff17 	ldw	r3,-4(fp)
   8eb14:	180d883a 	mov	r6,r3
   8eb18:	e17ffe17 	ldw	r5,-8(fp)
   8eb1c:	e13ffb17 	ldw	r4,-20(fp)
   8eb20:	103ee83a 	callr	r2
   8eb24:	e0bffc15 	stw	r2,-16(fp)
   8eb28:	e0bffc17 	ldw	r2,-16(fp)
   8eb2c:	1000070e 	bge	r2,zero,8eb4c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8eb30:	008ea580 	call	8ea58 <alt_get_errno>
   8eb34:	1007883a 	mov	r3,r2
   8eb38:	e0bffc17 	ldw	r2,-16(fp)
   8eb3c:	0085c83a 	sub	r2,zero,r2
   8eb40:	18800015 	stw	r2,0(r3)
          return -1;
   8eb44:	00bfffc4 	movi	r2,-1
   8eb48:	00000c06 	br	8eb7c <read+0xe8>
        }
        return rval;
   8eb4c:	e0bffc17 	ldw	r2,-16(fp)
   8eb50:	00000a06 	br	8eb7c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8eb54:	008ea580 	call	8ea58 <alt_get_errno>
   8eb58:	1007883a 	mov	r3,r2
   8eb5c:	00800344 	movi	r2,13
   8eb60:	18800015 	stw	r2,0(r3)
   8eb64:	00000406 	br	8eb78 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8eb68:	008ea580 	call	8ea58 <alt_get_errno>
   8eb6c:	1007883a 	mov	r3,r2
   8eb70:	00801444 	movi	r2,81
   8eb74:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8eb78:	00bfffc4 	movi	r2,-1
}
   8eb7c:	e037883a 	mov	sp,fp
   8eb80:	dfc00117 	ldw	ra,4(sp)
   8eb84:	df000017 	ldw	fp,0(sp)
   8eb88:	dec00204 	addi	sp,sp,8
   8eb8c:	f800283a 	ret

0008eb90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8eb90:	defffe04 	addi	sp,sp,-8
   8eb94:	df000115 	stw	fp,4(sp)
   8eb98:	df000104 	addi	fp,sp,4
   8eb9c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8eba0:	e0bfff17 	ldw	r2,-4(fp)
   8eba4:	108000d0 	cmplti	r2,r2,3
   8eba8:	10000d1e 	bne	r2,zero,8ebe0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8ebac:	00800274 	movhi	r2,9
   8ebb0:	108be104 	addi	r2,r2,12164
   8ebb4:	e0ffff17 	ldw	r3,-4(fp)
   8ebb8:	18c00324 	muli	r3,r3,12
   8ebbc:	10c5883a 	add	r2,r2,r3
   8ebc0:	10800204 	addi	r2,r2,8
   8ebc4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ebc8:	00800274 	movhi	r2,9
   8ebcc:	108be104 	addi	r2,r2,12164
   8ebd0:	e0ffff17 	ldw	r3,-4(fp)
   8ebd4:	18c00324 	muli	r3,r3,12
   8ebd8:	10c5883a 	add	r2,r2,r3
   8ebdc:	10000015 	stw	zero,0(r2)
  }
}
   8ebe0:	0001883a 	nop
   8ebe4:	e037883a 	mov	sp,fp
   8ebe8:	df000017 	ldw	fp,0(sp)
   8ebec:	dec00104 	addi	sp,sp,4
   8ebf0:	f800283a 	ret

0008ebf4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ebf4:	defff904 	addi	sp,sp,-28
   8ebf8:	df000615 	stw	fp,24(sp)
   8ebfc:	df000604 	addi	fp,sp,24
   8ec00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ec04:	0005303a 	rdctl	r2,status
   8ec08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ec0c:	e0fffe17 	ldw	r3,-8(fp)
   8ec10:	00bfff84 	movi	r2,-2
   8ec14:	1884703a 	and	r2,r3,r2
   8ec18:	1001703a 	wrctl	status,r2
  
  return context;
   8ec1c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ec20:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ec24:	d0a00d17 	ldw	r2,-32716(gp)
   8ec28:	10c000c4 	addi	r3,r2,3
   8ec2c:	00bfff04 	movi	r2,-4
   8ec30:	1884703a 	and	r2,r3,r2
   8ec34:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ec38:	d0e00d17 	ldw	r3,-32716(gp)
   8ec3c:	e0bfff17 	ldw	r2,-4(fp)
   8ec40:	1887883a 	add	r3,r3,r2
   8ec44:	00800374 	movhi	r2,13
   8ec48:	10ac0004 	addi	r2,r2,-20480
   8ec4c:	10c0062e 	bgeu	r2,r3,8ec68 <sbrk+0x74>
   8ec50:	e0bffb17 	ldw	r2,-20(fp)
   8ec54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ec58:	e0bffa17 	ldw	r2,-24(fp)
   8ec5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ec60:	00bfffc4 	movi	r2,-1
   8ec64:	00000b06 	br	8ec94 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8ec68:	d0a00d17 	ldw	r2,-32716(gp)
   8ec6c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8ec70:	d0e00d17 	ldw	r3,-32716(gp)
   8ec74:	e0bfff17 	ldw	r2,-4(fp)
   8ec78:	1885883a 	add	r2,r3,r2
   8ec7c:	d0a00d15 	stw	r2,-32716(gp)
   8ec80:	e0bffb17 	ldw	r2,-20(fp)
   8ec84:	e0bffc15 	stw	r2,-16(fp)
   8ec88:	e0bffc17 	ldw	r2,-16(fp)
   8ec8c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8ec90:	e0bffd17 	ldw	r2,-12(fp)
} 
   8ec94:	e037883a 	mov	sp,fp
   8ec98:	df000017 	ldw	fp,0(sp)
   8ec9c:	dec00104 	addi	sp,sp,4
   8eca0:	f800283a 	ret

0008eca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8eca4:	defffe04 	addi	sp,sp,-8
   8eca8:	dfc00115 	stw	ra,4(sp)
   8ecac:	df000015 	stw	fp,0(sp)
   8ecb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ecb4:	d0a00c17 	ldw	r2,-32720(gp)
   8ecb8:	10000326 	beq	r2,zero,8ecc8 <alt_get_errno+0x24>
   8ecbc:	d0a00c17 	ldw	r2,-32720(gp)
   8ecc0:	103ee83a 	callr	r2
   8ecc4:	00000106 	br	8eccc <alt_get_errno+0x28>
   8ecc8:	d0a7fa04 	addi	r2,gp,-24600
}
   8eccc:	e037883a 	mov	sp,fp
   8ecd0:	dfc00117 	ldw	ra,4(sp)
   8ecd4:	df000017 	ldw	fp,0(sp)
   8ecd8:	dec00204 	addi	sp,sp,8
   8ecdc:	f800283a 	ret

0008ece0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8ece0:	defff904 	addi	sp,sp,-28
   8ece4:	dfc00615 	stw	ra,24(sp)
   8ece8:	df000515 	stw	fp,20(sp)
   8ecec:	df000504 	addi	fp,sp,20
   8ecf0:	e13ffd15 	stw	r4,-12(fp)
   8ecf4:	e17ffe15 	stw	r5,-8(fp)
   8ecf8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ecfc:	e0bffd17 	ldw	r2,-12(fp)
   8ed00:	10000616 	blt	r2,zero,8ed1c <write+0x3c>
   8ed04:	e0bffd17 	ldw	r2,-12(fp)
   8ed08:	10c00324 	muli	r3,r2,12
   8ed0c:	00800274 	movhi	r2,9
   8ed10:	108be104 	addi	r2,r2,12164
   8ed14:	1885883a 	add	r2,r3,r2
   8ed18:	00000106 	br	8ed20 <write+0x40>
   8ed1c:	0005883a 	mov	r2,zero
   8ed20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ed24:	e0bffb17 	ldw	r2,-20(fp)
   8ed28:	10002126 	beq	r2,zero,8edb0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8ed2c:	e0bffb17 	ldw	r2,-20(fp)
   8ed30:	10800217 	ldw	r2,8(r2)
   8ed34:	108000cc 	andi	r2,r2,3
   8ed38:	10001826 	beq	r2,zero,8ed9c <write+0xbc>
   8ed3c:	e0bffb17 	ldw	r2,-20(fp)
   8ed40:	10800017 	ldw	r2,0(r2)
   8ed44:	10800617 	ldw	r2,24(r2)
   8ed48:	10001426 	beq	r2,zero,8ed9c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8ed4c:	e0bffb17 	ldw	r2,-20(fp)
   8ed50:	10800017 	ldw	r2,0(r2)
   8ed54:	10800617 	ldw	r2,24(r2)
   8ed58:	e0ffff17 	ldw	r3,-4(fp)
   8ed5c:	180d883a 	mov	r6,r3
   8ed60:	e17ffe17 	ldw	r5,-8(fp)
   8ed64:	e13ffb17 	ldw	r4,-20(fp)
   8ed68:	103ee83a 	callr	r2
   8ed6c:	e0bffc15 	stw	r2,-16(fp)
   8ed70:	e0bffc17 	ldw	r2,-16(fp)
   8ed74:	1000070e 	bge	r2,zero,8ed94 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8ed78:	008eca40 	call	8eca4 <alt_get_errno>
   8ed7c:	1007883a 	mov	r3,r2
   8ed80:	e0bffc17 	ldw	r2,-16(fp)
   8ed84:	0085c83a 	sub	r2,zero,r2
   8ed88:	18800015 	stw	r2,0(r3)
        return -1;
   8ed8c:	00bfffc4 	movi	r2,-1
   8ed90:	00000c06 	br	8edc4 <write+0xe4>
      }
      return rval;
   8ed94:	e0bffc17 	ldw	r2,-16(fp)
   8ed98:	00000a06 	br	8edc4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8ed9c:	008eca40 	call	8eca4 <alt_get_errno>
   8eda0:	1007883a 	mov	r3,r2
   8eda4:	00800344 	movi	r2,13
   8eda8:	18800015 	stw	r2,0(r3)
   8edac:	00000406 	br	8edc0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8edb0:	008eca40 	call	8eca4 <alt_get_errno>
   8edb4:	1007883a 	mov	r3,r2
   8edb8:	00801444 	movi	r2,81
   8edbc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8edc0:	00bfffc4 	movi	r2,-1
}
   8edc4:	e037883a 	mov	sp,fp
   8edc8:	dfc00117 	ldw	ra,4(sp)
   8edcc:	df000017 	ldw	fp,0(sp)
   8edd0:	dec00204 	addi	sp,sp,8
   8edd4:	f800283a 	ret

0008edd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8edd8:	defffd04 	addi	sp,sp,-12
   8eddc:	dfc00215 	stw	ra,8(sp)
   8ede0:	df000115 	stw	fp,4(sp)
   8ede4:	df000104 	addi	fp,sp,4
   8ede8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8edec:	d1600904 	addi	r5,gp,-32732
   8edf0:	e13fff17 	ldw	r4,-4(fp)
   8edf4:	00909a40 	call	909a4 <alt_dev_llist_insert>
}
   8edf8:	e037883a 	mov	sp,fp
   8edfc:	dfc00117 	ldw	ra,4(sp)
   8ee00:	df000017 	ldw	fp,0(sp)
   8ee04:	dec00204 	addi	sp,sp,8
   8ee08:	f800283a 	ret

0008ee0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8ee0c:	defffd04 	addi	sp,sp,-12
   8ee10:	dfc00215 	stw	ra,8(sp)
   8ee14:	df000115 	stw	fp,4(sp)
   8ee18:	df000104 	addi	fp,sp,4
   8ee1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   8ee20:	00913a40 	call	913a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8ee24:	00800044 	movi	r2,1
   8ee28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8ee2c:	0001883a 	nop
   8ee30:	e037883a 	mov	sp,fp
   8ee34:	dfc00117 	ldw	ra,4(sp)
   8ee38:	df000017 	ldw	fp,0(sp)
   8ee3c:	dec00204 	addi	sp,sp,8
   8ee40:	f800283a 	ret

0008ee44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8ee44:	defffe04 	addi	sp,sp,-8
   8ee48:	dfc00115 	stw	ra,4(sp)
   8ee4c:	df000015 	stw	fp,0(sp)
   8ee50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8ee54:	01c000b4 	movhi	r7,2
   8ee58:	39e1a804 	addi	r7,r7,-31072
   8ee5c:	018000c4 	movi	r6,3
   8ee60:	000b883a 	mov	r5,zero
   8ee64:	01000434 	movhi	r4,16
   8ee68:	21092004 	addi	r4,r4,9344
   8ee6c:	00907480 	call	90748 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8ee70:	000d883a 	mov	r6,zero
   8ee74:	000b883a 	mov	r5,zero
   8ee78:	01000274 	movhi	r4,9
   8ee7c:	210c4b04 	addi	r4,r4,12588
   8ee80:	008f0380 	call	8f038 <altera_avalon_jtag_uart_init>
   8ee84:	01000274 	movhi	r4,9
   8ee88:	210c4104 	addi	r4,r4,12548
   8ee8c:	008edd80 	call	8edd8 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   8ee90:	01800044 	movi	r6,1
   8ee94:	000b883a 	mov	r5,zero
   8ee98:	01000274 	movhi	r4,9
   8ee9c:	21105904 	addi	r4,r4,16740
   8eea0:	00906280 	call	90628 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   8eea4:	01800084 	movi	r6,2
   8eea8:	000b883a 	mov	r5,zero
   8eeac:	01000274 	movhi	r4,9
   8eeb0:	21106504 	addi	r4,r4,16788
   8eeb4:	00906280 	call	90628 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   8eeb8:	0001883a 	nop
}
   8eebc:	0001883a 	nop
   8eec0:	e037883a 	mov	sp,fp
   8eec4:	dfc00117 	ldw	ra,4(sp)
   8eec8:	df000017 	ldw	fp,0(sp)
   8eecc:	dec00204 	addi	sp,sp,8
   8eed0:	f800283a 	ret

0008eed4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8eed4:	defffa04 	addi	sp,sp,-24
   8eed8:	dfc00515 	stw	ra,20(sp)
   8eedc:	df000415 	stw	fp,16(sp)
   8eee0:	df000404 	addi	fp,sp,16
   8eee4:	e13ffd15 	stw	r4,-12(fp)
   8eee8:	e17ffe15 	stw	r5,-8(fp)
   8eeec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8eef0:	e0bffd17 	ldw	r2,-12(fp)
   8eef4:	10800017 	ldw	r2,0(r2)
   8eef8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8eefc:	e0bffc17 	ldw	r2,-16(fp)
   8ef00:	10c00a04 	addi	r3,r2,40
   8ef04:	e0bffd17 	ldw	r2,-12(fp)
   8ef08:	10800217 	ldw	r2,8(r2)
   8ef0c:	100f883a 	mov	r7,r2
   8ef10:	e1bfff17 	ldw	r6,-4(fp)
   8ef14:	e17ffe17 	ldw	r5,-8(fp)
   8ef18:	1809883a 	mov	r4,r3
   8ef1c:	008f4fc0 	call	8f4fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8ef20:	e037883a 	mov	sp,fp
   8ef24:	dfc00117 	ldw	ra,4(sp)
   8ef28:	df000017 	ldw	fp,0(sp)
   8ef2c:	dec00204 	addi	sp,sp,8
   8ef30:	f800283a 	ret

0008ef34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8ef34:	defffa04 	addi	sp,sp,-24
   8ef38:	dfc00515 	stw	ra,20(sp)
   8ef3c:	df000415 	stw	fp,16(sp)
   8ef40:	df000404 	addi	fp,sp,16
   8ef44:	e13ffd15 	stw	r4,-12(fp)
   8ef48:	e17ffe15 	stw	r5,-8(fp)
   8ef4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ef50:	e0bffd17 	ldw	r2,-12(fp)
   8ef54:	10800017 	ldw	r2,0(r2)
   8ef58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ef5c:	e0bffc17 	ldw	r2,-16(fp)
   8ef60:	10c00a04 	addi	r3,r2,40
   8ef64:	e0bffd17 	ldw	r2,-12(fp)
   8ef68:	10800217 	ldw	r2,8(r2)
   8ef6c:	100f883a 	mov	r7,r2
   8ef70:	e1bfff17 	ldw	r6,-4(fp)
   8ef74:	e17ffe17 	ldw	r5,-8(fp)
   8ef78:	1809883a 	mov	r4,r3
   8ef7c:	008f7180 	call	8f718 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8ef80:	e037883a 	mov	sp,fp
   8ef84:	dfc00117 	ldw	ra,4(sp)
   8ef88:	df000017 	ldw	fp,0(sp)
   8ef8c:	dec00204 	addi	sp,sp,8
   8ef90:	f800283a 	ret

0008ef94 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8ef94:	defffc04 	addi	sp,sp,-16
   8ef98:	dfc00315 	stw	ra,12(sp)
   8ef9c:	df000215 	stw	fp,8(sp)
   8efa0:	df000204 	addi	fp,sp,8
   8efa4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8efa8:	e0bfff17 	ldw	r2,-4(fp)
   8efac:	10800017 	ldw	r2,0(r2)
   8efb0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8efb4:	e0bffe17 	ldw	r2,-8(fp)
   8efb8:	10c00a04 	addi	r3,r2,40
   8efbc:	e0bfff17 	ldw	r2,-4(fp)
   8efc0:	10800217 	ldw	r2,8(r2)
   8efc4:	100b883a 	mov	r5,r2
   8efc8:	1809883a 	mov	r4,r3
   8efcc:	008f3a40 	call	8f3a4 <altera_avalon_jtag_uart_close>
}
   8efd0:	e037883a 	mov	sp,fp
   8efd4:	dfc00117 	ldw	ra,4(sp)
   8efd8:	df000017 	ldw	fp,0(sp)
   8efdc:	dec00204 	addi	sp,sp,8
   8efe0:	f800283a 	ret

0008efe4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8efe4:	defffa04 	addi	sp,sp,-24
   8efe8:	dfc00515 	stw	ra,20(sp)
   8efec:	df000415 	stw	fp,16(sp)
   8eff0:	df000404 	addi	fp,sp,16
   8eff4:	e13ffd15 	stw	r4,-12(fp)
   8eff8:	e17ffe15 	stw	r5,-8(fp)
   8effc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f000:	e0bffd17 	ldw	r2,-12(fp)
   8f004:	10800017 	ldw	r2,0(r2)
   8f008:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f00c:	e0bffc17 	ldw	r2,-16(fp)
   8f010:	10800a04 	addi	r2,r2,40
   8f014:	e1bfff17 	ldw	r6,-4(fp)
   8f018:	e17ffe17 	ldw	r5,-8(fp)
   8f01c:	1009883a 	mov	r4,r2
   8f020:	008f40c0 	call	8f40c <altera_avalon_jtag_uart_ioctl>
}
   8f024:	e037883a 	mov	sp,fp
   8f028:	dfc00117 	ldw	ra,4(sp)
   8f02c:	df000017 	ldw	fp,0(sp)
   8f030:	dec00204 	addi	sp,sp,8
   8f034:	f800283a 	ret

0008f038 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f038:	defffa04 	addi	sp,sp,-24
   8f03c:	dfc00515 	stw	ra,20(sp)
   8f040:	df000415 	stw	fp,16(sp)
   8f044:	df000404 	addi	fp,sp,16
   8f048:	e13ffd15 	stw	r4,-12(fp)
   8f04c:	e17ffe15 	stw	r5,-8(fp)
   8f050:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f054:	e0bffd17 	ldw	r2,-12(fp)
   8f058:	00c00044 	movi	r3,1
   8f05c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f060:	e0bffd17 	ldw	r2,-12(fp)
   8f064:	10800017 	ldw	r2,0(r2)
   8f068:	10800104 	addi	r2,r2,4
   8f06c:	1007883a 	mov	r3,r2
   8f070:	e0bffd17 	ldw	r2,-12(fp)
   8f074:	10800817 	ldw	r2,32(r2)
   8f078:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f07c:	e0bffe17 	ldw	r2,-8(fp)
   8f080:	e0ffff17 	ldw	r3,-4(fp)
   8f084:	d8000015 	stw	zero,0(sp)
   8f088:	e1fffd17 	ldw	r7,-12(fp)
   8f08c:	01800274 	movhi	r6,9
   8f090:	31bc3e04 	addi	r6,r6,-3848
   8f094:	180b883a 	mov	r5,r3
   8f098:	1009883a 	mov	r4,r2
   8f09c:	0090bcc0 	call	90bcc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f0a0:	e0bffd17 	ldw	r2,-12(fp)
   8f0a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f0a8:	e0bffd17 	ldw	r2,-12(fp)
   8f0ac:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f0b0:	d0e80217 	ldw	r3,-24568(gp)
   8f0b4:	e1fffd17 	ldw	r7,-12(fp)
   8f0b8:	01800274 	movhi	r6,9
   8f0bc:	31bcc104 	addi	r6,r6,-3324
   8f0c0:	180b883a 	mov	r5,r3
   8f0c4:	1009883a 	mov	r4,r2
   8f0c8:	00907c40 	call	907c4 <alt_alarm_start>
   8f0cc:	1000040e 	bge	r2,zero,8f0e0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f0d0:	e0fffd17 	ldw	r3,-12(fp)
   8f0d4:	00a00034 	movhi	r2,32768
   8f0d8:	10bfffc4 	addi	r2,r2,-1
   8f0dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f0e0:	0001883a 	nop
   8f0e4:	e037883a 	mov	sp,fp
   8f0e8:	dfc00117 	ldw	ra,4(sp)
   8f0ec:	df000017 	ldw	fp,0(sp)
   8f0f0:	dec00204 	addi	sp,sp,8
   8f0f4:	f800283a 	ret

0008f0f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f0f8:	defff804 	addi	sp,sp,-32
   8f0fc:	df000715 	stw	fp,28(sp)
   8f100:	df000704 	addi	fp,sp,28
   8f104:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f108:	e0bfff17 	ldw	r2,-4(fp)
   8f10c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f110:	e0bffb17 	ldw	r2,-20(fp)
   8f114:	10800017 	ldw	r2,0(r2)
   8f118:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f11c:	e0bffc17 	ldw	r2,-16(fp)
   8f120:	10800104 	addi	r2,r2,4
   8f124:	10800037 	ldwio	r2,0(r2)
   8f128:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f12c:	e0bffd17 	ldw	r2,-12(fp)
   8f130:	1080c00c 	andi	r2,r2,768
   8f134:	10006d26 	beq	r2,zero,8f2ec <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f138:	e0bffd17 	ldw	r2,-12(fp)
   8f13c:	1080400c 	andi	r2,r2,256
   8f140:	10003526 	beq	r2,zero,8f218 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f144:	00800074 	movhi	r2,1
   8f148:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f14c:	e0bffb17 	ldw	r2,-20(fp)
   8f150:	10800a17 	ldw	r2,40(r2)
   8f154:	10800044 	addi	r2,r2,1
   8f158:	1081ffcc 	andi	r2,r2,2047
   8f15c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f160:	e0bffb17 	ldw	r2,-20(fp)
   8f164:	10c00b17 	ldw	r3,44(r2)
   8f168:	e0bffe17 	ldw	r2,-8(fp)
   8f16c:	18801526 	beq	r3,r2,8f1c4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f170:	e0bffc17 	ldw	r2,-16(fp)
   8f174:	10800037 	ldwio	r2,0(r2)
   8f178:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f17c:	e0bff917 	ldw	r2,-28(fp)
   8f180:	10a0000c 	andi	r2,r2,32768
   8f184:	10001126 	beq	r2,zero,8f1cc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f188:	e0bffb17 	ldw	r2,-20(fp)
   8f18c:	10800a17 	ldw	r2,40(r2)
   8f190:	e0fff917 	ldw	r3,-28(fp)
   8f194:	1809883a 	mov	r4,r3
   8f198:	e0fffb17 	ldw	r3,-20(fp)
   8f19c:	1885883a 	add	r2,r3,r2
   8f1a0:	10800e04 	addi	r2,r2,56
   8f1a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f1a8:	e0bffb17 	ldw	r2,-20(fp)
   8f1ac:	10800a17 	ldw	r2,40(r2)
   8f1b0:	10800044 	addi	r2,r2,1
   8f1b4:	10c1ffcc 	andi	r3,r2,2047
   8f1b8:	e0bffb17 	ldw	r2,-20(fp)
   8f1bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f1c0:	003fe206 	br	8f14c <rx_descriptor_end+0xfff8f0ec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f1c4:	0001883a 	nop
   8f1c8:	00000106 	br	8f1d0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f1cc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f1d0:	e0bff917 	ldw	r2,-28(fp)
   8f1d4:	10bfffec 	andhi	r2,r2,65535
   8f1d8:	10000f26 	beq	r2,zero,8f218 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f1dc:	e0bffb17 	ldw	r2,-20(fp)
   8f1e0:	10c00817 	ldw	r3,32(r2)
   8f1e4:	00bfff84 	movi	r2,-2
   8f1e8:	1886703a 	and	r3,r3,r2
   8f1ec:	e0bffb17 	ldw	r2,-20(fp)
   8f1f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f1f4:	e0bffc17 	ldw	r2,-16(fp)
   8f1f8:	10800104 	addi	r2,r2,4
   8f1fc:	1007883a 	mov	r3,r2
   8f200:	e0bffb17 	ldw	r2,-20(fp)
   8f204:	10800817 	ldw	r2,32(r2)
   8f208:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f20c:	e0bffc17 	ldw	r2,-16(fp)
   8f210:	10800104 	addi	r2,r2,4
   8f214:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f218:	e0bffd17 	ldw	r2,-12(fp)
   8f21c:	1080800c 	andi	r2,r2,512
   8f220:	103fbe26 	beq	r2,zero,8f11c <rx_descriptor_end+0xfff8f0bc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f224:	e0bffd17 	ldw	r2,-12(fp)
   8f228:	1004d43a 	srli	r2,r2,16
   8f22c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f230:	00001406 	br	8f284 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f234:	e0bffc17 	ldw	r2,-16(fp)
   8f238:	e0fffb17 	ldw	r3,-20(fp)
   8f23c:	18c00d17 	ldw	r3,52(r3)
   8f240:	e13ffb17 	ldw	r4,-20(fp)
   8f244:	20c7883a 	add	r3,r4,r3
   8f248:	18c20e04 	addi	r3,r3,2104
   8f24c:	18c00003 	ldbu	r3,0(r3)
   8f250:	18c03fcc 	andi	r3,r3,255
   8f254:	18c0201c 	xori	r3,r3,128
   8f258:	18ffe004 	addi	r3,r3,-128
   8f25c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f260:	e0bffb17 	ldw	r2,-20(fp)
   8f264:	10800d17 	ldw	r2,52(r2)
   8f268:	10800044 	addi	r2,r2,1
   8f26c:	10c1ffcc 	andi	r3,r2,2047
   8f270:	e0bffb17 	ldw	r2,-20(fp)
   8f274:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f278:	e0bffa17 	ldw	r2,-24(fp)
   8f27c:	10bfffc4 	addi	r2,r2,-1
   8f280:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f284:	e0bffa17 	ldw	r2,-24(fp)
   8f288:	10000526 	beq	r2,zero,8f2a0 <altera_avalon_jtag_uart_irq+0x1a8>
   8f28c:	e0bffb17 	ldw	r2,-20(fp)
   8f290:	10c00d17 	ldw	r3,52(r2)
   8f294:	e0bffb17 	ldw	r2,-20(fp)
   8f298:	10800c17 	ldw	r2,48(r2)
   8f29c:	18bfe51e 	bne	r3,r2,8f234 <rx_descriptor_end+0xfff8f1d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f2a0:	e0bffa17 	ldw	r2,-24(fp)
   8f2a4:	103f9d26 	beq	r2,zero,8f11c <rx_descriptor_end+0xfff8f0bc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f2a8:	e0bffb17 	ldw	r2,-20(fp)
   8f2ac:	10c00817 	ldw	r3,32(r2)
   8f2b0:	00bfff44 	movi	r2,-3
   8f2b4:	1886703a 	and	r3,r3,r2
   8f2b8:	e0bffb17 	ldw	r2,-20(fp)
   8f2bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f2c0:	e0bffb17 	ldw	r2,-20(fp)
   8f2c4:	10800017 	ldw	r2,0(r2)
   8f2c8:	10800104 	addi	r2,r2,4
   8f2cc:	1007883a 	mov	r3,r2
   8f2d0:	e0bffb17 	ldw	r2,-20(fp)
   8f2d4:	10800817 	ldw	r2,32(r2)
   8f2d8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f2dc:	e0bffc17 	ldw	r2,-16(fp)
   8f2e0:	10800104 	addi	r2,r2,4
   8f2e4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f2e8:	003f8c06 	br	8f11c <rx_descriptor_end+0xfff8f0bc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f2ec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f2f0:	0001883a 	nop
   8f2f4:	e037883a 	mov	sp,fp
   8f2f8:	df000017 	ldw	fp,0(sp)
   8f2fc:	dec00104 	addi	sp,sp,4
   8f300:	f800283a 	ret

0008f304 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f304:	defff804 	addi	sp,sp,-32
   8f308:	df000715 	stw	fp,28(sp)
   8f30c:	df000704 	addi	fp,sp,28
   8f310:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f314:	e0bffb17 	ldw	r2,-20(fp)
   8f318:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f31c:	e0bff917 	ldw	r2,-28(fp)
   8f320:	10800017 	ldw	r2,0(r2)
   8f324:	10800104 	addi	r2,r2,4
   8f328:	10800037 	ldwio	r2,0(r2)
   8f32c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f330:	e0bffa17 	ldw	r2,-24(fp)
   8f334:	1081000c 	andi	r2,r2,1024
   8f338:	10000b26 	beq	r2,zero,8f368 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f33c:	e0bff917 	ldw	r2,-28(fp)
   8f340:	10800017 	ldw	r2,0(r2)
   8f344:	10800104 	addi	r2,r2,4
   8f348:	1007883a 	mov	r3,r2
   8f34c:	e0bff917 	ldw	r2,-28(fp)
   8f350:	10800817 	ldw	r2,32(r2)
   8f354:	10810014 	ori	r2,r2,1024
   8f358:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f35c:	e0bff917 	ldw	r2,-28(fp)
   8f360:	10000915 	stw	zero,36(r2)
   8f364:	00000a06 	br	8f390 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f368:	e0bff917 	ldw	r2,-28(fp)
   8f36c:	10c00917 	ldw	r3,36(r2)
   8f370:	00a00034 	movhi	r2,32768
   8f374:	10bfff04 	addi	r2,r2,-4
   8f378:	10c00536 	bltu	r2,r3,8f390 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f37c:	e0bff917 	ldw	r2,-28(fp)
   8f380:	10800917 	ldw	r2,36(r2)
   8f384:	10c00044 	addi	r3,r2,1
   8f388:	e0bff917 	ldw	r2,-28(fp)
   8f38c:	10c00915 	stw	r3,36(r2)
   8f390:	d0a80217 	ldw	r2,-24568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f394:	e037883a 	mov	sp,fp
   8f398:	df000017 	ldw	fp,0(sp)
   8f39c:	dec00104 	addi	sp,sp,4
   8f3a0:	f800283a 	ret

0008f3a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f3a4:	defffd04 	addi	sp,sp,-12
   8f3a8:	df000215 	stw	fp,8(sp)
   8f3ac:	df000204 	addi	fp,sp,8
   8f3b0:	e13ffe15 	stw	r4,-8(fp)
   8f3b4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f3b8:	00000506 	br	8f3d0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f3bc:	e0bfff17 	ldw	r2,-4(fp)
   8f3c0:	1090000c 	andi	r2,r2,16384
   8f3c4:	10000226 	beq	r2,zero,8f3d0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f3c8:	00bffd44 	movi	r2,-11
   8f3cc:	00000b06 	br	8f3fc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f3d0:	e0bffe17 	ldw	r2,-8(fp)
   8f3d4:	10c00d17 	ldw	r3,52(r2)
   8f3d8:	e0bffe17 	ldw	r2,-8(fp)
   8f3dc:	10800c17 	ldw	r2,48(r2)
   8f3e0:	18800526 	beq	r3,r2,8f3f8 <altera_avalon_jtag_uart_close+0x54>
   8f3e4:	e0bffe17 	ldw	r2,-8(fp)
   8f3e8:	10c00917 	ldw	r3,36(r2)
   8f3ec:	e0bffe17 	ldw	r2,-8(fp)
   8f3f0:	10800117 	ldw	r2,4(r2)
   8f3f4:	18bff136 	bltu	r3,r2,8f3bc <rx_descriptor_end+0xfff8f35c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f3f8:	0005883a 	mov	r2,zero
}
   8f3fc:	e037883a 	mov	sp,fp
   8f400:	df000017 	ldw	fp,0(sp)
   8f404:	dec00104 	addi	sp,sp,4
   8f408:	f800283a 	ret

0008f40c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f40c:	defffa04 	addi	sp,sp,-24
   8f410:	df000515 	stw	fp,20(sp)
   8f414:	df000504 	addi	fp,sp,20
   8f418:	e13ffd15 	stw	r4,-12(fp)
   8f41c:	e17ffe15 	stw	r5,-8(fp)
   8f420:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f424:	00bff9c4 	movi	r2,-25
   8f428:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f42c:	e0bffe17 	ldw	r2,-8(fp)
   8f430:	10da8060 	cmpeqi	r3,r2,27137
   8f434:	1800031e 	bne	r3,zero,8f444 <altera_avalon_jtag_uart_ioctl+0x38>
   8f438:	109a80a0 	cmpeqi	r2,r2,27138
   8f43c:	1000181e 	bne	r2,zero,8f4a0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f440:	00002906 	br	8f4e8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f444:	e0bffd17 	ldw	r2,-12(fp)
   8f448:	10c00117 	ldw	r3,4(r2)
   8f44c:	00a00034 	movhi	r2,32768
   8f450:	10bfffc4 	addi	r2,r2,-1
   8f454:	18802126 	beq	r3,r2,8f4dc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f458:	e0bfff17 	ldw	r2,-4(fp)
   8f45c:	10800017 	ldw	r2,0(r2)
   8f460:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f464:	e0bffc17 	ldw	r2,-16(fp)
   8f468:	10800090 	cmplti	r2,r2,2
   8f46c:	1000061e 	bne	r2,zero,8f488 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f470:	e0fffc17 	ldw	r3,-16(fp)
   8f474:	00a00034 	movhi	r2,32768
   8f478:	10bfffc4 	addi	r2,r2,-1
   8f47c:	18800226 	beq	r3,r2,8f488 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f480:	e0bffc17 	ldw	r2,-16(fp)
   8f484:	00000206 	br	8f490 <altera_avalon_jtag_uart_ioctl+0x84>
   8f488:	00a00034 	movhi	r2,32768
   8f48c:	10bfff84 	addi	r2,r2,-2
   8f490:	e0fffd17 	ldw	r3,-12(fp)
   8f494:	18800115 	stw	r2,4(r3)
      rc = 0;
   8f498:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f49c:	00000f06 	br	8f4dc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8f4a0:	e0bffd17 	ldw	r2,-12(fp)
   8f4a4:	10c00117 	ldw	r3,4(r2)
   8f4a8:	00a00034 	movhi	r2,32768
   8f4ac:	10bfffc4 	addi	r2,r2,-1
   8f4b0:	18800c26 	beq	r3,r2,8f4e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8f4b4:	e0bffd17 	ldw	r2,-12(fp)
   8f4b8:	10c00917 	ldw	r3,36(r2)
   8f4bc:	e0bffd17 	ldw	r2,-12(fp)
   8f4c0:	10800117 	ldw	r2,4(r2)
   8f4c4:	1885803a 	cmpltu	r2,r3,r2
   8f4c8:	10c03fcc 	andi	r3,r2,255
   8f4cc:	e0bfff17 	ldw	r2,-4(fp)
   8f4d0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8f4d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f4d8:	00000206 	br	8f4e4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8f4dc:	0001883a 	nop
   8f4e0:	00000106 	br	8f4e8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8f4e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8f4e8:	e0bffb17 	ldw	r2,-20(fp)
}
   8f4ec:	e037883a 	mov	sp,fp
   8f4f0:	df000017 	ldw	fp,0(sp)
   8f4f4:	dec00104 	addi	sp,sp,4
   8f4f8:	f800283a 	ret

0008f4fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f4fc:	defff304 	addi	sp,sp,-52
   8f500:	dfc00c15 	stw	ra,48(sp)
   8f504:	df000b15 	stw	fp,44(sp)
   8f508:	df000b04 	addi	fp,sp,44
   8f50c:	e13ffc15 	stw	r4,-16(fp)
   8f510:	e17ffd15 	stw	r5,-12(fp)
   8f514:	e1bffe15 	stw	r6,-8(fp)
   8f518:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8f51c:	e0bffd17 	ldw	r2,-12(fp)
   8f520:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f524:	00004706 	br	8f644 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f528:	e0bffc17 	ldw	r2,-16(fp)
   8f52c:	10800a17 	ldw	r2,40(r2)
   8f530:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f534:	e0bffc17 	ldw	r2,-16(fp)
   8f538:	10800b17 	ldw	r2,44(r2)
   8f53c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8f540:	e0fff717 	ldw	r3,-36(fp)
   8f544:	e0bff817 	ldw	r2,-32(fp)
   8f548:	18800536 	bltu	r3,r2,8f560 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f54c:	e0fff717 	ldw	r3,-36(fp)
   8f550:	e0bff817 	ldw	r2,-32(fp)
   8f554:	1885c83a 	sub	r2,r3,r2
   8f558:	e0bff615 	stw	r2,-40(fp)
   8f55c:	00000406 	br	8f570 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8f560:	00c20004 	movi	r3,2048
   8f564:	e0bff817 	ldw	r2,-32(fp)
   8f568:	1885c83a 	sub	r2,r3,r2
   8f56c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f570:	e0bff617 	ldw	r2,-40(fp)
   8f574:	10001e26 	beq	r2,zero,8f5f0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8f578:	e0fffe17 	ldw	r3,-8(fp)
   8f57c:	e0bff617 	ldw	r2,-40(fp)
   8f580:	1880022e 	bgeu	r3,r2,8f58c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8f584:	e0bffe17 	ldw	r2,-8(fp)
   8f588:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8f58c:	e0bffc17 	ldw	r2,-16(fp)
   8f590:	10c00e04 	addi	r3,r2,56
   8f594:	e0bff817 	ldw	r2,-32(fp)
   8f598:	1885883a 	add	r2,r3,r2
   8f59c:	e1bff617 	ldw	r6,-40(fp)
   8f5a0:	100b883a 	mov	r5,r2
   8f5a4:	e13ff517 	ldw	r4,-44(fp)
   8f5a8:	00874680 	call	87468 <memcpy>
      ptr   += n;
   8f5ac:	e0fff517 	ldw	r3,-44(fp)
   8f5b0:	e0bff617 	ldw	r2,-40(fp)
   8f5b4:	1885883a 	add	r2,r3,r2
   8f5b8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8f5bc:	e0fffe17 	ldw	r3,-8(fp)
   8f5c0:	e0bff617 	ldw	r2,-40(fp)
   8f5c4:	1885c83a 	sub	r2,r3,r2
   8f5c8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f5cc:	e0fff817 	ldw	r3,-32(fp)
   8f5d0:	e0bff617 	ldw	r2,-40(fp)
   8f5d4:	1885883a 	add	r2,r3,r2
   8f5d8:	10c1ffcc 	andi	r3,r2,2047
   8f5dc:	e0bffc17 	ldw	r2,-16(fp)
   8f5e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8f5e4:	e0bffe17 	ldw	r2,-8(fp)
   8f5e8:	00bfcf16 	blt	zero,r2,8f528 <rx_descriptor_end+0xfff8f4c8>
   8f5ec:	00000106 	br	8f5f4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8f5f0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8f5f4:	e0fff517 	ldw	r3,-44(fp)
   8f5f8:	e0bffd17 	ldw	r2,-12(fp)
   8f5fc:	1880141e 	bne	r3,r2,8f650 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8f600:	e0bfff17 	ldw	r2,-4(fp)
   8f604:	1090000c 	andi	r2,r2,16384
   8f608:	1000131e 	bne	r2,zero,8f658 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8f60c:	0001883a 	nop
   8f610:	e0bffc17 	ldw	r2,-16(fp)
   8f614:	10c00a17 	ldw	r3,40(r2)
   8f618:	e0bff717 	ldw	r2,-36(fp)
   8f61c:	1880051e 	bne	r3,r2,8f634 <altera_avalon_jtag_uart_read+0x138>
   8f620:	e0bffc17 	ldw	r2,-16(fp)
   8f624:	10c00917 	ldw	r3,36(r2)
   8f628:	e0bffc17 	ldw	r2,-16(fp)
   8f62c:	10800117 	ldw	r2,4(r2)
   8f630:	18bff736 	bltu	r3,r2,8f610 <rx_descriptor_end+0xfff8f5b0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8f634:	e0bffc17 	ldw	r2,-16(fp)
   8f638:	10c00a17 	ldw	r3,40(r2)
   8f63c:	e0bff717 	ldw	r2,-36(fp)
   8f640:	18800726 	beq	r3,r2,8f660 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f644:	e0bffe17 	ldw	r2,-8(fp)
   8f648:	00bfb716 	blt	zero,r2,8f528 <rx_descriptor_end+0xfff8f4c8>
   8f64c:	00000506 	br	8f664 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8f650:	0001883a 	nop
   8f654:	00000306 	br	8f664 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8f658:	0001883a 	nop
   8f65c:	00000106 	br	8f664 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8f660:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8f664:	e0fff517 	ldw	r3,-44(fp)
   8f668:	e0bffd17 	ldw	r2,-12(fp)
   8f66c:	18801826 	beq	r3,r2,8f6d0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f670:	0005303a 	rdctl	r2,status
   8f674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f678:	e0fffb17 	ldw	r3,-20(fp)
   8f67c:	00bfff84 	movi	r2,-2
   8f680:	1884703a 	and	r2,r3,r2
   8f684:	1001703a 	wrctl	status,r2
  
  return context;
   8f688:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8f68c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f690:	e0bffc17 	ldw	r2,-16(fp)
   8f694:	10800817 	ldw	r2,32(r2)
   8f698:	10c00054 	ori	r3,r2,1
   8f69c:	e0bffc17 	ldw	r2,-16(fp)
   8f6a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f6a4:	e0bffc17 	ldw	r2,-16(fp)
   8f6a8:	10800017 	ldw	r2,0(r2)
   8f6ac:	10800104 	addi	r2,r2,4
   8f6b0:	1007883a 	mov	r3,r2
   8f6b4:	e0bffc17 	ldw	r2,-16(fp)
   8f6b8:	10800817 	ldw	r2,32(r2)
   8f6bc:	18800035 	stwio	r2,0(r3)
   8f6c0:	e0bffa17 	ldw	r2,-24(fp)
   8f6c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f6c8:	e0bff917 	ldw	r2,-28(fp)
   8f6cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8f6d0:	e0fff517 	ldw	r3,-44(fp)
   8f6d4:	e0bffd17 	ldw	r2,-12(fp)
   8f6d8:	18800426 	beq	r3,r2,8f6ec <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8f6dc:	e0fff517 	ldw	r3,-44(fp)
   8f6e0:	e0bffd17 	ldw	r2,-12(fp)
   8f6e4:	1885c83a 	sub	r2,r3,r2
   8f6e8:	00000606 	br	8f704 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8f6ec:	e0bfff17 	ldw	r2,-4(fp)
   8f6f0:	1090000c 	andi	r2,r2,16384
   8f6f4:	10000226 	beq	r2,zero,8f700 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8f6f8:	00bffd44 	movi	r2,-11
   8f6fc:	00000106 	br	8f704 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8f700:	00bffec4 	movi	r2,-5
}
   8f704:	e037883a 	mov	sp,fp
   8f708:	dfc00117 	ldw	ra,4(sp)
   8f70c:	df000017 	ldw	fp,0(sp)
   8f710:	dec00204 	addi	sp,sp,8
   8f714:	f800283a 	ret

0008f718 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8f718:	defff304 	addi	sp,sp,-52
   8f71c:	dfc00c15 	stw	ra,48(sp)
   8f720:	df000b15 	stw	fp,44(sp)
   8f724:	df000b04 	addi	fp,sp,44
   8f728:	e13ffc15 	stw	r4,-16(fp)
   8f72c:	e17ffd15 	stw	r5,-12(fp)
   8f730:	e1bffe15 	stw	r6,-8(fp)
   8f734:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8f738:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8f73c:	e0bffd17 	ldw	r2,-12(fp)
   8f740:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f744:	00003706 	br	8f824 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8f748:	e0bffc17 	ldw	r2,-16(fp)
   8f74c:	10800c17 	ldw	r2,48(r2)
   8f750:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8f754:	e0bffc17 	ldw	r2,-16(fp)
   8f758:	10800d17 	ldw	r2,52(r2)
   8f75c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8f760:	e0fff917 	ldw	r3,-28(fp)
   8f764:	e0bff517 	ldw	r2,-44(fp)
   8f768:	1880062e 	bgeu	r3,r2,8f784 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8f76c:	e0fff517 	ldw	r3,-44(fp)
   8f770:	e0bff917 	ldw	r2,-28(fp)
   8f774:	1885c83a 	sub	r2,r3,r2
   8f778:	10bfffc4 	addi	r2,r2,-1
   8f77c:	e0bff615 	stw	r2,-40(fp)
   8f780:	00000b06 	br	8f7b0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8f784:	e0bff517 	ldw	r2,-44(fp)
   8f788:	10000526 	beq	r2,zero,8f7a0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8f78c:	00c20004 	movi	r3,2048
   8f790:	e0bff917 	ldw	r2,-28(fp)
   8f794:	1885c83a 	sub	r2,r3,r2
   8f798:	e0bff615 	stw	r2,-40(fp)
   8f79c:	00000406 	br	8f7b0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8f7a0:	00c1ffc4 	movi	r3,2047
   8f7a4:	e0bff917 	ldw	r2,-28(fp)
   8f7a8:	1885c83a 	sub	r2,r3,r2
   8f7ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f7b0:	e0bff617 	ldw	r2,-40(fp)
   8f7b4:	10001e26 	beq	r2,zero,8f830 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8f7b8:	e0fffe17 	ldw	r3,-8(fp)
   8f7bc:	e0bff617 	ldw	r2,-40(fp)
   8f7c0:	1880022e 	bgeu	r3,r2,8f7cc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8f7c4:	e0bffe17 	ldw	r2,-8(fp)
   8f7c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8f7cc:	e0bffc17 	ldw	r2,-16(fp)
   8f7d0:	10c20e04 	addi	r3,r2,2104
   8f7d4:	e0bff917 	ldw	r2,-28(fp)
   8f7d8:	1885883a 	add	r2,r3,r2
   8f7dc:	e1bff617 	ldw	r6,-40(fp)
   8f7e0:	e17ffd17 	ldw	r5,-12(fp)
   8f7e4:	1009883a 	mov	r4,r2
   8f7e8:	00874680 	call	87468 <memcpy>
      ptr   += n;
   8f7ec:	e0fffd17 	ldw	r3,-12(fp)
   8f7f0:	e0bff617 	ldw	r2,-40(fp)
   8f7f4:	1885883a 	add	r2,r3,r2
   8f7f8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8f7fc:	e0fffe17 	ldw	r3,-8(fp)
   8f800:	e0bff617 	ldw	r2,-40(fp)
   8f804:	1885c83a 	sub	r2,r3,r2
   8f808:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f80c:	e0fff917 	ldw	r3,-28(fp)
   8f810:	e0bff617 	ldw	r2,-40(fp)
   8f814:	1885883a 	add	r2,r3,r2
   8f818:	10c1ffcc 	andi	r3,r2,2047
   8f81c:	e0bffc17 	ldw	r2,-16(fp)
   8f820:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f824:	e0bffe17 	ldw	r2,-8(fp)
   8f828:	00bfc716 	blt	zero,r2,8f748 <rx_descriptor_end+0xfff8f6e8>
   8f82c:	00000106 	br	8f834 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8f830:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f834:	0005303a 	rdctl	r2,status
   8f838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f83c:	e0fffb17 	ldw	r3,-20(fp)
   8f840:	00bfff84 	movi	r2,-2
   8f844:	1884703a 	and	r2,r3,r2
   8f848:	1001703a 	wrctl	status,r2
  
  return context;
   8f84c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8f850:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f854:	e0bffc17 	ldw	r2,-16(fp)
   8f858:	10800817 	ldw	r2,32(r2)
   8f85c:	10c00094 	ori	r3,r2,2
   8f860:	e0bffc17 	ldw	r2,-16(fp)
   8f864:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f868:	e0bffc17 	ldw	r2,-16(fp)
   8f86c:	10800017 	ldw	r2,0(r2)
   8f870:	10800104 	addi	r2,r2,4
   8f874:	1007883a 	mov	r3,r2
   8f878:	e0bffc17 	ldw	r2,-16(fp)
   8f87c:	10800817 	ldw	r2,32(r2)
   8f880:	18800035 	stwio	r2,0(r3)
   8f884:	e0bffa17 	ldw	r2,-24(fp)
   8f888:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f88c:	e0bff817 	ldw	r2,-32(fp)
   8f890:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8f894:	e0bffe17 	ldw	r2,-8(fp)
   8f898:	0080100e 	bge	zero,r2,8f8dc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8f89c:	e0bfff17 	ldw	r2,-4(fp)
   8f8a0:	1090000c 	andi	r2,r2,16384
   8f8a4:	1000101e 	bne	r2,zero,8f8e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8f8a8:	0001883a 	nop
   8f8ac:	e0bffc17 	ldw	r2,-16(fp)
   8f8b0:	10c00d17 	ldw	r3,52(r2)
   8f8b4:	e0bff517 	ldw	r2,-44(fp)
   8f8b8:	1880051e 	bne	r3,r2,8f8d0 <altera_avalon_jtag_uart_write+0x1b8>
   8f8bc:	e0bffc17 	ldw	r2,-16(fp)
   8f8c0:	10c00917 	ldw	r3,36(r2)
   8f8c4:	e0bffc17 	ldw	r2,-16(fp)
   8f8c8:	10800117 	ldw	r2,4(r2)
   8f8cc:	18bff736 	bltu	r3,r2,8f8ac <rx_descriptor_end+0xfff8f84c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8f8d0:	e0bffc17 	ldw	r2,-16(fp)
   8f8d4:	10800917 	ldw	r2,36(r2)
   8f8d8:	1000051e 	bne	r2,zero,8f8f0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8f8dc:	e0bffe17 	ldw	r2,-8(fp)
   8f8e0:	00bfd016 	blt	zero,r2,8f824 <rx_descriptor_end+0xfff8f7c4>
   8f8e4:	00000306 	br	8f8f4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8f8e8:	0001883a 	nop
   8f8ec:	00000106 	br	8f8f4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8f8f0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8f8f4:	e0fffd17 	ldw	r3,-12(fp)
   8f8f8:	e0bff717 	ldw	r2,-36(fp)
   8f8fc:	18800426 	beq	r3,r2,8f910 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8f900:	e0fffd17 	ldw	r3,-12(fp)
   8f904:	e0bff717 	ldw	r2,-36(fp)
   8f908:	1885c83a 	sub	r2,r3,r2
   8f90c:	00000606 	br	8f928 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8f910:	e0bfff17 	ldw	r2,-4(fp)
   8f914:	1090000c 	andi	r2,r2,16384
   8f918:	10000226 	beq	r2,zero,8f924 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8f91c:	00bffd44 	movi	r2,-11
   8f920:	00000106 	br	8f928 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8f924:	00bffec4 	movi	r2,-5
}
   8f928:	e037883a 	mov	sp,fp
   8f92c:	dfc00117 	ldw	ra,4(sp)
   8f930:	df000017 	ldw	fp,0(sp)
   8f934:	dec00204 	addi	sp,sp,8
   8f938:	f800283a 	ret

0008f93c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f93c:	defffe04 	addi	sp,sp,-8
   8f940:	dfc00115 	stw	ra,4(sp)
   8f944:	df000015 	stw	fp,0(sp)
   8f948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f94c:	d0a00c17 	ldw	r2,-32720(gp)
   8f950:	10000326 	beq	r2,zero,8f960 <alt_get_errno+0x24>
   8f954:	d0a00c17 	ldw	r2,-32720(gp)
   8f958:	103ee83a 	callr	r2
   8f95c:	00000106 	br	8f964 <alt_get_errno+0x28>
   8f960:	d0a7fa04 	addi	r2,gp,-24600
}
   8f964:	e037883a 	mov	sp,fp
   8f968:	dfc00117 	ldw	ra,4(sp)
   8f96c:	df000017 	ldw	fp,0(sp)
   8f970:	dec00204 	addi	sp,sp,8
   8f974:	f800283a 	ret

0008f978 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   8f978:	defffc04 	addi	sp,sp,-16
   8f97c:	df000315 	stw	fp,12(sp)
   8f980:	df000304 	addi	fp,sp,12
   8f984:	e13ffe15 	stw	r4,-8(fp)
   8f988:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8f98c:	e0bffe17 	ldw	r2,-8(fp)
   8f990:	10800317 	ldw	r2,12(r2)
   8f994:	10800037 	ldwio	r2,0(r2)
   8f998:	1080040c 	andi	r2,r2,16
   8f99c:	10000226 	beq	r2,zero,8f9a8 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   8f9a0:	00bffc04 	movi	r2,-16
   8f9a4:	00003906 	br	8fa8c <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8f9a8:	e0bffe17 	ldw	r2,-8(fp)
   8f9ac:	10800317 	ldw	r2,12(r2)
   8f9b0:	10800404 	addi	r2,r2,16
   8f9b4:	e0fffe17 	ldw	r3,-8(fp)
   8f9b8:	18c00317 	ldw	r3,12(r3)
   8f9bc:	18c00404 	addi	r3,r3,16
   8f9c0:	19000037 	ldwio	r4,0(r3)
   8f9c4:	00fff7c4 	movi	r3,-33
   8f9c8:	20c6703a 	and	r3,r4,r3
   8f9cc:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8f9d0:	e0bffe17 	ldw	r2,-8(fp)
   8f9d4:	10800317 	ldw	r2,12(r2)
   8f9d8:	00c03fc4 	movi	r3,255
   8f9dc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8f9e0:	e0bffe17 	ldw	r2,-8(fp)
   8f9e4:	10800317 	ldw	r2,12(r2)
   8f9e8:	10800804 	addi	r2,r2,32
   8f9ec:	e0ffff17 	ldw	r3,-4(fp)
   8f9f0:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   8f9f4:	e0bffe17 	ldw	r2,-8(fp)
   8f9f8:	10800917 	ldw	r2,36(r2)
   8f9fc:	10001126 	beq	r2,zero,8fa44 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8fa00:	e0bffe17 	ldw	r2,-8(fp)
   8fa04:	10800317 	ldw	r2,12(r2)
   8fa08:	10800404 	addi	r2,r2,16
   8fa0c:	10800037 	ldwio	r2,0(r2)
   8fa10:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   8fa14:	e0bffe17 	ldw	r2,-8(fp)
   8fa18:	10c00b17 	ldw	r3,44(r2)
   8fa1c:	e0bffd17 	ldw	r2,-12(fp)
   8fa20:	1884b03a 	or	r2,r3,r2
   8fa24:	10801814 	ori	r2,r2,96
   8fa28:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8fa2c:	e0bffe17 	ldw	r2,-8(fp)
   8fa30:	10800317 	ldw	r2,12(r2)
   8fa34:	10800404 	addi	r2,r2,16
   8fa38:	e0fffd17 	ldw	r3,-12(fp)
   8fa3c:	10c00035 	stwio	r3,0(r2)
   8fa40:	00001106 	br	8fa88 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8fa44:	e0bffe17 	ldw	r2,-8(fp)
   8fa48:	10800317 	ldw	r2,12(r2)
   8fa4c:	10800404 	addi	r2,r2,16
   8fa50:	10800037 	ldwio	r2,0(r2)
   8fa54:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   8fa58:	e0bffd17 	ldw	r2,-12(fp)
   8fa5c:	10801814 	ori	r2,r2,96
   8fa60:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   8fa64:	e0fffd17 	ldw	r3,-12(fp)
   8fa68:	00bffbc4 	movi	r2,-17
   8fa6c:	1884703a 	and	r2,r3,r2
   8fa70:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8fa74:	e0bffe17 	ldw	r2,-8(fp)
   8fa78:	10800317 	ldw	r2,12(r2)
   8fa7c:	10800404 	addi	r2,r2,16
   8fa80:	e0fffd17 	ldw	r3,-12(fp)
   8fa84:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   8fa88:	0005883a 	mov	r2,zero
}
   8fa8c:	e037883a 	mov	sp,fp
   8fa90:	df000017 	ldw	fp,0(sp)
   8fa94:	dec00104 	addi	sp,sp,4
   8fa98:	f800283a 	ret

0008fa9c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   8fa9c:	defffc04 	addi	sp,sp,-16
   8faa0:	df000315 	stw	fp,12(sp)
   8faa4:	df000304 	addi	fp,sp,12
   8faa8:	e13ffe15 	stw	r4,-8(fp)
   8faac:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fab0:	0001883a 	nop
   8fab4:	e0bffe17 	ldw	r2,-8(fp)
   8fab8:	10800317 	ldw	r2,12(r2)
   8fabc:	10800037 	ldwio	r2,0(r2)
   8fac0:	1080040c 	andi	r2,r2,16
   8fac4:	103ffb1e 	bne	r2,zero,8fab4 <rx_descriptor_end+0xfff8fa54>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fac8:	e0bffe17 	ldw	r2,-8(fp)
   8facc:	10800317 	ldw	r2,12(r2)
   8fad0:	10800404 	addi	r2,r2,16
   8fad4:	e0fffe17 	ldw	r3,-8(fp)
   8fad8:	18c00317 	ldw	r3,12(r3)
   8fadc:	18c00404 	addi	r3,r3,16
   8fae0:	19000037 	ldwio	r4,0(r3)
   8fae4:	00fff7c4 	movi	r3,-33
   8fae8:	20c6703a 	and	r3,r4,r3
   8faec:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8faf0:	e0bffe17 	ldw	r2,-8(fp)
   8faf4:	10800317 	ldw	r2,12(r2)
   8faf8:	00c03fc4 	movi	r3,255
   8fafc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8fb00:	e0bffe17 	ldw	r2,-8(fp)
   8fb04:	10800317 	ldw	r2,12(r2)
   8fb08:	10800804 	addi	r2,r2,32
   8fb0c:	e0ffff17 	ldw	r3,-4(fp)
   8fb10:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fb14:	e0bffe17 	ldw	r2,-8(fp)
   8fb18:	10800317 	ldw	r2,12(r2)
   8fb1c:	10800404 	addi	r2,r2,16
   8fb20:	e0fffe17 	ldw	r3,-8(fp)
   8fb24:	18c00317 	ldw	r3,12(r3)
   8fb28:	18c00404 	addi	r3,r3,16
   8fb2c:	18c00037 	ldwio	r3,0(r3)
   8fb30:	18c01814 	ori	r3,r3,96
   8fb34:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fb38:	0001883a 	nop
   8fb3c:	e0bffe17 	ldw	r2,-8(fp)
   8fb40:	10800317 	ldw	r2,12(r2)
   8fb44:	10800037 	ldwio	r2,0(r2)
   8fb48:	1080040c 	andi	r2,r2,16
   8fb4c:	103ffb1e 	bne	r2,zero,8fb3c <rx_descriptor_end+0xfff8fadc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   8fb50:	e0bffe17 	ldw	r2,-8(fp)
   8fb54:	10800317 	ldw	r2,12(r2)
   8fb58:	10800404 	addi	r2,r2,16
   8fb5c:	e0fffe17 	ldw	r3,-8(fp)
   8fb60:	18c00317 	ldw	r3,12(r3)
   8fb64:	18c00404 	addi	r3,r3,16
   8fb68:	19000037 	ldwio	r4,0(r3)
   8fb6c:	00fff7c4 	movi	r3,-33
   8fb70:	20c6703a 	and	r3,r4,r3
   8fb74:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   8fb78:	e0bffe17 	ldw	r2,-8(fp)
   8fb7c:	10800317 	ldw	r2,12(r2)
   8fb80:	10800037 	ldwio	r2,0(r2)
   8fb84:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8fb88:	e0bffe17 	ldw	r2,-8(fp)
   8fb8c:	10800317 	ldw	r2,12(r2)
   8fb90:	00c03fc4 	movi	r3,255
   8fb94:	10c00035 	stwio	r3,0(r2)

  return status;
   8fb98:	e0bffd03 	ldbu	r2,-12(fp)
}
   8fb9c:	e037883a 	mov	sp,fp
   8fba0:	df000017 	ldw	fp,0(sp)
   8fba4:	dec00104 	addi	sp,sp,4
   8fba8:	f800283a 	ret

0008fbac <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   8fbac:	defff404 	addi	sp,sp,-48
   8fbb0:	dfc00b15 	stw	ra,44(sp)
   8fbb4:	df000a15 	stw	fp,40(sp)
   8fbb8:	df000a04 	addi	fp,sp,40
   8fbbc:	e13ffb15 	stw	r4,-20(fp)
   8fbc0:	e17ffc15 	stw	r5,-16(fp)
   8fbc4:	e1bffd15 	stw	r6,-12(fp)
   8fbc8:	e1fffe15 	stw	r7,-8(fp)
   8fbcc:	e0800217 	ldw	r2,8(fp)
   8fbd0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   8fbd4:	e0bfff0b 	ldhu	r2,-4(fp)
   8fbd8:	d8000415 	stw	zero,16(sp)
   8fbdc:	d8000315 	stw	zero,12(sp)
   8fbe0:	e0c00417 	ldw	r3,16(fp)
   8fbe4:	d8c00215 	stw	r3,8(sp)
   8fbe8:	e0c00317 	ldw	r3,12(fp)
   8fbec:	d8c00115 	stw	r3,4(sp)
   8fbf0:	d8800015 	stw	r2,0(sp)
   8fbf4:	e1fffe17 	ldw	r7,-8(fp)
   8fbf8:	e1bffd17 	ldw	r6,-12(fp)
   8fbfc:	e17ffc17 	ldw	r5,-16(fp)
   8fc00:	e13ffb17 	ldw	r4,-20(fp)
   8fc04:	008fc200 	call	8fc20 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   8fc08:	0001883a 	nop
   8fc0c:	e037883a 	mov	sp,fp
   8fc10:	dfc00117 	ldw	ra,4(sp)
   8fc14:	df000017 	ldw	fp,0(sp)
   8fc18:	dec00204 	addi	sp,sp,8
   8fc1c:	f800283a 	ret

0008fc20 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   8fc20:	defff204 	addi	sp,sp,-56
   8fc24:	dfc00d15 	stw	ra,52(sp)
   8fc28:	df000c15 	stw	fp,48(sp)
   8fc2c:	df000c04 	addi	fp,sp,48
   8fc30:	e13ffb15 	stw	r4,-20(fp)
   8fc34:	e17ffc15 	stw	r5,-16(fp)
   8fc38:	e1bffd15 	stw	r6,-12(fp)
   8fc3c:	e1fffe15 	stw	r7,-8(fp)
   8fc40:	e0800217 	ldw	r2,8(fp)
   8fc44:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8fc48:	e0bfff0b 	ldhu	r2,-4(fp)
   8fc4c:	d8000615 	stw	zero,24(sp)
   8fc50:	e0c00617 	ldw	r3,24(fp)
   8fc54:	d8c00515 	stw	r3,20(sp)
   8fc58:	e0c00517 	ldw	r3,20(fp)
   8fc5c:	d8c00415 	stw	r3,16(sp)
   8fc60:	e0c00417 	ldw	r3,16(fp)
   8fc64:	d8c00315 	stw	r3,12(sp)
   8fc68:	e0c00317 	ldw	r3,12(fp)
   8fc6c:	d8c00215 	stw	r3,8(sp)
   8fc70:	d8000115 	stw	zero,4(sp)
   8fc74:	d8800015 	stw	r2,0(sp)
   8fc78:	e1fffe17 	ldw	r7,-8(fp)
   8fc7c:	e1bffd17 	ldw	r6,-12(fp)
   8fc80:	e17ffc17 	ldw	r5,-16(fp)
   8fc84:	e13ffb17 	ldw	r4,-20(fp)
   8fc88:	00901b40 	call	901b4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   8fc8c:	0001883a 	nop
   8fc90:	e037883a 	mov	sp,fp
   8fc94:	dfc00117 	ldw	ra,4(sp)
   8fc98:	df000017 	ldw	fp,0(sp)
   8fc9c:	dec00204 	addi	sp,sp,8
   8fca0:	f800283a 	ret

0008fca4 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   8fca4:	defff804 	addi	sp,sp,-32
   8fca8:	dfc00715 	stw	ra,28(sp)
   8fcac:	df000615 	stw	fp,24(sp)
   8fcb0:	df000604 	addi	fp,sp,24
   8fcb4:	e13ffc15 	stw	r4,-16(fp)
   8fcb8:	e17ffd15 	stw	r5,-12(fp)
   8fcbc:	e1bffe15 	stw	r6,-8(fp)
   8fcc0:	3805883a 	mov	r2,r7
   8fcc4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   8fcc8:	e0ffff0b 	ldhu	r3,-4(fp)
   8fccc:	d8000115 	stw	zero,4(sp)
   8fcd0:	e0800217 	ldw	r2,8(fp)
   8fcd4:	d8800015 	stw	r2,0(sp)
   8fcd8:	180f883a 	mov	r7,r3
   8fcdc:	e1bffe17 	ldw	r6,-8(fp)
   8fce0:	e17ffd17 	ldw	r5,-12(fp)
   8fce4:	e13ffc17 	ldw	r4,-16(fp)
   8fce8:	008fd040 	call	8fd04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   8fcec:	0001883a 	nop
   8fcf0:	e037883a 	mov	sp,fp
   8fcf4:	dfc00117 	ldw	ra,4(sp)
   8fcf8:	df000017 	ldw	fp,0(sp)
   8fcfc:	dec00204 	addi	sp,sp,8
   8fd00:	f800283a 	ret

0008fd04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   8fd04:	defff304 	addi	sp,sp,-52
   8fd08:	dfc00c15 	stw	ra,48(sp)
   8fd0c:	df000b15 	stw	fp,44(sp)
   8fd10:	df000b04 	addi	fp,sp,44
   8fd14:	e13ffc15 	stw	r4,-16(fp)
   8fd18:	e17ffd15 	stw	r5,-12(fp)
   8fd1c:	e1bffe15 	stw	r6,-8(fp)
   8fd20:	3805883a 	mov	r2,r7
   8fd24:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8fd28:	e0bfff0b 	ldhu	r2,-4(fp)
   8fd2c:	d8000615 	stw	zero,24(sp)
   8fd30:	e0c00317 	ldw	r3,12(fp)
   8fd34:	d8c00515 	stw	r3,20(sp)
   8fd38:	d8000415 	stw	zero,16(sp)
   8fd3c:	e0c00217 	ldw	r3,8(fp)
   8fd40:	d8c00315 	stw	r3,12(sp)
   8fd44:	d8000215 	stw	zero,8(sp)
   8fd48:	d8000115 	stw	zero,4(sp)
   8fd4c:	d8800015 	stw	r2,0(sp)
   8fd50:	e1fffe17 	ldw	r7,-8(fp)
   8fd54:	000d883a 	mov	r6,zero
   8fd58:	e17ffd17 	ldw	r5,-12(fp)
   8fd5c:	e13ffc17 	ldw	r4,-16(fp)
   8fd60:	00901b40 	call	901b4 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   8fd64:	0001883a 	nop
   8fd68:	e037883a 	mov	sp,fp
   8fd6c:	dfc00117 	ldw	ra,4(sp)
   8fd70:	df000017 	ldw	fp,0(sp)
   8fd74:	dec00204 	addi	sp,sp,8
   8fd78:	f800283a 	ret

0008fd7c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   8fd7c:	defff404 	addi	sp,sp,-48
   8fd80:	dfc00b15 	stw	ra,44(sp)
   8fd84:	df000a15 	stw	fp,40(sp)
   8fd88:	df000a04 	addi	fp,sp,40
   8fd8c:	e13ffb15 	stw	r4,-20(fp)
   8fd90:	e17ffc15 	stw	r5,-16(fp)
   8fd94:	e1bffd15 	stw	r6,-12(fp)
   8fd98:	3807883a 	mov	r3,r7
   8fd9c:	e0800517 	ldw	r2,20(fp)
   8fda0:	e0fffe0d 	sth	r3,-8(fp)
   8fda4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   8fda8:	e0fffe0b 	ldhu	r3,-8(fp)
   8fdac:	e0bfff03 	ldbu	r2,-4(fp)
   8fdb0:	d8800415 	stw	r2,16(sp)
   8fdb4:	d8000315 	stw	zero,12(sp)
   8fdb8:	e0800417 	ldw	r2,16(fp)
   8fdbc:	d8800215 	stw	r2,8(sp)
   8fdc0:	e0800317 	ldw	r2,12(fp)
   8fdc4:	d8800115 	stw	r2,4(sp)
   8fdc8:	e0800217 	ldw	r2,8(fp)
   8fdcc:	d8800015 	stw	r2,0(sp)
   8fdd0:	180f883a 	mov	r7,r3
   8fdd4:	e1bffd17 	ldw	r6,-12(fp)
   8fdd8:	e17ffc17 	ldw	r5,-16(fp)
   8fddc:	e13ffb17 	ldw	r4,-20(fp)
   8fde0:	008fdfc0 	call	8fdfc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   8fde4:	0001883a 	nop
   8fde8:	e037883a 	mov	sp,fp
   8fdec:	dfc00117 	ldw	ra,4(sp)
   8fdf0:	df000017 	ldw	fp,0(sp)
   8fdf4:	dec00204 	addi	sp,sp,8
   8fdf8:	f800283a 	ret

0008fdfc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   8fdfc:	defff204 	addi	sp,sp,-56
   8fe00:	dfc00d15 	stw	ra,52(sp)
   8fe04:	df000c15 	stw	fp,48(sp)
   8fe08:	df000c04 	addi	fp,sp,48
   8fe0c:	e13ffb15 	stw	r4,-20(fp)
   8fe10:	e17ffc15 	stw	r5,-16(fp)
   8fe14:	e1bffd15 	stw	r6,-12(fp)
   8fe18:	3807883a 	mov	r3,r7
   8fe1c:	e0800617 	ldw	r2,24(fp)
   8fe20:	e0fffe0d 	sth	r3,-8(fp)
   8fe24:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8fe28:	e0bffe0b 	ldhu	r2,-8(fp)
   8fe2c:	e0ffff03 	ldbu	r3,-4(fp)
   8fe30:	d8c00615 	stw	r3,24(sp)
   8fe34:	d8000515 	stw	zero,20(sp)
   8fe38:	e0c00517 	ldw	r3,20(fp)
   8fe3c:	d8c00415 	stw	r3,16(sp)
   8fe40:	e0c00317 	ldw	r3,12(fp)
   8fe44:	d8c00315 	stw	r3,12(sp)
   8fe48:	e0c00217 	ldw	r3,8(fp)
   8fe4c:	d8c00215 	stw	r3,8(sp)
   8fe50:	e0c00417 	ldw	r3,16(fp)
   8fe54:	d8c00115 	stw	r3,4(sp)
   8fe58:	d8800015 	stw	r2,0(sp)
   8fe5c:	000f883a 	mov	r7,zero
   8fe60:	e1bffd17 	ldw	r6,-12(fp)
   8fe64:	e17ffc17 	ldw	r5,-16(fp)
   8fe68:	e13ffb17 	ldw	r4,-20(fp)
   8fe6c:	00901b40 	call	901b4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   8fe70:	0001883a 	nop
   8fe74:	e037883a 	mov	sp,fp
   8fe78:	dfc00117 	ldw	ra,4(sp)
   8fe7c:	df000017 	ldw	fp,0(sp)
   8fe80:	dec00204 	addi	sp,sp,8
   8fe84:	f800283a 	ret

0008fe88 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   8fe88:	defffb04 	addi	sp,sp,-20
   8fe8c:	df000415 	stw	fp,16(sp)
   8fe90:	df000404 	addi	fp,sp,16
   8fe94:	e13ffc15 	stw	r4,-16(fp)
   8fe98:	e17ffd15 	stw	r5,-12(fp)
   8fe9c:	e1bffe15 	stw	r6,-8(fp)
   8fea0:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   8fea4:	e0bffc17 	ldw	r2,-16(fp)
   8fea8:	e0fffd17 	ldw	r3,-12(fp)
   8feac:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   8feb0:	e0bffc17 	ldw	r2,-16(fp)
   8feb4:	e0ffff17 	ldw	r3,-4(fp)
   8feb8:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   8febc:	e0bffc17 	ldw	r2,-16(fp)
   8fec0:	e0fffe17 	ldw	r3,-8(fp)
   8fec4:	10c00b15 	stw	r3,44(r2)
}
   8fec8:	0001883a 	nop
   8fecc:	e037883a 	mov	sp,fp
   8fed0:	df000017 	ldw	fp,0(sp)
   8fed4:	dec00104 	addi	sp,sp,4
   8fed8:	f800283a 	ret

0008fedc <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   8fedc:	defffd04 	addi	sp,sp,-12
   8fee0:	df000215 	stw	fp,8(sp)
   8fee4:	df000204 	addi	fp,sp,8
   8fee8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8feec:	e0bfff17 	ldw	r2,-4(fp)
   8fef0:	10800317 	ldw	r2,12(r2)
   8fef4:	10800404 	addi	r2,r2,16
   8fef8:	10800037 	ldwio	r2,0(r2)
   8fefc:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   8ff00:	e0bffe17 	ldw	r2,-8(fp)
   8ff04:	10800814 	ori	r2,r2,32
   8ff08:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8ff0c:	e0bfff17 	ldw	r2,-4(fp)
   8ff10:	10800317 	ldw	r2,12(r2)
   8ff14:	10800404 	addi	r2,r2,16
   8ff18:	e0fffe17 	ldw	r3,-8(fp)
   8ff1c:	10c00035 	stwio	r3,0(r2)
}
   8ff20:	0001883a 	nop
   8ff24:	e037883a 	mov	sp,fp
   8ff28:	df000017 	ldw	fp,0(sp)
   8ff2c:	dec00104 	addi	sp,sp,4
   8ff30:	f800283a 	ret

0008ff34 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   8ff34:	defffd04 	addi	sp,sp,-12
   8ff38:	df000215 	stw	fp,8(sp)
   8ff3c:	df000204 	addi	fp,sp,8
   8ff40:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8ff44:	e0bfff17 	ldw	r2,-4(fp)
   8ff48:	10800317 	ldw	r2,12(r2)
   8ff4c:	10800404 	addi	r2,r2,16
   8ff50:	10800037 	ldwio	r2,0(r2)
   8ff54:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   8ff58:	e0fffe17 	ldw	r3,-8(fp)
   8ff5c:	00bff7c4 	movi	r2,-33
   8ff60:	1884703a 	and	r2,r3,r2
   8ff64:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8ff68:	e0bfff17 	ldw	r2,-4(fp)
   8ff6c:	10800317 	ldw	r2,12(r2)
   8ff70:	10800404 	addi	r2,r2,16
   8ff74:	e0fffe17 	ldw	r3,-8(fp)
   8ff78:	10c00035 	stwio	r3,0(r2)
}
   8ff7c:	0001883a 	nop
   8ff80:	e037883a 	mov	sp,fp
   8ff84:	df000017 	ldw	fp,0(sp)
   8ff88:	dec00104 	addi	sp,sp,4
   8ff8c:	f800283a 	ret

0008ff90 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   8ff90:	defffe04 	addi	sp,sp,-8
   8ff94:	df000115 	stw	fp,4(sp)
   8ff98:	df000104 	addi	fp,sp,4
   8ff9c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   8ffa0:	e0bfff17 	ldw	r2,-4(fp)
   8ffa4:	10800784 	addi	r2,r2,30
   8ffa8:	10800023 	ldbuio	r2,0(r2)
   8ffac:	10803fcc 	andi	r2,r2,255
   8ffb0:	10801fcc 	andi	r2,r2,127
   8ffb4:	10000226 	beq	r2,zero,8ffc0 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   8ffb8:	00bffec4 	movi	r2,-5
   8ffbc:	00000906 	br	8ffe4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   8ffc0:	e0bfff17 	ldw	r2,-4(fp)
   8ffc4:	108007c4 	addi	r2,r2,31
   8ffc8:	10800023 	ldbuio	r2,0(r2)
   8ffcc:	10803fcc 	andi	r2,r2,255
   8ffd0:	1080200c 	andi	r2,r2,128
   8ffd4:	10000226 	beq	r2,zero,8ffe0 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   8ffd8:	00bfe244 	movi	r2,-119
   8ffdc:	00000106 	br	8ffe4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   8ffe0:	0005883a 	mov	r2,zero
}
   8ffe4:	e037883a 	mov	sp,fp
   8ffe8:	df000017 	ldw	fp,0(sp)
   8ffec:	dec00104 	addi	sp,sp,4
   8fff0:	f800283a 	ret

0008fff4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   8fff4:	defffc04 	addi	sp,sp,-16
   8fff8:	dfc00315 	stw	ra,12(sp)
   8fffc:	df000215 	stw	fp,8(sp)
   90000:	df000204 	addi	fp,sp,8
   90004:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   90008:	d1600e04 	addi	r5,gp,-32712
   9000c:	e13fff17 	ldw	r4,-4(fp)
   90010:	0090b080 	call	90b08 <alt_find_dev>
   90014:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   90018:	e0bffe17 	ldw	r2,-8(fp)
   9001c:	1000041e 	bne	r2,zero,90030 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   90020:	008f93c0 	call	8f93c <alt_get_errno>
   90024:	1007883a 	mov	r3,r2
   90028:	008004c4 	movi	r2,19
   9002c:	18800015 	stw	r2,0(r3)
  }

  return dev;
   90030:	e0bffe17 	ldw	r2,-8(fp)
}
   90034:	e037883a 	mov	sp,fp
   90038:	dfc00117 	ldw	ra,4(sp)
   9003c:	df000017 	ldw	fp,0(sp)
   90040:	dec00204 	addi	sp,sp,8
   90044:	f800283a 	ret

00090048 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   90048:	defff104 	addi	sp,sp,-60
   9004c:	dfc00e15 	stw	ra,56(sp)
   90050:	df000d15 	stw	fp,52(sp)
   90054:	df000d04 	addi	fp,sp,52
   90058:	e13ffa15 	stw	r4,-24(fp)
   9005c:	e17ffb15 	stw	r5,-20(fp)
   90060:	e1bffc15 	stw	r6,-16(fp)
   90064:	e1fffd15 	stw	r7,-12(fp)
   90068:	e0c00217 	ldw	r3,8(fp)
   9006c:	e0800617 	ldw	r2,24(fp)
   90070:	e0fffe0d 	sth	r3,-8(fp)
   90074:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   90078:	e0bffe0b 	ldhu	r2,-8(fp)
   9007c:	e0ffff03 	ldbu	r3,-4(fp)
   90080:	d8c00615 	stw	r3,24(sp)
   90084:	d8000515 	stw	zero,20(sp)
   90088:	d8000415 	stw	zero,16(sp)
   9008c:	e0c00517 	ldw	r3,20(fp)
   90090:	d8c00315 	stw	r3,12(sp)
   90094:	e0c00417 	ldw	r3,16(fp)
   90098:	d8c00215 	stw	r3,8(sp)
   9009c:	e0c00317 	ldw	r3,12(fp)
   900a0:	d8c00115 	stw	r3,4(sp)
   900a4:	d8800015 	stw	r2,0(sp)
   900a8:	e1fffd17 	ldw	r7,-12(fp)
   900ac:	e1bffc17 	ldw	r6,-16(fp)
   900b0:	e17ffb17 	ldw	r5,-20(fp)
   900b4:	e13ffa17 	ldw	r4,-24(fp)
   900b8:	00901b40 	call	901b4 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   900bc:	0001883a 	nop
   900c0:	e037883a 	mov	sp,fp
   900c4:	dfc00117 	ldw	ra,4(sp)
   900c8:	df000017 	ldw	fp,0(sp)
   900cc:	dec00204 	addi	sp,sp,8
   900d0:	f800283a 	ret

000900d4 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   900d4:	defffc04 	addi	sp,sp,-16
   900d8:	df000315 	stw	fp,12(sp)
   900dc:	df000304 	addi	fp,sp,12
   900e0:	e13ffe15 	stw	r4,-8(fp)
   900e4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   900e8:	e0bffe17 	ldw	r2,-8(fp)
   900ec:	10800317 	ldw	r2,12(r2)
   900f0:	10800404 	addi	r2,r2,16
   900f4:	10800037 	ldwio	r2,0(r2)
   900f8:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   900fc:	e0fffd17 	ldw	r3,-12(fp)
   90100:	00a00434 	movhi	r2,32784
   90104:	10bfffc4 	addi	r2,r2,-1
   90108:	1884703a 	and	r2,r3,r2
   9010c:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   90110:	e0bfff17 	ldw	r2,-4(fp)
   90114:	1004953a 	slli	r2,r2,20
   90118:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   9011c:	e0bffd17 	ldw	r2,-12(fp)
   90120:	1884b03a 	or	r2,r3,r2
   90124:	10800134 	orhi	r2,r2,4
   90128:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   9012c:	e0bffe17 	ldw	r2,-8(fp)
   90130:	10800317 	ldw	r2,12(r2)
   90134:	10800404 	addi	r2,r2,16
   90138:	e0fffd17 	ldw	r3,-12(fp)
   9013c:	10c00035 	stwio	r3,0(r2)
  
  return;
   90140:	0001883a 	nop
}
   90144:	e037883a 	mov	sp,fp
   90148:	df000017 	ldw	fp,0(sp)
   9014c:	dec00104 	addi	sp,sp,4
   90150:	f800283a 	ret

00090154 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   90154:	defffd04 	addi	sp,sp,-12
   90158:	df000215 	stw	fp,8(sp)
   9015c:	df000204 	addi	fp,sp,8
   90160:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   90164:	e0bfff17 	ldw	r2,-4(fp)
   90168:	10800317 	ldw	r2,12(r2)
   9016c:	10800404 	addi	r2,r2,16
   90170:	10800037 	ldwio	r2,0(r2)
   90174:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   90178:	e0fffe17 	ldw	r3,-8(fp)
   9017c:	00bfff34 	movhi	r2,65532
   90180:	10bfffc4 	addi	r2,r2,-1
   90184:	1884703a 	and	r2,r3,r2
   90188:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   9018c:	e0bfff17 	ldw	r2,-4(fp)
   90190:	10800317 	ldw	r2,12(r2)
   90194:	10800404 	addi	r2,r2,16
   90198:	e0fffe17 	ldw	r3,-8(fp)
   9019c:	10c00035 	stwio	r3,0(r2)
  
  return;
   901a0:	0001883a 	nop
}
   901a4:	e037883a 	mov	sp,fp
   901a8:	df000017 	ldw	fp,0(sp)
   901ac:	dec00104 	addi	sp,sp,4
   901b0:	f800283a 	ret

000901b4 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   901b4:	defff804 	addi	sp,sp,-32
   901b8:	dfc00715 	stw	ra,28(sp)
   901bc:	df000615 	stw	fp,24(sp)
   901c0:	df000604 	addi	fp,sp,24
   901c4:	e13ffa15 	stw	r4,-24(fp)
   901c8:	e17ffb15 	stw	r5,-20(fp)
   901cc:	e1bffc15 	stw	r6,-16(fp)
   901d0:	e1fffd15 	stw	r7,-12(fp)
   901d4:	e0c00217 	ldw	r3,8(fp)
   901d8:	e0800817 	ldw	r2,32(fp)
   901dc:	e0fffe0d 	sth	r3,-8(fp)
   901e0:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   901e4:	e0bffb17 	ldw	r2,-20(fp)
   901e8:	108007c4 	addi	r2,r2,31
   901ec:	e0fffb17 	ldw	r3,-20(fp)
   901f0:	18c007c3 	ldbu	r3,31(r3)
   901f4:	19003fcc 	andi	r4,r3,255
   901f8:	00ffdfc4 	movi	r3,-129
   901fc:	20c6703a 	and	r3,r4,r3
   90200:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   90204:	e0bffa17 	ldw	r2,-24(fp)
   90208:	e0fffc17 	ldw	r3,-16(fp)
   9020c:	19403fcc 	andi	r5,r3,255
   90210:	10c00003 	ldbu	r3,0(r2)
   90214:	1806703a 	and	r3,r3,zero
   90218:	1809883a 	mov	r4,r3
   9021c:	2807883a 	mov	r3,r5
   90220:	20c6b03a 	or	r3,r4,r3
   90224:	10c00005 	stb	r3,0(r2)
   90228:	e0fffc17 	ldw	r3,-16(fp)
   9022c:	1806d23a 	srli	r3,r3,8
   90230:	19403fcc 	andi	r5,r3,255
   90234:	10c00043 	ldbu	r3,1(r2)
   90238:	1806703a 	and	r3,r3,zero
   9023c:	1809883a 	mov	r4,r3
   90240:	2807883a 	mov	r3,r5
   90244:	20c6b03a 	or	r3,r4,r3
   90248:	10c00045 	stb	r3,1(r2)
   9024c:	e0fffc17 	ldw	r3,-16(fp)
   90250:	1806d43a 	srli	r3,r3,16
   90254:	19403fcc 	andi	r5,r3,255
   90258:	10c00083 	ldbu	r3,2(r2)
   9025c:	1806703a 	and	r3,r3,zero
   90260:	1809883a 	mov	r4,r3
   90264:	2807883a 	mov	r3,r5
   90268:	20c6b03a 	or	r3,r4,r3
   9026c:	10c00085 	stb	r3,2(r2)
   90270:	e0fffc17 	ldw	r3,-16(fp)
   90274:	180ad63a 	srli	r5,r3,24
   90278:	10c000c3 	ldbu	r3,3(r2)
   9027c:	1806703a 	and	r3,r3,zero
   90280:	1809883a 	mov	r4,r3
   90284:	2807883a 	mov	r3,r5
   90288:	20c6b03a 	or	r3,r4,r3
   9028c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   90290:	e0bffa17 	ldw	r2,-24(fp)
   90294:	e0fffd17 	ldw	r3,-12(fp)
   90298:	19403fcc 	andi	r5,r3,255
   9029c:	10c00203 	ldbu	r3,8(r2)
   902a0:	1806703a 	and	r3,r3,zero
   902a4:	1809883a 	mov	r4,r3
   902a8:	2807883a 	mov	r3,r5
   902ac:	20c6b03a 	or	r3,r4,r3
   902b0:	10c00205 	stb	r3,8(r2)
   902b4:	e0fffd17 	ldw	r3,-12(fp)
   902b8:	1806d23a 	srli	r3,r3,8
   902bc:	19403fcc 	andi	r5,r3,255
   902c0:	10c00243 	ldbu	r3,9(r2)
   902c4:	1806703a 	and	r3,r3,zero
   902c8:	1809883a 	mov	r4,r3
   902cc:	2807883a 	mov	r3,r5
   902d0:	20c6b03a 	or	r3,r4,r3
   902d4:	10c00245 	stb	r3,9(r2)
   902d8:	e0fffd17 	ldw	r3,-12(fp)
   902dc:	1806d43a 	srli	r3,r3,16
   902e0:	19403fcc 	andi	r5,r3,255
   902e4:	10c00283 	ldbu	r3,10(r2)
   902e8:	1806703a 	and	r3,r3,zero
   902ec:	1809883a 	mov	r4,r3
   902f0:	2807883a 	mov	r3,r5
   902f4:	20c6b03a 	or	r3,r4,r3
   902f8:	10c00285 	stb	r3,10(r2)
   902fc:	e0fffd17 	ldw	r3,-12(fp)
   90300:	180ad63a 	srli	r5,r3,24
   90304:	10c002c3 	ldbu	r3,11(r2)
   90308:	1806703a 	and	r3,r3,zero
   9030c:	1809883a 	mov	r4,r3
   90310:	2807883a 	mov	r3,r5
   90314:	20c6b03a 	or	r3,r4,r3
   90318:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   9031c:	e0bffa17 	ldw	r2,-24(fp)
   90320:	e0fffb17 	ldw	r3,-20(fp)
   90324:	19403fcc 	andi	r5,r3,255
   90328:	10c00403 	ldbu	r3,16(r2)
   9032c:	1806703a 	and	r3,r3,zero
   90330:	1809883a 	mov	r4,r3
   90334:	2807883a 	mov	r3,r5
   90338:	20c6b03a 	or	r3,r4,r3
   9033c:	10c00405 	stb	r3,16(r2)
   90340:	e0fffb17 	ldw	r3,-20(fp)
   90344:	1806d23a 	srli	r3,r3,8
   90348:	19403fcc 	andi	r5,r3,255
   9034c:	10c00443 	ldbu	r3,17(r2)
   90350:	1806703a 	and	r3,r3,zero
   90354:	1809883a 	mov	r4,r3
   90358:	2807883a 	mov	r3,r5
   9035c:	20c6b03a 	or	r3,r4,r3
   90360:	10c00445 	stb	r3,17(r2)
   90364:	e0fffb17 	ldw	r3,-20(fp)
   90368:	1806d43a 	srli	r3,r3,16
   9036c:	19403fcc 	andi	r5,r3,255
   90370:	10c00483 	ldbu	r3,18(r2)
   90374:	1806703a 	and	r3,r3,zero
   90378:	1809883a 	mov	r4,r3
   9037c:	2807883a 	mov	r3,r5
   90380:	20c6b03a 	or	r3,r4,r3
   90384:	10c00485 	stb	r3,18(r2)
   90388:	e0fffb17 	ldw	r3,-20(fp)
   9038c:	180ad63a 	srli	r5,r3,24
   90390:	10c004c3 	ldbu	r3,19(r2)
   90394:	1806703a 	and	r3,r3,zero
   90398:	1809883a 	mov	r4,r3
   9039c:	2807883a 	mov	r3,r5
   903a0:	20c6b03a 	or	r3,r4,r3
   903a4:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   903a8:	e0bffa17 	ldw	r2,-24(fp)
   903ac:	10c00103 	ldbu	r3,4(r2)
   903b0:	1806703a 	and	r3,r3,zero
   903b4:	10c00105 	stb	r3,4(r2)
   903b8:	10c00143 	ldbu	r3,5(r2)
   903bc:	1806703a 	and	r3,r3,zero
   903c0:	10c00145 	stb	r3,5(r2)
   903c4:	10c00183 	ldbu	r3,6(r2)
   903c8:	1806703a 	and	r3,r3,zero
   903cc:	10c00185 	stb	r3,6(r2)
   903d0:	10c001c3 	ldbu	r3,7(r2)
   903d4:	1806703a 	and	r3,r3,zero
   903d8:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   903dc:	e0bffa17 	ldw	r2,-24(fp)
   903e0:	10c00303 	ldbu	r3,12(r2)
   903e4:	1806703a 	and	r3,r3,zero
   903e8:	10c00305 	stb	r3,12(r2)
   903ec:	10c00343 	ldbu	r3,13(r2)
   903f0:	1806703a 	and	r3,r3,zero
   903f4:	10c00345 	stb	r3,13(r2)
   903f8:	10c00383 	ldbu	r3,14(r2)
   903fc:	1806703a 	and	r3,r3,zero
   90400:	10c00385 	stb	r3,14(r2)
   90404:	10c003c3 	ldbu	r3,15(r2)
   90408:	1806703a 	and	r3,r3,zero
   9040c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   90410:	e0bffa17 	ldw	r2,-24(fp)
   90414:	10c00503 	ldbu	r3,20(r2)
   90418:	1806703a 	and	r3,r3,zero
   9041c:	10c00505 	stb	r3,20(r2)
   90420:	10c00543 	ldbu	r3,21(r2)
   90424:	1806703a 	and	r3,r3,zero
   90428:	10c00545 	stb	r3,21(r2)
   9042c:	10c00583 	ldbu	r3,22(r2)
   90430:	1806703a 	and	r3,r3,zero
   90434:	10c00585 	stb	r3,22(r2)
   90438:	10c005c3 	ldbu	r3,23(r2)
   9043c:	1806703a 	and	r3,r3,zero
   90440:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   90444:	e0bffa17 	ldw	r2,-24(fp)
   90448:	e0fffe17 	ldw	r3,-8(fp)
   9044c:	19403fcc 	andi	r5,r3,255
   90450:	10c00603 	ldbu	r3,24(r2)
   90454:	1806703a 	and	r3,r3,zero
   90458:	1809883a 	mov	r4,r3
   9045c:	2807883a 	mov	r3,r5
   90460:	20c6b03a 	or	r3,r4,r3
   90464:	10c00605 	stb	r3,24(r2)
   90468:	e0fffe17 	ldw	r3,-8(fp)
   9046c:	1806d23a 	srli	r3,r3,8
   90470:	19403fcc 	andi	r5,r3,255
   90474:	10c00643 	ldbu	r3,25(r2)
   90478:	1806703a 	and	r3,r3,zero
   9047c:	1809883a 	mov	r4,r3
   90480:	2807883a 	mov	r3,r5
   90484:	20c6b03a 	or	r3,r4,r3
   90488:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   9048c:	e0bffa17 	ldw	r2,-24(fp)
   90490:	10c00703 	ldbu	r3,28(r2)
   90494:	1806703a 	and	r3,r3,zero
   90498:	10c00705 	stb	r3,28(r2)
   9049c:	10c00743 	ldbu	r3,29(r2)
   904a0:	1806703a 	and	r3,r3,zero
   904a4:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   904a8:	e0bffa17 	ldw	r2,-24(fp)
   904ac:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   904b0:	e0800617 	ldw	r2,24(fp)
   904b4:	1007883a 	mov	r3,r2
   904b8:	e0bffa17 	ldw	r2,-24(fp)
   904bc:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   904c0:	e0800717 	ldw	r2,28(fp)
   904c4:	1007883a 	mov	r3,r2
   904c8:	e0bffa17 	ldw	r2,-24(fp)
   904cc:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   904d0:	e0800317 	ldw	r2,12(fp)
   904d4:	10000226 	beq	r2,zero,904e0 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   904d8:	00bfe044 	movi	r2,-127
   904dc:	00000106 	br	904e4 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   904e0:	00bfe004 	movi	r2,-128
   904e4:	e0c00417 	ldw	r3,16(fp)
   904e8:	18000226 	beq	r3,zero,904f4 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   904ec:	00c00084 	movi	r3,2
   904f0:	00000106 	br	904f8 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   904f4:	0007883a 	mov	r3,zero
   904f8:	10c4b03a 	or	r2,r2,r3
   904fc:	1007883a 	mov	r3,r2
   90500:	e0800517 	ldw	r2,20(fp)
   90504:	10000226 	beq	r2,zero,90510 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   90508:	00800104 	movi	r2,4
   9050c:	00000106 	br	90514 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   90510:	0005883a 	mov	r2,zero
   90514:	1884b03a 	or	r2,r3,r2
   90518:	1007883a 	mov	r3,r2
   9051c:	e0bfff03 	ldbu	r2,-4(fp)
   90520:	10000426 	beq	r2,zero,90534 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   90524:	e0bfff03 	ldbu	r2,-4(fp)
   90528:	108003cc 	andi	r2,r2,15
   9052c:	100490fa 	slli	r2,r2,3
   90530:	00000106 	br	90538 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   90534:	0005883a 	mov	r2,zero
   90538:	1884b03a 	or	r2,r3,r2
   9053c:	1007883a 	mov	r3,r2
   90540:	e0bffa17 	ldw	r2,-24(fp)
   90544:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   90548:	01400804 	movi	r5,32
   9054c:	e13ffa17 	ldw	r4,-24(fp)
   90550:	00908f00 	call	908f0 <alt_dcache_flush>
}
   90554:	0001883a 	nop
   90558:	e037883a 	mov	sp,fp
   9055c:	dfc00117 	ldw	ra,4(sp)
   90560:	df000017 	ldw	fp,0(sp)
   90564:	dec00204 	addi	sp,sp,8
   90568:	f800283a 	ret

0009056c <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   9056c:	defff904 	addi	sp,sp,-28
   90570:	dfc00615 	stw	ra,24(sp)
   90574:	df000515 	stw	fp,20(sp)
   90578:	df000504 	addi	fp,sp,20
   9057c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   90580:	e0bfff17 	ldw	r2,-4(fp)
   90584:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   90588:	e0bffb17 	ldw	r2,-20(fp)
   9058c:	10800317 	ldw	r2,12(r2)
   90590:	10800404 	addi	r2,r2,16
   90594:	e0fffb17 	ldw	r3,-20(fp)
   90598:	18c00317 	ldw	r3,12(r3)
   9059c:	18c00404 	addi	r3,r3,16
   905a0:	18c00037 	ldwio	r3,0(r3)
   905a4:	18e00034 	orhi	r3,r3,32768
   905a8:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   905ac:	e0bffb17 	ldw	r2,-20(fp)
   905b0:	10800317 	ldw	r2,12(r2)
   905b4:	10800404 	addi	r2,r2,16
   905b8:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   905bc:	e0bffb17 	ldw	r2,-20(fp)
   905c0:	10800917 	ldw	r2,36(r2)
   905c4:	10001226 	beq	r2,zero,90610 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   905c8:	0005303a 	rdctl	r2,status
   905cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   905d0:	e0fffd17 	ldw	r3,-12(fp)
   905d4:	00bfff84 	movi	r2,-2
   905d8:	1884703a 	and	r2,r3,r2
   905dc:	1001703a 	wrctl	status,r2
  
  return context;
   905e0:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   905e4:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   905e8:	e0bffb17 	ldw	r2,-20(fp)
   905ec:	10800917 	ldw	r2,36(r2)
   905f0:	e0fffb17 	ldw	r3,-20(fp)
   905f4:	18c00a17 	ldw	r3,40(r3)
   905f8:	1809883a 	mov	r4,r3
   905fc:	103ee83a 	callr	r2
   90600:	e0bffc17 	ldw	r2,-16(fp)
   90604:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90608:	e0bffe17 	ldw	r2,-8(fp)
   9060c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   90610:	0001883a 	nop
   90614:	e037883a 	mov	sp,fp
   90618:	dfc00117 	ldw	ra,4(sp)
   9061c:	df000017 	ldw	fp,0(sp)
   90620:	dec00204 	addi	sp,sp,8
   90624:	f800283a 	ret

00090628 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   90628:	defffa04 	addi	sp,sp,-24
   9062c:	dfc00515 	stw	ra,20(sp)
   90630:	df000415 	stw	fp,16(sp)
   90634:	df000404 	addi	fp,sp,16
   90638:	e13ffd15 	stw	r4,-12(fp)
   9063c:	e17ffe15 	stw	r5,-8(fp)
   90640:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   90644:	e0bffd17 	ldw	r2,-12(fp)
   90648:	10800317 	ldw	r2,12(r2)
   9064c:	10800404 	addi	r2,r2,16
   90650:	00c00074 	movhi	r3,1
   90654:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   90658:	e0bffd17 	ldw	r2,-12(fp)
   9065c:	10800317 	ldw	r2,12(r2)
   90660:	10800404 	addi	r2,r2,16
   90664:	00c00074 	movhi	r3,1
   90668:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   9066c:	e0bffd17 	ldw	r2,-12(fp)
   90670:	10800317 	ldw	r2,12(r2)
   90674:	10800404 	addi	r2,r2,16
   90678:	0007883a 	mov	r3,zero
   9067c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   90680:	e0bffd17 	ldw	r2,-12(fp)
   90684:	10800317 	ldw	r2,12(r2)
   90688:	00c03fc4 	movi	r3,255
   9068c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   90690:	d1600e04 	addi	r5,gp,-32712
   90694:	e13ffd17 	ldw	r4,-12(fp)
   90698:	00909a40 	call	909a4 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   9069c:	d8000015 	stw	zero,0(sp)
   906a0:	e1fffd17 	ldw	r7,-12(fp)
   906a4:	01800274 	movhi	r6,9
   906a8:	31815b04 	addi	r6,r6,1388
   906ac:	e17fff17 	ldw	r5,-4(fp)
   906b0:	e13ffe17 	ldw	r4,-8(fp)
   906b4:	0090bcc0 	call	90bcc <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   906b8:	0001883a 	nop
   906bc:	e037883a 	mov	sp,fp
   906c0:	dfc00117 	ldw	ra,4(sp)
   906c4:	df000017 	ldw	fp,0(sp)
   906c8:	dec00204 	addi	sp,sp,8
   906cc:	f800283a 	ret

000906d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   906d0:	defffa04 	addi	sp,sp,-24
   906d4:	dfc00515 	stw	ra,20(sp)
   906d8:	df000415 	stw	fp,16(sp)
   906dc:	df000404 	addi	fp,sp,16
   906e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   906e4:	0007883a 	mov	r3,zero
   906e8:	e0bfff17 	ldw	r2,-4(fp)
   906ec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   906f0:	e0bfff17 	ldw	r2,-4(fp)
   906f4:	10800104 	addi	r2,r2,4
   906f8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   906fc:	0005303a 	rdctl	r2,status
   90700:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90704:	e0fffd17 	ldw	r3,-12(fp)
   90708:	00bfff84 	movi	r2,-2
   9070c:	1884703a 	and	r2,r3,r2
   90710:	1001703a 	wrctl	status,r2
  
  return context;
   90714:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   90718:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   9071c:	009129c0 	call	9129c <alt_tick>
   90720:	e0bffc17 	ldw	r2,-16(fp)
   90724:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90728:	e0bffe17 	ldw	r2,-8(fp)
   9072c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   90730:	0001883a 	nop
   90734:	e037883a 	mov	sp,fp
   90738:	dfc00117 	ldw	ra,4(sp)
   9073c:	df000017 	ldw	fp,0(sp)
   90740:	dec00204 	addi	sp,sp,8
   90744:	f800283a 	ret

00090748 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   90748:	defff804 	addi	sp,sp,-32
   9074c:	dfc00715 	stw	ra,28(sp)
   90750:	df000615 	stw	fp,24(sp)
   90754:	df000604 	addi	fp,sp,24
   90758:	e13ffc15 	stw	r4,-16(fp)
   9075c:	e17ffd15 	stw	r5,-12(fp)
   90760:	e1bffe15 	stw	r6,-8(fp)
   90764:	e1ffff15 	stw	r7,-4(fp)
   90768:	e0bfff17 	ldw	r2,-4(fp)
   9076c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   90770:	d0a80217 	ldw	r2,-24568(gp)
   90774:	1000021e 	bne	r2,zero,90780 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   90778:	e0bffb17 	ldw	r2,-20(fp)
   9077c:	d0a80215 	stw	r2,-24568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   90780:	e0bffc17 	ldw	r2,-16(fp)
   90784:	10800104 	addi	r2,r2,4
   90788:	00c001c4 	movi	r3,7
   9078c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   90790:	d8000015 	stw	zero,0(sp)
   90794:	e1fffc17 	ldw	r7,-16(fp)
   90798:	01800274 	movhi	r6,9
   9079c:	3181b404 	addi	r6,r6,1744
   907a0:	e17ffe17 	ldw	r5,-8(fp)
   907a4:	e13ffd17 	ldw	r4,-12(fp)
   907a8:	0090bcc0 	call	90bcc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   907ac:	0001883a 	nop
   907b0:	e037883a 	mov	sp,fp
   907b4:	dfc00117 	ldw	ra,4(sp)
   907b8:	df000017 	ldw	fp,0(sp)
   907bc:	dec00204 	addi	sp,sp,8
   907c0:	f800283a 	ret

000907c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   907c4:	defff504 	addi	sp,sp,-44
   907c8:	df000a15 	stw	fp,40(sp)
   907cc:	df000a04 	addi	fp,sp,40
   907d0:	e13ffc15 	stw	r4,-16(fp)
   907d4:	e17ffd15 	stw	r5,-12(fp)
   907d8:	e1bffe15 	stw	r6,-8(fp)
   907dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   907e0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   907e4:	d0a80217 	ldw	r2,-24568(gp)
  
  if (alt_ticks_per_second ())
   907e8:	10003c26 	beq	r2,zero,908dc <alt_alarm_start+0x118>
  {
    if (alarm)
   907ec:	e0bffc17 	ldw	r2,-16(fp)
   907f0:	10003826 	beq	r2,zero,908d4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   907f4:	e0bffc17 	ldw	r2,-16(fp)
   907f8:	e0fffe17 	ldw	r3,-8(fp)
   907fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   90800:	e0bffc17 	ldw	r2,-16(fp)
   90804:	e0ffff17 	ldw	r3,-4(fp)
   90808:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9080c:	0005303a 	rdctl	r2,status
   90810:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90814:	e0fff917 	ldw	r3,-28(fp)
   90818:	00bfff84 	movi	r2,-2
   9081c:	1884703a 	and	r2,r3,r2
   90820:	1001703a 	wrctl	status,r2
  
  return context;
   90824:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   90828:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   9082c:	d0a80317 	ldw	r2,-24564(gp)
      
      current_nticks = alt_nticks();
   90830:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   90834:	e0fffd17 	ldw	r3,-12(fp)
   90838:	e0bff617 	ldw	r2,-40(fp)
   9083c:	1885883a 	add	r2,r3,r2
   90840:	10c00044 	addi	r3,r2,1
   90844:	e0bffc17 	ldw	r2,-16(fp)
   90848:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   9084c:	e0bffc17 	ldw	r2,-16(fp)
   90850:	10c00217 	ldw	r3,8(r2)
   90854:	e0bff617 	ldw	r2,-40(fp)
   90858:	1880042e 	bgeu	r3,r2,9086c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   9085c:	e0bffc17 	ldw	r2,-16(fp)
   90860:	00c00044 	movi	r3,1
   90864:	10c00405 	stb	r3,16(r2)
   90868:	00000206 	br	90874 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   9086c:	e0bffc17 	ldw	r2,-16(fp)
   90870:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   90874:	e0bffc17 	ldw	r2,-16(fp)
   90878:	d0e01104 	addi	r3,gp,-32700
   9087c:	e0fffa15 	stw	r3,-24(fp)
   90880:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90884:	e0bffb17 	ldw	r2,-20(fp)
   90888:	e0fffa17 	ldw	r3,-24(fp)
   9088c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90890:	e0bffa17 	ldw	r2,-24(fp)
   90894:	10c00017 	ldw	r3,0(r2)
   90898:	e0bffb17 	ldw	r2,-20(fp)
   9089c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   908a0:	e0bffa17 	ldw	r2,-24(fp)
   908a4:	10800017 	ldw	r2,0(r2)
   908a8:	e0fffb17 	ldw	r3,-20(fp)
   908ac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   908b0:	e0bffa17 	ldw	r2,-24(fp)
   908b4:	e0fffb17 	ldw	r3,-20(fp)
   908b8:	10c00015 	stw	r3,0(r2)
   908bc:	e0bff817 	ldw	r2,-32(fp)
   908c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   908c4:	e0bff717 	ldw	r2,-36(fp)
   908c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   908cc:	0005883a 	mov	r2,zero
   908d0:	00000306 	br	908e0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   908d4:	00bffa84 	movi	r2,-22
   908d8:	00000106 	br	908e0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   908dc:	00bfde84 	movi	r2,-134
  }
}
   908e0:	e037883a 	mov	sp,fp
   908e4:	df000017 	ldw	fp,0(sp)
   908e8:	dec00104 	addi	sp,sp,4
   908ec:	f800283a 	ret

000908f0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   908f0:	defffb04 	addi	sp,sp,-20
   908f4:	df000415 	stw	fp,16(sp)
   908f8:	df000404 	addi	fp,sp,16
   908fc:	e13ffe15 	stw	r4,-8(fp)
   90900:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   90904:	e0fffe17 	ldw	r3,-8(fp)
   90908:	e0bfff17 	ldw	r2,-4(fp)
   9090c:	1885883a 	add	r2,r3,r2
   90910:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   90914:	e0bffe17 	ldw	r2,-8(fp)
   90918:	e0bffc15 	stw	r2,-16(fp)
   9091c:	00000506 	br	90934 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   90920:	e0bffc17 	ldw	r2,-16(fp)
   90924:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   90928:	e0bffc17 	ldw	r2,-16(fp)
   9092c:	10800804 	addi	r2,r2,32
   90930:	e0bffc15 	stw	r2,-16(fp)
   90934:	e0fffc17 	ldw	r3,-16(fp)
   90938:	e0bffd17 	ldw	r2,-12(fp)
   9093c:	18bff836 	bltu	r3,r2,90920 <rx_descriptor_end+0xfff908c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   90940:	e0bffe17 	ldw	r2,-8(fp)
   90944:	108007cc 	andi	r2,r2,31
   90948:	10000226 	beq	r2,zero,90954 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   9094c:	e0bffc17 	ldw	r2,-16(fp)
   90950:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   90954:	0001883a 	nop
   90958:	e037883a 	mov	sp,fp
   9095c:	df000017 	ldw	fp,0(sp)
   90960:	dec00104 	addi	sp,sp,4
   90964:	f800283a 	ret

00090968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90968:	defffe04 	addi	sp,sp,-8
   9096c:	dfc00115 	stw	ra,4(sp)
   90970:	df000015 	stw	fp,0(sp)
   90974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90978:	d0a00c17 	ldw	r2,-32720(gp)
   9097c:	10000326 	beq	r2,zero,9098c <alt_get_errno+0x24>
   90980:	d0a00c17 	ldw	r2,-32720(gp)
   90984:	103ee83a 	callr	r2
   90988:	00000106 	br	90990 <alt_get_errno+0x28>
   9098c:	d0a7fa04 	addi	r2,gp,-24600
}
   90990:	e037883a 	mov	sp,fp
   90994:	dfc00117 	ldw	ra,4(sp)
   90998:	df000017 	ldw	fp,0(sp)
   9099c:	dec00204 	addi	sp,sp,8
   909a0:	f800283a 	ret

000909a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   909a4:	defffa04 	addi	sp,sp,-24
   909a8:	dfc00515 	stw	ra,20(sp)
   909ac:	df000415 	stw	fp,16(sp)
   909b0:	df000404 	addi	fp,sp,16
   909b4:	e13ffe15 	stw	r4,-8(fp)
   909b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   909bc:	e0bffe17 	ldw	r2,-8(fp)
   909c0:	10000326 	beq	r2,zero,909d0 <alt_dev_llist_insert+0x2c>
   909c4:	e0bffe17 	ldw	r2,-8(fp)
   909c8:	10800217 	ldw	r2,8(r2)
   909cc:	1000061e 	bne	r2,zero,909e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   909d0:	00909680 	call	90968 <alt_get_errno>
   909d4:	1007883a 	mov	r3,r2
   909d8:	00800584 	movi	r2,22
   909dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   909e0:	00bffa84 	movi	r2,-22
   909e4:	00001306 	br	90a34 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   909e8:	e0bffe17 	ldw	r2,-8(fp)
   909ec:	e0ffff17 	ldw	r3,-4(fp)
   909f0:	e0fffc15 	stw	r3,-16(fp)
   909f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   909f8:	e0bffd17 	ldw	r2,-12(fp)
   909fc:	e0fffc17 	ldw	r3,-16(fp)
   90a00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90a04:	e0bffc17 	ldw	r2,-16(fp)
   90a08:	10c00017 	ldw	r3,0(r2)
   90a0c:	e0bffd17 	ldw	r2,-12(fp)
   90a10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90a14:	e0bffc17 	ldw	r2,-16(fp)
   90a18:	10800017 	ldw	r2,0(r2)
   90a1c:	e0fffd17 	ldw	r3,-12(fp)
   90a20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90a24:	e0bffc17 	ldw	r2,-16(fp)
   90a28:	e0fffd17 	ldw	r3,-12(fp)
   90a2c:	10c00015 	stw	r3,0(r2)

  return 0;  
   90a30:	0005883a 	mov	r2,zero
}
   90a34:	e037883a 	mov	sp,fp
   90a38:	dfc00117 	ldw	ra,4(sp)
   90a3c:	df000017 	ldw	fp,0(sp)
   90a40:	dec00204 	addi	sp,sp,8
   90a44:	f800283a 	ret

00090a48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   90a48:	defffd04 	addi	sp,sp,-12
   90a4c:	dfc00215 	stw	ra,8(sp)
   90a50:	df000115 	stw	fp,4(sp)
   90a54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90a58:	00800274 	movhi	r2,9
   90a5c:	1086e604 	addi	r2,r2,7064
   90a60:	e0bfff15 	stw	r2,-4(fp)
   90a64:	00000606 	br	90a80 <_do_ctors+0x38>
        (*ctor) (); 
   90a68:	e0bfff17 	ldw	r2,-4(fp)
   90a6c:	10800017 	ldw	r2,0(r2)
   90a70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90a74:	e0bfff17 	ldw	r2,-4(fp)
   90a78:	10bfff04 	addi	r2,r2,-4
   90a7c:	e0bfff15 	stw	r2,-4(fp)
   90a80:	e0ffff17 	ldw	r3,-4(fp)
   90a84:	00800274 	movhi	r2,9
   90a88:	1086e704 	addi	r2,r2,7068
   90a8c:	18bff62e 	bgeu	r3,r2,90a68 <rx_descriptor_end+0xfff90a08>
        (*ctor) (); 
}
   90a90:	0001883a 	nop
   90a94:	e037883a 	mov	sp,fp
   90a98:	dfc00117 	ldw	ra,4(sp)
   90a9c:	df000017 	ldw	fp,0(sp)
   90aa0:	dec00204 	addi	sp,sp,8
   90aa4:	f800283a 	ret

00090aa8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   90aa8:	defffd04 	addi	sp,sp,-12
   90aac:	dfc00215 	stw	ra,8(sp)
   90ab0:	df000115 	stw	fp,4(sp)
   90ab4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90ab8:	00800274 	movhi	r2,9
   90abc:	1086e604 	addi	r2,r2,7064
   90ac0:	e0bfff15 	stw	r2,-4(fp)
   90ac4:	00000606 	br	90ae0 <_do_dtors+0x38>
        (*dtor) (); 
   90ac8:	e0bfff17 	ldw	r2,-4(fp)
   90acc:	10800017 	ldw	r2,0(r2)
   90ad0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90ad4:	e0bfff17 	ldw	r2,-4(fp)
   90ad8:	10bfff04 	addi	r2,r2,-4
   90adc:	e0bfff15 	stw	r2,-4(fp)
   90ae0:	e0ffff17 	ldw	r3,-4(fp)
   90ae4:	00800274 	movhi	r2,9
   90ae8:	1086e704 	addi	r2,r2,7068
   90aec:	18bff62e 	bgeu	r3,r2,90ac8 <rx_descriptor_end+0xfff90a68>
        (*dtor) (); 
}
   90af0:	0001883a 	nop
   90af4:	e037883a 	mov	sp,fp
   90af8:	dfc00117 	ldw	ra,4(sp)
   90afc:	df000017 	ldw	fp,0(sp)
   90b00:	dec00204 	addi	sp,sp,8
   90b04:	f800283a 	ret

00090b08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   90b08:	defffa04 	addi	sp,sp,-24
   90b0c:	dfc00515 	stw	ra,20(sp)
   90b10:	df000415 	stw	fp,16(sp)
   90b14:	df000404 	addi	fp,sp,16
   90b18:	e13ffe15 	stw	r4,-8(fp)
   90b1c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   90b20:	e0bfff17 	ldw	r2,-4(fp)
   90b24:	10800017 	ldw	r2,0(r2)
   90b28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   90b2c:	e13ffe17 	ldw	r4,-8(fp)
   90b30:	008875c0 	call	8875c <strlen>
   90b34:	10800044 	addi	r2,r2,1
   90b38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90b3c:	00000d06 	br	90b74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   90b40:	e0bffc17 	ldw	r2,-16(fp)
   90b44:	10800217 	ldw	r2,8(r2)
   90b48:	e0fffd17 	ldw	r3,-12(fp)
   90b4c:	180d883a 	mov	r6,r3
   90b50:	e17ffe17 	ldw	r5,-8(fp)
   90b54:	1009883a 	mov	r4,r2
   90b58:	00916ec0 	call	916ec <memcmp>
   90b5c:	1000021e 	bne	r2,zero,90b68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   90b60:	e0bffc17 	ldw	r2,-16(fp)
   90b64:	00000706 	br	90b84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90b68:	e0bffc17 	ldw	r2,-16(fp)
   90b6c:	10800017 	ldw	r2,0(r2)
   90b70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90b74:	e0fffc17 	ldw	r3,-16(fp)
   90b78:	e0bfff17 	ldw	r2,-4(fp)
   90b7c:	18bff01e 	bne	r3,r2,90b40 <rx_descriptor_end+0xfff90ae0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   90b80:	0005883a 	mov	r2,zero
}
   90b84:	e037883a 	mov	sp,fp
   90b88:	dfc00117 	ldw	ra,4(sp)
   90b8c:	df000017 	ldw	fp,0(sp)
   90b90:	dec00204 	addi	sp,sp,8
   90b94:	f800283a 	ret

00090b98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   90b98:	defffe04 	addi	sp,sp,-8
   90b9c:	dfc00115 	stw	ra,4(sp)
   90ba0:	df000015 	stw	fp,0(sp)
   90ba4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   90ba8:	01440004 	movi	r5,4096
   90bac:	0009883a 	mov	r4,zero
   90bb0:	00915740 	call	91574 <alt_icache_flush>
#endif
}
   90bb4:	0001883a 	nop
   90bb8:	e037883a 	mov	sp,fp
   90bbc:	dfc00117 	ldw	ra,4(sp)
   90bc0:	df000017 	ldw	fp,0(sp)
   90bc4:	dec00204 	addi	sp,sp,8
   90bc8:	f800283a 	ret

00090bcc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   90bcc:	defff904 	addi	sp,sp,-28
   90bd0:	dfc00615 	stw	ra,24(sp)
   90bd4:	df000515 	stw	fp,20(sp)
   90bd8:	df000504 	addi	fp,sp,20
   90bdc:	e13ffc15 	stw	r4,-16(fp)
   90be0:	e17ffd15 	stw	r5,-12(fp)
   90be4:	e1bffe15 	stw	r6,-8(fp)
   90be8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   90bec:	e0800217 	ldw	r2,8(fp)
   90bf0:	d8800015 	stw	r2,0(sp)
   90bf4:	e1ffff17 	ldw	r7,-4(fp)
   90bf8:	e1bffe17 	ldw	r6,-8(fp)
   90bfc:	e17ffd17 	ldw	r5,-12(fp)
   90c00:	e13ffc17 	ldw	r4,-16(fp)
   90c04:	0090d7c0 	call	90d7c <alt_iic_isr_register>
}  
   90c08:	e037883a 	mov	sp,fp
   90c0c:	dfc00117 	ldw	ra,4(sp)
   90c10:	df000017 	ldw	fp,0(sp)
   90c14:	dec00204 	addi	sp,sp,8
   90c18:	f800283a 	ret

00090c1c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   90c1c:	defff904 	addi	sp,sp,-28
   90c20:	df000615 	stw	fp,24(sp)
   90c24:	df000604 	addi	fp,sp,24
   90c28:	e13ffe15 	stw	r4,-8(fp)
   90c2c:	e17fff15 	stw	r5,-4(fp)
   90c30:	e0bfff17 	ldw	r2,-4(fp)
   90c34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90c38:	0005303a 	rdctl	r2,status
   90c3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90c40:	e0fffb17 	ldw	r3,-20(fp)
   90c44:	00bfff84 	movi	r2,-2
   90c48:	1884703a 	and	r2,r3,r2
   90c4c:	1001703a 	wrctl	status,r2
  
  return context;
   90c50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90c54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   90c58:	00c00044 	movi	r3,1
   90c5c:	e0bffa17 	ldw	r2,-24(fp)
   90c60:	1884983a 	sll	r2,r3,r2
   90c64:	1007883a 	mov	r3,r2
   90c68:	d0a80117 	ldw	r2,-24572(gp)
   90c6c:	1884b03a 	or	r2,r3,r2
   90c70:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90c74:	d0a80117 	ldw	r2,-24572(gp)
   90c78:	100170fa 	wrctl	ienable,r2
   90c7c:	e0bffc17 	ldw	r2,-16(fp)
   90c80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90c84:	e0bffd17 	ldw	r2,-12(fp)
   90c88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90c8c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   90c90:	0001883a 	nop
}
   90c94:	e037883a 	mov	sp,fp
   90c98:	df000017 	ldw	fp,0(sp)
   90c9c:	dec00104 	addi	sp,sp,4
   90ca0:	f800283a 	ret

00090ca4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   90ca4:	defff904 	addi	sp,sp,-28
   90ca8:	df000615 	stw	fp,24(sp)
   90cac:	df000604 	addi	fp,sp,24
   90cb0:	e13ffe15 	stw	r4,-8(fp)
   90cb4:	e17fff15 	stw	r5,-4(fp)
   90cb8:	e0bfff17 	ldw	r2,-4(fp)
   90cbc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90cc0:	0005303a 	rdctl	r2,status
   90cc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90cc8:	e0fffb17 	ldw	r3,-20(fp)
   90ccc:	00bfff84 	movi	r2,-2
   90cd0:	1884703a 	and	r2,r3,r2
   90cd4:	1001703a 	wrctl	status,r2
  
  return context;
   90cd8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90cdc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   90ce0:	00c00044 	movi	r3,1
   90ce4:	e0bffa17 	ldw	r2,-24(fp)
   90ce8:	1884983a 	sll	r2,r3,r2
   90cec:	0084303a 	nor	r2,zero,r2
   90cf0:	1007883a 	mov	r3,r2
   90cf4:	d0a80117 	ldw	r2,-24572(gp)
   90cf8:	1884703a 	and	r2,r3,r2
   90cfc:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90d00:	d0a80117 	ldw	r2,-24572(gp)
   90d04:	100170fa 	wrctl	ienable,r2
   90d08:	e0bffc17 	ldw	r2,-16(fp)
   90d0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90d10:	e0bffd17 	ldw	r2,-12(fp)
   90d14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90d18:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   90d1c:	0001883a 	nop
}
   90d20:	e037883a 	mov	sp,fp
   90d24:	df000017 	ldw	fp,0(sp)
   90d28:	dec00104 	addi	sp,sp,4
   90d2c:	f800283a 	ret

00090d30 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   90d30:	defffc04 	addi	sp,sp,-16
   90d34:	df000315 	stw	fp,12(sp)
   90d38:	df000304 	addi	fp,sp,12
   90d3c:	e13ffe15 	stw	r4,-8(fp)
   90d40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   90d44:	000530fa 	rdctl	r2,ienable
   90d48:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   90d4c:	00c00044 	movi	r3,1
   90d50:	e0bfff17 	ldw	r2,-4(fp)
   90d54:	1884983a 	sll	r2,r3,r2
   90d58:	1007883a 	mov	r3,r2
   90d5c:	e0bffd17 	ldw	r2,-12(fp)
   90d60:	1884703a 	and	r2,r3,r2
   90d64:	1004c03a 	cmpne	r2,r2,zero
   90d68:	10803fcc 	andi	r2,r2,255
}
   90d6c:	e037883a 	mov	sp,fp
   90d70:	df000017 	ldw	fp,0(sp)
   90d74:	dec00104 	addi	sp,sp,4
   90d78:	f800283a 	ret

00090d7c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   90d7c:	defff504 	addi	sp,sp,-44
   90d80:	dfc00a15 	stw	ra,40(sp)
   90d84:	df000915 	stw	fp,36(sp)
   90d88:	df000904 	addi	fp,sp,36
   90d8c:	e13ffc15 	stw	r4,-16(fp)
   90d90:	e17ffd15 	stw	r5,-12(fp)
   90d94:	e1bffe15 	stw	r6,-8(fp)
   90d98:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   90d9c:	00bffa84 	movi	r2,-22
   90da0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   90da4:	e0bffd17 	ldw	r2,-12(fp)
   90da8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   90dac:	e0bff817 	ldw	r2,-32(fp)
   90db0:	10800808 	cmpgei	r2,r2,32
   90db4:	1000271e 	bne	r2,zero,90e54 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90db8:	0005303a 	rdctl	r2,status
   90dbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90dc0:	e0fffb17 	ldw	r3,-20(fp)
   90dc4:	00bfff84 	movi	r2,-2
   90dc8:	1884703a 	and	r2,r3,r2
   90dcc:	1001703a 	wrctl	status,r2
  
  return context;
   90dd0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   90dd4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   90dd8:	00800274 	movhi	r2,9
   90ddc:	10998004 	addi	r2,r2,26112
   90de0:	e0fff817 	ldw	r3,-32(fp)
   90de4:	180690fa 	slli	r3,r3,3
   90de8:	10c5883a 	add	r2,r2,r3
   90dec:	e0fffe17 	ldw	r3,-8(fp)
   90df0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   90df4:	00800274 	movhi	r2,9
   90df8:	10998004 	addi	r2,r2,26112
   90dfc:	e0fff817 	ldw	r3,-32(fp)
   90e00:	180690fa 	slli	r3,r3,3
   90e04:	10c5883a 	add	r2,r2,r3
   90e08:	10800104 	addi	r2,r2,4
   90e0c:	e0ffff17 	ldw	r3,-4(fp)
   90e10:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   90e14:	e0bffe17 	ldw	r2,-8(fp)
   90e18:	10000526 	beq	r2,zero,90e30 <alt_iic_isr_register+0xb4>
   90e1c:	e0bff817 	ldw	r2,-32(fp)
   90e20:	100b883a 	mov	r5,r2
   90e24:	e13ffc17 	ldw	r4,-16(fp)
   90e28:	0090c1c0 	call	90c1c <alt_ic_irq_enable>
   90e2c:	00000406 	br	90e40 <alt_iic_isr_register+0xc4>
   90e30:	e0bff817 	ldw	r2,-32(fp)
   90e34:	100b883a 	mov	r5,r2
   90e38:	e13ffc17 	ldw	r4,-16(fp)
   90e3c:	0090ca40 	call	90ca4 <alt_ic_irq_disable>
   90e40:	e0bff715 	stw	r2,-36(fp)
   90e44:	e0bffa17 	ldw	r2,-24(fp)
   90e48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e4c:	e0bff917 	ldw	r2,-28(fp)
   90e50:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   90e54:	e0bff717 	ldw	r2,-36(fp)
}
   90e58:	e037883a 	mov	sp,fp
   90e5c:	dfc00117 	ldw	ra,4(sp)
   90e60:	df000017 	ldw	fp,0(sp)
   90e64:	dec00204 	addi	sp,sp,8
   90e68:	f800283a 	ret

00090e6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   90e6c:	defff904 	addi	sp,sp,-28
   90e70:	dfc00615 	stw	ra,24(sp)
   90e74:	df000515 	stw	fp,20(sp)
   90e78:	df000504 	addi	fp,sp,20
   90e7c:	e13ffc15 	stw	r4,-16(fp)
   90e80:	e17ffd15 	stw	r5,-12(fp)
   90e84:	e1bffe15 	stw	r6,-8(fp)
   90e88:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   90e8c:	e1bfff17 	ldw	r6,-4(fp)
   90e90:	e17ffe17 	ldw	r5,-8(fp)
   90e94:	e13ffd17 	ldw	r4,-12(fp)
   90e98:	00910ac0 	call	910ac <open>
   90e9c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   90ea0:	e0bffb17 	ldw	r2,-20(fp)
   90ea4:	10001c16 	blt	r2,zero,90f18 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   90ea8:	00800274 	movhi	r2,9
   90eac:	108be104 	addi	r2,r2,12164
   90eb0:	e0fffb17 	ldw	r3,-20(fp)
   90eb4:	18c00324 	muli	r3,r3,12
   90eb8:	10c5883a 	add	r2,r2,r3
   90ebc:	10c00017 	ldw	r3,0(r2)
   90ec0:	e0bffc17 	ldw	r2,-16(fp)
   90ec4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   90ec8:	00800274 	movhi	r2,9
   90ecc:	108be104 	addi	r2,r2,12164
   90ed0:	e0fffb17 	ldw	r3,-20(fp)
   90ed4:	18c00324 	muli	r3,r3,12
   90ed8:	10c5883a 	add	r2,r2,r3
   90edc:	10800104 	addi	r2,r2,4
   90ee0:	10c00017 	ldw	r3,0(r2)
   90ee4:	e0bffc17 	ldw	r2,-16(fp)
   90ee8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   90eec:	00800274 	movhi	r2,9
   90ef0:	108be104 	addi	r2,r2,12164
   90ef4:	e0fffb17 	ldw	r3,-20(fp)
   90ef8:	18c00324 	muli	r3,r3,12
   90efc:	10c5883a 	add	r2,r2,r3
   90f00:	10800204 	addi	r2,r2,8
   90f04:	10c00017 	ldw	r3,0(r2)
   90f08:	e0bffc17 	ldw	r2,-16(fp)
   90f0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   90f10:	e13ffb17 	ldw	r4,-20(fp)
   90f14:	008eb900 	call	8eb90 <alt_release_fd>
  }
} 
   90f18:	0001883a 	nop
   90f1c:	e037883a 	mov	sp,fp
   90f20:	dfc00117 	ldw	ra,4(sp)
   90f24:	df000017 	ldw	fp,0(sp)
   90f28:	dec00204 	addi	sp,sp,8
   90f2c:	f800283a 	ret

00090f30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   90f30:	defffb04 	addi	sp,sp,-20
   90f34:	dfc00415 	stw	ra,16(sp)
   90f38:	df000315 	stw	fp,12(sp)
   90f3c:	df000304 	addi	fp,sp,12
   90f40:	e13ffd15 	stw	r4,-12(fp)
   90f44:	e17ffe15 	stw	r5,-8(fp)
   90f48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   90f4c:	01c07fc4 	movi	r7,511
   90f50:	01800044 	movi	r6,1
   90f54:	e17ffd17 	ldw	r5,-12(fp)
   90f58:	01000274 	movhi	r4,9
   90f5c:	210be404 	addi	r4,r4,12176
   90f60:	0090e6c0 	call	90e6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   90f64:	01c07fc4 	movi	r7,511
   90f68:	000d883a 	mov	r6,zero
   90f6c:	e17ffe17 	ldw	r5,-8(fp)
   90f70:	01000274 	movhi	r4,9
   90f74:	210be104 	addi	r4,r4,12164
   90f78:	0090e6c0 	call	90e6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   90f7c:	01c07fc4 	movi	r7,511
   90f80:	01800044 	movi	r6,1
   90f84:	e17fff17 	ldw	r5,-4(fp)
   90f88:	01000274 	movhi	r4,9
   90f8c:	210be704 	addi	r4,r4,12188
   90f90:	0090e6c0 	call	90e6c <alt_open_fd>
}  
   90f94:	0001883a 	nop
   90f98:	e037883a 	mov	sp,fp
   90f9c:	dfc00117 	ldw	ra,4(sp)
   90fa0:	df000017 	ldw	fp,0(sp)
   90fa4:	dec00204 	addi	sp,sp,8
   90fa8:	f800283a 	ret

00090fac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90fac:	defffe04 	addi	sp,sp,-8
   90fb0:	dfc00115 	stw	ra,4(sp)
   90fb4:	df000015 	stw	fp,0(sp)
   90fb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90fbc:	d0a00c17 	ldw	r2,-32720(gp)
   90fc0:	10000326 	beq	r2,zero,90fd0 <alt_get_errno+0x24>
   90fc4:	d0a00c17 	ldw	r2,-32720(gp)
   90fc8:	103ee83a 	callr	r2
   90fcc:	00000106 	br	90fd4 <alt_get_errno+0x28>
   90fd0:	d0a7fa04 	addi	r2,gp,-24600
}
   90fd4:	e037883a 	mov	sp,fp
   90fd8:	dfc00117 	ldw	ra,4(sp)
   90fdc:	df000017 	ldw	fp,0(sp)
   90fe0:	dec00204 	addi	sp,sp,8
   90fe4:	f800283a 	ret

00090fe8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   90fe8:	defffd04 	addi	sp,sp,-12
   90fec:	df000215 	stw	fp,8(sp)
   90ff0:	df000204 	addi	fp,sp,8
   90ff4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   90ff8:	e0bfff17 	ldw	r2,-4(fp)
   90ffc:	10800217 	ldw	r2,8(r2)
   91000:	10d00034 	orhi	r3,r2,16384
   91004:	e0bfff17 	ldw	r2,-4(fp)
   91008:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9100c:	e03ffe15 	stw	zero,-8(fp)
   91010:	00001d06 	br	91088 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91014:	00800274 	movhi	r2,9
   91018:	108be104 	addi	r2,r2,12164
   9101c:	e0fffe17 	ldw	r3,-8(fp)
   91020:	18c00324 	muli	r3,r3,12
   91024:	10c5883a 	add	r2,r2,r3
   91028:	10c00017 	ldw	r3,0(r2)
   9102c:	e0bfff17 	ldw	r2,-4(fp)
   91030:	10800017 	ldw	r2,0(r2)
   91034:	1880111e 	bne	r3,r2,9107c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   91038:	00800274 	movhi	r2,9
   9103c:	108be104 	addi	r2,r2,12164
   91040:	e0fffe17 	ldw	r3,-8(fp)
   91044:	18c00324 	muli	r3,r3,12
   91048:	10c5883a 	add	r2,r2,r3
   9104c:	10800204 	addi	r2,r2,8
   91050:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91054:	1000090e 	bge	r2,zero,9107c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   91058:	e0bffe17 	ldw	r2,-8(fp)
   9105c:	10c00324 	muli	r3,r2,12
   91060:	00800274 	movhi	r2,9
   91064:	108be104 	addi	r2,r2,12164
   91068:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9106c:	e0bfff17 	ldw	r2,-4(fp)
   91070:	18800226 	beq	r3,r2,9107c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   91074:	00bffcc4 	movi	r2,-13
   91078:	00000806 	br	9109c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9107c:	e0bffe17 	ldw	r2,-8(fp)
   91080:	10800044 	addi	r2,r2,1
   91084:	e0bffe15 	stw	r2,-8(fp)
   91088:	d0a00b17 	ldw	r2,-32724(gp)
   9108c:	1007883a 	mov	r3,r2
   91090:	e0bffe17 	ldw	r2,-8(fp)
   91094:	18bfdf2e 	bgeu	r3,r2,91014 <rx_descriptor_end+0xfff90fb4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   91098:	0005883a 	mov	r2,zero
}
   9109c:	e037883a 	mov	sp,fp
   910a0:	df000017 	ldw	fp,0(sp)
   910a4:	dec00104 	addi	sp,sp,4
   910a8:	f800283a 	ret

000910ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   910ac:	defff604 	addi	sp,sp,-40
   910b0:	dfc00915 	stw	ra,36(sp)
   910b4:	df000815 	stw	fp,32(sp)
   910b8:	df000804 	addi	fp,sp,32
   910bc:	e13ffd15 	stw	r4,-12(fp)
   910c0:	e17ffe15 	stw	r5,-8(fp)
   910c4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   910c8:	00bfffc4 	movi	r2,-1
   910cc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   910d0:	00bffb44 	movi	r2,-19
   910d4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   910d8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   910dc:	d1600904 	addi	r5,gp,-32732
   910e0:	e13ffd17 	ldw	r4,-12(fp)
   910e4:	0090b080 	call	90b08 <alt_find_dev>
   910e8:	e0bff815 	stw	r2,-32(fp)
   910ec:	e0bff817 	ldw	r2,-32(fp)
   910f0:	1000051e 	bne	r2,zero,91108 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   910f4:	e13ffd17 	ldw	r4,-12(fp)
   910f8:	00913c80 	call	913c8 <alt_find_file>
   910fc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   91100:	00800044 	movi	r2,1
   91104:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   91108:	e0bff817 	ldw	r2,-32(fp)
   9110c:	10002926 	beq	r2,zero,911b4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   91110:	e13ff817 	ldw	r4,-32(fp)
   91114:	00914d00 	call	914d0 <alt_get_fd>
   91118:	e0bff915 	stw	r2,-28(fp)
   9111c:	e0bff917 	ldw	r2,-28(fp)
   91120:	1000030e 	bge	r2,zero,91130 <open+0x84>
    {
      status = index;
   91124:	e0bff917 	ldw	r2,-28(fp)
   91128:	e0bffa15 	stw	r2,-24(fp)
   9112c:	00002306 	br	911bc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   91130:	e0bff917 	ldw	r2,-28(fp)
   91134:	10c00324 	muli	r3,r2,12
   91138:	00800274 	movhi	r2,9
   9113c:	108be104 	addi	r2,r2,12164
   91140:	1885883a 	add	r2,r3,r2
   91144:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   91148:	e0fffe17 	ldw	r3,-8(fp)
   9114c:	00900034 	movhi	r2,16384
   91150:	10bfffc4 	addi	r2,r2,-1
   91154:	1886703a 	and	r3,r3,r2
   91158:	e0bffc17 	ldw	r2,-16(fp)
   9115c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   91160:	e0bffb17 	ldw	r2,-20(fp)
   91164:	1000051e 	bne	r2,zero,9117c <open+0xd0>
   91168:	e13ffc17 	ldw	r4,-16(fp)
   9116c:	0090fe80 	call	90fe8 <alt_file_locked>
   91170:	e0bffa15 	stw	r2,-24(fp)
   91174:	e0bffa17 	ldw	r2,-24(fp)
   91178:	10001016 	blt	r2,zero,911bc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9117c:	e0bff817 	ldw	r2,-32(fp)
   91180:	10800317 	ldw	r2,12(r2)
   91184:	10000826 	beq	r2,zero,911a8 <open+0xfc>
   91188:	e0bff817 	ldw	r2,-32(fp)
   9118c:	10800317 	ldw	r2,12(r2)
   91190:	e1ffff17 	ldw	r7,-4(fp)
   91194:	e1bffe17 	ldw	r6,-8(fp)
   91198:	e17ffd17 	ldw	r5,-12(fp)
   9119c:	e13ffc17 	ldw	r4,-16(fp)
   911a0:	103ee83a 	callr	r2
   911a4:	00000106 	br	911ac <open+0x100>
   911a8:	0005883a 	mov	r2,zero
   911ac:	e0bffa15 	stw	r2,-24(fp)
   911b0:	00000206 	br	911bc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   911b4:	00bffb44 	movi	r2,-19
   911b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   911bc:	e0bffa17 	ldw	r2,-24(fp)
   911c0:	1000090e 	bge	r2,zero,911e8 <open+0x13c>
  {
    alt_release_fd (index);  
   911c4:	e13ff917 	ldw	r4,-28(fp)
   911c8:	008eb900 	call	8eb90 <alt_release_fd>
    ALT_ERRNO = -status;
   911cc:	0090fac0 	call	90fac <alt_get_errno>
   911d0:	1007883a 	mov	r3,r2
   911d4:	e0bffa17 	ldw	r2,-24(fp)
   911d8:	0085c83a 	sub	r2,zero,r2
   911dc:	18800015 	stw	r2,0(r3)
    return -1;
   911e0:	00bfffc4 	movi	r2,-1
   911e4:	00000106 	br	911ec <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   911e8:	e0bff917 	ldw	r2,-28(fp)
}
   911ec:	e037883a 	mov	sp,fp
   911f0:	dfc00117 	ldw	ra,4(sp)
   911f4:	df000017 	ldw	fp,0(sp)
   911f8:	dec00204 	addi	sp,sp,8
   911fc:	f800283a 	ret

00091200 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   91200:	defffa04 	addi	sp,sp,-24
   91204:	df000515 	stw	fp,20(sp)
   91208:	df000504 	addi	fp,sp,20
   9120c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91210:	0005303a 	rdctl	r2,status
   91214:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91218:	e0fffc17 	ldw	r3,-16(fp)
   9121c:	00bfff84 	movi	r2,-2
   91220:	1884703a 	and	r2,r3,r2
   91224:	1001703a 	wrctl	status,r2
  
  return context;
   91228:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   9122c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   91230:	e0bfff17 	ldw	r2,-4(fp)
   91234:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   91238:	e0bffd17 	ldw	r2,-12(fp)
   9123c:	10800017 	ldw	r2,0(r2)
   91240:	e0fffd17 	ldw	r3,-12(fp)
   91244:	18c00117 	ldw	r3,4(r3)
   91248:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   9124c:	e0bffd17 	ldw	r2,-12(fp)
   91250:	10800117 	ldw	r2,4(r2)
   91254:	e0fffd17 	ldw	r3,-12(fp)
   91258:	18c00017 	ldw	r3,0(r3)
   9125c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   91260:	e0bffd17 	ldw	r2,-12(fp)
   91264:	e0fffd17 	ldw	r3,-12(fp)
   91268:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   9126c:	e0bffd17 	ldw	r2,-12(fp)
   91270:	e0fffd17 	ldw	r3,-12(fp)
   91274:	10c00015 	stw	r3,0(r2)
   91278:	e0bffb17 	ldw	r2,-20(fp)
   9127c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91280:	e0bffe17 	ldw	r2,-8(fp)
   91284:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   91288:	0001883a 	nop
   9128c:	e037883a 	mov	sp,fp
   91290:	df000017 	ldw	fp,0(sp)
   91294:	dec00104 	addi	sp,sp,4
   91298:	f800283a 	ret

0009129c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9129c:	defffb04 	addi	sp,sp,-20
   912a0:	dfc00415 	stw	ra,16(sp)
   912a4:	df000315 	stw	fp,12(sp)
   912a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   912ac:	d0a01117 	ldw	r2,-32700(gp)
   912b0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   912b4:	d0a80317 	ldw	r2,-24564(gp)
   912b8:	10800044 	addi	r2,r2,1
   912bc:	d0a80315 	stw	r2,-24564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   912c0:	00002e06 	br	9137c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   912c4:	e0bffd17 	ldw	r2,-12(fp)
   912c8:	10800017 	ldw	r2,0(r2)
   912cc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   912d0:	e0bffd17 	ldw	r2,-12(fp)
   912d4:	10800403 	ldbu	r2,16(r2)
   912d8:	10803fcc 	andi	r2,r2,255
   912dc:	10000426 	beq	r2,zero,912f0 <alt_tick+0x54>
   912e0:	d0a80317 	ldw	r2,-24564(gp)
   912e4:	1000021e 	bne	r2,zero,912f0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   912e8:	e0bffd17 	ldw	r2,-12(fp)
   912ec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   912f0:	e0bffd17 	ldw	r2,-12(fp)
   912f4:	10800217 	ldw	r2,8(r2)
   912f8:	d0e80317 	ldw	r3,-24564(gp)
   912fc:	18801d36 	bltu	r3,r2,91374 <alt_tick+0xd8>
   91300:	e0bffd17 	ldw	r2,-12(fp)
   91304:	10800403 	ldbu	r2,16(r2)
   91308:	10803fcc 	andi	r2,r2,255
   9130c:	1000191e 	bne	r2,zero,91374 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   91310:	e0bffd17 	ldw	r2,-12(fp)
   91314:	10800317 	ldw	r2,12(r2)
   91318:	e0fffd17 	ldw	r3,-12(fp)
   9131c:	18c00517 	ldw	r3,20(r3)
   91320:	1809883a 	mov	r4,r3
   91324:	103ee83a 	callr	r2
   91328:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   9132c:	e0bfff17 	ldw	r2,-4(fp)
   91330:	1000031e 	bne	r2,zero,91340 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   91334:	e13ffd17 	ldw	r4,-12(fp)
   91338:	00912000 	call	91200 <alt_alarm_stop>
   9133c:	00000d06 	br	91374 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   91340:	e0bffd17 	ldw	r2,-12(fp)
   91344:	10c00217 	ldw	r3,8(r2)
   91348:	e0bfff17 	ldw	r2,-4(fp)
   9134c:	1887883a 	add	r3,r3,r2
   91350:	e0bffd17 	ldw	r2,-12(fp)
   91354:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   91358:	e0bffd17 	ldw	r2,-12(fp)
   9135c:	10c00217 	ldw	r3,8(r2)
   91360:	d0a80317 	ldw	r2,-24564(gp)
   91364:	1880032e 	bgeu	r3,r2,91374 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   91368:	e0bffd17 	ldw	r2,-12(fp)
   9136c:	00c00044 	movi	r3,1
   91370:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   91374:	e0bffe17 	ldw	r2,-8(fp)
   91378:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9137c:	e0fffd17 	ldw	r3,-12(fp)
   91380:	d0a01104 	addi	r2,gp,-32700
   91384:	18bfcf1e 	bne	r3,r2,912c4 <rx_descriptor_end+0xfff91264>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   91388:	0001883a 	nop
}
   9138c:	0001883a 	nop
   91390:	e037883a 	mov	sp,fp
   91394:	dfc00117 	ldw	ra,4(sp)
   91398:	df000017 	ldw	fp,0(sp)
   9139c:	dec00204 	addi	sp,sp,8
   913a0:	f800283a 	ret

000913a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   913a4:	deffff04 	addi	sp,sp,-4
   913a8:	df000015 	stw	fp,0(sp)
   913ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   913b0:	000170fa 	wrctl	ienable,zero
}
   913b4:	0001883a 	nop
   913b8:	e037883a 	mov	sp,fp
   913bc:	df000017 	ldw	fp,0(sp)
   913c0:	dec00104 	addi	sp,sp,4
   913c4:	f800283a 	ret

000913c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   913c8:	defffb04 	addi	sp,sp,-20
   913cc:	dfc00415 	stw	ra,16(sp)
   913d0:	df000315 	stw	fp,12(sp)
   913d4:	df000304 	addi	fp,sp,12
   913d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   913dc:	d0a00717 	ldw	r2,-32740(gp)
   913e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   913e4:	00003106 	br	914ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   913e8:	e0bffd17 	ldw	r2,-12(fp)
   913ec:	10800217 	ldw	r2,8(r2)
   913f0:	1009883a 	mov	r4,r2
   913f4:	008875c0 	call	8875c <strlen>
   913f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   913fc:	e0bffd17 	ldw	r2,-12(fp)
   91400:	10c00217 	ldw	r3,8(r2)
   91404:	e0bffe17 	ldw	r2,-8(fp)
   91408:	10bfffc4 	addi	r2,r2,-1
   9140c:	1885883a 	add	r2,r3,r2
   91410:	10800003 	ldbu	r2,0(r2)
   91414:	10803fcc 	andi	r2,r2,255
   91418:	1080201c 	xori	r2,r2,128
   9141c:	10bfe004 	addi	r2,r2,-128
   91420:	10800bd8 	cmpnei	r2,r2,47
   91424:	1000031e 	bne	r2,zero,91434 <alt_find_file+0x6c>
    {
      len -= 1;
   91428:	e0bffe17 	ldw	r2,-8(fp)
   9142c:	10bfffc4 	addi	r2,r2,-1
   91430:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   91434:	e0bffe17 	ldw	r2,-8(fp)
   91438:	e0ffff17 	ldw	r3,-4(fp)
   9143c:	1885883a 	add	r2,r3,r2
   91440:	10800003 	ldbu	r2,0(r2)
   91444:	10803fcc 	andi	r2,r2,255
   91448:	1080201c 	xori	r2,r2,128
   9144c:	10bfe004 	addi	r2,r2,-128
   91450:	10800be0 	cmpeqi	r2,r2,47
   91454:	1000081e 	bne	r2,zero,91478 <alt_find_file+0xb0>
   91458:	e0bffe17 	ldw	r2,-8(fp)
   9145c:	e0ffff17 	ldw	r3,-4(fp)
   91460:	1885883a 	add	r2,r3,r2
   91464:	10800003 	ldbu	r2,0(r2)
   91468:	10803fcc 	andi	r2,r2,255
   9146c:	1080201c 	xori	r2,r2,128
   91470:	10bfe004 	addi	r2,r2,-128
   91474:	10000a1e 	bne	r2,zero,914a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   91478:	e0bffd17 	ldw	r2,-12(fp)
   9147c:	10800217 	ldw	r2,8(r2)
   91480:	e0fffe17 	ldw	r3,-8(fp)
   91484:	180d883a 	mov	r6,r3
   91488:	e17fff17 	ldw	r5,-4(fp)
   9148c:	1009883a 	mov	r4,r2
   91490:	00916ec0 	call	916ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   91494:	1000021e 	bne	r2,zero,914a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   91498:	e0bffd17 	ldw	r2,-12(fp)
   9149c:	00000706 	br	914bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   914a0:	e0bffd17 	ldw	r2,-12(fp)
   914a4:	10800017 	ldw	r2,0(r2)
   914a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   914ac:	e0fffd17 	ldw	r3,-12(fp)
   914b0:	d0a00704 	addi	r2,gp,-32740
   914b4:	18bfcc1e 	bne	r3,r2,913e8 <rx_descriptor_end+0xfff91388>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   914b8:	0005883a 	mov	r2,zero
}
   914bc:	e037883a 	mov	sp,fp
   914c0:	dfc00117 	ldw	ra,4(sp)
   914c4:	df000017 	ldw	fp,0(sp)
   914c8:	dec00204 	addi	sp,sp,8
   914cc:	f800283a 	ret

000914d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   914d0:	defffc04 	addi	sp,sp,-16
   914d4:	df000315 	stw	fp,12(sp)
   914d8:	df000304 	addi	fp,sp,12
   914dc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   914e0:	00bffa04 	movi	r2,-24
   914e4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   914e8:	e03ffd15 	stw	zero,-12(fp)
   914ec:	00001906 	br	91554 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   914f0:	00800274 	movhi	r2,9
   914f4:	108be104 	addi	r2,r2,12164
   914f8:	e0fffd17 	ldw	r3,-12(fp)
   914fc:	18c00324 	muli	r3,r3,12
   91500:	10c5883a 	add	r2,r2,r3
   91504:	10800017 	ldw	r2,0(r2)
   91508:	10000f1e 	bne	r2,zero,91548 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   9150c:	00800274 	movhi	r2,9
   91510:	108be104 	addi	r2,r2,12164
   91514:	e0fffd17 	ldw	r3,-12(fp)
   91518:	18c00324 	muli	r3,r3,12
   9151c:	10c5883a 	add	r2,r2,r3
   91520:	e0ffff17 	ldw	r3,-4(fp)
   91524:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   91528:	d0e00b17 	ldw	r3,-32724(gp)
   9152c:	e0bffd17 	ldw	r2,-12(fp)
   91530:	1880020e 	bge	r3,r2,9153c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   91534:	e0bffd17 	ldw	r2,-12(fp)
   91538:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   9153c:	e0bffd17 	ldw	r2,-12(fp)
   91540:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   91544:	00000606 	br	91560 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   91548:	e0bffd17 	ldw	r2,-12(fp)
   9154c:	10800044 	addi	r2,r2,1
   91550:	e0bffd15 	stw	r2,-12(fp)
   91554:	e0bffd17 	ldw	r2,-12(fp)
   91558:	10800810 	cmplti	r2,r2,32
   9155c:	103fe41e 	bne	r2,zero,914f0 <rx_descriptor_end+0xfff91490>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   91560:	e0bffe17 	ldw	r2,-8(fp)
}
   91564:	e037883a 	mov	sp,fp
   91568:	df000017 	ldw	fp,0(sp)
   9156c:	dec00104 	addi	sp,sp,4
   91570:	f800283a 	ret

00091574 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   91574:	defffb04 	addi	sp,sp,-20
   91578:	df000415 	stw	fp,16(sp)
   9157c:	df000404 	addi	fp,sp,16
   91580:	e13ffe15 	stw	r4,-8(fp)
   91584:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   91588:	e0bfff17 	ldw	r2,-4(fp)
   9158c:	10840070 	cmpltui	r2,r2,4097
   91590:	1000021e 	bne	r2,zero,9159c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   91594:	00840004 	movi	r2,4096
   91598:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   9159c:	e0fffe17 	ldw	r3,-8(fp)
   915a0:	e0bfff17 	ldw	r2,-4(fp)
   915a4:	1885883a 	add	r2,r3,r2
   915a8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   915ac:	e0bffe17 	ldw	r2,-8(fp)
   915b0:	e0bffc15 	stw	r2,-16(fp)
   915b4:	00000506 	br	915cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   915b8:	e0bffc17 	ldw	r2,-16(fp)
   915bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   915c0:	e0bffc17 	ldw	r2,-16(fp)
   915c4:	10800804 	addi	r2,r2,32
   915c8:	e0bffc15 	stw	r2,-16(fp)
   915cc:	e0fffc17 	ldw	r3,-16(fp)
   915d0:	e0bffd17 	ldw	r2,-12(fp)
   915d4:	18bff836 	bltu	r3,r2,915b8 <rx_descriptor_end+0xfff91558>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   915d8:	e0bffe17 	ldw	r2,-8(fp)
   915dc:	108007cc 	andi	r2,r2,31
   915e0:	10000226 	beq	r2,zero,915ec <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   915e4:	e0bffc17 	ldw	r2,-16(fp)
   915e8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   915ec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   915f0:	0001883a 	nop
   915f4:	e037883a 	mov	sp,fp
   915f8:	df000017 	ldw	fp,0(sp)
   915fc:	dec00104 	addi	sp,sp,4
   91600:	f800283a 	ret

00091604 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   91604:	defffe04 	addi	sp,sp,-8
   91608:	df000115 	stw	fp,4(sp)
   9160c:	df000104 	addi	fp,sp,4
   91610:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   91614:	e0bfff17 	ldw	r2,-4(fp)
   91618:	10bffe84 	addi	r2,r2,-6
   9161c:	10c00428 	cmpgeui	r3,r2,16
   91620:	18001a1e 	bne	r3,zero,9168c <alt_exception_cause_generated_bad_addr+0x88>
   91624:	100690ba 	slli	r3,r2,2
   91628:	00800274 	movhi	r2,9
   9162c:	10858f04 	addi	r2,r2,5692
   91630:	1885883a 	add	r2,r3,r2
   91634:	10800017 	ldw	r2,0(r2)
   91638:	1000683a 	jmp	r2
   9163c:	0009167c 	xorhi	zero,zero,9305
   91640:	0009167c 	xorhi	zero,zero,9305
   91644:	0009168c 	andi	zero,zero,9306
   91648:	0009168c 	andi	zero,zero,9306
   9164c:	0009168c 	andi	zero,zero,9306
   91650:	0009167c 	xorhi	zero,zero,9305
   91654:	00091684 	movi	zero,9306
   91658:	0009168c 	andi	zero,zero,9306
   9165c:	0009167c 	xorhi	zero,zero,9305
   91660:	0009167c 	xorhi	zero,zero,9305
   91664:	0009168c 	andi	zero,zero,9306
   91668:	0009167c 	xorhi	zero,zero,9305
   9166c:	00091684 	movi	zero,9306
   91670:	0009168c 	andi	zero,zero,9306
   91674:	0009168c 	andi	zero,zero,9306
   91678:	0009167c 	xorhi	zero,zero,9305
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   9167c:	00800044 	movi	r2,1
   91680:	00000306 	br	91690 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   91684:	0005883a 	mov	r2,zero
   91688:	00000106 	br	91690 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   9168c:	0005883a 	mov	r2,zero
  }
}
   91690:	e037883a 	mov	sp,fp
   91694:	df000017 	ldw	fp,0(sp)
   91698:	dec00104 	addi	sp,sp,4
   9169c:	f800283a 	ret

000916a0 <atexit>:
   916a0:	200b883a 	mov	r5,r4
   916a4:	000f883a 	mov	r7,zero
   916a8:	000d883a 	mov	r6,zero
   916ac:	0009883a 	mov	r4,zero
   916b0:	00918d01 	jmpi	918d0 <__register_exitproc>

000916b4 <exit>:
   916b4:	defffe04 	addi	sp,sp,-8
   916b8:	000b883a 	mov	r5,zero
   916bc:	dc000015 	stw	r16,0(sp)
   916c0:	dfc00115 	stw	ra,4(sp)
   916c4:	2021883a 	mov	r16,r4
   916c8:	00919e80 	call	919e8 <__call_exitprocs>
   916cc:	00800274 	movhi	r2,9
   916d0:	10907204 	addi	r2,r2,16840
   916d4:	11000017 	ldw	r4,0(r2)
   916d8:	20800f17 	ldw	r2,60(r4)
   916dc:	10000126 	beq	r2,zero,916e4 <exit+0x30>
   916e0:	103ee83a 	callr	r2
   916e4:	8009883a 	mov	r4,r16
   916e8:	0091b680 	call	91b68 <_exit>

000916ec <memcmp>:
   916ec:	01c000c4 	movi	r7,3
   916f0:	3980192e 	bgeu	r7,r6,91758 <memcmp+0x6c>
   916f4:	2144b03a 	or	r2,r4,r5
   916f8:	11c4703a 	and	r2,r2,r7
   916fc:	10000f26 	beq	r2,zero,9173c <memcmp+0x50>
   91700:	20800003 	ldbu	r2,0(r4)
   91704:	28c00003 	ldbu	r3,0(r5)
   91708:	10c0151e 	bne	r2,r3,91760 <memcmp+0x74>
   9170c:	31bfff84 	addi	r6,r6,-2
   91710:	01ffffc4 	movi	r7,-1
   91714:	00000406 	br	91728 <memcmp+0x3c>
   91718:	20800003 	ldbu	r2,0(r4)
   9171c:	28c00003 	ldbu	r3,0(r5)
   91720:	31bfffc4 	addi	r6,r6,-1
   91724:	10c00e1e 	bne	r2,r3,91760 <memcmp+0x74>
   91728:	21000044 	addi	r4,r4,1
   9172c:	29400044 	addi	r5,r5,1
   91730:	31fff91e 	bne	r6,r7,91718 <rx_descriptor_end+0xfff916b8>
   91734:	0005883a 	mov	r2,zero
   91738:	f800283a 	ret
   9173c:	20c00017 	ldw	r3,0(r4)
   91740:	28800017 	ldw	r2,0(r5)
   91744:	18bfee1e 	bne	r3,r2,91700 <rx_descriptor_end+0xfff916a0>
   91748:	31bfff04 	addi	r6,r6,-4
   9174c:	21000104 	addi	r4,r4,4
   91750:	29400104 	addi	r5,r5,4
   91754:	39bff936 	bltu	r7,r6,9173c <rx_descriptor_end+0xfff916dc>
   91758:	303fe91e 	bne	r6,zero,91700 <rx_descriptor_end+0xfff916a0>
   9175c:	003ff506 	br	91734 <rx_descriptor_end+0xfff916d4>
   91760:	10c5c83a 	sub	r2,r2,r3
   91764:	f800283a 	ret

00091768 <_putc_r>:
   91768:	defffc04 	addi	sp,sp,-16
   9176c:	dc000215 	stw	r16,8(sp)
   91770:	dfc00315 	stw	ra,12(sp)
   91774:	2021883a 	mov	r16,r4
   91778:	20000226 	beq	r4,zero,91784 <_putc_r+0x1c>
   9177c:	20800e17 	ldw	r2,56(r4)
   91780:	10001b26 	beq	r2,zero,917f0 <_putc_r+0x88>
   91784:	30800217 	ldw	r2,8(r6)
   91788:	10bfffc4 	addi	r2,r2,-1
   9178c:	30800215 	stw	r2,8(r6)
   91790:	10000a16 	blt	r2,zero,917bc <_putc_r+0x54>
   91794:	30800017 	ldw	r2,0(r6)
   91798:	11400005 	stb	r5,0(r2)
   9179c:	30800017 	ldw	r2,0(r6)
   917a0:	10c00044 	addi	r3,r2,1
   917a4:	30c00015 	stw	r3,0(r6)
   917a8:	10800003 	ldbu	r2,0(r2)
   917ac:	dfc00317 	ldw	ra,12(sp)
   917b0:	dc000217 	ldw	r16,8(sp)
   917b4:	dec00404 	addi	sp,sp,16
   917b8:	f800283a 	ret
   917bc:	30c00617 	ldw	r3,24(r6)
   917c0:	10c00616 	blt	r2,r3,917dc <_putc_r+0x74>
   917c4:	30800017 	ldw	r2,0(r6)
   917c8:	00c00284 	movi	r3,10
   917cc:	11400005 	stb	r5,0(r2)
   917d0:	30800017 	ldw	r2,0(r6)
   917d4:	11400003 	ldbu	r5,0(r2)
   917d8:	28fff11e 	bne	r5,r3,917a0 <rx_descriptor_end+0xfff91740>
   917dc:	8009883a 	mov	r4,r16
   917e0:	dfc00317 	ldw	ra,12(sp)
   917e4:	dc000217 	ldw	r16,8(sp)
   917e8:	dec00404 	addi	sp,sp,16
   917ec:	008abd81 	jmpi	8abd8 <__swbuf_r>
   917f0:	d9400015 	stw	r5,0(sp)
   917f4:	d9800115 	stw	r6,4(sp)
   917f8:	0081f680 	call	81f68 <__sinit>
   917fc:	d9800117 	ldw	r6,4(sp)
   91800:	d9400017 	ldw	r5,0(sp)
   91804:	003fdf06 	br	91784 <rx_descriptor_end+0xfff91724>

00091808 <putc>:
   91808:	00800274 	movhi	r2,9
   9180c:	defffc04 	addi	sp,sp,-16
   91810:	10907304 	addi	r2,r2,16844
   91814:	dc000115 	stw	r16,4(sp)
   91818:	14000017 	ldw	r16,0(r2)
   9181c:	dc400215 	stw	r17,8(sp)
   91820:	dfc00315 	stw	ra,12(sp)
   91824:	2023883a 	mov	r17,r4
   91828:	80000226 	beq	r16,zero,91834 <putc+0x2c>
   9182c:	80800e17 	ldw	r2,56(r16)
   91830:	10001a26 	beq	r2,zero,9189c <putc+0x94>
   91834:	28800217 	ldw	r2,8(r5)
   91838:	10bfffc4 	addi	r2,r2,-1
   9183c:	28800215 	stw	r2,8(r5)
   91840:	10000b16 	blt	r2,zero,91870 <putc+0x68>
   91844:	28800017 	ldw	r2,0(r5)
   91848:	14400005 	stb	r17,0(r2)
   9184c:	28800017 	ldw	r2,0(r5)
   91850:	10c00044 	addi	r3,r2,1
   91854:	28c00015 	stw	r3,0(r5)
   91858:	10800003 	ldbu	r2,0(r2)
   9185c:	dfc00317 	ldw	ra,12(sp)
   91860:	dc400217 	ldw	r17,8(sp)
   91864:	dc000117 	ldw	r16,4(sp)
   91868:	dec00404 	addi	sp,sp,16
   9186c:	f800283a 	ret
   91870:	28c00617 	ldw	r3,24(r5)
   91874:	10c00e16 	blt	r2,r3,918b0 <putc+0xa8>
   91878:	28800017 	ldw	r2,0(r5)
   9187c:	01000284 	movi	r4,10
   91880:	14400005 	stb	r17,0(r2)
   91884:	28800017 	ldw	r2,0(r5)
   91888:	10c00003 	ldbu	r3,0(r2)
   9188c:	193ff01e 	bne	r3,r4,91850 <rx_descriptor_end+0xfff917f0>
   91890:	280d883a 	mov	r6,r5
   91894:	180b883a 	mov	r5,r3
   91898:	00000706 	br	918b8 <putc+0xb0>
   9189c:	8009883a 	mov	r4,r16
   918a0:	d9400015 	stw	r5,0(sp)
   918a4:	0081f680 	call	81f68 <__sinit>
   918a8:	d9400017 	ldw	r5,0(sp)
   918ac:	003fe106 	br	91834 <rx_descriptor_end+0xfff917d4>
   918b0:	280d883a 	mov	r6,r5
   918b4:	880b883a 	mov	r5,r17
   918b8:	8009883a 	mov	r4,r16
   918bc:	dfc00317 	ldw	ra,12(sp)
   918c0:	dc400217 	ldw	r17,8(sp)
   918c4:	dc000117 	ldw	r16,4(sp)
   918c8:	dec00404 	addi	sp,sp,16
   918cc:	008abd81 	jmpi	8abd8 <__swbuf_r>

000918d0 <__register_exitproc>:
   918d0:	defffa04 	addi	sp,sp,-24
   918d4:	dc000315 	stw	r16,12(sp)
   918d8:	04000274 	movhi	r16,9
   918dc:	84107204 	addi	r16,r16,16840
   918e0:	80c00017 	ldw	r3,0(r16)
   918e4:	dc400415 	stw	r17,16(sp)
   918e8:	dfc00515 	stw	ra,20(sp)
   918ec:	18805217 	ldw	r2,328(r3)
   918f0:	2023883a 	mov	r17,r4
   918f4:	10003726 	beq	r2,zero,919d4 <__register_exitproc+0x104>
   918f8:	10c00117 	ldw	r3,4(r2)
   918fc:	010007c4 	movi	r4,31
   91900:	20c00e16 	blt	r4,r3,9193c <__register_exitproc+0x6c>
   91904:	1a000044 	addi	r8,r3,1
   91908:	8800221e 	bne	r17,zero,91994 <__register_exitproc+0xc4>
   9190c:	18c00084 	addi	r3,r3,2
   91910:	18c7883a 	add	r3,r3,r3
   91914:	18c7883a 	add	r3,r3,r3
   91918:	12000115 	stw	r8,4(r2)
   9191c:	10c7883a 	add	r3,r2,r3
   91920:	19400015 	stw	r5,0(r3)
   91924:	0005883a 	mov	r2,zero
   91928:	dfc00517 	ldw	ra,20(sp)
   9192c:	dc400417 	ldw	r17,16(sp)
   91930:	dc000317 	ldw	r16,12(sp)
   91934:	dec00604 	addi	sp,sp,24
   91938:	f800283a 	ret
   9193c:	00800234 	movhi	r2,8
   91940:	10895d04 	addi	r2,r2,9588
   91944:	10002626 	beq	r2,zero,919e0 <__register_exitproc+0x110>
   91948:	01006404 	movi	r4,400
   9194c:	d9400015 	stw	r5,0(sp)
   91950:	d9800115 	stw	r6,4(sp)
   91954:	d9c00215 	stw	r7,8(sp)
   91958:	00825740 	call	82574 <malloc>
   9195c:	d9400017 	ldw	r5,0(sp)
   91960:	d9800117 	ldw	r6,4(sp)
   91964:	d9c00217 	ldw	r7,8(sp)
   91968:	10001d26 	beq	r2,zero,919e0 <__register_exitproc+0x110>
   9196c:	81000017 	ldw	r4,0(r16)
   91970:	10000115 	stw	zero,4(r2)
   91974:	02000044 	movi	r8,1
   91978:	22405217 	ldw	r9,328(r4)
   9197c:	0007883a 	mov	r3,zero
   91980:	12400015 	stw	r9,0(r2)
   91984:	20805215 	stw	r2,328(r4)
   91988:	10006215 	stw	zero,392(r2)
   9198c:	10006315 	stw	zero,396(r2)
   91990:	883fde26 	beq	r17,zero,9190c <rx_descriptor_end+0xfff918ac>
   91994:	18c9883a 	add	r4,r3,r3
   91998:	2109883a 	add	r4,r4,r4
   9199c:	1109883a 	add	r4,r2,r4
   919a0:	21802215 	stw	r6,136(r4)
   919a4:	01800044 	movi	r6,1
   919a8:	12406217 	ldw	r9,392(r2)
   919ac:	30cc983a 	sll	r6,r6,r3
   919b0:	4992b03a 	or	r9,r9,r6
   919b4:	12406215 	stw	r9,392(r2)
   919b8:	21c04215 	stw	r7,264(r4)
   919bc:	01000084 	movi	r4,2
   919c0:	893fd21e 	bne	r17,r4,9190c <rx_descriptor_end+0xfff918ac>
   919c4:	11006317 	ldw	r4,396(r2)
   919c8:	218cb03a 	or	r6,r4,r6
   919cc:	11806315 	stw	r6,396(r2)
   919d0:	003fce06 	br	9190c <rx_descriptor_end+0xfff918ac>
   919d4:	18805304 	addi	r2,r3,332
   919d8:	18805215 	stw	r2,328(r3)
   919dc:	003fc606 	br	918f8 <rx_descriptor_end+0xfff91898>
   919e0:	00bfffc4 	movi	r2,-1
   919e4:	003fd006 	br	91928 <rx_descriptor_end+0xfff918c8>

000919e8 <__call_exitprocs>:
   919e8:	defff504 	addi	sp,sp,-44
   919ec:	df000915 	stw	fp,36(sp)
   919f0:	dd400615 	stw	r21,24(sp)
   919f4:	dc800315 	stw	r18,12(sp)
   919f8:	dfc00a15 	stw	ra,40(sp)
   919fc:	ddc00815 	stw	r23,32(sp)
   91a00:	dd800715 	stw	r22,28(sp)
   91a04:	dd000515 	stw	r20,20(sp)
   91a08:	dcc00415 	stw	r19,16(sp)
   91a0c:	dc400215 	stw	r17,8(sp)
   91a10:	dc000115 	stw	r16,4(sp)
   91a14:	d9000015 	stw	r4,0(sp)
   91a18:	2839883a 	mov	fp,r5
   91a1c:	04800044 	movi	r18,1
   91a20:	057fffc4 	movi	r21,-1
   91a24:	00800274 	movhi	r2,9
   91a28:	10907204 	addi	r2,r2,16840
   91a2c:	12000017 	ldw	r8,0(r2)
   91a30:	45005217 	ldw	r20,328(r8)
   91a34:	44c05204 	addi	r19,r8,328
   91a38:	a0001c26 	beq	r20,zero,91aac <__call_exitprocs+0xc4>
   91a3c:	a0800117 	ldw	r2,4(r20)
   91a40:	15ffffc4 	addi	r23,r2,-1
   91a44:	b8000d16 	blt	r23,zero,91a7c <__call_exitprocs+0x94>
   91a48:	14000044 	addi	r16,r2,1
   91a4c:	8421883a 	add	r16,r16,r16
   91a50:	8421883a 	add	r16,r16,r16
   91a54:	84402004 	addi	r17,r16,128
   91a58:	a463883a 	add	r17,r20,r17
   91a5c:	a421883a 	add	r16,r20,r16
   91a60:	e0001e26 	beq	fp,zero,91adc <__call_exitprocs+0xf4>
   91a64:	80804017 	ldw	r2,256(r16)
   91a68:	e0801c26 	beq	fp,r2,91adc <__call_exitprocs+0xf4>
   91a6c:	bdffffc4 	addi	r23,r23,-1
   91a70:	843fff04 	addi	r16,r16,-4
   91a74:	8c7fff04 	addi	r17,r17,-4
   91a78:	bd7ff91e 	bne	r23,r21,91a60 <rx_descriptor_end+0xfff91a00>
   91a7c:	00800234 	movhi	r2,8
   91a80:	10896204 	addi	r2,r2,9608
   91a84:	10000926 	beq	r2,zero,91aac <__call_exitprocs+0xc4>
   91a88:	a0800117 	ldw	r2,4(r20)
   91a8c:	1000301e 	bne	r2,zero,91b50 <__call_exitprocs+0x168>
   91a90:	a0800017 	ldw	r2,0(r20)
   91a94:	10003226 	beq	r2,zero,91b60 <__call_exitprocs+0x178>
   91a98:	a009883a 	mov	r4,r20
   91a9c:	98800015 	stw	r2,0(r19)
   91aa0:	00825880 	call	82588 <free>
   91aa4:	9d000017 	ldw	r20,0(r19)
   91aa8:	a03fe41e 	bne	r20,zero,91a3c <rx_descriptor_end+0xfff919dc>
   91aac:	dfc00a17 	ldw	ra,40(sp)
   91ab0:	df000917 	ldw	fp,36(sp)
   91ab4:	ddc00817 	ldw	r23,32(sp)
   91ab8:	dd800717 	ldw	r22,28(sp)
   91abc:	dd400617 	ldw	r21,24(sp)
   91ac0:	dd000517 	ldw	r20,20(sp)
   91ac4:	dcc00417 	ldw	r19,16(sp)
   91ac8:	dc800317 	ldw	r18,12(sp)
   91acc:	dc400217 	ldw	r17,8(sp)
   91ad0:	dc000117 	ldw	r16,4(sp)
   91ad4:	dec00b04 	addi	sp,sp,44
   91ad8:	f800283a 	ret
   91adc:	a0800117 	ldw	r2,4(r20)
   91ae0:	80c00017 	ldw	r3,0(r16)
   91ae4:	10bfffc4 	addi	r2,r2,-1
   91ae8:	15c01426 	beq	r2,r23,91b3c <__call_exitprocs+0x154>
   91aec:	80000015 	stw	zero,0(r16)
   91af0:	183fde26 	beq	r3,zero,91a6c <rx_descriptor_end+0xfff91a0c>
   91af4:	95c8983a 	sll	r4,r18,r23
   91af8:	a0806217 	ldw	r2,392(r20)
   91afc:	a5800117 	ldw	r22,4(r20)
   91b00:	2084703a 	and	r2,r4,r2
   91b04:	10000b26 	beq	r2,zero,91b34 <__call_exitprocs+0x14c>
   91b08:	a0806317 	ldw	r2,396(r20)
   91b0c:	2088703a 	and	r4,r4,r2
   91b10:	20000c1e 	bne	r4,zero,91b44 <__call_exitprocs+0x15c>
   91b14:	89400017 	ldw	r5,0(r17)
   91b18:	d9000017 	ldw	r4,0(sp)
   91b1c:	183ee83a 	callr	r3
   91b20:	a0800117 	ldw	r2,4(r20)
   91b24:	15bfbf1e 	bne	r2,r22,91a24 <rx_descriptor_end+0xfff919c4>
   91b28:	98800017 	ldw	r2,0(r19)
   91b2c:	153fcf26 	beq	r2,r20,91a6c <rx_descriptor_end+0xfff91a0c>
   91b30:	003fbc06 	br	91a24 <rx_descriptor_end+0xfff919c4>
   91b34:	183ee83a 	callr	r3
   91b38:	003ff906 	br	91b20 <rx_descriptor_end+0xfff91ac0>
   91b3c:	a5c00115 	stw	r23,4(r20)
   91b40:	003feb06 	br	91af0 <rx_descriptor_end+0xfff91a90>
   91b44:	89000017 	ldw	r4,0(r17)
   91b48:	183ee83a 	callr	r3
   91b4c:	003ff406 	br	91b20 <rx_descriptor_end+0xfff91ac0>
   91b50:	a0800017 	ldw	r2,0(r20)
   91b54:	a027883a 	mov	r19,r20
   91b58:	1029883a 	mov	r20,r2
   91b5c:	003fb606 	br	91a38 <rx_descriptor_end+0xfff919d8>
   91b60:	0005883a 	mov	r2,zero
   91b64:	003ffb06 	br	91b54 <rx_descriptor_end+0xfff91af4>

00091b68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   91b68:	defffd04 	addi	sp,sp,-12
   91b6c:	df000215 	stw	fp,8(sp)
   91b70:	df000204 	addi	fp,sp,8
   91b74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   91b78:	0001883a 	nop
   91b7c:	e0bfff17 	ldw	r2,-4(fp)
   91b80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   91b84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   91b88:	10000226 	beq	r2,zero,91b94 <_exit+0x2c>
    ALT_SIM_FAIL();
   91b8c:	002af070 	cmpltui	zero,zero,43969
   91b90:	00000106 	br	91b98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   91b94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   91b98:	003fff06 	br	91b98 <rx_descriptor_end+0xfff91b38>
