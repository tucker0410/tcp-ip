
tcp.elf:     file format elf32-littlenios2
tcp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000122d4 memsz 0x000122d4 flags r-x
    LOAD off    0x000132f4 vaddr 0x000922f4 paddr 0x0009424c align 2**12
         filesz 0x00001f58 memsz 0x00001f58 flags rw-
    LOAD off    0x000161a4 vaddr 0x000961a4 paddr 0x000961a4 align 2**12
         filesz 0x00000000 memsz 0x00000598 flags rw-
    LOAD off    0x00016000 vaddr 0x00100000 paddr 0x0009673c align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001196c  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000744  00091bb0  00091bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f58  000922f4  0009424c  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000598  000961a4  000961a4  000161a4  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  0009673c  0009673c  00016080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  0009673c  00016000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  00016080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f80  00000000  00000000  000160a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026437  00000000  00000000  00017028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009a72  00000000  00000000  0003d45f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bf41  00000000  00000000  00046ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002608  00000000  00000000  00052e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e93  00000000  00000000  0005541c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000179cd  00000000  00000000  000592af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00070c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  00070cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00075ec2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00075ec5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075eca  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00075ecb  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00075ecc  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00075ed5  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00075ede  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00075ee7  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  00075ef3  2**0
                  CONTENTS, READONLY
 27 .jdi          00004653  00000000  00000000  00075f19  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074e2d  00000000  00000000  0007a56c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00091bb0 l    d  .rodata	00000000 .rodata
000922f4 l    d  .rwdata	00000000 .rwdata
000961a4 l    d  .bss	00000000 .bss
0009673c l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tcp_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 layer.c
00000000 l    df *ABS*	00000000 stack.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081c2c l     F .text	00000008 __fp_unlock
00081c40 l     F .text	0000019c __sinit.part.1
00081ddc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000926f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00092026 l     O .rodata	00000010 zeroes.4404
00085450 l     F .text	000000bc __sbprintf
00092036 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00085714 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00092f40 l     O .rwdata	00000020 lc_ctype_charset
00092f20 l     O .rwdata	00000020 lc_message_charset
00092f60 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
00092064 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00088808 l     F .text	000000fc __sprint_r.part.0
00092198 l     O .rodata	00000010 blanks.4348
00092188 l     O .rodata	00000010 zeroes.4349
00089d94 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008e1f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008e34c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008e378 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e544 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e630 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0008ea6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00094234 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008ecb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008edec l     F .text	00000034 alt_dev_reg
00093140 l     O .rwdata	00001060 jtag_uart
000941a0 l     O .rwdata	00000030 sgdma_rx
000941d0 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f10c l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f318 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0008f950 l     F .text	0000003c alt_get_errno
00090580 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000906e4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009097c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00090e80 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00090fc0 l     F .text	0000003c alt_get_errno
00090ffc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00096210 g     O .bss	00000004 alt_instruction_exception_handler
00088448 g     F .text	00000074 _mprec_log10
00088534 g     F .text	0000008c __any_on
0008a634 g     F .text	00000054 _isatty_r
00092070 g     O .rodata	00000028 __mprec_tinytens
0008e740 g     F .text	0000007c alt_main
000809b8 g     F .text	000002d8 rx_ethernet_isr
0009663c g     O .bss	00000100 alt_irq
0008717c g     F .text	00000060 _lseek_r
0009424c g       *ABS*	00000000 __flash_rwdata_start
000961c0 g     O .bss	00000004 conn
0008cd24 g     F .text	00000088 .hidden __eqdf2
0009673c g       *ABS*	00000000 __alt_heap_start
00083070 g     F .text	0000003c printf
0008fab0 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0008ad44 g     F .text	0000009c _wcrtomb_r
000831d8 g     F .text	0000005c __sseek
00081f7c g     F .text	00000010 __sinit
0008abec g     F .text	00000140 __swbuf_r
000814ac g     F .text	000000b4 recv
00080fac g     F .text	0000021c connect
000870a0 g     F .text	0000007c _setlocale_r
00081de4 g     F .text	00000068 __sfmoreglue
0008e7e0 g     F .text	00000024 __malloc_unlock
000901c8 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
00081644 g     F .text	00000070 recDisconnect
00082dbc g     F .text	0000015c memmove
00081f64 g     F .text	00000018 _cleanup
000961a8 g     O .bss	00000004 in
000875c4 g     F .text	000000a8 _Balloc
000961c4 g     O .bss	00000004 timer
0008cdac g     F .text	000000dc .hidden __gtdf2
000913b8 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
0008fd18 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008a11c g     F .text	0000005c _fstat_r
000961e8 g     O .bss	00000004 errno
00083154 g     F .text	00000008 __seofread
000961fc g     O .bss	00000004 alt_argv
0009c200 g       *ABS*	00000000 _gp
00092fc0 g     O .rwdata	00000180 alt_fd_list
00090b1c g     F .text	00000090 alt_find_dev
0008747c g     F .text	00000148 memcpy
00081c34 g     F .text	0000000c _cleanup_r
0008e010 g     F .text	000000dc .hidden __floatsidf
00090f44 g     F .text	0000007c alt_io_redirect
0008ce88 g     F .text	000000f4 .hidden __ltdf2
00091bb0 g       *ABS*	00000000 __DTOR_END__
00091618 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00088620 g     F .text	00000074 __fpclassifyd
000883a4 g     F .text	000000a4 __ratio
00089d78 g     F .text	0000001c __vfiprintf_internal
0008fe10 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0008f510 g     F .text	0000021c altera_avalon_jtag_uart_read
00082588 g     F .text	00000014 malloc
00083040 g     F .text	00000030 _printf_r
0008bad4 g     F .text	00000064 .hidden __udivsi3
00094200 g     O .rwdata	00000004 tse
0008e4a0 g     F .text	000000a4 isatty
000920c0 g     O .rodata	000000c8 __mprec_tens
0008711c g     F .text	0000000c __locale_charset
00091588 g     F .text	00000090 alt_icache_flush
000961e4 g     O .bss	00000004 __malloc_top_pad
00094214 g     O .rwdata	00000004 __mb_cur_max
0008714c g     F .text	0000000c _localeconv_r
0008a178 g     F .text	000004bc __sfvwrite_r
000879d0 g     F .text	0000003c __i2b
0008ff48 g     F .text	0000005c alt_avalon_sgdma_stop
000830ac g     F .text	00000054 _sbrk_r
000885c0 g     F .text	00000060 _read_r
00090904 g     F .text	00000078 alt_dcache_flush
0009422c g     O .rwdata	00000004 alt_max_fd
00086f9c g     F .text	000000f0 _fclose_r
00081bfc g     F .text	00000030 fflush
000961e0 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
0008bb90 g     F .text	000008ac .hidden __adddf3
000961c8 g     O .bss	00000004 sentPacket
0008814c g     F .text	0000010c __b2d
0008b4a4 g     F .text	00000538 .hidden __umoddi3
0008e66c g     F .text	000000d4 lseek
00094204 g     O .rwdata	00000004 _global_impure_ptr
0008a688 g     F .text	00000564 _realloc_r
0009673c g       *ABS*	00000000 __bss_end
00090d90 g     F .text	000000f0 alt_iic_isr_register
0008f98c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
000912b0 g     F .text	00000108 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
0008af2c g     F .text	00000578 .hidden __udivdi3
000811c8 g     F .text	00000170 send
0008a078 g     F .text	00000024 _fputwc_r
00092098 g     O .rodata	00000028 __mprec_bigtens
000877b4 g     F .text	00000104 __s2b
0008e0ec g     F .text	000000a8 .hidden __floatunsidf
00087e8c g     F .text	00000060 __mcmp
00081f9c g     F .text	00000018 __fp_lock_all
00090d44 g     F .text	0000004c alt_ic_irq_enabled
00091214 g     F .text	0000009c alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00096204 g     O .bss	00000004 alt_irq_active
000922f4 g     O .rwdata	00000400 tx_frame
000800fc g     F .exceptions	000000d4 alt_irq_handler
00092f98 g     O .rwdata	00000028 alt_dev_null
00081338 g     F .text	00000174 accept
0008ffa4 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
000961cc g     O .bss	00000004 isConnected
0008e304 g     F .text	00000048 alt_dcache_flush_all
000878b8 g     F .text	00000068 __hi0bits
0008df90 g     F .text	00000080 .hidden __fixdfsi
00100040 g     O .descriptor_memory	00000020 rx_descriptor
0009424c g       *ABS*	00000000 __ram_rwdata_end
00094224 g     O .rwdata	00000008 alt_dev_list
0008ecf4 g     F .text	000000f8 write
000900e8 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0009177c g     F .text	000000a0 _putc_r
000922f4 g       *ABS*	00000000 __ram_rodata_end
0008e3b4 g     F .text	000000b0 fstat
0008ce88 g     F .text	000000f4 .hidden __ledf2
00087c04 g     F .text	00000140 __pow5mult
0008891c g     F .text	0000145c ___vfiprintf_internal_r
000961f4 g     O .bss	00000004 __nlocale_changed
0008bb38 g     F .text	00000058 .hidden __umodsi3
0008fd90 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
0008fe9c g     F .text	00000054 alt_avalon_sgdma_register_callback
0009673c g       *ABS*	00000000 end
00081560 g     F .text	000000e4 disconnect
0008f04c g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00091bb0 g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00090168 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
0009075c g     F .text	0000007c alt_avalon_timer_sc_init
0008e194 g     F .text	00000064 .hidden __clzsi2
0008f72c g     F .text	00000224 altera_avalon_jtag_uart_write
0008fbc0 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
00081f8c g     F .text	00000004 __sfp_lock_acquire
00087398 g     F .text	000000e4 memchr
0008323c g     F .text	000021f8 ___vfprintf_internal_r
0008fcb8 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
000820f0 g     F .text	00000310 _free_r
0008e804 g     F .text	0000022c alt_printf
00087128 g     F .text	00000010 __locale_mb_cur_max
000919fc g     F .text	00000180 __call_exitprocs
000961f0 g     O .bss	00000004 __mlocale_changed
0009420c g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
00096208 g     O .bss	00000004 _alt_tick_rate
000961b0 g     O .bss	00000004 sgdma_tx_dev
00090008 g     F .text	00000054 alt_avalon_sgdma_open
00087d44 g     F .text	00000148 __lshift
0009620c g     O .bss	00000004 _alt_nticks
0008eaa8 g     F .text	000000fc read
0008ee58 g     F .text	00000090 alt_sys_init
000961ac g     O .bss	00000004 transmissionStatus
000918e4 g     F .text	00000118 __register_exitproc
000961d0 g     O .bss	00000005 buffer
00087a0c g     F .text	000001f8 __multiply
0008f3b8 g     F .text	00000068 altera_avalon_jtag_uart_close
000922f4 g       *ABS*	00000000 __ram_rwdata_start
00091bb0 g       *ABS*	00000000 __ram_rodata_start
00096614 g     O .bss	00000028 __malloc_current_mallinfo
00088258 g     F .text	0000014c __d2b
0008eee8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000914e4 g     F .text	000000a4 alt_get_fd
000856c0 g     F .text	00000054 _close_r
00091700 g     F .text	0000007c memcmp
0008efa8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0009673c g       *ABS*	00000000 __alt_stack_base
0008eff8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008556c g     F .text	00000154 __swsetup_r
0008c43c g     F .text	000008e8 .hidden __divdf3
00081e4c g     F .text	00000118 __sfp
000884bc g     F .text	00000078 __copybits
00092b18 g     O .rwdata	00000408 __malloc_av_
00081f98 g     F .text	00000004 __sinit_lock_release
0008cf7c g     F .text	00000718 .hidden __muldf3
00083100 g     F .text	00000054 __sread
000913dc g     F .text	00000108 alt_find_file
000909b8 g     F .text	000000a4 alt_dev_llist_insert
0008e7bc g     F .text	00000024 __malloc_lock
0008ec08 g     F .text	000000b0 sbrk
0008fef0 g     F .text	00000058 alt_avalon_sgdma_start
00081ba0 g     F .text	0000005c _fflush_r
00089e50 g     F .text	000000c4 _calloc_r
000961a4 g       *ABS*	00000000 __bss_start
00082f18 g     F .text	00000128 memset
000816b4 g     F .text	000002d0 main
00096200 g     O .bss	00000004 alt_envp
000961dc g     O .bss	00000004 __malloc_max_total_mem
0008ef48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008ad2c g     F .text	00000018 __swbuf
00094238 g     O .rwdata	00000008 alt_sgdma_list
00083234 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
0008708c g     F .text	00000014 fclose
00085914 g     F .text	00001688 _dtoa_r
000825b0 g     F .text	0000080c _malloc_r
0008aea0 g     F .text	00000030 __ascii_wctomb
00094230 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
00096214 g     O .bss	00000400 rx_frame
00082400 g     F .text	000000c4 _fwalk
0009181c g     F .text	000000c8 putc
0008b9dc g     F .text	00000084 .hidden __divsi3
00081fcc g     F .text	00000124 _malloc_trim_r
00091bb0 g       *ABS*	00000000 __CTOR_END__
000961b8 g     O .bss	00000004 seqNumber
00088694 g     F .text	000000dc strcmp
00080290 g     F .text	00000424 transmit
00091bb0 g       *ABS*	00000000 __flash_rodata_start
00091bb0 g       *ABS*	00000000 __DTOR_LIST__
000961a4 g     O .bss	00000004 count
0008cd24 g     F .text	00000088 .hidden __nedf2
0008ee20 g     F .text	00000038 alt_irq_init
0008eba4 g     F .text	00000064 alt_release_fd
000921a8 g     O .rodata	00000100 .hidden __clz_tab
000961ec g     O .bss	00000004 _PathLocale
000916b4 g     F .text	00000014 atexit
0008550c g     F .text	00000060 _write_r
00087158 g     F .text	00000018 setlocale
000961bc g     O .bss	00000004 ackNumber
00094208 g     O .rwdata	00000004 _impure_ptr
000961f8 g     O .bss	00000004 alt_argc
000806b4 g     F .text	00000304 receive
00081984 g     F .text	0000021c __sflush_r
00090abc g     F .text	00000060 _do_dtors
00087144 g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
000880e8 g     F .text	00000064 __ulp
00081fb4 g     F .text	00000018 __fp_unlock_all
0009421c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00087170 g     F .text	0000000c localeconv
00090be0 g     F .text	00000050 alt_ic_isr_register
0009424c g       *ABS*	00000000 _edata
0009673c g       *ABS*	00000000 _end
00089f14 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f420 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00080c90 g     F .text	0000031c tx_ethernet_isr
00090cb8 g     F .text	0000008c alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
0009005c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
0008315c g     F .text	0000007c __swrite
00094210 g     O .rwdata	00000004 __malloc_trim_threshold
00087138 g     F .text	0000000c __locale_msgcharset
000916c8 g     F .text	00000038 exit
000824c4 g     F .text	000000c4 _fwalk_reent
00087eec g     F .text	000001fc __mdiff
0008ba60 g     F .text	00000074 .hidden __modsi3
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00081f90 g     F .text	00000004 __sfp_lock_release
000961b4 g     O .bss	00000004 sgdma_rx_dev
00091b7c g     F .text	00000034 _exit
000907d8 g     F .text	0000012c alt_alarm_start
000871dc g     F .text	000001bc __smakebuf_r
00088770 g     F .text	00000098 strlen
000910c0 g     F .text	00000154 open
0008cdac g     F .text	000000dc .hidden __gedf2
0008ea30 g     F .text	0000003c alt_putchar
00094218 g     O .rwdata	00000004 __wctomb
00088904 g     F .text	00000018 __sprint_r
00090bac g     F .text	00000034 alt_icache_flush_all
00094240 g     O .rwdata	00000004 alt_priority_mask
00090c30 g     F .text	00000088 alt_ic_irq_enable
00085434 g     F .text	0000001c __vfprintf_internal
0008aed0 g     F .text	0000005c _wctomb_r
0008fc34 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0008d694 g     F .text	000008fc .hidden __subdf3
00087920 g     F .text	000000b0 __lo0bits
00094244 g     O .rwdata	00000008 alt_alarm_list
00090a5c g     F .text	00000060 _do_ctors
0008ade0 g     F .text	000000c0 wcrtomb
0008e234 g     F .text	000000d0 close
0008e5ac g     F .text	00000084 alt_load
0009063c g     F .text	000000a8 alt_avalon_sgdma_init
0008a09c g     F .text	00000080 fputwc
0008259c g     F .text	00000014 free
000961d8 g     O .bss	00000004 pack
00081f94 g     F .text	00000004 __sinit_lock_acquire
00087694 g     F .text	00000120 __multadd
0008766c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10998f04 	addi	r2,r2,26172
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10998f04 	addi	r2,r2,26172
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a80417 	ldw	r2,-24560(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a80417 	ldw	r2,-24560(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <rx_descriptor_end+0xfff801e8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6b08014 	ori	gp,gp,49664
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	10986914 	ori	r2,r2,24996

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18d9cf14 	ori	r3,r3,26428

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <rx_descriptor_end+0xfff80218>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008e5ac0 	call	8e5ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008e7400 	call	8e740 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <rx_descriptor_end+0xfff8022c>

00080290 <transmit>:
alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

int transmissionStatus = 0;

int transmit(int device, struct packet * pack){
   80290:	defff704 	addi	sp,sp,-36
   80294:	dfc00815 	stw	ra,32(sp)
   80298:	df000715 	stw	fp,28(sp)
   8029c:	df000704 	addi	fp,sp,28
   802a0:	e13ffe15 	stw	r4,-8(fp)
   802a4:	e17fff15 	stw	r5,-4(fp)

	//Specify the addresses of the PHY devices to be accessed through MDIO interface
	if(!device){
   802a8:	e0bffe17 	ldw	r2,-8(fp)
   802ac:	1000051e 	bne	r2,zero,802c4 <transmit+0x34>
		*(tse + 0x0F) = 0x10;
   802b0:	d0a00017 	ldw	r2,-32768(gp)
   802b4:	10800f04 	addi	r2,r2,60
   802b8:	00c00404 	movi	r3,16
   802bc:	10c00015 	stw	r3,0(r2)
   802c0:	00000406 	br	802d4 <transmit+0x44>
	}
	else {
		*(tse + 0x0F) = 0x11;
   802c4:	d0a00017 	ldw	r2,-32768(gp)
   802c8:	10800f04 	addi	r2,r2,60
   802cc:	00c00444 	movi	r3,17
   802d0:	10c00015 	stw	r3,0(r2)
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   802d4:	d0a00017 	ldw	r2,-32768(gp)
   802d8:	10c00204 	addi	r3,r2,8
   802dc:	d0a00017 	ldw	r2,-32768(gp)
   802e0:	10800204 	addi	r2,r2,8
   802e4:	11000017 	ldw	r4,0(r2)
   802e8:	00802034 	movhi	r2,128
   802ec:	10808804 	addi	r2,r2,544
   802f0:	2084b03a 	or	r2,r4,r2
   802f4:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));
   802f8:	0001883a 	nop
   802fc:	d0a00017 	ldw	r2,-32768(gp)
   80300:	10800204 	addi	r2,r2,8
   80304:	10c00017 	ldw	r3,0(r2)
   80308:	d0a00017 	ldw	r2,-32768(gp)
   8030c:	10800204 	addi	r2,r2,8
   80310:	11000017 	ldw	r4,0(r2)
   80314:	00802034 	movhi	r2,128
   80318:	10808804 	addi	r2,r2,544
   8031c:	2084b03a 	or	r2,r4,r2
   80320:	18bff61e 	bne	r3,r2,802fc <rx_descriptor_end+0xfff8029c>

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;//tx_section_empty
   80324:	d0a00017 	ldw	r2,-32768(gp)
   80328:	10800904 	addi	r2,r2,36
   8032c:	00c1fc04 	movi	r3,2032
   80330:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 0x03;//tx_almost_full
   80334:	d0a00017 	ldw	r2,-32768(gp)
   80338:	10800e04 	addi	r2,r2,56
   8033c:	00c000c4 	movi	r3,3
   80340:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 0x08;//tx_almost_empty
   80344:	d0a00017 	ldw	r2,-32768(gp)
   80348:	10800d04 	addi	r2,r2,52
   8034c:	00c00204 	movi	r3,8
   80350:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;//rx_section_empty
   80354:	d0a00017 	ldw	r2,-32768(gp)
   80358:	10800704 	addi	r2,r2,28
   8035c:	00c1fc04 	movi	r3,2032
   80360:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 0x08;//rx_almost_full
   80364:	d0a00017 	ldw	r2,-32768(gp)
   80368:	10800c04 	addi	r2,r2,48
   8036c:	00c00204 	movi	r3,8
   80370:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 0x08;//rx_almost_empty
   80374:	d0a00017 	ldw	r2,-32768(gp)
   80378:	10800b04 	addi	r2,r2,44
   8037c:	00c00204 	movi	r3,8
   80380:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0x00;//tx_section_full
   80384:	d0a00017 	ldw	r2,-32768(gp)
   80388:	10800a04 	addi	r2,r2,40
   8038c:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0x00;//rx_section_full
   80390:	d0a00017 	ldw	r2,-32768(gp)
   80394:	10800804 	addi	r2,r2,32
   80398:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	if(!device){
   8039c:	e0bffe17 	ldw	r2,-8(fp)
   803a0:	10000a1e 	bne	r2,zero,803cc <transmit+0x13c>
		*(tse + 0x03) = 0x17231C00;
   803a4:	d0a00017 	ldw	r2,-32768(gp)
   803a8:	10c00304 	addi	r3,r2,12
   803ac:	0085c8f4 	movhi	r2,5923
   803b0:	10870004 	addi	r2,r2,7168
   803b4:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000CB4A;
   803b8:	d0a00017 	ldw	r2,-32768(gp)
   803bc:	10800404 	addi	r2,r2,16
   803c0:	00f2d294 	movui	r3,52042
   803c4:	10c00015 	stw	r3,0(r2)
   803c8:	00000906 	br	803f0 <transmit+0x160>
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
   803cc:	d0a00017 	ldw	r2,-32768(gp)
   803d0:	10c00304 	addi	r3,r2,12
   803d4:	00a4c2f4 	movhi	r2,37643
   803d8:	1085b204 	addi	r2,r2,5832
   803dc:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000DA67;
   803e0:	d0a00017 	ldw	r2,-32768(gp)
   803e4:	10800404 	addi	r2,r2,16
   803e8:	00f699d4 	movui	r3,55911
   803ec:	10c00015 	stw	r3,0(r2)
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
   803f0:	d0a00017 	ldw	r2,-32768(gp)
   803f4:	10800504 	addi	r2,r2,20
   803f8:	00c17b84 	movi	r3,1518
   803fc:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;//tx_ipg_length
   80400:	d0a00017 	ldw	r2,-32768(gp)
   80404:	10801704 	addi	r2,r2,92
   80408:	00c00304 	movi	r3,12
   8040c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;//pause_quanta
   80410:	d0a00017 	ldw	r2,-32768(gp)
   80414:	10800604 	addi	r2,r2,24
   80418:	00ffffd4 	movui	r3,65535
   8041c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;//config register
   80420:	d0a00017 	ldw	r2,-32768(gp)
   80424:	10c00204 	addi	r3,r2,8
   80428:	00802034 	movhi	r2,128
   8042c:	10808804 	addi	r2,r2,544
   80430:	18800015 	stw	r2,0(r3)

	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   80434:	d0a00017 	ldw	r2,-32768(gp)
   80438:	10c00204 	addi	r3,r2,8
   8043c:	00802034 	movhi	r2,128
   80440:	10888804 	addi	r2,r2,8736
   80444:	18800015 	stw	r2,0(r3)
	alt_printf("Setting the reset");
   80448:	01000274 	movhi	r4,9
   8044c:	2106ec04 	addi	r4,r4,7088
   80450:	008e8040 	call	8e804 <alt_printf>
	while ( *(tse + 0x02) != ( 0x00800220 ) ) printf("... ");
   80454:	00000306 	br	80464 <transmit+0x1d4>
   80458:	01000274 	movhi	r4,9
   8045c:	2106f104 	addi	r4,r4,7108
   80460:	00830700 	call	83070 <printf>
   80464:	d0a00017 	ldw	r2,-32768(gp)
   80468:	10800204 	addi	r2,r2,8
   8046c:	10c00017 	ldw	r3,0(r2)
   80470:	00802034 	movhi	r2,128
   80474:	10808804 	addi	r2,r2,544
   80478:	18bff71e 	bne	r3,r2,80458 <rx_descriptor_end+0xfff803f8>

	//Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0000023B;
   8047c:	d0a00017 	ldw	r2,-32768(gp)
   80480:	10800204 	addi	r2,r2,8
   80484:	d0e00017 	ldw	r3,-32768(gp)
   80488:	18c00204 	addi	r3,r3,8
   8048c:	18c00017 	ldw	r3,0(r3)
   80490:	18c08ed4 	ori	r3,r3,571
   80494:	10c00015 	stw	r3,0(r2)
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0000023B ) );
   80498:	0001883a 	nop
   8049c:	d0a00017 	ldw	r2,-32768(gp)
   804a0:	10800204 	addi	r2,r2,8
   804a4:	10c00017 	ldw	r3,0(r2)
   804a8:	d0a00017 	ldw	r2,-32768(gp)
   804ac:	10800204 	addi	r2,r2,8
   804b0:	10800017 	ldw	r2,0(r2)
   804b4:	10808ed4 	ori	r2,r2,571
   804b8:	18bff81e 	bne	r3,r2,8049c <rx_descriptor_end+0xfff8043c>

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   804bc:	01000274 	movhi	r4,9
   804c0:	2106f304 	addi	r4,r4,7116
   804c4:	00900080 	call	90008 <alt_avalon_sgdma_open>
   804c8:	d0a7ec15 	stw	r2,-24656(gp)
	if (sgdma_tx_dev == NULL) {
   804cc:	d0a7ec17 	ldw	r2,-24656(gp)
   804d0:	1000051e 	bne	r2,zero,804e8 <transmit+0x258>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   804d4:	01000274 	movhi	r4,9
   804d8:	2106f704 	addi	r4,r4,7132
   804dc:	008e8040 	call	8e804 <alt_printf>
		return -1;
   804e0:	00bfffc4 	movi	r2,-1
   804e4:	00006e06 	br	806a0 <transmit+0x410>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   804e8:	01000274 	movhi	r4,9
   804ec:	21070604 	addi	r4,r4,7192
   804f0:	008e8040 	call	8e804 <alt_printf>

	int i = 17;
   804f4:	00800444 	movi	r2,17
   804f8:	e0bffd15 	stw	r2,-12(fp)

	memmove(tx_frame+16, pack->sourceIP, 4);
   804fc:	00800274 	movhi	r2,9
   80500:	1088c104 	addi	r2,r2,8964
   80504:	e0ffff17 	ldw	r3,-4(fp)
   80508:	01800104 	movi	r6,4
   8050c:	180b883a 	mov	r5,r3
   80510:	1009883a 	mov	r4,r2
   80514:	0082dbc0 	call	82dbc <memmove>
	memmove(tx_frame+20, pack->destIP, 4);
   80518:	00800274 	movhi	r2,9
   8051c:	1088c204 	addi	r2,r2,8968
   80520:	e0ffff17 	ldw	r3,-4(fp)
   80524:	18c00104 	addi	r3,r3,4
   80528:	01800104 	movi	r6,4
   8052c:	180b883a 	mov	r5,r3
   80530:	1009883a 	mov	r4,r2
   80534:	0082dbc0 	call	82dbc <memmove>
	memmove(tx_frame+24, pack->payload->sourcePort, 2);
   80538:	00800274 	movhi	r2,9
   8053c:	1088c304 	addi	r2,r2,8972
   80540:	e0ffff17 	ldw	r3,-4(fp)
   80544:	18c00217 	ldw	r3,8(r3)
   80548:	01800084 	movi	r6,2
   8054c:	180b883a 	mov	r5,r3
   80550:	1009883a 	mov	r4,r2
   80554:	0082dbc0 	call	82dbc <memmove>
	memmove(tx_frame+26, pack->payload->destPort, 2);
   80558:	00800274 	movhi	r2,9
   8055c:	1088c384 	addi	r2,r2,8974
   80560:	e0ffff17 	ldw	r3,-4(fp)
   80564:	18c00217 	ldw	r3,8(r3)
   80568:	18c00084 	addi	r3,r3,2
   8056c:	01800084 	movi	r6,2
   80570:	180b883a 	mov	r5,r3
   80574:	1009883a 	mov	r4,r2
   80578:	0082dbc0 	call	82dbc <memmove>
	memmove(tx_frame+28, pack->payload->syn, 1);
   8057c:	00800274 	movhi	r2,9
   80580:	1088c404 	addi	r2,r2,8976
   80584:	e0ffff17 	ldw	r3,-4(fp)
   80588:	18c00217 	ldw	r3,8(r3)
   8058c:	18c00204 	addi	r3,r3,8
   80590:	18c00003 	ldbu	r3,0(r3)
   80594:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+29, pack->payload->fin, 1);
   80598:	00800274 	movhi	r2,9
   8059c:	1088c444 	addi	r2,r2,8977
   805a0:	e0ffff17 	ldw	r3,-4(fp)
   805a4:	18c00217 	ldw	r3,8(r3)
   805a8:	18c00284 	addi	r3,r3,10
   805ac:	18c00003 	ldbu	r3,0(r3)
   805b0:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+30, pack->payload->seqNum, 1);
   805b4:	00800274 	movhi	r2,9
   805b8:	1088c484 	addi	r2,r2,8978
   805bc:	e0ffff17 	ldw	r3,-4(fp)
   805c0:	18c00217 	ldw	r3,8(r3)
   805c4:	18c00104 	addi	r3,r3,4
   805c8:	18c00003 	ldbu	r3,0(r3)
   805cc:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+31, pack->payload->ackNum, 1);
   805d0:	00800274 	movhi	r2,9
   805d4:	1088c4c4 	addi	r2,r2,8979
   805d8:	e0ffff17 	ldw	r3,-4(fp)
   805dc:	18c00217 	ldw	r3,8(r3)
   805e0:	18c00184 	addi	r3,r3,6
   805e4:	18c00003 	ldbu	r3,0(r3)
   805e8:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+32, pack->payload->data, 1);
   805ec:	00800274 	movhi	r2,9
   805f0:	1088c504 	addi	r2,r2,8980
   805f4:	e0ffff17 	ldw	r3,-4(fp)
   805f8:	18c00217 	ldw	r3,8(r3)
   805fc:	18c00304 	addi	r3,r3,12
   80600:	18c00003 	ldbu	r3,0(r3)
   80604:	10c00005 	stb	r3,0(r2)
	memset(tx_frame+33, 0, 28);
   80608:	00800274 	movhi	r2,9
   8060c:	1088c544 	addi	r2,r2,8981
   80610:	01800704 	movi	r6,28
   80614:	000b883a 	mov	r5,zero
   80618:	1009883a 	mov	r4,r2
   8061c:	0082f180 	call	82f18 <memset>

	// Set interrupts for the sgdma transmit device
	//sgdma_tx_dev searches for sgdma_tx device, returns null if none,
	alt_avalon_sgdma_register_callback(sgdma_tx_dev, (alt_avalon_sgdma_callback) tx_ethernet_isr, 0x00000014, NULL );
   80620:	d0a7ec17 	ldw	r2,-24656(gp)
   80624:	000f883a 	mov	r7,zero
   80628:	01800504 	movi	r6,20
   8062c:	01400234 	movhi	r5,8
   80630:	29432404 	addi	r5,r5,3216
   80634:	1009883a 	mov	r4,r2
   80638:	008fe9c0 	call	8fe9c <alt_avalon_sgdma_register_callback>

	// Create sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0);
   8063c:	d8000315 	stw	zero,12(sp)
   80640:	00800044 	movi	r2,1
   80644:	d8800215 	stw	r2,8(sp)
   80648:	00800044 	movi	r2,1
   8064c:	d8800115 	stw	r2,4(sp)
   80650:	d8000015 	stw	zero,0(sp)
   80654:	01c00f84 	movi	r7,62
   80658:	01800274 	movhi	r6,9
   8065c:	3188bd04 	addi	r6,r6,8948
   80660:	01400434 	movhi	r5,16
   80664:	29400804 	addi	r5,r5,32
   80668:	01000434 	movhi	r4,16
   8066c:	21000004 	addi	r4,r4,0
   80670:	008fd900 	call	8fd90 <alt_avalon_sgdma_construct_mem_to_stream_desc>

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);
   80674:	d0a7ec17 	ldw	r2,-24656(gp)
   80678:	01400434 	movhi	r5,16
   8067c:	29400004 	addi	r5,r5,0
   80680:	1009883a 	mov	r4,r2
   80684:	008f98c0 	call	8f98c <alt_avalon_sgdma_do_async_transfer>

	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   80688:	0001883a 	nop
   8068c:	01000434 	movhi	r4,16
   80690:	21000004 	addi	r4,r4,0
   80694:	008ffa40 	call	8ffa4 <alt_avalon_sgdma_check_descriptor_status>
   80698:	103ffc1e 	bne	r2,zero,8068c <rx_descriptor_end+0xfff8062c>

	return transmissionStatus;
   8069c:	d0a7eb17 	ldw	r2,-24660(gp)
}
   806a0:	e037883a 	mov	sp,fp
   806a4:	dfc00117 	ldw	ra,4(sp)
   806a8:	df000017 	ldw	fp,0(sp)
   806ac:	dec00204 	addi	sp,sp,8
   806b0:	f800283a 	ret

000806b4 <receive>:


char * receive(int device){
   806b4:	defffc04 	addi	sp,sp,-16
   806b8:	dfc00315 	stw	ra,12(sp)
   806bc:	df000215 	stw	fp,8(sp)
   806c0:	df000204 	addi	fp,sp,8
   806c4:	e13fff15 	stw	r4,-4(fp)

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   806c8:	01000274 	movhi	r4,9
   806cc:	21071104 	addi	r4,r4,7236
   806d0:	00900080 	call	90008 <alt_avalon_sgdma_open>
   806d4:	d0a7ed15 	stw	r2,-24652(gp)
	if (sgdma_rx_dev == NULL) {
   806d8:	d0a7ed17 	ldw	r2,-24652(gp)
   806dc:	1000041e 	bne	r2,zero,806f0 <receive+0x3c>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   806e0:	01000274 	movhi	r4,9
   806e4:	21071504 	addi	r4,r4,7252
   806e8:	008e8040 	call	8e804 <alt_printf>
   806ec:	00000306 	br	806fc <receive+0x48>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   806f0:	01000274 	movhi	r4,9
   806f4:	21072404 	addi	r4,r4,7312
   806f8:	008e8040 	call	8e804 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback(sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   806fc:	d0a7ed17 	ldw	r2,-24652(gp)
   80700:	000f883a 	mov	r7,zero
   80704:	01800504 	movi	r6,20
   80708:	01400234 	movhi	r5,8
   8070c:	29426e04 	addi	r5,r5,2488
   80710:	1009883a 	mov	r4,r2
   80714:	008fe9c0 	call	8fe9c <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80718:	d8000015 	stw	zero,0(sp)
   8071c:	000f883a 	mov	r7,zero
   80720:	01800274 	movhi	r6,9
   80724:	31988504 	addi	r6,r6,25108
   80728:	01400434 	movhi	r5,16
   8072c:	29401804 	addi	r5,r5,96
   80730:	01000434 	movhi	r4,16
   80734:	21001004 	addi	r4,r4,64
   80738:	008fcb80 	call	8fcb8 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor );
   8073c:	d0a7ed17 	ldw	r2,-24652(gp)
   80740:	01400434 	movhi	r5,16
   80744:	29401004 	addi	r5,r5,64
   80748:	1009883a 	mov	r4,r2
   8074c:	008f98c0 	call	8f98c <alt_avalon_sgdma_do_async_transfer>

	//Specify the addresses of the PHY devices to be accessed through MDIO interface

	if(!device){
   80750:	e0bfff17 	ldw	r2,-4(fp)
   80754:	1000051e 	bne	r2,zero,8076c <receive+0xb8>
		*(tse + 0x0F) = 0x10;
   80758:	d0a00017 	ldw	r2,-32768(gp)
   8075c:	10800f04 	addi	r2,r2,60
   80760:	00c00404 	movi	r3,16
   80764:	10c00015 	stw	r3,0(r2)
   80768:	00000406 	br	8077c <receive+0xc8>
	}
	else {
		*(tse + 0x0F) = 0x11;
   8076c:	d0a00017 	ldw	r2,-32768(gp)
   80770:	10800f04 	addi	r2,r2,60
   80774:	00c00444 	movi	r3,17
   80778:	10c00015 	stw	r3,0(r2)
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   8077c:	d0a00017 	ldw	r2,-32768(gp)
   80780:	10c00204 	addi	r3,r2,8
   80784:	d0a00017 	ldw	r2,-32768(gp)
   80788:	10800204 	addi	r2,r2,8
   8078c:	11000017 	ldw	r4,0(r2)
   80790:	00802034 	movhi	r2,128
   80794:	10808804 	addi	r2,r2,544
   80798:	2084b03a 	or	r2,r4,r2
   8079c:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));
   807a0:	0001883a 	nop
   807a4:	d0a00017 	ldw	r2,-32768(gp)
   807a8:	10800204 	addi	r2,r2,8
   807ac:	10c00017 	ldw	r3,0(r2)
   807b0:	d0a00017 	ldw	r2,-32768(gp)
   807b4:	10800204 	addi	r2,r2,8
   807b8:	11000017 	ldw	r4,0(r2)
   807bc:	00802034 	movhi	r2,128
   807c0:	10808804 	addi	r2,r2,544
   807c4:	2084b03a 	or	r2,r4,r2
   807c8:	18bff61e 	bne	r3,r2,807a4 <rx_descriptor_end+0xfff80744>

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;	//tx_section_empty
   807cc:	d0a00017 	ldw	r2,-32768(gp)
   807d0:	10800904 	addi	r2,r2,36
   807d4:	00c1fc04 	movi	r3,2032
   807d8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 0x03;						//tx_almost_full
   807dc:	d0a00017 	ldw	r2,-32768(gp)
   807e0:	10800e04 	addi	r2,r2,56
   807e4:	00c000c4 	movi	r3,3
   807e8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 0x08;						//tx_almost_empty
   807ec:	d0a00017 	ldw	r2,-32768(gp)
   807f0:	10800d04 	addi	r2,r2,52
   807f4:	00c00204 	movi	r3,8
   807f8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;	//rx_section_empty
   807fc:	d0a00017 	ldw	r2,-32768(gp)
   80800:	10800704 	addi	r2,r2,28
   80804:	00c1fc04 	movi	r3,2032
   80808:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 0x08;						//rx_almost_full
   8080c:	d0a00017 	ldw	r2,-32768(gp)
   80810:	10800c04 	addi	r2,r2,48
   80814:	00c00204 	movi	r3,8
   80818:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 0x08;						//rx_almost_empty
   8081c:	d0a00017 	ldw	r2,-32768(gp)
   80820:	10800b04 	addi	r2,r2,44
   80824:	00c00204 	movi	r3,8
   80828:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0x00;						//tx_section_full
   8082c:	d0a00017 	ldw	r2,-32768(gp)
   80830:	10800a04 	addi	r2,r2,40
   80834:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0x00;						//rx_section_full
   80838:	d0a00017 	ldw	r2,-32768(gp)
   8083c:	10800804 	addi	r2,r2,32
   80840:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	if(!device){
   80844:	e0bfff17 	ldw	r2,-4(fp)
   80848:	10000a1e 	bne	r2,zero,80874 <receive+0x1c0>
		*(tse + 0x03) = 0x17231C00;
   8084c:	d0a00017 	ldw	r2,-32768(gp)
   80850:	10c00304 	addi	r3,r2,12
   80854:	0085c8f4 	movhi	r2,5923
   80858:	10870004 	addi	r2,r2,7168
   8085c:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000CB4A;
   80860:	d0a00017 	ldw	r2,-32768(gp)
   80864:	10800404 	addi	r2,r2,16
   80868:	00f2d294 	movui	r3,52042
   8086c:	10c00015 	stw	r3,0(r2)
   80870:	00000906 	br	80898 <receive+0x1e4>
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
   80874:	d0a00017 	ldw	r2,-32768(gp)
   80878:	10c00304 	addi	r3,r2,12
   8087c:	00a4c2f4 	movhi	r2,37643
   80880:	1085b204 	addi	r2,r2,5832
   80884:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000DA67;
   80888:	d0a00017 	ldw	r2,-32768(gp)
   8088c:	10800404 	addi	r2,r2,16
   80890:	00f699d4 	movui	r3,55911
   80894:	10c00015 	stw	r3,0(r2)
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
   80898:	d0a00017 	ldw	r2,-32768(gp)
   8089c:	10800504 	addi	r2,r2,20
   808a0:	00c17b84 	movi	r3,1518
   808a4:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;//tx_ipg_length
   808a8:	d0a00017 	ldw	r2,-32768(gp)
   808ac:	10801704 	addi	r2,r2,92
   808b0:	00c00304 	movi	r3,12
   808b4:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;//pause_quanta
   808b8:	d0a00017 	ldw	r2,-32768(gp)
   808bc:	10800604 	addi	r2,r2,24
   808c0:	00ffffd4 	movui	r3,65535
   808c4:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;//config register
   808c8:	d0a00017 	ldw	r2,-32768(gp)
   808cc:	10c00204 	addi	r3,r2,8
   808d0:	00802034 	movhi	r2,128
   808d4:	10808804 	addi	r2,r2,544
   808d8:	18800015 	stw	r2,0(r3)


	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   808dc:	d0a00017 	ldw	r2,-32768(gp)
   808e0:	10c00204 	addi	r3,r2,8
   808e4:	00802034 	movhi	r2,128
   808e8:	10888804 	addi	r2,r2,8736
   808ec:	18800015 	stw	r2,0(r3)
	alt_printf("Setting the reset");
   808f0:	01000274 	movhi	r4,9
   808f4:	2106ec04 	addi	r4,r4,7088
   808f8:	008e8040 	call	8e804 <alt_printf>
	while ( *(tse + 0x02) != ( 0x00800220 )) printf("... ") ;
   808fc:	00000306 	br	8090c <receive+0x258>
   80900:	01000274 	movhi	r4,9
   80904:	2106f104 	addi	r4,r4,7108
   80908:	00830700 	call	83070 <printf>
   8090c:	d0a00017 	ldw	r2,-32768(gp)
   80910:	10800204 	addi	r2,r2,8
   80914:	10c00017 	ldw	r3,0(r2)
   80918:	00802034 	movhi	r2,128
   8091c:	10808804 	addi	r2,r2,544
   80920:	18bff71e 	bne	r3,r2,80900 <rx_descriptor_end+0xfff808a0>

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;//3rd bit changed to 0/8
   80924:	d0a00017 	ldw	r2,-32768(gp)
   80928:	10c00204 	addi	r3,r2,8
   8092c:	d0a00017 	ldw	r2,-32768(gp)
   80930:	10800204 	addi	r2,r2,8
   80934:	11000017 	ldw	r4,0(r2)
   80938:	00802034 	movhi	r2,128
   8093c:	10808ec4 	addi	r2,r2,571
   80940:	2084b03a 	or	r2,r4,r2
   80944:	18800015 	stw	r2,0(r3)

	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) );
   80948:	0001883a 	nop
   8094c:	d0a00017 	ldw	r2,-32768(gp)
   80950:	10800204 	addi	r2,r2,8
   80954:	10c00017 	ldw	r3,0(r2)
   80958:	d0a00017 	ldw	r2,-32768(gp)
   8095c:	10800204 	addi	r2,r2,8
   80960:	11000017 	ldw	r4,0(r2)
   80964:	00802034 	movhi	r2,128
   80968:	10808ec4 	addi	r2,r2,571
   8096c:	2084b03a 	or	r2,r4,r2
   80970:	18bff61e 	bne	r3,r2,8094c <rx_descriptor_end+0xfff808ec>


	while (1) {
		in=IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   80974:	00800434 	movhi	r2,16
   80978:	10892804 	addi	r2,r2,9376
   8097c:	10800037 	ldwio	r2,0(r2)
   80980:	d0a7ea15 	stw	r2,-24664(gp)
		if (in == 1){
   80984:	d0a7ea17 	ldw	r2,-24664(gp)
   80988:	10800058 	cmpnei	r2,r2,1
   8098c:	1000051e 	bne	r2,zero,809a4 <receive+0x2f0>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01);//turn on or turn off the LED
   80990:	00c00044 	movi	r3,1
   80994:	00800434 	movhi	r2,16
   80998:	10892c04 	addi	r2,r2,9392
   8099c:	10c00035 	stwio	r3,0(r2)
   809a0:	003ff406 	br	80974 <rx_descriptor_end+0xfff80914>
		}
		else{
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   809a4:	0007883a 	mov	r3,zero
   809a8:	00800434 	movhi	r2,16
   809ac:	10892c04 	addi	r2,r2,9392
   809b0:	10c00035 	stwio	r3,0(r2)
		}
	}
   809b4:	003fef06 	br	80974 <rx_descriptor_end+0xfff80914>

000809b8 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
 ****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   809b8:	defffa04 	addi	sp,sp,-24
   809bc:	dfc00515 	stw	ra,20(sp)
   809c0:	df000415 	stw	fp,16(sp)
   809c4:	df000404 	addi	fp,sp,16
   809c8:	e13fff15 	stw	r4,-4(fp)

	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	if(in == 1){ // check if the switch is on
   809cc:	d0a7ea17 	ldw	r2,-24664(gp)
   809d0:	10800060 	cmpeqi	r2,r2,1
   809d4:	1000a01e 	bne	r2,zero,80c58 <rx_ethernet_isr+0x2a0>
		//alt_printf( "Destination address: %x,%x,%x,%x%x,%x \n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
		//alt_printf( "Source address: %x,%x,%x,%x,%x,%x \n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
	}
	else {
		alt_dcache_flush_all();
   809d8:	008e3040 	call	8e304 <alt_dcache_flush_all>
		printf( "Destination address: %x:%x:%x:%x:%x:%x\n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
   809dc:	00800274 	movhi	r2,9
   809e0:	10988504 	addi	r2,r2,25108
   809e4:	10800083 	ldbu	r2,2(r2)
   809e8:	11403fcc 	andi	r5,r2,255
   809ec:	00800274 	movhi	r2,9
   809f0:	10988504 	addi	r2,r2,25108
   809f4:	108000c3 	ldbu	r2,3(r2)
   809f8:	11803fcc 	andi	r6,r2,255
   809fc:	00800274 	movhi	r2,9
   80a00:	10988504 	addi	r2,r2,25108
   80a04:	10800103 	ldbu	r2,4(r2)
   80a08:	11c03fcc 	andi	r7,r2,255
   80a0c:	00800274 	movhi	r2,9
   80a10:	10988504 	addi	r2,r2,25108
   80a14:	10800143 	ldbu	r2,5(r2)
   80a18:	10c03fcc 	andi	r3,r2,255
   80a1c:	00800274 	movhi	r2,9
   80a20:	10988504 	addi	r2,r2,25108
   80a24:	10800183 	ldbu	r2,6(r2)
   80a28:	11003fcc 	andi	r4,r2,255
   80a2c:	00800274 	movhi	r2,9
   80a30:	10988504 	addi	r2,r2,25108
   80a34:	108001c3 	ldbu	r2,7(r2)
   80a38:	10803fcc 	andi	r2,r2,255
   80a3c:	d8800215 	stw	r2,8(sp)
   80a40:	d9000115 	stw	r4,4(sp)
   80a44:	d8c00015 	stw	r3,0(sp)
   80a48:	01000274 	movhi	r4,9
   80a4c:	21072f04 	addi	r4,r4,7356
   80a50:	00830700 	call	83070 <printf>
		printf( "Source address: %x:%x:%x:%x:%x:%x\n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
   80a54:	00800274 	movhi	r2,9
   80a58:	10988504 	addi	r2,r2,25108
   80a5c:	10800203 	ldbu	r2,8(r2)
   80a60:	11403fcc 	andi	r5,r2,255
   80a64:	00800274 	movhi	r2,9
   80a68:	10988504 	addi	r2,r2,25108
   80a6c:	10800243 	ldbu	r2,9(r2)
   80a70:	11803fcc 	andi	r6,r2,255
   80a74:	00800274 	movhi	r2,9
   80a78:	10988504 	addi	r2,r2,25108
   80a7c:	10800283 	ldbu	r2,10(r2)
   80a80:	11c03fcc 	andi	r7,r2,255
   80a84:	00800274 	movhi	r2,9
   80a88:	10988504 	addi	r2,r2,25108
   80a8c:	108002c3 	ldbu	r2,11(r2)
   80a90:	10c03fcc 	andi	r3,r2,255
   80a94:	00800274 	movhi	r2,9
   80a98:	10988504 	addi	r2,r2,25108
   80a9c:	10800303 	ldbu	r2,12(r2)
   80aa0:	11003fcc 	andi	r4,r2,255
   80aa4:	00800274 	movhi	r2,9
   80aa8:	10988504 	addi	r2,r2,25108
   80aac:	10800343 	ldbu	r2,13(r2)
   80ab0:	10803fcc 	andi	r2,r2,255
   80ab4:	d8800215 	stw	r2,8(sp)
   80ab8:	d9000115 	stw	r4,4(sp)
   80abc:	d8c00015 	stw	r3,0(sp)
   80ac0:	01000274 	movhi	r4,9
   80ac4:	21073904 	addi	r4,r4,7396
   80ac8:	00830700 	call	83070 <printf>
		printf( "Length: %x%x\nSource IP: %d.%d.%d.%d\n", rx_frame[14], rx_frame[15], rx_frame[16], rx_frame[17],rx_frame[18], rx_frame[19] );
   80acc:	00800274 	movhi	r2,9
   80ad0:	10988504 	addi	r2,r2,25108
   80ad4:	10800383 	ldbu	r2,14(r2)
   80ad8:	11403fcc 	andi	r5,r2,255
   80adc:	00800274 	movhi	r2,9
   80ae0:	10988504 	addi	r2,r2,25108
   80ae4:	108003c3 	ldbu	r2,15(r2)
   80ae8:	11803fcc 	andi	r6,r2,255
   80aec:	00800274 	movhi	r2,9
   80af0:	10988504 	addi	r2,r2,25108
   80af4:	10800403 	ldbu	r2,16(r2)
   80af8:	11c03fcc 	andi	r7,r2,255
   80afc:	00800274 	movhi	r2,9
   80b00:	10988504 	addi	r2,r2,25108
   80b04:	10800443 	ldbu	r2,17(r2)
   80b08:	10c03fcc 	andi	r3,r2,255
   80b0c:	00800274 	movhi	r2,9
   80b10:	10988504 	addi	r2,r2,25108
   80b14:	10800483 	ldbu	r2,18(r2)
   80b18:	11003fcc 	andi	r4,r2,255
   80b1c:	00800274 	movhi	r2,9
   80b20:	10988504 	addi	r2,r2,25108
   80b24:	108004c3 	ldbu	r2,19(r2)
   80b28:	10803fcc 	andi	r2,r2,255
   80b2c:	d8800215 	stw	r2,8(sp)
   80b30:	d9000115 	stw	r4,4(sp)
   80b34:	d8c00015 	stw	r3,0(sp)
   80b38:	01000274 	movhi	r4,9
   80b3c:	21074204 	addi	r4,r4,7432
   80b40:	00830700 	call	83070 <printf>
		printf( "Destination IP: %d%d%d%d\nSource Port: %d:%d\n", rx_frame[20], rx_frame[21], rx_frame[22], rx_frame[23],rx_frame[24], rx_frame[25] );
   80b44:	00800274 	movhi	r2,9
   80b48:	10988504 	addi	r2,r2,25108
   80b4c:	10800503 	ldbu	r2,20(r2)
   80b50:	11403fcc 	andi	r5,r2,255
   80b54:	00800274 	movhi	r2,9
   80b58:	10988504 	addi	r2,r2,25108
   80b5c:	10800543 	ldbu	r2,21(r2)
   80b60:	11803fcc 	andi	r6,r2,255
   80b64:	00800274 	movhi	r2,9
   80b68:	10988504 	addi	r2,r2,25108
   80b6c:	10800583 	ldbu	r2,22(r2)
   80b70:	11c03fcc 	andi	r7,r2,255
   80b74:	00800274 	movhi	r2,9
   80b78:	10988504 	addi	r2,r2,25108
   80b7c:	108005c3 	ldbu	r2,23(r2)
   80b80:	10c03fcc 	andi	r3,r2,255
   80b84:	00800274 	movhi	r2,9
   80b88:	10988504 	addi	r2,r2,25108
   80b8c:	10800603 	ldbu	r2,24(r2)
   80b90:	11003fcc 	andi	r4,r2,255
   80b94:	00800274 	movhi	r2,9
   80b98:	10988504 	addi	r2,r2,25108
   80b9c:	10800643 	ldbu	r2,25(r2)
   80ba0:	10803fcc 	andi	r2,r2,255
   80ba4:	d8800215 	stw	r2,8(sp)
   80ba8:	d9000115 	stw	r4,4(sp)
   80bac:	d8c00015 	stw	r3,0(sp)
   80bb0:	01000274 	movhi	r4,9
   80bb4:	21074c04 	addi	r4,r4,7472
   80bb8:	00830700 	call	83070 <printf>
		printf( "Destination Port: %d:%d\nSYN: %x\nFIN: %x\nSequence Number: %x\nAck Number: %x\n", rx_frame[26], rx_frame[27], rx_frame[28], rx_frame[29],rx_frame[30], rx_frame[31] );
   80bbc:	00800274 	movhi	r2,9
   80bc0:	10988504 	addi	r2,r2,25108
   80bc4:	10800683 	ldbu	r2,26(r2)
   80bc8:	11403fcc 	andi	r5,r2,255
   80bcc:	00800274 	movhi	r2,9
   80bd0:	10988504 	addi	r2,r2,25108
   80bd4:	108006c3 	ldbu	r2,27(r2)
   80bd8:	11803fcc 	andi	r6,r2,255
   80bdc:	00800274 	movhi	r2,9
   80be0:	10988504 	addi	r2,r2,25108
   80be4:	10800703 	ldbu	r2,28(r2)
   80be8:	11c03fcc 	andi	r7,r2,255
   80bec:	00800274 	movhi	r2,9
   80bf0:	10988504 	addi	r2,r2,25108
   80bf4:	10800743 	ldbu	r2,29(r2)
   80bf8:	10c03fcc 	andi	r3,r2,255
   80bfc:	00800274 	movhi	r2,9
   80c00:	10988504 	addi	r2,r2,25108
   80c04:	10800783 	ldbu	r2,30(r2)
   80c08:	11003fcc 	andi	r4,r2,255
   80c0c:	00800274 	movhi	r2,9
   80c10:	10988504 	addi	r2,r2,25108
   80c14:	108007c3 	ldbu	r2,31(r2)
   80c18:	10803fcc 	andi	r2,r2,255
   80c1c:	d8800215 	stw	r2,8(sp)
   80c20:	d9000115 	stw	r4,4(sp)
   80c24:	d8c00015 	stw	r3,0(sp)
   80c28:	01000274 	movhi	r4,9
   80c2c:	21075804 	addi	r4,r4,7520
   80c30:	00830700 	call	83070 <printf>
		printf( "Data: %x\n", rx_frame[32]);
   80c34:	00800274 	movhi	r2,9
   80c38:	10988504 	addi	r2,r2,25108
   80c3c:	10800803 	ldbu	r2,32(r2)
   80c40:	10803fcc 	andi	r2,r2,255
   80c44:	100b883a 	mov	r5,r2
   80c48:	01000274 	movhi	r4,9
   80c4c:	21076b04 	addi	r4,r4,7596
   80c50:	00830700 	call	83070 <printf>
		alt_dcache_flush_all();
   80c54:	008e3040 	call	8e304 <alt_dcache_flush_all>
		//alt_printf( "MAC ADDRESS 0: %x \n", *(tse + 0x18) );
		//alt_printf( "Successful frames: %x \n", *(tse + 0x1A) );
		//alt_printf( "Broadcast frames: %x \n", *(tse + 0x26) );
	}
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   80c58:	0001883a 	nop
   80c5c:	01000434 	movhi	r4,16
   80c60:	21001004 	addi	r4,r4,64
   80c64:	008ffa40 	call	8ffa4 <alt_avalon_sgdma_check_descriptor_status>
   80c68:	103ffc1e 	bne	r2,zero,80c5c <rx_descriptor_end+0xfff80bfc>
		;

	count++;
   80c6c:	d0a7e917 	ldw	r2,-24668(gp)
   80c70:	10800044 	addi	r2,r2,1
   80c74:	d0a7e915 	stw	r2,-24668(gp)
	// Create new receive sgdma descriptor
	//alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

	// Set up non-blocking transfer of sgdma receive descriptor
	//alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor);
}
   80c78:	0001883a 	nop
   80c7c:	e037883a 	mov	sp,fp
   80c80:	dfc00117 	ldw	ra,4(sp)
   80c84:	df000017 	ldw	fp,0(sp)
   80c88:	dec00204 	addi	sp,sp,8
   80c8c:	f800283a 	ret

00080c90 <tx_ethernet_isr>:

void tx_ethernet_isr (void *context){
   80c90:	defffa04 	addi	sp,sp,-24
   80c94:	dfc00515 	stw	ra,20(sp)
   80c98:	df000415 	stw	fp,16(sp)
   80c9c:	df000404 	addi	fp,sp,16
   80ca0:	e13fff15 	stw	r4,-4(fp)

	transmissionStatus = 1;
   80ca4:	00800044 	movi	r2,1
   80ca8:	d0a7eb15 	stw	r2,-24660(gp)
	printf("Destination address: %x.%x.%x.%x.%x.%x \n", tx_frame[2], tx_frame[3], tx_frame[4], tx_frame[5],tx_frame[6], tx_frame[7] );
   80cac:	00800274 	movhi	r2,9
   80cb0:	1088bd04 	addi	r2,r2,8948
   80cb4:	10800083 	ldbu	r2,2(r2)
   80cb8:	11403fcc 	andi	r5,r2,255
   80cbc:	00800274 	movhi	r2,9
   80cc0:	1088bd04 	addi	r2,r2,8948
   80cc4:	108000c3 	ldbu	r2,3(r2)
   80cc8:	11803fcc 	andi	r6,r2,255
   80ccc:	00800274 	movhi	r2,9
   80cd0:	1088bd04 	addi	r2,r2,8948
   80cd4:	10800103 	ldbu	r2,4(r2)
   80cd8:	11c03fcc 	andi	r7,r2,255
   80cdc:	00800274 	movhi	r2,9
   80ce0:	1088bd04 	addi	r2,r2,8948
   80ce4:	10800143 	ldbu	r2,5(r2)
   80ce8:	10c03fcc 	andi	r3,r2,255
   80cec:	00800274 	movhi	r2,9
   80cf0:	1088bd04 	addi	r2,r2,8948
   80cf4:	10800183 	ldbu	r2,6(r2)
   80cf8:	11003fcc 	andi	r4,r2,255
   80cfc:	00800274 	movhi	r2,9
   80d00:	1088bd04 	addi	r2,r2,8948
   80d04:	108001c3 	ldbu	r2,7(r2)
   80d08:	10803fcc 	andi	r2,r2,255
   80d0c:	d8800215 	stw	r2,8(sp)
   80d10:	d9000115 	stw	r4,4(sp)
   80d14:	d8c00015 	stw	r3,0(sp)
   80d18:	01000274 	movhi	r4,9
   80d1c:	21076e04 	addi	r4,r4,7608
   80d20:	00830700 	call	83070 <printf>
	printf("Source address: %x.%x.%x.%x.%x.%x\n", tx_frame[8], tx_frame[9], tx_frame[10], tx_frame[11], tx_frame[12], tx_frame[13] );
   80d24:	00800274 	movhi	r2,9
   80d28:	1088bd04 	addi	r2,r2,8948
   80d2c:	10800203 	ldbu	r2,8(r2)
   80d30:	11403fcc 	andi	r5,r2,255
   80d34:	00800274 	movhi	r2,9
   80d38:	1088bd04 	addi	r2,r2,8948
   80d3c:	10800243 	ldbu	r2,9(r2)
   80d40:	11803fcc 	andi	r6,r2,255
   80d44:	00800274 	movhi	r2,9
   80d48:	1088bd04 	addi	r2,r2,8948
   80d4c:	10800283 	ldbu	r2,10(r2)
   80d50:	11c03fcc 	andi	r7,r2,255
   80d54:	00800274 	movhi	r2,9
   80d58:	1088bd04 	addi	r2,r2,8948
   80d5c:	108002c3 	ldbu	r2,11(r2)
   80d60:	10c03fcc 	andi	r3,r2,255
   80d64:	00800274 	movhi	r2,9
   80d68:	1088bd04 	addi	r2,r2,8948
   80d6c:	10800303 	ldbu	r2,12(r2)
   80d70:	11003fcc 	andi	r4,r2,255
   80d74:	00800274 	movhi	r2,9
   80d78:	1088bd04 	addi	r2,r2,8948
   80d7c:	10800343 	ldbu	r2,13(r2)
   80d80:	10803fcc 	andi	r2,r2,255
   80d84:	d8800215 	stw	r2,8(sp)
   80d88:	d9000115 	stw	r4,4(sp)
   80d8c:	d8c00015 	stw	r3,0(sp)
   80d90:	01000274 	movhi	r4,9
   80d94:	21077904 	addi	r4,r4,7652
   80d98:	00830700 	call	83070 <printf>
	printf("Source IP: %d.%d.%d.%d\n", tx_frame[16], tx_frame[17], tx_frame[18], tx_frame[19]);
   80d9c:	00800274 	movhi	r2,9
   80da0:	1088bd04 	addi	r2,r2,8948
   80da4:	10800403 	ldbu	r2,16(r2)
   80da8:	10c03fcc 	andi	r3,r2,255
   80dac:	00800274 	movhi	r2,9
   80db0:	1088bd04 	addi	r2,r2,8948
   80db4:	10800443 	ldbu	r2,17(r2)
   80db8:	11003fcc 	andi	r4,r2,255
   80dbc:	00800274 	movhi	r2,9
   80dc0:	1088bd04 	addi	r2,r2,8948
   80dc4:	10800483 	ldbu	r2,18(r2)
   80dc8:	11403fcc 	andi	r5,r2,255
   80dcc:	00800274 	movhi	r2,9
   80dd0:	1088bd04 	addi	r2,r2,8948
   80dd4:	108004c3 	ldbu	r2,19(r2)
   80dd8:	10803fcc 	andi	r2,r2,255
   80ddc:	d8800015 	stw	r2,0(sp)
   80de0:	280f883a 	mov	r7,r5
   80de4:	200d883a 	mov	r6,r4
   80de8:	180b883a 	mov	r5,r3
   80dec:	01000274 	movhi	r4,9
   80df0:	21078204 	addi	r4,r4,7688
   80df4:	00830700 	call	83070 <printf>
	printf("Destination IP: %d.%d.%d.%d\n", tx_frame[20], tx_frame[21], tx_frame[22], tx_frame[23]);
   80df8:	00800274 	movhi	r2,9
   80dfc:	1088bd04 	addi	r2,r2,8948
   80e00:	10800503 	ldbu	r2,20(r2)
   80e04:	10c03fcc 	andi	r3,r2,255
   80e08:	00800274 	movhi	r2,9
   80e0c:	1088bd04 	addi	r2,r2,8948
   80e10:	10800543 	ldbu	r2,21(r2)
   80e14:	11003fcc 	andi	r4,r2,255
   80e18:	00800274 	movhi	r2,9
   80e1c:	1088bd04 	addi	r2,r2,8948
   80e20:	10800583 	ldbu	r2,22(r2)
   80e24:	11403fcc 	andi	r5,r2,255
   80e28:	00800274 	movhi	r2,9
   80e2c:	1088bd04 	addi	r2,r2,8948
   80e30:	108005c3 	ldbu	r2,23(r2)
   80e34:	10803fcc 	andi	r2,r2,255
   80e38:	d8800015 	stw	r2,0(sp)
   80e3c:	280f883a 	mov	r7,r5
   80e40:	200d883a 	mov	r6,r4
   80e44:	180b883a 	mov	r5,r3
   80e48:	01000274 	movhi	r4,9
   80e4c:	21078804 	addi	r4,r4,7712
   80e50:	00830700 	call	83070 <printf>
	printf("Source Port: %d%d%\n Destination Port: %d%d%\n ", tx_frame[24], tx_frame[25], tx_frame[26], tx_frame[27]);
   80e54:	00800274 	movhi	r2,9
   80e58:	1088bd04 	addi	r2,r2,8948
   80e5c:	10800603 	ldbu	r2,24(r2)
   80e60:	10c03fcc 	andi	r3,r2,255
   80e64:	00800274 	movhi	r2,9
   80e68:	1088bd04 	addi	r2,r2,8948
   80e6c:	10800643 	ldbu	r2,25(r2)
   80e70:	11003fcc 	andi	r4,r2,255
   80e74:	00800274 	movhi	r2,9
   80e78:	1088bd04 	addi	r2,r2,8948
   80e7c:	10800683 	ldbu	r2,26(r2)
   80e80:	11403fcc 	andi	r5,r2,255
   80e84:	00800274 	movhi	r2,9
   80e88:	1088bd04 	addi	r2,r2,8948
   80e8c:	108006c3 	ldbu	r2,27(r2)
   80e90:	10803fcc 	andi	r2,r2,255
   80e94:	d8800015 	stw	r2,0(sp)
   80e98:	280f883a 	mov	r7,r5
   80e9c:	200d883a 	mov	r6,r4
   80ea0:	180b883a 	mov	r5,r3
   80ea4:	01000274 	movhi	r4,9
   80ea8:	21079004 	addi	r4,r4,7744
   80eac:	00830700 	call	83070 <printf>
	printf("SYN: %x FIN: %x%\n Seq: %x Ack: %x%\n ", tx_frame[28], tx_frame[29], tx_frame[30], tx_frame[31]);
   80eb0:	00800274 	movhi	r2,9
   80eb4:	1088bd04 	addi	r2,r2,8948
   80eb8:	10800703 	ldbu	r2,28(r2)
   80ebc:	10c03fcc 	andi	r3,r2,255
   80ec0:	00800274 	movhi	r2,9
   80ec4:	1088bd04 	addi	r2,r2,8948
   80ec8:	10800743 	ldbu	r2,29(r2)
   80ecc:	11003fcc 	andi	r4,r2,255
   80ed0:	00800274 	movhi	r2,9
   80ed4:	1088bd04 	addi	r2,r2,8948
   80ed8:	10800783 	ldbu	r2,30(r2)
   80edc:	11403fcc 	andi	r5,r2,255
   80ee0:	00800274 	movhi	r2,9
   80ee4:	1088bd04 	addi	r2,r2,8948
   80ee8:	108007c3 	ldbu	r2,31(r2)
   80eec:	10803fcc 	andi	r2,r2,255
   80ef0:	d8800015 	stw	r2,0(sp)
   80ef4:	280f883a 	mov	r7,r5
   80ef8:	200d883a 	mov	r6,r4
   80efc:	180b883a 	mov	r5,r3
   80f00:	01000274 	movhi	r4,9
   80f04:	21079c04 	addi	r4,r4,7792
   80f08:	00830700 	call	83070 <printf>
	printf("Data: %x%\n ", tx_frame[32]);
   80f0c:	00800274 	movhi	r2,9
   80f10:	1088bd04 	addi	r2,r2,8948
   80f14:	10800803 	ldbu	r2,32(r2)
   80f18:	10803fcc 	andi	r2,r2,255
   80f1c:	100b883a 	mov	r5,r2
   80f20:	01000274 	movhi	r4,9
   80f24:	2107a604 	addi	r4,r4,7832
   80f28:	00830700 	call	83070 <printf>
	printf("Frames Transmitted: %x\n", *(tse + 0x1A) );
   80f2c:	d0a00017 	ldw	r2,-32768(gp)
   80f30:	10801a04 	addi	r2,r2,104
   80f34:	10800017 	ldw	r2,0(r2)
   80f38:	100b883a 	mov	r5,r2
   80f3c:	01000274 	movhi	r4,9
   80f40:	2107a904 	addi	r4,r4,7844
   80f44:	00830700 	call	83070 <printf>
	printf("Pause Frames Transmitted: %x \n", *(tse + 0x20));
   80f48:	d0a00017 	ldw	r2,-32768(gp)
   80f4c:	10802004 	addi	r2,r2,128
   80f50:	10800017 	ldw	r2,0(r2)
   80f54:	100b883a 	mov	r5,r2
   80f58:	01000274 	movhi	r4,9
   80f5c:	2107af04 	addi	r4,r4,7868
   80f60:	00830700 	call	83070 <printf>
	printf("Config Register: 0x%x\n", *(tse + 0x02));
   80f64:	d0a00017 	ldw	r2,-32768(gp)
   80f68:	10800204 	addi	r2,r2,8
   80f6c:	10800017 	ldw	r2,0(r2)
   80f70:	100b883a 	mov	r5,r2
   80f74:	01000274 	movhi	r4,9
   80f78:	2107b704 	addi	r4,r4,7900
   80f7c:	00830700 	call	83070 <printf>

	// Wait until transmit descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   80f80:	0001883a 	nop
   80f84:	01000434 	movhi	r4,16
   80f88:	21000004 	addi	r4,r4,0
   80f8c:	008ffa40 	call	8ffa4 <alt_avalon_sgdma_check_descriptor_status>
   80f90:	103ffc1e 	bne	r2,zero,80f84 <rx_descriptor_end+0xfff80f24>
	/*	// Create new sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, strlen(tx_frame)+6+6+2, 0, 1, 1, 0);

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);*/
}
   80f94:	0001883a 	nop
   80f98:	e037883a 	mov	sp,fp
   80f9c:	dfc00117 	ldw	ra,4(sp)
   80fa0:	df000017 	ldw	fp,0(sp)
   80fa4:	dec00204 	addi	sp,sp,8
   80fa8:	f800283a 	ret

00080fac <connect>:
int seqNumber = 0x00;
int ackNumber = 0x00;

int timer;

int connect(int device, unsigned char * sourceIP, unsigned char * sourcePort, unsigned char * destinationIP, unsigned char * destinationPort){
   80fac:	defff904 	addi	sp,sp,-28
   80fb0:	dfc00615 	stw	ra,24(sp)
   80fb4:	df000515 	stw	fp,20(sp)
   80fb8:	df000504 	addi	fp,sp,20
   80fbc:	e13ffc15 	stw	r4,-16(fp)
   80fc0:	e17ffd15 	stw	r5,-12(fp)
   80fc4:	e1bffe15 	stw	r6,-8(fp)
   80fc8:	e1ffff15 	stw	r7,-4(fp)
	conn->syn[0] = 0x01;
   80fcc:	d0a7f017 	ldw	r2,-24640(gp)
   80fd0:	00c00044 	movi	r3,1
   80fd4:	10c00205 	stb	r3,8(r2)
	conn->fin[0] = 0x00;
   80fd8:	d0a7f017 	ldw	r2,-24640(gp)
   80fdc:	10000285 	stb	zero,10(r2)
	memmove(conn->destPort, destinationPort, 2);
   80fe0:	d0a7f017 	ldw	r2,-24640(gp)
   80fe4:	10800084 	addi	r2,r2,2
   80fe8:	01800084 	movi	r6,2
   80fec:	e1400217 	ldw	r5,8(fp)
   80ff0:	1009883a 	mov	r4,r2
   80ff4:	0082dbc0 	call	82dbc <memmove>
	memmove(conn->sourcePort, sourcePort, 2);
   80ff8:	d0a7f017 	ldw	r2,-24640(gp)
   80ffc:	01800084 	movi	r6,2
   81000:	e17ffe17 	ldw	r5,-8(fp)
   81004:	1009883a 	mov	r4,r2
   81008:	0082dbc0 	call	82dbc <memmove>
	conn->seqNum[0] = seqNumber;
   8100c:	d0a7f017 	ldw	r2,-24640(gp)
   81010:	d0e7ee17 	ldw	r3,-24648(gp)
   81014:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   81018:	d0a7f017 	ldw	r2,-24640(gp)
   8101c:	d0e7ef17 	ldw	r3,-24644(gp)
   81020:	10c00185 	stb	r3,6(r2)
	conn->data[0] = 0x00;
   81024:	d0a7f017 	ldw	r2,-24640(gp)
   81028:	10000305 	stb	zero,12(r2)
	memmove(pack->sourceIP, sourceIP, 4);
   8102c:	d0a7f617 	ldw	r2,-24616(gp)
   81030:	01800104 	movi	r6,4
   81034:	e17ffd17 	ldw	r5,-12(fp)
   81038:	1009883a 	mov	r4,r2
   8103c:	0082dbc0 	call	82dbc <memmove>
	memmove(pack->destIP, destinationIP, 4);
   81040:	d0a7f617 	ldw	r2,-24616(gp)
   81044:	10800104 	addi	r2,r2,4
   81048:	01800104 	movi	r6,4
   8104c:	e17fff17 	ldw	r5,-4(fp)
   81050:	1009883a 	mov	r4,r2
   81054:	0082dbc0 	call	82dbc <memmove>
	pack->payload = conn;
   81058:	d0a7f617 	ldw	r2,-24616(gp)
   8105c:	d0e7f017 	ldw	r3,-24640(gp)
   81060:	10c00215 	stw	r3,8(r2)
	sentPacket = pack;
   81064:	d0a7f617 	ldw	r2,-24616(gp)
   81068:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);//Send Connection Request
   8106c:	d0a7f617 	ldw	r2,-24616(gp)
   81070:	100b883a 	mov	r5,r2
   81074:	e13ffc17 	ldw	r4,-16(fp)
   81078:	00802900 	call	80290 <transmit>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   8107c:	00c00084 	movi	r3,2
   81080:	00800434 	movhi	r2,16
   81084:	10892004 	addi	r2,r2,9344
   81088:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xFFFF);
   8108c:	00ffffd4 	movui	r3,65535
   81090:	00800434 	movhi	r2,16
   81094:	10892204 	addi	r2,r2,9352
   81098:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
   8109c:	00ffffd4 	movui	r3,65535
   810a0:	00800434 	movhi	r2,16
   810a4:	10892304 	addi	r2,r2,9356
   810a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   810ac:	00c00104 	movi	r3,4
   810b0:	00800434 	movhi	r2,16
   810b4:	10892104 	addi	r2,r2,9348
   810b8:	10c00035 	stwio	r3,0(r2)
	char * receivedBuffer = {0};
   810bc:	e03ffb15 	stw	zero,-20(fp)
	receivedBuffer = receive(device);//Wait to receive SYNACK
   810c0:	e13ffc17 	ldw	r4,-16(fp)
   810c4:	00806b40 	call	806b4 <receive>
   810c8:	e0bffb15 	stw	r2,-20(fp)
	if(receivedBuffer[32] == 0x01){
   810cc:	e0bffb17 	ldw	r2,-20(fp)
   810d0:	10800804 	addi	r2,r2,32
   810d4:	10800003 	ldbu	r2,0(r2)
   810d8:	10803fcc 	andi	r2,r2,255
   810dc:	1080201c 	xori	r2,r2,128
   810e0:	10bfe004 	addi	r2,r2,-128
   810e4:	10800058 	cmpnei	r2,r2,1
   810e8:	1000231e 	bne	r2,zero,81178 <connect+0x1cc>
		pack->payload->syn[0] = 0x00;
   810ec:	d0a7f617 	ldw	r2,-24616(gp)
   810f0:	10800217 	ldw	r2,8(r2)
   810f4:	10000205 	stb	zero,8(r2)
		pack->payload->data[0] = 0x02;
   810f8:	d0a7f617 	ldw	r2,-24616(gp)
   810fc:	10800217 	ldw	r2,8(r2)
   81100:	00c00084 	movi	r3,2
   81104:	10c00305 	stb	r3,12(r2)
		pack->payload->seqNum[0] = ++seqNumber;
   81108:	d0a7f617 	ldw	r2,-24616(gp)
   8110c:	10800217 	ldw	r2,8(r2)
   81110:	d0e7ee17 	ldw	r3,-24648(gp)
   81114:	18c00044 	addi	r3,r3,1
   81118:	d0e7ee15 	stw	r3,-24648(gp)
   8111c:	d0e7ee17 	ldw	r3,-24648(gp)
   81120:	10c00105 	stb	r3,4(r2)
		pack->payload->ackNum[0] = ++ackNumber;
   81124:	d0a7f617 	ldw	r2,-24616(gp)
   81128:	10800217 	ldw	r2,8(r2)
   8112c:	d0e7ef17 	ldw	r3,-24644(gp)
   81130:	18c00044 	addi	r3,r3,1
   81134:	d0e7ef15 	stw	r3,-24644(gp)
   81138:	d0e7ef17 	ldw	r3,-24644(gp)
   8113c:	10c00185 	stb	r3,6(r2)
		transmit(device, pack);//send ack
   81140:	d0a7f617 	ldw	r2,-24616(gp)
   81144:	100b883a 	mov	r5,r2
   81148:	e13ffc17 	ldw	r4,-16(fp)
   8114c:	00802900 	call	80290 <transmit>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   81150:	00c00204 	movi	r3,8
   81154:	00800434 	movhi	r2,16
   81158:	10892104 	addi	r2,r2,9348
   8115c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81160:	00c00084 	movi	r3,2
   81164:	00800434 	movhi	r2,16
   81168:	10892004 	addi	r2,r2,9344
   8116c:	10c00035 	stwio	r3,0(r2)
		return 1;
   81170:	00800044 	movi	r2,1
   81174:	00000f06 	br	811b4 <connect+0x208>
	}else{
		alt_printf("Connection Failed");
   81178:	01000274 	movhi	r4,9
   8117c:	2107bd04 	addi	r4,r4,7924
   81180:	008e8040 	call	8e804 <alt_printf>
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
   81184:	00800434 	movhi	r2,16
   81188:	10892004 	addi	r2,r2,9344
   8118c:	10800037 	ldwio	r2,0(r2)
   81190:	d0a7f115 	stw	r2,-24636(gp)
		if(timer == 1){
   81194:	d0a7f117 	ldw	r2,-24636(gp)
   81198:	10800058 	cmpnei	r2,r2,1
   8119c:	1000041e 	bne	r2,zero,811b0 <connect+0x204>
			transmit(device, sentPacket);
   811a0:	d0a7f217 	ldw	r2,-24632(gp)
   811a4:	100b883a 	mov	r5,r2
   811a8:	e13ffc17 	ldw	r4,-16(fp)
   811ac:	00802900 	call	80290 <transmit>
		}
		return 0;
   811b0:	0005883a 	mov	r2,zero
	}
}
   811b4:	e037883a 	mov	sp,fp
   811b8:	dfc00117 	ldw	ra,4(sp)
   811bc:	df000017 	ldw	fp,0(sp)
   811c0:	dec00204 	addi	sp,sp,8
   811c4:	f800283a 	ret

000811c8 <send>:

int send(int device, unsigned char data){
   811c8:	defffb04 	addi	sp,sp,-20
   811cc:	dfc00415 	stw	ra,16(sp)
   811d0:	df000315 	stw	fp,12(sp)
   811d4:	df000304 	addi	fp,sp,12
   811d8:	e13ffe15 	stw	r4,-8(fp)
   811dc:	2805883a 	mov	r2,r5
   811e0:	e0bfff05 	stb	r2,-4(fp)

	conn->syn[0] = 0x00;
   811e4:	d0a7f017 	ldw	r2,-24640(gp)
   811e8:	10000205 	stb	zero,8(r2)
	conn->fin[0] = 0x00;
   811ec:	d0a7f017 	ldw	r2,-24640(gp)
   811f0:	10000285 	stb	zero,10(r2)
	conn->seqNum[0] = seqNumber;
   811f4:	d0a7f017 	ldw	r2,-24640(gp)
   811f8:	d0e7ee17 	ldw	r3,-24648(gp)
   811fc:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   81200:	d0a7f017 	ldw	r2,-24640(gp)
   81204:	d0e7ef17 	ldw	r3,-24644(gp)
   81208:	10c00185 	stb	r3,6(r2)
	conn->data[0] = data;
   8120c:	d0a7f017 	ldw	r2,-24640(gp)
   81210:	e0ffff03 	ldbu	r3,-4(fp)
   81214:	10c00305 	stb	r3,12(r2)
	pack->payload = conn;
   81218:	d0a7f617 	ldw	r2,-24616(gp)
   8121c:	d0e7f017 	ldw	r3,-24640(gp)
   81220:	10c00215 	stw	r3,8(r2)

	sentPacket = pack;
   81224:	d0a7f617 	ldw	r2,-24616(gp)
   81228:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);
   8122c:	d0a7f617 	ldw	r2,-24616(gp)
   81230:	100b883a 	mov	r5,r2
   81234:	e13ffe17 	ldw	r4,-8(fp)
   81238:	00802900 	call	80290 <transmit>

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   8123c:	00c00084 	movi	r3,2
   81240:	00800434 	movhi	r2,16
   81244:	10892004 	addi	r2,r2,9344
   81248:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
   8124c:	00eaaa94 	movui	r3,43690
   81250:	00800434 	movhi	r2,16
   81254:	10892204 	addi	r2,r2,9352
   81258:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0x002F);
   8125c:	00c00bc4 	movi	r3,47
   81260:	00800434 	movhi	r2,16
   81264:	10892304 	addi	r2,r2,9356
   81268:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   8126c:	00c00104 	movi	r3,4
   81270:	00800434 	movhi	r2,16
   81274:	10892104 	addi	r2,r2,9348
   81278:	10c00035 	stwio	r3,0(r2)

	unsigned char * receivedBuffer;

	receivedBuffer = receive(device);
   8127c:	e13ffe17 	ldw	r4,-8(fp)
   81280:	00806b40 	call	806b4 <receive>
   81284:	e0bffd15 	stw	r2,-12(fp)
	if(receivedBuffer[32] == 0x02){
   81288:	e0bffd17 	ldw	r2,-12(fp)
   8128c:	10800804 	addi	r2,r2,32
   81290:	10800003 	ldbu	r2,0(r2)
   81294:	10803fcc 	andi	r2,r2,255
   81298:	10800098 	cmpnei	r2,r2,2
   8129c:	1000131e 	bne	r2,zero,812ec <send+0x124>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   812a0:	00c00204 	movi	r3,8
   812a4:	00800434 	movhi	r2,16
   812a8:	10892104 	addi	r2,r2,9348
   812ac:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   812b0:	00c00084 	movi	r3,2
   812b4:	00800434 	movhi	r2,16
   812b8:	10892004 	addi	r2,r2,9344
   812bc:	10c00035 	stwio	r3,0(r2)
		alt_printf("Ack received");
   812c0:	01000274 	movhi	r4,9
   812c4:	2107c204 	addi	r4,r4,7944
   812c8:	008e8040 	call	8e804 <alt_printf>
		seqNumber++;
   812cc:	d0a7ee17 	ldw	r2,-24648(gp)
   812d0:	10800044 	addi	r2,r2,1
   812d4:	d0a7ee15 	stw	r2,-24648(gp)
		ackNumber++;
   812d8:	d0a7ef17 	ldw	r2,-24644(gp)
   812dc:	10800044 	addi	r2,r2,1
   812e0:	d0a7ef15 	stw	r2,-24644(gp)
		return 1;//sent and ack received
   812e4:	00800044 	movi	r2,1
   812e8:	00000e06 	br	81324 <send+0x15c>
	}
	else{
		alt_printf("Timeout Occurred");
   812ec:	01000274 	movhi	r4,9
   812f0:	2107c604 	addi	r4,r4,7960
   812f4:	008e8040 	call	8e804 <alt_printf>
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
   812f8:	00800434 	movhi	r2,16
   812fc:	10892004 	addi	r2,r2,9344
   81300:	10800037 	ldwio	r2,0(r2)
   81304:	d0a7f115 	stw	r2,-24636(gp)
		if(timer == 1){
   81308:	d0a7f117 	ldw	r2,-24636(gp)
   8130c:	10800058 	cmpnei	r2,r2,1
   81310:	1000041e 	bne	r2,zero,81324 <send+0x15c>
			transmit(device, sentPacket);
   81314:	d0a7f217 	ldw	r2,-24632(gp)
   81318:	100b883a 	mov	r5,r2
   8131c:	e13ffe17 	ldw	r4,-8(fp)
   81320:	00802900 	call	80290 <transmit>
		}
	}
}
   81324:	e037883a 	mov	sp,fp
   81328:	dfc00117 	ldw	ra,4(sp)
   8132c:	df000017 	ldw	fp,0(sp)
   81330:	dec00204 	addi	sp,sp,8
   81334:	f800283a 	ret

00081338 <accept>:


int accept(int device){
   81338:	defffb04 	addi	sp,sp,-20
   8133c:	dfc00415 	stw	ra,16(sp)
   81340:	df000315 	stw	fp,12(sp)
   81344:	df000304 	addi	fp,sp,12
   81348:	e13fff15 	stw	r4,-4(fp)
	//TODO: Check if destIP, port is myIP, port
	unsigned char * request;
	request = receive(device);
   8134c:	e13fff17 	ldw	r4,-4(fp)
   81350:	00806b40 	call	806b4 <receive>
   81354:	e0bffd15 	stw	r2,-12(fp)

	conn->syn[0] = 0x01;
   81358:	d0a7f017 	ldw	r2,-24640(gp)
   8135c:	00c00044 	movi	r3,1
   81360:	10c00205 	stb	r3,8(r2)
	conn->fin[0] = 0x00;
   81364:	d0a7f017 	ldw	r2,-24640(gp)
   81368:	10000285 	stb	zero,10(r2)
	memmove(conn->destPort, request+24, 2);
   8136c:	d0a7f017 	ldw	r2,-24640(gp)
   81370:	10c00084 	addi	r3,r2,2
   81374:	e0bffd17 	ldw	r2,-12(fp)
   81378:	10800604 	addi	r2,r2,24
   8137c:	01800084 	movi	r6,2
   81380:	100b883a 	mov	r5,r2
   81384:	1809883a 	mov	r4,r3
   81388:	0082dbc0 	call	82dbc <memmove>
	memmove(conn->sourcePort, request+26, 2);
   8138c:	d0a7f017 	ldw	r2,-24640(gp)
   81390:	1007883a 	mov	r3,r2
   81394:	e0bffd17 	ldw	r2,-12(fp)
   81398:	10800684 	addi	r2,r2,26
   8139c:	01800084 	movi	r6,2
   813a0:	100b883a 	mov	r5,r2
   813a4:	1809883a 	mov	r4,r3
   813a8:	0082dbc0 	call	82dbc <memmove>
	conn->seqNum[0] = seqNumber;
   813ac:	d0a7f017 	ldw	r2,-24640(gp)
   813b0:	d0e7ee17 	ldw	r3,-24648(gp)
   813b4:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   813b8:	d0a7f017 	ldw	r2,-24640(gp)
   813bc:	d0e7ef17 	ldw	r3,-24644(gp)
   813c0:	10c00185 	stb	r3,6(r2)
	conn->data[0] = 0x01;
   813c4:	d0a7f017 	ldw	r2,-24640(gp)
   813c8:	00c00044 	movi	r3,1
   813cc:	10c00305 	stb	r3,12(r2)

	memmove(pack->sourceIP, request+20, 4);
   813d0:	d0a7f617 	ldw	r2,-24616(gp)
   813d4:	1007883a 	mov	r3,r2
   813d8:	e0bffd17 	ldw	r2,-12(fp)
   813dc:	10800504 	addi	r2,r2,20
   813e0:	01800104 	movi	r6,4
   813e4:	100b883a 	mov	r5,r2
   813e8:	1809883a 	mov	r4,r3
   813ec:	0082dbc0 	call	82dbc <memmove>
	memmove(pack->destIP, request+20, 4);
   813f0:	d0a7f617 	ldw	r2,-24616(gp)
   813f4:	10c00104 	addi	r3,r2,4
   813f8:	e0bffd17 	ldw	r2,-12(fp)
   813fc:	10800504 	addi	r2,r2,20
   81400:	01800104 	movi	r6,4
   81404:	100b883a 	mov	r5,r2
   81408:	1809883a 	mov	r4,r3
   8140c:	0082dbc0 	call	82dbc <memmove>
	pack->payload = conn;
   81410:	d0a7f617 	ldw	r2,-24616(gp)
   81414:	d0e7f017 	ldw	r3,-24640(gp)
   81418:	10c00215 	stw	r3,8(r2)

	if(request[28] == 0x01){
   8141c:	e0bffd17 	ldw	r2,-12(fp)
   81420:	10800704 	addi	r2,r2,28
   81424:	10800003 	ldbu	r2,0(r2)
   81428:	10803fcc 	andi	r2,r2,255
   8142c:	10800058 	cmpnei	r2,r2,1
   81430:	1000061e 	bne	r2,zero,8144c <accept+0x114>
		sentPacket = pack;
   81434:	d0a7f617 	ldw	r2,-24616(gp)
   81438:	d0a7f215 	stw	r2,-24632(gp)
		transmit(device, pack);
   8143c:	d0a7f617 	ldw	r2,-24616(gp)
   81440:	100b883a 	mov	r5,r2
   81444:	e13fff17 	ldw	r4,-4(fp)
   81448:	00802900 	call	80290 <transmit>
		//return 1;
		//return 1;
	}

	unsigned char * ack;
	ack = receive(device);
   8144c:	e13fff17 	ldw	r4,-4(fp)
   81450:	00806b40 	call	806b4 <receive>
   81454:	e0bffe15 	stw	r2,-8(fp)
	if(ack[32] == 0x02){
   81458:	e0bffe17 	ldw	r2,-8(fp)
   8145c:	10800804 	addi	r2,r2,32
   81460:	10800003 	ldbu	r2,0(r2)
   81464:	10803fcc 	andi	r2,r2,255
   81468:	10800098 	cmpnei	r2,r2,2
   8146c:	1000091e 	bne	r2,zero,81494 <accept+0x15c>
		//Received Ack
		printf("Three way handshake complete");
   81470:	01000274 	movhi	r4,9
   81474:	2107cb04 	addi	r4,r4,7980
   81478:	00830700 	call	83070 <printf>
		fflush(stdout);
   8147c:	d0a00217 	ldw	r2,-32760(gp)
   81480:	10800217 	ldw	r2,8(r2)
   81484:	1009883a 	mov	r4,r2
   81488:	0081bfc0 	call	81bfc <fflush>
		return 1;
   8148c:	00800044 	movi	r2,1
   81490:	00000106 	br	81498 <accept+0x160>
	}
	else return 0;
   81494:	0005883a 	mov	r2,zero
}
   81498:	e037883a 	mov	sp,fp
   8149c:	dfc00117 	ldw	ra,4(sp)
   814a0:	df000017 	ldw	fp,0(sp)
   814a4:	dec00204 	addi	sp,sp,8
   814a8:	f800283a 	ret

000814ac <recv>:

int recv(int device){
   814ac:	defffc04 	addi	sp,sp,-16
   814b0:	dfc00315 	stw	ra,12(sp)
   814b4:	df000215 	stw	fp,8(sp)
   814b8:	df000204 	addi	fp,sp,8
   814bc:	e13fff15 	stw	r4,-4(fp)
	unsigned char * recvData;
	//signed char * recvData;
	recvData = receive(device);
   814c0:	e13fff17 	ldw	r4,-4(fp)
   814c4:	00806b40 	call	806b4 <receive>
   814c8:	e0bffe15 	stw	r2,-8(fp)
	if(recvData[32]!= 0x02){
   814cc:	e0bffe17 	ldw	r2,-8(fp)
   814d0:	10800804 	addi	r2,r2,32
   814d4:	10800003 	ldbu	r2,0(r2)
   814d8:	10803fcc 	andi	r2,r2,255
   814dc:	108000a0 	cmpeqi	r2,r2,2
   814e0:	1000171e 	bne	r2,zero,81540 <recv+0x94>
		//Store Data
		//Send Ack
		pack->payload->syn[0] = 0x00;
   814e4:	d0a7f617 	ldw	r2,-24616(gp)
   814e8:	10800217 	ldw	r2,8(r2)
   814ec:	10000205 	stb	zero,8(r2)
		pack->payload->data[0] = 0x02;
   814f0:	d0a7f617 	ldw	r2,-24616(gp)
   814f4:	10800217 	ldw	r2,8(r2)
   814f8:	00c00084 	movi	r3,2
   814fc:	10c00305 	stb	r3,12(r2)
		transmit(device, pack);
   81500:	d0a7f617 	ldw	r2,-24616(gp)
   81504:	100b883a 	mov	r5,r2
   81508:	e13fff17 	ldw	r4,-4(fp)
   8150c:	00802900 	call	80290 <transmit>
		printf("Data Received: %x\n",recvData+32);
   81510:	e0bffe17 	ldw	r2,-8(fp)
   81514:	10800804 	addi	r2,r2,32
   81518:	100b883a 	mov	r5,r2
   8151c:	01000274 	movhi	r4,9
   81520:	2107d304 	addi	r4,r4,8012
   81524:	00830700 	call	83070 <printf>
		fflush(stdout);
   81528:	d0a00217 	ldw	r2,-32760(gp)
   8152c:	10800217 	ldw	r2,8(r2)
   81530:	1009883a 	mov	r4,r2
   81534:	0081bfc0 	call	81bfc <fflush>
		return 1;
   81538:	00800044 	movi	r2,1
   8153c:	00000306 	br	8154c <recv+0xa0>
	}
	else{
		printf("Ack received");
   81540:	01000274 	movhi	r4,9
   81544:	2107c204 	addi	r4,r4,7944
   81548:	00830700 	call	83070 <printf>
	}
}
   8154c:	e037883a 	mov	sp,fp
   81550:	dfc00117 	ldw	ra,4(sp)
   81554:	df000017 	ldw	fp,0(sp)
   81558:	dec00204 	addi	sp,sp,8
   8155c:	f800283a 	ret

00081560 <disconnect>:

int disconnect(int device){
   81560:	defffc04 	addi	sp,sp,-16
   81564:	dfc00315 	stw	ra,12(sp)
   81568:	df000215 	stw	fp,8(sp)
   8156c:	df000204 	addi	fp,sp,8
   81570:	e13fff15 	stw	r4,-4(fp)

	conn->fin[0] = 0x01;
   81574:	d0a7f017 	ldw	r2,-24640(gp)
   81578:	00c00044 	movi	r3,1
   8157c:	10c00285 	stb	r3,10(r2)
	sentPacket = pack;
   81580:	d0a7f617 	ldw	r2,-24616(gp)
   81584:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);
   81588:	d0a7f617 	ldw	r2,-24616(gp)
   8158c:	100b883a 	mov	r5,r2
   81590:	e13fff17 	ldw	r4,-4(fp)
   81594:	00802900 	call	80290 <transmit>

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81598:	00c00084 	movi	r3,2
   8159c:	00800434 	movhi	r2,16
   815a0:	10892004 	addi	r2,r2,9344
   815a4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
   815a8:	00eaaa94 	movui	r3,43690
   815ac:	00800434 	movhi	r2,16
   815b0:	10892204 	addi	r2,r2,9352
   815b4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
   815b8:	00ffffd4 	movui	r3,65535
   815bc:	00800434 	movhi	r2,16
   815c0:	10892304 	addi	r2,r2,9356
   815c4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   815c8:	00c00104 	movi	r3,4
   815cc:	00800434 	movhi	r2,16
   815d0:	10892104 	addi	r2,r2,9348
   815d4:	10c00035 	stwio	r3,0(r2)

	unsigned char * discon_temp;

	discon_temp = receive(device);
   815d8:	e13fff17 	ldw	r4,-4(fp)
   815dc:	00806b40 	call	806b4 <receive>
   815e0:	e0bffe15 	stw	r2,-8(fp)
	if(discon_temp[32]==0x02){
   815e4:	e0bffe17 	ldw	r2,-8(fp)
   815e8:	10800804 	addi	r2,r2,32
   815ec:	10800003 	ldbu	r2,0(r2)
   815f0:	10803fcc 	andi	r2,r2,255
   815f4:	10800098 	cmpnei	r2,r2,2
   815f8:	10000d1e 	bne	r2,zero,81630 <disconnect+0xd0>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   815fc:	00c00204 	movi	r3,8
   81600:	00800434 	movhi	r2,16
   81604:	10892104 	addi	r2,r2,9348
   81608:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   8160c:	00c00084 	movi	r3,2
   81610:	00800434 	movhi	r2,16
   81614:	10892004 	addi	r2,r2,9344
   81618:	10c00035 	stwio	r3,0(r2)
		printf("Disconnected");
   8161c:	01000274 	movhi	r4,9
   81620:	2107d804 	addi	r4,r4,8032
   81624:	00830700 	call	83070 <printf>
		return 1;
   81628:	00800044 	movi	r2,1
   8162c:	00000006 	br	81630 <disconnect+0xd0>
	}
}
   81630:	e037883a 	mov	sp,fp
   81634:	dfc00117 	ldw	ra,4(sp)
   81638:	df000017 	ldw	fp,0(sp)
   8163c:	dec00204 	addi	sp,sp,8
   81640:	f800283a 	ret

00081644 <recDisconnect>:

int recDisconnect(int device){
   81644:	defffc04 	addi	sp,sp,-16
   81648:	dfc00315 	stw	ra,12(sp)
   8164c:	df000215 	stw	fp,8(sp)
   81650:	df000204 	addi	fp,sp,8
   81654:	e13fff15 	stw	r4,-4(fp)
	unsigned char * dreq;
	dreq = receive(device);
   81658:	e13fff17 	ldw	r4,-4(fp)
   8165c:	00806b40 	call	806b4 <receive>
   81660:	e0bffe15 	stw	r2,-8(fp)
	if(dreq[29] == 0x01){
   81664:	e0bffe17 	ldw	r2,-8(fp)
   81668:	10800744 	addi	r2,r2,29
   8166c:	10800003 	ldbu	r2,0(r2)
   81670:	10803fcc 	andi	r2,r2,255
   81674:	10800058 	cmpnei	r2,r2,1
   81678:	1000091e 	bne	r2,zero,816a0 <recDisconnect+0x5c>
		//send ack
		conn->data[0] = 0x02;
   8167c:	d0a7f017 	ldw	r2,-24640(gp)
   81680:	00c00084 	movi	r3,2
   81684:	10c00305 	stb	r3,12(r2)
		transmit(device, pack);
   81688:	d0a7f617 	ldw	r2,-24616(gp)
   8168c:	100b883a 	mov	r5,r2
   81690:	e13fff17 	ldw	r4,-4(fp)
   81694:	00802900 	call	80290 <transmit>
		return 1;
   81698:	00800044 	movi	r2,1
   8169c:	00000006 	br	816a0 <recDisconnect+0x5c>
	}
}
   816a0:	e037883a 	mov	sp,fp
   816a4:	dfc00117 	ldw	ra,4(sp)
   816a8:	df000017 	ldw	fp,0(sp)
   816ac:	dec00204 	addi	sp,sp,8
   816b0:	f800283a 	ret

000816b4 <main>:


int main(void){
   816b4:	defff204 	addi	sp,sp,-56
   816b8:	dfc00d15 	stw	ra,52(sp)
   816bc:	df000c15 	stw	fp,48(sp)
   816c0:	df000c04 	addi	fp,sp,48
	//TODO:
	while(1){
		//sentPacket = (struct packet*)malloc(sizeof(struct packet));
		pack = (struct packet*)malloc(sizeof(struct packet));
   816c4:	01000304 	movi	r4,12
   816c8:	00825880 	call	82588 <malloc>
   816cc:	d0a7f615 	stw	r2,-24616(gp)
		conn = (struct segment*)malloc(sizeof(struct segment));
   816d0:	01000384 	movi	r4,14
   816d4:	00825880 	call	82588 <malloc>
   816d8:	d0a7f015 	stw	r2,-24640(gp)
		// IP addressed must be set here
		//int *array = malloc(10 * sizeof(int));
		unsigned char * IP1= malloc(4 * sizeof(unsigned char));
   816dc:	01000104 	movi	r4,4
   816e0:	00825880 	call	82588 <malloc>
   816e4:	e0bff715 	stw	r2,-36(fp)
		//{0xC0,0xA8,0x01,0x01};	//192.168.1.1  //new is 169.254.54.102
		IP1[0] = 0xA9;
   816e8:	e0bff717 	ldw	r2,-36(fp)
   816ec:	00ffea44 	movi	r3,-87
   816f0:	10c00005 	stb	r3,0(r2)
		IP1[1] = 0xFE;
   816f4:	e0bff717 	ldw	r2,-36(fp)
   816f8:	10800044 	addi	r2,r2,1
   816fc:	00ffff84 	movi	r3,-2
   81700:	10c00005 	stb	r3,0(r2)
		IP1[2] = 0x36;
   81704:	e0bff717 	ldw	r2,-36(fp)
   81708:	10800084 	addi	r2,r2,2
   8170c:	00c00d84 	movi	r3,54
   81710:	10c00005 	stb	r3,0(r2)
		IP1[3] = 0x66;
   81714:	e0bff717 	ldw	r2,-36(fp)
   81718:	108000c4 	addi	r2,r2,3
   8171c:	00c01984 	movi	r3,102
   81720:	10c00005 	stb	r3,0(r2)
		//{0xC0,0xA8,0x01,0x02}; 	//192.168.1.2
		unsigned char * IP2= malloc(4 * sizeof(unsigned char));
   81724:	01000104 	movi	r4,4
   81728:	00825880 	call	82588 <malloc>
   8172c:	e0bff815 	stw	r2,-32(fp)
		IP2[0] = 0xA9;
   81730:	e0bff817 	ldw	r2,-32(fp)
   81734:	00ffea44 	movi	r3,-87
   81738:	10c00005 	stb	r3,0(r2)
		IP2[1] = 0xFE;
   8173c:	e0bff817 	ldw	r2,-32(fp)
   81740:	10800044 	addi	r2,r2,1
   81744:	00ffff84 	movi	r3,-2
   81748:	10c00005 	stb	r3,0(r2)
		IP2[2] = 0x6F;
   8174c:	e0bff817 	ldw	r2,-32(fp)
   81750:	10800084 	addi	r2,r2,2
   81754:	00c01bc4 	movi	r3,111
   81758:	10c00005 	stb	r3,0(r2)
		IP2[3] = 0xEF;
   8175c:	e0bff817 	ldw	r2,-32(fp)
   81760:	108000c4 	addi	r2,r2,3
   81764:	00fffbc4 	movi	r3,-17
   81768:	10c00005 	stb	r3,0(r2)

		unsigned char * sPort = malloc(2 * sizeof(unsigned char)); //set aside spot for both port values
   8176c:	01000084 	movi	r4,2
   81770:	00825880 	call	82588 <malloc>
   81774:	e0bff915 	stw	r2,-28(fp)
		sPort[0] = 0x27;
   81778:	e0bff917 	ldw	r2,-28(fp)
   8177c:	00c009c4 	movi	r3,39
   81780:	10c00005 	stb	r3,0(r2)
		sPort[1] = 0x0F;			//9999
   81784:	e0bff917 	ldw	r2,-28(fp)
   81788:	10800044 	addi	r2,r2,1
   8178c:	00c003c4 	movi	r3,15
   81790:	10c00005 	stb	r3,0(r2)

		unsigned char * dPort = malloc(2 * sizeof(unsigned char));
   81794:	01000084 	movi	r4,2
   81798:	00825880 	call	82588 <malloc>
   8179c:	e0bffa15 	stw	r2,-24(fp)
		dPort[0] = 0x23;
   817a0:	e0bffa17 	ldw	r2,-24(fp)
   817a4:	00c008c4 	movi	r3,35
   817a8:	10c00005 	stb	r3,0(r2)
		dPort[1] = 0x82;			//9090
   817ac:	e0bffa17 	ldw	r2,-24(fp)
   817b0:	10800044 	addi	r2,r2,1
   817b4:	00ffe084 	movi	r3,-126
   817b8:	10c00005 	stb	r3,0(r2)

		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0000);
   817bc:	0007883a 	mov	r3,zero
   817c0:	00800434 	movhi	r2,16
   817c4:	10892104 	addi	r2,r2,9348
   817c8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0000);
   817cc:	0007883a 	mov	r3,zero
   817d0:	00800434 	movhi	r2,16
   817d4:	10892004 	addi	r2,r2,9344
   817d8:	10c00035 	stwio	r3,0(r2)

		buffer[0] = 0xAA;
   817dc:	00bfea84 	movi	r2,-86
   817e0:	d0a7f405 	stb	r2,-24624(gp)
		buffer[1] = 0xBB;
   817e4:	00bfeec4 	movi	r2,-69
   817e8:	d0a7f445 	stb	r2,-24623(gp)
		buffer[2] = 0xCC;
   817ec:	00bff304 	movi	r2,-52
   817f0:	d0a7f485 	stb	r2,-24622(gp)
		buffer[3] = 0xDD;
   817f4:	00bff744 	movi	r2,-35
   817f8:	d0a7f4c5 	stb	r2,-24621(gp)
		buffer[4] = 0xEE;
   817fc:	00bffb84 	movi	r2,-18
   81800:	d0a7f505 	stb	r2,-24620(gp)

		int transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   81804:	00800434 	movhi	r2,16
   81808:	10892804 	addi	r2,r2,9376
   8180c:	10800037 	ldwio	r2,0(r2)
   81810:	e0bffb15 	stw	r2,-20(fp)
		int isConnected = 0;
   81814:	e03ffc15 	stw	zero,-16(fp)
		printf("transmit is: %d\n", transmit);
   81818:	e17ffb17 	ldw	r5,-20(fp)
   8181c:	01000274 	movhi	r4,9
   81820:	2107dc04 	addi	r4,r4,8048
   81824:	00830700 	call	83070 <printf>

		if(transmit){
   81828:	e0bffb17 	ldw	r2,-20(fp)
   8182c:	10002926 	beq	r2,zero,818d4 <main+0x220>
			isConnected = connect(A,IP1, sPort, IP2, dPort);
   81830:	e0bffa17 	ldw	r2,-24(fp)
   81834:	d8800015 	stw	r2,0(sp)
   81838:	e1fff817 	ldw	r7,-32(fp)
   8183c:	e1bff917 	ldw	r6,-28(fp)
   81840:	e17ff717 	ldw	r5,-36(fp)
   81844:	0009883a 	mov	r4,zero
   81848:	0080fac0 	call	80fac <connect>
   8184c:	e0bffc15 	stw	r2,-16(fp)
			if(isConnected){
   81850:	e0bffc17 	ldw	r2,-16(fp)
   81854:	103f9b26 	beq	r2,zero,816c4 <rx_descriptor_end+0xfff81664>
				int j = 0;
   81858:	e03ff515 	stw	zero,-44(fp)
				while(j < 5){
   8185c:	00001706 	br	818bc <main+0x208>
					int sent = 0;
   81860:	e03fff15 	stw	zero,-4(fp)
					sent = send(A, buffer[j]);
   81864:	e0fff517 	ldw	r3,-44(fp)
   81868:	d0a7f404 	addi	r2,gp,-24624
   8186c:	1885883a 	add	r2,r3,r2
   81870:	10800003 	ldbu	r2,0(r2)
   81874:	10803fcc 	andi	r2,r2,255
   81878:	100b883a 	mov	r5,r2
   8187c:	0009883a 	mov	r4,zero
   81880:	00811c80 	call	811c8 <send>
   81884:	e0bfff15 	stw	r2,-4(fp)
					if(sent){
   81888:	e0bfff17 	ldw	r2,-4(fp)
   8188c:	10000426 	beq	r2,zero,818a0 <main+0x1ec>
						j++;
   81890:	e0bff517 	ldw	r2,-44(fp)
   81894:	10800044 	addi	r2,r2,1
   81898:	e0bff515 	stw	r2,-44(fp)
   8189c:	00000706 	br	818bc <main+0x208>
					}
					else {
						printf("ACK NOT RECEIVED");
   818a0:	01000274 	movhi	r4,9
   818a4:	2107e104 	addi	r4,r4,8068
   818a8:	00830700 	call	83070 <printf>
						fflush(stdout);
   818ac:	d0a00217 	ldw	r2,-32760(gp)
   818b0:	10800217 	ldw	r2,8(r2)
   818b4:	1009883a 	mov	r4,r2
   818b8:	0081bfc0 	call	81bfc <fflush>

		if(transmit){
			isConnected = connect(A,IP1, sPort, IP2, dPort);
			if(isConnected){
				int j = 0;
				while(j < 5){
   818bc:	e0bff517 	ldw	r2,-44(fp)
   818c0:	10800150 	cmplti	r2,r2,5
   818c4:	103fe61e 	bne	r2,zero,81860 <rx_descriptor_end+0xfff81800>
						printf("ACK NOT RECEIVED");
						fflush(stdout);
					}

				}
				disconnect(A);
   818c8:	0009883a 	mov	r4,zero
   818cc:	00815600 	call	81560 <disconnect>
   818d0:	003f7c06 	br	816c4 <rx_descriptor_end+0xfff81664>
			}
		}
		else {
			int conn = accept(B);
   818d4:	01000044 	movi	r4,1
   818d8:	00813380 	call	81338 <accept>
   818dc:	e0bffd15 	stw	r2,-12(fp)
			if(conn){
   818e0:	e0bffd17 	ldw	r2,-12(fp)
   818e4:	10001f26 	beq	r2,zero,81964 <main+0x2b0>
				printf("Connection Successful");
   818e8:	01000274 	movhi	r4,9
   818ec:	2107e604 	addi	r4,r4,8088
   818f0:	00830700 	call	83070 <printf>
				fflush(stdout);
   818f4:	d0a00217 	ldw	r2,-32760(gp)
   818f8:	10800217 	ldw	r2,8(r2)
   818fc:	1009883a 	mov	r4,r2
   81900:	0081bfc0 	call	81bfc <fflush>
				printf("Receiving data");
   81904:	01000274 	movhi	r4,9
   81908:	2107ec04 	addi	r4,r4,8112
   8190c:	00830700 	call	83070 <printf>
				fflush(stdout);
   81910:	d0a00217 	ldw	r2,-32760(gp)
   81914:	10800217 	ldw	r2,8(r2)
   81918:	1009883a 	mov	r4,r2
   8191c:	0081bfc0 	call	81bfc <fflush>
				int k = 0;
   81920:	e03ff615 	stw	zero,-40(fp)
				while(k < 5){
   81924:	00000906 	br	8194c <main+0x298>
					int rec = 0;
   81928:	e03ffe15 	stw	zero,-8(fp)
					rec = recv(B);
   8192c:	01000044 	movi	r4,1
   81930:	00814ac0 	call	814ac <recv>
   81934:	e0bffe15 	stw	r2,-8(fp)
					if(rec){
   81938:	e0bffe17 	ldw	r2,-8(fp)
   8193c:	10000326 	beq	r2,zero,8194c <main+0x298>
						k++;
   81940:	e0bff617 	ldw	r2,-40(fp)
   81944:	10800044 	addi	r2,r2,1
   81948:	e0bff615 	stw	r2,-40(fp)
				printf("Connection Successful");
				fflush(stdout);
				printf("Receiving data");
				fflush(stdout);
				int k = 0;
				while(k < 5){
   8194c:	e0bff617 	ldw	r2,-40(fp)
   81950:	10800150 	cmplti	r2,r2,5
   81954:	103ff41e 	bne	r2,zero,81928 <rx_descriptor_end+0xfff818c8>
					rec = recv(B);
					if(rec){
						k++;
					}
				}
				recDisconnect(B);
   81958:	01000044 	movi	r4,1
   8195c:	00816440 	call	81644 <recDisconnect>
   81960:	003f5806 	br	816c4 <rx_descriptor_end+0xfff81664>
			}
			else{
				printf("Connection Failed at Receiver");
   81964:	01000274 	movhi	r4,9
   81968:	2107f004 	addi	r4,r4,8128
   8196c:	00830700 	call	83070 <printf>
				fflush(stdout);
   81970:	d0a00217 	ldw	r2,-32760(gp)
   81974:	10800217 	ldw	r2,8(r2)
   81978:	1009883a 	mov	r4,r2
   8197c:	0081bfc0 	call	81bfc <fflush>
			}
		}
	}
   81980:	003f5006 	br	816c4 <rx_descriptor_end+0xfff81664>

00081984 <__sflush_r>:
   81984:	2880030b 	ldhu	r2,12(r5)
   81988:	defffb04 	addi	sp,sp,-20
   8198c:	dcc00315 	stw	r19,12(sp)
   81990:	dc400115 	stw	r17,4(sp)
   81994:	dfc00415 	stw	ra,16(sp)
   81998:	dc800215 	stw	r18,8(sp)
   8199c:	dc000015 	stw	r16,0(sp)
   819a0:	10c0020c 	andi	r3,r2,8
   819a4:	2823883a 	mov	r17,r5
   819a8:	2027883a 	mov	r19,r4
   819ac:	1800311e 	bne	r3,zero,81a74 <__sflush_r+0xf0>
   819b0:	28c00117 	ldw	r3,4(r5)
   819b4:	10820014 	ori	r2,r2,2048
   819b8:	2880030d 	sth	r2,12(r5)
   819bc:	00c04b0e 	bge	zero,r3,81aec <__sflush_r+0x168>
   819c0:	8a000a17 	ldw	r8,40(r17)
   819c4:	40002326 	beq	r8,zero,81a54 <__sflush_r+0xd0>
   819c8:	9c000017 	ldw	r16,0(r19)
   819cc:	10c4000c 	andi	r3,r2,4096
   819d0:	98000015 	stw	zero,0(r19)
   819d4:	18004826 	beq	r3,zero,81af8 <__sflush_r+0x174>
   819d8:	89801417 	ldw	r6,80(r17)
   819dc:	10c0010c 	andi	r3,r2,4
   819e0:	18000626 	beq	r3,zero,819fc <__sflush_r+0x78>
   819e4:	88c00117 	ldw	r3,4(r17)
   819e8:	88800c17 	ldw	r2,48(r17)
   819ec:	30cdc83a 	sub	r6,r6,r3
   819f0:	10000226 	beq	r2,zero,819fc <__sflush_r+0x78>
   819f4:	88800f17 	ldw	r2,60(r17)
   819f8:	308dc83a 	sub	r6,r6,r2
   819fc:	89400717 	ldw	r5,28(r17)
   81a00:	000f883a 	mov	r7,zero
   81a04:	9809883a 	mov	r4,r19
   81a08:	403ee83a 	callr	r8
   81a0c:	00ffffc4 	movi	r3,-1
   81a10:	10c04426 	beq	r2,r3,81b24 <__sflush_r+0x1a0>
   81a14:	88c0030b 	ldhu	r3,12(r17)
   81a18:	89000417 	ldw	r4,16(r17)
   81a1c:	88000115 	stw	zero,4(r17)
   81a20:	197dffcc 	andi	r5,r3,63487
   81a24:	8940030d 	sth	r5,12(r17)
   81a28:	89000015 	stw	r4,0(r17)
   81a2c:	18c4000c 	andi	r3,r3,4096
   81a30:	18002c1e 	bne	r3,zero,81ae4 <__sflush_r+0x160>
   81a34:	89400c17 	ldw	r5,48(r17)
   81a38:	9c000015 	stw	r16,0(r19)
   81a3c:	28000526 	beq	r5,zero,81a54 <__sflush_r+0xd0>
   81a40:	88801004 	addi	r2,r17,64
   81a44:	28800226 	beq	r5,r2,81a50 <__sflush_r+0xcc>
   81a48:	9809883a 	mov	r4,r19
   81a4c:	00820f00 	call	820f0 <_free_r>
   81a50:	88000c15 	stw	zero,48(r17)
   81a54:	0005883a 	mov	r2,zero
   81a58:	dfc00417 	ldw	ra,16(sp)
   81a5c:	dcc00317 	ldw	r19,12(sp)
   81a60:	dc800217 	ldw	r18,8(sp)
   81a64:	dc400117 	ldw	r17,4(sp)
   81a68:	dc000017 	ldw	r16,0(sp)
   81a6c:	dec00504 	addi	sp,sp,20
   81a70:	f800283a 	ret
   81a74:	2c800417 	ldw	r18,16(r5)
   81a78:	903ff626 	beq	r18,zero,81a54 <rx_descriptor_end+0xfff819f4>
   81a7c:	2c000017 	ldw	r16,0(r5)
   81a80:	108000cc 	andi	r2,r2,3
   81a84:	2c800015 	stw	r18,0(r5)
   81a88:	84a1c83a 	sub	r16,r16,r18
   81a8c:	1000131e 	bne	r2,zero,81adc <__sflush_r+0x158>
   81a90:	28800517 	ldw	r2,20(r5)
   81a94:	88800215 	stw	r2,8(r17)
   81a98:	04000316 	blt	zero,r16,81aa8 <__sflush_r+0x124>
   81a9c:	003fed06 	br	81a54 <rx_descriptor_end+0xfff819f4>
   81aa0:	90a5883a 	add	r18,r18,r2
   81aa4:	043feb0e 	bge	zero,r16,81a54 <rx_descriptor_end+0xfff819f4>
   81aa8:	88800917 	ldw	r2,36(r17)
   81aac:	89400717 	ldw	r5,28(r17)
   81ab0:	800f883a 	mov	r7,r16
   81ab4:	900d883a 	mov	r6,r18
   81ab8:	9809883a 	mov	r4,r19
   81abc:	103ee83a 	callr	r2
   81ac0:	80a1c83a 	sub	r16,r16,r2
   81ac4:	00bff616 	blt	zero,r2,81aa0 <rx_descriptor_end+0xfff81a40>
   81ac8:	88c0030b 	ldhu	r3,12(r17)
   81acc:	00bfffc4 	movi	r2,-1
   81ad0:	18c01014 	ori	r3,r3,64
   81ad4:	88c0030d 	sth	r3,12(r17)
   81ad8:	003fdf06 	br	81a58 <rx_descriptor_end+0xfff819f8>
   81adc:	0005883a 	mov	r2,zero
   81ae0:	003fec06 	br	81a94 <rx_descriptor_end+0xfff81a34>
   81ae4:	88801415 	stw	r2,80(r17)
   81ae8:	003fd206 	br	81a34 <rx_descriptor_end+0xfff819d4>
   81aec:	28c00f17 	ldw	r3,60(r5)
   81af0:	00ffb316 	blt	zero,r3,819c0 <rx_descriptor_end+0xfff81960>
   81af4:	003fd706 	br	81a54 <rx_descriptor_end+0xfff819f4>
   81af8:	89400717 	ldw	r5,28(r17)
   81afc:	000d883a 	mov	r6,zero
   81b00:	01c00044 	movi	r7,1
   81b04:	9809883a 	mov	r4,r19
   81b08:	403ee83a 	callr	r8
   81b0c:	100d883a 	mov	r6,r2
   81b10:	00bfffc4 	movi	r2,-1
   81b14:	30801426 	beq	r6,r2,81b68 <__sflush_r+0x1e4>
   81b18:	8880030b 	ldhu	r2,12(r17)
   81b1c:	8a000a17 	ldw	r8,40(r17)
   81b20:	003fae06 	br	819dc <rx_descriptor_end+0xfff8197c>
   81b24:	98c00017 	ldw	r3,0(r19)
   81b28:	183fba26 	beq	r3,zero,81a14 <rx_descriptor_end+0xfff819b4>
   81b2c:	01000744 	movi	r4,29
   81b30:	19000626 	beq	r3,r4,81b4c <__sflush_r+0x1c8>
   81b34:	01000584 	movi	r4,22
   81b38:	19000426 	beq	r3,r4,81b4c <__sflush_r+0x1c8>
   81b3c:	88c0030b 	ldhu	r3,12(r17)
   81b40:	18c01014 	ori	r3,r3,64
   81b44:	88c0030d 	sth	r3,12(r17)
   81b48:	003fc306 	br	81a58 <rx_descriptor_end+0xfff819f8>
   81b4c:	8880030b 	ldhu	r2,12(r17)
   81b50:	88c00417 	ldw	r3,16(r17)
   81b54:	88000115 	stw	zero,4(r17)
   81b58:	10bdffcc 	andi	r2,r2,63487
   81b5c:	8880030d 	sth	r2,12(r17)
   81b60:	88c00015 	stw	r3,0(r17)
   81b64:	003fb306 	br	81a34 <rx_descriptor_end+0xfff819d4>
   81b68:	98800017 	ldw	r2,0(r19)
   81b6c:	103fea26 	beq	r2,zero,81b18 <rx_descriptor_end+0xfff81ab8>
   81b70:	00c00744 	movi	r3,29
   81b74:	10c00226 	beq	r2,r3,81b80 <__sflush_r+0x1fc>
   81b78:	00c00584 	movi	r3,22
   81b7c:	10c0031e 	bne	r2,r3,81b8c <__sflush_r+0x208>
   81b80:	9c000015 	stw	r16,0(r19)
   81b84:	0005883a 	mov	r2,zero
   81b88:	003fb306 	br	81a58 <rx_descriptor_end+0xfff819f8>
   81b8c:	88c0030b 	ldhu	r3,12(r17)
   81b90:	3005883a 	mov	r2,r6
   81b94:	18c01014 	ori	r3,r3,64
   81b98:	88c0030d 	sth	r3,12(r17)
   81b9c:	003fae06 	br	81a58 <rx_descriptor_end+0xfff819f8>

00081ba0 <_fflush_r>:
   81ba0:	defffd04 	addi	sp,sp,-12
   81ba4:	dc000115 	stw	r16,4(sp)
   81ba8:	dfc00215 	stw	ra,8(sp)
   81bac:	2021883a 	mov	r16,r4
   81bb0:	20000226 	beq	r4,zero,81bbc <_fflush_r+0x1c>
   81bb4:	20800e17 	ldw	r2,56(r4)
   81bb8:	10000c26 	beq	r2,zero,81bec <_fflush_r+0x4c>
   81bbc:	2880030f 	ldh	r2,12(r5)
   81bc0:	1000051e 	bne	r2,zero,81bd8 <_fflush_r+0x38>
   81bc4:	0005883a 	mov	r2,zero
   81bc8:	dfc00217 	ldw	ra,8(sp)
   81bcc:	dc000117 	ldw	r16,4(sp)
   81bd0:	dec00304 	addi	sp,sp,12
   81bd4:	f800283a 	ret
   81bd8:	8009883a 	mov	r4,r16
   81bdc:	dfc00217 	ldw	ra,8(sp)
   81be0:	dc000117 	ldw	r16,4(sp)
   81be4:	dec00304 	addi	sp,sp,12
   81be8:	00819841 	jmpi	81984 <__sflush_r>
   81bec:	d9400015 	stw	r5,0(sp)
   81bf0:	0081f7c0 	call	81f7c <__sinit>
   81bf4:	d9400017 	ldw	r5,0(sp)
   81bf8:	003ff006 	br	81bbc <rx_descriptor_end+0xfff81b5c>

00081bfc <fflush>:
   81bfc:	20000526 	beq	r4,zero,81c14 <fflush+0x18>
   81c00:	00800274 	movhi	r2,9
   81c04:	10908204 	addi	r2,r2,16904
   81c08:	200b883a 	mov	r5,r4
   81c0c:	11000017 	ldw	r4,0(r2)
   81c10:	0081ba01 	jmpi	81ba0 <_fflush_r>
   81c14:	00800274 	movhi	r2,9
   81c18:	10908104 	addi	r2,r2,16900
   81c1c:	11000017 	ldw	r4,0(r2)
   81c20:	01400234 	movhi	r5,8
   81c24:	2946e804 	addi	r5,r5,7072
   81c28:	00824c41 	jmpi	824c4 <_fwalk_reent>

00081c2c <__fp_unlock>:
   81c2c:	0005883a 	mov	r2,zero
   81c30:	f800283a 	ret

00081c34 <_cleanup_r>:
   81c34:	01400234 	movhi	r5,8
   81c38:	295be704 	addi	r5,r5,28572
   81c3c:	00824c41 	jmpi	824c4 <_fwalk_reent>

00081c40 <__sinit.part.1>:
   81c40:	defff704 	addi	sp,sp,-36
   81c44:	00c00234 	movhi	r3,8
   81c48:	dfc00815 	stw	ra,32(sp)
   81c4c:	ddc00715 	stw	r23,28(sp)
   81c50:	dd800615 	stw	r22,24(sp)
   81c54:	dd400515 	stw	r21,20(sp)
   81c58:	dd000415 	stw	r20,16(sp)
   81c5c:	dcc00315 	stw	r19,12(sp)
   81c60:	dc800215 	stw	r18,8(sp)
   81c64:	dc400115 	stw	r17,4(sp)
   81c68:	dc000015 	stw	r16,0(sp)
   81c6c:	18c70d04 	addi	r3,r3,7220
   81c70:	24000117 	ldw	r16,4(r4)
   81c74:	20c00f15 	stw	r3,60(r4)
   81c78:	2080bb04 	addi	r2,r4,748
   81c7c:	00c000c4 	movi	r3,3
   81c80:	20c0b915 	stw	r3,740(r4)
   81c84:	2080ba15 	stw	r2,744(r4)
   81c88:	2000b815 	stw	zero,736(r4)
   81c8c:	05c00204 	movi	r23,8
   81c90:	00800104 	movi	r2,4
   81c94:	2025883a 	mov	r18,r4
   81c98:	b80d883a 	mov	r6,r23
   81c9c:	81001704 	addi	r4,r16,92
   81ca0:	000b883a 	mov	r5,zero
   81ca4:	80000015 	stw	zero,0(r16)
   81ca8:	80000115 	stw	zero,4(r16)
   81cac:	80000215 	stw	zero,8(r16)
   81cb0:	8080030d 	sth	r2,12(r16)
   81cb4:	80001915 	stw	zero,100(r16)
   81cb8:	8000038d 	sth	zero,14(r16)
   81cbc:	80000415 	stw	zero,16(r16)
   81cc0:	80000515 	stw	zero,20(r16)
   81cc4:	80000615 	stw	zero,24(r16)
   81cc8:	0082f180 	call	82f18 <memset>
   81ccc:	05800234 	movhi	r22,8
   81cd0:	94400217 	ldw	r17,8(r18)
   81cd4:	05400234 	movhi	r21,8
   81cd8:	05000234 	movhi	r20,8
   81cdc:	04c00234 	movhi	r19,8
   81ce0:	b58c4004 	addi	r22,r22,12544
   81ce4:	ad4c5704 	addi	r21,r21,12636
   81ce8:	a50c7604 	addi	r20,r20,12760
   81cec:	9ccc8d04 	addi	r19,r19,12852
   81cf0:	85800815 	stw	r22,32(r16)
   81cf4:	85400915 	stw	r21,36(r16)
   81cf8:	85000a15 	stw	r20,40(r16)
   81cfc:	84c00b15 	stw	r19,44(r16)
   81d00:	84000715 	stw	r16,28(r16)
   81d04:	00800284 	movi	r2,10
   81d08:	8880030d 	sth	r2,12(r17)
   81d0c:	00800044 	movi	r2,1
   81d10:	b80d883a 	mov	r6,r23
   81d14:	89001704 	addi	r4,r17,92
   81d18:	000b883a 	mov	r5,zero
   81d1c:	88000015 	stw	zero,0(r17)
   81d20:	88000115 	stw	zero,4(r17)
   81d24:	88000215 	stw	zero,8(r17)
   81d28:	88001915 	stw	zero,100(r17)
   81d2c:	8880038d 	sth	r2,14(r17)
   81d30:	88000415 	stw	zero,16(r17)
   81d34:	88000515 	stw	zero,20(r17)
   81d38:	88000615 	stw	zero,24(r17)
   81d3c:	0082f180 	call	82f18 <memset>
   81d40:	94000317 	ldw	r16,12(r18)
   81d44:	00800484 	movi	r2,18
   81d48:	8c400715 	stw	r17,28(r17)
   81d4c:	8d800815 	stw	r22,32(r17)
   81d50:	8d400915 	stw	r21,36(r17)
   81d54:	8d000a15 	stw	r20,40(r17)
   81d58:	8cc00b15 	stw	r19,44(r17)
   81d5c:	8080030d 	sth	r2,12(r16)
   81d60:	00800084 	movi	r2,2
   81d64:	80000015 	stw	zero,0(r16)
   81d68:	80000115 	stw	zero,4(r16)
   81d6c:	80000215 	stw	zero,8(r16)
   81d70:	80001915 	stw	zero,100(r16)
   81d74:	8080038d 	sth	r2,14(r16)
   81d78:	80000415 	stw	zero,16(r16)
   81d7c:	80000515 	stw	zero,20(r16)
   81d80:	80000615 	stw	zero,24(r16)
   81d84:	b80d883a 	mov	r6,r23
   81d88:	000b883a 	mov	r5,zero
   81d8c:	81001704 	addi	r4,r16,92
   81d90:	0082f180 	call	82f18 <memset>
   81d94:	00800044 	movi	r2,1
   81d98:	84000715 	stw	r16,28(r16)
   81d9c:	85800815 	stw	r22,32(r16)
   81da0:	85400915 	stw	r21,36(r16)
   81da4:	85000a15 	stw	r20,40(r16)
   81da8:	84c00b15 	stw	r19,44(r16)
   81dac:	90800e15 	stw	r2,56(r18)
   81db0:	dfc00817 	ldw	ra,32(sp)
   81db4:	ddc00717 	ldw	r23,28(sp)
   81db8:	dd800617 	ldw	r22,24(sp)
   81dbc:	dd400517 	ldw	r21,20(sp)
   81dc0:	dd000417 	ldw	r20,16(sp)
   81dc4:	dcc00317 	ldw	r19,12(sp)
   81dc8:	dc800217 	ldw	r18,8(sp)
   81dcc:	dc400117 	ldw	r17,4(sp)
   81dd0:	dc000017 	ldw	r16,0(sp)
   81dd4:	dec00904 	addi	sp,sp,36
   81dd8:	f800283a 	ret

00081ddc <__fp_lock>:
   81ddc:	0005883a 	mov	r2,zero
   81de0:	f800283a 	ret

00081de4 <__sfmoreglue>:
   81de4:	defffc04 	addi	sp,sp,-16
   81de8:	dc400115 	stw	r17,4(sp)
   81dec:	2c7fffc4 	addi	r17,r5,-1
   81df0:	8c401a24 	muli	r17,r17,104
   81df4:	dc800215 	stw	r18,8(sp)
   81df8:	2825883a 	mov	r18,r5
   81dfc:	89401d04 	addi	r5,r17,116
   81e00:	dc000015 	stw	r16,0(sp)
   81e04:	dfc00315 	stw	ra,12(sp)
   81e08:	00825b00 	call	825b0 <_malloc_r>
   81e0c:	1021883a 	mov	r16,r2
   81e10:	10000726 	beq	r2,zero,81e30 <__sfmoreglue+0x4c>
   81e14:	11000304 	addi	r4,r2,12
   81e18:	10000015 	stw	zero,0(r2)
   81e1c:	14800115 	stw	r18,4(r2)
   81e20:	11000215 	stw	r4,8(r2)
   81e24:	89801a04 	addi	r6,r17,104
   81e28:	000b883a 	mov	r5,zero
   81e2c:	0082f180 	call	82f18 <memset>
   81e30:	8005883a 	mov	r2,r16
   81e34:	dfc00317 	ldw	ra,12(sp)
   81e38:	dc800217 	ldw	r18,8(sp)
   81e3c:	dc400117 	ldw	r17,4(sp)
   81e40:	dc000017 	ldw	r16,0(sp)
   81e44:	dec00404 	addi	sp,sp,16
   81e48:	f800283a 	ret

00081e4c <__sfp>:
   81e4c:	defffb04 	addi	sp,sp,-20
   81e50:	dc000015 	stw	r16,0(sp)
   81e54:	04000274 	movhi	r16,9
   81e58:	84108104 	addi	r16,r16,16900
   81e5c:	dcc00315 	stw	r19,12(sp)
   81e60:	2027883a 	mov	r19,r4
   81e64:	81000017 	ldw	r4,0(r16)
   81e68:	dfc00415 	stw	ra,16(sp)
   81e6c:	dc800215 	stw	r18,8(sp)
   81e70:	20800e17 	ldw	r2,56(r4)
   81e74:	dc400115 	stw	r17,4(sp)
   81e78:	1000021e 	bne	r2,zero,81e84 <__sfp+0x38>
   81e7c:	0081c400 	call	81c40 <__sinit.part.1>
   81e80:	81000017 	ldw	r4,0(r16)
   81e84:	2480b804 	addi	r18,r4,736
   81e88:	047fffc4 	movi	r17,-1
   81e8c:	91000117 	ldw	r4,4(r18)
   81e90:	94000217 	ldw	r16,8(r18)
   81e94:	213fffc4 	addi	r4,r4,-1
   81e98:	20000a16 	blt	r4,zero,81ec4 <__sfp+0x78>
   81e9c:	8080030f 	ldh	r2,12(r16)
   81ea0:	10000c26 	beq	r2,zero,81ed4 <__sfp+0x88>
   81ea4:	80c01d04 	addi	r3,r16,116
   81ea8:	00000206 	br	81eb4 <__sfp+0x68>
   81eac:	18bfe60f 	ldh	r2,-104(r3)
   81eb0:	10000826 	beq	r2,zero,81ed4 <__sfp+0x88>
   81eb4:	213fffc4 	addi	r4,r4,-1
   81eb8:	1c3ffd04 	addi	r16,r3,-12
   81ebc:	18c01a04 	addi	r3,r3,104
   81ec0:	247ffa1e 	bne	r4,r17,81eac <rx_descriptor_end+0xfff81e4c>
   81ec4:	90800017 	ldw	r2,0(r18)
   81ec8:	10001d26 	beq	r2,zero,81f40 <__sfp+0xf4>
   81ecc:	1025883a 	mov	r18,r2
   81ed0:	003fee06 	br	81e8c <rx_descriptor_end+0xfff81e2c>
   81ed4:	00bfffc4 	movi	r2,-1
   81ed8:	8080038d 	sth	r2,14(r16)
   81edc:	00800044 	movi	r2,1
   81ee0:	8080030d 	sth	r2,12(r16)
   81ee4:	80001915 	stw	zero,100(r16)
   81ee8:	80000015 	stw	zero,0(r16)
   81eec:	80000215 	stw	zero,8(r16)
   81ef0:	80000115 	stw	zero,4(r16)
   81ef4:	80000415 	stw	zero,16(r16)
   81ef8:	80000515 	stw	zero,20(r16)
   81efc:	80000615 	stw	zero,24(r16)
   81f00:	01800204 	movi	r6,8
   81f04:	000b883a 	mov	r5,zero
   81f08:	81001704 	addi	r4,r16,92
   81f0c:	0082f180 	call	82f18 <memset>
   81f10:	8005883a 	mov	r2,r16
   81f14:	80000c15 	stw	zero,48(r16)
   81f18:	80000d15 	stw	zero,52(r16)
   81f1c:	80001115 	stw	zero,68(r16)
   81f20:	80001215 	stw	zero,72(r16)
   81f24:	dfc00417 	ldw	ra,16(sp)
   81f28:	dcc00317 	ldw	r19,12(sp)
   81f2c:	dc800217 	ldw	r18,8(sp)
   81f30:	dc400117 	ldw	r17,4(sp)
   81f34:	dc000017 	ldw	r16,0(sp)
   81f38:	dec00504 	addi	sp,sp,20
   81f3c:	f800283a 	ret
   81f40:	01400104 	movi	r5,4
   81f44:	9809883a 	mov	r4,r19
   81f48:	0081de40 	call	81de4 <__sfmoreglue>
   81f4c:	90800015 	stw	r2,0(r18)
   81f50:	103fde1e 	bne	r2,zero,81ecc <rx_descriptor_end+0xfff81e6c>
   81f54:	00800304 	movi	r2,12
   81f58:	98800015 	stw	r2,0(r19)
   81f5c:	0005883a 	mov	r2,zero
   81f60:	003ff006 	br	81f24 <rx_descriptor_end+0xfff81ec4>

00081f64 <_cleanup>:
   81f64:	00800274 	movhi	r2,9
   81f68:	10908104 	addi	r2,r2,16900
   81f6c:	11000017 	ldw	r4,0(r2)
   81f70:	01400234 	movhi	r5,8
   81f74:	295be704 	addi	r5,r5,28572
   81f78:	00824c41 	jmpi	824c4 <_fwalk_reent>

00081f7c <__sinit>:
   81f7c:	20800e17 	ldw	r2,56(r4)
   81f80:	10000126 	beq	r2,zero,81f88 <__sinit+0xc>
   81f84:	f800283a 	ret
   81f88:	0081c401 	jmpi	81c40 <__sinit.part.1>

00081f8c <__sfp_lock_acquire>:
   81f8c:	f800283a 	ret

00081f90 <__sfp_lock_release>:
   81f90:	f800283a 	ret

00081f94 <__sinit_lock_acquire>:
   81f94:	f800283a 	ret

00081f98 <__sinit_lock_release>:
   81f98:	f800283a 	ret

00081f9c <__fp_lock_all>:
   81f9c:	00800274 	movhi	r2,9
   81fa0:	10908204 	addi	r2,r2,16904
   81fa4:	11000017 	ldw	r4,0(r2)
   81fa8:	01400234 	movhi	r5,8
   81fac:	29477704 	addi	r5,r5,7644
   81fb0:	00824001 	jmpi	82400 <_fwalk>

00081fb4 <__fp_unlock_all>:
   81fb4:	00800274 	movhi	r2,9
   81fb8:	10908204 	addi	r2,r2,16904
   81fbc:	11000017 	ldw	r4,0(r2)
   81fc0:	01400234 	movhi	r5,8
   81fc4:	29470b04 	addi	r5,r5,7212
   81fc8:	00824001 	jmpi	82400 <_fwalk>

00081fcc <_malloc_trim_r>:
   81fcc:	defffb04 	addi	sp,sp,-20
   81fd0:	dcc00315 	stw	r19,12(sp)
   81fd4:	04c00274 	movhi	r19,9
   81fd8:	dc800215 	stw	r18,8(sp)
   81fdc:	dc400115 	stw	r17,4(sp)
   81fe0:	dc000015 	stw	r16,0(sp)
   81fe4:	dfc00415 	stw	ra,16(sp)
   81fe8:	2821883a 	mov	r16,r5
   81fec:	9ccac604 	addi	r19,r19,11032
   81ff0:	2025883a 	mov	r18,r4
   81ff4:	008e7bc0 	call	8e7bc <__malloc_lock>
   81ff8:	98800217 	ldw	r2,8(r19)
   81ffc:	14400117 	ldw	r17,4(r2)
   82000:	00bfff04 	movi	r2,-4
   82004:	88a2703a 	and	r17,r17,r2
   82008:	8c21c83a 	sub	r16,r17,r16
   8200c:	8403fbc4 	addi	r16,r16,4079
   82010:	8020d33a 	srli	r16,r16,12
   82014:	0083ffc4 	movi	r2,4095
   82018:	843fffc4 	addi	r16,r16,-1
   8201c:	8020933a 	slli	r16,r16,12
   82020:	1400060e 	bge	r2,r16,8203c <_malloc_trim_r+0x70>
   82024:	000b883a 	mov	r5,zero
   82028:	9009883a 	mov	r4,r18
   8202c:	00830ac0 	call	830ac <_sbrk_r>
   82030:	98c00217 	ldw	r3,8(r19)
   82034:	1c47883a 	add	r3,r3,r17
   82038:	10c00a26 	beq	r2,r3,82064 <_malloc_trim_r+0x98>
   8203c:	9009883a 	mov	r4,r18
   82040:	008e7e00 	call	8e7e0 <__malloc_unlock>
   82044:	0005883a 	mov	r2,zero
   82048:	dfc00417 	ldw	ra,16(sp)
   8204c:	dcc00317 	ldw	r19,12(sp)
   82050:	dc800217 	ldw	r18,8(sp)
   82054:	dc400117 	ldw	r17,4(sp)
   82058:	dc000017 	ldw	r16,0(sp)
   8205c:	dec00504 	addi	sp,sp,20
   82060:	f800283a 	ret
   82064:	040bc83a 	sub	r5,zero,r16
   82068:	9009883a 	mov	r4,r18
   8206c:	00830ac0 	call	830ac <_sbrk_r>
   82070:	00ffffc4 	movi	r3,-1
   82074:	10c00d26 	beq	r2,r3,820ac <_malloc_trim_r+0xe0>
   82078:	00c00274 	movhi	r3,9
   8207c:	18d98504 	addi	r3,r3,26132
   82080:	18800017 	ldw	r2,0(r3)
   82084:	99000217 	ldw	r4,8(r19)
   82088:	8c23c83a 	sub	r17,r17,r16
   8208c:	8c400054 	ori	r17,r17,1
   82090:	1421c83a 	sub	r16,r2,r16
   82094:	24400115 	stw	r17,4(r4)
   82098:	9009883a 	mov	r4,r18
   8209c:	1c000015 	stw	r16,0(r3)
   820a0:	008e7e00 	call	8e7e0 <__malloc_unlock>
   820a4:	00800044 	movi	r2,1
   820a8:	003fe706 	br	82048 <rx_descriptor_end+0xfff81fe8>
   820ac:	000b883a 	mov	r5,zero
   820b0:	9009883a 	mov	r4,r18
   820b4:	00830ac0 	call	830ac <_sbrk_r>
   820b8:	99000217 	ldw	r4,8(r19)
   820bc:	014003c4 	movi	r5,15
   820c0:	1107c83a 	sub	r3,r2,r4
   820c4:	28ffdd0e 	bge	r5,r3,8203c <rx_descriptor_end+0xfff81fdc>
   820c8:	01400274 	movhi	r5,9
   820cc:	29508304 	addi	r5,r5,16908
   820d0:	29400017 	ldw	r5,0(r5)
   820d4:	18c00054 	ori	r3,r3,1
   820d8:	20c00115 	stw	r3,4(r4)
   820dc:	00c00274 	movhi	r3,9
   820e0:	1145c83a 	sub	r2,r2,r5
   820e4:	18d98504 	addi	r3,r3,26132
   820e8:	18800015 	stw	r2,0(r3)
   820ec:	003fd306 	br	8203c <rx_descriptor_end+0xfff81fdc>

000820f0 <_free_r>:
   820f0:	28004126 	beq	r5,zero,821f8 <_free_r+0x108>
   820f4:	defffd04 	addi	sp,sp,-12
   820f8:	dc400115 	stw	r17,4(sp)
   820fc:	dc000015 	stw	r16,0(sp)
   82100:	2023883a 	mov	r17,r4
   82104:	2821883a 	mov	r16,r5
   82108:	dfc00215 	stw	ra,8(sp)
   8210c:	008e7bc0 	call	8e7bc <__malloc_lock>
   82110:	81ffff17 	ldw	r7,-4(r16)
   82114:	00bfff84 	movi	r2,-2
   82118:	01000274 	movhi	r4,9
   8211c:	81bffe04 	addi	r6,r16,-8
   82120:	3884703a 	and	r2,r7,r2
   82124:	210ac604 	addi	r4,r4,11032
   82128:	308b883a 	add	r5,r6,r2
   8212c:	2a400117 	ldw	r9,4(r5)
   82130:	22000217 	ldw	r8,8(r4)
   82134:	00ffff04 	movi	r3,-4
   82138:	48c6703a 	and	r3,r9,r3
   8213c:	2a005726 	beq	r5,r8,8229c <_free_r+0x1ac>
   82140:	28c00115 	stw	r3,4(r5)
   82144:	39c0004c 	andi	r7,r7,1
   82148:	3800091e 	bne	r7,zero,82170 <_free_r+0x80>
   8214c:	823ffe17 	ldw	r8,-8(r16)
   82150:	22400204 	addi	r9,r4,8
   82154:	320dc83a 	sub	r6,r6,r8
   82158:	31c00217 	ldw	r7,8(r6)
   8215c:	1205883a 	add	r2,r2,r8
   82160:	3a406526 	beq	r7,r9,822f8 <_free_r+0x208>
   82164:	32000317 	ldw	r8,12(r6)
   82168:	3a000315 	stw	r8,12(r7)
   8216c:	41c00215 	stw	r7,8(r8)
   82170:	28cf883a 	add	r7,r5,r3
   82174:	39c00117 	ldw	r7,4(r7)
   82178:	39c0004c 	andi	r7,r7,1
   8217c:	38003a26 	beq	r7,zero,82268 <_free_r+0x178>
   82180:	10c00054 	ori	r3,r2,1
   82184:	30c00115 	stw	r3,4(r6)
   82188:	3087883a 	add	r3,r6,r2
   8218c:	18800015 	stw	r2,0(r3)
   82190:	00c07fc4 	movi	r3,511
   82194:	18801936 	bltu	r3,r2,821fc <_free_r+0x10c>
   82198:	1004d0fa 	srli	r2,r2,3
   8219c:	01c00044 	movi	r7,1
   821a0:	21400117 	ldw	r5,4(r4)
   821a4:	10c00044 	addi	r3,r2,1
   821a8:	18c7883a 	add	r3,r3,r3
   821ac:	1005d0ba 	srai	r2,r2,2
   821b0:	18c7883a 	add	r3,r3,r3
   821b4:	18c7883a 	add	r3,r3,r3
   821b8:	1907883a 	add	r3,r3,r4
   821bc:	3884983a 	sll	r2,r7,r2
   821c0:	19c00017 	ldw	r7,0(r3)
   821c4:	1a3ffe04 	addi	r8,r3,-8
   821c8:	1144b03a 	or	r2,r2,r5
   821cc:	32000315 	stw	r8,12(r6)
   821d0:	31c00215 	stw	r7,8(r6)
   821d4:	20800115 	stw	r2,4(r4)
   821d8:	19800015 	stw	r6,0(r3)
   821dc:	39800315 	stw	r6,12(r7)
   821e0:	8809883a 	mov	r4,r17
   821e4:	dfc00217 	ldw	ra,8(sp)
   821e8:	dc400117 	ldw	r17,4(sp)
   821ec:	dc000017 	ldw	r16,0(sp)
   821f0:	dec00304 	addi	sp,sp,12
   821f4:	008e7e01 	jmpi	8e7e0 <__malloc_unlock>
   821f8:	f800283a 	ret
   821fc:	100ad27a 	srli	r5,r2,9
   82200:	00c00104 	movi	r3,4
   82204:	19404a36 	bltu	r3,r5,82330 <_free_r+0x240>
   82208:	100ad1ba 	srli	r5,r2,6
   8220c:	28c00e44 	addi	r3,r5,57
   82210:	18c7883a 	add	r3,r3,r3
   82214:	29400e04 	addi	r5,r5,56
   82218:	18c7883a 	add	r3,r3,r3
   8221c:	18c7883a 	add	r3,r3,r3
   82220:	1909883a 	add	r4,r3,r4
   82224:	20c00017 	ldw	r3,0(r4)
   82228:	01c00274 	movhi	r7,9
   8222c:	213ffe04 	addi	r4,r4,-8
   82230:	39cac604 	addi	r7,r7,11032
   82234:	20c04426 	beq	r4,r3,82348 <_free_r+0x258>
   82238:	01ffff04 	movi	r7,-4
   8223c:	19400117 	ldw	r5,4(r3)
   82240:	29ca703a 	and	r5,r5,r7
   82244:	1140022e 	bgeu	r2,r5,82250 <_free_r+0x160>
   82248:	18c00217 	ldw	r3,8(r3)
   8224c:	20fffb1e 	bne	r4,r3,8223c <rx_descriptor_end+0xfff821dc>
   82250:	19000317 	ldw	r4,12(r3)
   82254:	31000315 	stw	r4,12(r6)
   82258:	30c00215 	stw	r3,8(r6)
   8225c:	21800215 	stw	r6,8(r4)
   82260:	19800315 	stw	r6,12(r3)
   82264:	003fde06 	br	821e0 <rx_descriptor_end+0xfff82180>
   82268:	29c00217 	ldw	r7,8(r5)
   8226c:	10c5883a 	add	r2,r2,r3
   82270:	00c00274 	movhi	r3,9
   82274:	18cac804 	addi	r3,r3,11040
   82278:	38c03b26 	beq	r7,r3,82368 <_free_r+0x278>
   8227c:	2a000317 	ldw	r8,12(r5)
   82280:	11400054 	ori	r5,r2,1
   82284:	3087883a 	add	r3,r6,r2
   82288:	3a000315 	stw	r8,12(r7)
   8228c:	41c00215 	stw	r7,8(r8)
   82290:	31400115 	stw	r5,4(r6)
   82294:	18800015 	stw	r2,0(r3)
   82298:	003fbd06 	br	82190 <rx_descriptor_end+0xfff82130>
   8229c:	39c0004c 	andi	r7,r7,1
   822a0:	10c5883a 	add	r2,r2,r3
   822a4:	3800071e 	bne	r7,zero,822c4 <_free_r+0x1d4>
   822a8:	81fffe17 	ldw	r7,-8(r16)
   822ac:	31cdc83a 	sub	r6,r6,r7
   822b0:	30c00317 	ldw	r3,12(r6)
   822b4:	31400217 	ldw	r5,8(r6)
   822b8:	11c5883a 	add	r2,r2,r7
   822bc:	28c00315 	stw	r3,12(r5)
   822c0:	19400215 	stw	r5,8(r3)
   822c4:	10c00054 	ori	r3,r2,1
   822c8:	30c00115 	stw	r3,4(r6)
   822cc:	00c00274 	movhi	r3,9
   822d0:	18d08404 	addi	r3,r3,16912
   822d4:	18c00017 	ldw	r3,0(r3)
   822d8:	21800215 	stw	r6,8(r4)
   822dc:	10ffc036 	bltu	r2,r3,821e0 <rx_descriptor_end+0xfff82180>
   822e0:	00800274 	movhi	r2,9
   822e4:	10987904 	addi	r2,r2,25060
   822e8:	11400017 	ldw	r5,0(r2)
   822ec:	8809883a 	mov	r4,r17
   822f0:	0081fcc0 	call	81fcc <_malloc_trim_r>
   822f4:	003fba06 	br	821e0 <rx_descriptor_end+0xfff82180>
   822f8:	28c9883a 	add	r4,r5,r3
   822fc:	21000117 	ldw	r4,4(r4)
   82300:	2100004c 	andi	r4,r4,1
   82304:	2000391e 	bne	r4,zero,823ec <_free_r+0x2fc>
   82308:	29c00217 	ldw	r7,8(r5)
   8230c:	29000317 	ldw	r4,12(r5)
   82310:	1885883a 	add	r2,r3,r2
   82314:	10c00054 	ori	r3,r2,1
   82318:	39000315 	stw	r4,12(r7)
   8231c:	21c00215 	stw	r7,8(r4)
   82320:	30c00115 	stw	r3,4(r6)
   82324:	308d883a 	add	r6,r6,r2
   82328:	30800015 	stw	r2,0(r6)
   8232c:	003fac06 	br	821e0 <rx_descriptor_end+0xfff82180>
   82330:	00c00504 	movi	r3,20
   82334:	19401536 	bltu	r3,r5,8238c <_free_r+0x29c>
   82338:	28c01704 	addi	r3,r5,92
   8233c:	18c7883a 	add	r3,r3,r3
   82340:	294016c4 	addi	r5,r5,91
   82344:	003fb406 	br	82218 <rx_descriptor_end+0xfff821b8>
   82348:	280bd0ba 	srai	r5,r5,2
   8234c:	00c00044 	movi	r3,1
   82350:	38800117 	ldw	r2,4(r7)
   82354:	194a983a 	sll	r5,r3,r5
   82358:	2007883a 	mov	r3,r4
   8235c:	2884b03a 	or	r2,r5,r2
   82360:	38800115 	stw	r2,4(r7)
   82364:	003fbb06 	br	82254 <rx_descriptor_end+0xfff821f4>
   82368:	21800515 	stw	r6,20(r4)
   8236c:	21800415 	stw	r6,16(r4)
   82370:	10c00054 	ori	r3,r2,1
   82374:	31c00315 	stw	r7,12(r6)
   82378:	31c00215 	stw	r7,8(r6)
   8237c:	30c00115 	stw	r3,4(r6)
   82380:	308d883a 	add	r6,r6,r2
   82384:	30800015 	stw	r2,0(r6)
   82388:	003f9506 	br	821e0 <rx_descriptor_end+0xfff82180>
   8238c:	00c01504 	movi	r3,84
   82390:	19400536 	bltu	r3,r5,823a8 <_free_r+0x2b8>
   82394:	100ad33a 	srli	r5,r2,12
   82398:	28c01bc4 	addi	r3,r5,111
   8239c:	18c7883a 	add	r3,r3,r3
   823a0:	29401b84 	addi	r5,r5,110
   823a4:	003f9c06 	br	82218 <rx_descriptor_end+0xfff821b8>
   823a8:	00c05504 	movi	r3,340
   823ac:	19400536 	bltu	r3,r5,823c4 <_free_r+0x2d4>
   823b0:	100ad3fa 	srli	r5,r2,15
   823b4:	28c01e04 	addi	r3,r5,120
   823b8:	18c7883a 	add	r3,r3,r3
   823bc:	29401dc4 	addi	r5,r5,119
   823c0:	003f9506 	br	82218 <rx_descriptor_end+0xfff821b8>
   823c4:	00c15504 	movi	r3,1364
   823c8:	19400536 	bltu	r3,r5,823e0 <_free_r+0x2f0>
   823cc:	100ad4ba 	srli	r5,r2,18
   823d0:	28c01f44 	addi	r3,r5,125
   823d4:	18c7883a 	add	r3,r3,r3
   823d8:	29401f04 	addi	r5,r5,124
   823dc:	003f8e06 	br	82218 <rx_descriptor_end+0xfff821b8>
   823e0:	00c03f84 	movi	r3,254
   823e4:	01401f84 	movi	r5,126
   823e8:	003f8b06 	br	82218 <rx_descriptor_end+0xfff821b8>
   823ec:	10c00054 	ori	r3,r2,1
   823f0:	30c00115 	stw	r3,4(r6)
   823f4:	308d883a 	add	r6,r6,r2
   823f8:	30800015 	stw	r2,0(r6)
   823fc:	003f7806 	br	821e0 <rx_descriptor_end+0xfff82180>

00082400 <_fwalk>:
   82400:	defff704 	addi	sp,sp,-36
   82404:	dd000415 	stw	r20,16(sp)
   82408:	dfc00815 	stw	ra,32(sp)
   8240c:	ddc00715 	stw	r23,28(sp)
   82410:	dd800615 	stw	r22,24(sp)
   82414:	dd400515 	stw	r21,20(sp)
   82418:	dcc00315 	stw	r19,12(sp)
   8241c:	dc800215 	stw	r18,8(sp)
   82420:	dc400115 	stw	r17,4(sp)
   82424:	dc000015 	stw	r16,0(sp)
   82428:	2500b804 	addi	r20,r4,736
   8242c:	a0002326 	beq	r20,zero,824bc <_fwalk+0xbc>
   82430:	282b883a 	mov	r21,r5
   82434:	002f883a 	mov	r23,zero
   82438:	05800044 	movi	r22,1
   8243c:	04ffffc4 	movi	r19,-1
   82440:	a4400117 	ldw	r17,4(r20)
   82444:	a4800217 	ldw	r18,8(r20)
   82448:	8c7fffc4 	addi	r17,r17,-1
   8244c:	88000d16 	blt	r17,zero,82484 <_fwalk+0x84>
   82450:	94000304 	addi	r16,r18,12
   82454:	94800384 	addi	r18,r18,14
   82458:	8080000b 	ldhu	r2,0(r16)
   8245c:	8c7fffc4 	addi	r17,r17,-1
   82460:	813ffd04 	addi	r4,r16,-12
   82464:	b080042e 	bgeu	r22,r2,82478 <_fwalk+0x78>
   82468:	9080000f 	ldh	r2,0(r18)
   8246c:	14c00226 	beq	r2,r19,82478 <_fwalk+0x78>
   82470:	a83ee83a 	callr	r21
   82474:	b8aeb03a 	or	r23,r23,r2
   82478:	84001a04 	addi	r16,r16,104
   8247c:	94801a04 	addi	r18,r18,104
   82480:	8cfff51e 	bne	r17,r19,82458 <rx_descriptor_end+0xfff823f8>
   82484:	a5000017 	ldw	r20,0(r20)
   82488:	a03fed1e 	bne	r20,zero,82440 <rx_descriptor_end+0xfff823e0>
   8248c:	b805883a 	mov	r2,r23
   82490:	dfc00817 	ldw	ra,32(sp)
   82494:	ddc00717 	ldw	r23,28(sp)
   82498:	dd800617 	ldw	r22,24(sp)
   8249c:	dd400517 	ldw	r21,20(sp)
   824a0:	dd000417 	ldw	r20,16(sp)
   824a4:	dcc00317 	ldw	r19,12(sp)
   824a8:	dc800217 	ldw	r18,8(sp)
   824ac:	dc400117 	ldw	r17,4(sp)
   824b0:	dc000017 	ldw	r16,0(sp)
   824b4:	dec00904 	addi	sp,sp,36
   824b8:	f800283a 	ret
   824bc:	002f883a 	mov	r23,zero
   824c0:	003ff206 	br	8248c <rx_descriptor_end+0xfff8242c>

000824c4 <_fwalk_reent>:
   824c4:	defff704 	addi	sp,sp,-36
   824c8:	dd000415 	stw	r20,16(sp)
   824cc:	dfc00815 	stw	ra,32(sp)
   824d0:	ddc00715 	stw	r23,28(sp)
   824d4:	dd800615 	stw	r22,24(sp)
   824d8:	dd400515 	stw	r21,20(sp)
   824dc:	dcc00315 	stw	r19,12(sp)
   824e0:	dc800215 	stw	r18,8(sp)
   824e4:	dc400115 	stw	r17,4(sp)
   824e8:	dc000015 	stw	r16,0(sp)
   824ec:	2500b804 	addi	r20,r4,736
   824f0:	a0002326 	beq	r20,zero,82580 <_fwalk_reent+0xbc>
   824f4:	282b883a 	mov	r21,r5
   824f8:	2027883a 	mov	r19,r4
   824fc:	002f883a 	mov	r23,zero
   82500:	05800044 	movi	r22,1
   82504:	04bfffc4 	movi	r18,-1
   82508:	a4400117 	ldw	r17,4(r20)
   8250c:	a4000217 	ldw	r16,8(r20)
   82510:	8c7fffc4 	addi	r17,r17,-1
   82514:	88000c16 	blt	r17,zero,82548 <_fwalk_reent+0x84>
   82518:	84000304 	addi	r16,r16,12
   8251c:	8080000b 	ldhu	r2,0(r16)
   82520:	8c7fffc4 	addi	r17,r17,-1
   82524:	817ffd04 	addi	r5,r16,-12
   82528:	b080052e 	bgeu	r22,r2,82540 <_fwalk_reent+0x7c>
   8252c:	8080008f 	ldh	r2,2(r16)
   82530:	9809883a 	mov	r4,r19
   82534:	14800226 	beq	r2,r18,82540 <_fwalk_reent+0x7c>
   82538:	a83ee83a 	callr	r21
   8253c:	b8aeb03a 	or	r23,r23,r2
   82540:	84001a04 	addi	r16,r16,104
   82544:	8cbff51e 	bne	r17,r18,8251c <rx_descriptor_end+0xfff824bc>
   82548:	a5000017 	ldw	r20,0(r20)
   8254c:	a03fee1e 	bne	r20,zero,82508 <rx_descriptor_end+0xfff824a8>
   82550:	b805883a 	mov	r2,r23
   82554:	dfc00817 	ldw	ra,32(sp)
   82558:	ddc00717 	ldw	r23,28(sp)
   8255c:	dd800617 	ldw	r22,24(sp)
   82560:	dd400517 	ldw	r21,20(sp)
   82564:	dd000417 	ldw	r20,16(sp)
   82568:	dcc00317 	ldw	r19,12(sp)
   8256c:	dc800217 	ldw	r18,8(sp)
   82570:	dc400117 	ldw	r17,4(sp)
   82574:	dc000017 	ldw	r16,0(sp)
   82578:	dec00904 	addi	sp,sp,36
   8257c:	f800283a 	ret
   82580:	002f883a 	mov	r23,zero
   82584:	003ff206 	br	82550 <rx_descriptor_end+0xfff824f0>

00082588 <malloc>:
   82588:	00800274 	movhi	r2,9
   8258c:	10908204 	addi	r2,r2,16904
   82590:	200b883a 	mov	r5,r4
   82594:	11000017 	ldw	r4,0(r2)
   82598:	00825b01 	jmpi	825b0 <_malloc_r>

0008259c <free>:
   8259c:	00800274 	movhi	r2,9
   825a0:	10908204 	addi	r2,r2,16904
   825a4:	200b883a 	mov	r5,r4
   825a8:	11000017 	ldw	r4,0(r2)
   825ac:	00820f01 	jmpi	820f0 <_free_r>

000825b0 <_malloc_r>:
   825b0:	defff504 	addi	sp,sp,-44
   825b4:	dc800315 	stw	r18,12(sp)
   825b8:	dfc00a15 	stw	ra,40(sp)
   825bc:	df000915 	stw	fp,36(sp)
   825c0:	ddc00815 	stw	r23,32(sp)
   825c4:	dd800715 	stw	r22,28(sp)
   825c8:	dd400615 	stw	r21,24(sp)
   825cc:	dd000515 	stw	r20,20(sp)
   825d0:	dcc00415 	stw	r19,16(sp)
   825d4:	dc400215 	stw	r17,8(sp)
   825d8:	dc000115 	stw	r16,4(sp)
   825dc:	288002c4 	addi	r2,r5,11
   825e0:	00c00584 	movi	r3,22
   825e4:	2025883a 	mov	r18,r4
   825e8:	18807f2e 	bgeu	r3,r2,827e8 <_malloc_r+0x238>
   825ec:	047ffe04 	movi	r17,-8
   825f0:	1462703a 	and	r17,r2,r17
   825f4:	8800a316 	blt	r17,zero,82884 <_malloc_r+0x2d4>
   825f8:	8940a236 	bltu	r17,r5,82884 <_malloc_r+0x2d4>
   825fc:	008e7bc0 	call	8e7bc <__malloc_lock>
   82600:	00807dc4 	movi	r2,503
   82604:	1441e92e 	bgeu	r2,r17,82dac <_malloc_r+0x7fc>
   82608:	8804d27a 	srli	r2,r17,9
   8260c:	1000a126 	beq	r2,zero,82894 <_malloc_r+0x2e4>
   82610:	00c00104 	movi	r3,4
   82614:	18811e36 	bltu	r3,r2,82a90 <_malloc_r+0x4e0>
   82618:	8804d1ba 	srli	r2,r17,6
   8261c:	12000e44 	addi	r8,r2,57
   82620:	11c00e04 	addi	r7,r2,56
   82624:	4209883a 	add	r4,r8,r8
   82628:	04c00274 	movhi	r19,9
   8262c:	2109883a 	add	r4,r4,r4
   82630:	9ccac604 	addi	r19,r19,11032
   82634:	2109883a 	add	r4,r4,r4
   82638:	9909883a 	add	r4,r19,r4
   8263c:	24000117 	ldw	r16,4(r4)
   82640:	213ffe04 	addi	r4,r4,-8
   82644:	24009726 	beq	r4,r16,828a4 <_malloc_r+0x2f4>
   82648:	80800117 	ldw	r2,4(r16)
   8264c:	01bfff04 	movi	r6,-4
   82650:	014003c4 	movi	r5,15
   82654:	1184703a 	and	r2,r2,r6
   82658:	1447c83a 	sub	r3,r2,r17
   8265c:	28c00716 	blt	r5,r3,8267c <_malloc_r+0xcc>
   82660:	1800920e 	bge	r3,zero,828ac <_malloc_r+0x2fc>
   82664:	84000317 	ldw	r16,12(r16)
   82668:	24008e26 	beq	r4,r16,828a4 <_malloc_r+0x2f4>
   8266c:	80800117 	ldw	r2,4(r16)
   82670:	1184703a 	and	r2,r2,r6
   82674:	1447c83a 	sub	r3,r2,r17
   82678:	28fff90e 	bge	r5,r3,82660 <rx_descriptor_end+0xfff82600>
   8267c:	3809883a 	mov	r4,r7
   82680:	01800274 	movhi	r6,9
   82684:	9c000417 	ldw	r16,16(r19)
   82688:	318ac604 	addi	r6,r6,11032
   8268c:	32000204 	addi	r8,r6,8
   82690:	82013426 	beq	r16,r8,82b64 <_malloc_r+0x5b4>
   82694:	80c00117 	ldw	r3,4(r16)
   82698:	00bfff04 	movi	r2,-4
   8269c:	188e703a 	and	r7,r3,r2
   826a0:	3c45c83a 	sub	r2,r7,r17
   826a4:	00c003c4 	movi	r3,15
   826a8:	18811f16 	blt	r3,r2,82b28 <_malloc_r+0x578>
   826ac:	32000515 	stw	r8,20(r6)
   826b0:	32000415 	stw	r8,16(r6)
   826b4:	10007f0e 	bge	r2,zero,828b4 <_malloc_r+0x304>
   826b8:	00807fc4 	movi	r2,511
   826bc:	11c0fd36 	bltu	r2,r7,82ab4 <_malloc_r+0x504>
   826c0:	3806d0fa 	srli	r3,r7,3
   826c4:	01c00044 	movi	r7,1
   826c8:	30800117 	ldw	r2,4(r6)
   826cc:	19400044 	addi	r5,r3,1
   826d0:	294b883a 	add	r5,r5,r5
   826d4:	1807d0ba 	srai	r3,r3,2
   826d8:	294b883a 	add	r5,r5,r5
   826dc:	294b883a 	add	r5,r5,r5
   826e0:	298b883a 	add	r5,r5,r6
   826e4:	38c6983a 	sll	r3,r7,r3
   826e8:	29c00017 	ldw	r7,0(r5)
   826ec:	2a7ffe04 	addi	r9,r5,-8
   826f0:	1886b03a 	or	r3,r3,r2
   826f4:	82400315 	stw	r9,12(r16)
   826f8:	81c00215 	stw	r7,8(r16)
   826fc:	30c00115 	stw	r3,4(r6)
   82700:	2c000015 	stw	r16,0(r5)
   82704:	3c000315 	stw	r16,12(r7)
   82708:	2005d0ba 	srai	r2,r4,2
   8270c:	01400044 	movi	r5,1
   82710:	288a983a 	sll	r5,r5,r2
   82714:	19406f36 	bltu	r3,r5,828d4 <_malloc_r+0x324>
   82718:	28c4703a 	and	r2,r5,r3
   8271c:	10000a1e 	bne	r2,zero,82748 <_malloc_r+0x198>
   82720:	00bfff04 	movi	r2,-4
   82724:	294b883a 	add	r5,r5,r5
   82728:	2088703a 	and	r4,r4,r2
   8272c:	28c4703a 	and	r2,r5,r3
   82730:	21000104 	addi	r4,r4,4
   82734:	1000041e 	bne	r2,zero,82748 <_malloc_r+0x198>
   82738:	294b883a 	add	r5,r5,r5
   8273c:	28c4703a 	and	r2,r5,r3
   82740:	21000104 	addi	r4,r4,4
   82744:	103ffc26 	beq	r2,zero,82738 <rx_descriptor_end+0xfff826d8>
   82748:	02bfff04 	movi	r10,-4
   8274c:	024003c4 	movi	r9,15
   82750:	21800044 	addi	r6,r4,1
   82754:	318d883a 	add	r6,r6,r6
   82758:	318d883a 	add	r6,r6,r6
   8275c:	318d883a 	add	r6,r6,r6
   82760:	998d883a 	add	r6,r19,r6
   82764:	333ffe04 	addi	r12,r6,-8
   82768:	2017883a 	mov	r11,r4
   8276c:	31800104 	addi	r6,r6,4
   82770:	34000017 	ldw	r16,0(r6)
   82774:	31fffd04 	addi	r7,r6,-12
   82778:	81c0041e 	bne	r16,r7,8278c <_malloc_r+0x1dc>
   8277c:	0000fb06 	br	82b6c <_malloc_r+0x5bc>
   82780:	1801030e 	bge	r3,zero,82b90 <_malloc_r+0x5e0>
   82784:	84000317 	ldw	r16,12(r16)
   82788:	81c0f826 	beq	r16,r7,82b6c <_malloc_r+0x5bc>
   8278c:	80800117 	ldw	r2,4(r16)
   82790:	1284703a 	and	r2,r2,r10
   82794:	1447c83a 	sub	r3,r2,r17
   82798:	48fff90e 	bge	r9,r3,82780 <rx_descriptor_end+0xfff82720>
   8279c:	80800317 	ldw	r2,12(r16)
   827a0:	81000217 	ldw	r4,8(r16)
   827a4:	89400054 	ori	r5,r17,1
   827a8:	81400115 	stw	r5,4(r16)
   827ac:	20800315 	stw	r2,12(r4)
   827b0:	11000215 	stw	r4,8(r2)
   827b4:	8463883a 	add	r17,r16,r17
   827b8:	9c400515 	stw	r17,20(r19)
   827bc:	9c400415 	stw	r17,16(r19)
   827c0:	18800054 	ori	r2,r3,1
   827c4:	88800115 	stw	r2,4(r17)
   827c8:	8a000315 	stw	r8,12(r17)
   827cc:	8a000215 	stw	r8,8(r17)
   827d0:	88e3883a 	add	r17,r17,r3
   827d4:	88c00015 	stw	r3,0(r17)
   827d8:	9009883a 	mov	r4,r18
   827dc:	008e7e00 	call	8e7e0 <__malloc_unlock>
   827e0:	80800204 	addi	r2,r16,8
   827e4:	00001b06 	br	82854 <_malloc_r+0x2a4>
   827e8:	04400404 	movi	r17,16
   827ec:	89402536 	bltu	r17,r5,82884 <_malloc_r+0x2d4>
   827f0:	008e7bc0 	call	8e7bc <__malloc_lock>
   827f4:	00800184 	movi	r2,6
   827f8:	01000084 	movi	r4,2
   827fc:	04c00274 	movhi	r19,9
   82800:	1085883a 	add	r2,r2,r2
   82804:	9ccac604 	addi	r19,r19,11032
   82808:	1085883a 	add	r2,r2,r2
   8280c:	9885883a 	add	r2,r19,r2
   82810:	14000117 	ldw	r16,4(r2)
   82814:	10fffe04 	addi	r3,r2,-8
   82818:	80c0d926 	beq	r16,r3,82b80 <_malloc_r+0x5d0>
   8281c:	80c00117 	ldw	r3,4(r16)
   82820:	81000317 	ldw	r4,12(r16)
   82824:	00bfff04 	movi	r2,-4
   82828:	1884703a 	and	r2,r3,r2
   8282c:	81400217 	ldw	r5,8(r16)
   82830:	8085883a 	add	r2,r16,r2
   82834:	10c00117 	ldw	r3,4(r2)
   82838:	29000315 	stw	r4,12(r5)
   8283c:	21400215 	stw	r5,8(r4)
   82840:	18c00054 	ori	r3,r3,1
   82844:	10c00115 	stw	r3,4(r2)
   82848:	9009883a 	mov	r4,r18
   8284c:	008e7e00 	call	8e7e0 <__malloc_unlock>
   82850:	80800204 	addi	r2,r16,8
   82854:	dfc00a17 	ldw	ra,40(sp)
   82858:	df000917 	ldw	fp,36(sp)
   8285c:	ddc00817 	ldw	r23,32(sp)
   82860:	dd800717 	ldw	r22,28(sp)
   82864:	dd400617 	ldw	r21,24(sp)
   82868:	dd000517 	ldw	r20,20(sp)
   8286c:	dcc00417 	ldw	r19,16(sp)
   82870:	dc800317 	ldw	r18,12(sp)
   82874:	dc400217 	ldw	r17,8(sp)
   82878:	dc000117 	ldw	r16,4(sp)
   8287c:	dec00b04 	addi	sp,sp,44
   82880:	f800283a 	ret
   82884:	00800304 	movi	r2,12
   82888:	90800015 	stw	r2,0(r18)
   8288c:	0005883a 	mov	r2,zero
   82890:	003ff006 	br	82854 <rx_descriptor_end+0xfff827f4>
   82894:	01002004 	movi	r4,128
   82898:	02001004 	movi	r8,64
   8289c:	01c00fc4 	movi	r7,63
   828a0:	003f6106 	br	82628 <rx_descriptor_end+0xfff825c8>
   828a4:	4009883a 	mov	r4,r8
   828a8:	003f7506 	br	82680 <rx_descriptor_end+0xfff82620>
   828ac:	81000317 	ldw	r4,12(r16)
   828b0:	003fde06 	br	8282c <rx_descriptor_end+0xfff827cc>
   828b4:	81c5883a 	add	r2,r16,r7
   828b8:	11400117 	ldw	r5,4(r2)
   828bc:	9009883a 	mov	r4,r18
   828c0:	29400054 	ori	r5,r5,1
   828c4:	11400115 	stw	r5,4(r2)
   828c8:	008e7e00 	call	8e7e0 <__malloc_unlock>
   828cc:	80800204 	addi	r2,r16,8
   828d0:	003fe006 	br	82854 <rx_descriptor_end+0xfff827f4>
   828d4:	9c000217 	ldw	r16,8(r19)
   828d8:	00bfff04 	movi	r2,-4
   828dc:	85800117 	ldw	r22,4(r16)
   828e0:	b0ac703a 	and	r22,r22,r2
   828e4:	b4400336 	bltu	r22,r17,828f4 <_malloc_r+0x344>
   828e8:	b445c83a 	sub	r2,r22,r17
   828ec:	00c003c4 	movi	r3,15
   828f0:	18805d16 	blt	r3,r2,82a68 <_malloc_r+0x4b8>
   828f4:	05c00274 	movhi	r23,9
   828f8:	00800274 	movhi	r2,9
   828fc:	10987904 	addi	r2,r2,25060
   82900:	bdd08304 	addi	r23,r23,16908
   82904:	15400017 	ldw	r21,0(r2)
   82908:	b8c00017 	ldw	r3,0(r23)
   8290c:	00bfffc4 	movi	r2,-1
   82910:	858d883a 	add	r6,r16,r22
   82914:	8d6b883a 	add	r21,r17,r21
   82918:	1880ea26 	beq	r3,r2,82cc4 <_malloc_r+0x714>
   8291c:	ad4403c4 	addi	r21,r21,4111
   82920:	00bc0004 	movi	r2,-4096
   82924:	a8aa703a 	and	r21,r21,r2
   82928:	a80b883a 	mov	r5,r21
   8292c:	9009883a 	mov	r4,r18
   82930:	d9800015 	stw	r6,0(sp)
   82934:	00830ac0 	call	830ac <_sbrk_r>
   82938:	1029883a 	mov	r20,r2
   8293c:	00bfffc4 	movi	r2,-1
   82940:	d9800017 	ldw	r6,0(sp)
   82944:	a080e826 	beq	r20,r2,82ce8 <_malloc_r+0x738>
   82948:	a180a636 	bltu	r20,r6,82be4 <_malloc_r+0x634>
   8294c:	07000274 	movhi	fp,9
   82950:	e7198504 	addi	fp,fp,26132
   82954:	e0800017 	ldw	r2,0(fp)
   82958:	a887883a 	add	r3,r21,r2
   8295c:	e0c00015 	stw	r3,0(fp)
   82960:	3500e626 	beq	r6,r20,82cfc <_malloc_r+0x74c>
   82964:	b9000017 	ldw	r4,0(r23)
   82968:	00bfffc4 	movi	r2,-1
   8296c:	2080ee26 	beq	r4,r2,82d28 <_malloc_r+0x778>
   82970:	a185c83a 	sub	r2,r20,r6
   82974:	10c5883a 	add	r2,r2,r3
   82978:	e0800015 	stw	r2,0(fp)
   8297c:	a0c001cc 	andi	r3,r20,7
   82980:	1800bc26 	beq	r3,zero,82c74 <_malloc_r+0x6c4>
   82984:	a0e9c83a 	sub	r20,r20,r3
   82988:	00840204 	movi	r2,4104
   8298c:	a5000204 	addi	r20,r20,8
   82990:	10c7c83a 	sub	r3,r2,r3
   82994:	a545883a 	add	r2,r20,r21
   82998:	1083ffcc 	andi	r2,r2,4095
   8299c:	18abc83a 	sub	r21,r3,r2
   829a0:	a80b883a 	mov	r5,r21
   829a4:	9009883a 	mov	r4,r18
   829a8:	00830ac0 	call	830ac <_sbrk_r>
   829ac:	00ffffc4 	movi	r3,-1
   829b0:	10c0e126 	beq	r2,r3,82d38 <_malloc_r+0x788>
   829b4:	1505c83a 	sub	r2,r2,r20
   829b8:	1545883a 	add	r2,r2,r21
   829bc:	10800054 	ori	r2,r2,1
   829c0:	e0c00017 	ldw	r3,0(fp)
   829c4:	9d000215 	stw	r20,8(r19)
   829c8:	a0800115 	stw	r2,4(r20)
   829cc:	a8c7883a 	add	r3,r21,r3
   829d0:	e0c00015 	stw	r3,0(fp)
   829d4:	84c00e26 	beq	r16,r19,82a10 <_malloc_r+0x460>
   829d8:	018003c4 	movi	r6,15
   829dc:	3580a72e 	bgeu	r6,r22,82c7c <_malloc_r+0x6cc>
   829e0:	81400117 	ldw	r5,4(r16)
   829e4:	013ffe04 	movi	r4,-8
   829e8:	b0bffd04 	addi	r2,r22,-12
   829ec:	1104703a 	and	r2,r2,r4
   829f0:	2900004c 	andi	r4,r5,1
   829f4:	2088b03a 	or	r4,r4,r2
   829f8:	81000115 	stw	r4,4(r16)
   829fc:	01400144 	movi	r5,5
   82a00:	8089883a 	add	r4,r16,r2
   82a04:	21400115 	stw	r5,4(r4)
   82a08:	21400215 	stw	r5,8(r4)
   82a0c:	3080cd36 	bltu	r6,r2,82d44 <_malloc_r+0x794>
   82a10:	00800274 	movhi	r2,9
   82a14:	10987804 	addi	r2,r2,25056
   82a18:	11000017 	ldw	r4,0(r2)
   82a1c:	20c0012e 	bgeu	r4,r3,82a24 <_malloc_r+0x474>
   82a20:	10c00015 	stw	r3,0(r2)
   82a24:	00800274 	movhi	r2,9
   82a28:	10987704 	addi	r2,r2,25052
   82a2c:	11000017 	ldw	r4,0(r2)
   82a30:	9c000217 	ldw	r16,8(r19)
   82a34:	20c0012e 	bgeu	r4,r3,82a3c <_malloc_r+0x48c>
   82a38:	10c00015 	stw	r3,0(r2)
   82a3c:	80c00117 	ldw	r3,4(r16)
   82a40:	00bfff04 	movi	r2,-4
   82a44:	1886703a 	and	r3,r3,r2
   82a48:	1c45c83a 	sub	r2,r3,r17
   82a4c:	1c400236 	bltu	r3,r17,82a58 <_malloc_r+0x4a8>
   82a50:	00c003c4 	movi	r3,15
   82a54:	18800416 	blt	r3,r2,82a68 <_malloc_r+0x4b8>
   82a58:	9009883a 	mov	r4,r18
   82a5c:	008e7e00 	call	8e7e0 <__malloc_unlock>
   82a60:	0005883a 	mov	r2,zero
   82a64:	003f7b06 	br	82854 <rx_descriptor_end+0xfff827f4>
   82a68:	88c00054 	ori	r3,r17,1
   82a6c:	80c00115 	stw	r3,4(r16)
   82a70:	8463883a 	add	r17,r16,r17
   82a74:	10800054 	ori	r2,r2,1
   82a78:	9c400215 	stw	r17,8(r19)
   82a7c:	88800115 	stw	r2,4(r17)
   82a80:	9009883a 	mov	r4,r18
   82a84:	008e7e00 	call	8e7e0 <__malloc_unlock>
   82a88:	80800204 	addi	r2,r16,8
   82a8c:	003f7106 	br	82854 <rx_descriptor_end+0xfff827f4>
   82a90:	00c00504 	movi	r3,20
   82a94:	18804a2e 	bgeu	r3,r2,82bc0 <_malloc_r+0x610>
   82a98:	00c01504 	movi	r3,84
   82a9c:	18806e36 	bltu	r3,r2,82c58 <_malloc_r+0x6a8>
   82aa0:	8804d33a 	srli	r2,r17,12
   82aa4:	12001bc4 	addi	r8,r2,111
   82aa8:	11c01b84 	addi	r7,r2,110
   82aac:	4209883a 	add	r4,r8,r8
   82ab0:	003edd06 	br	82628 <rx_descriptor_end+0xfff825c8>
   82ab4:	3804d27a 	srli	r2,r7,9
   82ab8:	00c00104 	movi	r3,4
   82abc:	1880442e 	bgeu	r3,r2,82bd0 <_malloc_r+0x620>
   82ac0:	00c00504 	movi	r3,20
   82ac4:	18808136 	bltu	r3,r2,82ccc <_malloc_r+0x71c>
   82ac8:	11401704 	addi	r5,r2,92
   82acc:	10c016c4 	addi	r3,r2,91
   82ad0:	294b883a 	add	r5,r5,r5
   82ad4:	294b883a 	add	r5,r5,r5
   82ad8:	294b883a 	add	r5,r5,r5
   82adc:	994b883a 	add	r5,r19,r5
   82ae0:	28800017 	ldw	r2,0(r5)
   82ae4:	01800274 	movhi	r6,9
   82ae8:	297ffe04 	addi	r5,r5,-8
   82aec:	318ac604 	addi	r6,r6,11032
   82af0:	28806526 	beq	r5,r2,82c88 <_malloc_r+0x6d8>
   82af4:	01bfff04 	movi	r6,-4
   82af8:	10c00117 	ldw	r3,4(r2)
   82afc:	1986703a 	and	r3,r3,r6
   82b00:	38c0022e 	bgeu	r7,r3,82b0c <_malloc_r+0x55c>
   82b04:	10800217 	ldw	r2,8(r2)
   82b08:	28bffb1e 	bne	r5,r2,82af8 <rx_descriptor_end+0xfff82a98>
   82b0c:	11400317 	ldw	r5,12(r2)
   82b10:	98c00117 	ldw	r3,4(r19)
   82b14:	81400315 	stw	r5,12(r16)
   82b18:	80800215 	stw	r2,8(r16)
   82b1c:	2c000215 	stw	r16,8(r5)
   82b20:	14000315 	stw	r16,12(r2)
   82b24:	003ef806 	br	82708 <rx_descriptor_end+0xfff826a8>
   82b28:	88c00054 	ori	r3,r17,1
   82b2c:	80c00115 	stw	r3,4(r16)
   82b30:	8463883a 	add	r17,r16,r17
   82b34:	34400515 	stw	r17,20(r6)
   82b38:	34400415 	stw	r17,16(r6)
   82b3c:	10c00054 	ori	r3,r2,1
   82b40:	8a000315 	stw	r8,12(r17)
   82b44:	8a000215 	stw	r8,8(r17)
   82b48:	88c00115 	stw	r3,4(r17)
   82b4c:	88a3883a 	add	r17,r17,r2
   82b50:	88800015 	stw	r2,0(r17)
   82b54:	9009883a 	mov	r4,r18
   82b58:	008e7e00 	call	8e7e0 <__malloc_unlock>
   82b5c:	80800204 	addi	r2,r16,8
   82b60:	003f3c06 	br	82854 <rx_descriptor_end+0xfff827f4>
   82b64:	30c00117 	ldw	r3,4(r6)
   82b68:	003ee706 	br	82708 <rx_descriptor_end+0xfff826a8>
   82b6c:	5ac00044 	addi	r11,r11,1
   82b70:	588000cc 	andi	r2,r11,3
   82b74:	31800204 	addi	r6,r6,8
   82b78:	103efd1e 	bne	r2,zero,82770 <rx_descriptor_end+0xfff82710>
   82b7c:	00002406 	br	82c10 <_malloc_r+0x660>
   82b80:	14000317 	ldw	r16,12(r2)
   82b84:	143f251e 	bne	r2,r16,8281c <rx_descriptor_end+0xfff827bc>
   82b88:	21000084 	addi	r4,r4,2
   82b8c:	003ebc06 	br	82680 <rx_descriptor_end+0xfff82620>
   82b90:	8085883a 	add	r2,r16,r2
   82b94:	10c00117 	ldw	r3,4(r2)
   82b98:	81000317 	ldw	r4,12(r16)
   82b9c:	81400217 	ldw	r5,8(r16)
   82ba0:	18c00054 	ori	r3,r3,1
   82ba4:	10c00115 	stw	r3,4(r2)
   82ba8:	29000315 	stw	r4,12(r5)
   82bac:	21400215 	stw	r5,8(r4)
   82bb0:	9009883a 	mov	r4,r18
   82bb4:	008e7e00 	call	8e7e0 <__malloc_unlock>
   82bb8:	80800204 	addi	r2,r16,8
   82bbc:	003f2506 	br	82854 <rx_descriptor_end+0xfff827f4>
   82bc0:	12001704 	addi	r8,r2,92
   82bc4:	11c016c4 	addi	r7,r2,91
   82bc8:	4209883a 	add	r4,r8,r8
   82bcc:	003e9606 	br	82628 <rx_descriptor_end+0xfff825c8>
   82bd0:	3804d1ba 	srli	r2,r7,6
   82bd4:	11400e44 	addi	r5,r2,57
   82bd8:	10c00e04 	addi	r3,r2,56
   82bdc:	294b883a 	add	r5,r5,r5
   82be0:	003fbc06 	br	82ad4 <rx_descriptor_end+0xfff82a74>
   82be4:	84ff5926 	beq	r16,r19,8294c <rx_descriptor_end+0xfff828ec>
   82be8:	00800274 	movhi	r2,9
   82bec:	108ac604 	addi	r2,r2,11032
   82bf0:	14000217 	ldw	r16,8(r2)
   82bf4:	00bfff04 	movi	r2,-4
   82bf8:	80c00117 	ldw	r3,4(r16)
   82bfc:	1886703a 	and	r3,r3,r2
   82c00:	003f9106 	br	82a48 <rx_descriptor_end+0xfff829e8>
   82c04:	60800217 	ldw	r2,8(r12)
   82c08:	213fffc4 	addi	r4,r4,-1
   82c0c:	1300651e 	bne	r2,r12,82da4 <_malloc_r+0x7f4>
   82c10:	208000cc 	andi	r2,r4,3
   82c14:	633ffe04 	addi	r12,r12,-8
   82c18:	103ffa1e 	bne	r2,zero,82c04 <rx_descriptor_end+0xfff82ba4>
   82c1c:	98800117 	ldw	r2,4(r19)
   82c20:	0146303a 	nor	r3,zero,r5
   82c24:	1884703a 	and	r2,r3,r2
   82c28:	98800115 	stw	r2,4(r19)
   82c2c:	294b883a 	add	r5,r5,r5
   82c30:	117f2836 	bltu	r2,r5,828d4 <rx_descriptor_end+0xfff82874>
   82c34:	283f2726 	beq	r5,zero,828d4 <rx_descriptor_end+0xfff82874>
   82c38:	2886703a 	and	r3,r5,r2
   82c3c:	5809883a 	mov	r4,r11
   82c40:	183ec31e 	bne	r3,zero,82750 <rx_descriptor_end+0xfff826f0>
   82c44:	294b883a 	add	r5,r5,r5
   82c48:	2886703a 	and	r3,r5,r2
   82c4c:	21000104 	addi	r4,r4,4
   82c50:	183ffc26 	beq	r3,zero,82c44 <rx_descriptor_end+0xfff82be4>
   82c54:	003ebe06 	br	82750 <rx_descriptor_end+0xfff826f0>
   82c58:	00c05504 	movi	r3,340
   82c5c:	18801236 	bltu	r3,r2,82ca8 <_malloc_r+0x6f8>
   82c60:	8804d3fa 	srli	r2,r17,15
   82c64:	12001e04 	addi	r8,r2,120
   82c68:	11c01dc4 	addi	r7,r2,119
   82c6c:	4209883a 	add	r4,r8,r8
   82c70:	003e6d06 	br	82628 <rx_descriptor_end+0xfff825c8>
   82c74:	00c40004 	movi	r3,4096
   82c78:	003f4606 	br	82994 <rx_descriptor_end+0xfff82934>
   82c7c:	00800044 	movi	r2,1
   82c80:	a0800115 	stw	r2,4(r20)
   82c84:	003f7406 	br	82a58 <rx_descriptor_end+0xfff829f8>
   82c88:	1805d0ba 	srai	r2,r3,2
   82c8c:	01c00044 	movi	r7,1
   82c90:	30c00117 	ldw	r3,4(r6)
   82c94:	388e983a 	sll	r7,r7,r2
   82c98:	2805883a 	mov	r2,r5
   82c9c:	38c6b03a 	or	r3,r7,r3
   82ca0:	30c00115 	stw	r3,4(r6)
   82ca4:	003f9b06 	br	82b14 <rx_descriptor_end+0xfff82ab4>
   82ca8:	00c15504 	movi	r3,1364
   82cac:	18801a36 	bltu	r3,r2,82d18 <_malloc_r+0x768>
   82cb0:	8804d4ba 	srli	r2,r17,18
   82cb4:	12001f44 	addi	r8,r2,125
   82cb8:	11c01f04 	addi	r7,r2,124
   82cbc:	4209883a 	add	r4,r8,r8
   82cc0:	003e5906 	br	82628 <rx_descriptor_end+0xfff825c8>
   82cc4:	ad400404 	addi	r21,r21,16
   82cc8:	003f1706 	br	82928 <rx_descriptor_end+0xfff828c8>
   82ccc:	00c01504 	movi	r3,84
   82cd0:	18802336 	bltu	r3,r2,82d60 <_malloc_r+0x7b0>
   82cd4:	3804d33a 	srli	r2,r7,12
   82cd8:	11401bc4 	addi	r5,r2,111
   82cdc:	10c01b84 	addi	r3,r2,110
   82ce0:	294b883a 	add	r5,r5,r5
   82ce4:	003f7b06 	br	82ad4 <rx_descriptor_end+0xfff82a74>
   82ce8:	9c000217 	ldw	r16,8(r19)
   82cec:	00bfff04 	movi	r2,-4
   82cf0:	80c00117 	ldw	r3,4(r16)
   82cf4:	1886703a 	and	r3,r3,r2
   82cf8:	003f5306 	br	82a48 <rx_descriptor_end+0xfff829e8>
   82cfc:	3083ffcc 	andi	r2,r6,4095
   82d00:	103f181e 	bne	r2,zero,82964 <rx_descriptor_end+0xfff82904>
   82d04:	99000217 	ldw	r4,8(r19)
   82d08:	b545883a 	add	r2,r22,r21
   82d0c:	10800054 	ori	r2,r2,1
   82d10:	20800115 	stw	r2,4(r4)
   82d14:	003f3e06 	br	82a10 <rx_descriptor_end+0xfff829b0>
   82d18:	01003f84 	movi	r4,254
   82d1c:	02001fc4 	movi	r8,127
   82d20:	01c01f84 	movi	r7,126
   82d24:	003e4006 	br	82628 <rx_descriptor_end+0xfff825c8>
   82d28:	00800274 	movhi	r2,9
   82d2c:	10908304 	addi	r2,r2,16908
   82d30:	15000015 	stw	r20,0(r2)
   82d34:	003f1106 	br	8297c <rx_descriptor_end+0xfff8291c>
   82d38:	00800044 	movi	r2,1
   82d3c:	002b883a 	mov	r21,zero
   82d40:	003f1f06 	br	829c0 <rx_descriptor_end+0xfff82960>
   82d44:	81400204 	addi	r5,r16,8
   82d48:	9009883a 	mov	r4,r18
   82d4c:	00820f00 	call	820f0 <_free_r>
   82d50:	00800274 	movhi	r2,9
   82d54:	10998504 	addi	r2,r2,26132
   82d58:	10c00017 	ldw	r3,0(r2)
   82d5c:	003f2c06 	br	82a10 <rx_descriptor_end+0xfff829b0>
   82d60:	00c05504 	movi	r3,340
   82d64:	18800536 	bltu	r3,r2,82d7c <_malloc_r+0x7cc>
   82d68:	3804d3fa 	srli	r2,r7,15
   82d6c:	11401e04 	addi	r5,r2,120
   82d70:	10c01dc4 	addi	r3,r2,119
   82d74:	294b883a 	add	r5,r5,r5
   82d78:	003f5606 	br	82ad4 <rx_descriptor_end+0xfff82a74>
   82d7c:	00c15504 	movi	r3,1364
   82d80:	18800536 	bltu	r3,r2,82d98 <_malloc_r+0x7e8>
   82d84:	3804d4ba 	srli	r2,r7,18
   82d88:	11401f44 	addi	r5,r2,125
   82d8c:	10c01f04 	addi	r3,r2,124
   82d90:	294b883a 	add	r5,r5,r5
   82d94:	003f4f06 	br	82ad4 <rx_descriptor_end+0xfff82a74>
   82d98:	01403f84 	movi	r5,254
   82d9c:	00c01f84 	movi	r3,126
   82da0:	003f4c06 	br	82ad4 <rx_descriptor_end+0xfff82a74>
   82da4:	98800117 	ldw	r2,4(r19)
   82da8:	003fa006 	br	82c2c <rx_descriptor_end+0xfff82bcc>
   82dac:	8808d0fa 	srli	r4,r17,3
   82db0:	20800044 	addi	r2,r4,1
   82db4:	1085883a 	add	r2,r2,r2
   82db8:	003e9006 	br	827fc <rx_descriptor_end+0xfff8279c>

00082dbc <memmove>:
   82dbc:	2005883a 	mov	r2,r4
   82dc0:	29000b2e 	bgeu	r5,r4,82df0 <memmove+0x34>
   82dc4:	298f883a 	add	r7,r5,r6
   82dc8:	21c0092e 	bgeu	r4,r7,82df0 <memmove+0x34>
   82dcc:	2187883a 	add	r3,r4,r6
   82dd0:	198bc83a 	sub	r5,r3,r6
   82dd4:	30004826 	beq	r6,zero,82ef8 <memmove+0x13c>
   82dd8:	39ffffc4 	addi	r7,r7,-1
   82ddc:	39000003 	ldbu	r4,0(r7)
   82de0:	18ffffc4 	addi	r3,r3,-1
   82de4:	19000005 	stb	r4,0(r3)
   82de8:	28fffb1e 	bne	r5,r3,82dd8 <rx_descriptor_end+0xfff82d78>
   82dec:	f800283a 	ret
   82df0:	00c003c4 	movi	r3,15
   82df4:	1980412e 	bgeu	r3,r6,82efc <memmove+0x140>
   82df8:	2886b03a 	or	r3,r5,r2
   82dfc:	18c000cc 	andi	r3,r3,3
   82e00:	1800401e 	bne	r3,zero,82f04 <memmove+0x148>
   82e04:	33fffc04 	addi	r15,r6,-16
   82e08:	781ed13a 	srli	r15,r15,4
   82e0c:	28c00104 	addi	r3,r5,4
   82e10:	13400104 	addi	r13,r2,4
   82e14:	781c913a 	slli	r14,r15,4
   82e18:	2b000204 	addi	r12,r5,8
   82e1c:	12c00204 	addi	r11,r2,8
   82e20:	73800504 	addi	r14,r14,20
   82e24:	2a800304 	addi	r10,r5,12
   82e28:	12400304 	addi	r9,r2,12
   82e2c:	2b9d883a 	add	r14,r5,r14
   82e30:	2811883a 	mov	r8,r5
   82e34:	100f883a 	mov	r7,r2
   82e38:	41000017 	ldw	r4,0(r8)
   82e3c:	39c00404 	addi	r7,r7,16
   82e40:	18c00404 	addi	r3,r3,16
   82e44:	393ffc15 	stw	r4,-16(r7)
   82e48:	193ffc17 	ldw	r4,-16(r3)
   82e4c:	6b400404 	addi	r13,r13,16
   82e50:	5ac00404 	addi	r11,r11,16
   82e54:	693ffc15 	stw	r4,-16(r13)
   82e58:	61000017 	ldw	r4,0(r12)
   82e5c:	4a400404 	addi	r9,r9,16
   82e60:	42000404 	addi	r8,r8,16
   82e64:	593ffc15 	stw	r4,-16(r11)
   82e68:	51000017 	ldw	r4,0(r10)
   82e6c:	63000404 	addi	r12,r12,16
   82e70:	52800404 	addi	r10,r10,16
   82e74:	493ffc15 	stw	r4,-16(r9)
   82e78:	1bbfef1e 	bne	r3,r14,82e38 <rx_descriptor_end+0xfff82dd8>
   82e7c:	79000044 	addi	r4,r15,1
   82e80:	2008913a 	slli	r4,r4,4
   82e84:	328003cc 	andi	r10,r6,15
   82e88:	02c000c4 	movi	r11,3
   82e8c:	1107883a 	add	r3,r2,r4
   82e90:	290b883a 	add	r5,r5,r4
   82e94:	5a801e2e 	bgeu	r11,r10,82f10 <memmove+0x154>
   82e98:	1813883a 	mov	r9,r3
   82e9c:	2811883a 	mov	r8,r5
   82ea0:	500f883a 	mov	r7,r10
   82ea4:	41000017 	ldw	r4,0(r8)
   82ea8:	4a400104 	addi	r9,r9,4
   82eac:	39ffff04 	addi	r7,r7,-4
   82eb0:	493fff15 	stw	r4,-4(r9)
   82eb4:	42000104 	addi	r8,r8,4
   82eb8:	59fffa36 	bltu	r11,r7,82ea4 <rx_descriptor_end+0xfff82e44>
   82ebc:	513fff04 	addi	r4,r10,-4
   82ec0:	2008d0ba 	srli	r4,r4,2
   82ec4:	318000cc 	andi	r6,r6,3
   82ec8:	21000044 	addi	r4,r4,1
   82ecc:	2109883a 	add	r4,r4,r4
   82ed0:	2109883a 	add	r4,r4,r4
   82ed4:	1907883a 	add	r3,r3,r4
   82ed8:	290b883a 	add	r5,r5,r4
   82edc:	30000b26 	beq	r6,zero,82f0c <memmove+0x150>
   82ee0:	198d883a 	add	r6,r3,r6
   82ee4:	29c00003 	ldbu	r7,0(r5)
   82ee8:	18c00044 	addi	r3,r3,1
   82eec:	29400044 	addi	r5,r5,1
   82ef0:	19ffffc5 	stb	r7,-1(r3)
   82ef4:	19bffb1e 	bne	r3,r6,82ee4 <rx_descriptor_end+0xfff82e84>
   82ef8:	f800283a 	ret
   82efc:	1007883a 	mov	r3,r2
   82f00:	003ff606 	br	82edc <rx_descriptor_end+0xfff82e7c>
   82f04:	1007883a 	mov	r3,r2
   82f08:	003ff506 	br	82ee0 <rx_descriptor_end+0xfff82e80>
   82f0c:	f800283a 	ret
   82f10:	500d883a 	mov	r6,r10
   82f14:	003ff106 	br	82edc <rx_descriptor_end+0xfff82e7c>

00082f18 <memset>:
   82f18:	20c000cc 	andi	r3,r4,3
   82f1c:	2005883a 	mov	r2,r4
   82f20:	18004426 	beq	r3,zero,83034 <memset+0x11c>
   82f24:	31ffffc4 	addi	r7,r6,-1
   82f28:	30004026 	beq	r6,zero,8302c <memset+0x114>
   82f2c:	2813883a 	mov	r9,r5
   82f30:	200d883a 	mov	r6,r4
   82f34:	2007883a 	mov	r3,r4
   82f38:	00000406 	br	82f4c <memset+0x34>
   82f3c:	3a3fffc4 	addi	r8,r7,-1
   82f40:	31800044 	addi	r6,r6,1
   82f44:	38003926 	beq	r7,zero,8302c <memset+0x114>
   82f48:	400f883a 	mov	r7,r8
   82f4c:	18c00044 	addi	r3,r3,1
   82f50:	32400005 	stb	r9,0(r6)
   82f54:	1a0000cc 	andi	r8,r3,3
   82f58:	403ff81e 	bne	r8,zero,82f3c <rx_descriptor_end+0xfff82edc>
   82f5c:	010000c4 	movi	r4,3
   82f60:	21c02d2e 	bgeu	r4,r7,83018 <memset+0x100>
   82f64:	29003fcc 	andi	r4,r5,255
   82f68:	200c923a 	slli	r6,r4,8
   82f6c:	3108b03a 	or	r4,r6,r4
   82f70:	200c943a 	slli	r6,r4,16
   82f74:	218cb03a 	or	r6,r4,r6
   82f78:	010003c4 	movi	r4,15
   82f7c:	21c0182e 	bgeu	r4,r7,82fe0 <memset+0xc8>
   82f80:	3b3ffc04 	addi	r12,r7,-16
   82f84:	6018d13a 	srli	r12,r12,4
   82f88:	1a000104 	addi	r8,r3,4
   82f8c:	1ac00204 	addi	r11,r3,8
   82f90:	6008913a 	slli	r4,r12,4
   82f94:	1a800304 	addi	r10,r3,12
   82f98:	1813883a 	mov	r9,r3
   82f9c:	21000504 	addi	r4,r4,20
   82fa0:	1909883a 	add	r4,r3,r4
   82fa4:	49800015 	stw	r6,0(r9)
   82fa8:	41800015 	stw	r6,0(r8)
   82fac:	59800015 	stw	r6,0(r11)
   82fb0:	51800015 	stw	r6,0(r10)
   82fb4:	42000404 	addi	r8,r8,16
   82fb8:	4a400404 	addi	r9,r9,16
   82fbc:	5ac00404 	addi	r11,r11,16
   82fc0:	52800404 	addi	r10,r10,16
   82fc4:	413ff71e 	bne	r8,r4,82fa4 <rx_descriptor_end+0xfff82f44>
   82fc8:	63000044 	addi	r12,r12,1
   82fcc:	6018913a 	slli	r12,r12,4
   82fd0:	39c003cc 	andi	r7,r7,15
   82fd4:	010000c4 	movi	r4,3
   82fd8:	1b07883a 	add	r3,r3,r12
   82fdc:	21c00e2e 	bgeu	r4,r7,83018 <memset+0x100>
   82fe0:	1813883a 	mov	r9,r3
   82fe4:	3811883a 	mov	r8,r7
   82fe8:	010000c4 	movi	r4,3
   82fec:	49800015 	stw	r6,0(r9)
   82ff0:	423fff04 	addi	r8,r8,-4
   82ff4:	4a400104 	addi	r9,r9,4
   82ff8:	223ffc36 	bltu	r4,r8,82fec <rx_descriptor_end+0xfff82f8c>
   82ffc:	393fff04 	addi	r4,r7,-4
   83000:	2008d0ba 	srli	r4,r4,2
   83004:	39c000cc 	andi	r7,r7,3
   83008:	21000044 	addi	r4,r4,1
   8300c:	2109883a 	add	r4,r4,r4
   83010:	2109883a 	add	r4,r4,r4
   83014:	1907883a 	add	r3,r3,r4
   83018:	38000526 	beq	r7,zero,83030 <memset+0x118>
   8301c:	19cf883a 	add	r7,r3,r7
   83020:	19400005 	stb	r5,0(r3)
   83024:	18c00044 	addi	r3,r3,1
   83028:	38fffd1e 	bne	r7,r3,83020 <rx_descriptor_end+0xfff82fc0>
   8302c:	f800283a 	ret
   83030:	f800283a 	ret
   83034:	2007883a 	mov	r3,r4
   83038:	300f883a 	mov	r7,r6
   8303c:	003fc706 	br	82f5c <rx_descriptor_end+0xfff82efc>

00083040 <_printf_r>:
   83040:	defffd04 	addi	sp,sp,-12
   83044:	2805883a 	mov	r2,r5
   83048:	dfc00015 	stw	ra,0(sp)
   8304c:	d9800115 	stw	r6,4(sp)
   83050:	d9c00215 	stw	r7,8(sp)
   83054:	21400217 	ldw	r5,8(r4)
   83058:	d9c00104 	addi	r7,sp,4
   8305c:	100d883a 	mov	r6,r2
   83060:	008323c0 	call	8323c <___vfprintf_internal_r>
   83064:	dfc00017 	ldw	ra,0(sp)
   83068:	dec00304 	addi	sp,sp,12
   8306c:	f800283a 	ret

00083070 <printf>:
   83070:	defffc04 	addi	sp,sp,-16
   83074:	dfc00015 	stw	ra,0(sp)
   83078:	d9400115 	stw	r5,4(sp)
   8307c:	d9800215 	stw	r6,8(sp)
   83080:	d9c00315 	stw	r7,12(sp)
   83084:	00800274 	movhi	r2,9
   83088:	10908204 	addi	r2,r2,16904
   8308c:	10800017 	ldw	r2,0(r2)
   83090:	200b883a 	mov	r5,r4
   83094:	d9800104 	addi	r6,sp,4
   83098:	11000217 	ldw	r4,8(r2)
   8309c:	00854340 	call	85434 <__vfprintf_internal>
   830a0:	dfc00017 	ldw	ra,0(sp)
   830a4:	dec00404 	addi	sp,sp,16
   830a8:	f800283a 	ret

000830ac <_sbrk_r>:
   830ac:	defffd04 	addi	sp,sp,-12
   830b0:	dc000015 	stw	r16,0(sp)
   830b4:	04000274 	movhi	r16,9
   830b8:	dc400115 	stw	r17,4(sp)
   830bc:	84187a04 	addi	r16,r16,25064
   830c0:	2023883a 	mov	r17,r4
   830c4:	2809883a 	mov	r4,r5
   830c8:	dfc00215 	stw	ra,8(sp)
   830cc:	80000015 	stw	zero,0(r16)
   830d0:	008ec080 	call	8ec08 <sbrk>
   830d4:	00ffffc4 	movi	r3,-1
   830d8:	10c00526 	beq	r2,r3,830f0 <_sbrk_r+0x44>
   830dc:	dfc00217 	ldw	ra,8(sp)
   830e0:	dc400117 	ldw	r17,4(sp)
   830e4:	dc000017 	ldw	r16,0(sp)
   830e8:	dec00304 	addi	sp,sp,12
   830ec:	f800283a 	ret
   830f0:	80c00017 	ldw	r3,0(r16)
   830f4:	183ff926 	beq	r3,zero,830dc <rx_descriptor_end+0xfff8307c>
   830f8:	88c00015 	stw	r3,0(r17)
   830fc:	003ff706 	br	830dc <rx_descriptor_end+0xfff8307c>

00083100 <__sread>:
   83100:	defffe04 	addi	sp,sp,-8
   83104:	dc000015 	stw	r16,0(sp)
   83108:	2821883a 	mov	r16,r5
   8310c:	2940038f 	ldh	r5,14(r5)
   83110:	dfc00115 	stw	ra,4(sp)
   83114:	00885c00 	call	885c0 <_read_r>
   83118:	10000716 	blt	r2,zero,83138 <__sread+0x38>
   8311c:	80c01417 	ldw	r3,80(r16)
   83120:	1887883a 	add	r3,r3,r2
   83124:	80c01415 	stw	r3,80(r16)
   83128:	dfc00117 	ldw	ra,4(sp)
   8312c:	dc000017 	ldw	r16,0(sp)
   83130:	dec00204 	addi	sp,sp,8
   83134:	f800283a 	ret
   83138:	80c0030b 	ldhu	r3,12(r16)
   8313c:	18fbffcc 	andi	r3,r3,61439
   83140:	80c0030d 	sth	r3,12(r16)
   83144:	dfc00117 	ldw	ra,4(sp)
   83148:	dc000017 	ldw	r16,0(sp)
   8314c:	dec00204 	addi	sp,sp,8
   83150:	f800283a 	ret

00083154 <__seofread>:
   83154:	0005883a 	mov	r2,zero
   83158:	f800283a 	ret

0008315c <__swrite>:
   8315c:	2880030b 	ldhu	r2,12(r5)
   83160:	defffb04 	addi	sp,sp,-20
   83164:	dcc00315 	stw	r19,12(sp)
   83168:	dc800215 	stw	r18,8(sp)
   8316c:	dc400115 	stw	r17,4(sp)
   83170:	dc000015 	stw	r16,0(sp)
   83174:	dfc00415 	stw	ra,16(sp)
   83178:	10c0400c 	andi	r3,r2,256
   8317c:	2821883a 	mov	r16,r5
   83180:	2023883a 	mov	r17,r4
   83184:	3025883a 	mov	r18,r6
   83188:	3827883a 	mov	r19,r7
   8318c:	18000526 	beq	r3,zero,831a4 <__swrite+0x48>
   83190:	2940038f 	ldh	r5,14(r5)
   83194:	01c00084 	movi	r7,2
   83198:	000d883a 	mov	r6,zero
   8319c:	008717c0 	call	8717c <_lseek_r>
   831a0:	8080030b 	ldhu	r2,12(r16)
   831a4:	8140038f 	ldh	r5,14(r16)
   831a8:	10bbffcc 	andi	r2,r2,61439
   831ac:	980f883a 	mov	r7,r19
   831b0:	900d883a 	mov	r6,r18
   831b4:	8809883a 	mov	r4,r17
   831b8:	8080030d 	sth	r2,12(r16)
   831bc:	dfc00417 	ldw	ra,16(sp)
   831c0:	dcc00317 	ldw	r19,12(sp)
   831c4:	dc800217 	ldw	r18,8(sp)
   831c8:	dc400117 	ldw	r17,4(sp)
   831cc:	dc000017 	ldw	r16,0(sp)
   831d0:	dec00504 	addi	sp,sp,20
   831d4:	008550c1 	jmpi	8550c <_write_r>

000831d8 <__sseek>:
   831d8:	defffe04 	addi	sp,sp,-8
   831dc:	dc000015 	stw	r16,0(sp)
   831e0:	2821883a 	mov	r16,r5
   831e4:	2940038f 	ldh	r5,14(r5)
   831e8:	dfc00115 	stw	ra,4(sp)
   831ec:	008717c0 	call	8717c <_lseek_r>
   831f0:	00ffffc4 	movi	r3,-1
   831f4:	10c00826 	beq	r2,r3,83218 <__sseek+0x40>
   831f8:	80c0030b 	ldhu	r3,12(r16)
   831fc:	80801415 	stw	r2,80(r16)
   83200:	18c40014 	ori	r3,r3,4096
   83204:	80c0030d 	sth	r3,12(r16)
   83208:	dfc00117 	ldw	ra,4(sp)
   8320c:	dc000017 	ldw	r16,0(sp)
   83210:	dec00204 	addi	sp,sp,8
   83214:	f800283a 	ret
   83218:	80c0030b 	ldhu	r3,12(r16)
   8321c:	18fbffcc 	andi	r3,r3,61439
   83220:	80c0030d 	sth	r3,12(r16)
   83224:	dfc00117 	ldw	ra,4(sp)
   83228:	dc000017 	ldw	r16,0(sp)
   8322c:	dec00204 	addi	sp,sp,8
   83230:	f800283a 	ret

00083234 <__sclose>:
   83234:	2940038f 	ldh	r5,14(r5)
   83238:	00856c01 	jmpi	856c0 <_close_r>

0008323c <___vfprintf_internal_r>:
   8323c:	deffb804 	addi	sp,sp,-288
   83240:	dfc04715 	stw	ra,284(sp)
   83244:	ddc04515 	stw	r23,276(sp)
   83248:	dd404315 	stw	r21,268(sp)
   8324c:	d9002c15 	stw	r4,176(sp)
   83250:	282f883a 	mov	r23,r5
   83254:	302b883a 	mov	r21,r6
   83258:	d9c02d15 	stw	r7,180(sp)
   8325c:	df004615 	stw	fp,280(sp)
   83260:	dd804415 	stw	r22,272(sp)
   83264:	dd004215 	stw	r20,264(sp)
   83268:	dcc04115 	stw	r19,260(sp)
   8326c:	dc804015 	stw	r18,256(sp)
   83270:	dc403f15 	stw	r17,252(sp)
   83274:	dc003e15 	stw	r16,248(sp)
   83278:	008714c0 	call	8714c <_localeconv_r>
   8327c:	10800017 	ldw	r2,0(r2)
   83280:	1009883a 	mov	r4,r2
   83284:	d8803415 	stw	r2,208(sp)
   83288:	00887700 	call	88770 <strlen>
   8328c:	d8803715 	stw	r2,220(sp)
   83290:	d8802c17 	ldw	r2,176(sp)
   83294:	10000226 	beq	r2,zero,832a0 <___vfprintf_internal_r+0x64>
   83298:	10800e17 	ldw	r2,56(r2)
   8329c:	1000f926 	beq	r2,zero,83684 <___vfprintf_internal_r+0x448>
   832a0:	b880030b 	ldhu	r2,12(r23)
   832a4:	10c8000c 	andi	r3,r2,8192
   832a8:	1800061e 	bne	r3,zero,832c4 <___vfprintf_internal_r+0x88>
   832ac:	b9001917 	ldw	r4,100(r23)
   832b0:	00f7ffc4 	movi	r3,-8193
   832b4:	10880014 	ori	r2,r2,8192
   832b8:	20c6703a 	and	r3,r4,r3
   832bc:	b880030d 	sth	r2,12(r23)
   832c0:	b8c01915 	stw	r3,100(r23)
   832c4:	10c0020c 	andi	r3,r2,8
   832c8:	1800c126 	beq	r3,zero,835d0 <___vfprintf_internal_r+0x394>
   832cc:	b8c00417 	ldw	r3,16(r23)
   832d0:	1800bf26 	beq	r3,zero,835d0 <___vfprintf_internal_r+0x394>
   832d4:	1080068c 	andi	r2,r2,26
   832d8:	00c00284 	movi	r3,10
   832dc:	10c0c426 	beq	r2,r3,835f0 <___vfprintf_internal_r+0x3b4>
   832e0:	d8c00404 	addi	r3,sp,16
   832e4:	05000274 	movhi	r20,9
   832e8:	d9001e04 	addi	r4,sp,120
   832ec:	a5080984 	addi	r20,r20,8230
   832f0:	d8c01e15 	stw	r3,120(sp)
   832f4:	d8002015 	stw	zero,128(sp)
   832f8:	d8001f15 	stw	zero,124(sp)
   832fc:	d8003315 	stw	zero,204(sp)
   83300:	d8003615 	stw	zero,216(sp)
   83304:	d8003815 	stw	zero,224(sp)
   83308:	1811883a 	mov	r8,r3
   8330c:	d8003915 	stw	zero,228(sp)
   83310:	d8003a15 	stw	zero,232(sp)
   83314:	d8002f15 	stw	zero,188(sp)
   83318:	d9002815 	stw	r4,160(sp)
   8331c:	a8800007 	ldb	r2,0(r21)
   83320:	10027b26 	beq	r2,zero,83d10 <___vfprintf_internal_r+0xad4>
   83324:	00c00944 	movi	r3,37
   83328:	a821883a 	mov	r16,r21
   8332c:	10c0021e 	bne	r2,r3,83338 <___vfprintf_internal_r+0xfc>
   83330:	00001406 	br	83384 <___vfprintf_internal_r+0x148>
   83334:	10c00326 	beq	r2,r3,83344 <___vfprintf_internal_r+0x108>
   83338:	84000044 	addi	r16,r16,1
   8333c:	80800007 	ldb	r2,0(r16)
   83340:	103ffc1e 	bne	r2,zero,83334 <rx_descriptor_end+0xfff832d4>
   83344:	8563c83a 	sub	r17,r16,r21
   83348:	88000e26 	beq	r17,zero,83384 <___vfprintf_internal_r+0x148>
   8334c:	d8c02017 	ldw	r3,128(sp)
   83350:	d8801f17 	ldw	r2,124(sp)
   83354:	45400015 	stw	r21,0(r8)
   83358:	1c47883a 	add	r3,r3,r17
   8335c:	10800044 	addi	r2,r2,1
   83360:	d8c02015 	stw	r3,128(sp)
   83364:	44400115 	stw	r17,4(r8)
   83368:	d8801f15 	stw	r2,124(sp)
   8336c:	00c001c4 	movi	r3,7
   83370:	1880a716 	blt	r3,r2,83610 <___vfprintf_internal_r+0x3d4>
   83374:	42000204 	addi	r8,r8,8
   83378:	d9402f17 	ldw	r5,188(sp)
   8337c:	2c4b883a 	add	r5,r5,r17
   83380:	d9402f15 	stw	r5,188(sp)
   83384:	80800007 	ldb	r2,0(r16)
   83388:	1000a826 	beq	r2,zero,8362c <___vfprintf_internal_r+0x3f0>
   8338c:	84400047 	ldb	r17,1(r16)
   83390:	00bfffc4 	movi	r2,-1
   83394:	85400044 	addi	r21,r16,1
   83398:	d8002785 	stb	zero,158(sp)
   8339c:	0007883a 	mov	r3,zero
   833a0:	000f883a 	mov	r7,zero
   833a4:	d8802915 	stw	r2,164(sp)
   833a8:	d8003115 	stw	zero,196(sp)
   833ac:	0025883a 	mov	r18,zero
   833b0:	01401604 	movi	r5,88
   833b4:	01800244 	movi	r6,9
   833b8:	02800a84 	movi	r10,42
   833bc:	02401b04 	movi	r9,108
   833c0:	ad400044 	addi	r21,r21,1
   833c4:	88bff804 	addi	r2,r17,-32
   833c8:	28830436 	bltu	r5,r2,83fdc <___vfprintf_internal_r+0xda0>
   833cc:	100490ba 	slli	r2,r2,2
   833d0:	01000234 	movhi	r4,8
   833d4:	210cf904 	addi	r4,r4,13284
   833d8:	1105883a 	add	r2,r2,r4
   833dc:	10800017 	ldw	r2,0(r2)
   833e0:	1000683a 	jmp	r2
   833e4:	00083efc 	xorhi	zero,zero,8443
   833e8:	00083fdc 	xori	zero,zero,8447
   833ec:	00083fdc 	xori	zero,zero,8447
   833f0:	00083f1c 	xori	zero,zero,8444
   833f4:	00083fdc 	xori	zero,zero,8447
   833f8:	00083fdc 	xori	zero,zero,8447
   833fc:	00083fdc 	xori	zero,zero,8447
   83400:	00083fdc 	xori	zero,zero,8447
   83404:	00083fdc 	xori	zero,zero,8447
   83408:	00083fdc 	xori	zero,zero,8447
   8340c:	00083690 	cmplti	zero,zero,8410
   83410:	00083e38 	rdprs	zero,zero,8440
   83414:	00083fdc 	xori	zero,zero,8447
   83418:	00083558 	cmpnei	zero,zero,8405
   8341c:	000836b8 	rdprs	zero,zero,8410
   83420:	00083fdc 	xori	zero,zero,8447
   83424:	000836f8 	rdprs	zero,zero,8411
   83428:	00083704 	movi	zero,8412
   8342c:	00083704 	movi	zero,8412
   83430:	00083704 	movi	zero,8412
   83434:	00083704 	movi	zero,8412
   83438:	00083704 	movi	zero,8412
   8343c:	00083704 	movi	zero,8412
   83440:	00083704 	movi	zero,8412
   83444:	00083704 	movi	zero,8412
   83448:	00083704 	movi	zero,8412
   8344c:	00083fdc 	xori	zero,zero,8447
   83450:	00083fdc 	xori	zero,zero,8447
   83454:	00083fdc 	xori	zero,zero,8447
   83458:	00083fdc 	xori	zero,zero,8447
   8345c:	00083fdc 	xori	zero,zero,8447
   83460:	00083fdc 	xori	zero,zero,8447
   83464:	00083fdc 	xori	zero,zero,8447
   83468:	00083fdc 	xori	zero,zero,8447
   8346c:	00083fdc 	xori	zero,zero,8447
   83470:	00083fdc 	xori	zero,zero,8447
   83474:	00083738 	rdprs	zero,zero,8412
   83478:	000837f4 	movhi	zero,8415
   8347c:	00083fdc 	xori	zero,zero,8447
   83480:	000837f4 	movhi	zero,8415
   83484:	00083fdc 	xori	zero,zero,8447
   83488:	00083fdc 	xori	zero,zero,8447
   8348c:	00083fdc 	xori	zero,zero,8447
   83490:	00083fdc 	xori	zero,zero,8447
   83494:	00083894 	movui	zero,8418
   83498:	00083fdc 	xori	zero,zero,8447
   8349c:	00083fdc 	xori	zero,zero,8447
   834a0:	000838a0 	cmpeqi	zero,zero,8418
   834a4:	00083fdc 	xori	zero,zero,8447
   834a8:	00083fdc 	xori	zero,zero,8447
   834ac:	00083fdc 	xori	zero,zero,8447
   834b0:	00083fdc 	xori	zero,zero,8447
   834b4:	00083fdc 	xori	zero,zero,8447
   834b8:	00083d18 	cmpnei	zero,zero,8436
   834bc:	00083fdc 	xori	zero,zero,8447
   834c0:	00083fdc 	xori	zero,zero,8447
   834c4:	00083d78 	rdprs	zero,zero,8437
   834c8:	00083fdc 	xori	zero,zero,8447
   834cc:	00083fdc 	xori	zero,zero,8447
   834d0:	00083fdc 	xori	zero,zero,8447
   834d4:	00083fdc 	xori	zero,zero,8447
   834d8:	00083fdc 	xori	zero,zero,8447
   834dc:	00083fdc 	xori	zero,zero,8447
   834e0:	00083fdc 	xori	zero,zero,8447
   834e4:	00083fdc 	xori	zero,zero,8447
   834e8:	00083fdc 	xori	zero,zero,8447
   834ec:	00083fdc 	xori	zero,zero,8447
   834f0:	00083f88 	cmpgei	zero,zero,8446
   834f4:	00083f28 	cmpgeui	zero,zero,8444
   834f8:	000837f4 	movhi	zero,8415
   834fc:	000837f4 	movhi	zero,8415
   83500:	000837f4 	movhi	zero,8415
   83504:	00083f38 	rdprs	zero,zero,8444
   83508:	00083f28 	cmpgeui	zero,zero,8444
   8350c:	00083fdc 	xori	zero,zero,8447
   83510:	00083fdc 	xori	zero,zero,8447
   83514:	00083f44 	movi	zero,8445
   83518:	00083fdc 	xori	zero,zero,8447
   8351c:	00083f54 	movui	zero,8445
   83520:	00083e28 	cmpgeui	zero,zero,8440
   83524:	00083564 	muli	zero,zero,8405
   83528:	00083e48 	cmpgei	zero,zero,8441
   8352c:	00083fdc 	xori	zero,zero,8447
   83530:	00083e54 	movui	zero,8441
   83534:	00083fdc 	xori	zero,zero,8447
   83538:	00083eb0 	cmpltui	zero,zero,8442
   8353c:	00083fdc 	xori	zero,zero,8447
   83540:	00083fdc 	xori	zero,zero,8447
   83544:	00083ec0 	call	83ec <__reset-0x77c14>
   83548:	d9003117 	ldw	r4,196(sp)
   8354c:	d8802d15 	stw	r2,180(sp)
   83550:	0109c83a 	sub	r4,zero,r4
   83554:	d9003115 	stw	r4,196(sp)
   83558:	94800114 	ori	r18,r18,4
   8355c:	ac400007 	ldb	r17,0(r21)
   83560:	003f9706 	br	833c0 <rx_descriptor_end+0xfff83360>
   83564:	00800c04 	movi	r2,48
   83568:	d9002d17 	ldw	r4,180(sp)
   8356c:	d9402917 	ldw	r5,164(sp)
   83570:	d8802705 	stb	r2,156(sp)
   83574:	00801e04 	movi	r2,120
   83578:	d8802745 	stb	r2,157(sp)
   8357c:	d8002785 	stb	zero,158(sp)
   83580:	20c00104 	addi	r3,r4,4
   83584:	24c00017 	ldw	r19,0(r4)
   83588:	002d883a 	mov	r22,zero
   8358c:	90800094 	ori	r2,r18,2
   83590:	28029a16 	blt	r5,zero,83ffc <___vfprintf_internal_r+0xdc0>
   83594:	00bfdfc4 	movi	r2,-129
   83598:	90a4703a 	and	r18,r18,r2
   8359c:	d8c02d15 	stw	r3,180(sp)
   835a0:	94800094 	ori	r18,r18,2
   835a4:	9802871e 	bne	r19,zero,83fc4 <___vfprintf_internal_r+0xd88>
   835a8:	00800274 	movhi	r2,9
   835ac:	10880204 	addi	r2,r2,8200
   835b0:	d8803915 	stw	r2,228(sp)
   835b4:	04401e04 	movi	r17,120
   835b8:	d8802917 	ldw	r2,164(sp)
   835bc:	0039883a 	mov	fp,zero
   835c0:	1001e926 	beq	r2,zero,83d68 <___vfprintf_internal_r+0xb2c>
   835c4:	0027883a 	mov	r19,zero
   835c8:	002d883a 	mov	r22,zero
   835cc:	00020506 	br	83de4 <___vfprintf_internal_r+0xba8>
   835d0:	d9002c17 	ldw	r4,176(sp)
   835d4:	b80b883a 	mov	r5,r23
   835d8:	008556c0 	call	8556c <__swsetup_r>
   835dc:	1005ac1e 	bne	r2,zero,84c90 <___vfprintf_internal_r+0x1a54>
   835e0:	b880030b 	ldhu	r2,12(r23)
   835e4:	00c00284 	movi	r3,10
   835e8:	1080068c 	andi	r2,r2,26
   835ec:	10ff3c1e 	bne	r2,r3,832e0 <rx_descriptor_end+0xfff83280>
   835f0:	b880038f 	ldh	r2,14(r23)
   835f4:	103f3a16 	blt	r2,zero,832e0 <rx_descriptor_end+0xfff83280>
   835f8:	d9c02d17 	ldw	r7,180(sp)
   835fc:	d9002c17 	ldw	r4,176(sp)
   83600:	a80d883a 	mov	r6,r21
   83604:	b80b883a 	mov	r5,r23
   83608:	00854500 	call	85450 <__sbprintf>
   8360c:	00001106 	br	83654 <___vfprintf_internal_r+0x418>
   83610:	d9002c17 	ldw	r4,176(sp)
   83614:	d9801e04 	addi	r6,sp,120
   83618:	b80b883a 	mov	r5,r23
   8361c:	00889040 	call	88904 <__sprint_r>
   83620:	1000081e 	bne	r2,zero,83644 <___vfprintf_internal_r+0x408>
   83624:	da000404 	addi	r8,sp,16
   83628:	003f5306 	br	83378 <rx_descriptor_end+0xfff83318>
   8362c:	d8802017 	ldw	r2,128(sp)
   83630:	10000426 	beq	r2,zero,83644 <___vfprintf_internal_r+0x408>
   83634:	d9002c17 	ldw	r4,176(sp)
   83638:	d9801e04 	addi	r6,sp,120
   8363c:	b80b883a 	mov	r5,r23
   83640:	00889040 	call	88904 <__sprint_r>
   83644:	b880030b 	ldhu	r2,12(r23)
   83648:	1080100c 	andi	r2,r2,64
   8364c:	1005901e 	bne	r2,zero,84c90 <___vfprintf_internal_r+0x1a54>
   83650:	d8802f17 	ldw	r2,188(sp)
   83654:	dfc04717 	ldw	ra,284(sp)
   83658:	df004617 	ldw	fp,280(sp)
   8365c:	ddc04517 	ldw	r23,276(sp)
   83660:	dd804417 	ldw	r22,272(sp)
   83664:	dd404317 	ldw	r21,268(sp)
   83668:	dd004217 	ldw	r20,264(sp)
   8366c:	dcc04117 	ldw	r19,260(sp)
   83670:	dc804017 	ldw	r18,256(sp)
   83674:	dc403f17 	ldw	r17,252(sp)
   83678:	dc003e17 	ldw	r16,248(sp)
   8367c:	dec04804 	addi	sp,sp,288
   83680:	f800283a 	ret
   83684:	d9002c17 	ldw	r4,176(sp)
   83688:	0081f7c0 	call	81f7c <__sinit>
   8368c:	003f0406 	br	832a0 <rx_descriptor_end+0xfff83240>
   83690:	d8802d17 	ldw	r2,180(sp)
   83694:	d9002d17 	ldw	r4,180(sp)
   83698:	10800017 	ldw	r2,0(r2)
   8369c:	d8803115 	stw	r2,196(sp)
   836a0:	20800104 	addi	r2,r4,4
   836a4:	d9003117 	ldw	r4,196(sp)
   836a8:	203fa716 	blt	r4,zero,83548 <rx_descriptor_end+0xfff834e8>
   836ac:	d8802d15 	stw	r2,180(sp)
   836b0:	ac400007 	ldb	r17,0(r21)
   836b4:	003f4206 	br	833c0 <rx_descriptor_end+0xfff83360>
   836b8:	ac400007 	ldb	r17,0(r21)
   836bc:	aac00044 	addi	r11,r21,1
   836c0:	8a872826 	beq	r17,r10,85364 <___vfprintf_internal_r+0x2128>
   836c4:	88bff404 	addi	r2,r17,-48
   836c8:	0009883a 	mov	r4,zero
   836cc:	30867d36 	bltu	r6,r2,850c4 <___vfprintf_internal_r+0x1e88>
   836d0:	5c400007 	ldb	r17,0(r11)
   836d4:	210002a4 	muli	r4,r4,10
   836d8:	5d400044 	addi	r21,r11,1
   836dc:	a817883a 	mov	r11,r21
   836e0:	2089883a 	add	r4,r4,r2
   836e4:	88bff404 	addi	r2,r17,-48
   836e8:	30bff92e 	bgeu	r6,r2,836d0 <rx_descriptor_end+0xfff83670>
   836ec:	2005c916 	blt	r4,zero,84e14 <___vfprintf_internal_r+0x1bd8>
   836f0:	d9002915 	stw	r4,164(sp)
   836f4:	003f3306 	br	833c4 <rx_descriptor_end+0xfff83364>
   836f8:	94802014 	ori	r18,r18,128
   836fc:	ac400007 	ldb	r17,0(r21)
   83700:	003f2f06 	br	833c0 <rx_descriptor_end+0xfff83360>
   83704:	a809883a 	mov	r4,r21
   83708:	d8003115 	stw	zero,196(sp)
   8370c:	88bff404 	addi	r2,r17,-48
   83710:	0017883a 	mov	r11,zero
   83714:	24400007 	ldb	r17,0(r4)
   83718:	5ac002a4 	muli	r11,r11,10
   8371c:	ad400044 	addi	r21,r21,1
   83720:	a809883a 	mov	r4,r21
   83724:	12d7883a 	add	r11,r2,r11
   83728:	88bff404 	addi	r2,r17,-48
   8372c:	30bff92e 	bgeu	r6,r2,83714 <rx_descriptor_end+0xfff836b4>
   83730:	dac03115 	stw	r11,196(sp)
   83734:	003f2306 	br	833c4 <rx_descriptor_end+0xfff83364>
   83738:	18c03fcc 	andi	r3,r3,255
   8373c:	18072b1e 	bne	r3,zero,853ec <___vfprintf_internal_r+0x21b0>
   83740:	94800414 	ori	r18,r18,16
   83744:	9080080c 	andi	r2,r18,32
   83748:	10037b26 	beq	r2,zero,84538 <___vfprintf_internal_r+0x12fc>
   8374c:	d9402d17 	ldw	r5,180(sp)
   83750:	28800117 	ldw	r2,4(r5)
   83754:	2cc00017 	ldw	r19,0(r5)
   83758:	29400204 	addi	r5,r5,8
   8375c:	d9402d15 	stw	r5,180(sp)
   83760:	102d883a 	mov	r22,r2
   83764:	10044b16 	blt	r2,zero,84894 <___vfprintf_internal_r+0x1658>
   83768:	d9402917 	ldw	r5,164(sp)
   8376c:	df002783 	ldbu	fp,158(sp)
   83770:	2803bc16 	blt	r5,zero,84664 <___vfprintf_internal_r+0x1428>
   83774:	00ffdfc4 	movi	r3,-129
   83778:	9d84b03a 	or	r2,r19,r22
   8377c:	90e4703a 	and	r18,r18,r3
   83780:	10017726 	beq	r2,zero,83d60 <___vfprintf_internal_r+0xb24>
   83784:	b0038326 	beq	r22,zero,84594 <___vfprintf_internal_r+0x1358>
   83788:	dc402a15 	stw	r17,168(sp)
   8378c:	dc001e04 	addi	r16,sp,120
   83790:	b023883a 	mov	r17,r22
   83794:	402d883a 	mov	r22,r8
   83798:	9809883a 	mov	r4,r19
   8379c:	880b883a 	mov	r5,r17
   837a0:	01800284 	movi	r6,10
   837a4:	000f883a 	mov	r7,zero
   837a8:	008b4a40 	call	8b4a4 <__umoddi3>
   837ac:	10800c04 	addi	r2,r2,48
   837b0:	843fffc4 	addi	r16,r16,-1
   837b4:	9809883a 	mov	r4,r19
   837b8:	880b883a 	mov	r5,r17
   837bc:	80800005 	stb	r2,0(r16)
   837c0:	01800284 	movi	r6,10
   837c4:	000f883a 	mov	r7,zero
   837c8:	008af2c0 	call	8af2c <__udivdi3>
   837cc:	1027883a 	mov	r19,r2
   837d0:	10c4b03a 	or	r2,r2,r3
   837d4:	1823883a 	mov	r17,r3
   837d8:	103fef1e 	bne	r2,zero,83798 <rx_descriptor_end+0xfff83738>
   837dc:	d8c02817 	ldw	r3,160(sp)
   837e0:	dc402a17 	ldw	r17,168(sp)
   837e4:	b011883a 	mov	r8,r22
   837e8:	1c07c83a 	sub	r3,r3,r16
   837ec:	d8c02e15 	stw	r3,184(sp)
   837f0:	00005906 	br	83958 <___vfprintf_internal_r+0x71c>
   837f4:	18c03fcc 	andi	r3,r3,255
   837f8:	1806fa1e 	bne	r3,zero,853e4 <___vfprintf_internal_r+0x21a8>
   837fc:	9080020c 	andi	r2,r18,8
   83800:	10048a26 	beq	r2,zero,84a2c <___vfprintf_internal_r+0x17f0>
   83804:	d8c02d17 	ldw	r3,180(sp)
   83808:	d9002d17 	ldw	r4,180(sp)
   8380c:	d9402d17 	ldw	r5,180(sp)
   83810:	18c00017 	ldw	r3,0(r3)
   83814:	21000117 	ldw	r4,4(r4)
   83818:	29400204 	addi	r5,r5,8
   8381c:	d8c03615 	stw	r3,216(sp)
   83820:	d9003815 	stw	r4,224(sp)
   83824:	d9402d15 	stw	r5,180(sp)
   83828:	d9003617 	ldw	r4,216(sp)
   8382c:	d9403817 	ldw	r5,224(sp)
   83830:	da003d15 	stw	r8,244(sp)
   83834:	04000044 	movi	r16,1
   83838:	00886200 	call	88620 <__fpclassifyd>
   8383c:	da003d17 	ldw	r8,244(sp)
   83840:	14041f1e 	bne	r2,r16,848c0 <___vfprintf_internal_r+0x1684>
   83844:	d9003617 	ldw	r4,216(sp)
   83848:	d9403817 	ldw	r5,224(sp)
   8384c:	000d883a 	mov	r6,zero
   83850:	000f883a 	mov	r7,zero
   83854:	008ce880 	call	8ce88 <__ledf2>
   83858:	da003d17 	ldw	r8,244(sp)
   8385c:	1005be16 	blt	r2,zero,84f58 <___vfprintf_internal_r+0x1d1c>
   83860:	df002783 	ldbu	fp,158(sp)
   83864:	008011c4 	movi	r2,71
   83868:	1445330e 	bge	r2,r17,84d38 <___vfprintf_internal_r+0x1afc>
   8386c:	04000274 	movhi	r16,9
   83870:	8407fa04 	addi	r16,r16,8168
   83874:	00c000c4 	movi	r3,3
   83878:	00bfdfc4 	movi	r2,-129
   8387c:	d8c02a15 	stw	r3,168(sp)
   83880:	90a4703a 	and	r18,r18,r2
   83884:	d8c02e15 	stw	r3,184(sp)
   83888:	d8002915 	stw	zero,164(sp)
   8388c:	d8003215 	stw	zero,200(sp)
   83890:	00003706 	br	83970 <___vfprintf_internal_r+0x734>
   83894:	94800214 	ori	r18,r18,8
   83898:	ac400007 	ldb	r17,0(r21)
   8389c:	003ec806 	br	833c0 <rx_descriptor_end+0xfff83360>
   838a0:	18c03fcc 	andi	r3,r3,255
   838a4:	1806db1e 	bne	r3,zero,85414 <___vfprintf_internal_r+0x21d8>
   838a8:	94800414 	ori	r18,r18,16
   838ac:	9080080c 	andi	r2,r18,32
   838b0:	1002d826 	beq	r2,zero,84414 <___vfprintf_internal_r+0x11d8>
   838b4:	d9402d17 	ldw	r5,180(sp)
   838b8:	d8c02917 	ldw	r3,164(sp)
   838bc:	d8002785 	stb	zero,158(sp)
   838c0:	28800204 	addi	r2,r5,8
   838c4:	2cc00017 	ldw	r19,0(r5)
   838c8:	2d800117 	ldw	r22,4(r5)
   838cc:	18048f16 	blt	r3,zero,84b0c <___vfprintf_internal_r+0x18d0>
   838d0:	013fdfc4 	movi	r4,-129
   838d4:	9d86b03a 	or	r3,r19,r22
   838d8:	d8802d15 	stw	r2,180(sp)
   838dc:	9124703a 	and	r18,r18,r4
   838e0:	1802d91e 	bne	r3,zero,84448 <___vfprintf_internal_r+0x120c>
   838e4:	d8c02917 	ldw	r3,164(sp)
   838e8:	0039883a 	mov	fp,zero
   838ec:	1805c326 	beq	r3,zero,84ffc <___vfprintf_internal_r+0x1dc0>
   838f0:	0027883a 	mov	r19,zero
   838f4:	002d883a 	mov	r22,zero
   838f8:	dc001e04 	addi	r16,sp,120
   838fc:	9806d0fa 	srli	r3,r19,3
   83900:	b008977a 	slli	r4,r22,29
   83904:	b02cd0fa 	srli	r22,r22,3
   83908:	9cc001cc 	andi	r19,r19,7
   8390c:	98800c04 	addi	r2,r19,48
   83910:	843fffc4 	addi	r16,r16,-1
   83914:	20e6b03a 	or	r19,r4,r3
   83918:	80800005 	stb	r2,0(r16)
   8391c:	9d86b03a 	or	r3,r19,r22
   83920:	183ff61e 	bne	r3,zero,838fc <rx_descriptor_end+0xfff8389c>
   83924:	90c0004c 	andi	r3,r18,1
   83928:	18013b26 	beq	r3,zero,83e18 <___vfprintf_internal_r+0xbdc>
   8392c:	10803fcc 	andi	r2,r2,255
   83930:	1080201c 	xori	r2,r2,128
   83934:	10bfe004 	addi	r2,r2,-128
   83938:	00c00c04 	movi	r3,48
   8393c:	10c13626 	beq	r2,r3,83e18 <___vfprintf_internal_r+0xbdc>
   83940:	80ffffc5 	stb	r3,-1(r16)
   83944:	d8c02817 	ldw	r3,160(sp)
   83948:	80bfffc4 	addi	r2,r16,-1
   8394c:	1021883a 	mov	r16,r2
   83950:	1887c83a 	sub	r3,r3,r2
   83954:	d8c02e15 	stw	r3,184(sp)
   83958:	d8802e17 	ldw	r2,184(sp)
   8395c:	d9002917 	ldw	r4,164(sp)
   83960:	1100010e 	bge	r2,r4,83968 <___vfprintf_internal_r+0x72c>
   83964:	2005883a 	mov	r2,r4
   83968:	d8802a15 	stw	r2,168(sp)
   8396c:	d8003215 	stw	zero,200(sp)
   83970:	e7003fcc 	andi	fp,fp,255
   83974:	e700201c 	xori	fp,fp,128
   83978:	e73fe004 	addi	fp,fp,-128
   8397c:	e0000326 	beq	fp,zero,8398c <___vfprintf_internal_r+0x750>
   83980:	d8c02a17 	ldw	r3,168(sp)
   83984:	18c00044 	addi	r3,r3,1
   83988:	d8c02a15 	stw	r3,168(sp)
   8398c:	90c0008c 	andi	r3,r18,2
   83990:	d8c02b15 	stw	r3,172(sp)
   83994:	18000326 	beq	r3,zero,839a4 <___vfprintf_internal_r+0x768>
   83998:	d8c02a17 	ldw	r3,168(sp)
   8399c:	18c00084 	addi	r3,r3,2
   839a0:	d8c02a15 	stw	r3,168(sp)
   839a4:	90c0210c 	andi	r3,r18,132
   839a8:	d8c03015 	stw	r3,192(sp)
   839ac:	1801a31e 	bne	r3,zero,8403c <___vfprintf_internal_r+0xe00>
   839b0:	d9003117 	ldw	r4,196(sp)
   839b4:	d8c02a17 	ldw	r3,168(sp)
   839b8:	20e7c83a 	sub	r19,r4,r3
   839bc:	04c19f0e 	bge	zero,r19,8403c <___vfprintf_internal_r+0xe00>
   839c0:	02400404 	movi	r9,16
   839c4:	d8c02017 	ldw	r3,128(sp)
   839c8:	d8801f17 	ldw	r2,124(sp)
   839cc:	4cc50d0e 	bge	r9,r19,84e04 <___vfprintf_internal_r+0x1bc8>
   839d0:	01400274 	movhi	r5,9
   839d4:	29480d84 	addi	r5,r5,8246
   839d8:	dc403b15 	stw	r17,236(sp)
   839dc:	d9403515 	stw	r5,212(sp)
   839e0:	9823883a 	mov	r17,r19
   839e4:	482d883a 	mov	r22,r9
   839e8:	9027883a 	mov	r19,r18
   839ec:	070001c4 	movi	fp,7
   839f0:	8025883a 	mov	r18,r16
   839f4:	dc002c17 	ldw	r16,176(sp)
   839f8:	00000306 	br	83a08 <___vfprintf_internal_r+0x7cc>
   839fc:	8c7ffc04 	addi	r17,r17,-16
   83a00:	42000204 	addi	r8,r8,8
   83a04:	b440130e 	bge	r22,r17,83a54 <___vfprintf_internal_r+0x818>
   83a08:	01000274 	movhi	r4,9
   83a0c:	18c00404 	addi	r3,r3,16
   83a10:	10800044 	addi	r2,r2,1
   83a14:	21080d84 	addi	r4,r4,8246
   83a18:	41000015 	stw	r4,0(r8)
   83a1c:	45800115 	stw	r22,4(r8)
   83a20:	d8c02015 	stw	r3,128(sp)
   83a24:	d8801f15 	stw	r2,124(sp)
   83a28:	e0bff40e 	bge	fp,r2,839fc <rx_descriptor_end+0xfff8399c>
   83a2c:	d9801e04 	addi	r6,sp,120
   83a30:	b80b883a 	mov	r5,r23
   83a34:	8009883a 	mov	r4,r16
   83a38:	00889040 	call	88904 <__sprint_r>
   83a3c:	103f011e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   83a40:	8c7ffc04 	addi	r17,r17,-16
   83a44:	d8c02017 	ldw	r3,128(sp)
   83a48:	d8801f17 	ldw	r2,124(sp)
   83a4c:	da000404 	addi	r8,sp,16
   83a50:	b47fed16 	blt	r22,r17,83a08 <rx_descriptor_end+0xfff839a8>
   83a54:	9021883a 	mov	r16,r18
   83a58:	9825883a 	mov	r18,r19
   83a5c:	8827883a 	mov	r19,r17
   83a60:	dc403b17 	ldw	r17,236(sp)
   83a64:	d9403517 	ldw	r5,212(sp)
   83a68:	98c7883a 	add	r3,r19,r3
   83a6c:	10800044 	addi	r2,r2,1
   83a70:	41400015 	stw	r5,0(r8)
   83a74:	44c00115 	stw	r19,4(r8)
   83a78:	d8c02015 	stw	r3,128(sp)
   83a7c:	d8801f15 	stw	r2,124(sp)
   83a80:	010001c4 	movi	r4,7
   83a84:	2082a316 	blt	r4,r2,84514 <___vfprintf_internal_r+0x12d8>
   83a88:	df002787 	ldb	fp,158(sp)
   83a8c:	42000204 	addi	r8,r8,8
   83a90:	e0000c26 	beq	fp,zero,83ac4 <___vfprintf_internal_r+0x888>
   83a94:	d8801f17 	ldw	r2,124(sp)
   83a98:	d9002784 	addi	r4,sp,158
   83a9c:	18c00044 	addi	r3,r3,1
   83aa0:	10800044 	addi	r2,r2,1
   83aa4:	41000015 	stw	r4,0(r8)
   83aa8:	01000044 	movi	r4,1
   83aac:	41000115 	stw	r4,4(r8)
   83ab0:	d8c02015 	stw	r3,128(sp)
   83ab4:	d8801f15 	stw	r2,124(sp)
   83ab8:	010001c4 	movi	r4,7
   83abc:	20823c16 	blt	r4,r2,843b0 <___vfprintf_internal_r+0x1174>
   83ac0:	42000204 	addi	r8,r8,8
   83ac4:	d8802b17 	ldw	r2,172(sp)
   83ac8:	10000c26 	beq	r2,zero,83afc <___vfprintf_internal_r+0x8c0>
   83acc:	d8801f17 	ldw	r2,124(sp)
   83ad0:	d9002704 	addi	r4,sp,156
   83ad4:	18c00084 	addi	r3,r3,2
   83ad8:	10800044 	addi	r2,r2,1
   83adc:	41000015 	stw	r4,0(r8)
   83ae0:	01000084 	movi	r4,2
   83ae4:	41000115 	stw	r4,4(r8)
   83ae8:	d8c02015 	stw	r3,128(sp)
   83aec:	d8801f15 	stw	r2,124(sp)
   83af0:	010001c4 	movi	r4,7
   83af4:	20823616 	blt	r4,r2,843d0 <___vfprintf_internal_r+0x1194>
   83af8:	42000204 	addi	r8,r8,8
   83afc:	d9003017 	ldw	r4,192(sp)
   83b00:	00802004 	movi	r2,128
   83b04:	20819926 	beq	r4,r2,8416c <___vfprintf_internal_r+0xf30>
   83b08:	d9402917 	ldw	r5,164(sp)
   83b0c:	d8802e17 	ldw	r2,184(sp)
   83b10:	28adc83a 	sub	r22,r5,r2
   83b14:	0580310e 	bge	zero,r22,83bdc <___vfprintf_internal_r+0x9a0>
   83b18:	07000404 	movi	fp,16
   83b1c:	d8801f17 	ldw	r2,124(sp)
   83b20:	e584140e 	bge	fp,r22,84b74 <___vfprintf_internal_r+0x1938>
   83b24:	01400274 	movhi	r5,9
   83b28:	29480984 	addi	r5,r5,8230
   83b2c:	dc402915 	stw	r17,164(sp)
   83b30:	d9402b15 	stw	r5,172(sp)
   83b34:	b023883a 	mov	r17,r22
   83b38:	04c001c4 	movi	r19,7
   83b3c:	a82d883a 	mov	r22,r21
   83b40:	902b883a 	mov	r21,r18
   83b44:	8025883a 	mov	r18,r16
   83b48:	dc002c17 	ldw	r16,176(sp)
   83b4c:	00000306 	br	83b5c <___vfprintf_internal_r+0x920>
   83b50:	8c7ffc04 	addi	r17,r17,-16
   83b54:	42000204 	addi	r8,r8,8
   83b58:	e440110e 	bge	fp,r17,83ba0 <___vfprintf_internal_r+0x964>
   83b5c:	18c00404 	addi	r3,r3,16
   83b60:	10800044 	addi	r2,r2,1
   83b64:	45000015 	stw	r20,0(r8)
   83b68:	47000115 	stw	fp,4(r8)
   83b6c:	d8c02015 	stw	r3,128(sp)
   83b70:	d8801f15 	stw	r2,124(sp)
   83b74:	98bff60e 	bge	r19,r2,83b50 <rx_descriptor_end+0xfff83af0>
   83b78:	d9801e04 	addi	r6,sp,120
   83b7c:	b80b883a 	mov	r5,r23
   83b80:	8009883a 	mov	r4,r16
   83b84:	00889040 	call	88904 <__sprint_r>
   83b88:	103eae1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   83b8c:	8c7ffc04 	addi	r17,r17,-16
   83b90:	d8c02017 	ldw	r3,128(sp)
   83b94:	d8801f17 	ldw	r2,124(sp)
   83b98:	da000404 	addi	r8,sp,16
   83b9c:	e47fef16 	blt	fp,r17,83b5c <rx_descriptor_end+0xfff83afc>
   83ba0:	9021883a 	mov	r16,r18
   83ba4:	a825883a 	mov	r18,r21
   83ba8:	b02b883a 	mov	r21,r22
   83bac:	882d883a 	mov	r22,r17
   83bb0:	dc402917 	ldw	r17,164(sp)
   83bb4:	d9002b17 	ldw	r4,172(sp)
   83bb8:	1d87883a 	add	r3,r3,r22
   83bbc:	10800044 	addi	r2,r2,1
   83bc0:	41000015 	stw	r4,0(r8)
   83bc4:	45800115 	stw	r22,4(r8)
   83bc8:	d8c02015 	stw	r3,128(sp)
   83bcc:	d8801f15 	stw	r2,124(sp)
   83bd0:	010001c4 	movi	r4,7
   83bd4:	2081ee16 	blt	r4,r2,84390 <___vfprintf_internal_r+0x1154>
   83bd8:	42000204 	addi	r8,r8,8
   83bdc:	9080400c 	andi	r2,r18,256
   83be0:	1001181e 	bne	r2,zero,84044 <___vfprintf_internal_r+0xe08>
   83be4:	d9402e17 	ldw	r5,184(sp)
   83be8:	d8801f17 	ldw	r2,124(sp)
   83bec:	44000015 	stw	r16,0(r8)
   83bf0:	1947883a 	add	r3,r3,r5
   83bf4:	10800044 	addi	r2,r2,1
   83bf8:	41400115 	stw	r5,4(r8)
   83bfc:	d8c02015 	stw	r3,128(sp)
   83c00:	d8801f15 	stw	r2,124(sp)
   83c04:	010001c4 	movi	r4,7
   83c08:	2081d316 	blt	r4,r2,84358 <___vfprintf_internal_r+0x111c>
   83c0c:	42000204 	addi	r8,r8,8
   83c10:	9480010c 	andi	r18,r18,4
   83c14:	90003226 	beq	r18,zero,83ce0 <___vfprintf_internal_r+0xaa4>
   83c18:	d9403117 	ldw	r5,196(sp)
   83c1c:	d8802a17 	ldw	r2,168(sp)
   83c20:	28a1c83a 	sub	r16,r5,r2
   83c24:	04002e0e 	bge	zero,r16,83ce0 <___vfprintf_internal_r+0xaa4>
   83c28:	04400404 	movi	r17,16
   83c2c:	d8801f17 	ldw	r2,124(sp)
   83c30:	8c04a20e 	bge	r17,r16,84ebc <___vfprintf_internal_r+0x1c80>
   83c34:	01400274 	movhi	r5,9
   83c38:	29480d84 	addi	r5,r5,8246
   83c3c:	d9403515 	stw	r5,212(sp)
   83c40:	048001c4 	movi	r18,7
   83c44:	dcc02c17 	ldw	r19,176(sp)
   83c48:	00000306 	br	83c58 <___vfprintf_internal_r+0xa1c>
   83c4c:	843ffc04 	addi	r16,r16,-16
   83c50:	42000204 	addi	r8,r8,8
   83c54:	8c00130e 	bge	r17,r16,83ca4 <___vfprintf_internal_r+0xa68>
   83c58:	01000274 	movhi	r4,9
   83c5c:	18c00404 	addi	r3,r3,16
   83c60:	10800044 	addi	r2,r2,1
   83c64:	21080d84 	addi	r4,r4,8246
   83c68:	41000015 	stw	r4,0(r8)
   83c6c:	44400115 	stw	r17,4(r8)
   83c70:	d8c02015 	stw	r3,128(sp)
   83c74:	d8801f15 	stw	r2,124(sp)
   83c78:	90bff40e 	bge	r18,r2,83c4c <rx_descriptor_end+0xfff83bec>
   83c7c:	d9801e04 	addi	r6,sp,120
   83c80:	b80b883a 	mov	r5,r23
   83c84:	9809883a 	mov	r4,r19
   83c88:	00889040 	call	88904 <__sprint_r>
   83c8c:	103e6d1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   83c90:	843ffc04 	addi	r16,r16,-16
   83c94:	d8c02017 	ldw	r3,128(sp)
   83c98:	d8801f17 	ldw	r2,124(sp)
   83c9c:	da000404 	addi	r8,sp,16
   83ca0:	8c3fed16 	blt	r17,r16,83c58 <rx_descriptor_end+0xfff83bf8>
   83ca4:	d9403517 	ldw	r5,212(sp)
   83ca8:	1c07883a 	add	r3,r3,r16
   83cac:	10800044 	addi	r2,r2,1
   83cb0:	41400015 	stw	r5,0(r8)
   83cb4:	44000115 	stw	r16,4(r8)
   83cb8:	d8c02015 	stw	r3,128(sp)
   83cbc:	d8801f15 	stw	r2,124(sp)
   83cc0:	010001c4 	movi	r4,7
   83cc4:	2080060e 	bge	r4,r2,83ce0 <___vfprintf_internal_r+0xaa4>
   83cc8:	d9002c17 	ldw	r4,176(sp)
   83ccc:	d9801e04 	addi	r6,sp,120
   83cd0:	b80b883a 	mov	r5,r23
   83cd4:	00889040 	call	88904 <__sprint_r>
   83cd8:	103e5a1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   83cdc:	d8c02017 	ldw	r3,128(sp)
   83ce0:	d8803117 	ldw	r2,196(sp)
   83ce4:	d9002a17 	ldw	r4,168(sp)
   83ce8:	1100010e 	bge	r2,r4,83cf0 <___vfprintf_internal_r+0xab4>
   83cec:	2005883a 	mov	r2,r4
   83cf0:	d9402f17 	ldw	r5,188(sp)
   83cf4:	288b883a 	add	r5,r5,r2
   83cf8:	d9402f15 	stw	r5,188(sp)
   83cfc:	18019e1e 	bne	r3,zero,84378 <___vfprintf_internal_r+0x113c>
   83d00:	a8800007 	ldb	r2,0(r21)
   83d04:	d8001f15 	stw	zero,124(sp)
   83d08:	da000404 	addi	r8,sp,16
   83d0c:	103d851e 	bne	r2,zero,83324 <rx_descriptor_end+0xfff832c4>
   83d10:	a821883a 	mov	r16,r21
   83d14:	003d9b06 	br	83384 <rx_descriptor_end+0xfff83324>
   83d18:	18c03fcc 	andi	r3,r3,255
   83d1c:	1805c11e 	bne	r3,zero,85424 <___vfprintf_internal_r+0x21e8>
   83d20:	94800414 	ori	r18,r18,16
   83d24:	9080080c 	andi	r2,r18,32
   83d28:	10020c26 	beq	r2,zero,8455c <___vfprintf_internal_r+0x1320>
   83d2c:	d8802d17 	ldw	r2,180(sp)
   83d30:	d9002917 	ldw	r4,164(sp)
   83d34:	d8002785 	stb	zero,158(sp)
   83d38:	10c00204 	addi	r3,r2,8
   83d3c:	14c00017 	ldw	r19,0(r2)
   83d40:	15800117 	ldw	r22,4(r2)
   83d44:	20040f16 	blt	r4,zero,84d84 <___vfprintf_internal_r+0x1b48>
   83d48:	013fdfc4 	movi	r4,-129
   83d4c:	9d84b03a 	or	r2,r19,r22
   83d50:	d8c02d15 	stw	r3,180(sp)
   83d54:	9124703a 	and	r18,r18,r4
   83d58:	0039883a 	mov	fp,zero
   83d5c:	103e891e 	bne	r2,zero,83784 <rx_descriptor_end+0xfff83724>
   83d60:	d9002917 	ldw	r4,164(sp)
   83d64:	2002c11e 	bne	r4,zero,8486c <___vfprintf_internal_r+0x1630>
   83d68:	d8002915 	stw	zero,164(sp)
   83d6c:	d8002e15 	stw	zero,184(sp)
   83d70:	dc001e04 	addi	r16,sp,120
   83d74:	003ef806 	br	83958 <rx_descriptor_end+0xfff838f8>
   83d78:	18c03fcc 	andi	r3,r3,255
   83d7c:	18059d1e 	bne	r3,zero,853f4 <___vfprintf_internal_r+0x21b8>
   83d80:	01400274 	movhi	r5,9
   83d84:	2947fd04 	addi	r5,r5,8180
   83d88:	d9403915 	stw	r5,228(sp)
   83d8c:	9080080c 	andi	r2,r18,32
   83d90:	10005226 	beq	r2,zero,83edc <___vfprintf_internal_r+0xca0>
   83d94:	d8802d17 	ldw	r2,180(sp)
   83d98:	14c00017 	ldw	r19,0(r2)
   83d9c:	15800117 	ldw	r22,4(r2)
   83da0:	10800204 	addi	r2,r2,8
   83da4:	d8802d15 	stw	r2,180(sp)
   83da8:	9080004c 	andi	r2,r18,1
   83dac:	10019026 	beq	r2,zero,843f0 <___vfprintf_internal_r+0x11b4>
   83db0:	9d84b03a 	or	r2,r19,r22
   83db4:	10036926 	beq	r2,zero,84b5c <___vfprintf_internal_r+0x1920>
   83db8:	d8c02917 	ldw	r3,164(sp)
   83dbc:	00800c04 	movi	r2,48
   83dc0:	d8802705 	stb	r2,156(sp)
   83dc4:	dc402745 	stb	r17,157(sp)
   83dc8:	d8002785 	stb	zero,158(sp)
   83dcc:	90800094 	ori	r2,r18,2
   83dd0:	18045d16 	blt	r3,zero,84f48 <___vfprintf_internal_r+0x1d0c>
   83dd4:	00bfdfc4 	movi	r2,-129
   83dd8:	90a4703a 	and	r18,r18,r2
   83ddc:	94800094 	ori	r18,r18,2
   83de0:	0039883a 	mov	fp,zero
   83de4:	d9003917 	ldw	r4,228(sp)
   83de8:	dc001e04 	addi	r16,sp,120
   83dec:	988003cc 	andi	r2,r19,15
   83df0:	b006973a 	slli	r3,r22,28
   83df4:	2085883a 	add	r2,r4,r2
   83df8:	9826d13a 	srli	r19,r19,4
   83dfc:	10800003 	ldbu	r2,0(r2)
   83e00:	b02cd13a 	srli	r22,r22,4
   83e04:	843fffc4 	addi	r16,r16,-1
   83e08:	1ce6b03a 	or	r19,r3,r19
   83e0c:	80800005 	stb	r2,0(r16)
   83e10:	9d84b03a 	or	r2,r19,r22
   83e14:	103ff51e 	bne	r2,zero,83dec <rx_descriptor_end+0xfff83d8c>
   83e18:	d8c02817 	ldw	r3,160(sp)
   83e1c:	1c07c83a 	sub	r3,r3,r16
   83e20:	d8c02e15 	stw	r3,184(sp)
   83e24:	003ecc06 	br	83958 <rx_descriptor_end+0xfff838f8>
   83e28:	18c03fcc 	andi	r3,r3,255
   83e2c:	183e9f26 	beq	r3,zero,838ac <rx_descriptor_end+0xfff8384c>
   83e30:	d9c02785 	stb	r7,158(sp)
   83e34:	003e9d06 	br	838ac <rx_descriptor_end+0xfff8384c>
   83e38:	00c00044 	movi	r3,1
   83e3c:	01c00ac4 	movi	r7,43
   83e40:	ac400007 	ldb	r17,0(r21)
   83e44:	003d5e06 	br	833c0 <rx_descriptor_end+0xfff83360>
   83e48:	94800814 	ori	r18,r18,32
   83e4c:	ac400007 	ldb	r17,0(r21)
   83e50:	003d5b06 	br	833c0 <rx_descriptor_end+0xfff83360>
   83e54:	d8c02d17 	ldw	r3,180(sp)
   83e58:	d8002785 	stb	zero,158(sp)
   83e5c:	1c000017 	ldw	r16,0(r3)
   83e60:	1cc00104 	addi	r19,r3,4
   83e64:	80041926 	beq	r16,zero,84ecc <___vfprintf_internal_r+0x1c90>
   83e68:	d9002917 	ldw	r4,164(sp)
   83e6c:	2003d016 	blt	r4,zero,84db0 <___vfprintf_internal_r+0x1b74>
   83e70:	200d883a 	mov	r6,r4
   83e74:	000b883a 	mov	r5,zero
   83e78:	8009883a 	mov	r4,r16
   83e7c:	da003d15 	stw	r8,244(sp)
   83e80:	00873980 	call	87398 <memchr>
   83e84:	da003d17 	ldw	r8,244(sp)
   83e88:	10045426 	beq	r2,zero,84fdc <___vfprintf_internal_r+0x1da0>
   83e8c:	1405c83a 	sub	r2,r2,r16
   83e90:	d8802e15 	stw	r2,184(sp)
   83e94:	1003cc16 	blt	r2,zero,84dc8 <___vfprintf_internal_r+0x1b8c>
   83e98:	df002783 	ldbu	fp,158(sp)
   83e9c:	d8802a15 	stw	r2,168(sp)
   83ea0:	dcc02d15 	stw	r19,180(sp)
   83ea4:	d8002915 	stw	zero,164(sp)
   83ea8:	d8003215 	stw	zero,200(sp)
   83eac:	003eb006 	br	83970 <rx_descriptor_end+0xfff83910>
   83eb0:	18c03fcc 	andi	r3,r3,255
   83eb4:	183f9b26 	beq	r3,zero,83d24 <rx_descriptor_end+0xfff83cc4>
   83eb8:	d9c02785 	stb	r7,158(sp)
   83ebc:	003f9906 	br	83d24 <rx_descriptor_end+0xfff83cc4>
   83ec0:	18c03fcc 	andi	r3,r3,255
   83ec4:	1805551e 	bne	r3,zero,8541c <___vfprintf_internal_r+0x21e0>
   83ec8:	01400274 	movhi	r5,9
   83ecc:	29480204 	addi	r5,r5,8200
   83ed0:	d9403915 	stw	r5,228(sp)
   83ed4:	9080080c 	andi	r2,r18,32
   83ed8:	103fae1e 	bne	r2,zero,83d94 <rx_descriptor_end+0xfff83d34>
   83edc:	9080040c 	andi	r2,r18,16
   83ee0:	1002de26 	beq	r2,zero,84a5c <___vfprintf_internal_r+0x1820>
   83ee4:	d8c02d17 	ldw	r3,180(sp)
   83ee8:	002d883a 	mov	r22,zero
   83eec:	1cc00017 	ldw	r19,0(r3)
   83ef0:	18c00104 	addi	r3,r3,4
   83ef4:	d8c02d15 	stw	r3,180(sp)
   83ef8:	003fab06 	br	83da8 <rx_descriptor_end+0xfff83d48>
   83efc:	38803fcc 	andi	r2,r7,255
   83f00:	1080201c 	xori	r2,r2,128
   83f04:	10bfe004 	addi	r2,r2,-128
   83f08:	1002d21e 	bne	r2,zero,84a54 <___vfprintf_internal_r+0x1818>
   83f0c:	00c00044 	movi	r3,1
   83f10:	01c00804 	movi	r7,32
   83f14:	ac400007 	ldb	r17,0(r21)
   83f18:	003d2906 	br	833c0 <rx_descriptor_end+0xfff83360>
   83f1c:	94800054 	ori	r18,r18,1
   83f20:	ac400007 	ldb	r17,0(r21)
   83f24:	003d2606 	br	833c0 <rx_descriptor_end+0xfff83360>
   83f28:	18c03fcc 	andi	r3,r3,255
   83f2c:	183e0526 	beq	r3,zero,83744 <rx_descriptor_end+0xfff836e4>
   83f30:	d9c02785 	stb	r7,158(sp)
   83f34:	003e0306 	br	83744 <rx_descriptor_end+0xfff836e4>
   83f38:	94801014 	ori	r18,r18,64
   83f3c:	ac400007 	ldb	r17,0(r21)
   83f40:	003d1f06 	br	833c0 <rx_descriptor_end+0xfff83360>
   83f44:	ac400007 	ldb	r17,0(r21)
   83f48:	8a438726 	beq	r17,r9,84d68 <___vfprintf_internal_r+0x1b2c>
   83f4c:	94800414 	ori	r18,r18,16
   83f50:	003d1b06 	br	833c0 <rx_descriptor_end+0xfff83360>
   83f54:	18c03fcc 	andi	r3,r3,255
   83f58:	1805341e 	bne	r3,zero,8542c <___vfprintf_internal_r+0x21f0>
   83f5c:	9080080c 	andi	r2,r18,32
   83f60:	1002cd26 	beq	r2,zero,84a98 <___vfprintf_internal_r+0x185c>
   83f64:	d9402d17 	ldw	r5,180(sp)
   83f68:	d9002f17 	ldw	r4,188(sp)
   83f6c:	28800017 	ldw	r2,0(r5)
   83f70:	2007d7fa 	srai	r3,r4,31
   83f74:	29400104 	addi	r5,r5,4
   83f78:	d9402d15 	stw	r5,180(sp)
   83f7c:	11000015 	stw	r4,0(r2)
   83f80:	10c00115 	stw	r3,4(r2)
   83f84:	003ce506 	br	8331c <rx_descriptor_end+0xfff832bc>
   83f88:	d8c02d17 	ldw	r3,180(sp)
   83f8c:	d9002d17 	ldw	r4,180(sp)
   83f90:	d8002785 	stb	zero,158(sp)
   83f94:	18800017 	ldw	r2,0(r3)
   83f98:	21000104 	addi	r4,r4,4
   83f9c:	00c00044 	movi	r3,1
   83fa0:	d8c02a15 	stw	r3,168(sp)
   83fa4:	d8801405 	stb	r2,80(sp)
   83fa8:	d9002d15 	stw	r4,180(sp)
   83fac:	d8c02e15 	stw	r3,184(sp)
   83fb0:	d8002915 	stw	zero,164(sp)
   83fb4:	d8003215 	stw	zero,200(sp)
   83fb8:	dc001404 	addi	r16,sp,80
   83fbc:	0039883a 	mov	fp,zero
   83fc0:	003e7206 	br	8398c <rx_descriptor_end+0xfff8392c>
   83fc4:	01000274 	movhi	r4,9
   83fc8:	21080204 	addi	r4,r4,8200
   83fcc:	0039883a 	mov	fp,zero
   83fd0:	d9003915 	stw	r4,228(sp)
   83fd4:	04401e04 	movi	r17,120
   83fd8:	003f8206 	br	83de4 <rx_descriptor_end+0xfff83d84>
   83fdc:	18c03fcc 	andi	r3,r3,255
   83fe0:	1805061e 	bne	r3,zero,853fc <___vfprintf_internal_r+0x21c0>
   83fe4:	883d9126 	beq	r17,zero,8362c <rx_descriptor_end+0xfff835cc>
   83fe8:	00c00044 	movi	r3,1
   83fec:	d8c02a15 	stw	r3,168(sp)
   83ff0:	dc401405 	stb	r17,80(sp)
   83ff4:	d8002785 	stb	zero,158(sp)
   83ff8:	003fec06 	br	83fac <rx_descriptor_end+0xfff83f4c>
   83ffc:	01400274 	movhi	r5,9
   84000:	29480204 	addi	r5,r5,8200
   84004:	d9403915 	stw	r5,228(sp)
   84008:	d8c02d15 	stw	r3,180(sp)
   8400c:	1025883a 	mov	r18,r2
   84010:	04401e04 	movi	r17,120
   84014:	9d84b03a 	or	r2,r19,r22
   84018:	1000fc1e 	bne	r2,zero,8440c <___vfprintf_internal_r+0x11d0>
   8401c:	0039883a 	mov	fp,zero
   84020:	00800084 	movi	r2,2
   84024:	10803fcc 	andi	r2,r2,255
   84028:	00c00044 	movi	r3,1
   8402c:	10c20f26 	beq	r2,r3,8486c <___vfprintf_internal_r+0x1630>
   84030:	00c00084 	movi	r3,2
   84034:	10fd6326 	beq	r2,r3,835c4 <rx_descriptor_end+0xfff83564>
   84038:	003e2d06 	br	838f0 <rx_descriptor_end+0xfff83890>
   8403c:	d8c02017 	ldw	r3,128(sp)
   84040:	003e9306 	br	83a90 <rx_descriptor_end+0xfff83a30>
   84044:	00801944 	movi	r2,101
   84048:	14407e0e 	bge	r2,r17,84244 <___vfprintf_internal_r+0x1008>
   8404c:	d9003617 	ldw	r4,216(sp)
   84050:	d9403817 	ldw	r5,224(sp)
   84054:	000d883a 	mov	r6,zero
   84058:	000f883a 	mov	r7,zero
   8405c:	d8c03c15 	stw	r3,240(sp)
   84060:	da003d15 	stw	r8,244(sp)
   84064:	008cd240 	call	8cd24 <__eqdf2>
   84068:	d8c03c17 	ldw	r3,240(sp)
   8406c:	da003d17 	ldw	r8,244(sp)
   84070:	1000f71e 	bne	r2,zero,84450 <___vfprintf_internal_r+0x1214>
   84074:	d8801f17 	ldw	r2,124(sp)
   84078:	01000274 	movhi	r4,9
   8407c:	21080904 	addi	r4,r4,8228
   84080:	18c00044 	addi	r3,r3,1
   84084:	10800044 	addi	r2,r2,1
   84088:	41000015 	stw	r4,0(r8)
   8408c:	01000044 	movi	r4,1
   84090:	41000115 	stw	r4,4(r8)
   84094:	d8c02015 	stw	r3,128(sp)
   84098:	d8801f15 	stw	r2,124(sp)
   8409c:	010001c4 	movi	r4,7
   840a0:	2082b816 	blt	r4,r2,84b84 <___vfprintf_internal_r+0x1948>
   840a4:	42000204 	addi	r8,r8,8
   840a8:	d8802617 	ldw	r2,152(sp)
   840ac:	d9403317 	ldw	r5,204(sp)
   840b0:	11400216 	blt	r2,r5,840bc <___vfprintf_internal_r+0xe80>
   840b4:	9080004c 	andi	r2,r18,1
   840b8:	103ed526 	beq	r2,zero,83c10 <rx_descriptor_end+0xfff83bb0>
   840bc:	d8803717 	ldw	r2,220(sp)
   840c0:	d9003417 	ldw	r4,208(sp)
   840c4:	d9403717 	ldw	r5,220(sp)
   840c8:	1887883a 	add	r3,r3,r2
   840cc:	d8801f17 	ldw	r2,124(sp)
   840d0:	41000015 	stw	r4,0(r8)
   840d4:	41400115 	stw	r5,4(r8)
   840d8:	10800044 	addi	r2,r2,1
   840dc:	d8c02015 	stw	r3,128(sp)
   840e0:	d8801f15 	stw	r2,124(sp)
   840e4:	010001c4 	movi	r4,7
   840e8:	20832916 	blt	r4,r2,84d90 <___vfprintf_internal_r+0x1b54>
   840ec:	42000204 	addi	r8,r8,8
   840f0:	d8803317 	ldw	r2,204(sp)
   840f4:	143fffc4 	addi	r16,r2,-1
   840f8:	043ec50e 	bge	zero,r16,83c10 <rx_descriptor_end+0xfff83bb0>
   840fc:	04400404 	movi	r17,16
   84100:	d8801f17 	ldw	r2,124(sp)
   84104:	8c00880e 	bge	r17,r16,84328 <___vfprintf_internal_r+0x10ec>
   84108:	01400274 	movhi	r5,9
   8410c:	29480984 	addi	r5,r5,8230
   84110:	d9402b15 	stw	r5,172(sp)
   84114:	058001c4 	movi	r22,7
   84118:	dcc02c17 	ldw	r19,176(sp)
   8411c:	00000306 	br	8412c <___vfprintf_internal_r+0xef0>
   84120:	42000204 	addi	r8,r8,8
   84124:	843ffc04 	addi	r16,r16,-16
   84128:	8c00820e 	bge	r17,r16,84334 <___vfprintf_internal_r+0x10f8>
   8412c:	18c00404 	addi	r3,r3,16
   84130:	10800044 	addi	r2,r2,1
   84134:	45000015 	stw	r20,0(r8)
   84138:	44400115 	stw	r17,4(r8)
   8413c:	d8c02015 	stw	r3,128(sp)
   84140:	d8801f15 	stw	r2,124(sp)
   84144:	b0bff60e 	bge	r22,r2,84120 <rx_descriptor_end+0xfff840c0>
   84148:	d9801e04 	addi	r6,sp,120
   8414c:	b80b883a 	mov	r5,r23
   84150:	9809883a 	mov	r4,r19
   84154:	00889040 	call	88904 <__sprint_r>
   84158:	103d3a1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   8415c:	d8c02017 	ldw	r3,128(sp)
   84160:	d8801f17 	ldw	r2,124(sp)
   84164:	da000404 	addi	r8,sp,16
   84168:	003fee06 	br	84124 <rx_descriptor_end+0xfff840c4>
   8416c:	d9403117 	ldw	r5,196(sp)
   84170:	d8802a17 	ldw	r2,168(sp)
   84174:	28adc83a 	sub	r22,r5,r2
   84178:	05be630e 	bge	zero,r22,83b08 <rx_descriptor_end+0xfff83aa8>
   8417c:	07000404 	movi	fp,16
   84180:	d8801f17 	ldw	r2,124(sp)
   84184:	e5838f0e 	bge	fp,r22,84fc4 <___vfprintf_internal_r+0x1d88>
   84188:	01400274 	movhi	r5,9
   8418c:	29480984 	addi	r5,r5,8230
   84190:	dc403015 	stw	r17,192(sp)
   84194:	d9402b15 	stw	r5,172(sp)
   84198:	b023883a 	mov	r17,r22
   8419c:	04c001c4 	movi	r19,7
   841a0:	a82d883a 	mov	r22,r21
   841a4:	902b883a 	mov	r21,r18
   841a8:	8025883a 	mov	r18,r16
   841ac:	dc002c17 	ldw	r16,176(sp)
   841b0:	00000306 	br	841c0 <___vfprintf_internal_r+0xf84>
   841b4:	8c7ffc04 	addi	r17,r17,-16
   841b8:	42000204 	addi	r8,r8,8
   841bc:	e440110e 	bge	fp,r17,84204 <___vfprintf_internal_r+0xfc8>
   841c0:	18c00404 	addi	r3,r3,16
   841c4:	10800044 	addi	r2,r2,1
   841c8:	45000015 	stw	r20,0(r8)
   841cc:	47000115 	stw	fp,4(r8)
   841d0:	d8c02015 	stw	r3,128(sp)
   841d4:	d8801f15 	stw	r2,124(sp)
   841d8:	98bff60e 	bge	r19,r2,841b4 <rx_descriptor_end+0xfff84154>
   841dc:	d9801e04 	addi	r6,sp,120
   841e0:	b80b883a 	mov	r5,r23
   841e4:	8009883a 	mov	r4,r16
   841e8:	00889040 	call	88904 <__sprint_r>
   841ec:	103d151e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   841f0:	8c7ffc04 	addi	r17,r17,-16
   841f4:	d8c02017 	ldw	r3,128(sp)
   841f8:	d8801f17 	ldw	r2,124(sp)
   841fc:	da000404 	addi	r8,sp,16
   84200:	e47fef16 	blt	fp,r17,841c0 <rx_descriptor_end+0xfff84160>
   84204:	9021883a 	mov	r16,r18
   84208:	a825883a 	mov	r18,r21
   8420c:	b02b883a 	mov	r21,r22
   84210:	882d883a 	mov	r22,r17
   84214:	dc403017 	ldw	r17,192(sp)
   84218:	d9002b17 	ldw	r4,172(sp)
   8421c:	1d87883a 	add	r3,r3,r22
   84220:	10800044 	addi	r2,r2,1
   84224:	41000015 	stw	r4,0(r8)
   84228:	45800115 	stw	r22,4(r8)
   8422c:	d8c02015 	stw	r3,128(sp)
   84230:	d8801f15 	stw	r2,124(sp)
   84234:	010001c4 	movi	r4,7
   84238:	20818e16 	blt	r4,r2,84874 <___vfprintf_internal_r+0x1638>
   8423c:	42000204 	addi	r8,r8,8
   84240:	003e3106 	br	83b08 <rx_descriptor_end+0xfff83aa8>
   84244:	d9403317 	ldw	r5,204(sp)
   84248:	00800044 	movi	r2,1
   8424c:	18c00044 	addi	r3,r3,1
   84250:	1141530e 	bge	r2,r5,847a0 <___vfprintf_internal_r+0x1564>
   84254:	dc401f17 	ldw	r17,124(sp)
   84258:	00800044 	movi	r2,1
   8425c:	40800115 	stw	r2,4(r8)
   84260:	8c400044 	addi	r17,r17,1
   84264:	44000015 	stw	r16,0(r8)
   84268:	d8c02015 	stw	r3,128(sp)
   8426c:	dc401f15 	stw	r17,124(sp)
   84270:	008001c4 	movi	r2,7
   84274:	14416b16 	blt	r2,r17,84824 <___vfprintf_internal_r+0x15e8>
   84278:	42000204 	addi	r8,r8,8
   8427c:	d8803717 	ldw	r2,220(sp)
   84280:	d9003417 	ldw	r4,208(sp)
   84284:	8c400044 	addi	r17,r17,1
   84288:	10c7883a 	add	r3,r2,r3
   8428c:	40800115 	stw	r2,4(r8)
   84290:	41000015 	stw	r4,0(r8)
   84294:	d8c02015 	stw	r3,128(sp)
   84298:	dc401f15 	stw	r17,124(sp)
   8429c:	008001c4 	movi	r2,7
   842a0:	14416916 	blt	r2,r17,84848 <___vfprintf_internal_r+0x160c>
   842a4:	45800204 	addi	r22,r8,8
   842a8:	d9003617 	ldw	r4,216(sp)
   842ac:	d9403817 	ldw	r5,224(sp)
   842b0:	000d883a 	mov	r6,zero
   842b4:	000f883a 	mov	r7,zero
   842b8:	d8c03c15 	stw	r3,240(sp)
   842bc:	008cd240 	call	8cd24 <__eqdf2>
   842c0:	d8c03c17 	ldw	r3,240(sp)
   842c4:	1000bc26 	beq	r2,zero,845b8 <___vfprintf_internal_r+0x137c>
   842c8:	d9403317 	ldw	r5,204(sp)
   842cc:	84000044 	addi	r16,r16,1
   842d0:	8c400044 	addi	r17,r17,1
   842d4:	28bfffc4 	addi	r2,r5,-1
   842d8:	1887883a 	add	r3,r3,r2
   842dc:	b0800115 	stw	r2,4(r22)
   842e0:	b4000015 	stw	r16,0(r22)
   842e4:	d8c02015 	stw	r3,128(sp)
   842e8:	dc401f15 	stw	r17,124(sp)
   842ec:	008001c4 	movi	r2,7
   842f0:	14414316 	blt	r2,r17,84800 <___vfprintf_internal_r+0x15c4>
   842f4:	b5800204 	addi	r22,r22,8
   842f8:	d9003a17 	ldw	r4,232(sp)
   842fc:	df0022c4 	addi	fp,sp,139
   84300:	8c400044 	addi	r17,r17,1
   84304:	20c7883a 	add	r3,r4,r3
   84308:	b7000015 	stw	fp,0(r22)
   8430c:	b1000115 	stw	r4,4(r22)
   84310:	d8c02015 	stw	r3,128(sp)
   84314:	dc401f15 	stw	r17,124(sp)
   84318:	008001c4 	movi	r2,7
   8431c:	14400e16 	blt	r2,r17,84358 <___vfprintf_internal_r+0x111c>
   84320:	b2000204 	addi	r8,r22,8
   84324:	003e3a06 	br	83c10 <rx_descriptor_end+0xfff83bb0>
   84328:	01000274 	movhi	r4,9
   8432c:	21080984 	addi	r4,r4,8230
   84330:	d9002b15 	stw	r4,172(sp)
   84334:	d9002b17 	ldw	r4,172(sp)
   84338:	1c07883a 	add	r3,r3,r16
   8433c:	44000115 	stw	r16,4(r8)
   84340:	41000015 	stw	r4,0(r8)
   84344:	10800044 	addi	r2,r2,1
   84348:	d8c02015 	stw	r3,128(sp)
   8434c:	d8801f15 	stw	r2,124(sp)
   84350:	010001c4 	movi	r4,7
   84354:	20be2d0e 	bge	r4,r2,83c0c <rx_descriptor_end+0xfff83bac>
   84358:	d9002c17 	ldw	r4,176(sp)
   8435c:	d9801e04 	addi	r6,sp,120
   84360:	b80b883a 	mov	r5,r23
   84364:	00889040 	call	88904 <__sprint_r>
   84368:	103cb61e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   8436c:	d8c02017 	ldw	r3,128(sp)
   84370:	da000404 	addi	r8,sp,16
   84374:	003e2606 	br	83c10 <rx_descriptor_end+0xfff83bb0>
   84378:	d9002c17 	ldw	r4,176(sp)
   8437c:	d9801e04 	addi	r6,sp,120
   84380:	b80b883a 	mov	r5,r23
   84384:	00889040 	call	88904 <__sprint_r>
   84388:	103e5d26 	beq	r2,zero,83d00 <rx_descriptor_end+0xfff83ca0>
   8438c:	003cad06 	br	83644 <rx_descriptor_end+0xfff835e4>
   84390:	d9002c17 	ldw	r4,176(sp)
   84394:	d9801e04 	addi	r6,sp,120
   84398:	b80b883a 	mov	r5,r23
   8439c:	00889040 	call	88904 <__sprint_r>
   843a0:	103ca81e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   843a4:	d8c02017 	ldw	r3,128(sp)
   843a8:	da000404 	addi	r8,sp,16
   843ac:	003e0b06 	br	83bdc <rx_descriptor_end+0xfff83b7c>
   843b0:	d9002c17 	ldw	r4,176(sp)
   843b4:	d9801e04 	addi	r6,sp,120
   843b8:	b80b883a 	mov	r5,r23
   843bc:	00889040 	call	88904 <__sprint_r>
   843c0:	103ca01e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   843c4:	d8c02017 	ldw	r3,128(sp)
   843c8:	da000404 	addi	r8,sp,16
   843cc:	003dbd06 	br	83ac4 <rx_descriptor_end+0xfff83a64>
   843d0:	d9002c17 	ldw	r4,176(sp)
   843d4:	d9801e04 	addi	r6,sp,120
   843d8:	b80b883a 	mov	r5,r23
   843dc:	00889040 	call	88904 <__sprint_r>
   843e0:	103c981e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   843e4:	d8c02017 	ldw	r3,128(sp)
   843e8:	da000404 	addi	r8,sp,16
   843ec:	003dc306 	br	83afc <rx_descriptor_end+0xfff83a9c>
   843f0:	d8802917 	ldw	r2,164(sp)
   843f4:	d8002785 	stb	zero,158(sp)
   843f8:	103f0616 	blt	r2,zero,84014 <rx_descriptor_end+0xfff83fb4>
   843fc:	00ffdfc4 	movi	r3,-129
   84400:	9d84b03a 	or	r2,r19,r22
   84404:	90e4703a 	and	r18,r18,r3
   84408:	103c6b26 	beq	r2,zero,835b8 <rx_descriptor_end+0xfff83558>
   8440c:	0039883a 	mov	fp,zero
   84410:	003e7406 	br	83de4 <rx_descriptor_end+0xfff83d84>
   84414:	9080040c 	andi	r2,r18,16
   84418:	1001b326 	beq	r2,zero,84ae8 <___vfprintf_internal_r+0x18ac>
   8441c:	d9002d17 	ldw	r4,180(sp)
   84420:	d9402917 	ldw	r5,164(sp)
   84424:	d8002785 	stb	zero,158(sp)
   84428:	20800104 	addi	r2,r4,4
   8442c:	24c00017 	ldw	r19,0(r4)
   84430:	002d883a 	mov	r22,zero
   84434:	2801b516 	blt	r5,zero,84b0c <___vfprintf_internal_r+0x18d0>
   84438:	00ffdfc4 	movi	r3,-129
   8443c:	d8802d15 	stw	r2,180(sp)
   84440:	90e4703a 	and	r18,r18,r3
   84444:	983d2726 	beq	r19,zero,838e4 <rx_descriptor_end+0xfff83884>
   84448:	0039883a 	mov	fp,zero
   8444c:	003d2a06 	br	838f8 <rx_descriptor_end+0xfff83898>
   84450:	dc402617 	ldw	r17,152(sp)
   84454:	0441d30e 	bge	zero,r17,84ba4 <___vfprintf_internal_r+0x1968>
   84458:	dc403217 	ldw	r17,200(sp)
   8445c:	d8803317 	ldw	r2,204(sp)
   84460:	1440010e 	bge	r2,r17,84468 <___vfprintf_internal_r+0x122c>
   84464:	1023883a 	mov	r17,r2
   84468:	04400a0e 	bge	zero,r17,84494 <___vfprintf_internal_r+0x1258>
   8446c:	d8801f17 	ldw	r2,124(sp)
   84470:	1c47883a 	add	r3,r3,r17
   84474:	44000015 	stw	r16,0(r8)
   84478:	10800044 	addi	r2,r2,1
   8447c:	44400115 	stw	r17,4(r8)
   84480:	d8c02015 	stw	r3,128(sp)
   84484:	d8801f15 	stw	r2,124(sp)
   84488:	010001c4 	movi	r4,7
   8448c:	20826516 	blt	r4,r2,84e24 <___vfprintf_internal_r+0x1be8>
   84490:	42000204 	addi	r8,r8,8
   84494:	88026116 	blt	r17,zero,84e1c <___vfprintf_internal_r+0x1be0>
   84498:	d9003217 	ldw	r4,200(sp)
   8449c:	2463c83a 	sub	r17,r4,r17
   844a0:	04407b0e 	bge	zero,r17,84690 <___vfprintf_internal_r+0x1454>
   844a4:	05800404 	movi	r22,16
   844a8:	d8801f17 	ldw	r2,124(sp)
   844ac:	b4419d0e 	bge	r22,r17,84b24 <___vfprintf_internal_r+0x18e8>
   844b0:	01000274 	movhi	r4,9
   844b4:	21080984 	addi	r4,r4,8230
   844b8:	d9002b15 	stw	r4,172(sp)
   844bc:	070001c4 	movi	fp,7
   844c0:	dcc02c17 	ldw	r19,176(sp)
   844c4:	00000306 	br	844d4 <___vfprintf_internal_r+0x1298>
   844c8:	42000204 	addi	r8,r8,8
   844cc:	8c7ffc04 	addi	r17,r17,-16
   844d0:	b441970e 	bge	r22,r17,84b30 <___vfprintf_internal_r+0x18f4>
   844d4:	18c00404 	addi	r3,r3,16
   844d8:	10800044 	addi	r2,r2,1
   844dc:	45000015 	stw	r20,0(r8)
   844e0:	45800115 	stw	r22,4(r8)
   844e4:	d8c02015 	stw	r3,128(sp)
   844e8:	d8801f15 	stw	r2,124(sp)
   844ec:	e0bff60e 	bge	fp,r2,844c8 <rx_descriptor_end+0xfff84468>
   844f0:	d9801e04 	addi	r6,sp,120
   844f4:	b80b883a 	mov	r5,r23
   844f8:	9809883a 	mov	r4,r19
   844fc:	00889040 	call	88904 <__sprint_r>
   84500:	103c501e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84504:	d8c02017 	ldw	r3,128(sp)
   84508:	d8801f17 	ldw	r2,124(sp)
   8450c:	da000404 	addi	r8,sp,16
   84510:	003fee06 	br	844cc <rx_descriptor_end+0xfff8446c>
   84514:	d9002c17 	ldw	r4,176(sp)
   84518:	d9801e04 	addi	r6,sp,120
   8451c:	b80b883a 	mov	r5,r23
   84520:	00889040 	call	88904 <__sprint_r>
   84524:	103c471e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84528:	d8c02017 	ldw	r3,128(sp)
   8452c:	df002787 	ldb	fp,158(sp)
   84530:	da000404 	addi	r8,sp,16
   84534:	003d5606 	br	83a90 <rx_descriptor_end+0xfff83a30>
   84538:	9080040c 	andi	r2,r18,16
   8453c:	10016126 	beq	r2,zero,84ac4 <___vfprintf_internal_r+0x1888>
   84540:	d8802d17 	ldw	r2,180(sp)
   84544:	14c00017 	ldw	r19,0(r2)
   84548:	10800104 	addi	r2,r2,4
   8454c:	d8802d15 	stw	r2,180(sp)
   84550:	982dd7fa 	srai	r22,r19,31
   84554:	b005883a 	mov	r2,r22
   84558:	003c8206 	br	83764 <rx_descriptor_end+0xfff83704>
   8455c:	9080040c 	andi	r2,r18,16
   84560:	10003526 	beq	r2,zero,84638 <___vfprintf_internal_r+0x13fc>
   84564:	d9402d17 	ldw	r5,180(sp)
   84568:	d8c02917 	ldw	r3,164(sp)
   8456c:	d8002785 	stb	zero,158(sp)
   84570:	28800104 	addi	r2,r5,4
   84574:	2cc00017 	ldw	r19,0(r5)
   84578:	002d883a 	mov	r22,zero
   8457c:	18003716 	blt	r3,zero,8465c <___vfprintf_internal_r+0x1420>
   84580:	00ffdfc4 	movi	r3,-129
   84584:	d8802d15 	stw	r2,180(sp)
   84588:	90e4703a 	and	r18,r18,r3
   8458c:	0039883a 	mov	fp,zero
   84590:	983df326 	beq	r19,zero,83d60 <rx_descriptor_end+0xfff83d00>
   84594:	00800244 	movi	r2,9
   84598:	14fc7b36 	bltu	r2,r19,83788 <rx_descriptor_end+0xfff83728>
   8459c:	d8c02817 	ldw	r3,160(sp)
   845a0:	dc001dc4 	addi	r16,sp,119
   845a4:	9cc00c04 	addi	r19,r19,48
   845a8:	1c07c83a 	sub	r3,r3,r16
   845ac:	dcc01dc5 	stb	r19,119(sp)
   845b0:	d8c02e15 	stw	r3,184(sp)
   845b4:	003ce806 	br	83958 <rx_descriptor_end+0xfff838f8>
   845b8:	d8803317 	ldw	r2,204(sp)
   845bc:	143fffc4 	addi	r16,r2,-1
   845c0:	043f4d0e 	bge	zero,r16,842f8 <rx_descriptor_end+0xfff84298>
   845c4:	07000404 	movi	fp,16
   845c8:	e400810e 	bge	fp,r16,847d0 <___vfprintf_internal_r+0x1594>
   845cc:	01400274 	movhi	r5,9
   845d0:	29480984 	addi	r5,r5,8230
   845d4:	d9402b15 	stw	r5,172(sp)
   845d8:	01c001c4 	movi	r7,7
   845dc:	dcc02c17 	ldw	r19,176(sp)
   845e0:	00000306 	br	845f0 <___vfprintf_internal_r+0x13b4>
   845e4:	b5800204 	addi	r22,r22,8
   845e8:	843ffc04 	addi	r16,r16,-16
   845ec:	e4007b0e 	bge	fp,r16,847dc <___vfprintf_internal_r+0x15a0>
   845f0:	18c00404 	addi	r3,r3,16
   845f4:	8c400044 	addi	r17,r17,1
   845f8:	b5000015 	stw	r20,0(r22)
   845fc:	b7000115 	stw	fp,4(r22)
   84600:	d8c02015 	stw	r3,128(sp)
   84604:	dc401f15 	stw	r17,124(sp)
   84608:	3c7ff60e 	bge	r7,r17,845e4 <rx_descriptor_end+0xfff84584>
   8460c:	d9801e04 	addi	r6,sp,120
   84610:	b80b883a 	mov	r5,r23
   84614:	9809883a 	mov	r4,r19
   84618:	d9c03c15 	stw	r7,240(sp)
   8461c:	00889040 	call	88904 <__sprint_r>
   84620:	d9c03c17 	ldw	r7,240(sp)
   84624:	103c071e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84628:	d8c02017 	ldw	r3,128(sp)
   8462c:	dc401f17 	ldw	r17,124(sp)
   84630:	dd800404 	addi	r22,sp,16
   84634:	003fec06 	br	845e8 <rx_descriptor_end+0xfff84588>
   84638:	9080100c 	andi	r2,r18,64
   8463c:	d8002785 	stb	zero,158(sp)
   84640:	10010e26 	beq	r2,zero,84a7c <___vfprintf_internal_r+0x1840>
   84644:	d9002d17 	ldw	r4,180(sp)
   84648:	d9402917 	ldw	r5,164(sp)
   8464c:	002d883a 	mov	r22,zero
   84650:	20800104 	addi	r2,r4,4
   84654:	24c0000b 	ldhu	r19,0(r4)
   84658:	283fc90e 	bge	r5,zero,84580 <rx_descriptor_end+0xfff84520>
   8465c:	d8802d15 	stw	r2,180(sp)
   84660:	0039883a 	mov	fp,zero
   84664:	9d84b03a 	or	r2,r19,r22
   84668:	103c461e 	bne	r2,zero,83784 <rx_descriptor_end+0xfff83724>
   8466c:	00800044 	movi	r2,1
   84670:	003e6c06 	br	84024 <rx_descriptor_end+0xfff83fc4>
   84674:	d9002c17 	ldw	r4,176(sp)
   84678:	d9801e04 	addi	r6,sp,120
   8467c:	b80b883a 	mov	r5,r23
   84680:	00889040 	call	88904 <__sprint_r>
   84684:	103bef1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84688:	d8c02017 	ldw	r3,128(sp)
   8468c:	da000404 	addi	r8,sp,16
   84690:	d9003217 	ldw	r4,200(sp)
   84694:	d8802617 	ldw	r2,152(sp)
   84698:	d9403317 	ldw	r5,204(sp)
   8469c:	8123883a 	add	r17,r16,r4
   846a0:	11400216 	blt	r2,r5,846ac <___vfprintf_internal_r+0x1470>
   846a4:	9100004c 	andi	r4,r18,1
   846a8:	20000d26 	beq	r4,zero,846e0 <___vfprintf_internal_r+0x14a4>
   846ac:	d9003717 	ldw	r4,220(sp)
   846b0:	d9403417 	ldw	r5,208(sp)
   846b4:	1907883a 	add	r3,r3,r4
   846b8:	d9001f17 	ldw	r4,124(sp)
   846bc:	41400015 	stw	r5,0(r8)
   846c0:	d9403717 	ldw	r5,220(sp)
   846c4:	21000044 	addi	r4,r4,1
   846c8:	d8c02015 	stw	r3,128(sp)
   846cc:	41400115 	stw	r5,4(r8)
   846d0:	d9001f15 	stw	r4,124(sp)
   846d4:	014001c4 	movi	r5,7
   846d8:	2901e816 	blt	r5,r4,84e7c <___vfprintf_internal_r+0x1c40>
   846dc:	42000204 	addi	r8,r8,8
   846e0:	d9003317 	ldw	r4,204(sp)
   846e4:	8121883a 	add	r16,r16,r4
   846e8:	2085c83a 	sub	r2,r4,r2
   846ec:	8461c83a 	sub	r16,r16,r17
   846f0:	1400010e 	bge	r2,r16,846f8 <___vfprintf_internal_r+0x14bc>
   846f4:	1021883a 	mov	r16,r2
   846f8:	04000a0e 	bge	zero,r16,84724 <___vfprintf_internal_r+0x14e8>
   846fc:	d9001f17 	ldw	r4,124(sp)
   84700:	1c07883a 	add	r3,r3,r16
   84704:	44400015 	stw	r17,0(r8)
   84708:	21000044 	addi	r4,r4,1
   8470c:	44000115 	stw	r16,4(r8)
   84710:	d8c02015 	stw	r3,128(sp)
   84714:	d9001f15 	stw	r4,124(sp)
   84718:	014001c4 	movi	r5,7
   8471c:	2901fb16 	blt	r5,r4,84f0c <___vfprintf_internal_r+0x1cd0>
   84720:	42000204 	addi	r8,r8,8
   84724:	8001f716 	blt	r16,zero,84f04 <___vfprintf_internal_r+0x1cc8>
   84728:	1421c83a 	sub	r16,r2,r16
   8472c:	043d380e 	bge	zero,r16,83c10 <rx_descriptor_end+0xfff83bb0>
   84730:	04400404 	movi	r17,16
   84734:	d8801f17 	ldw	r2,124(sp)
   84738:	8c3efb0e 	bge	r17,r16,84328 <rx_descriptor_end+0xfff842c8>
   8473c:	01400274 	movhi	r5,9
   84740:	29480984 	addi	r5,r5,8230
   84744:	d9402b15 	stw	r5,172(sp)
   84748:	058001c4 	movi	r22,7
   8474c:	dcc02c17 	ldw	r19,176(sp)
   84750:	00000306 	br	84760 <___vfprintf_internal_r+0x1524>
   84754:	42000204 	addi	r8,r8,8
   84758:	843ffc04 	addi	r16,r16,-16
   8475c:	8c3ef50e 	bge	r17,r16,84334 <rx_descriptor_end+0xfff842d4>
   84760:	18c00404 	addi	r3,r3,16
   84764:	10800044 	addi	r2,r2,1
   84768:	45000015 	stw	r20,0(r8)
   8476c:	44400115 	stw	r17,4(r8)
   84770:	d8c02015 	stw	r3,128(sp)
   84774:	d8801f15 	stw	r2,124(sp)
   84778:	b0bff60e 	bge	r22,r2,84754 <rx_descriptor_end+0xfff846f4>
   8477c:	d9801e04 	addi	r6,sp,120
   84780:	b80b883a 	mov	r5,r23
   84784:	9809883a 	mov	r4,r19
   84788:	00889040 	call	88904 <__sprint_r>
   8478c:	103bad1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84790:	d8c02017 	ldw	r3,128(sp)
   84794:	d8801f17 	ldw	r2,124(sp)
   84798:	da000404 	addi	r8,sp,16
   8479c:	003fee06 	br	84758 <rx_descriptor_end+0xfff846f8>
   847a0:	9088703a 	and	r4,r18,r2
   847a4:	203eab1e 	bne	r4,zero,84254 <rx_descriptor_end+0xfff841f4>
   847a8:	dc401f17 	ldw	r17,124(sp)
   847ac:	40800115 	stw	r2,4(r8)
   847b0:	44000015 	stw	r16,0(r8)
   847b4:	8c400044 	addi	r17,r17,1
   847b8:	d8c02015 	stw	r3,128(sp)
   847bc:	dc401f15 	stw	r17,124(sp)
   847c0:	008001c4 	movi	r2,7
   847c4:	14400e16 	blt	r2,r17,84800 <___vfprintf_internal_r+0x15c4>
   847c8:	45800204 	addi	r22,r8,8
   847cc:	003eca06 	br	842f8 <rx_descriptor_end+0xfff84298>
   847d0:	01000274 	movhi	r4,9
   847d4:	21080984 	addi	r4,r4,8230
   847d8:	d9002b15 	stw	r4,172(sp)
   847dc:	d8802b17 	ldw	r2,172(sp)
   847e0:	1c07883a 	add	r3,r3,r16
   847e4:	8c400044 	addi	r17,r17,1
   847e8:	b0800015 	stw	r2,0(r22)
   847ec:	b4000115 	stw	r16,4(r22)
   847f0:	d8c02015 	stw	r3,128(sp)
   847f4:	dc401f15 	stw	r17,124(sp)
   847f8:	008001c4 	movi	r2,7
   847fc:	147ebd0e 	bge	r2,r17,842f4 <rx_descriptor_end+0xfff84294>
   84800:	d9002c17 	ldw	r4,176(sp)
   84804:	d9801e04 	addi	r6,sp,120
   84808:	b80b883a 	mov	r5,r23
   8480c:	00889040 	call	88904 <__sprint_r>
   84810:	103b8c1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84814:	d8c02017 	ldw	r3,128(sp)
   84818:	dc401f17 	ldw	r17,124(sp)
   8481c:	dd800404 	addi	r22,sp,16
   84820:	003eb506 	br	842f8 <rx_descriptor_end+0xfff84298>
   84824:	d9002c17 	ldw	r4,176(sp)
   84828:	d9801e04 	addi	r6,sp,120
   8482c:	b80b883a 	mov	r5,r23
   84830:	00889040 	call	88904 <__sprint_r>
   84834:	103b831e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84838:	d8c02017 	ldw	r3,128(sp)
   8483c:	dc401f17 	ldw	r17,124(sp)
   84840:	da000404 	addi	r8,sp,16
   84844:	003e8d06 	br	8427c <rx_descriptor_end+0xfff8421c>
   84848:	d9002c17 	ldw	r4,176(sp)
   8484c:	d9801e04 	addi	r6,sp,120
   84850:	b80b883a 	mov	r5,r23
   84854:	00889040 	call	88904 <__sprint_r>
   84858:	103b7a1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   8485c:	d8c02017 	ldw	r3,128(sp)
   84860:	dc401f17 	ldw	r17,124(sp)
   84864:	dd800404 	addi	r22,sp,16
   84868:	003e8f06 	br	842a8 <rx_descriptor_end+0xfff84248>
   8486c:	0027883a 	mov	r19,zero
   84870:	003f4a06 	br	8459c <rx_descriptor_end+0xfff8453c>
   84874:	d9002c17 	ldw	r4,176(sp)
   84878:	d9801e04 	addi	r6,sp,120
   8487c:	b80b883a 	mov	r5,r23
   84880:	00889040 	call	88904 <__sprint_r>
   84884:	103b6f1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84888:	d8c02017 	ldw	r3,128(sp)
   8488c:	da000404 	addi	r8,sp,16
   84890:	003c9d06 	br	83b08 <rx_descriptor_end+0xfff83aa8>
   84894:	04e7c83a 	sub	r19,zero,r19
   84898:	9804c03a 	cmpne	r2,r19,zero
   8489c:	05adc83a 	sub	r22,zero,r22
   848a0:	b0adc83a 	sub	r22,r22,r2
   848a4:	d8802917 	ldw	r2,164(sp)
   848a8:	07000b44 	movi	fp,45
   848ac:	df002785 	stb	fp,158(sp)
   848b0:	10017b16 	blt	r2,zero,84ea0 <___vfprintf_internal_r+0x1c64>
   848b4:	00bfdfc4 	movi	r2,-129
   848b8:	90a4703a 	and	r18,r18,r2
   848bc:	003bb106 	br	83784 <rx_descriptor_end+0xfff83724>
   848c0:	d9003617 	ldw	r4,216(sp)
   848c4:	d9403817 	ldw	r5,224(sp)
   848c8:	da003d15 	stw	r8,244(sp)
   848cc:	00886200 	call	88620 <__fpclassifyd>
   848d0:	da003d17 	ldw	r8,244(sp)
   848d4:	1000f026 	beq	r2,zero,84c98 <___vfprintf_internal_r+0x1a5c>
   848d8:	d9002917 	ldw	r4,164(sp)
   848dc:	05bff7c4 	movi	r22,-33
   848e0:	00bfffc4 	movi	r2,-1
   848e4:	8dac703a 	and	r22,r17,r22
   848e8:	20820026 	beq	r4,r2,850ec <___vfprintf_internal_r+0x1eb0>
   848ec:	008011c4 	movi	r2,71
   848f0:	b081f726 	beq	r22,r2,850d0 <___vfprintf_internal_r+0x1e94>
   848f4:	d9003817 	ldw	r4,224(sp)
   848f8:	90c04014 	ori	r3,r18,256
   848fc:	d8c02b15 	stw	r3,172(sp)
   84900:	20021516 	blt	r4,zero,85158 <___vfprintf_internal_r+0x1f1c>
   84904:	dcc03817 	ldw	r19,224(sp)
   84908:	d8002a05 	stb	zero,168(sp)
   8490c:	00801984 	movi	r2,102
   84910:	8881f926 	beq	r17,r2,850f8 <___vfprintf_internal_r+0x1ebc>
   84914:	00801184 	movi	r2,70
   84918:	88821c26 	beq	r17,r2,8518c <___vfprintf_internal_r+0x1f50>
   8491c:	00801144 	movi	r2,69
   84920:	b081ef26 	beq	r22,r2,850e0 <___vfprintf_internal_r+0x1ea4>
   84924:	d8c02917 	ldw	r3,164(sp)
   84928:	d8802104 	addi	r2,sp,132
   8492c:	d8800315 	stw	r2,12(sp)
   84930:	d9403617 	ldw	r5,216(sp)
   84934:	d8802504 	addi	r2,sp,148
   84938:	d9002c17 	ldw	r4,176(sp)
   8493c:	d8800215 	stw	r2,8(sp)
   84940:	d8802604 	addi	r2,sp,152
   84944:	d8c00015 	stw	r3,0(sp)
   84948:	d8800115 	stw	r2,4(sp)
   8494c:	01c00084 	movi	r7,2
   84950:	980d883a 	mov	r6,r19
   84954:	d8c03c15 	stw	r3,240(sp)
   84958:	da003d15 	stw	r8,244(sp)
   8495c:	00859140 	call	85914 <_dtoa_r>
   84960:	1021883a 	mov	r16,r2
   84964:	008019c4 	movi	r2,103
   84968:	d8c03c17 	ldw	r3,240(sp)
   8496c:	da003d17 	ldw	r8,244(sp)
   84970:	88817126 	beq	r17,r2,84f38 <___vfprintf_internal_r+0x1cfc>
   84974:	008011c4 	movi	r2,71
   84978:	88829226 	beq	r17,r2,853c4 <___vfprintf_internal_r+0x2188>
   8497c:	80f9883a 	add	fp,r16,r3
   84980:	d9003617 	ldw	r4,216(sp)
   84984:	000d883a 	mov	r6,zero
   84988:	000f883a 	mov	r7,zero
   8498c:	980b883a 	mov	r5,r19
   84990:	da003d15 	stw	r8,244(sp)
   84994:	008cd240 	call	8cd24 <__eqdf2>
   84998:	da003d17 	ldw	r8,244(sp)
   8499c:	10018d26 	beq	r2,zero,84fd4 <___vfprintf_internal_r+0x1d98>
   849a0:	d8802117 	ldw	r2,132(sp)
   849a4:	1700062e 	bgeu	r2,fp,849c0 <___vfprintf_internal_r+0x1784>
   849a8:	01000c04 	movi	r4,48
   849ac:	10c00044 	addi	r3,r2,1
   849b0:	d8c02115 	stw	r3,132(sp)
   849b4:	11000005 	stb	r4,0(r2)
   849b8:	d8802117 	ldw	r2,132(sp)
   849bc:	173ffb36 	bltu	r2,fp,849ac <rx_descriptor_end+0xfff8494c>
   849c0:	1405c83a 	sub	r2,r2,r16
   849c4:	d8803315 	stw	r2,204(sp)
   849c8:	008011c4 	movi	r2,71
   849cc:	b0817626 	beq	r22,r2,84fa8 <___vfprintf_internal_r+0x1d6c>
   849d0:	00801944 	movi	r2,101
   849d4:	1442810e 	bge	r2,r17,853dc <___vfprintf_internal_r+0x21a0>
   849d8:	d8c02617 	ldw	r3,152(sp)
   849dc:	00801984 	movi	r2,102
   849e0:	d8c03215 	stw	r3,200(sp)
   849e4:	8881fe26 	beq	r17,r2,851e0 <___vfprintf_internal_r+0x1fa4>
   849e8:	d8c03217 	ldw	r3,200(sp)
   849ec:	d9003317 	ldw	r4,204(sp)
   849f0:	1901dd16 	blt	r3,r4,85168 <___vfprintf_internal_r+0x1f2c>
   849f4:	9480004c 	andi	r18,r18,1
   849f8:	90022b1e 	bne	r18,zero,852a8 <___vfprintf_internal_r+0x206c>
   849fc:	1805883a 	mov	r2,r3
   84a00:	18028016 	blt	r3,zero,85404 <___vfprintf_internal_r+0x21c8>
   84a04:	d8c03217 	ldw	r3,200(sp)
   84a08:	044019c4 	movi	r17,103
   84a0c:	d8c02e15 	stw	r3,184(sp)
   84a10:	df002a07 	ldb	fp,168(sp)
   84a14:	e001531e 	bne	fp,zero,84f64 <___vfprintf_internal_r+0x1d28>
   84a18:	df002783 	ldbu	fp,158(sp)
   84a1c:	d8802a15 	stw	r2,168(sp)
   84a20:	dc802b17 	ldw	r18,172(sp)
   84a24:	d8002915 	stw	zero,164(sp)
   84a28:	003bd106 	br	83970 <rx_descriptor_end+0xfff83910>
   84a2c:	d8802d17 	ldw	r2,180(sp)
   84a30:	d8c02d17 	ldw	r3,180(sp)
   84a34:	d9002d17 	ldw	r4,180(sp)
   84a38:	10800017 	ldw	r2,0(r2)
   84a3c:	18c00117 	ldw	r3,4(r3)
   84a40:	21000204 	addi	r4,r4,8
   84a44:	d8803615 	stw	r2,216(sp)
   84a48:	d8c03815 	stw	r3,224(sp)
   84a4c:	d9002d15 	stw	r4,180(sp)
   84a50:	003b7506 	br	83828 <rx_descriptor_end+0xfff837c8>
   84a54:	ac400007 	ldb	r17,0(r21)
   84a58:	003a5906 	br	833c0 <rx_descriptor_end+0xfff83360>
   84a5c:	9080100c 	andi	r2,r18,64
   84a60:	1000a826 	beq	r2,zero,84d04 <___vfprintf_internal_r+0x1ac8>
   84a64:	d9002d17 	ldw	r4,180(sp)
   84a68:	002d883a 	mov	r22,zero
   84a6c:	24c0000b 	ldhu	r19,0(r4)
   84a70:	21000104 	addi	r4,r4,4
   84a74:	d9002d15 	stw	r4,180(sp)
   84a78:	003ccb06 	br	83da8 <rx_descriptor_end+0xfff83d48>
   84a7c:	d8c02d17 	ldw	r3,180(sp)
   84a80:	d9002917 	ldw	r4,164(sp)
   84a84:	002d883a 	mov	r22,zero
   84a88:	18800104 	addi	r2,r3,4
   84a8c:	1cc00017 	ldw	r19,0(r3)
   84a90:	203ebb0e 	bge	r4,zero,84580 <rx_descriptor_end+0xfff84520>
   84a94:	003ef106 	br	8465c <rx_descriptor_end+0xfff845fc>
   84a98:	9080040c 	andi	r2,r18,16
   84a9c:	1000921e 	bne	r2,zero,84ce8 <___vfprintf_internal_r+0x1aac>
   84aa0:	9480100c 	andi	r18,r18,64
   84aa4:	90013926 	beq	r18,zero,84f8c <___vfprintf_internal_r+0x1d50>
   84aa8:	d9002d17 	ldw	r4,180(sp)
   84aac:	d9402f17 	ldw	r5,188(sp)
   84ab0:	20800017 	ldw	r2,0(r4)
   84ab4:	21000104 	addi	r4,r4,4
   84ab8:	d9002d15 	stw	r4,180(sp)
   84abc:	1140000d 	sth	r5,0(r2)
   84ac0:	003a1606 	br	8331c <rx_descriptor_end+0xfff832bc>
   84ac4:	9080100c 	andi	r2,r18,64
   84ac8:	10008026 	beq	r2,zero,84ccc <___vfprintf_internal_r+0x1a90>
   84acc:	d8c02d17 	ldw	r3,180(sp)
   84ad0:	1cc0000f 	ldh	r19,0(r3)
   84ad4:	18c00104 	addi	r3,r3,4
   84ad8:	d8c02d15 	stw	r3,180(sp)
   84adc:	982dd7fa 	srai	r22,r19,31
   84ae0:	b005883a 	mov	r2,r22
   84ae4:	003b1f06 	br	83764 <rx_descriptor_end+0xfff83704>
   84ae8:	9080100c 	andi	r2,r18,64
   84aec:	d8002785 	stb	zero,158(sp)
   84af0:	10008a1e 	bne	r2,zero,84d1c <___vfprintf_internal_r+0x1ae0>
   84af4:	d9402d17 	ldw	r5,180(sp)
   84af8:	d8c02917 	ldw	r3,164(sp)
   84afc:	002d883a 	mov	r22,zero
   84b00:	28800104 	addi	r2,r5,4
   84b04:	2cc00017 	ldw	r19,0(r5)
   84b08:	183e4b0e 	bge	r3,zero,84438 <rx_descriptor_end+0xfff843d8>
   84b0c:	9d86b03a 	or	r3,r19,r22
   84b10:	d8802d15 	stw	r2,180(sp)
   84b14:	183e4c1e 	bne	r3,zero,84448 <rx_descriptor_end+0xfff843e8>
   84b18:	0039883a 	mov	fp,zero
   84b1c:	0005883a 	mov	r2,zero
   84b20:	003d4006 	br	84024 <rx_descriptor_end+0xfff83fc4>
   84b24:	01400274 	movhi	r5,9
   84b28:	29480984 	addi	r5,r5,8230
   84b2c:	d9402b15 	stw	r5,172(sp)
   84b30:	d9402b17 	ldw	r5,172(sp)
   84b34:	1c47883a 	add	r3,r3,r17
   84b38:	10800044 	addi	r2,r2,1
   84b3c:	41400015 	stw	r5,0(r8)
   84b40:	44400115 	stw	r17,4(r8)
   84b44:	d8c02015 	stw	r3,128(sp)
   84b48:	d8801f15 	stw	r2,124(sp)
   84b4c:	010001c4 	movi	r4,7
   84b50:	20bec816 	blt	r4,r2,84674 <rx_descriptor_end+0xfff84614>
   84b54:	42000204 	addi	r8,r8,8
   84b58:	003ecd06 	br	84690 <rx_descriptor_end+0xfff84630>
   84b5c:	d9002917 	ldw	r4,164(sp)
   84b60:	d8002785 	stb	zero,158(sp)
   84b64:	203d2d16 	blt	r4,zero,8401c <rx_descriptor_end+0xfff83fbc>
   84b68:	00bfdfc4 	movi	r2,-129
   84b6c:	90a4703a 	and	r18,r18,r2
   84b70:	003a9106 	br	835b8 <rx_descriptor_end+0xfff83558>
   84b74:	01000274 	movhi	r4,9
   84b78:	21080984 	addi	r4,r4,8230
   84b7c:	d9002b15 	stw	r4,172(sp)
   84b80:	003c0c06 	br	83bb4 <rx_descriptor_end+0xfff83b54>
   84b84:	d9002c17 	ldw	r4,176(sp)
   84b88:	d9801e04 	addi	r6,sp,120
   84b8c:	b80b883a 	mov	r5,r23
   84b90:	00889040 	call	88904 <__sprint_r>
   84b94:	103aab1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84b98:	d8c02017 	ldw	r3,128(sp)
   84b9c:	da000404 	addi	r8,sp,16
   84ba0:	003d4106 	br	840a8 <rx_descriptor_end+0xfff84048>
   84ba4:	d8801f17 	ldw	r2,124(sp)
   84ba8:	01400274 	movhi	r5,9
   84bac:	01000044 	movi	r4,1
   84bb0:	18c00044 	addi	r3,r3,1
   84bb4:	10800044 	addi	r2,r2,1
   84bb8:	29480904 	addi	r5,r5,8228
   84bbc:	41000115 	stw	r4,4(r8)
   84bc0:	41400015 	stw	r5,0(r8)
   84bc4:	d8c02015 	stw	r3,128(sp)
   84bc8:	d8801f15 	stw	r2,124(sp)
   84bcc:	010001c4 	movi	r4,7
   84bd0:	20805c16 	blt	r4,r2,84d44 <___vfprintf_internal_r+0x1b08>
   84bd4:	42000204 	addi	r8,r8,8
   84bd8:	8800041e 	bne	r17,zero,84bec <___vfprintf_internal_r+0x19b0>
   84bdc:	d8803317 	ldw	r2,204(sp)
   84be0:	1000021e 	bne	r2,zero,84bec <___vfprintf_internal_r+0x19b0>
   84be4:	9080004c 	andi	r2,r18,1
   84be8:	103c0926 	beq	r2,zero,83c10 <rx_descriptor_end+0xfff83bb0>
   84bec:	d9003717 	ldw	r4,220(sp)
   84bf0:	d8801f17 	ldw	r2,124(sp)
   84bf4:	d9403417 	ldw	r5,208(sp)
   84bf8:	20c7883a 	add	r3,r4,r3
   84bfc:	10800044 	addi	r2,r2,1
   84c00:	41000115 	stw	r4,4(r8)
   84c04:	41400015 	stw	r5,0(r8)
   84c08:	d8c02015 	stw	r3,128(sp)
   84c0c:	d8801f15 	stw	r2,124(sp)
   84c10:	010001c4 	movi	r4,7
   84c14:	20812116 	blt	r4,r2,8509c <___vfprintf_internal_r+0x1e60>
   84c18:	42000204 	addi	r8,r8,8
   84c1c:	0463c83a 	sub	r17,zero,r17
   84c20:	0440730e 	bge	zero,r17,84df0 <___vfprintf_internal_r+0x1bb4>
   84c24:	05800404 	movi	r22,16
   84c28:	b440860e 	bge	r22,r17,84e44 <___vfprintf_internal_r+0x1c08>
   84c2c:	01400274 	movhi	r5,9
   84c30:	29480984 	addi	r5,r5,8230
   84c34:	d9402b15 	stw	r5,172(sp)
   84c38:	070001c4 	movi	fp,7
   84c3c:	dcc02c17 	ldw	r19,176(sp)
   84c40:	00000306 	br	84c50 <___vfprintf_internal_r+0x1a14>
   84c44:	42000204 	addi	r8,r8,8
   84c48:	8c7ffc04 	addi	r17,r17,-16
   84c4c:	b440800e 	bge	r22,r17,84e50 <___vfprintf_internal_r+0x1c14>
   84c50:	18c00404 	addi	r3,r3,16
   84c54:	10800044 	addi	r2,r2,1
   84c58:	45000015 	stw	r20,0(r8)
   84c5c:	45800115 	stw	r22,4(r8)
   84c60:	d8c02015 	stw	r3,128(sp)
   84c64:	d8801f15 	stw	r2,124(sp)
   84c68:	e0bff60e 	bge	fp,r2,84c44 <rx_descriptor_end+0xfff84be4>
   84c6c:	d9801e04 	addi	r6,sp,120
   84c70:	b80b883a 	mov	r5,r23
   84c74:	9809883a 	mov	r4,r19
   84c78:	00889040 	call	88904 <__sprint_r>
   84c7c:	103a711e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84c80:	d8c02017 	ldw	r3,128(sp)
   84c84:	d8801f17 	ldw	r2,124(sp)
   84c88:	da000404 	addi	r8,sp,16
   84c8c:	003fee06 	br	84c48 <rx_descriptor_end+0xfff84be8>
   84c90:	00bfffc4 	movi	r2,-1
   84c94:	003a6f06 	br	83654 <rx_descriptor_end+0xfff835f4>
   84c98:	008011c4 	movi	r2,71
   84c9c:	1440b816 	blt	r2,r17,84f80 <___vfprintf_internal_r+0x1d44>
   84ca0:	04000274 	movhi	r16,9
   84ca4:	8407fb04 	addi	r16,r16,8172
   84ca8:	00c000c4 	movi	r3,3
   84cac:	00bfdfc4 	movi	r2,-129
   84cb0:	d8c02a15 	stw	r3,168(sp)
   84cb4:	90a4703a 	and	r18,r18,r2
   84cb8:	df002783 	ldbu	fp,158(sp)
   84cbc:	d8c02e15 	stw	r3,184(sp)
   84cc0:	d8002915 	stw	zero,164(sp)
   84cc4:	d8003215 	stw	zero,200(sp)
   84cc8:	003b2906 	br	83970 <rx_descriptor_end+0xfff83910>
   84ccc:	d9002d17 	ldw	r4,180(sp)
   84cd0:	24c00017 	ldw	r19,0(r4)
   84cd4:	21000104 	addi	r4,r4,4
   84cd8:	d9002d15 	stw	r4,180(sp)
   84cdc:	982dd7fa 	srai	r22,r19,31
   84ce0:	b005883a 	mov	r2,r22
   84ce4:	003a9f06 	br	83764 <rx_descriptor_end+0xfff83704>
   84ce8:	d9402d17 	ldw	r5,180(sp)
   84cec:	d8c02f17 	ldw	r3,188(sp)
   84cf0:	28800017 	ldw	r2,0(r5)
   84cf4:	29400104 	addi	r5,r5,4
   84cf8:	d9402d15 	stw	r5,180(sp)
   84cfc:	10c00015 	stw	r3,0(r2)
   84d00:	00398606 	br	8331c <rx_descriptor_end+0xfff832bc>
   84d04:	d9402d17 	ldw	r5,180(sp)
   84d08:	002d883a 	mov	r22,zero
   84d0c:	2cc00017 	ldw	r19,0(r5)
   84d10:	29400104 	addi	r5,r5,4
   84d14:	d9402d15 	stw	r5,180(sp)
   84d18:	003c2306 	br	83da8 <rx_descriptor_end+0xfff83d48>
   84d1c:	d8c02d17 	ldw	r3,180(sp)
   84d20:	d9002917 	ldw	r4,164(sp)
   84d24:	002d883a 	mov	r22,zero
   84d28:	18800104 	addi	r2,r3,4
   84d2c:	1cc0000b 	ldhu	r19,0(r3)
   84d30:	203dc10e 	bge	r4,zero,84438 <rx_descriptor_end+0xfff843d8>
   84d34:	003f7506 	br	84b0c <rx_descriptor_end+0xfff84aac>
   84d38:	04000274 	movhi	r16,9
   84d3c:	8407f904 	addi	r16,r16,8164
   84d40:	003acc06 	br	83874 <rx_descriptor_end+0xfff83814>
   84d44:	d9002c17 	ldw	r4,176(sp)
   84d48:	d9801e04 	addi	r6,sp,120
   84d4c:	b80b883a 	mov	r5,r23
   84d50:	00889040 	call	88904 <__sprint_r>
   84d54:	103a3b1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84d58:	dc402617 	ldw	r17,152(sp)
   84d5c:	d8c02017 	ldw	r3,128(sp)
   84d60:	da000404 	addi	r8,sp,16
   84d64:	003f9c06 	br	84bd8 <rx_descriptor_end+0xfff84b78>
   84d68:	ac400043 	ldbu	r17,1(r21)
   84d6c:	94800814 	ori	r18,r18,32
   84d70:	ad400044 	addi	r21,r21,1
   84d74:	8c403fcc 	andi	r17,r17,255
   84d78:	8c40201c 	xori	r17,r17,128
   84d7c:	8c7fe004 	addi	r17,r17,-128
   84d80:	00398f06 	br	833c0 <rx_descriptor_end+0xfff83360>
   84d84:	d8c02d15 	stw	r3,180(sp)
   84d88:	0039883a 	mov	fp,zero
   84d8c:	003e3506 	br	84664 <rx_descriptor_end+0xfff84604>
   84d90:	d9002c17 	ldw	r4,176(sp)
   84d94:	d9801e04 	addi	r6,sp,120
   84d98:	b80b883a 	mov	r5,r23
   84d9c:	00889040 	call	88904 <__sprint_r>
   84da0:	103a281e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84da4:	d8c02017 	ldw	r3,128(sp)
   84da8:	da000404 	addi	r8,sp,16
   84dac:	003cd006 	br	840f0 <rx_descriptor_end+0xfff84090>
   84db0:	8009883a 	mov	r4,r16
   84db4:	da003d15 	stw	r8,244(sp)
   84db8:	00887700 	call	88770 <strlen>
   84dbc:	d8802e15 	stw	r2,184(sp)
   84dc0:	da003d17 	ldw	r8,244(sp)
   84dc4:	103c340e 	bge	r2,zero,83e98 <rx_descriptor_end+0xfff83e38>
   84dc8:	0005883a 	mov	r2,zero
   84dcc:	003c3206 	br	83e98 <rx_descriptor_end+0xfff83e38>
   84dd0:	d9002c17 	ldw	r4,176(sp)
   84dd4:	d9801e04 	addi	r6,sp,120
   84dd8:	b80b883a 	mov	r5,r23
   84ddc:	00889040 	call	88904 <__sprint_r>
   84de0:	103a181e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84de4:	d8c02017 	ldw	r3,128(sp)
   84de8:	d8801f17 	ldw	r2,124(sp)
   84dec:	da000404 	addi	r8,sp,16
   84df0:	d9403317 	ldw	r5,204(sp)
   84df4:	10800044 	addi	r2,r2,1
   84df8:	44000015 	stw	r16,0(r8)
   84dfc:	28c7883a 	add	r3,r5,r3
   84e00:	003b7d06 	br	83bf8 <rx_descriptor_end+0xfff83b98>
   84e04:	01000274 	movhi	r4,9
   84e08:	21080d84 	addi	r4,r4,8246
   84e0c:	d9003515 	stw	r4,212(sp)
   84e10:	003b1406 	br	83a64 <rx_descriptor_end+0xfff83a04>
   84e14:	013fffc4 	movi	r4,-1
   84e18:	003a3506 	br	836f0 <rx_descriptor_end+0xfff83690>
   84e1c:	0023883a 	mov	r17,zero
   84e20:	003d9d06 	br	84498 <rx_descriptor_end+0xfff84438>
   84e24:	d9002c17 	ldw	r4,176(sp)
   84e28:	d9801e04 	addi	r6,sp,120
   84e2c:	b80b883a 	mov	r5,r23
   84e30:	00889040 	call	88904 <__sprint_r>
   84e34:	103a031e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84e38:	d8c02017 	ldw	r3,128(sp)
   84e3c:	da000404 	addi	r8,sp,16
   84e40:	003d9406 	br	84494 <rx_descriptor_end+0xfff84434>
   84e44:	01000274 	movhi	r4,9
   84e48:	21080984 	addi	r4,r4,8230
   84e4c:	d9002b15 	stw	r4,172(sp)
   84e50:	d9002b17 	ldw	r4,172(sp)
   84e54:	1c47883a 	add	r3,r3,r17
   84e58:	10800044 	addi	r2,r2,1
   84e5c:	41000015 	stw	r4,0(r8)
   84e60:	44400115 	stw	r17,4(r8)
   84e64:	d8c02015 	stw	r3,128(sp)
   84e68:	d8801f15 	stw	r2,124(sp)
   84e6c:	010001c4 	movi	r4,7
   84e70:	20bfd716 	blt	r4,r2,84dd0 <rx_descriptor_end+0xfff84d70>
   84e74:	42000204 	addi	r8,r8,8
   84e78:	003fdd06 	br	84df0 <rx_descriptor_end+0xfff84d90>
   84e7c:	d9002c17 	ldw	r4,176(sp)
   84e80:	d9801e04 	addi	r6,sp,120
   84e84:	b80b883a 	mov	r5,r23
   84e88:	00889040 	call	88904 <__sprint_r>
   84e8c:	1039ed1e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84e90:	d8802617 	ldw	r2,152(sp)
   84e94:	d8c02017 	ldw	r3,128(sp)
   84e98:	da000404 	addi	r8,sp,16
   84e9c:	003e1006 	br	846e0 <rx_descriptor_end+0xfff84680>
   84ea0:	00800044 	movi	r2,1
   84ea4:	10803fcc 	andi	r2,r2,255
   84ea8:	00c00044 	movi	r3,1
   84eac:	10fa3526 	beq	r2,r3,83784 <rx_descriptor_end+0xfff83724>
   84eb0:	00c00084 	movi	r3,2
   84eb4:	10fbcb26 	beq	r2,r3,83de4 <rx_descriptor_end+0xfff83d84>
   84eb8:	003a8f06 	br	838f8 <rx_descriptor_end+0xfff83898>
   84ebc:	01000274 	movhi	r4,9
   84ec0:	21080d84 	addi	r4,r4,8246
   84ec4:	d9003515 	stw	r4,212(sp)
   84ec8:	003b7606 	br	83ca4 <rx_descriptor_end+0xfff83c44>
   84ecc:	d8802917 	ldw	r2,164(sp)
   84ed0:	00c00184 	movi	r3,6
   84ed4:	1880012e 	bgeu	r3,r2,84edc <___vfprintf_internal_r+0x1ca0>
   84ed8:	1805883a 	mov	r2,r3
   84edc:	d8802e15 	stw	r2,184(sp)
   84ee0:	1000ef16 	blt	r2,zero,852a0 <___vfprintf_internal_r+0x2064>
   84ee4:	04000274 	movhi	r16,9
   84ee8:	d8802a15 	stw	r2,168(sp)
   84eec:	dcc02d15 	stw	r19,180(sp)
   84ef0:	d8002915 	stw	zero,164(sp)
   84ef4:	d8003215 	stw	zero,200(sp)
   84ef8:	84080704 	addi	r16,r16,8220
   84efc:	0039883a 	mov	fp,zero
   84f00:	003aa206 	br	8398c <rx_descriptor_end+0xfff8392c>
   84f04:	0021883a 	mov	r16,zero
   84f08:	003e0706 	br	84728 <rx_descriptor_end+0xfff846c8>
   84f0c:	d9002c17 	ldw	r4,176(sp)
   84f10:	d9801e04 	addi	r6,sp,120
   84f14:	b80b883a 	mov	r5,r23
   84f18:	00889040 	call	88904 <__sprint_r>
   84f1c:	1039c91e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   84f20:	d8802617 	ldw	r2,152(sp)
   84f24:	d9403317 	ldw	r5,204(sp)
   84f28:	d8c02017 	ldw	r3,128(sp)
   84f2c:	da000404 	addi	r8,sp,16
   84f30:	2885c83a 	sub	r2,r5,r2
   84f34:	003dfb06 	br	84724 <rx_descriptor_end+0xfff846c4>
   84f38:	9080004c 	andi	r2,r18,1
   84f3c:	103e8f1e 	bne	r2,zero,8497c <rx_descriptor_end+0xfff8491c>
   84f40:	d8802117 	ldw	r2,132(sp)
   84f44:	003e9e06 	br	849c0 <rx_descriptor_end+0xfff84960>
   84f48:	1025883a 	mov	r18,r2
   84f4c:	0039883a 	mov	fp,zero
   84f50:	00800084 	movi	r2,2
   84f54:	003fd306 	br	84ea4 <rx_descriptor_end+0xfff84e44>
   84f58:	07000b44 	movi	fp,45
   84f5c:	df002785 	stb	fp,158(sp)
   84f60:	003a4006 	br	83864 <rx_descriptor_end+0xfff83804>
   84f64:	00c00b44 	movi	r3,45
   84f68:	d8c02785 	stb	r3,158(sp)
   84f6c:	d8802a15 	stw	r2,168(sp)
   84f70:	dc802b17 	ldw	r18,172(sp)
   84f74:	d8002915 	stw	zero,164(sp)
   84f78:	07000b44 	movi	fp,45
   84f7c:	003a8006 	br	83980 <rx_descriptor_end+0xfff83920>
   84f80:	04000274 	movhi	r16,9
   84f84:	8407fc04 	addi	r16,r16,8176
   84f88:	003f4706 	br	84ca8 <rx_descriptor_end+0xfff84c48>
   84f8c:	d8c02d17 	ldw	r3,180(sp)
   84f90:	d9002f17 	ldw	r4,188(sp)
   84f94:	18800017 	ldw	r2,0(r3)
   84f98:	18c00104 	addi	r3,r3,4
   84f9c:	d8c02d15 	stw	r3,180(sp)
   84fa0:	11000015 	stw	r4,0(r2)
   84fa4:	0038dd06 	br	8331c <rx_descriptor_end+0xfff832bc>
   84fa8:	dd802617 	ldw	r22,152(sp)
   84fac:	00bfff44 	movi	r2,-3
   84fb0:	b0801c16 	blt	r22,r2,85024 <___vfprintf_internal_r+0x1de8>
   84fb4:	d9402917 	ldw	r5,164(sp)
   84fb8:	2d801a16 	blt	r5,r22,85024 <___vfprintf_internal_r+0x1de8>
   84fbc:	dd803215 	stw	r22,200(sp)
   84fc0:	003e8906 	br	849e8 <rx_descriptor_end+0xfff84988>
   84fc4:	01000274 	movhi	r4,9
   84fc8:	21080984 	addi	r4,r4,8230
   84fcc:	d9002b15 	stw	r4,172(sp)
   84fd0:	003c9106 	br	84218 <rx_descriptor_end+0xfff841b8>
   84fd4:	e005883a 	mov	r2,fp
   84fd8:	003e7906 	br	849c0 <rx_descriptor_end+0xfff84960>
   84fdc:	d9402917 	ldw	r5,164(sp)
   84fe0:	df002783 	ldbu	fp,158(sp)
   84fe4:	dcc02d15 	stw	r19,180(sp)
   84fe8:	d9402a15 	stw	r5,168(sp)
   84fec:	d9402e15 	stw	r5,184(sp)
   84ff0:	d8002915 	stw	zero,164(sp)
   84ff4:	d8003215 	stw	zero,200(sp)
   84ff8:	003a5d06 	br	83970 <rx_descriptor_end+0xfff83910>
   84ffc:	9080004c 	andi	r2,r18,1
   85000:	0039883a 	mov	fp,zero
   85004:	10000426 	beq	r2,zero,85018 <___vfprintf_internal_r+0x1ddc>
   85008:	00800c04 	movi	r2,48
   8500c:	dc001dc4 	addi	r16,sp,119
   85010:	d8801dc5 	stb	r2,119(sp)
   85014:	003b8006 	br	83e18 <rx_descriptor_end+0xfff83db8>
   85018:	d8002e15 	stw	zero,184(sp)
   8501c:	dc001e04 	addi	r16,sp,120
   85020:	003a4d06 	br	83958 <rx_descriptor_end+0xfff838f8>
   85024:	8c7fff84 	addi	r17,r17,-2
   85028:	b5bfffc4 	addi	r22,r22,-1
   8502c:	dd802615 	stw	r22,152(sp)
   85030:	dc4022c5 	stb	r17,139(sp)
   85034:	b000bf16 	blt	r22,zero,85334 <___vfprintf_internal_r+0x20f8>
   85038:	00800ac4 	movi	r2,43
   8503c:	d8802305 	stb	r2,140(sp)
   85040:	00800244 	movi	r2,9
   85044:	15807016 	blt	r2,r22,85208 <___vfprintf_internal_r+0x1fcc>
   85048:	00800c04 	movi	r2,48
   8504c:	b5800c04 	addi	r22,r22,48
   85050:	d8802345 	stb	r2,141(sp)
   85054:	dd802385 	stb	r22,142(sp)
   85058:	d88023c4 	addi	r2,sp,143
   8505c:	df0022c4 	addi	fp,sp,139
   85060:	d8c03317 	ldw	r3,204(sp)
   85064:	1739c83a 	sub	fp,r2,fp
   85068:	d9003317 	ldw	r4,204(sp)
   8506c:	e0c7883a 	add	r3,fp,r3
   85070:	df003a15 	stw	fp,232(sp)
   85074:	d8c02e15 	stw	r3,184(sp)
   85078:	00800044 	movi	r2,1
   8507c:	1100b30e 	bge	r2,r4,8534c <___vfprintf_internal_r+0x2110>
   85080:	d8c02e17 	ldw	r3,184(sp)
   85084:	18c00044 	addi	r3,r3,1
   85088:	d8c02e15 	stw	r3,184(sp)
   8508c:	1805883a 	mov	r2,r3
   85090:	1800ac16 	blt	r3,zero,85344 <___vfprintf_internal_r+0x2108>
   85094:	d8003215 	stw	zero,200(sp)
   85098:	003e5d06 	br	84a10 <rx_descriptor_end+0xfff849b0>
   8509c:	d9002c17 	ldw	r4,176(sp)
   850a0:	d9801e04 	addi	r6,sp,120
   850a4:	b80b883a 	mov	r5,r23
   850a8:	00889040 	call	88904 <__sprint_r>
   850ac:	1039651e 	bne	r2,zero,83644 <rx_descriptor_end+0xfff835e4>
   850b0:	dc402617 	ldw	r17,152(sp)
   850b4:	d8c02017 	ldw	r3,128(sp)
   850b8:	d8801f17 	ldw	r2,124(sp)
   850bc:	da000404 	addi	r8,sp,16
   850c0:	003ed606 	br	84c1c <rx_descriptor_end+0xfff84bbc>
   850c4:	582b883a 	mov	r21,r11
   850c8:	d8002915 	stw	zero,164(sp)
   850cc:	0038bd06 	br	833c4 <rx_descriptor_end+0xfff83364>
   850d0:	d8802917 	ldw	r2,164(sp)
   850d4:	103e071e 	bne	r2,zero,848f4 <rx_descriptor_end+0xfff84894>
   850d8:	dc002915 	stw	r16,164(sp)
   850dc:	003e0506 	br	848f4 <rx_descriptor_end+0xfff84894>
   850e0:	d9002917 	ldw	r4,164(sp)
   850e4:	20c00044 	addi	r3,r4,1
   850e8:	003e0f06 	br	84928 <rx_descriptor_end+0xfff848c8>
   850ec:	01400184 	movi	r5,6
   850f0:	d9402915 	stw	r5,164(sp)
   850f4:	003dff06 	br	848f4 <rx_descriptor_end+0xfff84894>
   850f8:	d8802104 	addi	r2,sp,132
   850fc:	d8800315 	stw	r2,12(sp)
   85100:	d8802504 	addi	r2,sp,148
   85104:	d8800215 	stw	r2,8(sp)
   85108:	d8802604 	addi	r2,sp,152
   8510c:	d8800115 	stw	r2,4(sp)
   85110:	d8802917 	ldw	r2,164(sp)
   85114:	d9403617 	ldw	r5,216(sp)
   85118:	d9002c17 	ldw	r4,176(sp)
   8511c:	d8800015 	stw	r2,0(sp)
   85120:	01c000c4 	movi	r7,3
   85124:	980d883a 	mov	r6,r19
   85128:	da003d15 	stw	r8,244(sp)
   8512c:	00859140 	call	85914 <_dtoa_r>
   85130:	d8c02917 	ldw	r3,164(sp)
   85134:	da003d17 	ldw	r8,244(sp)
   85138:	1021883a 	mov	r16,r2
   8513c:	10f9883a 	add	fp,r2,r3
   85140:	81000007 	ldb	r4,0(r16)
   85144:	00800c04 	movi	r2,48
   85148:	20805e26 	beq	r4,r2,852c4 <___vfprintf_internal_r+0x2088>
   8514c:	d8c02617 	ldw	r3,152(sp)
   85150:	e0f9883a 	add	fp,fp,r3
   85154:	003e0a06 	br	84980 <rx_descriptor_end+0xfff84920>
   85158:	00c00b44 	movi	r3,45
   8515c:	24e0003c 	xorhi	r19,r4,32768
   85160:	d8c02a05 	stb	r3,168(sp)
   85164:	003de906 	br	8490c <rx_descriptor_end+0xfff848ac>
   85168:	d8c03217 	ldw	r3,200(sp)
   8516c:	00c07a0e 	bge	zero,r3,85358 <___vfprintf_internal_r+0x211c>
   85170:	00800044 	movi	r2,1
   85174:	d9003317 	ldw	r4,204(sp)
   85178:	1105883a 	add	r2,r2,r4
   8517c:	d8802e15 	stw	r2,184(sp)
   85180:	10004e16 	blt	r2,zero,852bc <___vfprintf_internal_r+0x2080>
   85184:	044019c4 	movi	r17,103
   85188:	003e2106 	br	84a10 <rx_descriptor_end+0xfff849b0>
   8518c:	d9002917 	ldw	r4,164(sp)
   85190:	d8802104 	addi	r2,sp,132
   85194:	d8800315 	stw	r2,12(sp)
   85198:	d9000015 	stw	r4,0(sp)
   8519c:	d8802504 	addi	r2,sp,148
   851a0:	d9403617 	ldw	r5,216(sp)
   851a4:	d9002c17 	ldw	r4,176(sp)
   851a8:	d8800215 	stw	r2,8(sp)
   851ac:	d8802604 	addi	r2,sp,152
   851b0:	d8800115 	stw	r2,4(sp)
   851b4:	01c000c4 	movi	r7,3
   851b8:	980d883a 	mov	r6,r19
   851bc:	da003d15 	stw	r8,244(sp)
   851c0:	00859140 	call	85914 <_dtoa_r>
   851c4:	d8c02917 	ldw	r3,164(sp)
   851c8:	da003d17 	ldw	r8,244(sp)
   851cc:	1021883a 	mov	r16,r2
   851d0:	00801184 	movi	r2,70
   851d4:	80f9883a 	add	fp,r16,r3
   851d8:	88bfd926 	beq	r17,r2,85140 <rx_descriptor_end+0xfff850e0>
   851dc:	003de806 	br	84980 <rx_descriptor_end+0xfff84920>
   851e0:	d9002917 	ldw	r4,164(sp)
   851e4:	00c04d0e 	bge	zero,r3,8531c <___vfprintf_internal_r+0x20e0>
   851e8:	2000441e 	bne	r4,zero,852fc <___vfprintf_internal_r+0x20c0>
   851ec:	9480004c 	andi	r18,r18,1
   851f0:	9000421e 	bne	r18,zero,852fc <___vfprintf_internal_r+0x20c0>
   851f4:	1805883a 	mov	r2,r3
   851f8:	18007016 	blt	r3,zero,853bc <___vfprintf_internal_r+0x2180>
   851fc:	d8c03217 	ldw	r3,200(sp)
   85200:	d8c02e15 	stw	r3,184(sp)
   85204:	003e0206 	br	84a10 <rx_descriptor_end+0xfff849b0>
   85208:	df0022c4 	addi	fp,sp,139
   8520c:	dc002915 	stw	r16,164(sp)
   85210:	4027883a 	mov	r19,r8
   85214:	e021883a 	mov	r16,fp
   85218:	b009883a 	mov	r4,r22
   8521c:	01400284 	movi	r5,10
   85220:	008ba600 	call	8ba60 <__modsi3>
   85224:	10800c04 	addi	r2,r2,48
   85228:	843fffc4 	addi	r16,r16,-1
   8522c:	b009883a 	mov	r4,r22
   85230:	01400284 	movi	r5,10
   85234:	80800005 	stb	r2,0(r16)
   85238:	008b9dc0 	call	8b9dc <__divsi3>
   8523c:	102d883a 	mov	r22,r2
   85240:	00800244 	movi	r2,9
   85244:	15bff416 	blt	r2,r22,85218 <rx_descriptor_end+0xfff851b8>
   85248:	9811883a 	mov	r8,r19
   8524c:	b0800c04 	addi	r2,r22,48
   85250:	8027883a 	mov	r19,r16
   85254:	997fffc4 	addi	r5,r19,-1
   85258:	98bfffc5 	stb	r2,-1(r19)
   8525c:	dc002917 	ldw	r16,164(sp)
   85260:	2f006a2e 	bgeu	r5,fp,8540c <___vfprintf_internal_r+0x21d0>
   85264:	d9c02384 	addi	r7,sp,142
   85268:	3ccfc83a 	sub	r7,r7,r19
   8526c:	d9002344 	addi	r4,sp,141
   85270:	e1cf883a 	add	r7,fp,r7
   85274:	00000106 	br	8527c <___vfprintf_internal_r+0x2040>
   85278:	28800003 	ldbu	r2,0(r5)
   8527c:	20800005 	stb	r2,0(r4)
   85280:	21000044 	addi	r4,r4,1
   85284:	29400044 	addi	r5,r5,1
   85288:	393ffb1e 	bne	r7,r4,85278 <rx_descriptor_end+0xfff85218>
   8528c:	d8802304 	addi	r2,sp,140
   85290:	14c5c83a 	sub	r2,r2,r19
   85294:	d8c02344 	addi	r3,sp,141
   85298:	1885883a 	add	r2,r3,r2
   8529c:	003f7006 	br	85060 <rx_descriptor_end+0xfff85000>
   852a0:	0005883a 	mov	r2,zero
   852a4:	003f0f06 	br	84ee4 <rx_descriptor_end+0xfff84e84>
   852a8:	d8c03217 	ldw	r3,200(sp)
   852ac:	18c00044 	addi	r3,r3,1
   852b0:	d8c02e15 	stw	r3,184(sp)
   852b4:	1805883a 	mov	r2,r3
   852b8:	183fb20e 	bge	r3,zero,85184 <rx_descriptor_end+0xfff85124>
   852bc:	0005883a 	mov	r2,zero
   852c0:	003fb006 	br	85184 <rx_descriptor_end+0xfff85124>
   852c4:	d9003617 	ldw	r4,216(sp)
   852c8:	000d883a 	mov	r6,zero
   852cc:	000f883a 	mov	r7,zero
   852d0:	980b883a 	mov	r5,r19
   852d4:	d8c03c15 	stw	r3,240(sp)
   852d8:	da003d15 	stw	r8,244(sp)
   852dc:	008cd240 	call	8cd24 <__eqdf2>
   852e0:	d8c03c17 	ldw	r3,240(sp)
   852e4:	da003d17 	ldw	r8,244(sp)
   852e8:	103f9826 	beq	r2,zero,8514c <rx_descriptor_end+0xfff850ec>
   852ec:	00800044 	movi	r2,1
   852f0:	10c7c83a 	sub	r3,r2,r3
   852f4:	d8c02615 	stw	r3,152(sp)
   852f8:	003f9506 	br	85150 <rx_descriptor_end+0xfff850f0>
   852fc:	d9002917 	ldw	r4,164(sp)
   85300:	d8c03217 	ldw	r3,200(sp)
   85304:	20800044 	addi	r2,r4,1
   85308:	1885883a 	add	r2,r3,r2
   8530c:	d8802e15 	stw	r2,184(sp)
   85310:	103dbf0e 	bge	r2,zero,84a10 <rx_descriptor_end+0xfff849b0>
   85314:	0005883a 	mov	r2,zero
   85318:	003dbd06 	br	84a10 <rx_descriptor_end+0xfff849b0>
   8531c:	2000211e 	bne	r4,zero,853a4 <___vfprintf_internal_r+0x2168>
   85320:	9480004c 	andi	r18,r18,1
   85324:	90001f1e 	bne	r18,zero,853a4 <___vfprintf_internal_r+0x2168>
   85328:	00800044 	movi	r2,1
   8532c:	d8802e15 	stw	r2,184(sp)
   85330:	003db706 	br	84a10 <rx_descriptor_end+0xfff849b0>
   85334:	00800b44 	movi	r2,45
   85338:	05adc83a 	sub	r22,zero,r22
   8533c:	d8802305 	stb	r2,140(sp)
   85340:	003f3f06 	br	85040 <rx_descriptor_end+0xfff84fe0>
   85344:	0005883a 	mov	r2,zero
   85348:	003f5206 	br	85094 <rx_descriptor_end+0xfff85034>
   8534c:	90a4703a 	and	r18,r18,r2
   85350:	903f4e26 	beq	r18,zero,8508c <rx_descriptor_end+0xfff8502c>
   85354:	003f4a06 	br	85080 <rx_descriptor_end+0xfff85020>
   85358:	00800084 	movi	r2,2
   8535c:	10c5c83a 	sub	r2,r2,r3
   85360:	003f8406 	br	85174 <rx_descriptor_end+0xfff85114>
   85364:	d8802d17 	ldw	r2,180(sp)
   85368:	d9002d17 	ldw	r4,180(sp)
   8536c:	ac400043 	ldbu	r17,1(r21)
   85370:	10800017 	ldw	r2,0(r2)
   85374:	582b883a 	mov	r21,r11
   85378:	d8802915 	stw	r2,164(sp)
   8537c:	20800104 	addi	r2,r4,4
   85380:	d9002917 	ldw	r4,164(sp)
   85384:	d8802d15 	stw	r2,180(sp)
   85388:	203e7a0e 	bge	r4,zero,84d74 <rx_descriptor_end+0xfff84d14>
   8538c:	8c403fcc 	andi	r17,r17,255
   85390:	00bfffc4 	movi	r2,-1
   85394:	8c40201c 	xori	r17,r17,128
   85398:	d8802915 	stw	r2,164(sp)
   8539c:	8c7fe004 	addi	r17,r17,-128
   853a0:	00380706 	br	833c0 <rx_descriptor_end+0xfff83360>
   853a4:	d8c02917 	ldw	r3,164(sp)
   853a8:	18c00084 	addi	r3,r3,2
   853ac:	d8c02e15 	stw	r3,184(sp)
   853b0:	1805883a 	mov	r2,r3
   853b4:	183d960e 	bge	r3,zero,84a10 <rx_descriptor_end+0xfff849b0>
   853b8:	003fd606 	br	85314 <rx_descriptor_end+0xfff852b4>
   853bc:	0005883a 	mov	r2,zero
   853c0:	003f8e06 	br	851fc <rx_descriptor_end+0xfff8519c>
   853c4:	9080004c 	andi	r2,r18,1
   853c8:	103f811e 	bne	r2,zero,851d0 <rx_descriptor_end+0xfff85170>
   853cc:	d8802117 	ldw	r2,132(sp)
   853d0:	1405c83a 	sub	r2,r2,r16
   853d4:	d8803315 	stw	r2,204(sp)
   853d8:	b47ef326 	beq	r22,r17,84fa8 <rx_descriptor_end+0xfff84f48>
   853dc:	dd802617 	ldw	r22,152(sp)
   853e0:	003f1106 	br	85028 <rx_descriptor_end+0xfff84fc8>
   853e4:	d9c02785 	stb	r7,158(sp)
   853e8:	00390406 	br	837fc <rx_descriptor_end+0xfff8379c>
   853ec:	d9c02785 	stb	r7,158(sp)
   853f0:	0038d306 	br	83740 <rx_descriptor_end+0xfff836e0>
   853f4:	d9c02785 	stb	r7,158(sp)
   853f8:	003a6106 	br	83d80 <rx_descriptor_end+0xfff83d20>
   853fc:	d9c02785 	stb	r7,158(sp)
   85400:	003af806 	br	83fe4 <rx_descriptor_end+0xfff83f84>
   85404:	0005883a 	mov	r2,zero
   85408:	003d7e06 	br	84a04 <rx_descriptor_end+0xfff849a4>
   8540c:	d8802344 	addi	r2,sp,141
   85410:	003f1306 	br	85060 <rx_descriptor_end+0xfff85000>
   85414:	d9c02785 	stb	r7,158(sp)
   85418:	00392306 	br	838a8 <rx_descriptor_end+0xfff83848>
   8541c:	d9c02785 	stb	r7,158(sp)
   85420:	003aa906 	br	83ec8 <rx_descriptor_end+0xfff83e68>
   85424:	d9c02785 	stb	r7,158(sp)
   85428:	003a3d06 	br	83d20 <rx_descriptor_end+0xfff83cc0>
   8542c:	d9c02785 	stb	r7,158(sp)
   85430:	003aca06 	br	83f5c <rx_descriptor_end+0xfff83efc>

00085434 <__vfprintf_internal>:
   85434:	00800274 	movhi	r2,9
   85438:	10908204 	addi	r2,r2,16904
   8543c:	300f883a 	mov	r7,r6
   85440:	280d883a 	mov	r6,r5
   85444:	200b883a 	mov	r5,r4
   85448:	11000017 	ldw	r4,0(r2)
   8544c:	008323c1 	jmpi	8323c <___vfprintf_internal_r>

00085450 <__sbprintf>:
   85450:	2880030b 	ldhu	r2,12(r5)
   85454:	2ac01917 	ldw	r11,100(r5)
   85458:	2a80038b 	ldhu	r10,14(r5)
   8545c:	2a400717 	ldw	r9,28(r5)
   85460:	2a000917 	ldw	r8,36(r5)
   85464:	defee204 	addi	sp,sp,-1144
   85468:	00c10004 	movi	r3,1024
   8546c:	dc011a15 	stw	r16,1128(sp)
   85470:	10bfff4c 	andi	r2,r2,65533
   85474:	2821883a 	mov	r16,r5
   85478:	d8cb883a 	add	r5,sp,r3
   8547c:	dc811c15 	stw	r18,1136(sp)
   85480:	dc411b15 	stw	r17,1132(sp)
   85484:	dfc11d15 	stw	ra,1140(sp)
   85488:	2025883a 	mov	r18,r4
   8548c:	d881030d 	sth	r2,1036(sp)
   85490:	dac11915 	stw	r11,1124(sp)
   85494:	da81038d 	sth	r10,1038(sp)
   85498:	da410715 	stw	r9,1052(sp)
   8549c:	da010915 	stw	r8,1060(sp)
   854a0:	dec10015 	stw	sp,1024(sp)
   854a4:	dec10415 	stw	sp,1040(sp)
   854a8:	d8c10215 	stw	r3,1032(sp)
   854ac:	d8c10515 	stw	r3,1044(sp)
   854b0:	d8010615 	stw	zero,1048(sp)
   854b4:	008323c0 	call	8323c <___vfprintf_internal_r>
   854b8:	1023883a 	mov	r17,r2
   854bc:	10000416 	blt	r2,zero,854d0 <__sbprintf+0x80>
   854c0:	d9410004 	addi	r5,sp,1024
   854c4:	9009883a 	mov	r4,r18
   854c8:	0081ba00 	call	81ba0 <_fflush_r>
   854cc:	10000d1e 	bne	r2,zero,85504 <__sbprintf+0xb4>
   854d0:	d881030b 	ldhu	r2,1036(sp)
   854d4:	1080100c 	andi	r2,r2,64
   854d8:	10000326 	beq	r2,zero,854e8 <__sbprintf+0x98>
   854dc:	8080030b 	ldhu	r2,12(r16)
   854e0:	10801014 	ori	r2,r2,64
   854e4:	8080030d 	sth	r2,12(r16)
   854e8:	8805883a 	mov	r2,r17
   854ec:	dfc11d17 	ldw	ra,1140(sp)
   854f0:	dc811c17 	ldw	r18,1136(sp)
   854f4:	dc411b17 	ldw	r17,1132(sp)
   854f8:	dc011a17 	ldw	r16,1128(sp)
   854fc:	dec11e04 	addi	sp,sp,1144
   85500:	f800283a 	ret
   85504:	047fffc4 	movi	r17,-1
   85508:	003ff106 	br	854d0 <rx_descriptor_end+0xfff85470>

0008550c <_write_r>:
   8550c:	defffd04 	addi	sp,sp,-12
   85510:	2805883a 	mov	r2,r5
   85514:	dc000015 	stw	r16,0(sp)
   85518:	04000274 	movhi	r16,9
   8551c:	dc400115 	stw	r17,4(sp)
   85520:	300b883a 	mov	r5,r6
   85524:	84187a04 	addi	r16,r16,25064
   85528:	2023883a 	mov	r17,r4
   8552c:	380d883a 	mov	r6,r7
   85530:	1009883a 	mov	r4,r2
   85534:	dfc00215 	stw	ra,8(sp)
   85538:	80000015 	stw	zero,0(r16)
   8553c:	008ecf40 	call	8ecf4 <write>
   85540:	00ffffc4 	movi	r3,-1
   85544:	10c00526 	beq	r2,r3,8555c <_write_r+0x50>
   85548:	dfc00217 	ldw	ra,8(sp)
   8554c:	dc400117 	ldw	r17,4(sp)
   85550:	dc000017 	ldw	r16,0(sp)
   85554:	dec00304 	addi	sp,sp,12
   85558:	f800283a 	ret
   8555c:	80c00017 	ldw	r3,0(r16)
   85560:	183ff926 	beq	r3,zero,85548 <rx_descriptor_end+0xfff854e8>
   85564:	88c00015 	stw	r3,0(r17)
   85568:	003ff706 	br	85548 <rx_descriptor_end+0xfff854e8>

0008556c <__swsetup_r>:
   8556c:	00800274 	movhi	r2,9
   85570:	defffd04 	addi	sp,sp,-12
   85574:	10908204 	addi	r2,r2,16904
   85578:	dc400115 	stw	r17,4(sp)
   8557c:	2023883a 	mov	r17,r4
   85580:	11000017 	ldw	r4,0(r2)
   85584:	dc000015 	stw	r16,0(sp)
   85588:	dfc00215 	stw	ra,8(sp)
   8558c:	2821883a 	mov	r16,r5
   85590:	20000226 	beq	r4,zero,8559c <__swsetup_r+0x30>
   85594:	20800e17 	ldw	r2,56(r4)
   85598:	10003126 	beq	r2,zero,85660 <__swsetup_r+0xf4>
   8559c:	8080030b 	ldhu	r2,12(r16)
   855a0:	10c0020c 	andi	r3,r2,8
   855a4:	1009883a 	mov	r4,r2
   855a8:	18000f26 	beq	r3,zero,855e8 <__swsetup_r+0x7c>
   855ac:	80c00417 	ldw	r3,16(r16)
   855b0:	18001526 	beq	r3,zero,85608 <__swsetup_r+0x9c>
   855b4:	1100004c 	andi	r4,r2,1
   855b8:	20001c1e 	bne	r4,zero,8562c <__swsetup_r+0xc0>
   855bc:	1080008c 	andi	r2,r2,2
   855c0:	1000291e 	bne	r2,zero,85668 <__swsetup_r+0xfc>
   855c4:	80800517 	ldw	r2,20(r16)
   855c8:	80800215 	stw	r2,8(r16)
   855cc:	18001c26 	beq	r3,zero,85640 <__swsetup_r+0xd4>
   855d0:	0005883a 	mov	r2,zero
   855d4:	dfc00217 	ldw	ra,8(sp)
   855d8:	dc400117 	ldw	r17,4(sp)
   855dc:	dc000017 	ldw	r16,0(sp)
   855e0:	dec00304 	addi	sp,sp,12
   855e4:	f800283a 	ret
   855e8:	2080040c 	andi	r2,r4,16
   855ec:	10002e26 	beq	r2,zero,856a8 <__swsetup_r+0x13c>
   855f0:	2080010c 	andi	r2,r4,4
   855f4:	10001e1e 	bne	r2,zero,85670 <__swsetup_r+0x104>
   855f8:	80c00417 	ldw	r3,16(r16)
   855fc:	20800214 	ori	r2,r4,8
   85600:	8080030d 	sth	r2,12(r16)
   85604:	183feb1e 	bne	r3,zero,855b4 <rx_descriptor_end+0xfff85554>
   85608:	1100a00c 	andi	r4,r2,640
   8560c:	01408004 	movi	r5,512
   85610:	217fe826 	beq	r4,r5,855b4 <rx_descriptor_end+0xfff85554>
   85614:	800b883a 	mov	r5,r16
   85618:	8809883a 	mov	r4,r17
   8561c:	00871dc0 	call	871dc <__smakebuf_r>
   85620:	8080030b 	ldhu	r2,12(r16)
   85624:	80c00417 	ldw	r3,16(r16)
   85628:	003fe206 	br	855b4 <rx_descriptor_end+0xfff85554>
   8562c:	80800517 	ldw	r2,20(r16)
   85630:	80000215 	stw	zero,8(r16)
   85634:	0085c83a 	sub	r2,zero,r2
   85638:	80800615 	stw	r2,24(r16)
   8563c:	183fe41e 	bne	r3,zero,855d0 <rx_descriptor_end+0xfff85570>
   85640:	80c0030b 	ldhu	r3,12(r16)
   85644:	0005883a 	mov	r2,zero
   85648:	1900200c 	andi	r4,r3,128
   8564c:	203fe126 	beq	r4,zero,855d4 <rx_descriptor_end+0xfff85574>
   85650:	18c01014 	ori	r3,r3,64
   85654:	80c0030d 	sth	r3,12(r16)
   85658:	00bfffc4 	movi	r2,-1
   8565c:	003fdd06 	br	855d4 <rx_descriptor_end+0xfff85574>
   85660:	0081f7c0 	call	81f7c <__sinit>
   85664:	003fcd06 	br	8559c <rx_descriptor_end+0xfff8553c>
   85668:	0005883a 	mov	r2,zero
   8566c:	003fd606 	br	855c8 <rx_descriptor_end+0xfff85568>
   85670:	81400c17 	ldw	r5,48(r16)
   85674:	28000626 	beq	r5,zero,85690 <__swsetup_r+0x124>
   85678:	80801004 	addi	r2,r16,64
   8567c:	28800326 	beq	r5,r2,8568c <__swsetup_r+0x120>
   85680:	8809883a 	mov	r4,r17
   85684:	00820f00 	call	820f0 <_free_r>
   85688:	8100030b 	ldhu	r4,12(r16)
   8568c:	80000c15 	stw	zero,48(r16)
   85690:	80c00417 	ldw	r3,16(r16)
   85694:	00bff6c4 	movi	r2,-37
   85698:	1108703a 	and	r4,r2,r4
   8569c:	80000115 	stw	zero,4(r16)
   856a0:	80c00015 	stw	r3,0(r16)
   856a4:	003fd506 	br	855fc <rx_descriptor_end+0xfff8559c>
   856a8:	00800244 	movi	r2,9
   856ac:	88800015 	stw	r2,0(r17)
   856b0:	20801014 	ori	r2,r4,64
   856b4:	8080030d 	sth	r2,12(r16)
   856b8:	00bfffc4 	movi	r2,-1
   856bc:	003fc506 	br	855d4 <rx_descriptor_end+0xfff85574>

000856c0 <_close_r>:
   856c0:	defffd04 	addi	sp,sp,-12
   856c4:	dc000015 	stw	r16,0(sp)
   856c8:	04000274 	movhi	r16,9
   856cc:	dc400115 	stw	r17,4(sp)
   856d0:	84187a04 	addi	r16,r16,25064
   856d4:	2023883a 	mov	r17,r4
   856d8:	2809883a 	mov	r4,r5
   856dc:	dfc00215 	stw	ra,8(sp)
   856e0:	80000015 	stw	zero,0(r16)
   856e4:	008e2340 	call	8e234 <close>
   856e8:	00ffffc4 	movi	r3,-1
   856ec:	10c00526 	beq	r2,r3,85704 <_close_r+0x44>
   856f0:	dfc00217 	ldw	ra,8(sp)
   856f4:	dc400117 	ldw	r17,4(sp)
   856f8:	dc000017 	ldw	r16,0(sp)
   856fc:	dec00304 	addi	sp,sp,12
   85700:	f800283a 	ret
   85704:	80c00017 	ldw	r3,0(r16)
   85708:	183ff926 	beq	r3,zero,856f0 <rx_descriptor_end+0xfff85690>
   8570c:	88c00015 	stw	r3,0(r17)
   85710:	003ff706 	br	856f0 <rx_descriptor_end+0xfff85690>

00085714 <quorem>:
   85714:	defff704 	addi	sp,sp,-36
   85718:	dc800215 	stw	r18,8(sp)
   8571c:	20800417 	ldw	r2,16(r4)
   85720:	2c800417 	ldw	r18,16(r5)
   85724:	dfc00815 	stw	ra,32(sp)
   85728:	ddc00715 	stw	r23,28(sp)
   8572c:	dd800615 	stw	r22,24(sp)
   85730:	dd400515 	stw	r21,20(sp)
   85734:	dd000415 	stw	r20,16(sp)
   85738:	dcc00315 	stw	r19,12(sp)
   8573c:	dc400115 	stw	r17,4(sp)
   85740:	dc000015 	stw	r16,0(sp)
   85744:	14807116 	blt	r2,r18,8590c <quorem+0x1f8>
   85748:	94bfffc4 	addi	r18,r18,-1
   8574c:	94ad883a 	add	r22,r18,r18
   85750:	b5ad883a 	add	r22,r22,r22
   85754:	2c400504 	addi	r17,r5,20
   85758:	8da9883a 	add	r20,r17,r22
   8575c:	25400504 	addi	r21,r4,20
   85760:	282f883a 	mov	r23,r5
   85764:	adad883a 	add	r22,r21,r22
   85768:	a1400017 	ldw	r5,0(r20)
   8576c:	2021883a 	mov	r16,r4
   85770:	b1000017 	ldw	r4,0(r22)
   85774:	29400044 	addi	r5,r5,1
   85778:	008bad40 	call	8bad4 <__udivsi3>
   8577c:	1027883a 	mov	r19,r2
   85780:	10002c26 	beq	r2,zero,85834 <quorem+0x120>
   85784:	a813883a 	mov	r9,r21
   85788:	880b883a 	mov	r5,r17
   8578c:	0009883a 	mov	r4,zero
   85790:	000d883a 	mov	r6,zero
   85794:	2a000017 	ldw	r8,0(r5)
   85798:	49c00017 	ldw	r7,0(r9)
   8579c:	29400104 	addi	r5,r5,4
   857a0:	40bfffcc 	andi	r2,r8,65535
   857a4:	14c5383a 	mul	r2,r2,r19
   857a8:	4010d43a 	srli	r8,r8,16
   857ac:	38ffffcc 	andi	r3,r7,65535
   857b0:	1105883a 	add	r2,r2,r4
   857b4:	1008d43a 	srli	r4,r2,16
   857b8:	44d1383a 	mul	r8,r8,r19
   857bc:	198d883a 	add	r6,r3,r6
   857c0:	10ffffcc 	andi	r3,r2,65535
   857c4:	30c7c83a 	sub	r3,r6,r3
   857c8:	380ed43a 	srli	r7,r7,16
   857cc:	4105883a 	add	r2,r8,r4
   857d0:	180dd43a 	srai	r6,r3,16
   857d4:	113fffcc 	andi	r4,r2,65535
   857d8:	390fc83a 	sub	r7,r7,r4
   857dc:	398d883a 	add	r6,r7,r6
   857e0:	300e943a 	slli	r7,r6,16
   857e4:	18ffffcc 	andi	r3,r3,65535
   857e8:	1008d43a 	srli	r4,r2,16
   857ec:	38ceb03a 	or	r7,r7,r3
   857f0:	49c00015 	stw	r7,0(r9)
   857f4:	300dd43a 	srai	r6,r6,16
   857f8:	4a400104 	addi	r9,r9,4
   857fc:	a17fe52e 	bgeu	r20,r5,85794 <rx_descriptor_end+0xfff85734>
   85800:	b0800017 	ldw	r2,0(r22)
   85804:	10000b1e 	bne	r2,zero,85834 <quorem+0x120>
   85808:	b0bfff04 	addi	r2,r22,-4
   8580c:	a880082e 	bgeu	r21,r2,85830 <quorem+0x11c>
   85810:	b0ffff17 	ldw	r3,-4(r22)
   85814:	18000326 	beq	r3,zero,85824 <quorem+0x110>
   85818:	00000506 	br	85830 <quorem+0x11c>
   8581c:	10c00017 	ldw	r3,0(r2)
   85820:	1800031e 	bne	r3,zero,85830 <quorem+0x11c>
   85824:	10bfff04 	addi	r2,r2,-4
   85828:	94bfffc4 	addi	r18,r18,-1
   8582c:	a8bffb36 	bltu	r21,r2,8581c <rx_descriptor_end+0xfff857bc>
   85830:	84800415 	stw	r18,16(r16)
   85834:	b80b883a 	mov	r5,r23
   85838:	8009883a 	mov	r4,r16
   8583c:	0087e8c0 	call	87e8c <__mcmp>
   85840:	10002616 	blt	r2,zero,858dc <quorem+0x1c8>
   85844:	9cc00044 	addi	r19,r19,1
   85848:	a805883a 	mov	r2,r21
   8584c:	000b883a 	mov	r5,zero
   85850:	11000017 	ldw	r4,0(r2)
   85854:	89800017 	ldw	r6,0(r17)
   85858:	10800104 	addi	r2,r2,4
   8585c:	20ffffcc 	andi	r3,r4,65535
   85860:	194b883a 	add	r5,r3,r5
   85864:	30ffffcc 	andi	r3,r6,65535
   85868:	28c7c83a 	sub	r3,r5,r3
   8586c:	300cd43a 	srli	r6,r6,16
   85870:	2008d43a 	srli	r4,r4,16
   85874:	180bd43a 	srai	r5,r3,16
   85878:	18ffffcc 	andi	r3,r3,65535
   8587c:	2189c83a 	sub	r4,r4,r6
   85880:	2149883a 	add	r4,r4,r5
   85884:	200c943a 	slli	r6,r4,16
   85888:	8c400104 	addi	r17,r17,4
   8588c:	200bd43a 	srai	r5,r4,16
   85890:	30c6b03a 	or	r3,r6,r3
   85894:	10ffff15 	stw	r3,-4(r2)
   85898:	a47fed2e 	bgeu	r20,r17,85850 <rx_descriptor_end+0xfff857f0>
   8589c:	9485883a 	add	r2,r18,r18
   858a0:	1085883a 	add	r2,r2,r2
   858a4:	a887883a 	add	r3,r21,r2
   858a8:	18800017 	ldw	r2,0(r3)
   858ac:	10000b1e 	bne	r2,zero,858dc <quorem+0x1c8>
   858b0:	18bfff04 	addi	r2,r3,-4
   858b4:	a880082e 	bgeu	r21,r2,858d8 <quorem+0x1c4>
   858b8:	18ffff17 	ldw	r3,-4(r3)
   858bc:	18000326 	beq	r3,zero,858cc <quorem+0x1b8>
   858c0:	00000506 	br	858d8 <quorem+0x1c4>
   858c4:	10c00017 	ldw	r3,0(r2)
   858c8:	1800031e 	bne	r3,zero,858d8 <quorem+0x1c4>
   858cc:	10bfff04 	addi	r2,r2,-4
   858d0:	94bfffc4 	addi	r18,r18,-1
   858d4:	a8bffb36 	bltu	r21,r2,858c4 <rx_descriptor_end+0xfff85864>
   858d8:	84800415 	stw	r18,16(r16)
   858dc:	9805883a 	mov	r2,r19
   858e0:	dfc00817 	ldw	ra,32(sp)
   858e4:	ddc00717 	ldw	r23,28(sp)
   858e8:	dd800617 	ldw	r22,24(sp)
   858ec:	dd400517 	ldw	r21,20(sp)
   858f0:	dd000417 	ldw	r20,16(sp)
   858f4:	dcc00317 	ldw	r19,12(sp)
   858f8:	dc800217 	ldw	r18,8(sp)
   858fc:	dc400117 	ldw	r17,4(sp)
   85900:	dc000017 	ldw	r16,0(sp)
   85904:	dec00904 	addi	sp,sp,36
   85908:	f800283a 	ret
   8590c:	0005883a 	mov	r2,zero
   85910:	003ff306 	br	858e0 <rx_descriptor_end+0xfff85880>

00085914 <_dtoa_r>:
   85914:	20801017 	ldw	r2,64(r4)
   85918:	deffde04 	addi	sp,sp,-136
   8591c:	df002015 	stw	fp,128(sp)
   85920:	dcc01b15 	stw	r19,108(sp)
   85924:	dc801a15 	stw	r18,104(sp)
   85928:	dc401915 	stw	r17,100(sp)
   8592c:	dc001815 	stw	r16,96(sp)
   85930:	dfc02115 	stw	ra,132(sp)
   85934:	ddc01f15 	stw	r23,124(sp)
   85938:	dd801e15 	stw	r22,120(sp)
   8593c:	dd401d15 	stw	r21,116(sp)
   85940:	dd001c15 	stw	r20,112(sp)
   85944:	d9c00315 	stw	r7,12(sp)
   85948:	2039883a 	mov	fp,r4
   8594c:	3023883a 	mov	r17,r6
   85950:	2825883a 	mov	r18,r5
   85954:	dc002417 	ldw	r16,144(sp)
   85958:	3027883a 	mov	r19,r6
   8595c:	10000826 	beq	r2,zero,85980 <_dtoa_r+0x6c>
   85960:	21801117 	ldw	r6,68(r4)
   85964:	00c00044 	movi	r3,1
   85968:	100b883a 	mov	r5,r2
   8596c:	1986983a 	sll	r3,r3,r6
   85970:	11800115 	stw	r6,4(r2)
   85974:	10c00215 	stw	r3,8(r2)
   85978:	008766c0 	call	8766c <_Bfree>
   8597c:	e0001015 	stw	zero,64(fp)
   85980:	88002e16 	blt	r17,zero,85a3c <_dtoa_r+0x128>
   85984:	80000015 	stw	zero,0(r16)
   85988:	889ffc2c 	andhi	r2,r17,32752
   8598c:	00dffc34 	movhi	r3,32752
   85990:	10c01c26 	beq	r2,r3,85a04 <_dtoa_r+0xf0>
   85994:	000d883a 	mov	r6,zero
   85998:	000f883a 	mov	r7,zero
   8599c:	9009883a 	mov	r4,r18
   859a0:	980b883a 	mov	r5,r19
   859a4:	008cd240 	call	8cd24 <__eqdf2>
   859a8:	10002b1e 	bne	r2,zero,85a58 <_dtoa_r+0x144>
   859ac:	d9c02317 	ldw	r7,140(sp)
   859b0:	00800044 	movi	r2,1
   859b4:	38800015 	stw	r2,0(r7)
   859b8:	d8802517 	ldw	r2,148(sp)
   859bc:	10019e26 	beq	r2,zero,86038 <_dtoa_r+0x724>
   859c0:	d8c02517 	ldw	r3,148(sp)
   859c4:	00800274 	movhi	r2,9
   859c8:	10880944 	addi	r2,r2,8229
   859cc:	18800015 	stw	r2,0(r3)
   859d0:	10bfffc4 	addi	r2,r2,-1
   859d4:	dfc02117 	ldw	ra,132(sp)
   859d8:	df002017 	ldw	fp,128(sp)
   859dc:	ddc01f17 	ldw	r23,124(sp)
   859e0:	dd801e17 	ldw	r22,120(sp)
   859e4:	dd401d17 	ldw	r21,116(sp)
   859e8:	dd001c17 	ldw	r20,112(sp)
   859ec:	dcc01b17 	ldw	r19,108(sp)
   859f0:	dc801a17 	ldw	r18,104(sp)
   859f4:	dc401917 	ldw	r17,100(sp)
   859f8:	dc001817 	ldw	r16,96(sp)
   859fc:	dec02204 	addi	sp,sp,136
   85a00:	f800283a 	ret
   85a04:	d8c02317 	ldw	r3,140(sp)
   85a08:	0089c3c4 	movi	r2,9999
   85a0c:	18800015 	stw	r2,0(r3)
   85a10:	90017726 	beq	r18,zero,85ff0 <_dtoa_r+0x6dc>
   85a14:	00800274 	movhi	r2,9
   85a18:	10881504 	addi	r2,r2,8276
   85a1c:	d9002517 	ldw	r4,148(sp)
   85a20:	203fec26 	beq	r4,zero,859d4 <rx_descriptor_end+0xfff85974>
   85a24:	10c000c7 	ldb	r3,3(r2)
   85a28:	1801781e 	bne	r3,zero,8600c <_dtoa_r+0x6f8>
   85a2c:	10c000c4 	addi	r3,r2,3
   85a30:	d9802517 	ldw	r6,148(sp)
   85a34:	30c00015 	stw	r3,0(r6)
   85a38:	003fe606 	br	859d4 <rx_descriptor_end+0xfff85974>
   85a3c:	04e00034 	movhi	r19,32768
   85a40:	9cffffc4 	addi	r19,r19,-1
   85a44:	00800044 	movi	r2,1
   85a48:	8ce6703a 	and	r19,r17,r19
   85a4c:	80800015 	stw	r2,0(r16)
   85a50:	9823883a 	mov	r17,r19
   85a54:	003fcc06 	br	85988 <rx_descriptor_end+0xfff85928>
   85a58:	d8800204 	addi	r2,sp,8
   85a5c:	d8800015 	stw	r2,0(sp)
   85a60:	d9c00104 	addi	r7,sp,4
   85a64:	900b883a 	mov	r5,r18
   85a68:	980d883a 	mov	r6,r19
   85a6c:	e009883a 	mov	r4,fp
   85a70:	8820d53a 	srli	r16,r17,20
   85a74:	00882580 	call	88258 <__d2b>
   85a78:	d8800915 	stw	r2,36(sp)
   85a7c:	8001651e 	bne	r16,zero,86014 <_dtoa_r+0x700>
   85a80:	dd800217 	ldw	r22,8(sp)
   85a84:	dc000117 	ldw	r16,4(sp)
   85a88:	00800804 	movi	r2,32
   85a8c:	b421883a 	add	r16,r22,r16
   85a90:	80c10c84 	addi	r3,r16,1074
   85a94:	10c2d10e 	bge	r2,r3,865dc <_dtoa_r+0xcc8>
   85a98:	00801004 	movi	r2,64
   85a9c:	81010484 	addi	r4,r16,1042
   85aa0:	10c7c83a 	sub	r3,r2,r3
   85aa4:	9108d83a 	srl	r4,r18,r4
   85aa8:	88e2983a 	sll	r17,r17,r3
   85aac:	2448b03a 	or	r4,r4,r17
   85ab0:	008e0ec0 	call	8e0ec <__floatunsidf>
   85ab4:	017f8434 	movhi	r5,65040
   85ab8:	01800044 	movi	r6,1
   85abc:	1009883a 	mov	r4,r2
   85ac0:	194b883a 	add	r5,r3,r5
   85ac4:	843fffc4 	addi	r16,r16,-1
   85ac8:	d9801115 	stw	r6,68(sp)
   85acc:	000d883a 	mov	r6,zero
   85ad0:	01cffe34 	movhi	r7,16376
   85ad4:	008d6940 	call	8d694 <__subdf3>
   85ad8:	0198dbf4 	movhi	r6,25455
   85adc:	01cff4f4 	movhi	r7,16339
   85ae0:	3190d844 	addi	r6,r6,17249
   85ae4:	39e1e9c4 	addi	r7,r7,-30809
   85ae8:	1009883a 	mov	r4,r2
   85aec:	180b883a 	mov	r5,r3
   85af0:	008cf7c0 	call	8cf7c <__muldf3>
   85af4:	01a2d874 	movhi	r6,35681
   85af8:	01cff1f4 	movhi	r7,16327
   85afc:	31b22cc4 	addi	r6,r6,-14157
   85b00:	39e28a04 	addi	r7,r7,-30168
   85b04:	180b883a 	mov	r5,r3
   85b08:	1009883a 	mov	r4,r2
   85b0c:	008bb900 	call	8bb90 <__adddf3>
   85b10:	8009883a 	mov	r4,r16
   85b14:	1029883a 	mov	r20,r2
   85b18:	1823883a 	mov	r17,r3
   85b1c:	008e0100 	call	8e010 <__floatsidf>
   85b20:	019427f4 	movhi	r6,20639
   85b24:	01cff4f4 	movhi	r7,16339
   85b28:	319e7ec4 	addi	r6,r6,31227
   85b2c:	39d104c4 	addi	r7,r7,17427
   85b30:	1009883a 	mov	r4,r2
   85b34:	180b883a 	mov	r5,r3
   85b38:	008cf7c0 	call	8cf7c <__muldf3>
   85b3c:	100d883a 	mov	r6,r2
   85b40:	180f883a 	mov	r7,r3
   85b44:	a009883a 	mov	r4,r20
   85b48:	880b883a 	mov	r5,r17
   85b4c:	008bb900 	call	8bb90 <__adddf3>
   85b50:	1009883a 	mov	r4,r2
   85b54:	180b883a 	mov	r5,r3
   85b58:	1029883a 	mov	r20,r2
   85b5c:	1823883a 	mov	r17,r3
   85b60:	008df900 	call	8df90 <__fixdfsi>
   85b64:	000d883a 	mov	r6,zero
   85b68:	000f883a 	mov	r7,zero
   85b6c:	a009883a 	mov	r4,r20
   85b70:	880b883a 	mov	r5,r17
   85b74:	d8800515 	stw	r2,20(sp)
   85b78:	008ce880 	call	8ce88 <__ledf2>
   85b7c:	10028716 	blt	r2,zero,8659c <_dtoa_r+0xc88>
   85b80:	d8c00517 	ldw	r3,20(sp)
   85b84:	00800584 	movi	r2,22
   85b88:	10c27536 	bltu	r2,r3,86560 <_dtoa_r+0xc4c>
   85b8c:	180490fa 	slli	r2,r3,3
   85b90:	00c00274 	movhi	r3,9
   85b94:	18c83004 	addi	r3,r3,8384
   85b98:	1885883a 	add	r2,r3,r2
   85b9c:	11000017 	ldw	r4,0(r2)
   85ba0:	11400117 	ldw	r5,4(r2)
   85ba4:	900d883a 	mov	r6,r18
   85ba8:	980f883a 	mov	r7,r19
   85bac:	008cdac0 	call	8cdac <__gedf2>
   85bb0:	00828d0e 	bge	zero,r2,865e8 <_dtoa_r+0xcd4>
   85bb4:	d9000517 	ldw	r4,20(sp)
   85bb8:	d8000e15 	stw	zero,56(sp)
   85bbc:	213fffc4 	addi	r4,r4,-1
   85bc0:	d9000515 	stw	r4,20(sp)
   85bc4:	b42dc83a 	sub	r22,r22,r16
   85bc8:	b5bfffc4 	addi	r22,r22,-1
   85bcc:	b0026f16 	blt	r22,zero,8658c <_dtoa_r+0xc78>
   85bd0:	d8000815 	stw	zero,32(sp)
   85bd4:	d9c00517 	ldw	r7,20(sp)
   85bd8:	38026416 	blt	r7,zero,8656c <_dtoa_r+0xc58>
   85bdc:	b1ed883a 	add	r22,r22,r7
   85be0:	d9c00d15 	stw	r7,52(sp)
   85be4:	d8000a15 	stw	zero,40(sp)
   85be8:	d9800317 	ldw	r6,12(sp)
   85bec:	00800244 	movi	r2,9
   85bf0:	11811436 	bltu	r2,r6,86044 <_dtoa_r+0x730>
   85bf4:	00800144 	movi	r2,5
   85bf8:	1184e10e 	bge	r2,r6,86f80 <_dtoa_r+0x166c>
   85bfc:	31bfff04 	addi	r6,r6,-4
   85c00:	d9800315 	stw	r6,12(sp)
   85c04:	0023883a 	mov	r17,zero
   85c08:	d9800317 	ldw	r6,12(sp)
   85c0c:	008000c4 	movi	r2,3
   85c10:	30836726 	beq	r6,r2,869b0 <_dtoa_r+0x109c>
   85c14:	1183410e 	bge	r2,r6,8691c <_dtoa_r+0x1008>
   85c18:	d9c00317 	ldw	r7,12(sp)
   85c1c:	00800104 	movi	r2,4
   85c20:	38827c26 	beq	r7,r2,86614 <_dtoa_r+0xd00>
   85c24:	00800144 	movi	r2,5
   85c28:	3884c41e 	bne	r7,r2,86f3c <_dtoa_r+0x1628>
   85c2c:	00800044 	movi	r2,1
   85c30:	d8800b15 	stw	r2,44(sp)
   85c34:	d8c00517 	ldw	r3,20(sp)
   85c38:	d9002217 	ldw	r4,136(sp)
   85c3c:	1907883a 	add	r3,r3,r4
   85c40:	19800044 	addi	r6,r3,1
   85c44:	d8c00c15 	stw	r3,48(sp)
   85c48:	d9800615 	stw	r6,24(sp)
   85c4c:	0183a40e 	bge	zero,r6,86ae0 <_dtoa_r+0x11cc>
   85c50:	d9800617 	ldw	r6,24(sp)
   85c54:	3021883a 	mov	r16,r6
   85c58:	e0001115 	stw	zero,68(fp)
   85c5c:	008005c4 	movi	r2,23
   85c60:	1184c92e 	bgeu	r2,r6,86f88 <_dtoa_r+0x1674>
   85c64:	00c00044 	movi	r3,1
   85c68:	00800104 	movi	r2,4
   85c6c:	1085883a 	add	r2,r2,r2
   85c70:	11000504 	addi	r4,r2,20
   85c74:	180b883a 	mov	r5,r3
   85c78:	18c00044 	addi	r3,r3,1
   85c7c:	313ffb2e 	bgeu	r6,r4,85c6c <rx_descriptor_end+0xfff85c0c>
   85c80:	e1401115 	stw	r5,68(fp)
   85c84:	e009883a 	mov	r4,fp
   85c88:	00875c40 	call	875c4 <_Balloc>
   85c8c:	d8800715 	stw	r2,28(sp)
   85c90:	e0801015 	stw	r2,64(fp)
   85c94:	00800384 	movi	r2,14
   85c98:	1400f736 	bltu	r2,r16,86078 <_dtoa_r+0x764>
   85c9c:	8800f626 	beq	r17,zero,86078 <_dtoa_r+0x764>
   85ca0:	d9c00517 	ldw	r7,20(sp)
   85ca4:	01c39a0e 	bge	zero,r7,86b10 <_dtoa_r+0x11fc>
   85ca8:	388003cc 	andi	r2,r7,15
   85cac:	100490fa 	slli	r2,r2,3
   85cb0:	382bd13a 	srai	r21,r7,4
   85cb4:	00c00274 	movhi	r3,9
   85cb8:	18c83004 	addi	r3,r3,8384
   85cbc:	1885883a 	add	r2,r3,r2
   85cc0:	a8c0040c 	andi	r3,r21,16
   85cc4:	12400017 	ldw	r9,0(r2)
   85cc8:	12000117 	ldw	r8,4(r2)
   85ccc:	18037926 	beq	r3,zero,86ab4 <_dtoa_r+0x11a0>
   85cd0:	00800274 	movhi	r2,9
   85cd4:	10882604 	addi	r2,r2,8344
   85cd8:	11800817 	ldw	r6,32(r2)
   85cdc:	11c00917 	ldw	r7,36(r2)
   85ce0:	9009883a 	mov	r4,r18
   85ce4:	980b883a 	mov	r5,r19
   85ce8:	da001715 	stw	r8,92(sp)
   85cec:	da401615 	stw	r9,88(sp)
   85cf0:	008c43c0 	call	8c43c <__divdf3>
   85cf4:	da001717 	ldw	r8,92(sp)
   85cf8:	da401617 	ldw	r9,88(sp)
   85cfc:	ad4003cc 	andi	r21,r21,15
   85d00:	040000c4 	movi	r16,3
   85d04:	1023883a 	mov	r17,r2
   85d08:	1829883a 	mov	r20,r3
   85d0c:	a8001126 	beq	r21,zero,85d54 <_dtoa_r+0x440>
   85d10:	05c00274 	movhi	r23,9
   85d14:	bdc82604 	addi	r23,r23,8344
   85d18:	4805883a 	mov	r2,r9
   85d1c:	4007883a 	mov	r3,r8
   85d20:	a980004c 	andi	r6,r21,1
   85d24:	1009883a 	mov	r4,r2
   85d28:	a82bd07a 	srai	r21,r21,1
   85d2c:	180b883a 	mov	r5,r3
   85d30:	30000426 	beq	r6,zero,85d44 <_dtoa_r+0x430>
   85d34:	b9800017 	ldw	r6,0(r23)
   85d38:	b9c00117 	ldw	r7,4(r23)
   85d3c:	84000044 	addi	r16,r16,1
   85d40:	008cf7c0 	call	8cf7c <__muldf3>
   85d44:	bdc00204 	addi	r23,r23,8
   85d48:	a83ff51e 	bne	r21,zero,85d20 <rx_descriptor_end+0xfff85cc0>
   85d4c:	1013883a 	mov	r9,r2
   85d50:	1811883a 	mov	r8,r3
   85d54:	480d883a 	mov	r6,r9
   85d58:	400f883a 	mov	r7,r8
   85d5c:	8809883a 	mov	r4,r17
   85d60:	a00b883a 	mov	r5,r20
   85d64:	008c43c0 	call	8c43c <__divdf3>
   85d68:	d8800f15 	stw	r2,60(sp)
   85d6c:	d8c01015 	stw	r3,64(sp)
   85d70:	d8c00e17 	ldw	r3,56(sp)
   85d74:	18000626 	beq	r3,zero,85d90 <_dtoa_r+0x47c>
   85d78:	d9000f17 	ldw	r4,60(sp)
   85d7c:	d9401017 	ldw	r5,64(sp)
   85d80:	000d883a 	mov	r6,zero
   85d84:	01cffc34 	movhi	r7,16368
   85d88:	008ce880 	call	8ce88 <__ledf2>
   85d8c:	10040b16 	blt	r2,zero,86dbc <_dtoa_r+0x14a8>
   85d90:	8009883a 	mov	r4,r16
   85d94:	008e0100 	call	8e010 <__floatsidf>
   85d98:	d9800f17 	ldw	r6,60(sp)
   85d9c:	d9c01017 	ldw	r7,64(sp)
   85da0:	1009883a 	mov	r4,r2
   85da4:	180b883a 	mov	r5,r3
   85da8:	008cf7c0 	call	8cf7c <__muldf3>
   85dac:	000d883a 	mov	r6,zero
   85db0:	01d00734 	movhi	r7,16412
   85db4:	1009883a 	mov	r4,r2
   85db8:	180b883a 	mov	r5,r3
   85dbc:	008bb900 	call	8bb90 <__adddf3>
   85dc0:	1021883a 	mov	r16,r2
   85dc4:	d8800617 	ldw	r2,24(sp)
   85dc8:	047f3034 	movhi	r17,64704
   85dcc:	1c63883a 	add	r17,r3,r17
   85dd0:	10031826 	beq	r2,zero,86a34 <_dtoa_r+0x1120>
   85dd4:	d8c00517 	ldw	r3,20(sp)
   85dd8:	db000617 	ldw	r12,24(sp)
   85ddc:	d8c01315 	stw	r3,76(sp)
   85de0:	d9000b17 	ldw	r4,44(sp)
   85de4:	20038f26 	beq	r4,zero,86c24 <_dtoa_r+0x1310>
   85de8:	60bfffc4 	addi	r2,r12,-1
   85dec:	100490fa 	slli	r2,r2,3
   85df0:	00c00274 	movhi	r3,9
   85df4:	18c83004 	addi	r3,r3,8384
   85df8:	1885883a 	add	r2,r3,r2
   85dfc:	11800017 	ldw	r6,0(r2)
   85e00:	11c00117 	ldw	r7,4(r2)
   85e04:	d8800717 	ldw	r2,28(sp)
   85e08:	0009883a 	mov	r4,zero
   85e0c:	014ff834 	movhi	r5,16352
   85e10:	db001615 	stw	r12,88(sp)
   85e14:	15c00044 	addi	r23,r2,1
   85e18:	008c43c0 	call	8c43c <__divdf3>
   85e1c:	800d883a 	mov	r6,r16
   85e20:	880f883a 	mov	r7,r17
   85e24:	1009883a 	mov	r4,r2
   85e28:	180b883a 	mov	r5,r3
   85e2c:	008d6940 	call	8d694 <__subdf3>
   85e30:	d9401017 	ldw	r5,64(sp)
   85e34:	d9000f17 	ldw	r4,60(sp)
   85e38:	102b883a 	mov	r21,r2
   85e3c:	d8c01215 	stw	r3,72(sp)
   85e40:	008df900 	call	8df90 <__fixdfsi>
   85e44:	1009883a 	mov	r4,r2
   85e48:	1029883a 	mov	r20,r2
   85e4c:	008e0100 	call	8e010 <__floatsidf>
   85e50:	d9000f17 	ldw	r4,60(sp)
   85e54:	d9401017 	ldw	r5,64(sp)
   85e58:	100d883a 	mov	r6,r2
   85e5c:	180f883a 	mov	r7,r3
   85e60:	008d6940 	call	8d694 <__subdf3>
   85e64:	1823883a 	mov	r17,r3
   85e68:	d8c00717 	ldw	r3,28(sp)
   85e6c:	d9401217 	ldw	r5,72(sp)
   85e70:	a2000c04 	addi	r8,r20,48
   85e74:	1021883a 	mov	r16,r2
   85e78:	1a000005 	stb	r8,0(r3)
   85e7c:	800d883a 	mov	r6,r16
   85e80:	880f883a 	mov	r7,r17
   85e84:	a809883a 	mov	r4,r21
   85e88:	4029883a 	mov	r20,r8
   85e8c:	008cdac0 	call	8cdac <__gedf2>
   85e90:	00841d16 	blt	zero,r2,86f08 <_dtoa_r+0x15f4>
   85e94:	800d883a 	mov	r6,r16
   85e98:	880f883a 	mov	r7,r17
   85e9c:	0009883a 	mov	r4,zero
   85ea0:	014ffc34 	movhi	r5,16368
   85ea4:	008d6940 	call	8d694 <__subdf3>
   85ea8:	d9401217 	ldw	r5,72(sp)
   85eac:	100d883a 	mov	r6,r2
   85eb0:	180f883a 	mov	r7,r3
   85eb4:	a809883a 	mov	r4,r21
   85eb8:	008cdac0 	call	8cdac <__gedf2>
   85ebc:	db001617 	ldw	r12,88(sp)
   85ec0:	00840e16 	blt	zero,r2,86efc <_dtoa_r+0x15e8>
   85ec4:	00800044 	movi	r2,1
   85ec8:	13006b0e 	bge	r2,r12,86078 <_dtoa_r+0x764>
   85ecc:	d9000717 	ldw	r4,28(sp)
   85ed0:	dd800f15 	stw	r22,60(sp)
   85ed4:	dcc01015 	stw	r19,64(sp)
   85ed8:	2319883a 	add	r12,r4,r12
   85edc:	dcc01217 	ldw	r19,72(sp)
   85ee0:	602d883a 	mov	r22,r12
   85ee4:	dc801215 	stw	r18,72(sp)
   85ee8:	b825883a 	mov	r18,r23
   85eec:	00000906 	br	85f14 <_dtoa_r+0x600>
   85ef0:	008d6940 	call	8d694 <__subdf3>
   85ef4:	a80d883a 	mov	r6,r21
   85ef8:	980f883a 	mov	r7,r19
   85efc:	1009883a 	mov	r4,r2
   85f00:	180b883a 	mov	r5,r3
   85f04:	008ce880 	call	8ce88 <__ledf2>
   85f08:	1003e816 	blt	r2,zero,86eac <_dtoa_r+0x1598>
   85f0c:	b825883a 	mov	r18,r23
   85f10:	bd83e926 	beq	r23,r22,86eb8 <_dtoa_r+0x15a4>
   85f14:	a809883a 	mov	r4,r21
   85f18:	980b883a 	mov	r5,r19
   85f1c:	000d883a 	mov	r6,zero
   85f20:	01d00934 	movhi	r7,16420
   85f24:	008cf7c0 	call	8cf7c <__muldf3>
   85f28:	000d883a 	mov	r6,zero
   85f2c:	01d00934 	movhi	r7,16420
   85f30:	8009883a 	mov	r4,r16
   85f34:	880b883a 	mov	r5,r17
   85f38:	102b883a 	mov	r21,r2
   85f3c:	1827883a 	mov	r19,r3
   85f40:	008cf7c0 	call	8cf7c <__muldf3>
   85f44:	180b883a 	mov	r5,r3
   85f48:	1009883a 	mov	r4,r2
   85f4c:	1821883a 	mov	r16,r3
   85f50:	1023883a 	mov	r17,r2
   85f54:	008df900 	call	8df90 <__fixdfsi>
   85f58:	1009883a 	mov	r4,r2
   85f5c:	1029883a 	mov	r20,r2
   85f60:	008e0100 	call	8e010 <__floatsidf>
   85f64:	8809883a 	mov	r4,r17
   85f68:	800b883a 	mov	r5,r16
   85f6c:	100d883a 	mov	r6,r2
   85f70:	180f883a 	mov	r7,r3
   85f74:	008d6940 	call	8d694 <__subdf3>
   85f78:	a5000c04 	addi	r20,r20,48
   85f7c:	a80d883a 	mov	r6,r21
   85f80:	980f883a 	mov	r7,r19
   85f84:	1009883a 	mov	r4,r2
   85f88:	180b883a 	mov	r5,r3
   85f8c:	95000005 	stb	r20,0(r18)
   85f90:	1021883a 	mov	r16,r2
   85f94:	1823883a 	mov	r17,r3
   85f98:	008ce880 	call	8ce88 <__ledf2>
   85f9c:	bdc00044 	addi	r23,r23,1
   85fa0:	800d883a 	mov	r6,r16
   85fa4:	880f883a 	mov	r7,r17
   85fa8:	0009883a 	mov	r4,zero
   85fac:	014ffc34 	movhi	r5,16368
   85fb0:	103fcf0e 	bge	r2,zero,85ef0 <rx_descriptor_end+0xfff85e90>
   85fb4:	d8c01317 	ldw	r3,76(sp)
   85fb8:	d8c00515 	stw	r3,20(sp)
   85fbc:	d9400917 	ldw	r5,36(sp)
   85fc0:	e009883a 	mov	r4,fp
   85fc4:	008766c0 	call	8766c <_Bfree>
   85fc8:	d9000517 	ldw	r4,20(sp)
   85fcc:	d9802317 	ldw	r6,140(sp)
   85fd0:	d9c02517 	ldw	r7,148(sp)
   85fd4:	b8000005 	stb	zero,0(r23)
   85fd8:	20800044 	addi	r2,r4,1
   85fdc:	30800015 	stw	r2,0(r6)
   85fe0:	3802aa26 	beq	r7,zero,86a8c <_dtoa_r+0x1178>
   85fe4:	3dc00015 	stw	r23,0(r7)
   85fe8:	d8800717 	ldw	r2,28(sp)
   85fec:	003e7906 	br	859d4 <rx_descriptor_end+0xfff85974>
   85ff0:	00800434 	movhi	r2,16
   85ff4:	10bfffc4 	addi	r2,r2,-1
   85ff8:	88a2703a 	and	r17,r17,r2
   85ffc:	883e851e 	bne	r17,zero,85a14 <rx_descriptor_end+0xfff859b4>
   86000:	00800274 	movhi	r2,9
   86004:	10881204 	addi	r2,r2,8264
   86008:	003e8406 	br	85a1c <rx_descriptor_end+0xfff859bc>
   8600c:	10c00204 	addi	r3,r2,8
   86010:	003e8706 	br	85a30 <rx_descriptor_end+0xfff859d0>
   86014:	01400434 	movhi	r5,16
   86018:	297fffc4 	addi	r5,r5,-1
   8601c:	994a703a 	and	r5,r19,r5
   86020:	9009883a 	mov	r4,r18
   86024:	843f0044 	addi	r16,r16,-1023
   86028:	294ffc34 	orhi	r5,r5,16368
   8602c:	dd800217 	ldw	r22,8(sp)
   86030:	d8001115 	stw	zero,68(sp)
   86034:	003ea506 	br	85acc <rx_descriptor_end+0xfff85a6c>
   86038:	00800274 	movhi	r2,9
   8603c:	10880904 	addi	r2,r2,8228
   86040:	003e6406 	br	859d4 <rx_descriptor_end+0xfff85974>
   86044:	e0001115 	stw	zero,68(fp)
   86048:	000b883a 	mov	r5,zero
   8604c:	e009883a 	mov	r4,fp
   86050:	00875c40 	call	875c4 <_Balloc>
   86054:	01bfffc4 	movi	r6,-1
   86058:	01c00044 	movi	r7,1
   8605c:	d8800715 	stw	r2,28(sp)
   86060:	d9800c15 	stw	r6,48(sp)
   86064:	e0801015 	stw	r2,64(fp)
   86068:	d8000315 	stw	zero,12(sp)
   8606c:	d9c00b15 	stw	r7,44(sp)
   86070:	d9800615 	stw	r6,24(sp)
   86074:	d8002215 	stw	zero,136(sp)
   86078:	d8800117 	ldw	r2,4(sp)
   8607c:	10008916 	blt	r2,zero,862a4 <_dtoa_r+0x990>
   86080:	d9000517 	ldw	r4,20(sp)
   86084:	00c00384 	movi	r3,14
   86088:	19008616 	blt	r3,r4,862a4 <_dtoa_r+0x990>
   8608c:	200490fa 	slli	r2,r4,3
   86090:	00c00274 	movhi	r3,9
   86094:	d9802217 	ldw	r6,136(sp)
   86098:	18c83004 	addi	r3,r3,8384
   8609c:	1885883a 	add	r2,r3,r2
   860a0:	14000017 	ldw	r16,0(r2)
   860a4:	14400117 	ldw	r17,4(r2)
   860a8:	30016316 	blt	r6,zero,86638 <_dtoa_r+0xd24>
   860ac:	800d883a 	mov	r6,r16
   860b0:	880f883a 	mov	r7,r17
   860b4:	9009883a 	mov	r4,r18
   860b8:	980b883a 	mov	r5,r19
   860bc:	008c43c0 	call	8c43c <__divdf3>
   860c0:	180b883a 	mov	r5,r3
   860c4:	1009883a 	mov	r4,r2
   860c8:	008df900 	call	8df90 <__fixdfsi>
   860cc:	1009883a 	mov	r4,r2
   860d0:	102b883a 	mov	r21,r2
   860d4:	008e0100 	call	8e010 <__floatsidf>
   860d8:	800d883a 	mov	r6,r16
   860dc:	880f883a 	mov	r7,r17
   860e0:	1009883a 	mov	r4,r2
   860e4:	180b883a 	mov	r5,r3
   860e8:	008cf7c0 	call	8cf7c <__muldf3>
   860ec:	100d883a 	mov	r6,r2
   860f0:	180f883a 	mov	r7,r3
   860f4:	9009883a 	mov	r4,r18
   860f8:	980b883a 	mov	r5,r19
   860fc:	008d6940 	call	8d694 <__subdf3>
   86100:	d9c00717 	ldw	r7,28(sp)
   86104:	1009883a 	mov	r4,r2
   86108:	a8800c04 	addi	r2,r21,48
   8610c:	38800005 	stb	r2,0(r7)
   86110:	3dc00044 	addi	r23,r7,1
   86114:	d9c00617 	ldw	r7,24(sp)
   86118:	01800044 	movi	r6,1
   8611c:	180b883a 	mov	r5,r3
   86120:	2005883a 	mov	r2,r4
   86124:	39803826 	beq	r7,r6,86208 <_dtoa_r+0x8f4>
   86128:	000d883a 	mov	r6,zero
   8612c:	01d00934 	movhi	r7,16420
   86130:	008cf7c0 	call	8cf7c <__muldf3>
   86134:	000d883a 	mov	r6,zero
   86138:	000f883a 	mov	r7,zero
   8613c:	1009883a 	mov	r4,r2
   86140:	180b883a 	mov	r5,r3
   86144:	1025883a 	mov	r18,r2
   86148:	1827883a 	mov	r19,r3
   8614c:	008cd240 	call	8cd24 <__eqdf2>
   86150:	103f9a26 	beq	r2,zero,85fbc <rx_descriptor_end+0xfff85f5c>
   86154:	d9c00617 	ldw	r7,24(sp)
   86158:	d8c00717 	ldw	r3,28(sp)
   8615c:	b829883a 	mov	r20,r23
   86160:	38bfffc4 	addi	r2,r7,-1
   86164:	18ad883a 	add	r22,r3,r2
   86168:	00000a06 	br	86194 <_dtoa_r+0x880>
   8616c:	008cf7c0 	call	8cf7c <__muldf3>
   86170:	000d883a 	mov	r6,zero
   86174:	000f883a 	mov	r7,zero
   86178:	1009883a 	mov	r4,r2
   8617c:	180b883a 	mov	r5,r3
   86180:	1025883a 	mov	r18,r2
   86184:	1827883a 	mov	r19,r3
   86188:	b829883a 	mov	r20,r23
   8618c:	008cd240 	call	8cd24 <__eqdf2>
   86190:	103f8a26 	beq	r2,zero,85fbc <rx_descriptor_end+0xfff85f5c>
   86194:	800d883a 	mov	r6,r16
   86198:	880f883a 	mov	r7,r17
   8619c:	9009883a 	mov	r4,r18
   861a0:	980b883a 	mov	r5,r19
   861a4:	008c43c0 	call	8c43c <__divdf3>
   861a8:	180b883a 	mov	r5,r3
   861ac:	1009883a 	mov	r4,r2
   861b0:	008df900 	call	8df90 <__fixdfsi>
   861b4:	1009883a 	mov	r4,r2
   861b8:	102b883a 	mov	r21,r2
   861bc:	008e0100 	call	8e010 <__floatsidf>
   861c0:	800d883a 	mov	r6,r16
   861c4:	880f883a 	mov	r7,r17
   861c8:	1009883a 	mov	r4,r2
   861cc:	180b883a 	mov	r5,r3
   861d0:	008cf7c0 	call	8cf7c <__muldf3>
   861d4:	100d883a 	mov	r6,r2
   861d8:	180f883a 	mov	r7,r3
   861dc:	9009883a 	mov	r4,r18
   861e0:	980b883a 	mov	r5,r19
   861e4:	008d6940 	call	8d694 <__subdf3>
   861e8:	aa000c04 	addi	r8,r21,48
   861ec:	a2000005 	stb	r8,0(r20)
   861f0:	000d883a 	mov	r6,zero
   861f4:	01d00934 	movhi	r7,16420
   861f8:	1009883a 	mov	r4,r2
   861fc:	180b883a 	mov	r5,r3
   86200:	a5c00044 	addi	r23,r20,1
   86204:	b53fd91e 	bne	r22,r20,8616c <rx_descriptor_end+0xfff8610c>
   86208:	100d883a 	mov	r6,r2
   8620c:	180f883a 	mov	r7,r3
   86210:	1009883a 	mov	r4,r2
   86214:	180b883a 	mov	r5,r3
   86218:	008bb900 	call	8bb90 <__adddf3>
   8621c:	100d883a 	mov	r6,r2
   86220:	180f883a 	mov	r7,r3
   86224:	8009883a 	mov	r4,r16
   86228:	880b883a 	mov	r5,r17
   8622c:	1027883a 	mov	r19,r2
   86230:	1825883a 	mov	r18,r3
   86234:	008ce880 	call	8ce88 <__ledf2>
   86238:	10000816 	blt	r2,zero,8625c <_dtoa_r+0x948>
   8623c:	980d883a 	mov	r6,r19
   86240:	900f883a 	mov	r7,r18
   86244:	8009883a 	mov	r4,r16
   86248:	880b883a 	mov	r5,r17
   8624c:	008cd240 	call	8cd24 <__eqdf2>
   86250:	103f5a1e 	bne	r2,zero,85fbc <rx_descriptor_end+0xfff85f5c>
   86254:	ad40004c 	andi	r21,r21,1
   86258:	a83f5826 	beq	r21,zero,85fbc <rx_descriptor_end+0xfff85f5c>
   8625c:	bd3fffc3 	ldbu	r20,-1(r23)
   86260:	b8bfffc4 	addi	r2,r23,-1
   86264:	1007883a 	mov	r3,r2
   86268:	01400e44 	movi	r5,57
   8626c:	d9800717 	ldw	r6,28(sp)
   86270:	00000506 	br	86288 <_dtoa_r+0x974>
   86274:	18ffffc4 	addi	r3,r3,-1
   86278:	11824726 	beq	r2,r6,86b98 <_dtoa_r+0x1284>
   8627c:	1d000003 	ldbu	r20,0(r3)
   86280:	102f883a 	mov	r23,r2
   86284:	10bfffc4 	addi	r2,r2,-1
   86288:	a1003fcc 	andi	r4,r20,255
   8628c:	2100201c 	xori	r4,r4,128
   86290:	213fe004 	addi	r4,r4,-128
   86294:	217ff726 	beq	r4,r5,86274 <rx_descriptor_end+0xfff86214>
   86298:	a2000044 	addi	r8,r20,1
   8629c:	12000005 	stb	r8,0(r2)
   862a0:	003f4606 	br	85fbc <rx_descriptor_end+0xfff85f5c>
   862a4:	d9000b17 	ldw	r4,44(sp)
   862a8:	2000c826 	beq	r4,zero,865cc <_dtoa_r+0xcb8>
   862ac:	d9800317 	ldw	r6,12(sp)
   862b0:	00c00044 	movi	r3,1
   862b4:	1980f90e 	bge	r3,r6,8669c <_dtoa_r+0xd88>
   862b8:	d8800617 	ldw	r2,24(sp)
   862bc:	d8c00a17 	ldw	r3,40(sp)
   862c0:	157fffc4 	addi	r21,r2,-1
   862c4:	1d41f316 	blt	r3,r21,86a94 <_dtoa_r+0x1180>
   862c8:	1d6bc83a 	sub	r21,r3,r21
   862cc:	d9c00617 	ldw	r7,24(sp)
   862d0:	3802aa16 	blt	r7,zero,86d7c <_dtoa_r+0x1468>
   862d4:	dd000817 	ldw	r20,32(sp)
   862d8:	d8800617 	ldw	r2,24(sp)
   862dc:	d8c00817 	ldw	r3,32(sp)
   862e0:	01400044 	movi	r5,1
   862e4:	e009883a 	mov	r4,fp
   862e8:	1887883a 	add	r3,r3,r2
   862ec:	d8c00815 	stw	r3,32(sp)
   862f0:	b0ad883a 	add	r22,r22,r2
   862f4:	00879d00 	call	879d0 <__i2b>
   862f8:	1023883a 	mov	r17,r2
   862fc:	a0000826 	beq	r20,zero,86320 <_dtoa_r+0xa0c>
   86300:	0580070e 	bge	zero,r22,86320 <_dtoa_r+0xa0c>
   86304:	a005883a 	mov	r2,r20
   86308:	b500b916 	blt	r22,r20,865f0 <_dtoa_r+0xcdc>
   8630c:	d9000817 	ldw	r4,32(sp)
   86310:	a0a9c83a 	sub	r20,r20,r2
   86314:	b0adc83a 	sub	r22,r22,r2
   86318:	2089c83a 	sub	r4,r4,r2
   8631c:	d9000815 	stw	r4,32(sp)
   86320:	d9800a17 	ldw	r6,40(sp)
   86324:	0181810e 	bge	zero,r6,8692c <_dtoa_r+0x1018>
   86328:	d9c00b17 	ldw	r7,44(sp)
   8632c:	3800b326 	beq	r7,zero,865fc <_dtoa_r+0xce8>
   86330:	a800b226 	beq	r21,zero,865fc <_dtoa_r+0xce8>
   86334:	880b883a 	mov	r5,r17
   86338:	a80d883a 	mov	r6,r21
   8633c:	e009883a 	mov	r4,fp
   86340:	0087c040 	call	87c04 <__pow5mult>
   86344:	d9800917 	ldw	r6,36(sp)
   86348:	100b883a 	mov	r5,r2
   8634c:	e009883a 	mov	r4,fp
   86350:	1023883a 	mov	r17,r2
   86354:	0087a0c0 	call	87a0c <__multiply>
   86358:	1021883a 	mov	r16,r2
   8635c:	d8800a17 	ldw	r2,40(sp)
   86360:	d9400917 	ldw	r5,36(sp)
   86364:	e009883a 	mov	r4,fp
   86368:	1545c83a 	sub	r2,r2,r21
   8636c:	d8800a15 	stw	r2,40(sp)
   86370:	008766c0 	call	8766c <_Bfree>
   86374:	d8c00a17 	ldw	r3,40(sp)
   86378:	18009f1e 	bne	r3,zero,865f8 <_dtoa_r+0xce4>
   8637c:	05c00044 	movi	r23,1
   86380:	e009883a 	mov	r4,fp
   86384:	b80b883a 	mov	r5,r23
   86388:	00879d00 	call	879d0 <__i2b>
   8638c:	d9000d17 	ldw	r4,52(sp)
   86390:	102b883a 	mov	r21,r2
   86394:	2000ce26 	beq	r4,zero,866d0 <_dtoa_r+0xdbc>
   86398:	200d883a 	mov	r6,r4
   8639c:	100b883a 	mov	r5,r2
   863a0:	e009883a 	mov	r4,fp
   863a4:	0087c040 	call	87c04 <__pow5mult>
   863a8:	d9800317 	ldw	r6,12(sp)
   863ac:	102b883a 	mov	r21,r2
   863b0:	b981810e 	bge	r23,r6,869b8 <_dtoa_r+0x10a4>
   863b4:	0027883a 	mov	r19,zero
   863b8:	a8800417 	ldw	r2,16(r21)
   863bc:	05c00804 	movi	r23,32
   863c0:	10800104 	addi	r2,r2,4
   863c4:	1085883a 	add	r2,r2,r2
   863c8:	1085883a 	add	r2,r2,r2
   863cc:	a885883a 	add	r2,r21,r2
   863d0:	11000017 	ldw	r4,0(r2)
   863d4:	00878b80 	call	878b8 <__hi0bits>
   863d8:	b885c83a 	sub	r2,r23,r2
   863dc:	1585883a 	add	r2,r2,r22
   863e0:	108007cc 	andi	r2,r2,31
   863e4:	1000b326 	beq	r2,zero,866b4 <_dtoa_r+0xda0>
   863e8:	00c00804 	movi	r3,32
   863ec:	1887c83a 	sub	r3,r3,r2
   863f0:	01000104 	movi	r4,4
   863f4:	20c2cd0e 	bge	r4,r3,86f2c <_dtoa_r+0x1618>
   863f8:	00c00704 	movi	r3,28
   863fc:	1885c83a 	sub	r2,r3,r2
   86400:	d8c00817 	ldw	r3,32(sp)
   86404:	a0a9883a 	add	r20,r20,r2
   86408:	b0ad883a 	add	r22,r22,r2
   8640c:	1887883a 	add	r3,r3,r2
   86410:	d8c00815 	stw	r3,32(sp)
   86414:	d9800817 	ldw	r6,32(sp)
   86418:	0180040e 	bge	zero,r6,8642c <_dtoa_r+0xb18>
   8641c:	800b883a 	mov	r5,r16
   86420:	e009883a 	mov	r4,fp
   86424:	0087d440 	call	87d44 <__lshift>
   86428:	1021883a 	mov	r16,r2
   8642c:	0580050e 	bge	zero,r22,86444 <_dtoa_r+0xb30>
   86430:	a80b883a 	mov	r5,r21
   86434:	b00d883a 	mov	r6,r22
   86438:	e009883a 	mov	r4,fp
   8643c:	0087d440 	call	87d44 <__lshift>
   86440:	102b883a 	mov	r21,r2
   86444:	d9c00e17 	ldw	r7,56(sp)
   86448:	3801211e 	bne	r7,zero,868d0 <_dtoa_r+0xfbc>
   8644c:	d9800617 	ldw	r6,24(sp)
   86450:	0181380e 	bge	zero,r6,86934 <_dtoa_r+0x1020>
   86454:	d8c00b17 	ldw	r3,44(sp)
   86458:	1800ab1e 	bne	r3,zero,86708 <_dtoa_r+0xdf4>
   8645c:	dc800717 	ldw	r18,28(sp)
   86460:	dcc00617 	ldw	r19,24(sp)
   86464:	9029883a 	mov	r20,r18
   86468:	00000206 	br	86474 <_dtoa_r+0xb60>
   8646c:	00876940 	call	87694 <__multadd>
   86470:	1021883a 	mov	r16,r2
   86474:	a80b883a 	mov	r5,r21
   86478:	8009883a 	mov	r4,r16
   8647c:	00857140 	call	85714 <quorem>
   86480:	10800c04 	addi	r2,r2,48
   86484:	90800005 	stb	r2,0(r18)
   86488:	94800044 	addi	r18,r18,1
   8648c:	9507c83a 	sub	r3,r18,r20
   86490:	000f883a 	mov	r7,zero
   86494:	01800284 	movi	r6,10
   86498:	800b883a 	mov	r5,r16
   8649c:	e009883a 	mov	r4,fp
   864a0:	1cfff216 	blt	r3,r19,8646c <rx_descriptor_end+0xfff8640c>
   864a4:	1011883a 	mov	r8,r2
   864a8:	d8800617 	ldw	r2,24(sp)
   864ac:	0082370e 	bge	zero,r2,86d8c <_dtoa_r+0x1478>
   864b0:	d9000717 	ldw	r4,28(sp)
   864b4:	0025883a 	mov	r18,zero
   864b8:	20af883a 	add	r23,r4,r2
   864bc:	01800044 	movi	r6,1
   864c0:	800b883a 	mov	r5,r16
   864c4:	e009883a 	mov	r4,fp
   864c8:	da001715 	stw	r8,92(sp)
   864cc:	0087d440 	call	87d44 <__lshift>
   864d0:	a80b883a 	mov	r5,r21
   864d4:	1009883a 	mov	r4,r2
   864d8:	d8800915 	stw	r2,36(sp)
   864dc:	0087e8c0 	call	87e8c <__mcmp>
   864e0:	da001717 	ldw	r8,92(sp)
   864e4:	0081800e 	bge	zero,r2,86ae8 <_dtoa_r+0x11d4>
   864e8:	b93fffc3 	ldbu	r4,-1(r23)
   864ec:	b8bfffc4 	addi	r2,r23,-1
   864f0:	1007883a 	mov	r3,r2
   864f4:	01800e44 	movi	r6,57
   864f8:	d9c00717 	ldw	r7,28(sp)
   864fc:	00000506 	br	86514 <_dtoa_r+0xc00>
   86500:	18ffffc4 	addi	r3,r3,-1
   86504:	11c12326 	beq	r2,r7,86994 <_dtoa_r+0x1080>
   86508:	19000003 	ldbu	r4,0(r3)
   8650c:	102f883a 	mov	r23,r2
   86510:	10bfffc4 	addi	r2,r2,-1
   86514:	21403fcc 	andi	r5,r4,255
   86518:	2940201c 	xori	r5,r5,128
   8651c:	297fe004 	addi	r5,r5,-128
   86520:	29bff726 	beq	r5,r6,86500 <rx_descriptor_end+0xfff864a0>
   86524:	21000044 	addi	r4,r4,1
   86528:	11000005 	stb	r4,0(r2)
   8652c:	a80b883a 	mov	r5,r21
   86530:	e009883a 	mov	r4,fp
   86534:	008766c0 	call	8766c <_Bfree>
   86538:	883ea026 	beq	r17,zero,85fbc <rx_descriptor_end+0xfff85f5c>
   8653c:	90000426 	beq	r18,zero,86550 <_dtoa_r+0xc3c>
   86540:	94400326 	beq	r18,r17,86550 <_dtoa_r+0xc3c>
   86544:	900b883a 	mov	r5,r18
   86548:	e009883a 	mov	r4,fp
   8654c:	008766c0 	call	8766c <_Bfree>
   86550:	880b883a 	mov	r5,r17
   86554:	e009883a 	mov	r4,fp
   86558:	008766c0 	call	8766c <_Bfree>
   8655c:	003e9706 	br	85fbc <rx_descriptor_end+0xfff85f5c>
   86560:	01800044 	movi	r6,1
   86564:	d9800e15 	stw	r6,56(sp)
   86568:	003d9606 	br	85bc4 <rx_descriptor_end+0xfff85b64>
   8656c:	d8800817 	ldw	r2,32(sp)
   86570:	d8c00517 	ldw	r3,20(sp)
   86574:	d8000d15 	stw	zero,52(sp)
   86578:	10c5c83a 	sub	r2,r2,r3
   8657c:	00c9c83a 	sub	r4,zero,r3
   86580:	d8800815 	stw	r2,32(sp)
   86584:	d9000a15 	stw	r4,40(sp)
   86588:	003d9706 	br	85be8 <rx_descriptor_end+0xfff85b88>
   8658c:	05adc83a 	sub	r22,zero,r22
   86590:	dd800815 	stw	r22,32(sp)
   86594:	002d883a 	mov	r22,zero
   86598:	003d8e06 	br	85bd4 <rx_descriptor_end+0xfff85b74>
   8659c:	d9000517 	ldw	r4,20(sp)
   865a0:	008e0100 	call	8e010 <__floatsidf>
   865a4:	100d883a 	mov	r6,r2
   865a8:	180f883a 	mov	r7,r3
   865ac:	a009883a 	mov	r4,r20
   865b0:	880b883a 	mov	r5,r17
   865b4:	008cd240 	call	8cd24 <__eqdf2>
   865b8:	103d7126 	beq	r2,zero,85b80 <rx_descriptor_end+0xfff85b20>
   865bc:	d9c00517 	ldw	r7,20(sp)
   865c0:	39ffffc4 	addi	r7,r7,-1
   865c4:	d9c00515 	stw	r7,20(sp)
   865c8:	003d6d06 	br	85b80 <rx_descriptor_end+0xfff85b20>
   865cc:	dd400a17 	ldw	r21,40(sp)
   865d0:	dd000817 	ldw	r20,32(sp)
   865d4:	0023883a 	mov	r17,zero
   865d8:	003f4806 	br	862fc <rx_descriptor_end+0xfff8629c>
   865dc:	10e3c83a 	sub	r17,r2,r3
   865e0:	9448983a 	sll	r4,r18,r17
   865e4:	003d3206 	br	85ab0 <rx_descriptor_end+0xfff85a50>
   865e8:	d8000e15 	stw	zero,56(sp)
   865ec:	003d7506 	br	85bc4 <rx_descriptor_end+0xfff85b64>
   865f0:	b005883a 	mov	r2,r22
   865f4:	003f4506 	br	8630c <rx_descriptor_end+0xfff862ac>
   865f8:	dc000915 	stw	r16,36(sp)
   865fc:	d9800a17 	ldw	r6,40(sp)
   86600:	d9400917 	ldw	r5,36(sp)
   86604:	e009883a 	mov	r4,fp
   86608:	0087c040 	call	87c04 <__pow5mult>
   8660c:	1021883a 	mov	r16,r2
   86610:	003f5a06 	br	8637c <rx_descriptor_end+0xfff8631c>
   86614:	01c00044 	movi	r7,1
   86618:	d9c00b15 	stw	r7,44(sp)
   8661c:	d8802217 	ldw	r2,136(sp)
   86620:	0081280e 	bge	zero,r2,86ac4 <_dtoa_r+0x11b0>
   86624:	100d883a 	mov	r6,r2
   86628:	1021883a 	mov	r16,r2
   8662c:	d8800c15 	stw	r2,48(sp)
   86630:	d8800615 	stw	r2,24(sp)
   86634:	003d8806 	br	85c58 <rx_descriptor_end+0xfff85bf8>
   86638:	d8800617 	ldw	r2,24(sp)
   8663c:	00be9b16 	blt	zero,r2,860ac <rx_descriptor_end+0xfff8604c>
   86640:	10010f1e 	bne	r2,zero,86a80 <_dtoa_r+0x116c>
   86644:	880b883a 	mov	r5,r17
   86648:	000d883a 	mov	r6,zero
   8664c:	01d00534 	movhi	r7,16404
   86650:	8009883a 	mov	r4,r16
   86654:	008cf7c0 	call	8cf7c <__muldf3>
   86658:	900d883a 	mov	r6,r18
   8665c:	980f883a 	mov	r7,r19
   86660:	1009883a 	mov	r4,r2
   86664:	180b883a 	mov	r5,r3
   86668:	008cdac0 	call	8cdac <__gedf2>
   8666c:	002b883a 	mov	r21,zero
   86670:	0023883a 	mov	r17,zero
   86674:	1000bf16 	blt	r2,zero,86974 <_dtoa_r+0x1060>
   86678:	d9802217 	ldw	r6,136(sp)
   8667c:	ddc00717 	ldw	r23,28(sp)
   86680:	018c303a 	nor	r6,zero,r6
   86684:	d9800515 	stw	r6,20(sp)
   86688:	a80b883a 	mov	r5,r21
   8668c:	e009883a 	mov	r4,fp
   86690:	008766c0 	call	8766c <_Bfree>
   86694:	883e4926 	beq	r17,zero,85fbc <rx_descriptor_end+0xfff85f5c>
   86698:	003fad06 	br	86550 <rx_descriptor_end+0xfff864f0>
   8669c:	d9c01117 	ldw	r7,68(sp)
   866a0:	3801bc26 	beq	r7,zero,86d94 <_dtoa_r+0x1480>
   866a4:	10810cc4 	addi	r2,r2,1075
   866a8:	dd400a17 	ldw	r21,40(sp)
   866ac:	dd000817 	ldw	r20,32(sp)
   866b0:	003f0a06 	br	862dc <rx_descriptor_end+0xfff8627c>
   866b4:	00800704 	movi	r2,28
   866b8:	d9000817 	ldw	r4,32(sp)
   866bc:	a0a9883a 	add	r20,r20,r2
   866c0:	b0ad883a 	add	r22,r22,r2
   866c4:	2089883a 	add	r4,r4,r2
   866c8:	d9000815 	stw	r4,32(sp)
   866cc:	003f5106 	br	86414 <rx_descriptor_end+0xfff863b4>
   866d0:	d8c00317 	ldw	r3,12(sp)
   866d4:	b8c1fc0e 	bge	r23,r3,86ec8 <_dtoa_r+0x15b4>
   866d8:	0027883a 	mov	r19,zero
   866dc:	b805883a 	mov	r2,r23
   866e0:	003f3e06 	br	863dc <rx_descriptor_end+0xfff8637c>
   866e4:	880b883a 	mov	r5,r17
   866e8:	e009883a 	mov	r4,fp
   866ec:	000f883a 	mov	r7,zero
   866f0:	01800284 	movi	r6,10
   866f4:	00876940 	call	87694 <__multadd>
   866f8:	d9000c17 	ldw	r4,48(sp)
   866fc:	1023883a 	mov	r17,r2
   86700:	0102040e 	bge	zero,r4,86f14 <_dtoa_r+0x1600>
   86704:	d9000615 	stw	r4,24(sp)
   86708:	0500050e 	bge	zero,r20,86720 <_dtoa_r+0xe0c>
   8670c:	880b883a 	mov	r5,r17
   86710:	a00d883a 	mov	r6,r20
   86714:	e009883a 	mov	r4,fp
   86718:	0087d440 	call	87d44 <__lshift>
   8671c:	1023883a 	mov	r17,r2
   86720:	9801241e 	bne	r19,zero,86bb4 <_dtoa_r+0x12a0>
   86724:	8829883a 	mov	r20,r17
   86728:	d9000617 	ldw	r4,24(sp)
   8672c:	dcc00717 	ldw	r19,28(sp)
   86730:	9480004c 	andi	r18,r18,1
   86734:	20bfffc4 	addi	r2,r4,-1
   86738:	9885883a 	add	r2,r19,r2
   8673c:	d8800415 	stw	r2,16(sp)
   86740:	dc800615 	stw	r18,24(sp)
   86744:	a80b883a 	mov	r5,r21
   86748:	8009883a 	mov	r4,r16
   8674c:	00857140 	call	85714 <quorem>
   86750:	880b883a 	mov	r5,r17
   86754:	8009883a 	mov	r4,r16
   86758:	102f883a 	mov	r23,r2
   8675c:	0087e8c0 	call	87e8c <__mcmp>
   86760:	a80b883a 	mov	r5,r21
   86764:	a00d883a 	mov	r6,r20
   86768:	e009883a 	mov	r4,fp
   8676c:	102d883a 	mov	r22,r2
   86770:	0087eec0 	call	87eec <__mdiff>
   86774:	1007883a 	mov	r3,r2
   86778:	10800317 	ldw	r2,12(r2)
   8677c:	bc800c04 	addi	r18,r23,48
   86780:	180b883a 	mov	r5,r3
   86784:	10004e1e 	bne	r2,zero,868c0 <_dtoa_r+0xfac>
   86788:	8009883a 	mov	r4,r16
   8678c:	d8c01615 	stw	r3,88(sp)
   86790:	0087e8c0 	call	87e8c <__mcmp>
   86794:	d8c01617 	ldw	r3,88(sp)
   86798:	e009883a 	mov	r4,fp
   8679c:	d8801615 	stw	r2,88(sp)
   867a0:	180b883a 	mov	r5,r3
   867a4:	008766c0 	call	8766c <_Bfree>
   867a8:	d8801617 	ldw	r2,88(sp)
   867ac:	1000041e 	bne	r2,zero,867c0 <_dtoa_r+0xeac>
   867b0:	d9800317 	ldw	r6,12(sp)
   867b4:	3000021e 	bne	r6,zero,867c0 <_dtoa_r+0xeac>
   867b8:	d8c00617 	ldw	r3,24(sp)
   867bc:	18003726 	beq	r3,zero,8689c <_dtoa_r+0xf88>
   867c0:	b0002016 	blt	r22,zero,86844 <_dtoa_r+0xf30>
   867c4:	b000041e 	bne	r22,zero,867d8 <_dtoa_r+0xec4>
   867c8:	d9000317 	ldw	r4,12(sp)
   867cc:	2000021e 	bne	r4,zero,867d8 <_dtoa_r+0xec4>
   867d0:	d8c00617 	ldw	r3,24(sp)
   867d4:	18001b26 	beq	r3,zero,86844 <_dtoa_r+0xf30>
   867d8:	00810716 	blt	zero,r2,86bf8 <_dtoa_r+0x12e4>
   867dc:	d8c00417 	ldw	r3,16(sp)
   867e0:	9d800044 	addi	r22,r19,1
   867e4:	9c800005 	stb	r18,0(r19)
   867e8:	b02f883a 	mov	r23,r22
   867ec:	98c10626 	beq	r19,r3,86c08 <_dtoa_r+0x12f4>
   867f0:	800b883a 	mov	r5,r16
   867f4:	000f883a 	mov	r7,zero
   867f8:	01800284 	movi	r6,10
   867fc:	e009883a 	mov	r4,fp
   86800:	00876940 	call	87694 <__multadd>
   86804:	1021883a 	mov	r16,r2
   86808:	000f883a 	mov	r7,zero
   8680c:	01800284 	movi	r6,10
   86810:	880b883a 	mov	r5,r17
   86814:	e009883a 	mov	r4,fp
   86818:	8d002526 	beq	r17,r20,868b0 <_dtoa_r+0xf9c>
   8681c:	00876940 	call	87694 <__multadd>
   86820:	a00b883a 	mov	r5,r20
   86824:	000f883a 	mov	r7,zero
   86828:	01800284 	movi	r6,10
   8682c:	e009883a 	mov	r4,fp
   86830:	1023883a 	mov	r17,r2
   86834:	00876940 	call	87694 <__multadd>
   86838:	1029883a 	mov	r20,r2
   8683c:	b027883a 	mov	r19,r22
   86840:	003fc006 	br	86744 <rx_descriptor_end+0xfff866e4>
   86844:	9011883a 	mov	r8,r18
   86848:	00800e0e 	bge	zero,r2,86884 <_dtoa_r+0xf70>
   8684c:	800b883a 	mov	r5,r16
   86850:	01800044 	movi	r6,1
   86854:	e009883a 	mov	r4,fp
   86858:	da001715 	stw	r8,92(sp)
   8685c:	0087d440 	call	87d44 <__lshift>
   86860:	a80b883a 	mov	r5,r21
   86864:	1009883a 	mov	r4,r2
   86868:	1021883a 	mov	r16,r2
   8686c:	0087e8c0 	call	87e8c <__mcmp>
   86870:	da001717 	ldw	r8,92(sp)
   86874:	0081960e 	bge	zero,r2,86ed0 <_dtoa_r+0x15bc>
   86878:	00800e44 	movi	r2,57
   8687c:	40817026 	beq	r8,r2,86e40 <_dtoa_r+0x152c>
   86880:	ba000c44 	addi	r8,r23,49
   86884:	8825883a 	mov	r18,r17
   86888:	9dc00044 	addi	r23,r19,1
   8688c:	9a000005 	stb	r8,0(r19)
   86890:	a023883a 	mov	r17,r20
   86894:	dc000915 	stw	r16,36(sp)
   86898:	003f2406 	br	8652c <rx_descriptor_end+0xfff864cc>
   8689c:	00800e44 	movi	r2,57
   868a0:	9011883a 	mov	r8,r18
   868a4:	90816626 	beq	r18,r2,86e40 <_dtoa_r+0x152c>
   868a8:	05bff516 	blt	zero,r22,86880 <rx_descriptor_end+0xfff86820>
   868ac:	003ff506 	br	86884 <rx_descriptor_end+0xfff86824>
   868b0:	00876940 	call	87694 <__multadd>
   868b4:	1023883a 	mov	r17,r2
   868b8:	1029883a 	mov	r20,r2
   868bc:	003fdf06 	br	8683c <rx_descriptor_end+0xfff867dc>
   868c0:	e009883a 	mov	r4,fp
   868c4:	008766c0 	call	8766c <_Bfree>
   868c8:	00800044 	movi	r2,1
   868cc:	003fbc06 	br	867c0 <rx_descriptor_end+0xfff86760>
   868d0:	a80b883a 	mov	r5,r21
   868d4:	8009883a 	mov	r4,r16
   868d8:	0087e8c0 	call	87e8c <__mcmp>
   868dc:	103edb0e 	bge	r2,zero,8644c <rx_descriptor_end+0xfff863ec>
   868e0:	800b883a 	mov	r5,r16
   868e4:	000f883a 	mov	r7,zero
   868e8:	01800284 	movi	r6,10
   868ec:	e009883a 	mov	r4,fp
   868f0:	00876940 	call	87694 <__multadd>
   868f4:	1021883a 	mov	r16,r2
   868f8:	d8800517 	ldw	r2,20(sp)
   868fc:	d8c00b17 	ldw	r3,44(sp)
   86900:	10bfffc4 	addi	r2,r2,-1
   86904:	d8800515 	stw	r2,20(sp)
   86908:	183f761e 	bne	r3,zero,866e4 <rx_descriptor_end+0xfff86684>
   8690c:	d9000c17 	ldw	r4,48(sp)
   86910:	0101730e 	bge	zero,r4,86ee0 <_dtoa_r+0x15cc>
   86914:	d9000615 	stw	r4,24(sp)
   86918:	003ed006 	br	8645c <rx_descriptor_end+0xfff863fc>
   8691c:	00800084 	movi	r2,2
   86920:	3081861e 	bne	r6,r2,86f3c <_dtoa_r+0x1628>
   86924:	d8000b15 	stw	zero,44(sp)
   86928:	003f3c06 	br	8661c <rx_descriptor_end+0xfff865bc>
   8692c:	dc000917 	ldw	r16,36(sp)
   86930:	003e9206 	br	8637c <rx_descriptor_end+0xfff8631c>
   86934:	d9c00317 	ldw	r7,12(sp)
   86938:	00800084 	movi	r2,2
   8693c:	11fec50e 	bge	r2,r7,86454 <rx_descriptor_end+0xfff863f4>
   86940:	d9000617 	ldw	r4,24(sp)
   86944:	20013c1e 	bne	r4,zero,86e38 <_dtoa_r+0x1524>
   86948:	a80b883a 	mov	r5,r21
   8694c:	000f883a 	mov	r7,zero
   86950:	01800144 	movi	r6,5
   86954:	e009883a 	mov	r4,fp
   86958:	00876940 	call	87694 <__multadd>
   8695c:	100b883a 	mov	r5,r2
   86960:	8009883a 	mov	r4,r16
   86964:	102b883a 	mov	r21,r2
   86968:	0087e8c0 	call	87e8c <__mcmp>
   8696c:	dc000915 	stw	r16,36(sp)
   86970:	00bf410e 	bge	zero,r2,86678 <rx_descriptor_end+0xfff86618>
   86974:	d9c00717 	ldw	r7,28(sp)
   86978:	00800c44 	movi	r2,49
   8697c:	38800005 	stb	r2,0(r7)
   86980:	d8800517 	ldw	r2,20(sp)
   86984:	3dc00044 	addi	r23,r7,1
   86988:	10800044 	addi	r2,r2,1
   8698c:	d8800515 	stw	r2,20(sp)
   86990:	003f3d06 	br	86688 <rx_descriptor_end+0xfff86628>
   86994:	d9800517 	ldw	r6,20(sp)
   86998:	d9c00717 	ldw	r7,28(sp)
   8699c:	00800c44 	movi	r2,49
   869a0:	31800044 	addi	r6,r6,1
   869a4:	d9800515 	stw	r6,20(sp)
   869a8:	38800005 	stb	r2,0(r7)
   869ac:	003edf06 	br	8652c <rx_descriptor_end+0xfff864cc>
   869b0:	d8000b15 	stw	zero,44(sp)
   869b4:	003c9f06 	br	85c34 <rx_descriptor_end+0xfff85bd4>
   869b8:	903e7e1e 	bne	r18,zero,863b4 <rx_descriptor_end+0xfff86354>
   869bc:	00800434 	movhi	r2,16
   869c0:	10bfffc4 	addi	r2,r2,-1
   869c4:	9884703a 	and	r2,r19,r2
   869c8:	1000ea1e 	bne	r2,zero,86d74 <_dtoa_r+0x1460>
   869cc:	9cdffc2c 	andhi	r19,r19,32752
   869d0:	9800e826 	beq	r19,zero,86d74 <_dtoa_r+0x1460>
   869d4:	d9c00817 	ldw	r7,32(sp)
   869d8:	b5800044 	addi	r22,r22,1
   869dc:	04c00044 	movi	r19,1
   869e0:	39c00044 	addi	r7,r7,1
   869e4:	d9c00815 	stw	r7,32(sp)
   869e8:	d8800d17 	ldw	r2,52(sp)
   869ec:	103e721e 	bne	r2,zero,863b8 <rx_descriptor_end+0xfff86358>
   869f0:	00800044 	movi	r2,1
   869f4:	003e7906 	br	863dc <rx_descriptor_end+0xfff8637c>
   869f8:	8009883a 	mov	r4,r16
   869fc:	008e0100 	call	8e010 <__floatsidf>
   86a00:	d9800f17 	ldw	r6,60(sp)
   86a04:	d9c01017 	ldw	r7,64(sp)
   86a08:	1009883a 	mov	r4,r2
   86a0c:	180b883a 	mov	r5,r3
   86a10:	008cf7c0 	call	8cf7c <__muldf3>
   86a14:	000d883a 	mov	r6,zero
   86a18:	01d00734 	movhi	r7,16412
   86a1c:	1009883a 	mov	r4,r2
   86a20:	180b883a 	mov	r5,r3
   86a24:	008bb900 	call	8bb90 <__adddf3>
   86a28:	047f3034 	movhi	r17,64704
   86a2c:	1021883a 	mov	r16,r2
   86a30:	1c63883a 	add	r17,r3,r17
   86a34:	d9000f17 	ldw	r4,60(sp)
   86a38:	d9401017 	ldw	r5,64(sp)
   86a3c:	000d883a 	mov	r6,zero
   86a40:	01d00534 	movhi	r7,16404
   86a44:	008d6940 	call	8d694 <__subdf3>
   86a48:	800d883a 	mov	r6,r16
   86a4c:	880f883a 	mov	r7,r17
   86a50:	1009883a 	mov	r4,r2
   86a54:	180b883a 	mov	r5,r3
   86a58:	102b883a 	mov	r21,r2
   86a5c:	1829883a 	mov	r20,r3
   86a60:	008cdac0 	call	8cdac <__gedf2>
   86a64:	00806c16 	blt	zero,r2,86c18 <_dtoa_r+0x1304>
   86a68:	89e0003c 	xorhi	r7,r17,32768
   86a6c:	800d883a 	mov	r6,r16
   86a70:	a809883a 	mov	r4,r21
   86a74:	a00b883a 	mov	r5,r20
   86a78:	008ce880 	call	8ce88 <__ledf2>
   86a7c:	103d7e0e 	bge	r2,zero,86078 <rx_descriptor_end+0xfff86018>
   86a80:	002b883a 	mov	r21,zero
   86a84:	0023883a 	mov	r17,zero
   86a88:	003efb06 	br	86678 <rx_descriptor_end+0xfff86618>
   86a8c:	d8800717 	ldw	r2,28(sp)
   86a90:	003bd006 	br	859d4 <rx_descriptor_end+0xfff85974>
   86a94:	d9000a17 	ldw	r4,40(sp)
   86a98:	d9800d17 	ldw	r6,52(sp)
   86a9c:	dd400a15 	stw	r21,40(sp)
   86aa0:	a905c83a 	sub	r2,r21,r4
   86aa4:	308d883a 	add	r6,r6,r2
   86aa8:	d9800d15 	stw	r6,52(sp)
   86aac:	002b883a 	mov	r21,zero
   86ab0:	003e0606 	br	862cc <rx_descriptor_end+0xfff8626c>
   86ab4:	9023883a 	mov	r17,r18
   86ab8:	9829883a 	mov	r20,r19
   86abc:	04000084 	movi	r16,2
   86ac0:	003c9206 	br	85d0c <rx_descriptor_end+0xfff85cac>
   86ac4:	04000044 	movi	r16,1
   86ac8:	dc000c15 	stw	r16,48(sp)
   86acc:	dc000615 	stw	r16,24(sp)
   86ad0:	dc002215 	stw	r16,136(sp)
   86ad4:	e0001115 	stw	zero,68(fp)
   86ad8:	000b883a 	mov	r5,zero
   86adc:	003c6906 	br	85c84 <rx_descriptor_end+0xfff85c24>
   86ae0:	3021883a 	mov	r16,r6
   86ae4:	003ffb06 	br	86ad4 <rx_descriptor_end+0xfff86a74>
   86ae8:	1000021e 	bne	r2,zero,86af4 <_dtoa_r+0x11e0>
   86aec:	4200004c 	andi	r8,r8,1
   86af0:	403e7d1e 	bne	r8,zero,864e8 <rx_descriptor_end+0xfff86488>
   86af4:	01000c04 	movi	r4,48
   86af8:	00000106 	br	86b00 <_dtoa_r+0x11ec>
   86afc:	102f883a 	mov	r23,r2
   86b00:	b8bfffc4 	addi	r2,r23,-1
   86b04:	10c00007 	ldb	r3,0(r2)
   86b08:	193ffc26 	beq	r3,r4,86afc <rx_descriptor_end+0xfff86a9c>
   86b0c:	003e8706 	br	8652c <rx_descriptor_end+0xfff864cc>
   86b10:	d8800517 	ldw	r2,20(sp)
   86b14:	00a3c83a 	sub	r17,zero,r2
   86b18:	8800a426 	beq	r17,zero,86dac <_dtoa_r+0x1498>
   86b1c:	888003cc 	andi	r2,r17,15
   86b20:	100490fa 	slli	r2,r2,3
   86b24:	00c00274 	movhi	r3,9
   86b28:	18c83004 	addi	r3,r3,8384
   86b2c:	1885883a 	add	r2,r3,r2
   86b30:	11800017 	ldw	r6,0(r2)
   86b34:	11c00117 	ldw	r7,4(r2)
   86b38:	9009883a 	mov	r4,r18
   86b3c:	980b883a 	mov	r5,r19
   86b40:	8823d13a 	srai	r17,r17,4
   86b44:	008cf7c0 	call	8cf7c <__muldf3>
   86b48:	d8800f15 	stw	r2,60(sp)
   86b4c:	d8c01015 	stw	r3,64(sp)
   86b50:	8800e826 	beq	r17,zero,86ef4 <_dtoa_r+0x15e0>
   86b54:	05000274 	movhi	r20,9
   86b58:	a5082604 	addi	r20,r20,8344
   86b5c:	04000084 	movi	r16,2
   86b60:	8980004c 	andi	r6,r17,1
   86b64:	1009883a 	mov	r4,r2
   86b68:	8823d07a 	srai	r17,r17,1
   86b6c:	180b883a 	mov	r5,r3
   86b70:	30000426 	beq	r6,zero,86b84 <_dtoa_r+0x1270>
   86b74:	a1800017 	ldw	r6,0(r20)
   86b78:	a1c00117 	ldw	r7,4(r20)
   86b7c:	84000044 	addi	r16,r16,1
   86b80:	008cf7c0 	call	8cf7c <__muldf3>
   86b84:	a5000204 	addi	r20,r20,8
   86b88:	883ff51e 	bne	r17,zero,86b60 <rx_descriptor_end+0xfff86b00>
   86b8c:	d8800f15 	stw	r2,60(sp)
   86b90:	d8c01015 	stw	r3,64(sp)
   86b94:	003c7606 	br	85d70 <rx_descriptor_end+0xfff85d10>
   86b98:	00c00c04 	movi	r3,48
   86b9c:	10c00005 	stb	r3,0(r2)
   86ba0:	d8c00517 	ldw	r3,20(sp)
   86ba4:	bd3fffc3 	ldbu	r20,-1(r23)
   86ba8:	18c00044 	addi	r3,r3,1
   86bac:	d8c00515 	stw	r3,20(sp)
   86bb0:	003db906 	br	86298 <rx_descriptor_end+0xfff86238>
   86bb4:	89400117 	ldw	r5,4(r17)
   86bb8:	e009883a 	mov	r4,fp
   86bbc:	00875c40 	call	875c4 <_Balloc>
   86bc0:	89800417 	ldw	r6,16(r17)
   86bc4:	89400304 	addi	r5,r17,12
   86bc8:	11000304 	addi	r4,r2,12
   86bcc:	31800084 	addi	r6,r6,2
   86bd0:	318d883a 	add	r6,r6,r6
   86bd4:	318d883a 	add	r6,r6,r6
   86bd8:	1027883a 	mov	r19,r2
   86bdc:	008747c0 	call	8747c <memcpy>
   86be0:	01800044 	movi	r6,1
   86be4:	980b883a 	mov	r5,r19
   86be8:	e009883a 	mov	r4,fp
   86bec:	0087d440 	call	87d44 <__lshift>
   86bf0:	1029883a 	mov	r20,r2
   86bf4:	003ecc06 	br	86728 <rx_descriptor_end+0xfff866c8>
   86bf8:	00800e44 	movi	r2,57
   86bfc:	90809026 	beq	r18,r2,86e40 <_dtoa_r+0x152c>
   86c00:	92000044 	addi	r8,r18,1
   86c04:	003f1f06 	br	86884 <rx_descriptor_end+0xfff86824>
   86c08:	9011883a 	mov	r8,r18
   86c0c:	8825883a 	mov	r18,r17
   86c10:	a023883a 	mov	r17,r20
   86c14:	003e2906 	br	864bc <rx_descriptor_end+0xfff8645c>
   86c18:	002b883a 	mov	r21,zero
   86c1c:	0023883a 	mov	r17,zero
   86c20:	003f5406 	br	86974 <rx_descriptor_end+0xfff86914>
   86c24:	61bfffc4 	addi	r6,r12,-1
   86c28:	300490fa 	slli	r2,r6,3
   86c2c:	00c00274 	movhi	r3,9
   86c30:	18c83004 	addi	r3,r3,8384
   86c34:	1885883a 	add	r2,r3,r2
   86c38:	11000017 	ldw	r4,0(r2)
   86c3c:	11400117 	ldw	r5,4(r2)
   86c40:	d8800717 	ldw	r2,28(sp)
   86c44:	880f883a 	mov	r7,r17
   86c48:	d9801215 	stw	r6,72(sp)
   86c4c:	800d883a 	mov	r6,r16
   86c50:	db001615 	stw	r12,88(sp)
   86c54:	15c00044 	addi	r23,r2,1
   86c58:	008cf7c0 	call	8cf7c <__muldf3>
   86c5c:	d9401017 	ldw	r5,64(sp)
   86c60:	d9000f17 	ldw	r4,60(sp)
   86c64:	d8c01515 	stw	r3,84(sp)
   86c68:	d8801415 	stw	r2,80(sp)
   86c6c:	008df900 	call	8df90 <__fixdfsi>
   86c70:	1009883a 	mov	r4,r2
   86c74:	1021883a 	mov	r16,r2
   86c78:	008e0100 	call	8e010 <__floatsidf>
   86c7c:	d9000f17 	ldw	r4,60(sp)
   86c80:	d9401017 	ldw	r5,64(sp)
   86c84:	100d883a 	mov	r6,r2
   86c88:	180f883a 	mov	r7,r3
   86c8c:	008d6940 	call	8d694 <__subdf3>
   86c90:	1829883a 	mov	r20,r3
   86c94:	d8c00717 	ldw	r3,28(sp)
   86c98:	84000c04 	addi	r16,r16,48
   86c9c:	1023883a 	mov	r17,r2
   86ca0:	1c000005 	stb	r16,0(r3)
   86ca4:	db001617 	ldw	r12,88(sp)
   86ca8:	00800044 	movi	r2,1
   86cac:	60802226 	beq	r12,r2,86d38 <_dtoa_r+0x1424>
   86cb0:	d9c00717 	ldw	r7,28(sp)
   86cb4:	8805883a 	mov	r2,r17
   86cb8:	b82b883a 	mov	r21,r23
   86cbc:	3b19883a 	add	r12,r7,r12
   86cc0:	6023883a 	mov	r17,r12
   86cc4:	a007883a 	mov	r3,r20
   86cc8:	dc800f15 	stw	r18,60(sp)
   86ccc:	000d883a 	mov	r6,zero
   86cd0:	01d00934 	movhi	r7,16420
   86cd4:	1009883a 	mov	r4,r2
   86cd8:	180b883a 	mov	r5,r3
   86cdc:	008cf7c0 	call	8cf7c <__muldf3>
   86ce0:	180b883a 	mov	r5,r3
   86ce4:	1009883a 	mov	r4,r2
   86ce8:	1829883a 	mov	r20,r3
   86cec:	1025883a 	mov	r18,r2
   86cf0:	008df900 	call	8df90 <__fixdfsi>
   86cf4:	1009883a 	mov	r4,r2
   86cf8:	1021883a 	mov	r16,r2
   86cfc:	008e0100 	call	8e010 <__floatsidf>
   86d00:	100d883a 	mov	r6,r2
   86d04:	180f883a 	mov	r7,r3
   86d08:	9009883a 	mov	r4,r18
   86d0c:	a00b883a 	mov	r5,r20
   86d10:	84000c04 	addi	r16,r16,48
   86d14:	008d6940 	call	8d694 <__subdf3>
   86d18:	ad400044 	addi	r21,r21,1
   86d1c:	ac3fffc5 	stb	r16,-1(r21)
   86d20:	ac7fea1e 	bne	r21,r17,86ccc <rx_descriptor_end+0xfff86c6c>
   86d24:	1023883a 	mov	r17,r2
   86d28:	d8801217 	ldw	r2,72(sp)
   86d2c:	dc800f17 	ldw	r18,60(sp)
   86d30:	1829883a 	mov	r20,r3
   86d34:	b8af883a 	add	r23,r23,r2
   86d38:	d9001417 	ldw	r4,80(sp)
   86d3c:	d9401517 	ldw	r5,84(sp)
   86d40:	000d883a 	mov	r6,zero
   86d44:	01cff834 	movhi	r7,16352
   86d48:	008bb900 	call	8bb90 <__adddf3>
   86d4c:	880d883a 	mov	r6,r17
   86d50:	a00f883a 	mov	r7,r20
   86d54:	1009883a 	mov	r4,r2
   86d58:	180b883a 	mov	r5,r3
   86d5c:	008ce880 	call	8ce88 <__ledf2>
   86d60:	10003e0e 	bge	r2,zero,86e5c <_dtoa_r+0x1548>
   86d64:	d9001317 	ldw	r4,76(sp)
   86d68:	bd3fffc3 	ldbu	r20,-1(r23)
   86d6c:	d9000515 	stw	r4,20(sp)
   86d70:	003d3b06 	br	86260 <rx_descriptor_end+0xfff86200>
   86d74:	0027883a 	mov	r19,zero
   86d78:	003f1b06 	br	869e8 <rx_descriptor_end+0xfff86988>
   86d7c:	d8800817 	ldw	r2,32(sp)
   86d80:	11e9c83a 	sub	r20,r2,r7
   86d84:	0005883a 	mov	r2,zero
   86d88:	003d5406 	br	862dc <rx_descriptor_end+0xfff8627c>
   86d8c:	00800044 	movi	r2,1
   86d90:	003dc706 	br	864b0 <rx_descriptor_end+0xfff86450>
   86d94:	d8c00217 	ldw	r3,8(sp)
   86d98:	00800d84 	movi	r2,54
   86d9c:	dd400a17 	ldw	r21,40(sp)
   86da0:	10c5c83a 	sub	r2,r2,r3
   86da4:	dd000817 	ldw	r20,32(sp)
   86da8:	003d4c06 	br	862dc <rx_descriptor_end+0xfff8627c>
   86dac:	dc800f15 	stw	r18,60(sp)
   86db0:	dcc01015 	stw	r19,64(sp)
   86db4:	04000084 	movi	r16,2
   86db8:	003bed06 	br	85d70 <rx_descriptor_end+0xfff85d10>
   86dbc:	d9000617 	ldw	r4,24(sp)
   86dc0:	203f0d26 	beq	r4,zero,869f8 <rx_descriptor_end+0xfff86998>
   86dc4:	d9800c17 	ldw	r6,48(sp)
   86dc8:	01bcab0e 	bge	zero,r6,86078 <rx_descriptor_end+0xfff86018>
   86dcc:	d9401017 	ldw	r5,64(sp)
   86dd0:	d9000f17 	ldw	r4,60(sp)
   86dd4:	000d883a 	mov	r6,zero
   86dd8:	01d00934 	movhi	r7,16420
   86ddc:	008cf7c0 	call	8cf7c <__muldf3>
   86de0:	81000044 	addi	r4,r16,1
   86de4:	d8800f15 	stw	r2,60(sp)
   86de8:	d8c01015 	stw	r3,64(sp)
   86dec:	008e0100 	call	8e010 <__floatsidf>
   86df0:	d9800f17 	ldw	r6,60(sp)
   86df4:	d9c01017 	ldw	r7,64(sp)
   86df8:	1009883a 	mov	r4,r2
   86dfc:	180b883a 	mov	r5,r3
   86e00:	008cf7c0 	call	8cf7c <__muldf3>
   86e04:	01d00734 	movhi	r7,16412
   86e08:	000d883a 	mov	r6,zero
   86e0c:	1009883a 	mov	r4,r2
   86e10:	180b883a 	mov	r5,r3
   86e14:	008bb900 	call	8bb90 <__adddf3>
   86e18:	d9c00517 	ldw	r7,20(sp)
   86e1c:	047f3034 	movhi	r17,64704
   86e20:	1021883a 	mov	r16,r2
   86e24:	39ffffc4 	addi	r7,r7,-1
   86e28:	d9c01315 	stw	r7,76(sp)
   86e2c:	1c63883a 	add	r17,r3,r17
   86e30:	db000c17 	ldw	r12,48(sp)
   86e34:	003bea06 	br	85de0 <rx_descriptor_end+0xfff85d80>
   86e38:	dc000915 	stw	r16,36(sp)
   86e3c:	003e0e06 	br	86678 <rx_descriptor_end+0xfff86618>
   86e40:	01000e44 	movi	r4,57
   86e44:	8825883a 	mov	r18,r17
   86e48:	9dc00044 	addi	r23,r19,1
   86e4c:	99000005 	stb	r4,0(r19)
   86e50:	a023883a 	mov	r17,r20
   86e54:	dc000915 	stw	r16,36(sp)
   86e58:	003da406 	br	864ec <rx_descriptor_end+0xfff8648c>
   86e5c:	d9801417 	ldw	r6,80(sp)
   86e60:	d9c01517 	ldw	r7,84(sp)
   86e64:	0009883a 	mov	r4,zero
   86e68:	014ff834 	movhi	r5,16352
   86e6c:	008d6940 	call	8d694 <__subdf3>
   86e70:	880d883a 	mov	r6,r17
   86e74:	a00f883a 	mov	r7,r20
   86e78:	1009883a 	mov	r4,r2
   86e7c:	180b883a 	mov	r5,r3
   86e80:	008cdac0 	call	8cdac <__gedf2>
   86e84:	00bc7c0e 	bge	zero,r2,86078 <rx_descriptor_end+0xfff86018>
   86e88:	01000c04 	movi	r4,48
   86e8c:	00000106 	br	86e94 <_dtoa_r+0x1580>
   86e90:	102f883a 	mov	r23,r2
   86e94:	b8bfffc4 	addi	r2,r23,-1
   86e98:	10c00007 	ldb	r3,0(r2)
   86e9c:	193ffc26 	beq	r3,r4,86e90 <rx_descriptor_end+0xfff86e30>
   86ea0:	d9801317 	ldw	r6,76(sp)
   86ea4:	d9800515 	stw	r6,20(sp)
   86ea8:	003c4406 	br	85fbc <rx_descriptor_end+0xfff85f5c>
   86eac:	d9801317 	ldw	r6,76(sp)
   86eb0:	d9800515 	stw	r6,20(sp)
   86eb4:	003cea06 	br	86260 <rx_descriptor_end+0xfff86200>
   86eb8:	dd800f17 	ldw	r22,60(sp)
   86ebc:	dcc01017 	ldw	r19,64(sp)
   86ec0:	dc801217 	ldw	r18,72(sp)
   86ec4:	003c6c06 	br	86078 <rx_descriptor_end+0xfff86018>
   86ec8:	903e031e 	bne	r18,zero,866d8 <rx_descriptor_end+0xfff86678>
   86ecc:	003ebb06 	br	869bc <rx_descriptor_end+0xfff8695c>
   86ed0:	103e6c1e 	bne	r2,zero,86884 <rx_descriptor_end+0xfff86824>
   86ed4:	4080004c 	andi	r2,r8,1
   86ed8:	103e6a26 	beq	r2,zero,86884 <rx_descriptor_end+0xfff86824>
   86edc:	003e6606 	br	86878 <rx_descriptor_end+0xfff86818>
   86ee0:	d8c00317 	ldw	r3,12(sp)
   86ee4:	00800084 	movi	r2,2
   86ee8:	10c02916 	blt	r2,r3,86f90 <_dtoa_r+0x167c>
   86eec:	d9000c17 	ldw	r4,48(sp)
   86ef0:	003e8806 	br	86914 <rx_descriptor_end+0xfff868b4>
   86ef4:	04000084 	movi	r16,2
   86ef8:	003b9d06 	br	85d70 <rx_descriptor_end+0xfff85d10>
   86efc:	d9001317 	ldw	r4,76(sp)
   86f00:	d9000515 	stw	r4,20(sp)
   86f04:	003cd606 	br	86260 <rx_descriptor_end+0xfff86200>
   86f08:	d8801317 	ldw	r2,76(sp)
   86f0c:	d8800515 	stw	r2,20(sp)
   86f10:	003c2a06 	br	85fbc <rx_descriptor_end+0xfff85f5c>
   86f14:	d9800317 	ldw	r6,12(sp)
   86f18:	00800084 	movi	r2,2
   86f1c:	11801516 	blt	r2,r6,86f74 <_dtoa_r+0x1660>
   86f20:	d9c00c17 	ldw	r7,48(sp)
   86f24:	d9c00615 	stw	r7,24(sp)
   86f28:	003df706 	br	86708 <rx_descriptor_end+0xfff866a8>
   86f2c:	193d3926 	beq	r3,r4,86414 <rx_descriptor_end+0xfff863b4>
   86f30:	00c00f04 	movi	r3,60
   86f34:	1885c83a 	sub	r2,r3,r2
   86f38:	003ddf06 	br	866b8 <rx_descriptor_end+0xfff86658>
   86f3c:	e009883a 	mov	r4,fp
   86f40:	e0001115 	stw	zero,68(fp)
   86f44:	000b883a 	mov	r5,zero
   86f48:	00875c40 	call	875c4 <_Balloc>
   86f4c:	d8800715 	stw	r2,28(sp)
   86f50:	d8c00717 	ldw	r3,28(sp)
   86f54:	00bfffc4 	movi	r2,-1
   86f58:	01000044 	movi	r4,1
   86f5c:	d8800c15 	stw	r2,48(sp)
   86f60:	e0c01015 	stw	r3,64(fp)
   86f64:	d9000b15 	stw	r4,44(sp)
   86f68:	d8800615 	stw	r2,24(sp)
   86f6c:	d8002215 	stw	zero,136(sp)
   86f70:	003c4106 	br	86078 <rx_descriptor_end+0xfff86018>
   86f74:	d8c00c17 	ldw	r3,48(sp)
   86f78:	d8c00615 	stw	r3,24(sp)
   86f7c:	003e7006 	br	86940 <rx_descriptor_end+0xfff868e0>
   86f80:	04400044 	movi	r17,1
   86f84:	003b2006 	br	85c08 <rx_descriptor_end+0xfff85ba8>
   86f88:	000b883a 	mov	r5,zero
   86f8c:	003b3d06 	br	85c84 <rx_descriptor_end+0xfff85c24>
   86f90:	d8800c17 	ldw	r2,48(sp)
   86f94:	d8800615 	stw	r2,24(sp)
   86f98:	003e6906 	br	86940 <rx_descriptor_end+0xfff868e0>

00086f9c <_fclose_r>:
   86f9c:	28003926 	beq	r5,zero,87084 <_fclose_r+0xe8>
   86fa0:	defffc04 	addi	sp,sp,-16
   86fa4:	dc400115 	stw	r17,4(sp)
   86fa8:	dc000015 	stw	r16,0(sp)
   86fac:	dfc00315 	stw	ra,12(sp)
   86fb0:	dc800215 	stw	r18,8(sp)
   86fb4:	2023883a 	mov	r17,r4
   86fb8:	2821883a 	mov	r16,r5
   86fbc:	20000226 	beq	r4,zero,86fc8 <_fclose_r+0x2c>
   86fc0:	20800e17 	ldw	r2,56(r4)
   86fc4:	10002726 	beq	r2,zero,87064 <_fclose_r+0xc8>
   86fc8:	8080030f 	ldh	r2,12(r16)
   86fcc:	1000071e 	bne	r2,zero,86fec <_fclose_r+0x50>
   86fd0:	0005883a 	mov	r2,zero
   86fd4:	dfc00317 	ldw	ra,12(sp)
   86fd8:	dc800217 	ldw	r18,8(sp)
   86fdc:	dc400117 	ldw	r17,4(sp)
   86fe0:	dc000017 	ldw	r16,0(sp)
   86fe4:	dec00404 	addi	sp,sp,16
   86fe8:	f800283a 	ret
   86fec:	800b883a 	mov	r5,r16
   86ff0:	8809883a 	mov	r4,r17
   86ff4:	00819840 	call	81984 <__sflush_r>
   86ff8:	1025883a 	mov	r18,r2
   86ffc:	80800b17 	ldw	r2,44(r16)
   87000:	10000426 	beq	r2,zero,87014 <_fclose_r+0x78>
   87004:	81400717 	ldw	r5,28(r16)
   87008:	8809883a 	mov	r4,r17
   8700c:	103ee83a 	callr	r2
   87010:	10001616 	blt	r2,zero,8706c <_fclose_r+0xd0>
   87014:	8080030b 	ldhu	r2,12(r16)
   87018:	1080200c 	andi	r2,r2,128
   8701c:	1000151e 	bne	r2,zero,87074 <_fclose_r+0xd8>
   87020:	81400c17 	ldw	r5,48(r16)
   87024:	28000526 	beq	r5,zero,8703c <_fclose_r+0xa0>
   87028:	80801004 	addi	r2,r16,64
   8702c:	28800226 	beq	r5,r2,87038 <_fclose_r+0x9c>
   87030:	8809883a 	mov	r4,r17
   87034:	00820f00 	call	820f0 <_free_r>
   87038:	80000c15 	stw	zero,48(r16)
   8703c:	81401117 	ldw	r5,68(r16)
   87040:	28000326 	beq	r5,zero,87050 <_fclose_r+0xb4>
   87044:	8809883a 	mov	r4,r17
   87048:	00820f00 	call	820f0 <_free_r>
   8704c:	80001115 	stw	zero,68(r16)
   87050:	0081f8c0 	call	81f8c <__sfp_lock_acquire>
   87054:	8000030d 	sth	zero,12(r16)
   87058:	0081f900 	call	81f90 <__sfp_lock_release>
   8705c:	9005883a 	mov	r2,r18
   87060:	003fdc06 	br	86fd4 <rx_descriptor_end+0xfff86f74>
   87064:	0081f7c0 	call	81f7c <__sinit>
   87068:	003fd706 	br	86fc8 <rx_descriptor_end+0xfff86f68>
   8706c:	04bfffc4 	movi	r18,-1
   87070:	003fe806 	br	87014 <rx_descriptor_end+0xfff86fb4>
   87074:	81400417 	ldw	r5,16(r16)
   87078:	8809883a 	mov	r4,r17
   8707c:	00820f00 	call	820f0 <_free_r>
   87080:	003fe706 	br	87020 <rx_descriptor_end+0xfff86fc0>
   87084:	0005883a 	mov	r2,zero
   87088:	f800283a 	ret

0008708c <fclose>:
   8708c:	00800274 	movhi	r2,9
   87090:	10908204 	addi	r2,r2,16904
   87094:	200b883a 	mov	r5,r4
   87098:	11000017 	ldw	r4,0(r2)
   8709c:	0086f9c1 	jmpi	86f9c <_fclose_r>

000870a0 <_setlocale_r>:
   870a0:	30001b26 	beq	r6,zero,87110 <_setlocale_r+0x70>
   870a4:	01400274 	movhi	r5,9
   870a8:	defffe04 	addi	sp,sp,-8
   870ac:	29481604 	addi	r5,r5,8280
   870b0:	3009883a 	mov	r4,r6
   870b4:	dc000015 	stw	r16,0(sp)
   870b8:	dfc00115 	stw	ra,4(sp)
   870bc:	3021883a 	mov	r16,r6
   870c0:	00886940 	call	88694 <strcmp>
   870c4:	1000061e 	bne	r2,zero,870e0 <_setlocale_r+0x40>
   870c8:	00800274 	movhi	r2,9
   870cc:	1087f804 	addi	r2,r2,8160
   870d0:	dfc00117 	ldw	ra,4(sp)
   870d4:	dc000017 	ldw	r16,0(sp)
   870d8:	dec00204 	addi	sp,sp,8
   870dc:	f800283a 	ret
   870e0:	01400274 	movhi	r5,9
   870e4:	2947f804 	addi	r5,r5,8160
   870e8:	8009883a 	mov	r4,r16
   870ec:	00886940 	call	88694 <strcmp>
   870f0:	103ff526 	beq	r2,zero,870c8 <rx_descriptor_end+0xfff87068>
   870f4:	01400274 	movhi	r5,9
   870f8:	29480104 	addi	r5,r5,8196
   870fc:	8009883a 	mov	r4,r16
   87100:	00886940 	call	88694 <strcmp>
   87104:	103ff026 	beq	r2,zero,870c8 <rx_descriptor_end+0xfff87068>
   87108:	0005883a 	mov	r2,zero
   8710c:	003ff006 	br	870d0 <rx_descriptor_end+0xfff87070>
   87110:	00800274 	movhi	r2,9
   87114:	1087f804 	addi	r2,r2,8160
   87118:	f800283a 	ret

0008711c <__locale_charset>:
   8711c:	00800274 	movhi	r2,9
   87120:	108bd004 	addi	r2,r2,12096
   87124:	f800283a 	ret

00087128 <__locale_mb_cur_max>:
   87128:	00800274 	movhi	r2,9
   8712c:	10908504 	addi	r2,r2,16916
   87130:	10800017 	ldw	r2,0(r2)
   87134:	f800283a 	ret

00087138 <__locale_msgcharset>:
   87138:	00800274 	movhi	r2,9
   8713c:	108bc804 	addi	r2,r2,12064
   87140:	f800283a 	ret

00087144 <__locale_cjk_lang>:
   87144:	0005883a 	mov	r2,zero
   87148:	f800283a 	ret

0008714c <_localeconv_r>:
   8714c:	00800274 	movhi	r2,9
   87150:	108bd804 	addi	r2,r2,12128
   87154:	f800283a 	ret

00087158 <setlocale>:
   87158:	00800274 	movhi	r2,9
   8715c:	10908204 	addi	r2,r2,16904
   87160:	280d883a 	mov	r6,r5
   87164:	200b883a 	mov	r5,r4
   87168:	11000017 	ldw	r4,0(r2)
   8716c:	00870a01 	jmpi	870a0 <_setlocale_r>

00087170 <localeconv>:
   87170:	00800274 	movhi	r2,9
   87174:	108bd804 	addi	r2,r2,12128
   87178:	f800283a 	ret

0008717c <_lseek_r>:
   8717c:	defffd04 	addi	sp,sp,-12
   87180:	2805883a 	mov	r2,r5
   87184:	dc000015 	stw	r16,0(sp)
   87188:	04000274 	movhi	r16,9
   8718c:	dc400115 	stw	r17,4(sp)
   87190:	300b883a 	mov	r5,r6
   87194:	84187a04 	addi	r16,r16,25064
   87198:	2023883a 	mov	r17,r4
   8719c:	380d883a 	mov	r6,r7
   871a0:	1009883a 	mov	r4,r2
   871a4:	dfc00215 	stw	ra,8(sp)
   871a8:	80000015 	stw	zero,0(r16)
   871ac:	008e66c0 	call	8e66c <lseek>
   871b0:	00ffffc4 	movi	r3,-1
   871b4:	10c00526 	beq	r2,r3,871cc <_lseek_r+0x50>
   871b8:	dfc00217 	ldw	ra,8(sp)
   871bc:	dc400117 	ldw	r17,4(sp)
   871c0:	dc000017 	ldw	r16,0(sp)
   871c4:	dec00304 	addi	sp,sp,12
   871c8:	f800283a 	ret
   871cc:	80c00017 	ldw	r3,0(r16)
   871d0:	183ff926 	beq	r3,zero,871b8 <rx_descriptor_end+0xfff87158>
   871d4:	88c00015 	stw	r3,0(r17)
   871d8:	003ff706 	br	871b8 <rx_descriptor_end+0xfff87158>

000871dc <__smakebuf_r>:
   871dc:	2880030b 	ldhu	r2,12(r5)
   871e0:	10c0008c 	andi	r3,r2,2
   871e4:	1800411e 	bne	r3,zero,872ec <__smakebuf_r+0x110>
   871e8:	deffec04 	addi	sp,sp,-80
   871ec:	dc000f15 	stw	r16,60(sp)
   871f0:	2821883a 	mov	r16,r5
   871f4:	2940038f 	ldh	r5,14(r5)
   871f8:	dc401015 	stw	r17,64(sp)
   871fc:	dfc01315 	stw	ra,76(sp)
   87200:	dcc01215 	stw	r19,72(sp)
   87204:	dc801115 	stw	r18,68(sp)
   87208:	2023883a 	mov	r17,r4
   8720c:	28001c16 	blt	r5,zero,87280 <__smakebuf_r+0xa4>
   87210:	d80d883a 	mov	r6,sp
   87214:	008a11c0 	call	8a11c <_fstat_r>
   87218:	10001816 	blt	r2,zero,8727c <__smakebuf_r+0xa0>
   8721c:	d8800117 	ldw	r2,4(sp)
   87220:	00e00014 	movui	r3,32768
   87224:	10bc000c 	andi	r2,r2,61440
   87228:	14c80020 	cmpeqi	r19,r2,8192
   8722c:	10c03726 	beq	r2,r3,8730c <__smakebuf_r+0x130>
   87230:	80c0030b 	ldhu	r3,12(r16)
   87234:	18c20014 	ori	r3,r3,2048
   87238:	80c0030d 	sth	r3,12(r16)
   8723c:	00c80004 	movi	r3,8192
   87240:	10c0521e 	bne	r2,r3,8738c <__smakebuf_r+0x1b0>
   87244:	8140038f 	ldh	r5,14(r16)
   87248:	8809883a 	mov	r4,r17
   8724c:	008a6340 	call	8a634 <_isatty_r>
   87250:	10004c26 	beq	r2,zero,87384 <__smakebuf_r+0x1a8>
   87254:	8080030b 	ldhu	r2,12(r16)
   87258:	80c010c4 	addi	r3,r16,67
   8725c:	80c00015 	stw	r3,0(r16)
   87260:	10800054 	ori	r2,r2,1
   87264:	8080030d 	sth	r2,12(r16)
   87268:	00800044 	movi	r2,1
   8726c:	80c00415 	stw	r3,16(r16)
   87270:	80800515 	stw	r2,20(r16)
   87274:	04810004 	movi	r18,1024
   87278:	00000706 	br	87298 <__smakebuf_r+0xbc>
   8727c:	8080030b 	ldhu	r2,12(r16)
   87280:	10c0200c 	andi	r3,r2,128
   87284:	18001f1e 	bne	r3,zero,87304 <__smakebuf_r+0x128>
   87288:	04810004 	movi	r18,1024
   8728c:	10820014 	ori	r2,r2,2048
   87290:	8080030d 	sth	r2,12(r16)
   87294:	0027883a 	mov	r19,zero
   87298:	900b883a 	mov	r5,r18
   8729c:	8809883a 	mov	r4,r17
   872a0:	00825b00 	call	825b0 <_malloc_r>
   872a4:	10002c26 	beq	r2,zero,87358 <__smakebuf_r+0x17c>
   872a8:	80c0030b 	ldhu	r3,12(r16)
   872ac:	01000234 	movhi	r4,8
   872b0:	21070d04 	addi	r4,r4,7220
   872b4:	89000f15 	stw	r4,60(r17)
   872b8:	18c02014 	ori	r3,r3,128
   872bc:	80c0030d 	sth	r3,12(r16)
   872c0:	80800015 	stw	r2,0(r16)
   872c4:	80800415 	stw	r2,16(r16)
   872c8:	84800515 	stw	r18,20(r16)
   872cc:	98001a1e 	bne	r19,zero,87338 <__smakebuf_r+0x15c>
   872d0:	dfc01317 	ldw	ra,76(sp)
   872d4:	dcc01217 	ldw	r19,72(sp)
   872d8:	dc801117 	ldw	r18,68(sp)
   872dc:	dc401017 	ldw	r17,64(sp)
   872e0:	dc000f17 	ldw	r16,60(sp)
   872e4:	dec01404 	addi	sp,sp,80
   872e8:	f800283a 	ret
   872ec:	288010c4 	addi	r2,r5,67
   872f0:	28800015 	stw	r2,0(r5)
   872f4:	28800415 	stw	r2,16(r5)
   872f8:	00800044 	movi	r2,1
   872fc:	28800515 	stw	r2,20(r5)
   87300:	f800283a 	ret
   87304:	04801004 	movi	r18,64
   87308:	003fe006 	br	8728c <rx_descriptor_end+0xfff8722c>
   8730c:	81000a17 	ldw	r4,40(r16)
   87310:	00c00234 	movhi	r3,8
   87314:	18cc7604 	addi	r3,r3,12760
   87318:	20ffc51e 	bne	r4,r3,87230 <rx_descriptor_end+0xfff871d0>
   8731c:	8080030b 	ldhu	r2,12(r16)
   87320:	04810004 	movi	r18,1024
   87324:	84801315 	stw	r18,76(r16)
   87328:	1484b03a 	or	r2,r2,r18
   8732c:	8080030d 	sth	r2,12(r16)
   87330:	0027883a 	mov	r19,zero
   87334:	003fd806 	br	87298 <rx_descriptor_end+0xfff87238>
   87338:	8140038f 	ldh	r5,14(r16)
   8733c:	8809883a 	mov	r4,r17
   87340:	008a6340 	call	8a634 <_isatty_r>
   87344:	103fe226 	beq	r2,zero,872d0 <rx_descriptor_end+0xfff87270>
   87348:	8080030b 	ldhu	r2,12(r16)
   8734c:	10800054 	ori	r2,r2,1
   87350:	8080030d 	sth	r2,12(r16)
   87354:	003fde06 	br	872d0 <rx_descriptor_end+0xfff87270>
   87358:	8080030b 	ldhu	r2,12(r16)
   8735c:	10c0800c 	andi	r3,r2,512
   87360:	183fdb1e 	bne	r3,zero,872d0 <rx_descriptor_end+0xfff87270>
   87364:	10800094 	ori	r2,r2,2
   87368:	80c010c4 	addi	r3,r16,67
   8736c:	8080030d 	sth	r2,12(r16)
   87370:	00800044 	movi	r2,1
   87374:	80c00015 	stw	r3,0(r16)
   87378:	80c00415 	stw	r3,16(r16)
   8737c:	80800515 	stw	r2,20(r16)
   87380:	003fd306 	br	872d0 <rx_descriptor_end+0xfff87270>
   87384:	04810004 	movi	r18,1024
   87388:	003fc306 	br	87298 <rx_descriptor_end+0xfff87238>
   8738c:	0027883a 	mov	r19,zero
   87390:	04810004 	movi	r18,1024
   87394:	003fc006 	br	87298 <rx_descriptor_end+0xfff87238>

00087398 <memchr>:
   87398:	208000cc 	andi	r2,r4,3
   8739c:	280f883a 	mov	r7,r5
   873a0:	10003426 	beq	r2,zero,87474 <memchr+0xdc>
   873a4:	30bfffc4 	addi	r2,r6,-1
   873a8:	30001a26 	beq	r6,zero,87414 <memchr+0x7c>
   873ac:	20c00003 	ldbu	r3,0(r4)
   873b0:	29803fcc 	andi	r6,r5,255
   873b4:	30c0051e 	bne	r6,r3,873cc <memchr+0x34>
   873b8:	00001806 	br	8741c <memchr+0x84>
   873bc:	10001526 	beq	r2,zero,87414 <memchr+0x7c>
   873c0:	20c00003 	ldbu	r3,0(r4)
   873c4:	10bfffc4 	addi	r2,r2,-1
   873c8:	30c01426 	beq	r6,r3,8741c <memchr+0x84>
   873cc:	21000044 	addi	r4,r4,1
   873d0:	20c000cc 	andi	r3,r4,3
   873d4:	183ff91e 	bne	r3,zero,873bc <rx_descriptor_end+0xfff8735c>
   873d8:	020000c4 	movi	r8,3
   873dc:	40801136 	bltu	r8,r2,87424 <memchr+0x8c>
   873e0:	10000c26 	beq	r2,zero,87414 <memchr+0x7c>
   873e4:	20c00003 	ldbu	r3,0(r4)
   873e8:	29403fcc 	andi	r5,r5,255
   873ec:	28c00b26 	beq	r5,r3,8741c <memchr+0x84>
   873f0:	20c00044 	addi	r3,r4,1
   873f4:	39803fcc 	andi	r6,r7,255
   873f8:	2089883a 	add	r4,r4,r2
   873fc:	00000306 	br	8740c <memchr+0x74>
   87400:	18c00044 	addi	r3,r3,1
   87404:	197fffc3 	ldbu	r5,-1(r3)
   87408:	31400526 	beq	r6,r5,87420 <memchr+0x88>
   8740c:	1805883a 	mov	r2,r3
   87410:	20fffb1e 	bne	r4,r3,87400 <rx_descriptor_end+0xfff873a0>
   87414:	0005883a 	mov	r2,zero
   87418:	f800283a 	ret
   8741c:	2005883a 	mov	r2,r4
   87420:	f800283a 	ret
   87424:	28c03fcc 	andi	r3,r5,255
   87428:	1812923a 	slli	r9,r3,8
   8742c:	02ffbff4 	movhi	r11,65279
   87430:	02a02074 	movhi	r10,32897
   87434:	48d2b03a 	or	r9,r9,r3
   87438:	4806943a 	slli	r3,r9,16
   8743c:	5affbfc4 	addi	r11,r11,-257
   87440:	52a02004 	addi	r10,r10,-32640
   87444:	48d2b03a 	or	r9,r9,r3
   87448:	20c00017 	ldw	r3,0(r4)
   8744c:	48c6f03a 	xor	r3,r9,r3
   87450:	1acd883a 	add	r6,r3,r11
   87454:	00c6303a 	nor	r3,zero,r3
   87458:	30c6703a 	and	r3,r6,r3
   8745c:	1a86703a 	and	r3,r3,r10
   87460:	183fe01e 	bne	r3,zero,873e4 <rx_descriptor_end+0xfff87384>
   87464:	10bfff04 	addi	r2,r2,-4
   87468:	21000104 	addi	r4,r4,4
   8746c:	40bff636 	bltu	r8,r2,87448 <rx_descriptor_end+0xfff873e8>
   87470:	003fdb06 	br	873e0 <rx_descriptor_end+0xfff87380>
   87474:	3005883a 	mov	r2,r6
   87478:	003fd706 	br	873d8 <rx_descriptor_end+0xfff87378>

0008747c <memcpy>:
   8747c:	defffd04 	addi	sp,sp,-12
   87480:	dfc00215 	stw	ra,8(sp)
   87484:	dc400115 	stw	r17,4(sp)
   87488:	dc000015 	stw	r16,0(sp)
   8748c:	00c003c4 	movi	r3,15
   87490:	2005883a 	mov	r2,r4
   87494:	1980452e 	bgeu	r3,r6,875ac <memcpy+0x130>
   87498:	2906b03a 	or	r3,r5,r4
   8749c:	18c000cc 	andi	r3,r3,3
   874a0:	1800441e 	bne	r3,zero,875b4 <memcpy+0x138>
   874a4:	347ffc04 	addi	r17,r6,-16
   874a8:	8822d13a 	srli	r17,r17,4
   874ac:	28c00104 	addi	r3,r5,4
   874b0:	23400104 	addi	r13,r4,4
   874b4:	8820913a 	slli	r16,r17,4
   874b8:	2b000204 	addi	r12,r5,8
   874bc:	22c00204 	addi	r11,r4,8
   874c0:	84000504 	addi	r16,r16,20
   874c4:	2a800304 	addi	r10,r5,12
   874c8:	22400304 	addi	r9,r4,12
   874cc:	2c21883a 	add	r16,r5,r16
   874d0:	2811883a 	mov	r8,r5
   874d4:	200f883a 	mov	r7,r4
   874d8:	41000017 	ldw	r4,0(r8)
   874dc:	1fc00017 	ldw	ra,0(r3)
   874e0:	63c00017 	ldw	r15,0(r12)
   874e4:	39000015 	stw	r4,0(r7)
   874e8:	53800017 	ldw	r14,0(r10)
   874ec:	6fc00015 	stw	ra,0(r13)
   874f0:	5bc00015 	stw	r15,0(r11)
   874f4:	4b800015 	stw	r14,0(r9)
   874f8:	18c00404 	addi	r3,r3,16
   874fc:	39c00404 	addi	r7,r7,16
   87500:	42000404 	addi	r8,r8,16
   87504:	6b400404 	addi	r13,r13,16
   87508:	63000404 	addi	r12,r12,16
   8750c:	5ac00404 	addi	r11,r11,16
   87510:	52800404 	addi	r10,r10,16
   87514:	4a400404 	addi	r9,r9,16
   87518:	1c3fef1e 	bne	r3,r16,874d8 <rx_descriptor_end+0xfff87478>
   8751c:	89c00044 	addi	r7,r17,1
   87520:	380e913a 	slli	r7,r7,4
   87524:	310003cc 	andi	r4,r6,15
   87528:	02c000c4 	movi	r11,3
   8752c:	11c7883a 	add	r3,r2,r7
   87530:	29cb883a 	add	r5,r5,r7
   87534:	5900212e 	bgeu	r11,r4,875bc <memcpy+0x140>
   87538:	1813883a 	mov	r9,r3
   8753c:	2811883a 	mov	r8,r5
   87540:	200f883a 	mov	r7,r4
   87544:	42800017 	ldw	r10,0(r8)
   87548:	4a400104 	addi	r9,r9,4
   8754c:	39ffff04 	addi	r7,r7,-4
   87550:	4abfff15 	stw	r10,-4(r9)
   87554:	42000104 	addi	r8,r8,4
   87558:	59fffa36 	bltu	r11,r7,87544 <rx_descriptor_end+0xfff874e4>
   8755c:	213fff04 	addi	r4,r4,-4
   87560:	2008d0ba 	srli	r4,r4,2
   87564:	318000cc 	andi	r6,r6,3
   87568:	21000044 	addi	r4,r4,1
   8756c:	2109883a 	add	r4,r4,r4
   87570:	2109883a 	add	r4,r4,r4
   87574:	1907883a 	add	r3,r3,r4
   87578:	290b883a 	add	r5,r5,r4
   8757c:	30000626 	beq	r6,zero,87598 <memcpy+0x11c>
   87580:	198d883a 	add	r6,r3,r6
   87584:	29c00003 	ldbu	r7,0(r5)
   87588:	18c00044 	addi	r3,r3,1
   8758c:	29400044 	addi	r5,r5,1
   87590:	19ffffc5 	stb	r7,-1(r3)
   87594:	19bffb1e 	bne	r3,r6,87584 <rx_descriptor_end+0xfff87524>
   87598:	dfc00217 	ldw	ra,8(sp)
   8759c:	dc400117 	ldw	r17,4(sp)
   875a0:	dc000017 	ldw	r16,0(sp)
   875a4:	dec00304 	addi	sp,sp,12
   875a8:	f800283a 	ret
   875ac:	2007883a 	mov	r3,r4
   875b0:	003ff206 	br	8757c <rx_descriptor_end+0xfff8751c>
   875b4:	2007883a 	mov	r3,r4
   875b8:	003ff106 	br	87580 <rx_descriptor_end+0xfff87520>
   875bc:	200d883a 	mov	r6,r4
   875c0:	003fee06 	br	8757c <rx_descriptor_end+0xfff8751c>

000875c4 <_Balloc>:
   875c4:	20801317 	ldw	r2,76(r4)
   875c8:	defffc04 	addi	sp,sp,-16
   875cc:	dc400115 	stw	r17,4(sp)
   875d0:	dc000015 	stw	r16,0(sp)
   875d4:	dfc00315 	stw	ra,12(sp)
   875d8:	dc800215 	stw	r18,8(sp)
   875dc:	2023883a 	mov	r17,r4
   875e0:	2821883a 	mov	r16,r5
   875e4:	10000f26 	beq	r2,zero,87624 <_Balloc+0x60>
   875e8:	8407883a 	add	r3,r16,r16
   875ec:	18c7883a 	add	r3,r3,r3
   875f0:	10c7883a 	add	r3,r2,r3
   875f4:	18800017 	ldw	r2,0(r3)
   875f8:	10001126 	beq	r2,zero,87640 <_Balloc+0x7c>
   875fc:	11000017 	ldw	r4,0(r2)
   87600:	19000015 	stw	r4,0(r3)
   87604:	10000415 	stw	zero,16(r2)
   87608:	10000315 	stw	zero,12(r2)
   8760c:	dfc00317 	ldw	ra,12(sp)
   87610:	dc800217 	ldw	r18,8(sp)
   87614:	dc400117 	ldw	r17,4(sp)
   87618:	dc000017 	ldw	r16,0(sp)
   8761c:	dec00404 	addi	sp,sp,16
   87620:	f800283a 	ret
   87624:	01800844 	movi	r6,33
   87628:	01400104 	movi	r5,4
   8762c:	0089e500 	call	89e50 <_calloc_r>
   87630:	88801315 	stw	r2,76(r17)
   87634:	103fec1e 	bne	r2,zero,875e8 <rx_descriptor_end+0xfff87588>
   87638:	0005883a 	mov	r2,zero
   8763c:	003ff306 	br	8760c <rx_descriptor_end+0xfff875ac>
   87640:	01400044 	movi	r5,1
   87644:	2c24983a 	sll	r18,r5,r16
   87648:	8809883a 	mov	r4,r17
   8764c:	91800144 	addi	r6,r18,5
   87650:	318d883a 	add	r6,r6,r6
   87654:	318d883a 	add	r6,r6,r6
   87658:	0089e500 	call	89e50 <_calloc_r>
   8765c:	103ff626 	beq	r2,zero,87638 <rx_descriptor_end+0xfff875d8>
   87660:	14000115 	stw	r16,4(r2)
   87664:	14800215 	stw	r18,8(r2)
   87668:	003fe606 	br	87604 <rx_descriptor_end+0xfff875a4>

0008766c <_Bfree>:
   8766c:	28000826 	beq	r5,zero,87690 <_Bfree+0x24>
   87670:	28c00117 	ldw	r3,4(r5)
   87674:	20801317 	ldw	r2,76(r4)
   87678:	18c7883a 	add	r3,r3,r3
   8767c:	18c7883a 	add	r3,r3,r3
   87680:	10c5883a 	add	r2,r2,r3
   87684:	10c00017 	ldw	r3,0(r2)
   87688:	28c00015 	stw	r3,0(r5)
   8768c:	11400015 	stw	r5,0(r2)
   87690:	f800283a 	ret

00087694 <__multadd>:
   87694:	defffa04 	addi	sp,sp,-24
   87698:	dc800315 	stw	r18,12(sp)
   8769c:	dc400215 	stw	r17,8(sp)
   876a0:	dc000115 	stw	r16,4(sp)
   876a4:	2823883a 	mov	r17,r5
   876a8:	2c000417 	ldw	r16,16(r5)
   876ac:	dfc00515 	stw	ra,20(sp)
   876b0:	dcc00415 	stw	r19,16(sp)
   876b4:	2025883a 	mov	r18,r4
   876b8:	29400504 	addi	r5,r5,20
   876bc:	0011883a 	mov	r8,zero
   876c0:	28c00017 	ldw	r3,0(r5)
   876c4:	29400104 	addi	r5,r5,4
   876c8:	42000044 	addi	r8,r8,1
   876cc:	18bfffcc 	andi	r2,r3,65535
   876d0:	1185383a 	mul	r2,r2,r6
   876d4:	1806d43a 	srli	r3,r3,16
   876d8:	11cf883a 	add	r7,r2,r7
   876dc:	3808d43a 	srli	r4,r7,16
   876e0:	1987383a 	mul	r3,r3,r6
   876e4:	38bfffcc 	andi	r2,r7,65535
   876e8:	1907883a 	add	r3,r3,r4
   876ec:	1808943a 	slli	r4,r3,16
   876f0:	180ed43a 	srli	r7,r3,16
   876f4:	2085883a 	add	r2,r4,r2
   876f8:	28bfff15 	stw	r2,-4(r5)
   876fc:	443ff016 	blt	r8,r16,876c0 <rx_descriptor_end+0xfff87660>
   87700:	38000926 	beq	r7,zero,87728 <__multadd+0x94>
   87704:	88800217 	ldw	r2,8(r17)
   87708:	80800f0e 	bge	r16,r2,87748 <__multadd+0xb4>
   8770c:	80800144 	addi	r2,r16,5
   87710:	1085883a 	add	r2,r2,r2
   87714:	1085883a 	add	r2,r2,r2
   87718:	8885883a 	add	r2,r17,r2
   8771c:	11c00015 	stw	r7,0(r2)
   87720:	84000044 	addi	r16,r16,1
   87724:	8c000415 	stw	r16,16(r17)
   87728:	8805883a 	mov	r2,r17
   8772c:	dfc00517 	ldw	ra,20(sp)
   87730:	dcc00417 	ldw	r19,16(sp)
   87734:	dc800317 	ldw	r18,12(sp)
   87738:	dc400217 	ldw	r17,8(sp)
   8773c:	dc000117 	ldw	r16,4(sp)
   87740:	dec00604 	addi	sp,sp,24
   87744:	f800283a 	ret
   87748:	89400117 	ldw	r5,4(r17)
   8774c:	9009883a 	mov	r4,r18
   87750:	d9c00015 	stw	r7,0(sp)
   87754:	29400044 	addi	r5,r5,1
   87758:	00875c40 	call	875c4 <_Balloc>
   8775c:	89800417 	ldw	r6,16(r17)
   87760:	89400304 	addi	r5,r17,12
   87764:	11000304 	addi	r4,r2,12
   87768:	31800084 	addi	r6,r6,2
   8776c:	318d883a 	add	r6,r6,r6
   87770:	318d883a 	add	r6,r6,r6
   87774:	1027883a 	mov	r19,r2
   87778:	008747c0 	call	8747c <memcpy>
   8777c:	d9c00017 	ldw	r7,0(sp)
   87780:	88000a26 	beq	r17,zero,877ac <__multadd+0x118>
   87784:	88c00117 	ldw	r3,4(r17)
   87788:	90801317 	ldw	r2,76(r18)
   8778c:	18c7883a 	add	r3,r3,r3
   87790:	18c7883a 	add	r3,r3,r3
   87794:	10c5883a 	add	r2,r2,r3
   87798:	10c00017 	ldw	r3,0(r2)
   8779c:	88c00015 	stw	r3,0(r17)
   877a0:	14400015 	stw	r17,0(r2)
   877a4:	9823883a 	mov	r17,r19
   877a8:	003fd806 	br	8770c <rx_descriptor_end+0xfff876ac>
   877ac:	9823883a 	mov	r17,r19
   877b0:	003fd606 	br	8770c <rx_descriptor_end+0xfff876ac>

000877b4 <__s2b>:
   877b4:	defff904 	addi	sp,sp,-28
   877b8:	dc400115 	stw	r17,4(sp)
   877bc:	dc000015 	stw	r16,0(sp)
   877c0:	2023883a 	mov	r17,r4
   877c4:	2821883a 	mov	r16,r5
   877c8:	39000204 	addi	r4,r7,8
   877cc:	01400244 	movi	r5,9
   877d0:	dcc00315 	stw	r19,12(sp)
   877d4:	dc800215 	stw	r18,8(sp)
   877d8:	dfc00615 	stw	ra,24(sp)
   877dc:	dd400515 	stw	r21,20(sp)
   877e0:	dd000415 	stw	r20,16(sp)
   877e4:	3825883a 	mov	r18,r7
   877e8:	3027883a 	mov	r19,r6
   877ec:	008b9dc0 	call	8b9dc <__divsi3>
   877f0:	00c00044 	movi	r3,1
   877f4:	000b883a 	mov	r5,zero
   877f8:	1880030e 	bge	r3,r2,87808 <__s2b+0x54>
   877fc:	18c7883a 	add	r3,r3,r3
   87800:	29400044 	addi	r5,r5,1
   87804:	18bffd16 	blt	r3,r2,877fc <rx_descriptor_end+0xfff8779c>
   87808:	8809883a 	mov	r4,r17
   8780c:	00875c40 	call	875c4 <_Balloc>
   87810:	d8c00717 	ldw	r3,28(sp)
   87814:	10c00515 	stw	r3,20(r2)
   87818:	00c00044 	movi	r3,1
   8781c:	10c00415 	stw	r3,16(r2)
   87820:	00c00244 	movi	r3,9
   87824:	1cc0210e 	bge	r3,r19,878ac <__s2b+0xf8>
   87828:	80eb883a 	add	r21,r16,r3
   8782c:	a829883a 	mov	r20,r21
   87830:	84e1883a 	add	r16,r16,r19
   87834:	a1c00007 	ldb	r7,0(r20)
   87838:	01800284 	movi	r6,10
   8783c:	a5000044 	addi	r20,r20,1
   87840:	100b883a 	mov	r5,r2
   87844:	39fff404 	addi	r7,r7,-48
   87848:	8809883a 	mov	r4,r17
   8784c:	00876940 	call	87694 <__multadd>
   87850:	a43ff81e 	bne	r20,r16,87834 <rx_descriptor_end+0xfff877d4>
   87854:	ace1883a 	add	r16,r21,r19
   87858:	843ffe04 	addi	r16,r16,-8
   8785c:	9c800a0e 	bge	r19,r18,87888 <__s2b+0xd4>
   87860:	94e5c83a 	sub	r18,r18,r19
   87864:	84a5883a 	add	r18,r16,r18
   87868:	81c00007 	ldb	r7,0(r16)
   8786c:	01800284 	movi	r6,10
   87870:	84000044 	addi	r16,r16,1
   87874:	100b883a 	mov	r5,r2
   87878:	39fff404 	addi	r7,r7,-48
   8787c:	8809883a 	mov	r4,r17
   87880:	00876940 	call	87694 <__multadd>
   87884:	84bff81e 	bne	r16,r18,87868 <rx_descriptor_end+0xfff87808>
   87888:	dfc00617 	ldw	ra,24(sp)
   8788c:	dd400517 	ldw	r21,20(sp)
   87890:	dd000417 	ldw	r20,16(sp)
   87894:	dcc00317 	ldw	r19,12(sp)
   87898:	dc800217 	ldw	r18,8(sp)
   8789c:	dc400117 	ldw	r17,4(sp)
   878a0:	dc000017 	ldw	r16,0(sp)
   878a4:	dec00704 	addi	sp,sp,28
   878a8:	f800283a 	ret
   878ac:	84000284 	addi	r16,r16,10
   878b0:	1827883a 	mov	r19,r3
   878b4:	003fe906 	br	8785c <rx_descriptor_end+0xfff877fc>

000878b8 <__hi0bits>:
   878b8:	20bfffec 	andhi	r2,r4,65535
   878bc:	1000141e 	bne	r2,zero,87910 <__hi0bits+0x58>
   878c0:	2008943a 	slli	r4,r4,16
   878c4:	00800404 	movi	r2,16
   878c8:	20ffc02c 	andhi	r3,r4,65280
   878cc:	1800021e 	bne	r3,zero,878d8 <__hi0bits+0x20>
   878d0:	2008923a 	slli	r4,r4,8
   878d4:	10800204 	addi	r2,r2,8
   878d8:	20fc002c 	andhi	r3,r4,61440
   878dc:	1800021e 	bne	r3,zero,878e8 <__hi0bits+0x30>
   878e0:	2008913a 	slli	r4,r4,4
   878e4:	10800104 	addi	r2,r2,4
   878e8:	20f0002c 	andhi	r3,r4,49152
   878ec:	1800031e 	bne	r3,zero,878fc <__hi0bits+0x44>
   878f0:	2109883a 	add	r4,r4,r4
   878f4:	10800084 	addi	r2,r2,2
   878f8:	2109883a 	add	r4,r4,r4
   878fc:	20000316 	blt	r4,zero,8790c <__hi0bits+0x54>
   87900:	2110002c 	andhi	r4,r4,16384
   87904:	2000041e 	bne	r4,zero,87918 <__hi0bits+0x60>
   87908:	00800804 	movi	r2,32
   8790c:	f800283a 	ret
   87910:	0005883a 	mov	r2,zero
   87914:	003fec06 	br	878c8 <rx_descriptor_end+0xfff87868>
   87918:	10800044 	addi	r2,r2,1
   8791c:	f800283a 	ret

00087920 <__lo0bits>:
   87920:	20c00017 	ldw	r3,0(r4)
   87924:	188001cc 	andi	r2,r3,7
   87928:	10000826 	beq	r2,zero,8794c <__lo0bits+0x2c>
   8792c:	1880004c 	andi	r2,r3,1
   87930:	1000211e 	bne	r2,zero,879b8 <__lo0bits+0x98>
   87934:	1880008c 	andi	r2,r3,2
   87938:	1000211e 	bne	r2,zero,879c0 <__lo0bits+0xa0>
   8793c:	1806d0ba 	srli	r3,r3,2
   87940:	00800084 	movi	r2,2
   87944:	20c00015 	stw	r3,0(r4)
   87948:	f800283a 	ret
   8794c:	18bfffcc 	andi	r2,r3,65535
   87950:	10001326 	beq	r2,zero,879a0 <__lo0bits+0x80>
   87954:	0005883a 	mov	r2,zero
   87958:	19403fcc 	andi	r5,r3,255
   8795c:	2800021e 	bne	r5,zero,87968 <__lo0bits+0x48>
   87960:	1806d23a 	srli	r3,r3,8
   87964:	10800204 	addi	r2,r2,8
   87968:	194003cc 	andi	r5,r3,15
   8796c:	2800021e 	bne	r5,zero,87978 <__lo0bits+0x58>
   87970:	1806d13a 	srli	r3,r3,4
   87974:	10800104 	addi	r2,r2,4
   87978:	194000cc 	andi	r5,r3,3
   8797c:	2800021e 	bne	r5,zero,87988 <__lo0bits+0x68>
   87980:	1806d0ba 	srli	r3,r3,2
   87984:	10800084 	addi	r2,r2,2
   87988:	1940004c 	andi	r5,r3,1
   8798c:	2800081e 	bne	r5,zero,879b0 <__lo0bits+0x90>
   87990:	1806d07a 	srli	r3,r3,1
   87994:	1800051e 	bne	r3,zero,879ac <__lo0bits+0x8c>
   87998:	00800804 	movi	r2,32
   8799c:	f800283a 	ret
   879a0:	1806d43a 	srli	r3,r3,16
   879a4:	00800404 	movi	r2,16
   879a8:	003feb06 	br	87958 <rx_descriptor_end+0xfff878f8>
   879ac:	10800044 	addi	r2,r2,1
   879b0:	20c00015 	stw	r3,0(r4)
   879b4:	f800283a 	ret
   879b8:	0005883a 	mov	r2,zero
   879bc:	f800283a 	ret
   879c0:	1806d07a 	srli	r3,r3,1
   879c4:	00800044 	movi	r2,1
   879c8:	20c00015 	stw	r3,0(r4)
   879cc:	f800283a 	ret

000879d0 <__i2b>:
   879d0:	defffd04 	addi	sp,sp,-12
   879d4:	dc000015 	stw	r16,0(sp)
   879d8:	04000044 	movi	r16,1
   879dc:	dc400115 	stw	r17,4(sp)
   879e0:	2823883a 	mov	r17,r5
   879e4:	800b883a 	mov	r5,r16
   879e8:	dfc00215 	stw	ra,8(sp)
   879ec:	00875c40 	call	875c4 <_Balloc>
   879f0:	14400515 	stw	r17,20(r2)
   879f4:	14000415 	stw	r16,16(r2)
   879f8:	dfc00217 	ldw	ra,8(sp)
   879fc:	dc400117 	ldw	r17,4(sp)
   87a00:	dc000017 	ldw	r16,0(sp)
   87a04:	dec00304 	addi	sp,sp,12
   87a08:	f800283a 	ret

00087a0c <__multiply>:
   87a0c:	defffa04 	addi	sp,sp,-24
   87a10:	dcc00315 	stw	r19,12(sp)
   87a14:	dc800215 	stw	r18,8(sp)
   87a18:	34c00417 	ldw	r19,16(r6)
   87a1c:	2c800417 	ldw	r18,16(r5)
   87a20:	dd000415 	stw	r20,16(sp)
   87a24:	dc400115 	stw	r17,4(sp)
   87a28:	dfc00515 	stw	ra,20(sp)
   87a2c:	dc000015 	stw	r16,0(sp)
   87a30:	2829883a 	mov	r20,r5
   87a34:	3023883a 	mov	r17,r6
   87a38:	94c0050e 	bge	r18,r19,87a50 <__multiply+0x44>
   87a3c:	9007883a 	mov	r3,r18
   87a40:	3029883a 	mov	r20,r6
   87a44:	9825883a 	mov	r18,r19
   87a48:	2823883a 	mov	r17,r5
   87a4c:	1827883a 	mov	r19,r3
   87a50:	a0800217 	ldw	r2,8(r20)
   87a54:	94e1883a 	add	r16,r18,r19
   87a58:	a1400117 	ldw	r5,4(r20)
   87a5c:	1400010e 	bge	r2,r16,87a64 <__multiply+0x58>
   87a60:	29400044 	addi	r5,r5,1
   87a64:	00875c40 	call	875c4 <_Balloc>
   87a68:	8415883a 	add	r10,r16,r16
   87a6c:	12c00504 	addi	r11,r2,20
   87a70:	5295883a 	add	r10,r10,r10
   87a74:	5a95883a 	add	r10,r11,r10
   87a78:	5807883a 	mov	r3,r11
   87a7c:	5a80032e 	bgeu	r11,r10,87a8c <__multiply+0x80>
   87a80:	18000015 	stw	zero,0(r3)
   87a84:	18c00104 	addi	r3,r3,4
   87a88:	1abffd36 	bltu	r3,r10,87a80 <rx_descriptor_end+0xfff87a20>
   87a8c:	9ce7883a 	add	r19,r19,r19
   87a90:	94a5883a 	add	r18,r18,r18
   87a94:	89800504 	addi	r6,r17,20
   87a98:	9ce7883a 	add	r19,r19,r19
   87a9c:	a3400504 	addi	r13,r20,20
   87aa0:	94a5883a 	add	r18,r18,r18
   87aa4:	34d9883a 	add	r12,r6,r19
   87aa8:	6c93883a 	add	r9,r13,r18
   87aac:	3300422e 	bgeu	r6,r12,87bb8 <__multiply+0x1ac>
   87ab0:	37c00017 	ldw	ra,0(r6)
   87ab4:	fbffffcc 	andi	r15,ra,65535
   87ab8:	78001b26 	beq	r15,zero,87b28 <__multiply+0x11c>
   87abc:	5811883a 	mov	r8,r11
   87ac0:	681d883a 	mov	r14,r13
   87ac4:	000f883a 	mov	r7,zero
   87ac8:	71000017 	ldw	r4,0(r14)
   87acc:	40c00017 	ldw	r3,0(r8)
   87ad0:	73800104 	addi	r14,r14,4
   87ad4:	217fffcc 	andi	r5,r4,65535
   87ad8:	2bcb383a 	mul	r5,r5,r15
   87adc:	2008d43a 	srli	r4,r4,16
   87ae0:	1c7fffcc 	andi	r17,r3,65535
   87ae4:	2c4b883a 	add	r5,r5,r17
   87ae8:	29cb883a 	add	r5,r5,r7
   87aec:	23c9383a 	mul	r4,r4,r15
   87af0:	1806d43a 	srli	r3,r3,16
   87af4:	280ed43a 	srli	r7,r5,16
   87af8:	297fffcc 	andi	r5,r5,65535
   87afc:	20c7883a 	add	r3,r4,r3
   87b00:	19c7883a 	add	r3,r3,r7
   87b04:	1808943a 	slli	r4,r3,16
   87b08:	4023883a 	mov	r17,r8
   87b0c:	180ed43a 	srli	r7,r3,16
   87b10:	214ab03a 	or	r5,r4,r5
   87b14:	41400015 	stw	r5,0(r8)
   87b18:	42000104 	addi	r8,r8,4
   87b1c:	727fea36 	bltu	r14,r9,87ac8 <rx_descriptor_end+0xfff87a68>
   87b20:	89c00115 	stw	r7,4(r17)
   87b24:	37c00017 	ldw	ra,0(r6)
   87b28:	f83ed43a 	srli	ra,ra,16
   87b2c:	f8001f26 	beq	ra,zero,87bac <__multiply+0x1a0>
   87b30:	58c00017 	ldw	r3,0(r11)
   87b34:	681d883a 	mov	r14,r13
   87b38:	581f883a 	mov	r15,r11
   87b3c:	1811883a 	mov	r8,r3
   87b40:	5825883a 	mov	r18,r11
   87b44:	000f883a 	mov	r7,zero
   87b48:	00000106 	br	87b50 <__multiply+0x144>
   87b4c:	8825883a 	mov	r18,r17
   87b50:	7140000b 	ldhu	r5,0(r14)
   87b54:	4010d43a 	srli	r8,r8,16
   87b58:	193fffcc 	andi	r4,r3,65535
   87b5c:	2fcb383a 	mul	r5,r5,ra
   87b60:	7bc00104 	addi	r15,r15,4
   87b64:	73800104 	addi	r14,r14,4
   87b68:	2a0b883a 	add	r5,r5,r8
   87b6c:	29cb883a 	add	r5,r5,r7
   87b70:	2806943a 	slli	r3,r5,16
   87b74:	94400104 	addi	r17,r18,4
   87b78:	280ad43a 	srli	r5,r5,16
   87b7c:	1908b03a 	or	r4,r3,r4
   87b80:	793fff15 	stw	r4,-4(r15)
   87b84:	70ffff17 	ldw	r3,-4(r14)
   87b88:	8a000017 	ldw	r8,0(r17)
   87b8c:	1806d43a 	srli	r3,r3,16
   87b90:	413fffcc 	andi	r4,r8,65535
   87b94:	1fc7383a 	mul	r3,r3,ra
   87b98:	1907883a 	add	r3,r3,r4
   87b9c:	1947883a 	add	r3,r3,r5
   87ba0:	180ed43a 	srli	r7,r3,16
   87ba4:	727fe936 	bltu	r14,r9,87b4c <rx_descriptor_end+0xfff87aec>
   87ba8:	90c00115 	stw	r3,4(r18)
   87bac:	31800104 	addi	r6,r6,4
   87bb0:	5ac00104 	addi	r11,r11,4
   87bb4:	333fbe36 	bltu	r6,r12,87ab0 <rx_descriptor_end+0xfff87a50>
   87bb8:	0400090e 	bge	zero,r16,87be0 <__multiply+0x1d4>
   87bbc:	50ffff17 	ldw	r3,-4(r10)
   87bc0:	52bfff04 	addi	r10,r10,-4
   87bc4:	18000326 	beq	r3,zero,87bd4 <__multiply+0x1c8>
   87bc8:	00000506 	br	87be0 <__multiply+0x1d4>
   87bcc:	50c00017 	ldw	r3,0(r10)
   87bd0:	1800031e 	bne	r3,zero,87be0 <__multiply+0x1d4>
   87bd4:	843fffc4 	addi	r16,r16,-1
   87bd8:	52bfff04 	addi	r10,r10,-4
   87bdc:	803ffb1e 	bne	r16,zero,87bcc <rx_descriptor_end+0xfff87b6c>
   87be0:	14000415 	stw	r16,16(r2)
   87be4:	dfc00517 	ldw	ra,20(sp)
   87be8:	dd000417 	ldw	r20,16(sp)
   87bec:	dcc00317 	ldw	r19,12(sp)
   87bf0:	dc800217 	ldw	r18,8(sp)
   87bf4:	dc400117 	ldw	r17,4(sp)
   87bf8:	dc000017 	ldw	r16,0(sp)
   87bfc:	dec00604 	addi	sp,sp,24
   87c00:	f800283a 	ret

00087c04 <__pow5mult>:
   87c04:	defffa04 	addi	sp,sp,-24
   87c08:	dcc00315 	stw	r19,12(sp)
   87c0c:	dc000015 	stw	r16,0(sp)
   87c10:	dfc00515 	stw	ra,20(sp)
   87c14:	dd000415 	stw	r20,16(sp)
   87c18:	dc800215 	stw	r18,8(sp)
   87c1c:	dc400115 	stw	r17,4(sp)
   87c20:	308000cc 	andi	r2,r6,3
   87c24:	3021883a 	mov	r16,r6
   87c28:	2027883a 	mov	r19,r4
   87c2c:	10002f1e 	bne	r2,zero,87cec <__pow5mult+0xe8>
   87c30:	2825883a 	mov	r18,r5
   87c34:	8021d0ba 	srai	r16,r16,2
   87c38:	80001a26 	beq	r16,zero,87ca4 <__pow5mult+0xa0>
   87c3c:	9c401217 	ldw	r17,72(r19)
   87c40:	8800061e 	bne	r17,zero,87c5c <__pow5mult+0x58>
   87c44:	00003406 	br	87d18 <__pow5mult+0x114>
   87c48:	8021d07a 	srai	r16,r16,1
   87c4c:	80001526 	beq	r16,zero,87ca4 <__pow5mult+0xa0>
   87c50:	88800017 	ldw	r2,0(r17)
   87c54:	10001c26 	beq	r2,zero,87cc8 <__pow5mult+0xc4>
   87c58:	1023883a 	mov	r17,r2
   87c5c:	8080004c 	andi	r2,r16,1
   87c60:	103ff926 	beq	r2,zero,87c48 <rx_descriptor_end+0xfff87be8>
   87c64:	880d883a 	mov	r6,r17
   87c68:	900b883a 	mov	r5,r18
   87c6c:	9809883a 	mov	r4,r19
   87c70:	0087a0c0 	call	87a0c <__multiply>
   87c74:	90001b26 	beq	r18,zero,87ce4 <__pow5mult+0xe0>
   87c78:	91000117 	ldw	r4,4(r18)
   87c7c:	98c01317 	ldw	r3,76(r19)
   87c80:	8021d07a 	srai	r16,r16,1
   87c84:	2109883a 	add	r4,r4,r4
   87c88:	2109883a 	add	r4,r4,r4
   87c8c:	1907883a 	add	r3,r3,r4
   87c90:	19000017 	ldw	r4,0(r3)
   87c94:	91000015 	stw	r4,0(r18)
   87c98:	1c800015 	stw	r18,0(r3)
   87c9c:	1025883a 	mov	r18,r2
   87ca0:	803feb1e 	bne	r16,zero,87c50 <rx_descriptor_end+0xfff87bf0>
   87ca4:	9005883a 	mov	r2,r18
   87ca8:	dfc00517 	ldw	ra,20(sp)
   87cac:	dd000417 	ldw	r20,16(sp)
   87cb0:	dcc00317 	ldw	r19,12(sp)
   87cb4:	dc800217 	ldw	r18,8(sp)
   87cb8:	dc400117 	ldw	r17,4(sp)
   87cbc:	dc000017 	ldw	r16,0(sp)
   87cc0:	dec00604 	addi	sp,sp,24
   87cc4:	f800283a 	ret
   87cc8:	880d883a 	mov	r6,r17
   87ccc:	880b883a 	mov	r5,r17
   87cd0:	9809883a 	mov	r4,r19
   87cd4:	0087a0c0 	call	87a0c <__multiply>
   87cd8:	88800015 	stw	r2,0(r17)
   87cdc:	10000015 	stw	zero,0(r2)
   87ce0:	003fdd06 	br	87c58 <rx_descriptor_end+0xfff87bf8>
   87ce4:	1025883a 	mov	r18,r2
   87ce8:	003fd706 	br	87c48 <rx_descriptor_end+0xfff87be8>
   87cec:	10bfffc4 	addi	r2,r2,-1
   87cf0:	1085883a 	add	r2,r2,r2
   87cf4:	00c00274 	movhi	r3,9
   87cf8:	18c81904 	addi	r3,r3,8292
   87cfc:	1085883a 	add	r2,r2,r2
   87d00:	1885883a 	add	r2,r3,r2
   87d04:	11800017 	ldw	r6,0(r2)
   87d08:	000f883a 	mov	r7,zero
   87d0c:	00876940 	call	87694 <__multadd>
   87d10:	1025883a 	mov	r18,r2
   87d14:	003fc706 	br	87c34 <rx_descriptor_end+0xfff87bd4>
   87d18:	05000044 	movi	r20,1
   87d1c:	a00b883a 	mov	r5,r20
   87d20:	9809883a 	mov	r4,r19
   87d24:	00875c40 	call	875c4 <_Balloc>
   87d28:	1023883a 	mov	r17,r2
   87d2c:	00809c44 	movi	r2,625
   87d30:	88800515 	stw	r2,20(r17)
   87d34:	8d000415 	stw	r20,16(r17)
   87d38:	9c401215 	stw	r17,72(r19)
   87d3c:	88000015 	stw	zero,0(r17)
   87d40:	003fc606 	br	87c5c <rx_descriptor_end+0xfff87bfc>

00087d44 <__lshift>:
   87d44:	defff904 	addi	sp,sp,-28
   87d48:	dd400515 	stw	r21,20(sp)
   87d4c:	dcc00315 	stw	r19,12(sp)
   87d50:	302bd17a 	srai	r21,r6,5
   87d54:	2cc00417 	ldw	r19,16(r5)
   87d58:	28800217 	ldw	r2,8(r5)
   87d5c:	dd000415 	stw	r20,16(sp)
   87d60:	ace7883a 	add	r19,r21,r19
   87d64:	dc800215 	stw	r18,8(sp)
   87d68:	dc400115 	stw	r17,4(sp)
   87d6c:	dc000015 	stw	r16,0(sp)
   87d70:	dfc00615 	stw	ra,24(sp)
   87d74:	9c000044 	addi	r16,r19,1
   87d78:	2823883a 	mov	r17,r5
   87d7c:	3029883a 	mov	r20,r6
   87d80:	2025883a 	mov	r18,r4
   87d84:	29400117 	ldw	r5,4(r5)
   87d88:	1400030e 	bge	r2,r16,87d98 <__lshift+0x54>
   87d8c:	1085883a 	add	r2,r2,r2
   87d90:	29400044 	addi	r5,r5,1
   87d94:	143ffd16 	blt	r2,r16,87d8c <rx_descriptor_end+0xfff87d2c>
   87d98:	9009883a 	mov	r4,r18
   87d9c:	00875c40 	call	875c4 <_Balloc>
   87da0:	10c00504 	addi	r3,r2,20
   87da4:	0540070e 	bge	zero,r21,87dc4 <__lshift+0x80>
   87da8:	ad6b883a 	add	r21,r21,r21
   87dac:	ad6b883a 	add	r21,r21,r21
   87db0:	1809883a 	mov	r4,r3
   87db4:	1d47883a 	add	r3,r3,r21
   87db8:	20000015 	stw	zero,0(r4)
   87dbc:	21000104 	addi	r4,r4,4
   87dc0:	193ffd1e 	bne	r3,r4,87db8 <rx_descriptor_end+0xfff87d58>
   87dc4:	8a000417 	ldw	r8,16(r17)
   87dc8:	89000504 	addi	r4,r17,20
   87dcc:	a18007cc 	andi	r6,r20,31
   87dd0:	4211883a 	add	r8,r8,r8
   87dd4:	4211883a 	add	r8,r8,r8
   87dd8:	2211883a 	add	r8,r4,r8
   87ddc:	30002326 	beq	r6,zero,87e6c <__lshift+0x128>
   87de0:	02400804 	movi	r9,32
   87de4:	4993c83a 	sub	r9,r9,r6
   87de8:	000b883a 	mov	r5,zero
   87dec:	21c00017 	ldw	r7,0(r4)
   87df0:	1815883a 	mov	r10,r3
   87df4:	18c00104 	addi	r3,r3,4
   87df8:	398e983a 	sll	r7,r7,r6
   87dfc:	21000104 	addi	r4,r4,4
   87e00:	394ab03a 	or	r5,r7,r5
   87e04:	197fff15 	stw	r5,-4(r3)
   87e08:	217fff17 	ldw	r5,-4(r4)
   87e0c:	2a4ad83a 	srl	r5,r5,r9
   87e10:	223ff636 	bltu	r4,r8,87dec <rx_descriptor_end+0xfff87d8c>
   87e14:	51400115 	stw	r5,4(r10)
   87e18:	28001a1e 	bne	r5,zero,87e84 <__lshift+0x140>
   87e1c:	843fffc4 	addi	r16,r16,-1
   87e20:	14000415 	stw	r16,16(r2)
   87e24:	88000826 	beq	r17,zero,87e48 <__lshift+0x104>
   87e28:	89000117 	ldw	r4,4(r17)
   87e2c:	90c01317 	ldw	r3,76(r18)
   87e30:	2109883a 	add	r4,r4,r4
   87e34:	2109883a 	add	r4,r4,r4
   87e38:	1907883a 	add	r3,r3,r4
   87e3c:	19000017 	ldw	r4,0(r3)
   87e40:	89000015 	stw	r4,0(r17)
   87e44:	1c400015 	stw	r17,0(r3)
   87e48:	dfc00617 	ldw	ra,24(sp)
   87e4c:	dd400517 	ldw	r21,20(sp)
   87e50:	dd000417 	ldw	r20,16(sp)
   87e54:	dcc00317 	ldw	r19,12(sp)
   87e58:	dc800217 	ldw	r18,8(sp)
   87e5c:	dc400117 	ldw	r17,4(sp)
   87e60:	dc000017 	ldw	r16,0(sp)
   87e64:	dec00704 	addi	sp,sp,28
   87e68:	f800283a 	ret
   87e6c:	21400017 	ldw	r5,0(r4)
   87e70:	18c00104 	addi	r3,r3,4
   87e74:	21000104 	addi	r4,r4,4
   87e78:	197fff15 	stw	r5,-4(r3)
   87e7c:	223ffb36 	bltu	r4,r8,87e6c <rx_descriptor_end+0xfff87e0c>
   87e80:	003fe606 	br	87e1c <rx_descriptor_end+0xfff87dbc>
   87e84:	9c000084 	addi	r16,r19,2
   87e88:	003fe406 	br	87e1c <rx_descriptor_end+0xfff87dbc>

00087e8c <__mcmp>:
   87e8c:	20800417 	ldw	r2,16(r4)
   87e90:	28c00417 	ldw	r3,16(r5)
   87e94:	10c5c83a 	sub	r2,r2,r3
   87e98:	1000111e 	bne	r2,zero,87ee0 <__mcmp+0x54>
   87e9c:	18c7883a 	add	r3,r3,r3
   87ea0:	18c7883a 	add	r3,r3,r3
   87ea4:	21000504 	addi	r4,r4,20
   87ea8:	29400504 	addi	r5,r5,20
   87eac:	20c5883a 	add	r2,r4,r3
   87eb0:	28cb883a 	add	r5,r5,r3
   87eb4:	00000106 	br	87ebc <__mcmp+0x30>
   87eb8:	20800a2e 	bgeu	r4,r2,87ee4 <__mcmp+0x58>
   87ebc:	10bfff04 	addi	r2,r2,-4
   87ec0:	297fff04 	addi	r5,r5,-4
   87ec4:	11800017 	ldw	r6,0(r2)
   87ec8:	28c00017 	ldw	r3,0(r5)
   87ecc:	30fffa26 	beq	r6,r3,87eb8 <rx_descriptor_end+0xfff87e58>
   87ed0:	30c00236 	bltu	r6,r3,87edc <__mcmp+0x50>
   87ed4:	00800044 	movi	r2,1
   87ed8:	f800283a 	ret
   87edc:	00bfffc4 	movi	r2,-1
   87ee0:	f800283a 	ret
   87ee4:	0005883a 	mov	r2,zero
   87ee8:	f800283a 	ret

00087eec <__mdiff>:
   87eec:	28c00417 	ldw	r3,16(r5)
   87ef0:	30800417 	ldw	r2,16(r6)
   87ef4:	defffa04 	addi	sp,sp,-24
   87ef8:	dcc00315 	stw	r19,12(sp)
   87efc:	dc800215 	stw	r18,8(sp)
   87f00:	dfc00515 	stw	ra,20(sp)
   87f04:	dd000415 	stw	r20,16(sp)
   87f08:	dc400115 	stw	r17,4(sp)
   87f0c:	dc000015 	stw	r16,0(sp)
   87f10:	1887c83a 	sub	r3,r3,r2
   87f14:	2825883a 	mov	r18,r5
   87f18:	3027883a 	mov	r19,r6
   87f1c:	1800141e 	bne	r3,zero,87f70 <__mdiff+0x84>
   87f20:	1085883a 	add	r2,r2,r2
   87f24:	1085883a 	add	r2,r2,r2
   87f28:	2a000504 	addi	r8,r5,20
   87f2c:	34000504 	addi	r16,r6,20
   87f30:	4087883a 	add	r3,r8,r2
   87f34:	8085883a 	add	r2,r16,r2
   87f38:	00000106 	br	87f40 <__mdiff+0x54>
   87f3c:	40c0592e 	bgeu	r8,r3,880a4 <__mdiff+0x1b8>
   87f40:	18ffff04 	addi	r3,r3,-4
   87f44:	10bfff04 	addi	r2,r2,-4
   87f48:	19c00017 	ldw	r7,0(r3)
   87f4c:	11400017 	ldw	r5,0(r2)
   87f50:	397ffa26 	beq	r7,r5,87f3c <rx_descriptor_end+0xfff87edc>
   87f54:	3940592e 	bgeu	r7,r5,880bc <__mdiff+0x1d0>
   87f58:	9005883a 	mov	r2,r18
   87f5c:	4023883a 	mov	r17,r8
   87f60:	9825883a 	mov	r18,r19
   87f64:	05000044 	movi	r20,1
   87f68:	1027883a 	mov	r19,r2
   87f6c:	00000406 	br	87f80 <__mdiff+0x94>
   87f70:	18005616 	blt	r3,zero,880cc <__mdiff+0x1e0>
   87f74:	34400504 	addi	r17,r6,20
   87f78:	2c000504 	addi	r16,r5,20
   87f7c:	0029883a 	mov	r20,zero
   87f80:	91400117 	ldw	r5,4(r18)
   87f84:	00875c40 	call	875c4 <_Balloc>
   87f88:	92400417 	ldw	r9,16(r18)
   87f8c:	9b000417 	ldw	r12,16(r19)
   87f90:	12c00504 	addi	r11,r2,20
   87f94:	4a51883a 	add	r8,r9,r9
   87f98:	6319883a 	add	r12,r12,r12
   87f9c:	4211883a 	add	r8,r8,r8
   87fa0:	6319883a 	add	r12,r12,r12
   87fa4:	15000315 	stw	r20,12(r2)
   87fa8:	8211883a 	add	r8,r16,r8
   87fac:	8b19883a 	add	r12,r17,r12
   87fb0:	0007883a 	mov	r3,zero
   87fb4:	81400017 	ldw	r5,0(r16)
   87fb8:	89c00017 	ldw	r7,0(r17)
   87fbc:	59800104 	addi	r6,r11,4
   87fc0:	293fffcc 	andi	r4,r5,65535
   87fc4:	20c7883a 	add	r3,r4,r3
   87fc8:	393fffcc 	andi	r4,r7,65535
   87fcc:	1909c83a 	sub	r4,r3,r4
   87fd0:	280ad43a 	srli	r5,r5,16
   87fd4:	380ed43a 	srli	r7,r7,16
   87fd8:	2007d43a 	srai	r3,r4,16
   87fdc:	213fffcc 	andi	r4,r4,65535
   87fe0:	29cbc83a 	sub	r5,r5,r7
   87fe4:	28c7883a 	add	r3,r5,r3
   87fe8:	180a943a 	slli	r5,r3,16
   87fec:	8c400104 	addi	r17,r17,4
   87ff0:	84000104 	addi	r16,r16,4
   87ff4:	2908b03a 	or	r4,r5,r4
   87ff8:	59000015 	stw	r4,0(r11)
   87ffc:	1807d43a 	srai	r3,r3,16
   88000:	3015883a 	mov	r10,r6
   88004:	3017883a 	mov	r11,r6
   88008:	8b3fea36 	bltu	r17,r12,87fb4 <rx_descriptor_end+0xfff87f54>
   8800c:	8200162e 	bgeu	r16,r8,88068 <__mdiff+0x17c>
   88010:	8017883a 	mov	r11,r16
   88014:	59400017 	ldw	r5,0(r11)
   88018:	31800104 	addi	r6,r6,4
   8801c:	5ac00104 	addi	r11,r11,4
   88020:	293fffcc 	andi	r4,r5,65535
   88024:	20c7883a 	add	r3,r4,r3
   88028:	280ed43a 	srli	r7,r5,16
   8802c:	180bd43a 	srai	r5,r3,16
   88030:	193fffcc 	andi	r4,r3,65535
   88034:	3947883a 	add	r3,r7,r5
   88038:	180a943a 	slli	r5,r3,16
   8803c:	1807d43a 	srai	r3,r3,16
   88040:	2908b03a 	or	r4,r5,r4
   88044:	313fff15 	stw	r4,-4(r6)
   88048:	5a3ff236 	bltu	r11,r8,88014 <rx_descriptor_end+0xfff87fb4>
   8804c:	0406303a 	nor	r3,zero,r16
   88050:	1a07883a 	add	r3,r3,r8
   88054:	1806d0ba 	srli	r3,r3,2
   88058:	18c00044 	addi	r3,r3,1
   8805c:	18c7883a 	add	r3,r3,r3
   88060:	18c7883a 	add	r3,r3,r3
   88064:	50d5883a 	add	r10,r10,r3
   88068:	50ffff04 	addi	r3,r10,-4
   8806c:	2000041e 	bne	r4,zero,88080 <__mdiff+0x194>
   88070:	18ffff04 	addi	r3,r3,-4
   88074:	19000017 	ldw	r4,0(r3)
   88078:	4a7fffc4 	addi	r9,r9,-1
   8807c:	203ffc26 	beq	r4,zero,88070 <rx_descriptor_end+0xfff88010>
   88080:	12400415 	stw	r9,16(r2)
   88084:	dfc00517 	ldw	ra,20(sp)
   88088:	dd000417 	ldw	r20,16(sp)
   8808c:	dcc00317 	ldw	r19,12(sp)
   88090:	dc800217 	ldw	r18,8(sp)
   88094:	dc400117 	ldw	r17,4(sp)
   88098:	dc000017 	ldw	r16,0(sp)
   8809c:	dec00604 	addi	sp,sp,24
   880a0:	f800283a 	ret
   880a4:	000b883a 	mov	r5,zero
   880a8:	00875c40 	call	875c4 <_Balloc>
   880ac:	00c00044 	movi	r3,1
   880b0:	10c00415 	stw	r3,16(r2)
   880b4:	10000515 	stw	zero,20(r2)
   880b8:	003ff206 	br	88084 <rx_descriptor_end+0xfff88024>
   880bc:	8023883a 	mov	r17,r16
   880c0:	0029883a 	mov	r20,zero
   880c4:	4021883a 	mov	r16,r8
   880c8:	003fad06 	br	87f80 <rx_descriptor_end+0xfff87f20>
   880cc:	9005883a 	mov	r2,r18
   880d0:	94400504 	addi	r17,r18,20
   880d4:	9c000504 	addi	r16,r19,20
   880d8:	9825883a 	mov	r18,r19
   880dc:	05000044 	movi	r20,1
   880e0:	1027883a 	mov	r19,r2
   880e4:	003fa606 	br	87f80 <rx_descriptor_end+0xfff87f20>

000880e8 <__ulp>:
   880e8:	295ffc2c 	andhi	r5,r5,32752
   880ec:	00bf3034 	movhi	r2,64704
   880f0:	2887883a 	add	r3,r5,r2
   880f4:	00c0020e 	bge	zero,r3,88100 <__ulp+0x18>
   880f8:	0005883a 	mov	r2,zero
   880fc:	f800283a 	ret
   88100:	00c7c83a 	sub	r3,zero,r3
   88104:	1807d53a 	srai	r3,r3,20
   88108:	008004c4 	movi	r2,19
   8810c:	10c00b0e 	bge	r2,r3,8813c <__ulp+0x54>
   88110:	18bffb04 	addi	r2,r3,-20
   88114:	01000784 	movi	r4,30
   88118:	0007883a 	mov	r3,zero
   8811c:	20800516 	blt	r4,r2,88134 <__ulp+0x4c>
   88120:	010007c4 	movi	r4,31
   88124:	2089c83a 	sub	r4,r4,r2
   88128:	00800044 	movi	r2,1
   8812c:	1104983a 	sll	r2,r2,r4
   88130:	f800283a 	ret
   88134:	00800044 	movi	r2,1
   88138:	f800283a 	ret
   8813c:	01400234 	movhi	r5,8
   88140:	28c7d83a 	sra	r3,r5,r3
   88144:	0005883a 	mov	r2,zero
   88148:	f800283a 	ret

0008814c <__b2d>:
   8814c:	defffa04 	addi	sp,sp,-24
   88150:	dc000015 	stw	r16,0(sp)
   88154:	24000417 	ldw	r16,16(r4)
   88158:	dc400115 	stw	r17,4(sp)
   8815c:	24400504 	addi	r17,r4,20
   88160:	8421883a 	add	r16,r16,r16
   88164:	8421883a 	add	r16,r16,r16
   88168:	8c21883a 	add	r16,r17,r16
   8816c:	dc800215 	stw	r18,8(sp)
   88170:	84bfff17 	ldw	r18,-4(r16)
   88174:	dd000415 	stw	r20,16(sp)
   88178:	dcc00315 	stw	r19,12(sp)
   8817c:	9009883a 	mov	r4,r18
   88180:	2829883a 	mov	r20,r5
   88184:	dfc00515 	stw	ra,20(sp)
   88188:	00878b80 	call	878b8 <__hi0bits>
   8818c:	00c00804 	movi	r3,32
   88190:	1889c83a 	sub	r4,r3,r2
   88194:	a1000015 	stw	r4,0(r20)
   88198:	01000284 	movi	r4,10
   8819c:	84ffff04 	addi	r19,r16,-4
   881a0:	20801216 	blt	r4,r2,881ec <__b2d+0xa0>
   881a4:	018002c4 	movi	r6,11
   881a8:	308dc83a 	sub	r6,r6,r2
   881ac:	9186d83a 	srl	r3,r18,r6
   881b0:	18cffc34 	orhi	r3,r3,16368
   881b4:	8cc0212e 	bgeu	r17,r19,8823c <__b2d+0xf0>
   881b8:	813ffe17 	ldw	r4,-8(r16)
   881bc:	218cd83a 	srl	r6,r4,r6
   881c0:	10800544 	addi	r2,r2,21
   881c4:	9084983a 	sll	r2,r18,r2
   881c8:	1184b03a 	or	r2,r2,r6
   881cc:	dfc00517 	ldw	ra,20(sp)
   881d0:	dd000417 	ldw	r20,16(sp)
   881d4:	dcc00317 	ldw	r19,12(sp)
   881d8:	dc800217 	ldw	r18,8(sp)
   881dc:	dc400117 	ldw	r17,4(sp)
   881e0:	dc000017 	ldw	r16,0(sp)
   881e4:	dec00604 	addi	sp,sp,24
   881e8:	f800283a 	ret
   881ec:	8cc00f2e 	bgeu	r17,r19,8822c <__b2d+0xe0>
   881f0:	117ffd44 	addi	r5,r2,-11
   881f4:	80bffe17 	ldw	r2,-8(r16)
   881f8:	28000e26 	beq	r5,zero,88234 <__b2d+0xe8>
   881fc:	1949c83a 	sub	r4,r3,r5
   88200:	9164983a 	sll	r18,r18,r5
   88204:	1106d83a 	srl	r3,r2,r4
   88208:	81bffe04 	addi	r6,r16,-8
   8820c:	948ffc34 	orhi	r18,r18,16368
   88210:	90c6b03a 	or	r3,r18,r3
   88214:	89800e2e 	bgeu	r17,r6,88250 <__b2d+0x104>
   88218:	81bffd17 	ldw	r6,-12(r16)
   8821c:	1144983a 	sll	r2,r2,r5
   88220:	310ad83a 	srl	r5,r6,r4
   88224:	2884b03a 	or	r2,r5,r2
   88228:	003fe806 	br	881cc <rx_descriptor_end+0xfff8816c>
   8822c:	10bffd44 	addi	r2,r2,-11
   88230:	1000041e 	bne	r2,zero,88244 <__b2d+0xf8>
   88234:	90cffc34 	orhi	r3,r18,16368
   88238:	003fe406 	br	881cc <rx_descriptor_end+0xfff8816c>
   8823c:	000d883a 	mov	r6,zero
   88240:	003fdf06 	br	881c0 <rx_descriptor_end+0xfff88160>
   88244:	90a4983a 	sll	r18,r18,r2
   88248:	0005883a 	mov	r2,zero
   8824c:	003ff906 	br	88234 <rx_descriptor_end+0xfff881d4>
   88250:	1144983a 	sll	r2,r2,r5
   88254:	003fdd06 	br	881cc <rx_descriptor_end+0xfff8816c>

00088258 <__d2b>:
   88258:	defff804 	addi	sp,sp,-32
   8825c:	dc000215 	stw	r16,8(sp)
   88260:	3021883a 	mov	r16,r6
   88264:	dc400315 	stw	r17,12(sp)
   88268:	8022907a 	slli	r17,r16,1
   8826c:	dd000615 	stw	r20,24(sp)
   88270:	2829883a 	mov	r20,r5
   88274:	01400044 	movi	r5,1
   88278:	dcc00515 	stw	r19,20(sp)
   8827c:	dc800415 	stw	r18,16(sp)
   88280:	dfc00715 	stw	ra,28(sp)
   88284:	3825883a 	mov	r18,r7
   88288:	8822d57a 	srli	r17,r17,21
   8828c:	00875c40 	call	875c4 <_Balloc>
   88290:	1027883a 	mov	r19,r2
   88294:	00800434 	movhi	r2,16
   88298:	10bfffc4 	addi	r2,r2,-1
   8829c:	808c703a 	and	r6,r16,r2
   882a0:	88000126 	beq	r17,zero,882a8 <__d2b+0x50>
   882a4:	31800434 	orhi	r6,r6,16
   882a8:	d9800015 	stw	r6,0(sp)
   882ac:	a0002426 	beq	r20,zero,88340 <__d2b+0xe8>
   882b0:	d9000104 	addi	r4,sp,4
   882b4:	dd000115 	stw	r20,4(sp)
   882b8:	00879200 	call	87920 <__lo0bits>
   882bc:	d8c00017 	ldw	r3,0(sp)
   882c0:	10002f1e 	bne	r2,zero,88380 <__d2b+0x128>
   882c4:	d9000117 	ldw	r4,4(sp)
   882c8:	99000515 	stw	r4,20(r19)
   882cc:	1821003a 	cmpeq	r16,r3,zero
   882d0:	01000084 	movi	r4,2
   882d4:	2421c83a 	sub	r16,r4,r16
   882d8:	98c00615 	stw	r3,24(r19)
   882dc:	9c000415 	stw	r16,16(r19)
   882e0:	88001f1e 	bne	r17,zero,88360 <__d2b+0x108>
   882e4:	10bef384 	addi	r2,r2,-1074
   882e8:	90800015 	stw	r2,0(r18)
   882ec:	00900034 	movhi	r2,16384
   882f0:	10bfffc4 	addi	r2,r2,-1
   882f4:	8085883a 	add	r2,r16,r2
   882f8:	1085883a 	add	r2,r2,r2
   882fc:	1085883a 	add	r2,r2,r2
   88300:	9885883a 	add	r2,r19,r2
   88304:	11000517 	ldw	r4,20(r2)
   88308:	8020917a 	slli	r16,r16,5
   8830c:	00878b80 	call	878b8 <__hi0bits>
   88310:	d8c00817 	ldw	r3,32(sp)
   88314:	8085c83a 	sub	r2,r16,r2
   88318:	18800015 	stw	r2,0(r3)
   8831c:	9805883a 	mov	r2,r19
   88320:	dfc00717 	ldw	ra,28(sp)
   88324:	dd000617 	ldw	r20,24(sp)
   88328:	dcc00517 	ldw	r19,20(sp)
   8832c:	dc800417 	ldw	r18,16(sp)
   88330:	dc400317 	ldw	r17,12(sp)
   88334:	dc000217 	ldw	r16,8(sp)
   88338:	dec00804 	addi	sp,sp,32
   8833c:	f800283a 	ret
   88340:	d809883a 	mov	r4,sp
   88344:	00879200 	call	87920 <__lo0bits>
   88348:	d8c00017 	ldw	r3,0(sp)
   8834c:	04000044 	movi	r16,1
   88350:	9c000415 	stw	r16,16(r19)
   88354:	98c00515 	stw	r3,20(r19)
   88358:	10800804 	addi	r2,r2,32
   8835c:	883fe126 	beq	r17,zero,882e4 <rx_descriptor_end+0xfff88284>
   88360:	00c00d44 	movi	r3,53
   88364:	8c7ef344 	addi	r17,r17,-1075
   88368:	88a3883a 	add	r17,r17,r2
   8836c:	1885c83a 	sub	r2,r3,r2
   88370:	d8c00817 	ldw	r3,32(sp)
   88374:	94400015 	stw	r17,0(r18)
   88378:	18800015 	stw	r2,0(r3)
   8837c:	003fe706 	br	8831c <rx_descriptor_end+0xfff882bc>
   88380:	01000804 	movi	r4,32
   88384:	2089c83a 	sub	r4,r4,r2
   88388:	1908983a 	sll	r4,r3,r4
   8838c:	d9400117 	ldw	r5,4(sp)
   88390:	1886d83a 	srl	r3,r3,r2
   88394:	2148b03a 	or	r4,r4,r5
   88398:	99000515 	stw	r4,20(r19)
   8839c:	d8c00015 	stw	r3,0(sp)
   883a0:	003fca06 	br	882cc <rx_descriptor_end+0xfff8826c>

000883a4 <__ratio>:
   883a4:	defff904 	addi	sp,sp,-28
   883a8:	dc400315 	stw	r17,12(sp)
   883ac:	2823883a 	mov	r17,r5
   883b0:	d9400104 	addi	r5,sp,4
   883b4:	dfc00615 	stw	ra,24(sp)
   883b8:	dcc00515 	stw	r19,20(sp)
   883bc:	dc800415 	stw	r18,16(sp)
   883c0:	2027883a 	mov	r19,r4
   883c4:	dc000215 	stw	r16,8(sp)
   883c8:	008814c0 	call	8814c <__b2d>
   883cc:	d80b883a 	mov	r5,sp
   883d0:	8809883a 	mov	r4,r17
   883d4:	1025883a 	mov	r18,r2
   883d8:	1821883a 	mov	r16,r3
   883dc:	008814c0 	call	8814c <__b2d>
   883e0:	8a000417 	ldw	r8,16(r17)
   883e4:	99000417 	ldw	r4,16(r19)
   883e8:	d9400117 	ldw	r5,4(sp)
   883ec:	2209c83a 	sub	r4,r4,r8
   883f0:	2010917a 	slli	r8,r4,5
   883f4:	d9000017 	ldw	r4,0(sp)
   883f8:	2909c83a 	sub	r4,r5,r4
   883fc:	4109883a 	add	r4,r8,r4
   88400:	01000e0e 	bge	zero,r4,8843c <__ratio+0x98>
   88404:	2008953a 	slli	r4,r4,20
   88408:	2421883a 	add	r16,r4,r16
   8840c:	100d883a 	mov	r6,r2
   88410:	180f883a 	mov	r7,r3
   88414:	9009883a 	mov	r4,r18
   88418:	800b883a 	mov	r5,r16
   8841c:	008c43c0 	call	8c43c <__divdf3>
   88420:	dfc00617 	ldw	ra,24(sp)
   88424:	dcc00517 	ldw	r19,20(sp)
   88428:	dc800417 	ldw	r18,16(sp)
   8842c:	dc400317 	ldw	r17,12(sp)
   88430:	dc000217 	ldw	r16,8(sp)
   88434:	dec00704 	addi	sp,sp,28
   88438:	f800283a 	ret
   8843c:	2008953a 	slli	r4,r4,20
   88440:	1907c83a 	sub	r3,r3,r4
   88444:	003ff106 	br	8840c <rx_descriptor_end+0xfff883ac>

00088448 <_mprec_log10>:
   88448:	defffe04 	addi	sp,sp,-8
   8844c:	dc000015 	stw	r16,0(sp)
   88450:	dfc00115 	stw	ra,4(sp)
   88454:	008005c4 	movi	r2,23
   88458:	2021883a 	mov	r16,r4
   8845c:	11000d0e 	bge	r2,r4,88494 <_mprec_log10+0x4c>
   88460:	0005883a 	mov	r2,zero
   88464:	00cffc34 	movhi	r3,16368
   88468:	843fffc4 	addi	r16,r16,-1
   8846c:	000d883a 	mov	r6,zero
   88470:	01d00934 	movhi	r7,16420
   88474:	1009883a 	mov	r4,r2
   88478:	180b883a 	mov	r5,r3
   8847c:	008cf7c0 	call	8cf7c <__muldf3>
   88480:	803ff91e 	bne	r16,zero,88468 <rx_descriptor_end+0xfff88408>
   88484:	dfc00117 	ldw	ra,4(sp)
   88488:	dc000017 	ldw	r16,0(sp)
   8848c:	dec00204 	addi	sp,sp,8
   88490:	f800283a 	ret
   88494:	202090fa 	slli	r16,r4,3
   88498:	00800274 	movhi	r2,9
   8849c:	10883004 	addi	r2,r2,8384
   884a0:	1421883a 	add	r16,r2,r16
   884a4:	80800017 	ldw	r2,0(r16)
   884a8:	80c00117 	ldw	r3,4(r16)
   884ac:	dfc00117 	ldw	ra,4(sp)
   884b0:	dc000017 	ldw	r16,0(sp)
   884b4:	dec00204 	addi	sp,sp,8
   884b8:	f800283a 	ret

000884bc <__copybits>:
   884bc:	297fffc4 	addi	r5,r5,-1
   884c0:	280fd17a 	srai	r7,r5,5
   884c4:	30c00417 	ldw	r3,16(r6)
   884c8:	30800504 	addi	r2,r6,20
   884cc:	39c00044 	addi	r7,r7,1
   884d0:	18c7883a 	add	r3,r3,r3
   884d4:	39cf883a 	add	r7,r7,r7
   884d8:	18c7883a 	add	r3,r3,r3
   884dc:	39cf883a 	add	r7,r7,r7
   884e0:	10c7883a 	add	r3,r2,r3
   884e4:	21cf883a 	add	r7,r4,r7
   884e8:	10c00d2e 	bgeu	r2,r3,88520 <__copybits+0x64>
   884ec:	200b883a 	mov	r5,r4
   884f0:	12000017 	ldw	r8,0(r2)
   884f4:	29400104 	addi	r5,r5,4
   884f8:	10800104 	addi	r2,r2,4
   884fc:	2a3fff15 	stw	r8,-4(r5)
   88500:	10fffb36 	bltu	r2,r3,884f0 <rx_descriptor_end+0xfff88490>
   88504:	1985c83a 	sub	r2,r3,r6
   88508:	10bffac4 	addi	r2,r2,-21
   8850c:	1004d0ba 	srli	r2,r2,2
   88510:	10800044 	addi	r2,r2,1
   88514:	1085883a 	add	r2,r2,r2
   88518:	1085883a 	add	r2,r2,r2
   8851c:	2089883a 	add	r4,r4,r2
   88520:	21c0032e 	bgeu	r4,r7,88530 <__copybits+0x74>
   88524:	20000015 	stw	zero,0(r4)
   88528:	21000104 	addi	r4,r4,4
   8852c:	21fffd36 	bltu	r4,r7,88524 <rx_descriptor_end+0xfff884c4>
   88530:	f800283a 	ret

00088534 <__any_on>:
   88534:	20c00417 	ldw	r3,16(r4)
   88538:	2805d17a 	srai	r2,r5,5
   8853c:	21000504 	addi	r4,r4,20
   88540:	18800d0e 	bge	r3,r2,88578 <__any_on+0x44>
   88544:	18c7883a 	add	r3,r3,r3
   88548:	18c7883a 	add	r3,r3,r3
   8854c:	20c7883a 	add	r3,r4,r3
   88550:	20c0192e 	bgeu	r4,r3,885b8 <__any_on+0x84>
   88554:	18bfff17 	ldw	r2,-4(r3)
   88558:	18ffff04 	addi	r3,r3,-4
   8855c:	1000041e 	bne	r2,zero,88570 <__any_on+0x3c>
   88560:	20c0142e 	bgeu	r4,r3,885b4 <__any_on+0x80>
   88564:	18ffff04 	addi	r3,r3,-4
   88568:	19400017 	ldw	r5,0(r3)
   8856c:	283ffc26 	beq	r5,zero,88560 <rx_descriptor_end+0xfff88500>
   88570:	00800044 	movi	r2,1
   88574:	f800283a 	ret
   88578:	10c00a0e 	bge	r2,r3,885a4 <__any_on+0x70>
   8857c:	1085883a 	add	r2,r2,r2
   88580:	1085883a 	add	r2,r2,r2
   88584:	294007cc 	andi	r5,r5,31
   88588:	2087883a 	add	r3,r4,r2
   8858c:	283ff026 	beq	r5,zero,88550 <rx_descriptor_end+0xfff884f0>
   88590:	19800017 	ldw	r6,0(r3)
   88594:	3144d83a 	srl	r2,r6,r5
   88598:	114a983a 	sll	r5,r2,r5
   8859c:	317ff41e 	bne	r6,r5,88570 <rx_descriptor_end+0xfff88510>
   885a0:	003feb06 	br	88550 <rx_descriptor_end+0xfff884f0>
   885a4:	1085883a 	add	r2,r2,r2
   885a8:	1085883a 	add	r2,r2,r2
   885ac:	2087883a 	add	r3,r4,r2
   885b0:	003fe706 	br	88550 <rx_descriptor_end+0xfff884f0>
   885b4:	f800283a 	ret
   885b8:	0005883a 	mov	r2,zero
   885bc:	f800283a 	ret

000885c0 <_read_r>:
   885c0:	defffd04 	addi	sp,sp,-12
   885c4:	2805883a 	mov	r2,r5
   885c8:	dc000015 	stw	r16,0(sp)
   885cc:	04000274 	movhi	r16,9
   885d0:	dc400115 	stw	r17,4(sp)
   885d4:	300b883a 	mov	r5,r6
   885d8:	84187a04 	addi	r16,r16,25064
   885dc:	2023883a 	mov	r17,r4
   885e0:	380d883a 	mov	r6,r7
   885e4:	1009883a 	mov	r4,r2
   885e8:	dfc00215 	stw	ra,8(sp)
   885ec:	80000015 	stw	zero,0(r16)
   885f0:	008eaa80 	call	8eaa8 <read>
   885f4:	00ffffc4 	movi	r3,-1
   885f8:	10c00526 	beq	r2,r3,88610 <_read_r+0x50>
   885fc:	dfc00217 	ldw	ra,8(sp)
   88600:	dc400117 	ldw	r17,4(sp)
   88604:	dc000017 	ldw	r16,0(sp)
   88608:	dec00304 	addi	sp,sp,12
   8860c:	f800283a 	ret
   88610:	80c00017 	ldw	r3,0(r16)
   88614:	183ff926 	beq	r3,zero,885fc <rx_descriptor_end+0xfff8859c>
   88618:	88c00015 	stw	r3,0(r17)
   8861c:	003ff706 	br	885fc <rx_descriptor_end+0xfff8859c>

00088620 <__fpclassifyd>:
   88620:	00a00034 	movhi	r2,32768
   88624:	10bfffc4 	addi	r2,r2,-1
   88628:	2884703a 	and	r2,r5,r2
   8862c:	10000726 	beq	r2,zero,8864c <__fpclassifyd+0x2c>
   88630:	00fffc34 	movhi	r3,65520
   88634:	019ff834 	movhi	r6,32736
   88638:	28c7883a 	add	r3,r5,r3
   8863c:	31bfffc4 	addi	r6,r6,-1
   88640:	30c00536 	bltu	r6,r3,88658 <__fpclassifyd+0x38>
   88644:	00800104 	movi	r2,4
   88648:	f800283a 	ret
   8864c:	2000021e 	bne	r4,zero,88658 <__fpclassifyd+0x38>
   88650:	00800084 	movi	r2,2
   88654:	f800283a 	ret
   88658:	00dffc34 	movhi	r3,32752
   8865c:	019ff834 	movhi	r6,32736
   88660:	28cb883a 	add	r5,r5,r3
   88664:	31bfffc4 	addi	r6,r6,-1
   88668:	317ff62e 	bgeu	r6,r5,88644 <rx_descriptor_end+0xfff885e4>
   8866c:	01400434 	movhi	r5,16
   88670:	297fffc4 	addi	r5,r5,-1
   88674:	28800236 	bltu	r5,r2,88680 <__fpclassifyd+0x60>
   88678:	008000c4 	movi	r2,3
   8867c:	f800283a 	ret
   88680:	10c00226 	beq	r2,r3,8868c <__fpclassifyd+0x6c>
   88684:	0005883a 	mov	r2,zero
   88688:	f800283a 	ret
   8868c:	2005003a 	cmpeq	r2,r4,zero
   88690:	f800283a 	ret

00088694 <strcmp>:
   88694:	2144b03a 	or	r2,r4,r5
   88698:	108000cc 	andi	r2,r2,3
   8869c:	1000171e 	bne	r2,zero,886fc <strcmp+0x68>
   886a0:	20800017 	ldw	r2,0(r4)
   886a4:	28c00017 	ldw	r3,0(r5)
   886a8:	10c0141e 	bne	r2,r3,886fc <strcmp+0x68>
   886ac:	027fbff4 	movhi	r9,65279
   886b0:	4a7fbfc4 	addi	r9,r9,-257
   886b4:	0086303a 	nor	r3,zero,r2
   886b8:	02202074 	movhi	r8,32897
   886bc:	1245883a 	add	r2,r2,r9
   886c0:	42202004 	addi	r8,r8,-32640
   886c4:	10c4703a 	and	r2,r2,r3
   886c8:	1204703a 	and	r2,r2,r8
   886cc:	10000226 	beq	r2,zero,886d8 <strcmp+0x44>
   886d0:	00002306 	br	88760 <strcmp+0xcc>
   886d4:	1000221e 	bne	r2,zero,88760 <strcmp+0xcc>
   886d8:	21000104 	addi	r4,r4,4
   886dc:	20c00017 	ldw	r3,0(r4)
   886e0:	29400104 	addi	r5,r5,4
   886e4:	29800017 	ldw	r6,0(r5)
   886e8:	1a4f883a 	add	r7,r3,r9
   886ec:	00c4303a 	nor	r2,zero,r3
   886f0:	3884703a 	and	r2,r7,r2
   886f4:	1204703a 	and	r2,r2,r8
   886f8:	19bff626 	beq	r3,r6,886d4 <rx_descriptor_end+0xfff88674>
   886fc:	20800003 	ldbu	r2,0(r4)
   88700:	10c03fcc 	andi	r3,r2,255
   88704:	18c0201c 	xori	r3,r3,128
   88708:	18ffe004 	addi	r3,r3,-128
   8870c:	18000c26 	beq	r3,zero,88740 <strcmp+0xac>
   88710:	29800007 	ldb	r6,0(r5)
   88714:	19800326 	beq	r3,r6,88724 <strcmp+0x90>
   88718:	00001306 	br	88768 <strcmp+0xd4>
   8871c:	29800007 	ldb	r6,0(r5)
   88720:	11800b1e 	bne	r2,r6,88750 <strcmp+0xbc>
   88724:	21000044 	addi	r4,r4,1
   88728:	20c00003 	ldbu	r3,0(r4)
   8872c:	29400044 	addi	r5,r5,1
   88730:	18803fcc 	andi	r2,r3,255
   88734:	1080201c 	xori	r2,r2,128
   88738:	10bfe004 	addi	r2,r2,-128
   8873c:	103ff71e 	bne	r2,zero,8871c <rx_descriptor_end+0xfff886bc>
   88740:	0007883a 	mov	r3,zero
   88744:	28800003 	ldbu	r2,0(r5)
   88748:	1885c83a 	sub	r2,r3,r2
   8874c:	f800283a 	ret
   88750:	28800003 	ldbu	r2,0(r5)
   88754:	18c03fcc 	andi	r3,r3,255
   88758:	1885c83a 	sub	r2,r3,r2
   8875c:	f800283a 	ret
   88760:	0005883a 	mov	r2,zero
   88764:	f800283a 	ret
   88768:	10c03fcc 	andi	r3,r2,255
   8876c:	003ff506 	br	88744 <rx_descriptor_end+0xfff886e4>

00088770 <strlen>:
   88770:	208000cc 	andi	r2,r4,3
   88774:	10002026 	beq	r2,zero,887f8 <strlen+0x88>
   88778:	20800007 	ldb	r2,0(r4)
   8877c:	10002026 	beq	r2,zero,88800 <strlen+0x90>
   88780:	2005883a 	mov	r2,r4
   88784:	00000206 	br	88790 <strlen+0x20>
   88788:	10c00007 	ldb	r3,0(r2)
   8878c:	18001826 	beq	r3,zero,887f0 <strlen+0x80>
   88790:	10800044 	addi	r2,r2,1
   88794:	10c000cc 	andi	r3,r2,3
   88798:	183ffb1e 	bne	r3,zero,88788 <rx_descriptor_end+0xfff88728>
   8879c:	10c00017 	ldw	r3,0(r2)
   887a0:	01ffbff4 	movhi	r7,65279
   887a4:	39ffbfc4 	addi	r7,r7,-257
   887a8:	00ca303a 	nor	r5,zero,r3
   887ac:	01a02074 	movhi	r6,32897
   887b0:	19c7883a 	add	r3,r3,r7
   887b4:	31a02004 	addi	r6,r6,-32640
   887b8:	1946703a 	and	r3,r3,r5
   887bc:	1986703a 	and	r3,r3,r6
   887c0:	1800091e 	bne	r3,zero,887e8 <strlen+0x78>
   887c4:	10800104 	addi	r2,r2,4
   887c8:	10c00017 	ldw	r3,0(r2)
   887cc:	19cb883a 	add	r5,r3,r7
   887d0:	00c6303a 	nor	r3,zero,r3
   887d4:	28c6703a 	and	r3,r5,r3
   887d8:	1986703a 	and	r3,r3,r6
   887dc:	183ff926 	beq	r3,zero,887c4 <rx_descriptor_end+0xfff88764>
   887e0:	00000106 	br	887e8 <strlen+0x78>
   887e4:	10800044 	addi	r2,r2,1
   887e8:	10c00007 	ldb	r3,0(r2)
   887ec:	183ffd1e 	bne	r3,zero,887e4 <rx_descriptor_end+0xfff88784>
   887f0:	1105c83a 	sub	r2,r2,r4
   887f4:	f800283a 	ret
   887f8:	2005883a 	mov	r2,r4
   887fc:	003fe706 	br	8879c <rx_descriptor_end+0xfff8873c>
   88800:	0005883a 	mov	r2,zero
   88804:	f800283a 	ret

00088808 <__sprint_r.part.0>:
   88808:	28801917 	ldw	r2,100(r5)
   8880c:	defff604 	addi	sp,sp,-40
   88810:	dd400515 	stw	r21,20(sp)
   88814:	dfc00915 	stw	ra,36(sp)
   88818:	df000815 	stw	fp,32(sp)
   8881c:	ddc00715 	stw	r23,28(sp)
   88820:	dd800615 	stw	r22,24(sp)
   88824:	dd000415 	stw	r20,16(sp)
   88828:	dcc00315 	stw	r19,12(sp)
   8882c:	dc800215 	stw	r18,8(sp)
   88830:	dc400115 	stw	r17,4(sp)
   88834:	dc000015 	stw	r16,0(sp)
   88838:	1088000c 	andi	r2,r2,8192
   8883c:	302b883a 	mov	r21,r6
   88840:	10002e26 	beq	r2,zero,888fc <__sprint_r.part.0+0xf4>
   88844:	30800217 	ldw	r2,8(r6)
   88848:	35800017 	ldw	r22,0(r6)
   8884c:	10002926 	beq	r2,zero,888f4 <__sprint_r.part.0+0xec>
   88850:	2827883a 	mov	r19,r5
   88854:	2029883a 	mov	r20,r4
   88858:	b5c00104 	addi	r23,r22,4
   8885c:	04bfffc4 	movi	r18,-1
   88860:	bc400017 	ldw	r17,0(r23)
   88864:	b4000017 	ldw	r16,0(r22)
   88868:	0039883a 	mov	fp,zero
   8886c:	8822d0ba 	srli	r17,r17,2
   88870:	8800031e 	bne	r17,zero,88880 <__sprint_r.part.0+0x78>
   88874:	00001806 	br	888d8 <__sprint_r.part.0+0xd0>
   88878:	84000104 	addi	r16,r16,4
   8887c:	8f001526 	beq	r17,fp,888d4 <__sprint_r.part.0+0xcc>
   88880:	81400017 	ldw	r5,0(r16)
   88884:	980d883a 	mov	r6,r19
   88888:	a009883a 	mov	r4,r20
   8888c:	008a0780 	call	8a078 <_fputwc_r>
   88890:	e7000044 	addi	fp,fp,1
   88894:	14bff81e 	bne	r2,r18,88878 <rx_descriptor_end+0xfff88818>
   88898:	9005883a 	mov	r2,r18
   8889c:	a8000215 	stw	zero,8(r21)
   888a0:	a8000115 	stw	zero,4(r21)
   888a4:	dfc00917 	ldw	ra,36(sp)
   888a8:	df000817 	ldw	fp,32(sp)
   888ac:	ddc00717 	ldw	r23,28(sp)
   888b0:	dd800617 	ldw	r22,24(sp)
   888b4:	dd400517 	ldw	r21,20(sp)
   888b8:	dd000417 	ldw	r20,16(sp)
   888bc:	dcc00317 	ldw	r19,12(sp)
   888c0:	dc800217 	ldw	r18,8(sp)
   888c4:	dc400117 	ldw	r17,4(sp)
   888c8:	dc000017 	ldw	r16,0(sp)
   888cc:	dec00a04 	addi	sp,sp,40
   888d0:	f800283a 	ret
   888d4:	a8800217 	ldw	r2,8(r21)
   888d8:	8c63883a 	add	r17,r17,r17
   888dc:	8c63883a 	add	r17,r17,r17
   888e0:	1445c83a 	sub	r2,r2,r17
   888e4:	a8800215 	stw	r2,8(r21)
   888e8:	b5800204 	addi	r22,r22,8
   888ec:	bdc00204 	addi	r23,r23,8
   888f0:	103fdb1e 	bne	r2,zero,88860 <rx_descriptor_end+0xfff88800>
   888f4:	0005883a 	mov	r2,zero
   888f8:	003fe806 	br	8889c <rx_descriptor_end+0xfff8883c>
   888fc:	008a1780 	call	8a178 <__sfvwrite_r>
   88900:	003fe606 	br	8889c <rx_descriptor_end+0xfff8883c>

00088904 <__sprint_r>:
   88904:	30c00217 	ldw	r3,8(r6)
   88908:	18000126 	beq	r3,zero,88910 <__sprint_r+0xc>
   8890c:	00888081 	jmpi	88808 <__sprint_r.part.0>
   88910:	30000115 	stw	zero,4(r6)
   88914:	0005883a 	mov	r2,zero
   88918:	f800283a 	ret

0008891c <___vfiprintf_internal_r>:
   8891c:	deffc904 	addi	sp,sp,-220
   88920:	df003515 	stw	fp,212(sp)
   88924:	dd003115 	stw	r20,196(sp)
   88928:	dfc03615 	stw	ra,216(sp)
   8892c:	ddc03415 	stw	r23,208(sp)
   88930:	dd803315 	stw	r22,204(sp)
   88934:	dd403215 	stw	r21,200(sp)
   88938:	dcc03015 	stw	r19,192(sp)
   8893c:	dc802f15 	stw	r18,188(sp)
   88940:	dc402e15 	stw	r17,184(sp)
   88944:	dc002d15 	stw	r16,180(sp)
   88948:	d9002015 	stw	r4,128(sp)
   8894c:	d9c02215 	stw	r7,136(sp)
   88950:	2829883a 	mov	r20,r5
   88954:	3039883a 	mov	fp,r6
   88958:	20000226 	beq	r4,zero,88964 <___vfiprintf_internal_r+0x48>
   8895c:	20800e17 	ldw	r2,56(r4)
   88960:	1000cf26 	beq	r2,zero,88ca0 <___vfiprintf_internal_r+0x384>
   88964:	a080030b 	ldhu	r2,12(r20)
   88968:	10c8000c 	andi	r3,r2,8192
   8896c:	1800061e 	bne	r3,zero,88988 <___vfiprintf_internal_r+0x6c>
   88970:	a1001917 	ldw	r4,100(r20)
   88974:	00f7ffc4 	movi	r3,-8193
   88978:	10880014 	ori	r2,r2,8192
   8897c:	20c6703a 	and	r3,r4,r3
   88980:	a080030d 	sth	r2,12(r20)
   88984:	a0c01915 	stw	r3,100(r20)
   88988:	10c0020c 	andi	r3,r2,8
   8898c:	1800a926 	beq	r3,zero,88c34 <___vfiprintf_internal_r+0x318>
   88990:	a0c00417 	ldw	r3,16(r20)
   88994:	1800a726 	beq	r3,zero,88c34 <___vfiprintf_internal_r+0x318>
   88998:	1080068c 	andi	r2,r2,26
   8899c:	00c00284 	movi	r3,10
   889a0:	10c0ac26 	beq	r2,r3,88c54 <___vfiprintf_internal_r+0x338>
   889a4:	da801a04 	addi	r10,sp,104
   889a8:	da801e15 	stw	r10,120(sp)
   889ac:	d8801e17 	ldw	r2,120(sp)
   889b0:	da8019c4 	addi	r10,sp,103
   889b4:	05800274 	movhi	r22,9
   889b8:	05c00274 	movhi	r23,9
   889bc:	da801f15 	stw	r10,124(sp)
   889c0:	1295c83a 	sub	r10,r2,r10
   889c4:	b5886604 	addi	r22,r22,8600
   889c8:	bdc86204 	addi	r23,r23,8584
   889cc:	dec01a15 	stw	sp,104(sp)
   889d0:	d8001c15 	stw	zero,112(sp)
   889d4:	d8001b15 	stw	zero,108(sp)
   889d8:	d8002615 	stw	zero,152(sp)
   889dc:	d8002315 	stw	zero,140(sp)
   889e0:	da802715 	stw	r10,156(sp)
   889e4:	d811883a 	mov	r8,sp
   889e8:	dd002115 	stw	r20,132(sp)
   889ec:	e021883a 	mov	r16,fp
   889f0:	80800007 	ldb	r2,0(r16)
   889f4:	1003ea26 	beq	r2,zero,899a0 <___vfiprintf_internal_r+0x1084>
   889f8:	00c00944 	movi	r3,37
   889fc:	8025883a 	mov	r18,r16
   88a00:	10c0021e 	bne	r2,r3,88a0c <___vfiprintf_internal_r+0xf0>
   88a04:	00001606 	br	88a60 <___vfiprintf_internal_r+0x144>
   88a08:	10c00326 	beq	r2,r3,88a18 <___vfiprintf_internal_r+0xfc>
   88a0c:	94800044 	addi	r18,r18,1
   88a10:	90800007 	ldb	r2,0(r18)
   88a14:	103ffc1e 	bne	r2,zero,88a08 <rx_descriptor_end+0xfff889a8>
   88a18:	9423c83a 	sub	r17,r18,r16
   88a1c:	88001026 	beq	r17,zero,88a60 <___vfiprintf_internal_r+0x144>
   88a20:	d8c01c17 	ldw	r3,112(sp)
   88a24:	d8801b17 	ldw	r2,108(sp)
   88a28:	44000015 	stw	r16,0(r8)
   88a2c:	88c7883a 	add	r3,r17,r3
   88a30:	10800044 	addi	r2,r2,1
   88a34:	44400115 	stw	r17,4(r8)
   88a38:	d8c01c15 	stw	r3,112(sp)
   88a3c:	d8801b15 	stw	r2,108(sp)
   88a40:	010001c4 	movi	r4,7
   88a44:	2080760e 	bge	r4,r2,88c20 <___vfiprintf_internal_r+0x304>
   88a48:	1803821e 	bne	r3,zero,89854 <___vfiprintf_internal_r+0xf38>
   88a4c:	da802317 	ldw	r10,140(sp)
   88a50:	d8001b15 	stw	zero,108(sp)
   88a54:	d811883a 	mov	r8,sp
   88a58:	5455883a 	add	r10,r10,r17
   88a5c:	da802315 	stw	r10,140(sp)
   88a60:	90800007 	ldb	r2,0(r18)
   88a64:	10044626 	beq	r2,zero,89b80 <___vfiprintf_internal_r+0x1264>
   88a68:	90c00047 	ldb	r3,1(r18)
   88a6c:	94000044 	addi	r16,r18,1
   88a70:	d8001d85 	stb	zero,118(sp)
   88a74:	0009883a 	mov	r4,zero
   88a78:	000f883a 	mov	r7,zero
   88a7c:	027fffc4 	movi	r9,-1
   88a80:	0023883a 	mov	r17,zero
   88a84:	0029883a 	mov	r20,zero
   88a88:	01401604 	movi	r5,88
   88a8c:	01800244 	movi	r6,9
   88a90:	03400a84 	movi	r13,42
   88a94:	03001b04 	movi	r12,108
   88a98:	84000044 	addi	r16,r16,1
   88a9c:	18bff804 	addi	r2,r3,-32
   88aa0:	28827336 	bltu	r5,r2,89470 <___vfiprintf_internal_r+0xb54>
   88aa4:	100490ba 	slli	r2,r2,2
   88aa8:	02800274 	movhi	r10,9
   88aac:	52a2af04 	addi	r10,r10,-30020
   88ab0:	1285883a 	add	r2,r2,r10
   88ab4:	10800017 	ldw	r2,0(r2)
   88ab8:	1000683a 	jmp	r2
   88abc:	000891a4 	muli	zero,zero,8774
   88ac0:	00089470 	cmpltui	zero,zero,8785
   88ac4:	00089470 	cmpltui	zero,zero,8785
   88ac8:	000891c4 	movi	zero,8775
   88acc:	00089470 	cmpltui	zero,zero,8785
   88ad0:	00089470 	cmpltui	zero,zero,8785
   88ad4:	00089470 	cmpltui	zero,zero,8785
   88ad8:	00089470 	cmpltui	zero,zero,8785
   88adc:	00089470 	cmpltui	zero,zero,8785
   88ae0:	00089470 	cmpltui	zero,zero,8785
   88ae4:	000893ac 	andhi	zero,zero,8782
   88ae8:	000893c8 	cmpgei	zero,zero,8783
   88aec:	00089470 	cmpltui	zero,zero,8785
   88af0:	00088cb0 	cmpltui	zero,zero,8754
   88af4:	000893d8 	cmpnei	zero,zero,8783
   88af8:	00089470 	cmpltui	zero,zero,8785
   88afc:	000891d0 	cmplti	zero,zero,8775
   88b00:	000891dc 	xori	zero,zero,8775
   88b04:	000891dc 	xori	zero,zero,8775
   88b08:	000891dc 	xori	zero,zero,8775
   88b0c:	000891dc 	xori	zero,zero,8775
   88b10:	000891dc 	xori	zero,zero,8775
   88b14:	000891dc 	xori	zero,zero,8775
   88b18:	000891dc 	xori	zero,zero,8775
   88b1c:	000891dc 	xori	zero,zero,8775
   88b20:	000891dc 	xori	zero,zero,8775
   88b24:	00089470 	cmpltui	zero,zero,8785
   88b28:	00089470 	cmpltui	zero,zero,8785
   88b2c:	00089470 	cmpltui	zero,zero,8785
   88b30:	00089470 	cmpltui	zero,zero,8785
   88b34:	00089470 	cmpltui	zero,zero,8785
   88b38:	00089470 	cmpltui	zero,zero,8785
   88b3c:	00089470 	cmpltui	zero,zero,8785
   88b40:	00089470 	cmpltui	zero,zero,8785
   88b44:	00089470 	cmpltui	zero,zero,8785
   88b48:	00089470 	cmpltui	zero,zero,8785
   88b4c:	00089208 	cmpgei	zero,zero,8776
   88b50:	00089470 	cmpltui	zero,zero,8785
   88b54:	00089470 	cmpltui	zero,zero,8785
   88b58:	00089470 	cmpltui	zero,zero,8785
   88b5c:	00089470 	cmpltui	zero,zero,8785
   88b60:	00089470 	cmpltui	zero,zero,8785
   88b64:	00089470 	cmpltui	zero,zero,8785
   88b68:	00089470 	cmpltui	zero,zero,8785
   88b6c:	00089470 	cmpltui	zero,zero,8785
   88b70:	00089470 	cmpltui	zero,zero,8785
   88b74:	00089470 	cmpltui	zero,zero,8785
   88b78:	00089240 	call	8924 <__reset-0x776dc>
   88b7c:	00089470 	cmpltui	zero,zero,8785
   88b80:	00089470 	cmpltui	zero,zero,8785
   88b84:	00089470 	cmpltui	zero,zero,8785
   88b88:	00089470 	cmpltui	zero,zero,8785
   88b8c:	00089470 	cmpltui	zero,zero,8785
   88b90:	00089298 	cmpnei	zero,zero,8778
   88b94:	00089470 	cmpltui	zero,zero,8785
   88b98:	00089470 	cmpltui	zero,zero,8785
   88b9c:	00089308 	cmpgei	zero,zero,8780
   88ba0:	00089470 	cmpltui	zero,zero,8785
   88ba4:	00089470 	cmpltui	zero,zero,8785
   88ba8:	00089470 	cmpltui	zero,zero,8785
   88bac:	00089470 	cmpltui	zero,zero,8785
   88bb0:	00089470 	cmpltui	zero,zero,8785
   88bb4:	00089470 	cmpltui	zero,zero,8785
   88bb8:	00089470 	cmpltui	zero,zero,8785
   88bbc:	00089470 	cmpltui	zero,zero,8785
   88bc0:	00089470 	cmpltui	zero,zero,8785
   88bc4:	00089470 	cmpltui	zero,zero,8785
   88bc8:	000890b4 	movhi	zero,8770
   88bcc:	000890e0 	cmpeqi	zero,zero,8771
   88bd0:	00089470 	cmpltui	zero,zero,8785
   88bd4:	00089470 	cmpltui	zero,zero,8785
   88bd8:	00089470 	cmpltui	zero,zero,8785
   88bdc:	00089418 	cmpnei	zero,zero,8784
   88be0:	000890e0 	cmpeqi	zero,zero,8771
   88be4:	00089470 	cmpltui	zero,zero,8785
   88be8:	00089470 	cmpltui	zero,zero,8785
   88bec:	00088f74 	movhi	zero,8765
   88bf0:	00089470 	cmpltui	zero,zero,8785
   88bf4:	00088f84 	movi	zero,8766
   88bf8:	00088fc0 	call	88fc <__reset-0x77704>
   88bfc:	00088cbc 	xorhi	zero,zero,8754
   88c00:	00088f68 	cmpgeui	zero,zero,8765
   88c04:	00089470 	cmpltui	zero,zero,8785
   88c08:	00089344 	movi	zero,8781
   88c0c:	00089470 	cmpltui	zero,zero,8785
   88c10:	0008939c 	xori	zero,zero,8782
   88c14:	00089470 	cmpltui	zero,zero,8785
   88c18:	00089470 	cmpltui	zero,zero,8785
   88c1c:	00089060 	cmpeqi	zero,zero,8769
   88c20:	42000204 	addi	r8,r8,8
   88c24:	da802317 	ldw	r10,140(sp)
   88c28:	5455883a 	add	r10,r10,r17
   88c2c:	da802315 	stw	r10,140(sp)
   88c30:	003f8b06 	br	88a60 <rx_descriptor_end+0xfff88a00>
   88c34:	d9002017 	ldw	r4,128(sp)
   88c38:	a00b883a 	mov	r5,r20
   88c3c:	008556c0 	call	8556c <__swsetup_r>
   88c40:	1003b11e 	bne	r2,zero,89b08 <___vfiprintf_internal_r+0x11ec>
   88c44:	a080030b 	ldhu	r2,12(r20)
   88c48:	00c00284 	movi	r3,10
   88c4c:	1080068c 	andi	r2,r2,26
   88c50:	10ff541e 	bne	r2,r3,889a4 <rx_descriptor_end+0xfff88944>
   88c54:	a080038f 	ldh	r2,14(r20)
   88c58:	103f5216 	blt	r2,zero,889a4 <rx_descriptor_end+0xfff88944>
   88c5c:	d9c02217 	ldw	r7,136(sp)
   88c60:	d9002017 	ldw	r4,128(sp)
   88c64:	e00d883a 	mov	r6,fp
   88c68:	a00b883a 	mov	r5,r20
   88c6c:	0089d940 	call	89d94 <__sbprintf>
   88c70:	dfc03617 	ldw	ra,216(sp)
   88c74:	df003517 	ldw	fp,212(sp)
   88c78:	ddc03417 	ldw	r23,208(sp)
   88c7c:	dd803317 	ldw	r22,204(sp)
   88c80:	dd403217 	ldw	r21,200(sp)
   88c84:	dd003117 	ldw	r20,196(sp)
   88c88:	dcc03017 	ldw	r19,192(sp)
   88c8c:	dc802f17 	ldw	r18,188(sp)
   88c90:	dc402e17 	ldw	r17,184(sp)
   88c94:	dc002d17 	ldw	r16,180(sp)
   88c98:	dec03704 	addi	sp,sp,220
   88c9c:	f800283a 	ret
   88ca0:	0081f7c0 	call	81f7c <__sinit>
   88ca4:	003f2f06 	br	88964 <rx_descriptor_end+0xfff88904>
   88ca8:	0463c83a 	sub	r17,zero,r17
   88cac:	d8802215 	stw	r2,136(sp)
   88cb0:	a5000114 	ori	r20,r20,4
   88cb4:	80c00007 	ldb	r3,0(r16)
   88cb8:	003f7706 	br	88a98 <rx_descriptor_end+0xfff88a38>
   88cbc:	00800c04 	movi	r2,48
   88cc0:	da802217 	ldw	r10,136(sp)
   88cc4:	d8801d05 	stb	r2,116(sp)
   88cc8:	00801e04 	movi	r2,120
   88ccc:	d8801d45 	stb	r2,117(sp)
   88cd0:	d8001d85 	stb	zero,118(sp)
   88cd4:	50c00104 	addi	r3,r10,4
   88cd8:	54800017 	ldw	r18,0(r10)
   88cdc:	0027883a 	mov	r19,zero
   88ce0:	a0800094 	ori	r2,r20,2
   88ce4:	48030b16 	blt	r9,zero,89914 <___vfiprintf_internal_r+0xff8>
   88ce8:	00bfdfc4 	movi	r2,-129
   88cec:	a096703a 	and	r11,r20,r2
   88cf0:	d8c02215 	stw	r3,136(sp)
   88cf4:	5d000094 	ori	r20,r11,2
   88cf8:	90032b1e 	bne	r18,zero,899a8 <___vfiprintf_internal_r+0x108c>
   88cfc:	00800274 	movhi	r2,9
   88d00:	10880204 	addi	r2,r2,8200
   88d04:	d8802615 	stw	r2,152(sp)
   88d08:	0039883a 	mov	fp,zero
   88d0c:	48017b1e 	bne	r9,zero,892fc <___vfiprintf_internal_r+0x9e0>
   88d10:	0013883a 	mov	r9,zero
   88d14:	0027883a 	mov	r19,zero
   88d18:	dd401a04 	addi	r21,sp,104
   88d1c:	4825883a 	mov	r18,r9
   88d20:	4cc0010e 	bge	r9,r19,88d28 <___vfiprintf_internal_r+0x40c>
   88d24:	9825883a 	mov	r18,r19
   88d28:	e7003fcc 	andi	fp,fp,255
   88d2c:	e700201c 	xori	fp,fp,128
   88d30:	e73fe004 	addi	fp,fp,-128
   88d34:	e0000126 	beq	fp,zero,88d3c <___vfiprintf_internal_r+0x420>
   88d38:	94800044 	addi	r18,r18,1
   88d3c:	a380008c 	andi	r14,r20,2
   88d40:	70000126 	beq	r14,zero,88d48 <___vfiprintf_internal_r+0x42c>
   88d44:	94800084 	addi	r18,r18,2
   88d48:	a700210c 	andi	fp,r20,132
   88d4c:	e001df1e 	bne	fp,zero,894cc <___vfiprintf_internal_r+0xbb0>
   88d50:	8c87c83a 	sub	r3,r17,r18
   88d54:	00c1dd0e 	bge	zero,r3,894cc <___vfiprintf_internal_r+0xbb0>
   88d58:	01c00404 	movi	r7,16
   88d5c:	d8801c17 	ldw	r2,112(sp)
   88d60:	38c3ad0e 	bge	r7,r3,89c18 <___vfiprintf_internal_r+0x12fc>
   88d64:	02800274 	movhi	r10,9
   88d68:	52886604 	addi	r10,r10,8600
   88d6c:	dc002915 	stw	r16,164(sp)
   88d70:	d9801b17 	ldw	r6,108(sp)
   88d74:	da802415 	stw	r10,144(sp)
   88d78:	03c001c4 	movi	r15,7
   88d7c:	da402515 	stw	r9,148(sp)
   88d80:	db802815 	stw	r14,160(sp)
   88d84:	1821883a 	mov	r16,r3
   88d88:	00000506 	br	88da0 <___vfiprintf_internal_r+0x484>
   88d8c:	31400084 	addi	r5,r6,2
   88d90:	42000204 	addi	r8,r8,8
   88d94:	200d883a 	mov	r6,r4
   88d98:	843ffc04 	addi	r16,r16,-16
   88d9c:	3c000d0e 	bge	r7,r16,88dd4 <___vfiprintf_internal_r+0x4b8>
   88da0:	10800404 	addi	r2,r2,16
   88da4:	31000044 	addi	r4,r6,1
   88da8:	45800015 	stw	r22,0(r8)
   88dac:	41c00115 	stw	r7,4(r8)
   88db0:	d8801c15 	stw	r2,112(sp)
   88db4:	d9001b15 	stw	r4,108(sp)
   88db8:	793ff40e 	bge	r15,r4,88d8c <rx_descriptor_end+0xfff88d2c>
   88dbc:	1001b51e 	bne	r2,zero,89494 <___vfiprintf_internal_r+0xb78>
   88dc0:	843ffc04 	addi	r16,r16,-16
   88dc4:	000d883a 	mov	r6,zero
   88dc8:	01400044 	movi	r5,1
   88dcc:	d811883a 	mov	r8,sp
   88dd0:	3c3ff316 	blt	r7,r16,88da0 <rx_descriptor_end+0xfff88d40>
   88dd4:	8007883a 	mov	r3,r16
   88dd8:	da402517 	ldw	r9,148(sp)
   88ddc:	db802817 	ldw	r14,160(sp)
   88de0:	dc002917 	ldw	r16,164(sp)
   88de4:	da802417 	ldw	r10,144(sp)
   88de8:	1885883a 	add	r2,r3,r2
   88dec:	40c00115 	stw	r3,4(r8)
   88df0:	42800015 	stw	r10,0(r8)
   88df4:	d8801c15 	stw	r2,112(sp)
   88df8:	d9401b15 	stw	r5,108(sp)
   88dfc:	00c001c4 	movi	r3,7
   88e00:	19426016 	blt	r3,r5,89784 <___vfiprintf_internal_r+0xe68>
   88e04:	d8c01d87 	ldb	r3,118(sp)
   88e08:	42000204 	addi	r8,r8,8
   88e0c:	29000044 	addi	r4,r5,1
   88e10:	1801b31e 	bne	r3,zero,894e0 <___vfiprintf_internal_r+0xbc4>
   88e14:	7001c026 	beq	r14,zero,89518 <___vfiprintf_internal_r+0xbfc>
   88e18:	d8c01d04 	addi	r3,sp,116
   88e1c:	10800084 	addi	r2,r2,2
   88e20:	40c00015 	stw	r3,0(r8)
   88e24:	00c00084 	movi	r3,2
   88e28:	40c00115 	stw	r3,4(r8)
   88e2c:	d8801c15 	stw	r2,112(sp)
   88e30:	d9001b15 	stw	r4,108(sp)
   88e34:	00c001c4 	movi	r3,7
   88e38:	1902650e 	bge	r3,r4,897d0 <___vfiprintf_internal_r+0xeb4>
   88e3c:	10029a1e 	bne	r2,zero,898a8 <___vfiprintf_internal_r+0xf8c>
   88e40:	00c02004 	movi	r3,128
   88e44:	01000044 	movi	r4,1
   88e48:	000b883a 	mov	r5,zero
   88e4c:	d811883a 	mov	r8,sp
   88e50:	e0c1b31e 	bne	fp,r3,89520 <___vfiprintf_internal_r+0xc04>
   88e54:	8cb9c83a 	sub	fp,r17,r18
   88e58:	0701b10e 	bge	zero,fp,89520 <___vfiprintf_internal_r+0xc04>
   88e5c:	01c00404 	movi	r7,16
   88e60:	3f03890e 	bge	r7,fp,89c88 <___vfiprintf_internal_r+0x136c>
   88e64:	00c00274 	movhi	r3,9
   88e68:	18c86204 	addi	r3,r3,8584
   88e6c:	d8c02415 	stw	r3,144(sp)
   88e70:	8007883a 	mov	r3,r16
   88e74:	034001c4 	movi	r13,7
   88e78:	e021883a 	mov	r16,fp
   88e7c:	da402515 	stw	r9,148(sp)
   88e80:	1839883a 	mov	fp,r3
   88e84:	00000506 	br	88e9c <___vfiprintf_internal_r+0x580>
   88e88:	29800084 	addi	r6,r5,2
   88e8c:	42000204 	addi	r8,r8,8
   88e90:	180b883a 	mov	r5,r3
   88e94:	843ffc04 	addi	r16,r16,-16
   88e98:	3c000d0e 	bge	r7,r16,88ed0 <___vfiprintf_internal_r+0x5b4>
   88e9c:	10800404 	addi	r2,r2,16
   88ea0:	28c00044 	addi	r3,r5,1
   88ea4:	45c00015 	stw	r23,0(r8)
   88ea8:	41c00115 	stw	r7,4(r8)
   88eac:	d8801c15 	stw	r2,112(sp)
   88eb0:	d8c01b15 	stw	r3,108(sp)
   88eb4:	68fff40e 	bge	r13,r3,88e88 <rx_descriptor_end+0xfff88e28>
   88eb8:	1002241e 	bne	r2,zero,8974c <___vfiprintf_internal_r+0xe30>
   88ebc:	843ffc04 	addi	r16,r16,-16
   88ec0:	01800044 	movi	r6,1
   88ec4:	000b883a 	mov	r5,zero
   88ec8:	d811883a 	mov	r8,sp
   88ecc:	3c3ff316 	blt	r7,r16,88e9c <rx_descriptor_end+0xfff88e3c>
   88ed0:	da402517 	ldw	r9,148(sp)
   88ed4:	e007883a 	mov	r3,fp
   88ed8:	8039883a 	mov	fp,r16
   88edc:	1821883a 	mov	r16,r3
   88ee0:	d8c02417 	ldw	r3,144(sp)
   88ee4:	1705883a 	add	r2,r2,fp
   88ee8:	47000115 	stw	fp,4(r8)
   88eec:	40c00015 	stw	r3,0(r8)
   88ef0:	d8801c15 	stw	r2,112(sp)
   88ef4:	d9801b15 	stw	r6,108(sp)
   88ef8:	00c001c4 	movi	r3,7
   88efc:	19827616 	blt	r3,r6,898d8 <___vfiprintf_internal_r+0xfbc>
   88f00:	4cf9c83a 	sub	fp,r9,r19
   88f04:	42000204 	addi	r8,r8,8
   88f08:	31000044 	addi	r4,r6,1
   88f0c:	300b883a 	mov	r5,r6
   88f10:	07018516 	blt	zero,fp,89528 <___vfiprintf_internal_r+0xc0c>
   88f14:	9885883a 	add	r2,r19,r2
   88f18:	45400015 	stw	r21,0(r8)
   88f1c:	44c00115 	stw	r19,4(r8)
   88f20:	d8801c15 	stw	r2,112(sp)
   88f24:	d9001b15 	stw	r4,108(sp)
   88f28:	00c001c4 	movi	r3,7
   88f2c:	1901dd0e 	bge	r3,r4,896a4 <___vfiprintf_internal_r+0xd88>
   88f30:	1002401e 	bne	r2,zero,89834 <___vfiprintf_internal_r+0xf18>
   88f34:	d8001b15 	stw	zero,108(sp)
   88f38:	a2c0010c 	andi	r11,r20,4
   88f3c:	58000226 	beq	r11,zero,88f48 <___vfiprintf_internal_r+0x62c>
   88f40:	8ca7c83a 	sub	r19,r17,r18
   88f44:	04c2f216 	blt	zero,r19,89b10 <___vfiprintf_internal_r+0x11f4>
   88f48:	8c80010e 	bge	r17,r18,88f50 <___vfiprintf_internal_r+0x634>
   88f4c:	9023883a 	mov	r17,r18
   88f50:	da802317 	ldw	r10,140(sp)
   88f54:	5455883a 	add	r10,r10,r17
   88f58:	da802315 	stw	r10,140(sp)
   88f5c:	d8001b15 	stw	zero,108(sp)
   88f60:	d811883a 	mov	r8,sp
   88f64:	003ea206 	br	889f0 <rx_descriptor_end+0xfff88990>
   88f68:	a5000814 	ori	r20,r20,32
   88f6c:	80c00007 	ldb	r3,0(r16)
   88f70:	003ec906 	br	88a98 <rx_descriptor_end+0xfff88a38>
   88f74:	80c00007 	ldb	r3,0(r16)
   88f78:	1b030926 	beq	r3,r12,89ba0 <___vfiprintf_internal_r+0x1284>
   88f7c:	a5000414 	ori	r20,r20,16
   88f80:	003ec506 	br	88a98 <rx_descriptor_end+0xfff88a38>
   88f84:	21003fcc 	andi	r4,r4,255
   88f88:	20035e1e 	bne	r4,zero,89d04 <___vfiprintf_internal_r+0x13e8>
   88f8c:	a080080c 	andi	r2,r20,32
   88f90:	1002a526 	beq	r2,zero,89a28 <___vfiprintf_internal_r+0x110c>
   88f94:	da802217 	ldw	r10,136(sp)
   88f98:	50800017 	ldw	r2,0(r10)
   88f9c:	da802317 	ldw	r10,140(sp)
   88fa0:	5007d7fa 	srai	r3,r10,31
   88fa4:	da802217 	ldw	r10,136(sp)
   88fa8:	10c00115 	stw	r3,4(r2)
   88fac:	52800104 	addi	r10,r10,4
   88fb0:	da802215 	stw	r10,136(sp)
   88fb4:	da802317 	ldw	r10,140(sp)
   88fb8:	12800015 	stw	r10,0(r2)
   88fbc:	003e8c06 	br	889f0 <rx_descriptor_end+0xfff88990>
   88fc0:	21003fcc 	andi	r4,r4,255
   88fc4:	2003511e 	bne	r4,zero,89d0c <___vfiprintf_internal_r+0x13f0>
   88fc8:	a080080c 	andi	r2,r20,32
   88fcc:	1000a126 	beq	r2,zero,89254 <___vfiprintf_internal_r+0x938>
   88fd0:	da802217 	ldw	r10,136(sp)
   88fd4:	d8001d85 	stb	zero,118(sp)
   88fd8:	50800204 	addi	r2,r10,8
   88fdc:	54800017 	ldw	r18,0(r10)
   88fe0:	54c00117 	ldw	r19,4(r10)
   88fe4:	4802b416 	blt	r9,zero,89ab8 <___vfiprintf_internal_r+0x119c>
   88fe8:	013fdfc4 	movi	r4,-129
   88fec:	94c6b03a 	or	r3,r18,r19
   88ff0:	d8802215 	stw	r2,136(sp)
   88ff4:	a128703a 	and	r20,r20,r4
   88ff8:	1800a226 	beq	r3,zero,89284 <___vfiprintf_internal_r+0x968>
   88ffc:	0039883a 	mov	fp,zero
   89000:	dd401a04 	addi	r21,sp,104
   89004:	9006d0fa 	srli	r3,r18,3
   89008:	9808977a 	slli	r4,r19,29
   8900c:	9826d0fa 	srli	r19,r19,3
   89010:	948001cc 	andi	r18,r18,7
   89014:	90800c04 	addi	r2,r18,48
   89018:	ad7fffc4 	addi	r21,r21,-1
   8901c:	20e4b03a 	or	r18,r4,r3
   89020:	a8800005 	stb	r2,0(r21)
   89024:	94c6b03a 	or	r3,r18,r19
   89028:	183ff61e 	bne	r3,zero,89004 <rx_descriptor_end+0xfff88fa4>
   8902c:	a0c0004c 	andi	r3,r20,1
   89030:	18005926 	beq	r3,zero,89198 <___vfiprintf_internal_r+0x87c>
   89034:	10803fcc 	andi	r2,r2,255
   89038:	1080201c 	xori	r2,r2,128
   8903c:	10bfe004 	addi	r2,r2,-128
   89040:	00c00c04 	movi	r3,48
   89044:	10c05426 	beq	r2,r3,89198 <___vfiprintf_internal_r+0x87c>
   89048:	da801e17 	ldw	r10,120(sp)
   8904c:	a8bfffc4 	addi	r2,r21,-1
   89050:	a8ffffc5 	stb	r3,-1(r21)
   89054:	50a7c83a 	sub	r19,r10,r2
   89058:	102b883a 	mov	r21,r2
   8905c:	003f2f06 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   89060:	21003fcc 	andi	r4,r4,255
   89064:	2003421e 	bne	r4,zero,89d70 <___vfiprintf_internal_r+0x1454>
   89068:	00800274 	movhi	r2,9
   8906c:	10880204 	addi	r2,r2,8200
   89070:	d8802615 	stw	r2,152(sp)
   89074:	a080080c 	andi	r2,r20,32
   89078:	1000aa26 	beq	r2,zero,89324 <___vfiprintf_internal_r+0xa08>
   8907c:	da802217 	ldw	r10,136(sp)
   89080:	54800017 	ldw	r18,0(r10)
   89084:	54c00117 	ldw	r19,4(r10)
   89088:	52800204 	addi	r10,r10,8
   8908c:	da802215 	stw	r10,136(sp)
   89090:	a080004c 	andi	r2,r20,1
   89094:	1001d226 	beq	r2,zero,897e0 <___vfiprintf_internal_r+0xec4>
   89098:	94c4b03a 	or	r2,r18,r19
   8909c:	1002351e 	bne	r2,zero,89974 <___vfiprintf_internal_r+0x1058>
   890a0:	d8001d85 	stb	zero,118(sp)
   890a4:	48022216 	blt	r9,zero,89930 <___vfiprintf_internal_r+0x1014>
   890a8:	00bfdfc4 	movi	r2,-129
   890ac:	a0a8703a 	and	r20,r20,r2
   890b0:	003f1506 	br	88d08 <rx_descriptor_end+0xfff88ca8>
   890b4:	da802217 	ldw	r10,136(sp)
   890b8:	04800044 	movi	r18,1
   890bc:	d8001d85 	stb	zero,118(sp)
   890c0:	50800017 	ldw	r2,0(r10)
   890c4:	52800104 	addi	r10,r10,4
   890c8:	da802215 	stw	r10,136(sp)
   890cc:	d8801005 	stb	r2,64(sp)
   890d0:	9027883a 	mov	r19,r18
   890d4:	dd401004 	addi	r21,sp,64
   890d8:	0013883a 	mov	r9,zero
   890dc:	003f1706 	br	88d3c <rx_descriptor_end+0xfff88cdc>
   890e0:	21003fcc 	andi	r4,r4,255
   890e4:	2003201e 	bne	r4,zero,89d68 <___vfiprintf_internal_r+0x144c>
   890e8:	a080080c 	andi	r2,r20,32
   890ec:	10004b26 	beq	r2,zero,8921c <___vfiprintf_internal_r+0x900>
   890f0:	da802217 	ldw	r10,136(sp)
   890f4:	50800117 	ldw	r2,4(r10)
   890f8:	54800017 	ldw	r18,0(r10)
   890fc:	52800204 	addi	r10,r10,8
   89100:	da802215 	stw	r10,136(sp)
   89104:	1027883a 	mov	r19,r2
   89108:	10022c16 	blt	r2,zero,899bc <___vfiprintf_internal_r+0x10a0>
   8910c:	df001d83 	ldbu	fp,118(sp)
   89110:	48007216 	blt	r9,zero,892dc <___vfiprintf_internal_r+0x9c0>
   89114:	00ffdfc4 	movi	r3,-129
   89118:	94c4b03a 	or	r2,r18,r19
   8911c:	a0e8703a 	and	r20,r20,r3
   89120:	1000cc26 	beq	r2,zero,89454 <___vfiprintf_internal_r+0xb38>
   89124:	98021026 	beq	r19,zero,89968 <___vfiprintf_internal_r+0x104c>
   89128:	dc402415 	stw	r17,144(sp)
   8912c:	dc002515 	stw	r16,148(sp)
   89130:	9823883a 	mov	r17,r19
   89134:	9021883a 	mov	r16,r18
   89138:	dd401a04 	addi	r21,sp,104
   8913c:	4825883a 	mov	r18,r9
   89140:	4027883a 	mov	r19,r8
   89144:	8009883a 	mov	r4,r16
   89148:	880b883a 	mov	r5,r17
   8914c:	01800284 	movi	r6,10
   89150:	000f883a 	mov	r7,zero
   89154:	008b4a40 	call	8b4a4 <__umoddi3>
   89158:	10800c04 	addi	r2,r2,48
   8915c:	ad7fffc4 	addi	r21,r21,-1
   89160:	8009883a 	mov	r4,r16
   89164:	880b883a 	mov	r5,r17
   89168:	a8800005 	stb	r2,0(r21)
   8916c:	01800284 	movi	r6,10
   89170:	000f883a 	mov	r7,zero
   89174:	008af2c0 	call	8af2c <__udivdi3>
   89178:	1021883a 	mov	r16,r2
   8917c:	10c4b03a 	or	r2,r2,r3
   89180:	1823883a 	mov	r17,r3
   89184:	103fef1e 	bne	r2,zero,89144 <rx_descriptor_end+0xfff890e4>
   89188:	dc402417 	ldw	r17,144(sp)
   8918c:	dc002517 	ldw	r16,148(sp)
   89190:	9013883a 	mov	r9,r18
   89194:	9811883a 	mov	r8,r19
   89198:	da801e17 	ldw	r10,120(sp)
   8919c:	5567c83a 	sub	r19,r10,r21
   891a0:	003ede06 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   891a4:	38803fcc 	andi	r2,r7,255
   891a8:	1080201c 	xori	r2,r2,128
   891ac:	10bfe004 	addi	r2,r2,-128
   891b0:	1002371e 	bne	r2,zero,89a90 <___vfiprintf_internal_r+0x1174>
   891b4:	01000044 	movi	r4,1
   891b8:	01c00804 	movi	r7,32
   891bc:	80c00007 	ldb	r3,0(r16)
   891c0:	003e3506 	br	88a98 <rx_descriptor_end+0xfff88a38>
   891c4:	a5000054 	ori	r20,r20,1
   891c8:	80c00007 	ldb	r3,0(r16)
   891cc:	003e3206 	br	88a98 <rx_descriptor_end+0xfff88a38>
   891d0:	a5002014 	ori	r20,r20,128
   891d4:	80c00007 	ldb	r3,0(r16)
   891d8:	003e2f06 	br	88a98 <rx_descriptor_end+0xfff88a38>
   891dc:	8015883a 	mov	r10,r16
   891e0:	0023883a 	mov	r17,zero
   891e4:	18bff404 	addi	r2,r3,-48
   891e8:	50c00007 	ldb	r3,0(r10)
   891ec:	8c4002a4 	muli	r17,r17,10
   891f0:	84000044 	addi	r16,r16,1
   891f4:	8015883a 	mov	r10,r16
   891f8:	1463883a 	add	r17,r2,r17
   891fc:	18bff404 	addi	r2,r3,-48
   89200:	30bff92e 	bgeu	r6,r2,891e8 <rx_descriptor_end+0xfff89188>
   89204:	003e2506 	br	88a9c <rx_descriptor_end+0xfff88a3c>
   89208:	21003fcc 	andi	r4,r4,255
   8920c:	2002d41e 	bne	r4,zero,89d60 <___vfiprintf_internal_r+0x1444>
   89210:	a5000414 	ori	r20,r20,16
   89214:	a080080c 	andi	r2,r20,32
   89218:	103fb51e 	bne	r2,zero,890f0 <rx_descriptor_end+0xfff89090>
   8921c:	a080040c 	andi	r2,r20,16
   89220:	1001f826 	beq	r2,zero,89a04 <___vfiprintf_internal_r+0x10e8>
   89224:	da802217 	ldw	r10,136(sp)
   89228:	54800017 	ldw	r18,0(r10)
   8922c:	52800104 	addi	r10,r10,4
   89230:	da802215 	stw	r10,136(sp)
   89234:	9027d7fa 	srai	r19,r18,31
   89238:	9805883a 	mov	r2,r19
   8923c:	003fb206 	br	89108 <rx_descriptor_end+0xfff890a8>
   89240:	21003fcc 	andi	r4,r4,255
   89244:	2002c41e 	bne	r4,zero,89d58 <___vfiprintf_internal_r+0x143c>
   89248:	a5000414 	ori	r20,r20,16
   8924c:	a080080c 	andi	r2,r20,32
   89250:	103f5f1e 	bne	r2,zero,88fd0 <rx_descriptor_end+0xfff88f70>
   89254:	a080040c 	andi	r2,r20,16
   89258:	10020f26 	beq	r2,zero,89a98 <___vfiprintf_internal_r+0x117c>
   8925c:	da802217 	ldw	r10,136(sp)
   89260:	d8001d85 	stb	zero,118(sp)
   89264:	0027883a 	mov	r19,zero
   89268:	50800104 	addi	r2,r10,4
   8926c:	54800017 	ldw	r18,0(r10)
   89270:	48021116 	blt	r9,zero,89ab8 <___vfiprintf_internal_r+0x119c>
   89274:	00ffdfc4 	movi	r3,-129
   89278:	d8802215 	stw	r2,136(sp)
   8927c:	a0e8703a 	and	r20,r20,r3
   89280:	903f5e1e 	bne	r18,zero,88ffc <rx_descriptor_end+0xfff88f9c>
   89284:	0039883a 	mov	fp,zero
   89288:	4802a626 	beq	r9,zero,89d24 <___vfiprintf_internal_r+0x1408>
   8928c:	0025883a 	mov	r18,zero
   89290:	0027883a 	mov	r19,zero
   89294:	003f5a06 	br	89000 <rx_descriptor_end+0xfff88fa0>
   89298:	21003fcc 	andi	r4,r4,255
   8929c:	20029f1e 	bne	r4,zero,89d1c <___vfiprintf_internal_r+0x1400>
   892a0:	a5000414 	ori	r20,r20,16
   892a4:	a080080c 	andi	r2,r20,32
   892a8:	10005e1e 	bne	r2,zero,89424 <___vfiprintf_internal_r+0xb08>
   892ac:	a080040c 	andi	r2,r20,16
   892b0:	1001a21e 	bne	r2,zero,8993c <___vfiprintf_internal_r+0x1020>
   892b4:	a080100c 	andi	r2,r20,64
   892b8:	d8001d85 	stb	zero,118(sp)
   892bc:	da802217 	ldw	r10,136(sp)
   892c0:	1002231e 	bne	r2,zero,89b50 <___vfiprintf_internal_r+0x1234>
   892c4:	50800104 	addi	r2,r10,4
   892c8:	54800017 	ldw	r18,0(r10)
   892cc:	0027883a 	mov	r19,zero
   892d0:	4801a00e 	bge	r9,zero,89954 <___vfiprintf_internal_r+0x1038>
   892d4:	d8802215 	stw	r2,136(sp)
   892d8:	0039883a 	mov	fp,zero
   892dc:	94c4b03a 	or	r2,r18,r19
   892e0:	103f901e 	bne	r2,zero,89124 <rx_descriptor_end+0xfff890c4>
   892e4:	00800044 	movi	r2,1
   892e8:	10803fcc 	andi	r2,r2,255
   892ec:	00c00044 	movi	r3,1
   892f0:	10c05926 	beq	r2,r3,89458 <___vfiprintf_internal_r+0xb3c>
   892f4:	00c00084 	movi	r3,2
   892f8:	10ffe41e 	bne	r2,r3,8928c <rx_descriptor_end+0xfff8922c>
   892fc:	0025883a 	mov	r18,zero
   89300:	0027883a 	mov	r19,zero
   89304:	00013d06 	br	897fc <___vfiprintf_internal_r+0xee0>
   89308:	21003fcc 	andi	r4,r4,255
   8930c:	2002811e 	bne	r4,zero,89d14 <___vfiprintf_internal_r+0x13f8>
   89310:	00800274 	movhi	r2,9
   89314:	1087fd04 	addi	r2,r2,8180
   89318:	d8802615 	stw	r2,152(sp)
   8931c:	a080080c 	andi	r2,r20,32
   89320:	103f561e 	bne	r2,zero,8907c <rx_descriptor_end+0xfff8901c>
   89324:	a080040c 	andi	r2,r20,16
   89328:	1001d126 	beq	r2,zero,89a70 <___vfiprintf_internal_r+0x1154>
   8932c:	da802217 	ldw	r10,136(sp)
   89330:	0027883a 	mov	r19,zero
   89334:	54800017 	ldw	r18,0(r10)
   89338:	52800104 	addi	r10,r10,4
   8933c:	da802215 	stw	r10,136(sp)
   89340:	003f5306 	br	89090 <rx_descriptor_end+0xfff89030>
   89344:	da802217 	ldw	r10,136(sp)
   89348:	d8001d85 	stb	zero,118(sp)
   8934c:	55400017 	ldw	r21,0(r10)
   89350:	50c00104 	addi	r3,r10,4
   89354:	a8024226 	beq	r21,zero,89c60 <___vfiprintf_internal_r+0x1344>
   89358:	48021816 	blt	r9,zero,89bbc <___vfiprintf_internal_r+0x12a0>
   8935c:	480d883a 	mov	r6,r9
   89360:	000b883a 	mov	r5,zero
   89364:	a809883a 	mov	r4,r21
   89368:	d8c02a15 	stw	r3,168(sp)
   8936c:	da002b15 	stw	r8,172(sp)
   89370:	da402c15 	stw	r9,176(sp)
   89374:	00873980 	call	87398 <memchr>
   89378:	d8c02a17 	ldw	r3,168(sp)
   8937c:	da002b17 	ldw	r8,172(sp)
   89380:	da402c17 	ldw	r9,176(sp)
   89384:	10024826 	beq	r2,zero,89ca8 <___vfiprintf_internal_r+0x138c>
   89388:	1567c83a 	sub	r19,r2,r21
   8938c:	df001d83 	ldbu	fp,118(sp)
   89390:	d8c02215 	stw	r3,136(sp)
   89394:	0013883a 	mov	r9,zero
   89398:	003e6006 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   8939c:	21003fcc 	andi	r4,r4,255
   893a0:	203fc026 	beq	r4,zero,892a4 <rx_descriptor_end+0xfff89244>
   893a4:	d9c01d85 	stb	r7,118(sp)
   893a8:	003fbe06 	br	892a4 <rx_descriptor_end+0xfff89244>
   893ac:	da802217 	ldw	r10,136(sp)
   893b0:	54400017 	ldw	r17,0(r10)
   893b4:	50800104 	addi	r2,r10,4
   893b8:	883e3b16 	blt	r17,zero,88ca8 <rx_descriptor_end+0xfff88c48>
   893bc:	d8802215 	stw	r2,136(sp)
   893c0:	80c00007 	ldb	r3,0(r16)
   893c4:	003db406 	br	88a98 <rx_descriptor_end+0xfff88a38>
   893c8:	01000044 	movi	r4,1
   893cc:	01c00ac4 	movi	r7,43
   893d0:	80c00007 	ldb	r3,0(r16)
   893d4:	003db006 	br	88a98 <rx_descriptor_end+0xfff88a38>
   893d8:	80c00007 	ldb	r3,0(r16)
   893dc:	82800044 	addi	r10,r16,1
   893e0:	1b423c26 	beq	r3,r13,89cd4 <___vfiprintf_internal_r+0x13b8>
   893e4:	18bff404 	addi	r2,r3,-48
   893e8:	0013883a 	mov	r9,zero
   893ec:	30822b36 	bltu	r6,r2,89c9c <___vfiprintf_internal_r+0x1380>
   893f0:	50c00007 	ldb	r3,0(r10)
   893f4:	4a4002a4 	muli	r9,r9,10
   893f8:	54000044 	addi	r16,r10,1
   893fc:	8015883a 	mov	r10,r16
   89400:	4893883a 	add	r9,r9,r2
   89404:	18bff404 	addi	r2,r3,-48
   89408:	30bff92e 	bgeu	r6,r2,893f0 <rx_descriptor_end+0xfff89390>
   8940c:	483da30e 	bge	r9,zero,88a9c <rx_descriptor_end+0xfff88a3c>
   89410:	027fffc4 	movi	r9,-1
   89414:	003da106 	br	88a9c <rx_descriptor_end+0xfff88a3c>
   89418:	a5001014 	ori	r20,r20,64
   8941c:	80c00007 	ldb	r3,0(r16)
   89420:	003d9d06 	br	88a98 <rx_descriptor_end+0xfff88a38>
   89424:	da802217 	ldw	r10,136(sp)
   89428:	d8001d85 	stb	zero,118(sp)
   8942c:	50c00204 	addi	r3,r10,8
   89430:	54800017 	ldw	r18,0(r10)
   89434:	54c00117 	ldw	r19,4(r10)
   89438:	4801ca16 	blt	r9,zero,89b64 <___vfiprintf_internal_r+0x1248>
   8943c:	013fdfc4 	movi	r4,-129
   89440:	94c4b03a 	or	r2,r18,r19
   89444:	d8c02215 	stw	r3,136(sp)
   89448:	a128703a 	and	r20,r20,r4
   8944c:	0039883a 	mov	fp,zero
   89450:	103f341e 	bne	r2,zero,89124 <rx_descriptor_end+0xfff890c4>
   89454:	483e2e26 	beq	r9,zero,88d10 <rx_descriptor_end+0xfff88cb0>
   89458:	0025883a 	mov	r18,zero
   8945c:	94800c04 	addi	r18,r18,48
   89460:	dc8019c5 	stb	r18,103(sp)
   89464:	dcc02717 	ldw	r19,156(sp)
   89468:	dd4019c4 	addi	r21,sp,103
   8946c:	003e2b06 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   89470:	21003fcc 	andi	r4,r4,255
   89474:	2002361e 	bne	r4,zero,89d50 <___vfiprintf_internal_r+0x1434>
   89478:	1801c126 	beq	r3,zero,89b80 <___vfiprintf_internal_r+0x1264>
   8947c:	04800044 	movi	r18,1
   89480:	d8c01005 	stb	r3,64(sp)
   89484:	d8001d85 	stb	zero,118(sp)
   89488:	9027883a 	mov	r19,r18
   8948c:	dd401004 	addi	r21,sp,64
   89490:	003f1106 	br	890d8 <rx_descriptor_end+0xfff89078>
   89494:	d9402117 	ldw	r5,132(sp)
   89498:	d9002017 	ldw	r4,128(sp)
   8949c:	d9801a04 	addi	r6,sp,104
   894a0:	d9c02b15 	stw	r7,172(sp)
   894a4:	dbc02a15 	stw	r15,168(sp)
   894a8:	00888080 	call	88808 <__sprint_r.part.0>
   894ac:	d9c02b17 	ldw	r7,172(sp)
   894b0:	dbc02a17 	ldw	r15,168(sp)
   894b4:	10006d1e 	bne	r2,zero,8966c <___vfiprintf_internal_r+0xd50>
   894b8:	d9801b17 	ldw	r6,108(sp)
   894bc:	d8801c17 	ldw	r2,112(sp)
   894c0:	d811883a 	mov	r8,sp
   894c4:	31400044 	addi	r5,r6,1
   894c8:	003e3306 	br	88d98 <rx_descriptor_end+0xfff88d38>
   894cc:	d9401b17 	ldw	r5,108(sp)
   894d0:	d8801c17 	ldw	r2,112(sp)
   894d4:	29000044 	addi	r4,r5,1
   894d8:	d8c01d87 	ldb	r3,118(sp)
   894dc:	183e4d26 	beq	r3,zero,88e14 <rx_descriptor_end+0xfff88db4>
   894e0:	00c00044 	movi	r3,1
   894e4:	d9401d84 	addi	r5,sp,118
   894e8:	10c5883a 	add	r2,r2,r3
   894ec:	41400015 	stw	r5,0(r8)
   894f0:	40c00115 	stw	r3,4(r8)
   894f4:	d8801c15 	stw	r2,112(sp)
   894f8:	d9001b15 	stw	r4,108(sp)
   894fc:	014001c4 	movi	r5,7
   89500:	2900a90e 	bge	r5,r4,897a8 <___vfiprintf_internal_r+0xe8c>
   89504:	1000da1e 	bne	r2,zero,89870 <___vfiprintf_internal_r+0xf54>
   89508:	7000ab1e 	bne	r14,zero,897b8 <___vfiprintf_internal_r+0xe9c>
   8950c:	000b883a 	mov	r5,zero
   89510:	1809883a 	mov	r4,r3
   89514:	d811883a 	mov	r8,sp
   89518:	00c02004 	movi	r3,128
   8951c:	e0fe4d26 	beq	fp,r3,88e54 <rx_descriptor_end+0xfff88df4>
   89520:	4cf9c83a 	sub	fp,r9,r19
   89524:	073e7b0e 	bge	zero,fp,88f14 <rx_descriptor_end+0xfff88eb4>
   89528:	01c00404 	movi	r7,16
   8952c:	3f01900e 	bge	r7,fp,89b70 <___vfiprintf_internal_r+0x1254>
   89530:	00c00274 	movhi	r3,9
   89534:	18c86204 	addi	r3,r3,8584
   89538:	d8c02415 	stw	r3,144(sp)
   8953c:	034001c4 	movi	r13,7
   89540:	00000506 	br	89558 <___vfiprintf_internal_r+0xc3c>
   89544:	29000084 	addi	r4,r5,2
   89548:	42000204 	addi	r8,r8,8
   8954c:	180b883a 	mov	r5,r3
   89550:	e73ffc04 	addi	fp,fp,-16
   89554:	3f000d0e 	bge	r7,fp,8958c <___vfiprintf_internal_r+0xc70>
   89558:	10800404 	addi	r2,r2,16
   8955c:	28c00044 	addi	r3,r5,1
   89560:	45c00015 	stw	r23,0(r8)
   89564:	41c00115 	stw	r7,4(r8)
   89568:	d8801c15 	stw	r2,112(sp)
   8956c:	d8c01b15 	stw	r3,108(sp)
   89570:	68fff40e 	bge	r13,r3,89544 <rx_descriptor_end+0xfff894e4>
   89574:	1000101e 	bne	r2,zero,895b8 <___vfiprintf_internal_r+0xc9c>
   89578:	e73ffc04 	addi	fp,fp,-16
   8957c:	01000044 	movi	r4,1
   89580:	000b883a 	mov	r5,zero
   89584:	d811883a 	mov	r8,sp
   89588:	3f3ff316 	blt	r7,fp,89558 <rx_descriptor_end+0xfff894f8>
   8958c:	da802417 	ldw	r10,144(sp)
   89590:	1705883a 	add	r2,r2,fp
   89594:	47000115 	stw	fp,4(r8)
   89598:	42800015 	stw	r10,0(r8)
   8959c:	d8801c15 	stw	r2,112(sp)
   895a0:	d9001b15 	stw	r4,108(sp)
   895a4:	00c001c4 	movi	r3,7
   895a8:	19003616 	blt	r3,r4,89684 <___vfiprintf_internal_r+0xd68>
   895ac:	42000204 	addi	r8,r8,8
   895b0:	21000044 	addi	r4,r4,1
   895b4:	003e5706 	br	88f14 <rx_descriptor_end+0xfff88eb4>
   895b8:	d9402117 	ldw	r5,132(sp)
   895bc:	d9002017 	ldw	r4,128(sp)
   895c0:	d9801a04 	addi	r6,sp,104
   895c4:	d9c02b15 	stw	r7,172(sp)
   895c8:	db402a15 	stw	r13,168(sp)
   895cc:	00888080 	call	88808 <__sprint_r.part.0>
   895d0:	d9c02b17 	ldw	r7,172(sp)
   895d4:	db402a17 	ldw	r13,168(sp)
   895d8:	1000241e 	bne	r2,zero,8966c <___vfiprintf_internal_r+0xd50>
   895dc:	d9401b17 	ldw	r5,108(sp)
   895e0:	d8801c17 	ldw	r2,112(sp)
   895e4:	d811883a 	mov	r8,sp
   895e8:	29000044 	addi	r4,r5,1
   895ec:	003fd806 	br	89550 <rx_descriptor_end+0xfff894f0>
   895f0:	d9401b17 	ldw	r5,108(sp)
   895f4:	00c00274 	movhi	r3,9
   895f8:	18c86604 	addi	r3,r3,8600
   895fc:	d8c02415 	stw	r3,144(sp)
   89600:	29400044 	addi	r5,r5,1
   89604:	d8c02417 	ldw	r3,144(sp)
   89608:	14c5883a 	add	r2,r2,r19
   8960c:	44c00115 	stw	r19,4(r8)
   89610:	40c00015 	stw	r3,0(r8)
   89614:	d8801c15 	stw	r2,112(sp)
   89618:	d9401b15 	stw	r5,108(sp)
   8961c:	00c001c4 	movi	r3,7
   89620:	1940070e 	bge	r3,r5,89640 <___vfiprintf_internal_r+0xd24>
   89624:	103e4826 	beq	r2,zero,88f48 <rx_descriptor_end+0xfff88ee8>
   89628:	d9402117 	ldw	r5,132(sp)
   8962c:	d9002017 	ldw	r4,128(sp)
   89630:	d9801a04 	addi	r6,sp,104
   89634:	00888080 	call	88808 <__sprint_r.part.0>
   89638:	10000c1e 	bne	r2,zero,8966c <___vfiprintf_internal_r+0xd50>
   8963c:	d8801c17 	ldw	r2,112(sp)
   89640:	8c80010e 	bge	r17,r18,89648 <___vfiprintf_internal_r+0xd2c>
   89644:	9023883a 	mov	r17,r18
   89648:	da802317 	ldw	r10,140(sp)
   8964c:	5455883a 	add	r10,r10,r17
   89650:	da802315 	stw	r10,140(sp)
   89654:	103e4126 	beq	r2,zero,88f5c <rx_descriptor_end+0xfff88efc>
   89658:	d9402117 	ldw	r5,132(sp)
   8965c:	d9002017 	ldw	r4,128(sp)
   89660:	d9801a04 	addi	r6,sp,104
   89664:	00888080 	call	88808 <__sprint_r.part.0>
   89668:	103e3c26 	beq	r2,zero,88f5c <rx_descriptor_end+0xfff88efc>
   8966c:	dd002117 	ldw	r20,132(sp)
   89670:	a080030b 	ldhu	r2,12(r20)
   89674:	1080100c 	andi	r2,r2,64
   89678:	1001231e 	bne	r2,zero,89b08 <___vfiprintf_internal_r+0x11ec>
   8967c:	d8802317 	ldw	r2,140(sp)
   89680:	003d7b06 	br	88c70 <rx_descriptor_end+0xfff88c10>
   89684:	1000991e 	bne	r2,zero,898ec <___vfiprintf_internal_r+0xfd0>
   89688:	00c00044 	movi	r3,1
   8968c:	9805883a 	mov	r2,r19
   89690:	dd400015 	stw	r21,0(sp)
   89694:	dcc00115 	stw	r19,4(sp)
   89698:	dcc01c15 	stw	r19,112(sp)
   8969c:	d8c01b15 	stw	r3,108(sp)
   896a0:	d811883a 	mov	r8,sp
   896a4:	42000204 	addi	r8,r8,8
   896a8:	a2c0010c 	andi	r11,r20,4
   896ac:	583fe426 	beq	r11,zero,89640 <rx_descriptor_end+0xfff895e0>
   896b0:	8ca7c83a 	sub	r19,r17,r18
   896b4:	04ffe20e 	bge	zero,r19,89640 <rx_descriptor_end+0xfff895e0>
   896b8:	01c00404 	movi	r7,16
   896bc:	3cffcc0e 	bge	r7,r19,895f0 <rx_descriptor_end+0xfff89590>
   896c0:	02800274 	movhi	r10,9
   896c4:	52886604 	addi	r10,r10,8600
   896c8:	d9001b17 	ldw	r4,108(sp)
   896cc:	da802415 	stw	r10,144(sp)
   896d0:	382b883a 	mov	r21,r7
   896d4:	050001c4 	movi	r20,7
   896d8:	df002017 	ldw	fp,128(sp)
   896dc:	00000506 	br	896f4 <___vfiprintf_internal_r+0xdd8>
   896e0:	21400084 	addi	r5,r4,2
   896e4:	42000204 	addi	r8,r8,8
   896e8:	1809883a 	mov	r4,r3
   896ec:	9cfffc04 	addi	r19,r19,-16
   896f0:	acffc40e 	bge	r21,r19,89604 <rx_descriptor_end+0xfff895a4>
   896f4:	10800404 	addi	r2,r2,16
   896f8:	20c00044 	addi	r3,r4,1
   896fc:	45800015 	stw	r22,0(r8)
   89700:	45400115 	stw	r21,4(r8)
   89704:	d8801c15 	stw	r2,112(sp)
   89708:	d8c01b15 	stw	r3,108(sp)
   8970c:	a0fff40e 	bge	r20,r3,896e0 <rx_descriptor_end+0xfff89680>
   89710:	1000041e 	bne	r2,zero,89724 <___vfiprintf_internal_r+0xe08>
   89714:	01400044 	movi	r5,1
   89718:	0009883a 	mov	r4,zero
   8971c:	d811883a 	mov	r8,sp
   89720:	003ff206 	br	896ec <rx_descriptor_end+0xfff8968c>
   89724:	d9402117 	ldw	r5,132(sp)
   89728:	d9801a04 	addi	r6,sp,104
   8972c:	e009883a 	mov	r4,fp
   89730:	00888080 	call	88808 <__sprint_r.part.0>
   89734:	103fcd1e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89738:	d9001b17 	ldw	r4,108(sp)
   8973c:	d8801c17 	ldw	r2,112(sp)
   89740:	d811883a 	mov	r8,sp
   89744:	21400044 	addi	r5,r4,1
   89748:	003fe806 	br	896ec <rx_descriptor_end+0xfff8968c>
   8974c:	d9402117 	ldw	r5,132(sp)
   89750:	d9002017 	ldw	r4,128(sp)
   89754:	d9801a04 	addi	r6,sp,104
   89758:	d9c02b15 	stw	r7,172(sp)
   8975c:	db402a15 	stw	r13,168(sp)
   89760:	00888080 	call	88808 <__sprint_r.part.0>
   89764:	d9c02b17 	ldw	r7,172(sp)
   89768:	db402a17 	ldw	r13,168(sp)
   8976c:	103fbf1e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89770:	d9401b17 	ldw	r5,108(sp)
   89774:	d8801c17 	ldw	r2,112(sp)
   89778:	d811883a 	mov	r8,sp
   8977c:	29800044 	addi	r6,r5,1
   89780:	003dc406 	br	88e94 <rx_descriptor_end+0xfff88e34>
   89784:	1000d21e 	bne	r2,zero,89ad0 <___vfiprintf_internal_r+0x11b4>
   89788:	d8c01d87 	ldb	r3,118(sp)
   8978c:	18009526 	beq	r3,zero,899e4 <___vfiprintf_internal_r+0x10c8>
   89790:	00800044 	movi	r2,1
   89794:	d8c01d84 	addi	r3,sp,118
   89798:	1009883a 	mov	r4,r2
   8979c:	d8c00015 	stw	r3,0(sp)
   897a0:	d8800115 	stw	r2,4(sp)
   897a4:	d811883a 	mov	r8,sp
   897a8:	200b883a 	mov	r5,r4
   897ac:	42000204 	addi	r8,r8,8
   897b0:	21000044 	addi	r4,r4,1
   897b4:	003d9706 	br	88e14 <rx_descriptor_end+0xfff88db4>
   897b8:	d9001d04 	addi	r4,sp,116
   897bc:	00800084 	movi	r2,2
   897c0:	d9000015 	stw	r4,0(sp)
   897c4:	d8800115 	stw	r2,4(sp)
   897c8:	1809883a 	mov	r4,r3
   897cc:	d811883a 	mov	r8,sp
   897d0:	200b883a 	mov	r5,r4
   897d4:	42000204 	addi	r8,r8,8
   897d8:	21000044 	addi	r4,r4,1
   897dc:	003f4e06 	br	89518 <rx_descriptor_end+0xfff894b8>
   897e0:	d8001d85 	stb	zero,118(sp)
   897e4:	48005016 	blt	r9,zero,89928 <___vfiprintf_internal_r+0x100c>
   897e8:	00ffdfc4 	movi	r3,-129
   897ec:	94c4b03a 	or	r2,r18,r19
   897f0:	a0e8703a 	and	r20,r20,r3
   897f4:	103d4426 	beq	r2,zero,88d08 <rx_descriptor_end+0xfff88ca8>
   897f8:	0039883a 	mov	fp,zero
   897fc:	d9002617 	ldw	r4,152(sp)
   89800:	dd401a04 	addi	r21,sp,104
   89804:	908003cc 	andi	r2,r18,15
   89808:	9806973a 	slli	r3,r19,28
   8980c:	2085883a 	add	r2,r4,r2
   89810:	9024d13a 	srli	r18,r18,4
   89814:	10800003 	ldbu	r2,0(r2)
   89818:	9826d13a 	srli	r19,r19,4
   8981c:	ad7fffc4 	addi	r21,r21,-1
   89820:	1ca4b03a 	or	r18,r3,r18
   89824:	a8800005 	stb	r2,0(r21)
   89828:	94c4b03a 	or	r2,r18,r19
   8982c:	103ff51e 	bne	r2,zero,89804 <rx_descriptor_end+0xfff897a4>
   89830:	003e5906 	br	89198 <rx_descriptor_end+0xfff89138>
   89834:	d9402117 	ldw	r5,132(sp)
   89838:	d9002017 	ldw	r4,128(sp)
   8983c:	d9801a04 	addi	r6,sp,104
   89840:	00888080 	call	88808 <__sprint_r.part.0>
   89844:	103f891e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89848:	d8801c17 	ldw	r2,112(sp)
   8984c:	d811883a 	mov	r8,sp
   89850:	003f9506 	br	896a8 <rx_descriptor_end+0xfff89648>
   89854:	d9402117 	ldw	r5,132(sp)
   89858:	d9002017 	ldw	r4,128(sp)
   8985c:	d9801a04 	addi	r6,sp,104
   89860:	00888080 	call	88808 <__sprint_r.part.0>
   89864:	103f811e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89868:	d811883a 	mov	r8,sp
   8986c:	003ced06 	br	88c24 <rx_descriptor_end+0xfff88bc4>
   89870:	d9402117 	ldw	r5,132(sp)
   89874:	d9002017 	ldw	r4,128(sp)
   89878:	d9801a04 	addi	r6,sp,104
   8987c:	da402c15 	stw	r9,176(sp)
   89880:	db802a15 	stw	r14,168(sp)
   89884:	00888080 	call	88808 <__sprint_r.part.0>
   89888:	da402c17 	ldw	r9,176(sp)
   8988c:	db802a17 	ldw	r14,168(sp)
   89890:	103f761e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89894:	d9401b17 	ldw	r5,108(sp)
   89898:	d8801c17 	ldw	r2,112(sp)
   8989c:	d811883a 	mov	r8,sp
   898a0:	29000044 	addi	r4,r5,1
   898a4:	003d5b06 	br	88e14 <rx_descriptor_end+0xfff88db4>
   898a8:	d9402117 	ldw	r5,132(sp)
   898ac:	d9002017 	ldw	r4,128(sp)
   898b0:	d9801a04 	addi	r6,sp,104
   898b4:	da402c15 	stw	r9,176(sp)
   898b8:	00888080 	call	88808 <__sprint_r.part.0>
   898bc:	da402c17 	ldw	r9,176(sp)
   898c0:	103f6a1e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   898c4:	d9401b17 	ldw	r5,108(sp)
   898c8:	d8801c17 	ldw	r2,112(sp)
   898cc:	d811883a 	mov	r8,sp
   898d0:	29000044 	addi	r4,r5,1
   898d4:	003f1006 	br	89518 <rx_descriptor_end+0xfff894b8>
   898d8:	1000c31e 	bne	r2,zero,89be8 <___vfiprintf_internal_r+0x12cc>
   898dc:	01000044 	movi	r4,1
   898e0:	000b883a 	mov	r5,zero
   898e4:	d811883a 	mov	r8,sp
   898e8:	003f0d06 	br	89520 <rx_descriptor_end+0xfff894c0>
   898ec:	d9402117 	ldw	r5,132(sp)
   898f0:	d9002017 	ldw	r4,128(sp)
   898f4:	d9801a04 	addi	r6,sp,104
   898f8:	00888080 	call	88808 <__sprint_r.part.0>
   898fc:	103f5b1e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89900:	d9001b17 	ldw	r4,108(sp)
   89904:	d8801c17 	ldw	r2,112(sp)
   89908:	d811883a 	mov	r8,sp
   8990c:	21000044 	addi	r4,r4,1
   89910:	003d8006 	br	88f14 <rx_descriptor_end+0xfff88eb4>
   89914:	01000274 	movhi	r4,9
   89918:	21080204 	addi	r4,r4,8200
   8991c:	d9002615 	stw	r4,152(sp)
   89920:	d8c02215 	stw	r3,136(sp)
   89924:	1029883a 	mov	r20,r2
   89928:	94c4b03a 	or	r2,r18,r19
   8992c:	103fb21e 	bne	r2,zero,897f8 <rx_descriptor_end+0xfff89798>
   89930:	0039883a 	mov	fp,zero
   89934:	00800084 	movi	r2,2
   89938:	003e6b06 	br	892e8 <rx_descriptor_end+0xfff89288>
   8993c:	da802217 	ldw	r10,136(sp)
   89940:	d8001d85 	stb	zero,118(sp)
   89944:	0027883a 	mov	r19,zero
   89948:	50800104 	addi	r2,r10,4
   8994c:	54800017 	ldw	r18,0(r10)
   89950:	483e6016 	blt	r9,zero,892d4 <rx_descriptor_end+0xfff89274>
   89954:	00ffdfc4 	movi	r3,-129
   89958:	d8802215 	stw	r2,136(sp)
   8995c:	a0e8703a 	and	r20,r20,r3
   89960:	0039883a 	mov	fp,zero
   89964:	903ebb26 	beq	r18,zero,89454 <rx_descriptor_end+0xfff893f4>
   89968:	00800244 	movi	r2,9
   8996c:	14bdee36 	bltu	r2,r18,89128 <rx_descriptor_end+0xfff890c8>
   89970:	003eba06 	br	8945c <rx_descriptor_end+0xfff893fc>
   89974:	00800c04 	movi	r2,48
   89978:	d8c01d45 	stb	r3,117(sp)
   8997c:	d8801d05 	stb	r2,116(sp)
   89980:	d8001d85 	stb	zero,118(sp)
   89984:	a0c00094 	ori	r3,r20,2
   89988:	4800a916 	blt	r9,zero,89c30 <___vfiprintf_internal_r+0x1314>
   8998c:	00bfdfc4 	movi	r2,-129
   89990:	a096703a 	and	r11,r20,r2
   89994:	5d000094 	ori	r20,r11,2
   89998:	0039883a 	mov	fp,zero
   8999c:	003f9706 	br	897fc <rx_descriptor_end+0xfff8979c>
   899a0:	8025883a 	mov	r18,r16
   899a4:	003c2e06 	br	88a60 <rx_descriptor_end+0xfff88a00>
   899a8:	00800274 	movhi	r2,9
   899ac:	10880204 	addi	r2,r2,8200
   899b0:	0039883a 	mov	fp,zero
   899b4:	d8802615 	stw	r2,152(sp)
   899b8:	003f9006 	br	897fc <rx_descriptor_end+0xfff8979c>
   899bc:	04a5c83a 	sub	r18,zero,r18
   899c0:	07000b44 	movi	fp,45
   899c4:	9004c03a 	cmpne	r2,r18,zero
   899c8:	04e7c83a 	sub	r19,zero,r19
   899cc:	df001d85 	stb	fp,118(sp)
   899d0:	98a7c83a 	sub	r19,r19,r2
   899d4:	48009f16 	blt	r9,zero,89c54 <___vfiprintf_internal_r+0x1338>
   899d8:	00bfdfc4 	movi	r2,-129
   899dc:	a0a8703a 	and	r20,r20,r2
   899e0:	003dd006 	br	89124 <rx_descriptor_end+0xfff890c4>
   899e4:	70004c26 	beq	r14,zero,89b18 <___vfiprintf_internal_r+0x11fc>
   899e8:	00800084 	movi	r2,2
   899ec:	d8c01d04 	addi	r3,sp,116
   899f0:	d8c00015 	stw	r3,0(sp)
   899f4:	d8800115 	stw	r2,4(sp)
   899f8:	01000044 	movi	r4,1
   899fc:	d811883a 	mov	r8,sp
   89a00:	003f7306 	br	897d0 <rx_descriptor_end+0xfff89770>
   89a04:	a080100c 	andi	r2,r20,64
   89a08:	da802217 	ldw	r10,136(sp)
   89a0c:	103e0626 	beq	r2,zero,89228 <rx_descriptor_end+0xfff891c8>
   89a10:	5480000f 	ldh	r18,0(r10)
   89a14:	52800104 	addi	r10,r10,4
   89a18:	da802215 	stw	r10,136(sp)
   89a1c:	9027d7fa 	srai	r19,r18,31
   89a20:	9805883a 	mov	r2,r19
   89a24:	003db806 	br	89108 <rx_descriptor_end+0xfff890a8>
   89a28:	a080040c 	andi	r2,r20,16
   89a2c:	1000091e 	bne	r2,zero,89a54 <___vfiprintf_internal_r+0x1138>
   89a30:	a2c0100c 	andi	r11,r20,64
   89a34:	58000726 	beq	r11,zero,89a54 <___vfiprintf_internal_r+0x1138>
   89a38:	da802217 	ldw	r10,136(sp)
   89a3c:	50800017 	ldw	r2,0(r10)
   89a40:	52800104 	addi	r10,r10,4
   89a44:	da802215 	stw	r10,136(sp)
   89a48:	da802317 	ldw	r10,140(sp)
   89a4c:	1280000d 	sth	r10,0(r2)
   89a50:	003be706 	br	889f0 <rx_descriptor_end+0xfff88990>
   89a54:	da802217 	ldw	r10,136(sp)
   89a58:	50800017 	ldw	r2,0(r10)
   89a5c:	52800104 	addi	r10,r10,4
   89a60:	da802215 	stw	r10,136(sp)
   89a64:	da802317 	ldw	r10,140(sp)
   89a68:	12800015 	stw	r10,0(r2)
   89a6c:	003be006 	br	889f0 <rx_descriptor_end+0xfff88990>
   89a70:	a080100c 	andi	r2,r20,64
   89a74:	da802217 	ldw	r10,136(sp)
   89a78:	10003026 	beq	r2,zero,89b3c <___vfiprintf_internal_r+0x1220>
   89a7c:	5480000b 	ldhu	r18,0(r10)
   89a80:	52800104 	addi	r10,r10,4
   89a84:	0027883a 	mov	r19,zero
   89a88:	da802215 	stw	r10,136(sp)
   89a8c:	003d8006 	br	89090 <rx_descriptor_end+0xfff89030>
   89a90:	80c00007 	ldb	r3,0(r16)
   89a94:	003c0006 	br	88a98 <rx_descriptor_end+0xfff88a38>
   89a98:	a080100c 	andi	r2,r20,64
   89a9c:	d8001d85 	stb	zero,118(sp)
   89aa0:	da802217 	ldw	r10,136(sp)
   89aa4:	1000201e 	bne	r2,zero,89b28 <___vfiprintf_internal_r+0x120c>
   89aa8:	50800104 	addi	r2,r10,4
   89aac:	54800017 	ldw	r18,0(r10)
   89ab0:	0027883a 	mov	r19,zero
   89ab4:	483def0e 	bge	r9,zero,89274 <rx_descriptor_end+0xfff89214>
   89ab8:	94c6b03a 	or	r3,r18,r19
   89abc:	d8802215 	stw	r2,136(sp)
   89ac0:	183d4e1e 	bne	r3,zero,88ffc <rx_descriptor_end+0xfff88f9c>
   89ac4:	0039883a 	mov	fp,zero
   89ac8:	0005883a 	mov	r2,zero
   89acc:	003e0606 	br	892e8 <rx_descriptor_end+0xfff89288>
   89ad0:	d9402117 	ldw	r5,132(sp)
   89ad4:	d9002017 	ldw	r4,128(sp)
   89ad8:	d9801a04 	addi	r6,sp,104
   89adc:	da402c15 	stw	r9,176(sp)
   89ae0:	db802a15 	stw	r14,168(sp)
   89ae4:	00888080 	call	88808 <__sprint_r.part.0>
   89ae8:	da402c17 	ldw	r9,176(sp)
   89aec:	db802a17 	ldw	r14,168(sp)
   89af0:	103ede1e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89af4:	d9401b17 	ldw	r5,108(sp)
   89af8:	d8801c17 	ldw	r2,112(sp)
   89afc:	d811883a 	mov	r8,sp
   89b00:	29000044 	addi	r4,r5,1
   89b04:	003e7406 	br	894d8 <rx_descriptor_end+0xfff89478>
   89b08:	00bfffc4 	movi	r2,-1
   89b0c:	003c5806 	br	88c70 <rx_descriptor_end+0xfff88c10>
   89b10:	d811883a 	mov	r8,sp
   89b14:	003ee806 	br	896b8 <rx_descriptor_end+0xfff89658>
   89b18:	000b883a 	mov	r5,zero
   89b1c:	01000044 	movi	r4,1
   89b20:	d811883a 	mov	r8,sp
   89b24:	003e7c06 	br	89518 <rx_descriptor_end+0xfff894b8>
   89b28:	50800104 	addi	r2,r10,4
   89b2c:	5480000b 	ldhu	r18,0(r10)
   89b30:	0027883a 	mov	r19,zero
   89b34:	483dcf0e 	bge	r9,zero,89274 <rx_descriptor_end+0xfff89214>
   89b38:	003fdf06 	br	89ab8 <rx_descriptor_end+0xfff89a58>
   89b3c:	54800017 	ldw	r18,0(r10)
   89b40:	52800104 	addi	r10,r10,4
   89b44:	0027883a 	mov	r19,zero
   89b48:	da802215 	stw	r10,136(sp)
   89b4c:	003d5006 	br	89090 <rx_descriptor_end+0xfff89030>
   89b50:	50800104 	addi	r2,r10,4
   89b54:	5480000b 	ldhu	r18,0(r10)
   89b58:	0027883a 	mov	r19,zero
   89b5c:	483f7d0e 	bge	r9,zero,89954 <rx_descriptor_end+0xfff898f4>
   89b60:	003ddc06 	br	892d4 <rx_descriptor_end+0xfff89274>
   89b64:	d8c02215 	stw	r3,136(sp)
   89b68:	0039883a 	mov	fp,zero
   89b6c:	003ddb06 	br	892dc <rx_descriptor_end+0xfff8927c>
   89b70:	02800274 	movhi	r10,9
   89b74:	52886204 	addi	r10,r10,8584
   89b78:	da802415 	stw	r10,144(sp)
   89b7c:	003e8306 	br	8958c <rx_descriptor_end+0xfff8952c>
   89b80:	d8801c17 	ldw	r2,112(sp)
   89b84:	dd002117 	ldw	r20,132(sp)
   89b88:	103eb926 	beq	r2,zero,89670 <rx_descriptor_end+0xfff89610>
   89b8c:	d9002017 	ldw	r4,128(sp)
   89b90:	d9801a04 	addi	r6,sp,104
   89b94:	a00b883a 	mov	r5,r20
   89b98:	00888080 	call	88808 <__sprint_r.part.0>
   89b9c:	003eb406 	br	89670 <rx_descriptor_end+0xfff89610>
   89ba0:	80c00043 	ldbu	r3,1(r16)
   89ba4:	a5000814 	ori	r20,r20,32
   89ba8:	84000044 	addi	r16,r16,1
   89bac:	18c03fcc 	andi	r3,r3,255
   89bb0:	18c0201c 	xori	r3,r3,128
   89bb4:	18ffe004 	addi	r3,r3,-128
   89bb8:	003bb706 	br	88a98 <rx_descriptor_end+0xfff88a38>
   89bbc:	a809883a 	mov	r4,r21
   89bc0:	d8c02a15 	stw	r3,168(sp)
   89bc4:	da002b15 	stw	r8,172(sp)
   89bc8:	00887700 	call	88770 <strlen>
   89bcc:	d8c02a17 	ldw	r3,168(sp)
   89bd0:	1027883a 	mov	r19,r2
   89bd4:	df001d83 	ldbu	fp,118(sp)
   89bd8:	d8c02215 	stw	r3,136(sp)
   89bdc:	0013883a 	mov	r9,zero
   89be0:	da002b17 	ldw	r8,172(sp)
   89be4:	003c4d06 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   89be8:	d9402117 	ldw	r5,132(sp)
   89bec:	d9002017 	ldw	r4,128(sp)
   89bf0:	d9801a04 	addi	r6,sp,104
   89bf4:	da402c15 	stw	r9,176(sp)
   89bf8:	00888080 	call	88808 <__sprint_r.part.0>
   89bfc:	da402c17 	ldw	r9,176(sp)
   89c00:	103e9a1e 	bne	r2,zero,8966c <rx_descriptor_end+0xfff8960c>
   89c04:	d9401b17 	ldw	r5,108(sp)
   89c08:	d8801c17 	ldw	r2,112(sp)
   89c0c:	d811883a 	mov	r8,sp
   89c10:	29000044 	addi	r4,r5,1
   89c14:	003e4206 	br	89520 <rx_descriptor_end+0xfff894c0>
   89c18:	d9401b17 	ldw	r5,108(sp)
   89c1c:	01000274 	movhi	r4,9
   89c20:	21086604 	addi	r4,r4,8600
   89c24:	d9002415 	stw	r4,144(sp)
   89c28:	29400044 	addi	r5,r5,1
   89c2c:	003c6d06 	br	88de4 <rx_descriptor_end+0xfff88d84>
   89c30:	0039883a 	mov	fp,zero
   89c34:	00800084 	movi	r2,2
   89c38:	10803fcc 	andi	r2,r2,255
   89c3c:	01000044 	movi	r4,1
   89c40:	11001e26 	beq	r2,r4,89cbc <___vfiprintf_internal_r+0x13a0>
   89c44:	01000084 	movi	r4,2
   89c48:	11001e1e 	bne	r2,r4,89cc4 <___vfiprintf_internal_r+0x13a8>
   89c4c:	1829883a 	mov	r20,r3
   89c50:	003eea06 	br	897fc <rx_descriptor_end+0xfff8979c>
   89c54:	a007883a 	mov	r3,r20
   89c58:	00800044 	movi	r2,1
   89c5c:	003ff606 	br	89c38 <rx_descriptor_end+0xfff89bd8>
   89c60:	00800184 	movi	r2,6
   89c64:	1240012e 	bgeu	r2,r9,89c6c <___vfiprintf_internal_r+0x1350>
   89c68:	1013883a 	mov	r9,r2
   89c6c:	4827883a 	mov	r19,r9
   89c70:	4825883a 	mov	r18,r9
   89c74:	48001516 	blt	r9,zero,89ccc <___vfiprintf_internal_r+0x13b0>
   89c78:	05400274 	movhi	r21,9
   89c7c:	d8c02215 	stw	r3,136(sp)
   89c80:	ad480704 	addi	r21,r21,8220
   89c84:	003d1406 	br	890d8 <rx_descriptor_end+0xfff89078>
   89c88:	02800274 	movhi	r10,9
   89c8c:	52886204 	addi	r10,r10,8584
   89c90:	da802415 	stw	r10,144(sp)
   89c94:	200d883a 	mov	r6,r4
   89c98:	003c9106 	br	88ee0 <rx_descriptor_end+0xfff88e80>
   89c9c:	5021883a 	mov	r16,r10
   89ca0:	0013883a 	mov	r9,zero
   89ca4:	003b7d06 	br	88a9c <rx_descriptor_end+0xfff88a3c>
   89ca8:	4827883a 	mov	r19,r9
   89cac:	df001d83 	ldbu	fp,118(sp)
   89cb0:	d8c02215 	stw	r3,136(sp)
   89cb4:	0013883a 	mov	r9,zero
   89cb8:	003c1806 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   89cbc:	1829883a 	mov	r20,r3
   89cc0:	003d1806 	br	89124 <rx_descriptor_end+0xfff890c4>
   89cc4:	1829883a 	mov	r20,r3
   89cc8:	003ccd06 	br	89000 <rx_descriptor_end+0xfff88fa0>
   89ccc:	0025883a 	mov	r18,zero
   89cd0:	003fe906 	br	89c78 <rx_descriptor_end+0xfff89c18>
   89cd4:	d8802217 	ldw	r2,136(sp)
   89cd8:	80c00043 	ldbu	r3,1(r16)
   89cdc:	5021883a 	mov	r16,r10
   89ce0:	12400017 	ldw	r9,0(r2)
   89ce4:	10800104 	addi	r2,r2,4
   89ce8:	d8802215 	stw	r2,136(sp)
   89cec:	483faf0e 	bge	r9,zero,89bac <rx_descriptor_end+0xfff89b4c>
   89cf0:	18c03fcc 	andi	r3,r3,255
   89cf4:	18c0201c 	xori	r3,r3,128
   89cf8:	027fffc4 	movi	r9,-1
   89cfc:	18ffe004 	addi	r3,r3,-128
   89d00:	003b6506 	br	88a98 <rx_descriptor_end+0xfff88a38>
   89d04:	d9c01d85 	stb	r7,118(sp)
   89d08:	003ca006 	br	88f8c <rx_descriptor_end+0xfff88f2c>
   89d0c:	d9c01d85 	stb	r7,118(sp)
   89d10:	003cad06 	br	88fc8 <rx_descriptor_end+0xfff88f68>
   89d14:	d9c01d85 	stb	r7,118(sp)
   89d18:	003d7d06 	br	89310 <rx_descriptor_end+0xfff892b0>
   89d1c:	d9c01d85 	stb	r7,118(sp)
   89d20:	003d5f06 	br	892a0 <rx_descriptor_end+0xfff89240>
   89d24:	a080004c 	andi	r2,r20,1
   89d28:	0039883a 	mov	fp,zero
   89d2c:	10000526 	beq	r2,zero,89d44 <___vfiprintf_internal_r+0x1428>
   89d30:	00800c04 	movi	r2,48
   89d34:	d88019c5 	stb	r2,103(sp)
   89d38:	dcc02717 	ldw	r19,156(sp)
   89d3c:	dd4019c4 	addi	r21,sp,103
   89d40:	003bf606 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   89d44:	0027883a 	mov	r19,zero
   89d48:	dd401a04 	addi	r21,sp,104
   89d4c:	003bf306 	br	88d1c <rx_descriptor_end+0xfff88cbc>
   89d50:	d9c01d85 	stb	r7,118(sp)
   89d54:	003dc806 	br	89478 <rx_descriptor_end+0xfff89418>
   89d58:	d9c01d85 	stb	r7,118(sp)
   89d5c:	003d3a06 	br	89248 <rx_descriptor_end+0xfff891e8>
   89d60:	d9c01d85 	stb	r7,118(sp)
   89d64:	003d2a06 	br	89210 <rx_descriptor_end+0xfff891b0>
   89d68:	d9c01d85 	stb	r7,118(sp)
   89d6c:	003cde06 	br	890e8 <rx_descriptor_end+0xfff89088>
   89d70:	d9c01d85 	stb	r7,118(sp)
   89d74:	003cbc06 	br	89068 <rx_descriptor_end+0xfff89008>

00089d78 <__vfiprintf_internal>:
   89d78:	00800274 	movhi	r2,9
   89d7c:	10908204 	addi	r2,r2,16904
   89d80:	300f883a 	mov	r7,r6
   89d84:	280d883a 	mov	r6,r5
   89d88:	200b883a 	mov	r5,r4
   89d8c:	11000017 	ldw	r4,0(r2)
   89d90:	008891c1 	jmpi	8891c <___vfiprintf_internal_r>

00089d94 <__sbprintf>:
   89d94:	2880030b 	ldhu	r2,12(r5)
   89d98:	2ac01917 	ldw	r11,100(r5)
   89d9c:	2a80038b 	ldhu	r10,14(r5)
   89da0:	2a400717 	ldw	r9,28(r5)
   89da4:	2a000917 	ldw	r8,36(r5)
   89da8:	defee204 	addi	sp,sp,-1144
   89dac:	00c10004 	movi	r3,1024
   89db0:	dc011a15 	stw	r16,1128(sp)
   89db4:	10bfff4c 	andi	r2,r2,65533
   89db8:	2821883a 	mov	r16,r5
   89dbc:	d8cb883a 	add	r5,sp,r3
   89dc0:	dc811c15 	stw	r18,1136(sp)
   89dc4:	dc411b15 	stw	r17,1132(sp)
   89dc8:	dfc11d15 	stw	ra,1140(sp)
   89dcc:	2025883a 	mov	r18,r4
   89dd0:	d881030d 	sth	r2,1036(sp)
   89dd4:	dac11915 	stw	r11,1124(sp)
   89dd8:	da81038d 	sth	r10,1038(sp)
   89ddc:	da410715 	stw	r9,1052(sp)
   89de0:	da010915 	stw	r8,1060(sp)
   89de4:	dec10015 	stw	sp,1024(sp)
   89de8:	dec10415 	stw	sp,1040(sp)
   89dec:	d8c10215 	stw	r3,1032(sp)
   89df0:	d8c10515 	stw	r3,1044(sp)
   89df4:	d8010615 	stw	zero,1048(sp)
   89df8:	008891c0 	call	8891c <___vfiprintf_internal_r>
   89dfc:	1023883a 	mov	r17,r2
   89e00:	10000416 	blt	r2,zero,89e14 <__sbprintf+0x80>
   89e04:	d9410004 	addi	r5,sp,1024
   89e08:	9009883a 	mov	r4,r18
   89e0c:	0081ba00 	call	81ba0 <_fflush_r>
   89e10:	10000d1e 	bne	r2,zero,89e48 <__sbprintf+0xb4>
   89e14:	d881030b 	ldhu	r2,1036(sp)
   89e18:	1080100c 	andi	r2,r2,64
   89e1c:	10000326 	beq	r2,zero,89e2c <__sbprintf+0x98>
   89e20:	8080030b 	ldhu	r2,12(r16)
   89e24:	10801014 	ori	r2,r2,64
   89e28:	8080030d 	sth	r2,12(r16)
   89e2c:	8805883a 	mov	r2,r17
   89e30:	dfc11d17 	ldw	ra,1140(sp)
   89e34:	dc811c17 	ldw	r18,1136(sp)
   89e38:	dc411b17 	ldw	r17,1132(sp)
   89e3c:	dc011a17 	ldw	r16,1128(sp)
   89e40:	dec11e04 	addi	sp,sp,1144
   89e44:	f800283a 	ret
   89e48:	047fffc4 	movi	r17,-1
   89e4c:	003ff106 	br	89e14 <rx_descriptor_end+0xfff89db4>

00089e50 <_calloc_r>:
   89e50:	298b383a 	mul	r5,r5,r6
   89e54:	defffe04 	addi	sp,sp,-8
   89e58:	dfc00115 	stw	ra,4(sp)
   89e5c:	dc000015 	stw	r16,0(sp)
   89e60:	00825b00 	call	825b0 <_malloc_r>
   89e64:	10002926 	beq	r2,zero,89f0c <_calloc_r+0xbc>
   89e68:	11bfff17 	ldw	r6,-4(r2)
   89e6c:	1021883a 	mov	r16,r2
   89e70:	00bfff04 	movi	r2,-4
   89e74:	308c703a 	and	r6,r6,r2
   89e78:	00c00904 	movi	r3,36
   89e7c:	308d883a 	add	r6,r6,r2
   89e80:	19801636 	bltu	r3,r6,89edc <_calloc_r+0x8c>
   89e84:	008004c4 	movi	r2,19
   89e88:	11800b2e 	bgeu	r2,r6,89eb8 <_calloc_r+0x68>
   89e8c:	80000015 	stw	zero,0(r16)
   89e90:	80000115 	stw	zero,4(r16)
   89e94:	008006c4 	movi	r2,27
   89e98:	11801a2e 	bgeu	r2,r6,89f04 <_calloc_r+0xb4>
   89e9c:	80000215 	stw	zero,8(r16)
   89ea0:	80000315 	stw	zero,12(r16)
   89ea4:	30c0151e 	bne	r6,r3,89efc <_calloc_r+0xac>
   89ea8:	80000415 	stw	zero,16(r16)
   89eac:	80800604 	addi	r2,r16,24
   89eb0:	80000515 	stw	zero,20(r16)
   89eb4:	00000106 	br	89ebc <_calloc_r+0x6c>
   89eb8:	8005883a 	mov	r2,r16
   89ebc:	10000015 	stw	zero,0(r2)
   89ec0:	10000115 	stw	zero,4(r2)
   89ec4:	10000215 	stw	zero,8(r2)
   89ec8:	8005883a 	mov	r2,r16
   89ecc:	dfc00117 	ldw	ra,4(sp)
   89ed0:	dc000017 	ldw	r16,0(sp)
   89ed4:	dec00204 	addi	sp,sp,8
   89ed8:	f800283a 	ret
   89edc:	000b883a 	mov	r5,zero
   89ee0:	8009883a 	mov	r4,r16
   89ee4:	0082f180 	call	82f18 <memset>
   89ee8:	8005883a 	mov	r2,r16
   89eec:	dfc00117 	ldw	ra,4(sp)
   89ef0:	dc000017 	ldw	r16,0(sp)
   89ef4:	dec00204 	addi	sp,sp,8
   89ef8:	f800283a 	ret
   89efc:	80800404 	addi	r2,r16,16
   89f00:	003fee06 	br	89ebc <rx_descriptor_end+0xfff89e5c>
   89f04:	80800204 	addi	r2,r16,8
   89f08:	003fec06 	br	89ebc <rx_descriptor_end+0xfff89e5c>
   89f0c:	0005883a 	mov	r2,zero
   89f10:	003fee06 	br	89ecc <rx_descriptor_end+0xfff89e6c>

00089f14 <__fputwc>:
   89f14:	defff804 	addi	sp,sp,-32
   89f18:	dcc00415 	stw	r19,16(sp)
   89f1c:	dc800315 	stw	r18,12(sp)
   89f20:	dc000115 	stw	r16,4(sp)
   89f24:	dfc00715 	stw	ra,28(sp)
   89f28:	dd400615 	stw	r21,24(sp)
   89f2c:	dd000515 	stw	r20,20(sp)
   89f30:	dc400215 	stw	r17,8(sp)
   89f34:	2027883a 	mov	r19,r4
   89f38:	2825883a 	mov	r18,r5
   89f3c:	3021883a 	mov	r16,r6
   89f40:	00871280 	call	87128 <__locale_mb_cur_max>
   89f44:	00c00044 	movi	r3,1
   89f48:	10c03e26 	beq	r2,r3,8a044 <__fputwc+0x130>
   89f4c:	81c01704 	addi	r7,r16,92
   89f50:	900d883a 	mov	r6,r18
   89f54:	d80b883a 	mov	r5,sp
   89f58:	9809883a 	mov	r4,r19
   89f5c:	008ad440 	call	8ad44 <_wcrtomb_r>
   89f60:	1029883a 	mov	r20,r2
   89f64:	00bfffc4 	movi	r2,-1
   89f68:	a0802026 	beq	r20,r2,89fec <__fputwc+0xd8>
   89f6c:	d9400003 	ldbu	r5,0(sp)
   89f70:	a0001c26 	beq	r20,zero,89fe4 <__fputwc+0xd0>
   89f74:	0023883a 	mov	r17,zero
   89f78:	05400284 	movi	r21,10
   89f7c:	00000906 	br	89fa4 <__fputwc+0x90>
   89f80:	80800017 	ldw	r2,0(r16)
   89f84:	11400005 	stb	r5,0(r2)
   89f88:	80c00017 	ldw	r3,0(r16)
   89f8c:	18c00044 	addi	r3,r3,1
   89f90:	80c00015 	stw	r3,0(r16)
   89f94:	8c400044 	addi	r17,r17,1
   89f98:	dc45883a 	add	r2,sp,r17
   89f9c:	8d00112e 	bgeu	r17,r20,89fe4 <__fputwc+0xd0>
   89fa0:	11400003 	ldbu	r5,0(r2)
   89fa4:	80c00217 	ldw	r3,8(r16)
   89fa8:	18ffffc4 	addi	r3,r3,-1
   89fac:	80c00215 	stw	r3,8(r16)
   89fb0:	183ff30e 	bge	r3,zero,89f80 <rx_descriptor_end+0xfff89f20>
   89fb4:	80800617 	ldw	r2,24(r16)
   89fb8:	18801916 	blt	r3,r2,8a020 <__fputwc+0x10c>
   89fbc:	80800017 	ldw	r2,0(r16)
   89fc0:	11400005 	stb	r5,0(r2)
   89fc4:	80800017 	ldw	r2,0(r16)
   89fc8:	10c00003 	ldbu	r3,0(r2)
   89fcc:	10800044 	addi	r2,r2,1
   89fd0:	1d402326 	beq	r3,r21,8a060 <__fputwc+0x14c>
   89fd4:	80800015 	stw	r2,0(r16)
   89fd8:	8c400044 	addi	r17,r17,1
   89fdc:	dc45883a 	add	r2,sp,r17
   89fe0:	8d3fef36 	bltu	r17,r20,89fa0 <rx_descriptor_end+0xfff89f40>
   89fe4:	9005883a 	mov	r2,r18
   89fe8:	00000406 	br	89ffc <__fputwc+0xe8>
   89fec:	80c0030b 	ldhu	r3,12(r16)
   89ff0:	a005883a 	mov	r2,r20
   89ff4:	18c01014 	ori	r3,r3,64
   89ff8:	80c0030d 	sth	r3,12(r16)
   89ffc:	dfc00717 	ldw	ra,28(sp)
   8a000:	dd400617 	ldw	r21,24(sp)
   8a004:	dd000517 	ldw	r20,20(sp)
   8a008:	dcc00417 	ldw	r19,16(sp)
   8a00c:	dc800317 	ldw	r18,12(sp)
   8a010:	dc400217 	ldw	r17,8(sp)
   8a014:	dc000117 	ldw	r16,4(sp)
   8a018:	dec00804 	addi	sp,sp,32
   8a01c:	f800283a 	ret
   8a020:	800d883a 	mov	r6,r16
   8a024:	29403fcc 	andi	r5,r5,255
   8a028:	9809883a 	mov	r4,r19
   8a02c:	008abec0 	call	8abec <__swbuf_r>
   8a030:	10bfffe0 	cmpeqi	r2,r2,-1
   8a034:	10803fcc 	andi	r2,r2,255
   8a038:	103fd626 	beq	r2,zero,89f94 <rx_descriptor_end+0xfff89f34>
   8a03c:	00bfffc4 	movi	r2,-1
   8a040:	003fee06 	br	89ffc <rx_descriptor_end+0xfff89f9c>
   8a044:	90ffffc4 	addi	r3,r18,-1
   8a048:	01003f84 	movi	r4,254
   8a04c:	20ffbf36 	bltu	r4,r3,89f4c <rx_descriptor_end+0xfff89eec>
   8a050:	900b883a 	mov	r5,r18
   8a054:	dc800005 	stb	r18,0(sp)
   8a058:	1029883a 	mov	r20,r2
   8a05c:	003fc506 	br	89f74 <rx_descriptor_end+0xfff89f14>
   8a060:	800d883a 	mov	r6,r16
   8a064:	a80b883a 	mov	r5,r21
   8a068:	9809883a 	mov	r4,r19
   8a06c:	008abec0 	call	8abec <__swbuf_r>
   8a070:	10bfffe0 	cmpeqi	r2,r2,-1
   8a074:	003fef06 	br	8a034 <rx_descriptor_end+0xfff89fd4>

0008a078 <_fputwc_r>:
   8a078:	3080030b 	ldhu	r2,12(r6)
   8a07c:	10c8000c 	andi	r3,r2,8192
   8a080:	1800051e 	bne	r3,zero,8a098 <_fputwc_r+0x20>
   8a084:	30c01917 	ldw	r3,100(r6)
   8a088:	10880014 	ori	r2,r2,8192
   8a08c:	3080030d 	sth	r2,12(r6)
   8a090:	18880014 	ori	r2,r3,8192
   8a094:	30801915 	stw	r2,100(r6)
   8a098:	0089f141 	jmpi	89f14 <__fputwc>

0008a09c <fputwc>:
   8a09c:	00800274 	movhi	r2,9
   8a0a0:	defffc04 	addi	sp,sp,-16
   8a0a4:	10908204 	addi	r2,r2,16904
   8a0a8:	dc000115 	stw	r16,4(sp)
   8a0ac:	14000017 	ldw	r16,0(r2)
   8a0b0:	dc400215 	stw	r17,8(sp)
   8a0b4:	dfc00315 	stw	ra,12(sp)
   8a0b8:	2023883a 	mov	r17,r4
   8a0bc:	80000226 	beq	r16,zero,8a0c8 <fputwc+0x2c>
   8a0c0:	80800e17 	ldw	r2,56(r16)
   8a0c4:	10001026 	beq	r2,zero,8a108 <fputwc+0x6c>
   8a0c8:	2880030b 	ldhu	r2,12(r5)
   8a0cc:	10c8000c 	andi	r3,r2,8192
   8a0d0:	1800051e 	bne	r3,zero,8a0e8 <fputwc+0x4c>
   8a0d4:	28c01917 	ldw	r3,100(r5)
   8a0d8:	10880014 	ori	r2,r2,8192
   8a0dc:	2880030d 	sth	r2,12(r5)
   8a0e0:	18880014 	ori	r2,r3,8192
   8a0e4:	28801915 	stw	r2,100(r5)
   8a0e8:	280d883a 	mov	r6,r5
   8a0ec:	8009883a 	mov	r4,r16
   8a0f0:	880b883a 	mov	r5,r17
   8a0f4:	dfc00317 	ldw	ra,12(sp)
   8a0f8:	dc400217 	ldw	r17,8(sp)
   8a0fc:	dc000117 	ldw	r16,4(sp)
   8a100:	dec00404 	addi	sp,sp,16
   8a104:	0089f141 	jmpi	89f14 <__fputwc>
   8a108:	8009883a 	mov	r4,r16
   8a10c:	d9400015 	stw	r5,0(sp)
   8a110:	0081f7c0 	call	81f7c <__sinit>
   8a114:	d9400017 	ldw	r5,0(sp)
   8a118:	003feb06 	br	8a0c8 <rx_descriptor_end+0xfff8a068>

0008a11c <_fstat_r>:
   8a11c:	defffd04 	addi	sp,sp,-12
   8a120:	2805883a 	mov	r2,r5
   8a124:	dc000015 	stw	r16,0(sp)
   8a128:	04000274 	movhi	r16,9
   8a12c:	dc400115 	stw	r17,4(sp)
   8a130:	84187a04 	addi	r16,r16,25064
   8a134:	2023883a 	mov	r17,r4
   8a138:	300b883a 	mov	r5,r6
   8a13c:	1009883a 	mov	r4,r2
   8a140:	dfc00215 	stw	ra,8(sp)
   8a144:	80000015 	stw	zero,0(r16)
   8a148:	008e3b40 	call	8e3b4 <fstat>
   8a14c:	00ffffc4 	movi	r3,-1
   8a150:	10c00526 	beq	r2,r3,8a168 <_fstat_r+0x4c>
   8a154:	dfc00217 	ldw	ra,8(sp)
   8a158:	dc400117 	ldw	r17,4(sp)
   8a15c:	dc000017 	ldw	r16,0(sp)
   8a160:	dec00304 	addi	sp,sp,12
   8a164:	f800283a 	ret
   8a168:	80c00017 	ldw	r3,0(r16)
   8a16c:	183ff926 	beq	r3,zero,8a154 <rx_descriptor_end+0xfff8a0f4>
   8a170:	88c00015 	stw	r3,0(r17)
   8a174:	003ff706 	br	8a154 <rx_descriptor_end+0xfff8a0f4>

0008a178 <__sfvwrite_r>:
   8a178:	30800217 	ldw	r2,8(r6)
   8a17c:	10006726 	beq	r2,zero,8a31c <__sfvwrite_r+0x1a4>
   8a180:	28c0030b 	ldhu	r3,12(r5)
   8a184:	defff404 	addi	sp,sp,-48
   8a188:	dd400715 	stw	r21,28(sp)
   8a18c:	dd000615 	stw	r20,24(sp)
   8a190:	dc000215 	stw	r16,8(sp)
   8a194:	dfc00b15 	stw	ra,44(sp)
   8a198:	df000a15 	stw	fp,40(sp)
   8a19c:	ddc00915 	stw	r23,36(sp)
   8a1a0:	dd800815 	stw	r22,32(sp)
   8a1a4:	dcc00515 	stw	r19,20(sp)
   8a1a8:	dc800415 	stw	r18,16(sp)
   8a1ac:	dc400315 	stw	r17,12(sp)
   8a1b0:	1880020c 	andi	r2,r3,8
   8a1b4:	2821883a 	mov	r16,r5
   8a1b8:	202b883a 	mov	r21,r4
   8a1bc:	3029883a 	mov	r20,r6
   8a1c0:	10002726 	beq	r2,zero,8a260 <__sfvwrite_r+0xe8>
   8a1c4:	28800417 	ldw	r2,16(r5)
   8a1c8:	10002526 	beq	r2,zero,8a260 <__sfvwrite_r+0xe8>
   8a1cc:	1880008c 	andi	r2,r3,2
   8a1d0:	a4400017 	ldw	r17,0(r20)
   8a1d4:	10002a26 	beq	r2,zero,8a280 <__sfvwrite_r+0x108>
   8a1d8:	05a00034 	movhi	r22,32768
   8a1dc:	0027883a 	mov	r19,zero
   8a1e0:	0025883a 	mov	r18,zero
   8a1e4:	b5bf0004 	addi	r22,r22,-1024
   8a1e8:	980d883a 	mov	r6,r19
   8a1ec:	a809883a 	mov	r4,r21
   8a1f0:	90004626 	beq	r18,zero,8a30c <__sfvwrite_r+0x194>
   8a1f4:	900f883a 	mov	r7,r18
   8a1f8:	b480022e 	bgeu	r22,r18,8a204 <__sfvwrite_r+0x8c>
   8a1fc:	01e00034 	movhi	r7,32768
   8a200:	39ff0004 	addi	r7,r7,-1024
   8a204:	80800917 	ldw	r2,36(r16)
   8a208:	81400717 	ldw	r5,28(r16)
   8a20c:	103ee83a 	callr	r2
   8a210:	0080570e 	bge	zero,r2,8a370 <__sfvwrite_r+0x1f8>
   8a214:	a0c00217 	ldw	r3,8(r20)
   8a218:	98a7883a 	add	r19,r19,r2
   8a21c:	90a5c83a 	sub	r18,r18,r2
   8a220:	1885c83a 	sub	r2,r3,r2
   8a224:	a0800215 	stw	r2,8(r20)
   8a228:	103fef1e 	bne	r2,zero,8a1e8 <rx_descriptor_end+0xfff8a188>
   8a22c:	0005883a 	mov	r2,zero
   8a230:	dfc00b17 	ldw	ra,44(sp)
   8a234:	df000a17 	ldw	fp,40(sp)
   8a238:	ddc00917 	ldw	r23,36(sp)
   8a23c:	dd800817 	ldw	r22,32(sp)
   8a240:	dd400717 	ldw	r21,28(sp)
   8a244:	dd000617 	ldw	r20,24(sp)
   8a248:	dcc00517 	ldw	r19,20(sp)
   8a24c:	dc800417 	ldw	r18,16(sp)
   8a250:	dc400317 	ldw	r17,12(sp)
   8a254:	dc000217 	ldw	r16,8(sp)
   8a258:	dec00c04 	addi	sp,sp,48
   8a25c:	f800283a 	ret
   8a260:	800b883a 	mov	r5,r16
   8a264:	a809883a 	mov	r4,r21
   8a268:	008556c0 	call	8556c <__swsetup_r>
   8a26c:	1000eb1e 	bne	r2,zero,8a61c <__sfvwrite_r+0x4a4>
   8a270:	80c0030b 	ldhu	r3,12(r16)
   8a274:	a4400017 	ldw	r17,0(r20)
   8a278:	1880008c 	andi	r2,r3,2
   8a27c:	103fd61e 	bne	r2,zero,8a1d8 <rx_descriptor_end+0xfff8a178>
   8a280:	1880004c 	andi	r2,r3,1
   8a284:	10003f1e 	bne	r2,zero,8a384 <__sfvwrite_r+0x20c>
   8a288:	0039883a 	mov	fp,zero
   8a28c:	0025883a 	mov	r18,zero
   8a290:	90001a26 	beq	r18,zero,8a2fc <__sfvwrite_r+0x184>
   8a294:	1880800c 	andi	r2,r3,512
   8a298:	84c00217 	ldw	r19,8(r16)
   8a29c:	10002126 	beq	r2,zero,8a324 <__sfvwrite_r+0x1ac>
   8a2a0:	982f883a 	mov	r23,r19
   8a2a4:	94c09336 	bltu	r18,r19,8a4f4 <__sfvwrite_r+0x37c>
   8a2a8:	1881200c 	andi	r2,r3,1152
   8a2ac:	10009e1e 	bne	r2,zero,8a528 <__sfvwrite_r+0x3b0>
   8a2b0:	81000017 	ldw	r4,0(r16)
   8a2b4:	b80d883a 	mov	r6,r23
   8a2b8:	e00b883a 	mov	r5,fp
   8a2bc:	0082dbc0 	call	82dbc <memmove>
   8a2c0:	80c00217 	ldw	r3,8(r16)
   8a2c4:	81000017 	ldw	r4,0(r16)
   8a2c8:	9005883a 	mov	r2,r18
   8a2cc:	1ce7c83a 	sub	r19,r3,r19
   8a2d0:	25cf883a 	add	r7,r4,r23
   8a2d4:	84c00215 	stw	r19,8(r16)
   8a2d8:	81c00015 	stw	r7,0(r16)
   8a2dc:	a0c00217 	ldw	r3,8(r20)
   8a2e0:	e0b9883a 	add	fp,fp,r2
   8a2e4:	90a5c83a 	sub	r18,r18,r2
   8a2e8:	18a7c83a 	sub	r19,r3,r2
   8a2ec:	a4c00215 	stw	r19,8(r20)
   8a2f0:	983fce26 	beq	r19,zero,8a22c <rx_descriptor_end+0xfff8a1cc>
   8a2f4:	80c0030b 	ldhu	r3,12(r16)
   8a2f8:	903fe61e 	bne	r18,zero,8a294 <rx_descriptor_end+0xfff8a234>
   8a2fc:	8f000017 	ldw	fp,0(r17)
   8a300:	8c800117 	ldw	r18,4(r17)
   8a304:	8c400204 	addi	r17,r17,8
   8a308:	003fe106 	br	8a290 <rx_descriptor_end+0xfff8a230>
   8a30c:	8cc00017 	ldw	r19,0(r17)
   8a310:	8c800117 	ldw	r18,4(r17)
   8a314:	8c400204 	addi	r17,r17,8
   8a318:	003fb306 	br	8a1e8 <rx_descriptor_end+0xfff8a188>
   8a31c:	0005883a 	mov	r2,zero
   8a320:	f800283a 	ret
   8a324:	81000017 	ldw	r4,0(r16)
   8a328:	80800417 	ldw	r2,16(r16)
   8a32c:	11005736 	bltu	r2,r4,8a48c <__sfvwrite_r+0x314>
   8a330:	85c00517 	ldw	r23,20(r16)
   8a334:	95c05536 	bltu	r18,r23,8a48c <__sfvwrite_r+0x314>
   8a338:	00a00034 	movhi	r2,32768
   8a33c:	10bfffc4 	addi	r2,r2,-1
   8a340:	9009883a 	mov	r4,r18
   8a344:	1480012e 	bgeu	r2,r18,8a34c <__sfvwrite_r+0x1d4>
   8a348:	1009883a 	mov	r4,r2
   8a34c:	b80b883a 	mov	r5,r23
   8a350:	008b9dc0 	call	8b9dc <__divsi3>
   8a354:	15cf383a 	mul	r7,r2,r23
   8a358:	81400717 	ldw	r5,28(r16)
   8a35c:	80800917 	ldw	r2,36(r16)
   8a360:	e00d883a 	mov	r6,fp
   8a364:	a809883a 	mov	r4,r21
   8a368:	103ee83a 	callr	r2
   8a36c:	00bfdb16 	blt	zero,r2,8a2dc <rx_descriptor_end+0xfff8a27c>
   8a370:	8080030b 	ldhu	r2,12(r16)
   8a374:	10801014 	ori	r2,r2,64
   8a378:	8080030d 	sth	r2,12(r16)
   8a37c:	00bfffc4 	movi	r2,-1
   8a380:	003fab06 	br	8a230 <rx_descriptor_end+0xfff8a1d0>
   8a384:	0027883a 	mov	r19,zero
   8a388:	0011883a 	mov	r8,zero
   8a38c:	0039883a 	mov	fp,zero
   8a390:	0025883a 	mov	r18,zero
   8a394:	90001f26 	beq	r18,zero,8a414 <__sfvwrite_r+0x29c>
   8a398:	40005a26 	beq	r8,zero,8a504 <__sfvwrite_r+0x38c>
   8a39c:	982d883a 	mov	r22,r19
   8a3a0:	94c0012e 	bgeu	r18,r19,8a3a8 <__sfvwrite_r+0x230>
   8a3a4:	902d883a 	mov	r22,r18
   8a3a8:	81000017 	ldw	r4,0(r16)
   8a3ac:	80800417 	ldw	r2,16(r16)
   8a3b0:	b02f883a 	mov	r23,r22
   8a3b4:	81c00517 	ldw	r7,20(r16)
   8a3b8:	1100032e 	bgeu	r2,r4,8a3c8 <__sfvwrite_r+0x250>
   8a3bc:	80c00217 	ldw	r3,8(r16)
   8a3c0:	38c7883a 	add	r3,r7,r3
   8a3c4:	1d801816 	blt	r3,r22,8a428 <__sfvwrite_r+0x2b0>
   8a3c8:	b1c03e16 	blt	r22,r7,8a4c4 <__sfvwrite_r+0x34c>
   8a3cc:	80800917 	ldw	r2,36(r16)
   8a3d0:	81400717 	ldw	r5,28(r16)
   8a3d4:	e00d883a 	mov	r6,fp
   8a3d8:	da000115 	stw	r8,4(sp)
   8a3dc:	a809883a 	mov	r4,r21
   8a3e0:	103ee83a 	callr	r2
   8a3e4:	102f883a 	mov	r23,r2
   8a3e8:	da000117 	ldw	r8,4(sp)
   8a3ec:	00bfe00e 	bge	zero,r2,8a370 <rx_descriptor_end+0xfff8a310>
   8a3f0:	9de7c83a 	sub	r19,r19,r23
   8a3f4:	98001f26 	beq	r19,zero,8a474 <__sfvwrite_r+0x2fc>
   8a3f8:	a0800217 	ldw	r2,8(r20)
   8a3fc:	e5f9883a 	add	fp,fp,r23
   8a400:	95e5c83a 	sub	r18,r18,r23
   8a404:	15efc83a 	sub	r23,r2,r23
   8a408:	a5c00215 	stw	r23,8(r20)
   8a40c:	b83f8726 	beq	r23,zero,8a22c <rx_descriptor_end+0xfff8a1cc>
   8a410:	903fe11e 	bne	r18,zero,8a398 <rx_descriptor_end+0xfff8a338>
   8a414:	8f000017 	ldw	fp,0(r17)
   8a418:	8c800117 	ldw	r18,4(r17)
   8a41c:	0011883a 	mov	r8,zero
   8a420:	8c400204 	addi	r17,r17,8
   8a424:	003fdb06 	br	8a394 <rx_descriptor_end+0xfff8a334>
   8a428:	180d883a 	mov	r6,r3
   8a42c:	e00b883a 	mov	r5,fp
   8a430:	da000115 	stw	r8,4(sp)
   8a434:	d8c00015 	stw	r3,0(sp)
   8a438:	0082dbc0 	call	82dbc <memmove>
   8a43c:	d8c00017 	ldw	r3,0(sp)
   8a440:	80800017 	ldw	r2,0(r16)
   8a444:	800b883a 	mov	r5,r16
   8a448:	a809883a 	mov	r4,r21
   8a44c:	10c5883a 	add	r2,r2,r3
   8a450:	80800015 	stw	r2,0(r16)
   8a454:	d8c00015 	stw	r3,0(sp)
   8a458:	0081ba00 	call	81ba0 <_fflush_r>
   8a45c:	d8c00017 	ldw	r3,0(sp)
   8a460:	da000117 	ldw	r8,4(sp)
   8a464:	103fc21e 	bne	r2,zero,8a370 <rx_descriptor_end+0xfff8a310>
   8a468:	182f883a 	mov	r23,r3
   8a46c:	9de7c83a 	sub	r19,r19,r23
   8a470:	983fe11e 	bne	r19,zero,8a3f8 <rx_descriptor_end+0xfff8a398>
   8a474:	800b883a 	mov	r5,r16
   8a478:	a809883a 	mov	r4,r21
   8a47c:	0081ba00 	call	81ba0 <_fflush_r>
   8a480:	103fbb1e 	bne	r2,zero,8a370 <rx_descriptor_end+0xfff8a310>
   8a484:	0011883a 	mov	r8,zero
   8a488:	003fdb06 	br	8a3f8 <rx_descriptor_end+0xfff8a398>
   8a48c:	94c0012e 	bgeu	r18,r19,8a494 <__sfvwrite_r+0x31c>
   8a490:	9027883a 	mov	r19,r18
   8a494:	980d883a 	mov	r6,r19
   8a498:	e00b883a 	mov	r5,fp
   8a49c:	0082dbc0 	call	82dbc <memmove>
   8a4a0:	80800217 	ldw	r2,8(r16)
   8a4a4:	80c00017 	ldw	r3,0(r16)
   8a4a8:	14c5c83a 	sub	r2,r2,r19
   8a4ac:	1cc7883a 	add	r3,r3,r19
   8a4b0:	80800215 	stw	r2,8(r16)
   8a4b4:	80c00015 	stw	r3,0(r16)
   8a4b8:	10004326 	beq	r2,zero,8a5c8 <__sfvwrite_r+0x450>
   8a4bc:	9805883a 	mov	r2,r19
   8a4c0:	003f8606 	br	8a2dc <rx_descriptor_end+0xfff8a27c>
   8a4c4:	b00d883a 	mov	r6,r22
   8a4c8:	e00b883a 	mov	r5,fp
   8a4cc:	da000115 	stw	r8,4(sp)
   8a4d0:	0082dbc0 	call	82dbc <memmove>
   8a4d4:	80800217 	ldw	r2,8(r16)
   8a4d8:	80c00017 	ldw	r3,0(r16)
   8a4dc:	da000117 	ldw	r8,4(sp)
   8a4e0:	1585c83a 	sub	r2,r2,r22
   8a4e4:	1dad883a 	add	r22,r3,r22
   8a4e8:	80800215 	stw	r2,8(r16)
   8a4ec:	85800015 	stw	r22,0(r16)
   8a4f0:	003fbf06 	br	8a3f0 <rx_descriptor_end+0xfff8a390>
   8a4f4:	81000017 	ldw	r4,0(r16)
   8a4f8:	9027883a 	mov	r19,r18
   8a4fc:	902f883a 	mov	r23,r18
   8a500:	003f6c06 	br	8a2b4 <rx_descriptor_end+0xfff8a254>
   8a504:	900d883a 	mov	r6,r18
   8a508:	01400284 	movi	r5,10
   8a50c:	e009883a 	mov	r4,fp
   8a510:	00873980 	call	87398 <memchr>
   8a514:	10003e26 	beq	r2,zero,8a610 <__sfvwrite_r+0x498>
   8a518:	10800044 	addi	r2,r2,1
   8a51c:	1727c83a 	sub	r19,r2,fp
   8a520:	02000044 	movi	r8,1
   8a524:	003f9d06 	br	8a39c <rx_descriptor_end+0xfff8a33c>
   8a528:	80800517 	ldw	r2,20(r16)
   8a52c:	81400417 	ldw	r5,16(r16)
   8a530:	81c00017 	ldw	r7,0(r16)
   8a534:	10a7883a 	add	r19,r2,r2
   8a538:	9885883a 	add	r2,r19,r2
   8a53c:	1026d7fa 	srli	r19,r2,31
   8a540:	396dc83a 	sub	r22,r7,r5
   8a544:	b1000044 	addi	r4,r22,1
   8a548:	9885883a 	add	r2,r19,r2
   8a54c:	1027d07a 	srai	r19,r2,1
   8a550:	2485883a 	add	r2,r4,r18
   8a554:	980d883a 	mov	r6,r19
   8a558:	9880022e 	bgeu	r19,r2,8a564 <__sfvwrite_r+0x3ec>
   8a55c:	1027883a 	mov	r19,r2
   8a560:	100d883a 	mov	r6,r2
   8a564:	18c1000c 	andi	r3,r3,1024
   8a568:	18001c26 	beq	r3,zero,8a5dc <__sfvwrite_r+0x464>
   8a56c:	300b883a 	mov	r5,r6
   8a570:	a809883a 	mov	r4,r21
   8a574:	00825b00 	call	825b0 <_malloc_r>
   8a578:	102f883a 	mov	r23,r2
   8a57c:	10002926 	beq	r2,zero,8a624 <__sfvwrite_r+0x4ac>
   8a580:	81400417 	ldw	r5,16(r16)
   8a584:	b00d883a 	mov	r6,r22
   8a588:	1009883a 	mov	r4,r2
   8a58c:	008747c0 	call	8747c <memcpy>
   8a590:	8080030b 	ldhu	r2,12(r16)
   8a594:	00fedfc4 	movi	r3,-1153
   8a598:	10c4703a 	and	r2,r2,r3
   8a59c:	10802014 	ori	r2,r2,128
   8a5a0:	8080030d 	sth	r2,12(r16)
   8a5a4:	bd89883a 	add	r4,r23,r22
   8a5a8:	9d8fc83a 	sub	r7,r19,r22
   8a5ac:	85c00415 	stw	r23,16(r16)
   8a5b0:	84c00515 	stw	r19,20(r16)
   8a5b4:	81000015 	stw	r4,0(r16)
   8a5b8:	9027883a 	mov	r19,r18
   8a5bc:	81c00215 	stw	r7,8(r16)
   8a5c0:	902f883a 	mov	r23,r18
   8a5c4:	003f3b06 	br	8a2b4 <rx_descriptor_end+0xfff8a254>
   8a5c8:	800b883a 	mov	r5,r16
   8a5cc:	a809883a 	mov	r4,r21
   8a5d0:	0081ba00 	call	81ba0 <_fflush_r>
   8a5d4:	103fb926 	beq	r2,zero,8a4bc <rx_descriptor_end+0xfff8a45c>
   8a5d8:	003f6506 	br	8a370 <rx_descriptor_end+0xfff8a310>
   8a5dc:	a809883a 	mov	r4,r21
   8a5e0:	008a6880 	call	8a688 <_realloc_r>
   8a5e4:	102f883a 	mov	r23,r2
   8a5e8:	103fee1e 	bne	r2,zero,8a5a4 <rx_descriptor_end+0xfff8a544>
   8a5ec:	81400417 	ldw	r5,16(r16)
   8a5f0:	a809883a 	mov	r4,r21
   8a5f4:	00820f00 	call	820f0 <_free_r>
   8a5f8:	8080030b 	ldhu	r2,12(r16)
   8a5fc:	00ffdfc4 	movi	r3,-129
   8a600:	1884703a 	and	r2,r3,r2
   8a604:	00c00304 	movi	r3,12
   8a608:	a8c00015 	stw	r3,0(r21)
   8a60c:	003f5906 	br	8a374 <rx_descriptor_end+0xfff8a314>
   8a610:	94c00044 	addi	r19,r18,1
   8a614:	02000044 	movi	r8,1
   8a618:	003f6006 	br	8a39c <rx_descriptor_end+0xfff8a33c>
   8a61c:	00bfffc4 	movi	r2,-1
   8a620:	003f0306 	br	8a230 <rx_descriptor_end+0xfff8a1d0>
   8a624:	00800304 	movi	r2,12
   8a628:	a8800015 	stw	r2,0(r21)
   8a62c:	8080030b 	ldhu	r2,12(r16)
   8a630:	003f5006 	br	8a374 <rx_descriptor_end+0xfff8a314>

0008a634 <_isatty_r>:
   8a634:	defffd04 	addi	sp,sp,-12
   8a638:	dc000015 	stw	r16,0(sp)
   8a63c:	04000274 	movhi	r16,9
   8a640:	dc400115 	stw	r17,4(sp)
   8a644:	84187a04 	addi	r16,r16,25064
   8a648:	2023883a 	mov	r17,r4
   8a64c:	2809883a 	mov	r4,r5
   8a650:	dfc00215 	stw	ra,8(sp)
   8a654:	80000015 	stw	zero,0(r16)
   8a658:	008e4a00 	call	8e4a0 <isatty>
   8a65c:	00ffffc4 	movi	r3,-1
   8a660:	10c00526 	beq	r2,r3,8a678 <_isatty_r+0x44>
   8a664:	dfc00217 	ldw	ra,8(sp)
   8a668:	dc400117 	ldw	r17,4(sp)
   8a66c:	dc000017 	ldw	r16,0(sp)
   8a670:	dec00304 	addi	sp,sp,12
   8a674:	f800283a 	ret
   8a678:	80c00017 	ldw	r3,0(r16)
   8a67c:	183ff926 	beq	r3,zero,8a664 <rx_descriptor_end+0xfff8a604>
   8a680:	88c00015 	stw	r3,0(r17)
   8a684:	003ff706 	br	8a664 <rx_descriptor_end+0xfff8a604>

0008a688 <_realloc_r>:
   8a688:	defff604 	addi	sp,sp,-40
   8a68c:	dc800215 	stw	r18,8(sp)
   8a690:	dfc00915 	stw	ra,36(sp)
   8a694:	df000815 	stw	fp,32(sp)
   8a698:	ddc00715 	stw	r23,28(sp)
   8a69c:	dd800615 	stw	r22,24(sp)
   8a6a0:	dd400515 	stw	r21,20(sp)
   8a6a4:	dd000415 	stw	r20,16(sp)
   8a6a8:	dcc00315 	stw	r19,12(sp)
   8a6ac:	dc400115 	stw	r17,4(sp)
   8a6b0:	dc000015 	stw	r16,0(sp)
   8a6b4:	3025883a 	mov	r18,r6
   8a6b8:	2800b726 	beq	r5,zero,8a998 <_realloc_r+0x310>
   8a6bc:	282b883a 	mov	r21,r5
   8a6c0:	2029883a 	mov	r20,r4
   8a6c4:	008e7bc0 	call	8e7bc <__malloc_lock>
   8a6c8:	a8bfff17 	ldw	r2,-4(r21)
   8a6cc:	043fff04 	movi	r16,-4
   8a6d0:	90c002c4 	addi	r3,r18,11
   8a6d4:	01000584 	movi	r4,22
   8a6d8:	acfffe04 	addi	r19,r21,-8
   8a6dc:	1420703a 	and	r16,r2,r16
   8a6e0:	20c0332e 	bgeu	r4,r3,8a7b0 <_realloc_r+0x128>
   8a6e4:	047ffe04 	movi	r17,-8
   8a6e8:	1c62703a 	and	r17,r3,r17
   8a6ec:	8807883a 	mov	r3,r17
   8a6f0:	88005816 	blt	r17,zero,8a854 <_realloc_r+0x1cc>
   8a6f4:	8c805736 	bltu	r17,r18,8a854 <_realloc_r+0x1cc>
   8a6f8:	80c0300e 	bge	r16,r3,8a7bc <_realloc_r+0x134>
   8a6fc:	07000274 	movhi	fp,9
   8a700:	e70ac604 	addi	fp,fp,11032
   8a704:	e1c00217 	ldw	r7,8(fp)
   8a708:	9c09883a 	add	r4,r19,r16
   8a70c:	22000117 	ldw	r8,4(r4)
   8a710:	21c06326 	beq	r4,r7,8a8a0 <_realloc_r+0x218>
   8a714:	017fff84 	movi	r5,-2
   8a718:	414a703a 	and	r5,r8,r5
   8a71c:	214b883a 	add	r5,r4,r5
   8a720:	29800117 	ldw	r6,4(r5)
   8a724:	3180004c 	andi	r6,r6,1
   8a728:	30003f26 	beq	r6,zero,8a828 <_realloc_r+0x1a0>
   8a72c:	1080004c 	andi	r2,r2,1
   8a730:	10008326 	beq	r2,zero,8a940 <_realloc_r+0x2b8>
   8a734:	900b883a 	mov	r5,r18
   8a738:	a009883a 	mov	r4,r20
   8a73c:	00825b00 	call	825b0 <_malloc_r>
   8a740:	1025883a 	mov	r18,r2
   8a744:	10011e26 	beq	r2,zero,8abc0 <_realloc_r+0x538>
   8a748:	a93fff17 	ldw	r4,-4(r21)
   8a74c:	10fffe04 	addi	r3,r2,-8
   8a750:	00bfff84 	movi	r2,-2
   8a754:	2084703a 	and	r2,r4,r2
   8a758:	9885883a 	add	r2,r19,r2
   8a75c:	1880ee26 	beq	r3,r2,8ab18 <_realloc_r+0x490>
   8a760:	81bfff04 	addi	r6,r16,-4
   8a764:	00800904 	movi	r2,36
   8a768:	1180b836 	bltu	r2,r6,8aa4c <_realloc_r+0x3c4>
   8a76c:	00c004c4 	movi	r3,19
   8a770:	19809636 	bltu	r3,r6,8a9cc <_realloc_r+0x344>
   8a774:	9005883a 	mov	r2,r18
   8a778:	a807883a 	mov	r3,r21
   8a77c:	19000017 	ldw	r4,0(r3)
   8a780:	11000015 	stw	r4,0(r2)
   8a784:	19000117 	ldw	r4,4(r3)
   8a788:	11000115 	stw	r4,4(r2)
   8a78c:	18c00217 	ldw	r3,8(r3)
   8a790:	10c00215 	stw	r3,8(r2)
   8a794:	a80b883a 	mov	r5,r21
   8a798:	a009883a 	mov	r4,r20
   8a79c:	00820f00 	call	820f0 <_free_r>
   8a7a0:	a009883a 	mov	r4,r20
   8a7a4:	008e7e00 	call	8e7e0 <__malloc_unlock>
   8a7a8:	9005883a 	mov	r2,r18
   8a7ac:	00001206 	br	8a7f8 <_realloc_r+0x170>
   8a7b0:	00c00404 	movi	r3,16
   8a7b4:	1823883a 	mov	r17,r3
   8a7b8:	003fce06 	br	8a6f4 <rx_descriptor_end+0xfff8a694>
   8a7bc:	a825883a 	mov	r18,r21
   8a7c0:	8445c83a 	sub	r2,r16,r17
   8a7c4:	00c003c4 	movi	r3,15
   8a7c8:	18802636 	bltu	r3,r2,8a864 <_realloc_r+0x1dc>
   8a7cc:	99800117 	ldw	r6,4(r19)
   8a7d0:	9c07883a 	add	r3,r19,r16
   8a7d4:	3180004c 	andi	r6,r6,1
   8a7d8:	3420b03a 	or	r16,r6,r16
   8a7dc:	9c000115 	stw	r16,4(r19)
   8a7e0:	18800117 	ldw	r2,4(r3)
   8a7e4:	10800054 	ori	r2,r2,1
   8a7e8:	18800115 	stw	r2,4(r3)
   8a7ec:	a009883a 	mov	r4,r20
   8a7f0:	008e7e00 	call	8e7e0 <__malloc_unlock>
   8a7f4:	9005883a 	mov	r2,r18
   8a7f8:	dfc00917 	ldw	ra,36(sp)
   8a7fc:	df000817 	ldw	fp,32(sp)
   8a800:	ddc00717 	ldw	r23,28(sp)
   8a804:	dd800617 	ldw	r22,24(sp)
   8a808:	dd400517 	ldw	r21,20(sp)
   8a80c:	dd000417 	ldw	r20,16(sp)
   8a810:	dcc00317 	ldw	r19,12(sp)
   8a814:	dc800217 	ldw	r18,8(sp)
   8a818:	dc400117 	ldw	r17,4(sp)
   8a81c:	dc000017 	ldw	r16,0(sp)
   8a820:	dec00a04 	addi	sp,sp,40
   8a824:	f800283a 	ret
   8a828:	017fff04 	movi	r5,-4
   8a82c:	414a703a 	and	r5,r8,r5
   8a830:	814d883a 	add	r6,r16,r5
   8a834:	30c01f16 	blt	r6,r3,8a8b4 <_realloc_r+0x22c>
   8a838:	20800317 	ldw	r2,12(r4)
   8a83c:	20c00217 	ldw	r3,8(r4)
   8a840:	a825883a 	mov	r18,r21
   8a844:	3021883a 	mov	r16,r6
   8a848:	18800315 	stw	r2,12(r3)
   8a84c:	10c00215 	stw	r3,8(r2)
   8a850:	003fdb06 	br	8a7c0 <rx_descriptor_end+0xfff8a760>
   8a854:	00800304 	movi	r2,12
   8a858:	a0800015 	stw	r2,0(r20)
   8a85c:	0005883a 	mov	r2,zero
   8a860:	003fe506 	br	8a7f8 <rx_descriptor_end+0xfff8a798>
   8a864:	98c00117 	ldw	r3,4(r19)
   8a868:	9c4b883a 	add	r5,r19,r17
   8a86c:	11000054 	ori	r4,r2,1
   8a870:	18c0004c 	andi	r3,r3,1
   8a874:	1c62b03a 	or	r17,r3,r17
   8a878:	9c400115 	stw	r17,4(r19)
   8a87c:	29000115 	stw	r4,4(r5)
   8a880:	2885883a 	add	r2,r5,r2
   8a884:	10c00117 	ldw	r3,4(r2)
   8a888:	29400204 	addi	r5,r5,8
   8a88c:	a009883a 	mov	r4,r20
   8a890:	18c00054 	ori	r3,r3,1
   8a894:	10c00115 	stw	r3,4(r2)
   8a898:	00820f00 	call	820f0 <_free_r>
   8a89c:	003fd306 	br	8a7ec <rx_descriptor_end+0xfff8a78c>
   8a8a0:	017fff04 	movi	r5,-4
   8a8a4:	414a703a 	and	r5,r8,r5
   8a8a8:	89800404 	addi	r6,r17,16
   8a8ac:	8151883a 	add	r8,r16,r5
   8a8b0:	4180590e 	bge	r8,r6,8aa18 <_realloc_r+0x390>
   8a8b4:	1080004c 	andi	r2,r2,1
   8a8b8:	103f9e1e 	bne	r2,zero,8a734 <rx_descriptor_end+0xfff8a6d4>
   8a8bc:	adbffe17 	ldw	r22,-8(r21)
   8a8c0:	00bfff04 	movi	r2,-4
   8a8c4:	9dadc83a 	sub	r22,r19,r22
   8a8c8:	b1800117 	ldw	r6,4(r22)
   8a8cc:	3084703a 	and	r2,r6,r2
   8a8d0:	20002026 	beq	r4,zero,8a954 <_realloc_r+0x2cc>
   8a8d4:	80af883a 	add	r23,r16,r2
   8a8d8:	b96f883a 	add	r23,r23,r5
   8a8dc:	21c05f26 	beq	r4,r7,8aa5c <_realloc_r+0x3d4>
   8a8e0:	b8c01c16 	blt	r23,r3,8a954 <_realloc_r+0x2cc>
   8a8e4:	20800317 	ldw	r2,12(r4)
   8a8e8:	20c00217 	ldw	r3,8(r4)
   8a8ec:	81bfff04 	addi	r6,r16,-4
   8a8f0:	01000904 	movi	r4,36
   8a8f4:	18800315 	stw	r2,12(r3)
   8a8f8:	10c00215 	stw	r3,8(r2)
   8a8fc:	b0c00217 	ldw	r3,8(r22)
   8a900:	b0800317 	ldw	r2,12(r22)
   8a904:	b4800204 	addi	r18,r22,8
   8a908:	18800315 	stw	r2,12(r3)
   8a90c:	10c00215 	stw	r3,8(r2)
   8a910:	21801b36 	bltu	r4,r6,8a980 <_realloc_r+0x2f8>
   8a914:	008004c4 	movi	r2,19
   8a918:	1180352e 	bgeu	r2,r6,8a9f0 <_realloc_r+0x368>
   8a91c:	a8800017 	ldw	r2,0(r21)
   8a920:	b0800215 	stw	r2,8(r22)
   8a924:	a8800117 	ldw	r2,4(r21)
   8a928:	b0800315 	stw	r2,12(r22)
   8a92c:	008006c4 	movi	r2,27
   8a930:	11807f36 	bltu	r2,r6,8ab30 <_realloc_r+0x4a8>
   8a934:	b0800404 	addi	r2,r22,16
   8a938:	ad400204 	addi	r21,r21,8
   8a93c:	00002d06 	br	8a9f4 <_realloc_r+0x36c>
   8a940:	adbffe17 	ldw	r22,-8(r21)
   8a944:	00bfff04 	movi	r2,-4
   8a948:	9dadc83a 	sub	r22,r19,r22
   8a94c:	b1000117 	ldw	r4,4(r22)
   8a950:	2084703a 	and	r2,r4,r2
   8a954:	b03f7726 	beq	r22,zero,8a734 <rx_descriptor_end+0xfff8a6d4>
   8a958:	80af883a 	add	r23,r16,r2
   8a95c:	b8ff7516 	blt	r23,r3,8a734 <rx_descriptor_end+0xfff8a6d4>
   8a960:	b0800317 	ldw	r2,12(r22)
   8a964:	b0c00217 	ldw	r3,8(r22)
   8a968:	81bfff04 	addi	r6,r16,-4
   8a96c:	01000904 	movi	r4,36
   8a970:	18800315 	stw	r2,12(r3)
   8a974:	10c00215 	stw	r3,8(r2)
   8a978:	b4800204 	addi	r18,r22,8
   8a97c:	21bfe52e 	bgeu	r4,r6,8a914 <rx_descriptor_end+0xfff8a8b4>
   8a980:	a80b883a 	mov	r5,r21
   8a984:	9009883a 	mov	r4,r18
   8a988:	0082dbc0 	call	82dbc <memmove>
   8a98c:	b821883a 	mov	r16,r23
   8a990:	b027883a 	mov	r19,r22
   8a994:	003f8a06 	br	8a7c0 <rx_descriptor_end+0xfff8a760>
   8a998:	300b883a 	mov	r5,r6
   8a99c:	dfc00917 	ldw	ra,36(sp)
   8a9a0:	df000817 	ldw	fp,32(sp)
   8a9a4:	ddc00717 	ldw	r23,28(sp)
   8a9a8:	dd800617 	ldw	r22,24(sp)
   8a9ac:	dd400517 	ldw	r21,20(sp)
   8a9b0:	dd000417 	ldw	r20,16(sp)
   8a9b4:	dcc00317 	ldw	r19,12(sp)
   8a9b8:	dc800217 	ldw	r18,8(sp)
   8a9bc:	dc400117 	ldw	r17,4(sp)
   8a9c0:	dc000017 	ldw	r16,0(sp)
   8a9c4:	dec00a04 	addi	sp,sp,40
   8a9c8:	00825b01 	jmpi	825b0 <_malloc_r>
   8a9cc:	a8c00017 	ldw	r3,0(r21)
   8a9d0:	90c00015 	stw	r3,0(r18)
   8a9d4:	a8c00117 	ldw	r3,4(r21)
   8a9d8:	90c00115 	stw	r3,4(r18)
   8a9dc:	00c006c4 	movi	r3,27
   8a9e0:	19804536 	bltu	r3,r6,8aaf8 <_realloc_r+0x470>
   8a9e4:	90800204 	addi	r2,r18,8
   8a9e8:	a8c00204 	addi	r3,r21,8
   8a9ec:	003f6306 	br	8a77c <rx_descriptor_end+0xfff8a71c>
   8a9f0:	9005883a 	mov	r2,r18
   8a9f4:	a8c00017 	ldw	r3,0(r21)
   8a9f8:	b821883a 	mov	r16,r23
   8a9fc:	b027883a 	mov	r19,r22
   8aa00:	10c00015 	stw	r3,0(r2)
   8aa04:	a8c00117 	ldw	r3,4(r21)
   8aa08:	10c00115 	stw	r3,4(r2)
   8aa0c:	a8c00217 	ldw	r3,8(r21)
   8aa10:	10c00215 	stw	r3,8(r2)
   8aa14:	003f6a06 	br	8a7c0 <rx_descriptor_end+0xfff8a760>
   8aa18:	9c67883a 	add	r19,r19,r17
   8aa1c:	4445c83a 	sub	r2,r8,r17
   8aa20:	e4c00215 	stw	r19,8(fp)
   8aa24:	10800054 	ori	r2,r2,1
   8aa28:	98800115 	stw	r2,4(r19)
   8aa2c:	a8bfff17 	ldw	r2,-4(r21)
   8aa30:	a009883a 	mov	r4,r20
   8aa34:	1080004c 	andi	r2,r2,1
   8aa38:	1462b03a 	or	r17,r2,r17
   8aa3c:	ac7fff15 	stw	r17,-4(r21)
   8aa40:	008e7e00 	call	8e7e0 <__malloc_unlock>
   8aa44:	a805883a 	mov	r2,r21
   8aa48:	003f6b06 	br	8a7f8 <rx_descriptor_end+0xfff8a798>
   8aa4c:	a80b883a 	mov	r5,r21
   8aa50:	9009883a 	mov	r4,r18
   8aa54:	0082dbc0 	call	82dbc <memmove>
   8aa58:	003f4e06 	br	8a794 <rx_descriptor_end+0xfff8a734>
   8aa5c:	89000404 	addi	r4,r17,16
   8aa60:	b93fbc16 	blt	r23,r4,8a954 <rx_descriptor_end+0xfff8a8f4>
   8aa64:	b0800317 	ldw	r2,12(r22)
   8aa68:	b0c00217 	ldw	r3,8(r22)
   8aa6c:	81bfff04 	addi	r6,r16,-4
   8aa70:	01000904 	movi	r4,36
   8aa74:	18800315 	stw	r2,12(r3)
   8aa78:	10c00215 	stw	r3,8(r2)
   8aa7c:	b4800204 	addi	r18,r22,8
   8aa80:	21804336 	bltu	r4,r6,8ab90 <_realloc_r+0x508>
   8aa84:	008004c4 	movi	r2,19
   8aa88:	11803f2e 	bgeu	r2,r6,8ab88 <_realloc_r+0x500>
   8aa8c:	a8800017 	ldw	r2,0(r21)
   8aa90:	b0800215 	stw	r2,8(r22)
   8aa94:	a8800117 	ldw	r2,4(r21)
   8aa98:	b0800315 	stw	r2,12(r22)
   8aa9c:	008006c4 	movi	r2,27
   8aaa0:	11803f36 	bltu	r2,r6,8aba0 <_realloc_r+0x518>
   8aaa4:	b0800404 	addi	r2,r22,16
   8aaa8:	ad400204 	addi	r21,r21,8
   8aaac:	a8c00017 	ldw	r3,0(r21)
   8aab0:	10c00015 	stw	r3,0(r2)
   8aab4:	a8c00117 	ldw	r3,4(r21)
   8aab8:	10c00115 	stw	r3,4(r2)
   8aabc:	a8c00217 	ldw	r3,8(r21)
   8aac0:	10c00215 	stw	r3,8(r2)
   8aac4:	b447883a 	add	r3,r22,r17
   8aac8:	bc45c83a 	sub	r2,r23,r17
   8aacc:	e0c00215 	stw	r3,8(fp)
   8aad0:	10800054 	ori	r2,r2,1
   8aad4:	18800115 	stw	r2,4(r3)
   8aad8:	b0800117 	ldw	r2,4(r22)
   8aadc:	a009883a 	mov	r4,r20
   8aae0:	1080004c 	andi	r2,r2,1
   8aae4:	1462b03a 	or	r17,r2,r17
   8aae8:	b4400115 	stw	r17,4(r22)
   8aaec:	008e7e00 	call	8e7e0 <__malloc_unlock>
   8aaf0:	9005883a 	mov	r2,r18
   8aaf4:	003f4006 	br	8a7f8 <rx_descriptor_end+0xfff8a798>
   8aaf8:	a8c00217 	ldw	r3,8(r21)
   8aafc:	90c00215 	stw	r3,8(r18)
   8ab00:	a8c00317 	ldw	r3,12(r21)
   8ab04:	90c00315 	stw	r3,12(r18)
   8ab08:	30801126 	beq	r6,r2,8ab50 <_realloc_r+0x4c8>
   8ab0c:	90800404 	addi	r2,r18,16
   8ab10:	a8c00404 	addi	r3,r21,16
   8ab14:	003f1906 	br	8a77c <rx_descriptor_end+0xfff8a71c>
   8ab18:	90ffff17 	ldw	r3,-4(r18)
   8ab1c:	00bfff04 	movi	r2,-4
   8ab20:	a825883a 	mov	r18,r21
   8ab24:	1884703a 	and	r2,r3,r2
   8ab28:	80a1883a 	add	r16,r16,r2
   8ab2c:	003f2406 	br	8a7c0 <rx_descriptor_end+0xfff8a760>
   8ab30:	a8800217 	ldw	r2,8(r21)
   8ab34:	b0800415 	stw	r2,16(r22)
   8ab38:	a8800317 	ldw	r2,12(r21)
   8ab3c:	b0800515 	stw	r2,20(r22)
   8ab40:	31000a26 	beq	r6,r4,8ab6c <_realloc_r+0x4e4>
   8ab44:	b0800604 	addi	r2,r22,24
   8ab48:	ad400404 	addi	r21,r21,16
   8ab4c:	003fa906 	br	8a9f4 <rx_descriptor_end+0xfff8a994>
   8ab50:	a9000417 	ldw	r4,16(r21)
   8ab54:	90800604 	addi	r2,r18,24
   8ab58:	a8c00604 	addi	r3,r21,24
   8ab5c:	91000415 	stw	r4,16(r18)
   8ab60:	a9000517 	ldw	r4,20(r21)
   8ab64:	91000515 	stw	r4,20(r18)
   8ab68:	003f0406 	br	8a77c <rx_descriptor_end+0xfff8a71c>
   8ab6c:	a8c00417 	ldw	r3,16(r21)
   8ab70:	ad400604 	addi	r21,r21,24
   8ab74:	b0800804 	addi	r2,r22,32
   8ab78:	b0c00615 	stw	r3,24(r22)
   8ab7c:	a8ffff17 	ldw	r3,-4(r21)
   8ab80:	b0c00715 	stw	r3,28(r22)
   8ab84:	003f9b06 	br	8a9f4 <rx_descriptor_end+0xfff8a994>
   8ab88:	9005883a 	mov	r2,r18
   8ab8c:	003fc706 	br	8aaac <rx_descriptor_end+0xfff8aa4c>
   8ab90:	a80b883a 	mov	r5,r21
   8ab94:	9009883a 	mov	r4,r18
   8ab98:	0082dbc0 	call	82dbc <memmove>
   8ab9c:	003fc906 	br	8aac4 <rx_descriptor_end+0xfff8aa64>
   8aba0:	a8800217 	ldw	r2,8(r21)
   8aba4:	b0800415 	stw	r2,16(r22)
   8aba8:	a8800317 	ldw	r2,12(r21)
   8abac:	b0800515 	stw	r2,20(r22)
   8abb0:	31000726 	beq	r6,r4,8abd0 <_realloc_r+0x548>
   8abb4:	b0800604 	addi	r2,r22,24
   8abb8:	ad400404 	addi	r21,r21,16
   8abbc:	003fbb06 	br	8aaac <rx_descriptor_end+0xfff8aa4c>
   8abc0:	a009883a 	mov	r4,r20
   8abc4:	008e7e00 	call	8e7e0 <__malloc_unlock>
   8abc8:	0005883a 	mov	r2,zero
   8abcc:	003f0a06 	br	8a7f8 <rx_descriptor_end+0xfff8a798>
   8abd0:	a8c00417 	ldw	r3,16(r21)
   8abd4:	ad400604 	addi	r21,r21,24
   8abd8:	b0800804 	addi	r2,r22,32
   8abdc:	b0c00615 	stw	r3,24(r22)
   8abe0:	a8ffff17 	ldw	r3,-4(r21)
   8abe4:	b0c00715 	stw	r3,28(r22)
   8abe8:	003fb006 	br	8aaac <rx_descriptor_end+0xfff8aa4c>

0008abec <__swbuf_r>:
   8abec:	defffb04 	addi	sp,sp,-20
   8abf0:	dcc00315 	stw	r19,12(sp)
   8abf4:	dc800215 	stw	r18,8(sp)
   8abf8:	dc000015 	stw	r16,0(sp)
   8abfc:	dfc00415 	stw	ra,16(sp)
   8ac00:	dc400115 	stw	r17,4(sp)
   8ac04:	2025883a 	mov	r18,r4
   8ac08:	2827883a 	mov	r19,r5
   8ac0c:	3021883a 	mov	r16,r6
   8ac10:	20000226 	beq	r4,zero,8ac1c <__swbuf_r+0x30>
   8ac14:	20800e17 	ldw	r2,56(r4)
   8ac18:	10004226 	beq	r2,zero,8ad24 <__swbuf_r+0x138>
   8ac1c:	80800617 	ldw	r2,24(r16)
   8ac20:	8100030b 	ldhu	r4,12(r16)
   8ac24:	80800215 	stw	r2,8(r16)
   8ac28:	2080020c 	andi	r2,r4,8
   8ac2c:	10003626 	beq	r2,zero,8ad08 <__swbuf_r+0x11c>
   8ac30:	80c00417 	ldw	r3,16(r16)
   8ac34:	18003426 	beq	r3,zero,8ad08 <__swbuf_r+0x11c>
   8ac38:	2088000c 	andi	r2,r4,8192
   8ac3c:	9c403fcc 	andi	r17,r19,255
   8ac40:	10001a26 	beq	r2,zero,8acac <__swbuf_r+0xc0>
   8ac44:	80800017 	ldw	r2,0(r16)
   8ac48:	81000517 	ldw	r4,20(r16)
   8ac4c:	10c7c83a 	sub	r3,r2,r3
   8ac50:	1900200e 	bge	r3,r4,8acd4 <__swbuf_r+0xe8>
   8ac54:	18c00044 	addi	r3,r3,1
   8ac58:	81000217 	ldw	r4,8(r16)
   8ac5c:	11400044 	addi	r5,r2,1
   8ac60:	81400015 	stw	r5,0(r16)
   8ac64:	213fffc4 	addi	r4,r4,-1
   8ac68:	81000215 	stw	r4,8(r16)
   8ac6c:	14c00005 	stb	r19,0(r2)
   8ac70:	80800517 	ldw	r2,20(r16)
   8ac74:	10c01e26 	beq	r2,r3,8acf0 <__swbuf_r+0x104>
   8ac78:	8080030b 	ldhu	r2,12(r16)
   8ac7c:	1080004c 	andi	r2,r2,1
   8ac80:	10000226 	beq	r2,zero,8ac8c <__swbuf_r+0xa0>
   8ac84:	00800284 	movi	r2,10
   8ac88:	88801926 	beq	r17,r2,8acf0 <__swbuf_r+0x104>
   8ac8c:	8805883a 	mov	r2,r17
   8ac90:	dfc00417 	ldw	ra,16(sp)
   8ac94:	dcc00317 	ldw	r19,12(sp)
   8ac98:	dc800217 	ldw	r18,8(sp)
   8ac9c:	dc400117 	ldw	r17,4(sp)
   8aca0:	dc000017 	ldw	r16,0(sp)
   8aca4:	dec00504 	addi	sp,sp,20
   8aca8:	f800283a 	ret
   8acac:	81401917 	ldw	r5,100(r16)
   8acb0:	00b7ffc4 	movi	r2,-8193
   8acb4:	21080014 	ori	r4,r4,8192
   8acb8:	2884703a 	and	r2,r5,r2
   8acbc:	80801915 	stw	r2,100(r16)
   8acc0:	80800017 	ldw	r2,0(r16)
   8acc4:	8100030d 	sth	r4,12(r16)
   8acc8:	81000517 	ldw	r4,20(r16)
   8accc:	10c7c83a 	sub	r3,r2,r3
   8acd0:	193fe016 	blt	r3,r4,8ac54 <rx_descriptor_end+0xfff8abf4>
   8acd4:	800b883a 	mov	r5,r16
   8acd8:	9009883a 	mov	r4,r18
   8acdc:	0081ba00 	call	81ba0 <_fflush_r>
   8ace0:	1000071e 	bne	r2,zero,8ad00 <__swbuf_r+0x114>
   8ace4:	80800017 	ldw	r2,0(r16)
   8ace8:	00c00044 	movi	r3,1
   8acec:	003fda06 	br	8ac58 <rx_descriptor_end+0xfff8abf8>
   8acf0:	800b883a 	mov	r5,r16
   8acf4:	9009883a 	mov	r4,r18
   8acf8:	0081ba00 	call	81ba0 <_fflush_r>
   8acfc:	103fe326 	beq	r2,zero,8ac8c <rx_descriptor_end+0xfff8ac2c>
   8ad00:	00bfffc4 	movi	r2,-1
   8ad04:	003fe206 	br	8ac90 <rx_descriptor_end+0xfff8ac30>
   8ad08:	800b883a 	mov	r5,r16
   8ad0c:	9009883a 	mov	r4,r18
   8ad10:	008556c0 	call	8556c <__swsetup_r>
   8ad14:	103ffa1e 	bne	r2,zero,8ad00 <rx_descriptor_end+0xfff8aca0>
   8ad18:	8100030b 	ldhu	r4,12(r16)
   8ad1c:	80c00417 	ldw	r3,16(r16)
   8ad20:	003fc506 	br	8ac38 <rx_descriptor_end+0xfff8abd8>
   8ad24:	0081f7c0 	call	81f7c <__sinit>
   8ad28:	003fbc06 	br	8ac1c <rx_descriptor_end+0xfff8abbc>

0008ad2c <__swbuf>:
   8ad2c:	00800274 	movhi	r2,9
   8ad30:	10908204 	addi	r2,r2,16904
   8ad34:	280d883a 	mov	r6,r5
   8ad38:	200b883a 	mov	r5,r4
   8ad3c:	11000017 	ldw	r4,0(r2)
   8ad40:	008abec1 	jmpi	8abec <__swbuf_r>

0008ad44 <_wcrtomb_r>:
   8ad44:	defff604 	addi	sp,sp,-40
   8ad48:	00800274 	movhi	r2,9
   8ad4c:	dc800815 	stw	r18,32(sp)
   8ad50:	dc400715 	stw	r17,28(sp)
   8ad54:	dc000615 	stw	r16,24(sp)
   8ad58:	10908604 	addi	r2,r2,16920
   8ad5c:	dfc00915 	stw	ra,36(sp)
   8ad60:	2021883a 	mov	r16,r4
   8ad64:	3823883a 	mov	r17,r7
   8ad68:	14800017 	ldw	r18,0(r2)
   8ad6c:	28001426 	beq	r5,zero,8adc0 <_wcrtomb_r+0x7c>
   8ad70:	d9400415 	stw	r5,16(sp)
   8ad74:	d9800515 	stw	r6,20(sp)
   8ad78:	008711c0 	call	8711c <__locale_charset>
   8ad7c:	d9800517 	ldw	r6,20(sp)
   8ad80:	d9400417 	ldw	r5,16(sp)
   8ad84:	100f883a 	mov	r7,r2
   8ad88:	dc400015 	stw	r17,0(sp)
   8ad8c:	8009883a 	mov	r4,r16
   8ad90:	903ee83a 	callr	r18
   8ad94:	00ffffc4 	movi	r3,-1
   8ad98:	10c0031e 	bne	r2,r3,8ada8 <_wcrtomb_r+0x64>
   8ad9c:	88000015 	stw	zero,0(r17)
   8ada0:	00c02284 	movi	r3,138
   8ada4:	80c00015 	stw	r3,0(r16)
   8ada8:	dfc00917 	ldw	ra,36(sp)
   8adac:	dc800817 	ldw	r18,32(sp)
   8adb0:	dc400717 	ldw	r17,28(sp)
   8adb4:	dc000617 	ldw	r16,24(sp)
   8adb8:	dec00a04 	addi	sp,sp,40
   8adbc:	f800283a 	ret
   8adc0:	008711c0 	call	8711c <__locale_charset>
   8adc4:	100f883a 	mov	r7,r2
   8adc8:	dc400015 	stw	r17,0(sp)
   8adcc:	000d883a 	mov	r6,zero
   8add0:	d9400104 	addi	r5,sp,4
   8add4:	8009883a 	mov	r4,r16
   8add8:	903ee83a 	callr	r18
   8addc:	003fed06 	br	8ad94 <rx_descriptor_end+0xfff8ad34>

0008ade0 <wcrtomb>:
   8ade0:	defff604 	addi	sp,sp,-40
   8ade4:	00800274 	movhi	r2,9
   8ade8:	dc800615 	stw	r18,24(sp)
   8adec:	dc400515 	stw	r17,20(sp)
   8adf0:	10908204 	addi	r2,r2,16904
   8adf4:	dfc00915 	stw	ra,36(sp)
   8adf8:	dd000815 	stw	r20,32(sp)
   8adfc:	dcc00715 	stw	r19,28(sp)
   8ae00:	dc000415 	stw	r16,16(sp)
   8ae04:	3025883a 	mov	r18,r6
   8ae08:	14400017 	ldw	r17,0(r2)
   8ae0c:	20001926 	beq	r4,zero,8ae74 <wcrtomb+0x94>
   8ae10:	00800274 	movhi	r2,9
   8ae14:	10908604 	addi	r2,r2,16920
   8ae18:	15000017 	ldw	r20,0(r2)
   8ae1c:	2021883a 	mov	r16,r4
   8ae20:	2827883a 	mov	r19,r5
   8ae24:	008711c0 	call	8711c <__locale_charset>
   8ae28:	100f883a 	mov	r7,r2
   8ae2c:	dc800015 	stw	r18,0(sp)
   8ae30:	980d883a 	mov	r6,r19
   8ae34:	800b883a 	mov	r5,r16
   8ae38:	8809883a 	mov	r4,r17
   8ae3c:	a03ee83a 	callr	r20
   8ae40:	00ffffc4 	movi	r3,-1
   8ae44:	10c0031e 	bne	r2,r3,8ae54 <wcrtomb+0x74>
   8ae48:	90000015 	stw	zero,0(r18)
   8ae4c:	00c02284 	movi	r3,138
   8ae50:	88c00015 	stw	r3,0(r17)
   8ae54:	dfc00917 	ldw	ra,36(sp)
   8ae58:	dd000817 	ldw	r20,32(sp)
   8ae5c:	dcc00717 	ldw	r19,28(sp)
   8ae60:	dc800617 	ldw	r18,24(sp)
   8ae64:	dc400517 	ldw	r17,20(sp)
   8ae68:	dc000417 	ldw	r16,16(sp)
   8ae6c:	dec00a04 	addi	sp,sp,40
   8ae70:	f800283a 	ret
   8ae74:	00800274 	movhi	r2,9
   8ae78:	10908604 	addi	r2,r2,16920
   8ae7c:	14000017 	ldw	r16,0(r2)
   8ae80:	008711c0 	call	8711c <__locale_charset>
   8ae84:	100f883a 	mov	r7,r2
   8ae88:	dc800015 	stw	r18,0(sp)
   8ae8c:	000d883a 	mov	r6,zero
   8ae90:	d9400104 	addi	r5,sp,4
   8ae94:	8809883a 	mov	r4,r17
   8ae98:	803ee83a 	callr	r16
   8ae9c:	003fe806 	br	8ae40 <rx_descriptor_end+0xfff8ade0>

0008aea0 <__ascii_wctomb>:
   8aea0:	28000526 	beq	r5,zero,8aeb8 <__ascii_wctomb+0x18>
   8aea4:	00803fc4 	movi	r2,255
   8aea8:	11800536 	bltu	r2,r6,8aec0 <__ascii_wctomb+0x20>
   8aeac:	29800005 	stb	r6,0(r5)
   8aeb0:	00800044 	movi	r2,1
   8aeb4:	f800283a 	ret
   8aeb8:	0005883a 	mov	r2,zero
   8aebc:	f800283a 	ret
   8aec0:	00802284 	movi	r2,138
   8aec4:	20800015 	stw	r2,0(r4)
   8aec8:	00bfffc4 	movi	r2,-1
   8aecc:	f800283a 	ret

0008aed0 <_wctomb_r>:
   8aed0:	00800274 	movhi	r2,9
   8aed4:	defff904 	addi	sp,sp,-28
   8aed8:	10908604 	addi	r2,r2,16920
   8aedc:	dfc00615 	stw	ra,24(sp)
   8aee0:	dc400515 	stw	r17,20(sp)
   8aee4:	dc000415 	stw	r16,16(sp)
   8aee8:	3823883a 	mov	r17,r7
   8aeec:	14000017 	ldw	r16,0(r2)
   8aef0:	d9000115 	stw	r4,4(sp)
   8aef4:	d9400215 	stw	r5,8(sp)
   8aef8:	d9800315 	stw	r6,12(sp)
   8aefc:	008711c0 	call	8711c <__locale_charset>
   8af00:	d9800317 	ldw	r6,12(sp)
   8af04:	d9400217 	ldw	r5,8(sp)
   8af08:	d9000117 	ldw	r4,4(sp)
   8af0c:	100f883a 	mov	r7,r2
   8af10:	dc400015 	stw	r17,0(sp)
   8af14:	803ee83a 	callr	r16
   8af18:	dfc00617 	ldw	ra,24(sp)
   8af1c:	dc400517 	ldw	r17,20(sp)
   8af20:	dc000417 	ldw	r16,16(sp)
   8af24:	dec00704 	addi	sp,sp,28
   8af28:	f800283a 	ret

0008af2c <__udivdi3>:
   8af2c:	defff504 	addi	sp,sp,-44
   8af30:	dcc00415 	stw	r19,16(sp)
   8af34:	dc000115 	stw	r16,4(sp)
   8af38:	dfc00a15 	stw	ra,40(sp)
   8af3c:	df000915 	stw	fp,36(sp)
   8af40:	ddc00815 	stw	r23,32(sp)
   8af44:	dd800715 	stw	r22,28(sp)
   8af48:	dd400615 	stw	r21,24(sp)
   8af4c:	dd000515 	stw	r20,20(sp)
   8af50:	dc800315 	stw	r18,12(sp)
   8af54:	dc400215 	stw	r17,8(sp)
   8af58:	2027883a 	mov	r19,r4
   8af5c:	2821883a 	mov	r16,r5
   8af60:	3800411e 	bne	r7,zero,8b068 <__udivdi3+0x13c>
   8af64:	3023883a 	mov	r17,r6
   8af68:	2025883a 	mov	r18,r4
   8af6c:	2980522e 	bgeu	r5,r6,8b0b8 <__udivdi3+0x18c>
   8af70:	00bfffd4 	movui	r2,65535
   8af74:	282d883a 	mov	r22,r5
   8af78:	1180a836 	bltu	r2,r6,8b21c <__udivdi3+0x2f0>
   8af7c:	00803fc4 	movi	r2,255
   8af80:	1185803a 	cmpltu	r2,r2,r6
   8af84:	100490fa 	slli	r2,r2,3
   8af88:	3086d83a 	srl	r3,r6,r2
   8af8c:	01000274 	movhi	r4,9
   8af90:	21086a04 	addi	r4,r4,8616
   8af94:	20c7883a 	add	r3,r4,r3
   8af98:	18c00003 	ldbu	r3,0(r3)
   8af9c:	1885883a 	add	r2,r3,r2
   8afa0:	00c00804 	movi	r3,32
   8afa4:	1887c83a 	sub	r3,r3,r2
   8afa8:	18000526 	beq	r3,zero,8afc0 <__udivdi3+0x94>
   8afac:	80e0983a 	sll	r16,r16,r3
   8afb0:	9884d83a 	srl	r2,r19,r2
   8afb4:	30e2983a 	sll	r17,r6,r3
   8afb8:	98e4983a 	sll	r18,r19,r3
   8afbc:	142cb03a 	or	r22,r2,r16
   8afc0:	882ad43a 	srli	r21,r17,16
   8afc4:	b009883a 	mov	r4,r22
   8afc8:	8d3fffcc 	andi	r20,r17,65535
   8afcc:	a80b883a 	mov	r5,r21
   8afd0:	008bb380 	call	8bb38 <__umodsi3>
   8afd4:	b009883a 	mov	r4,r22
   8afd8:	a80b883a 	mov	r5,r21
   8afdc:	1027883a 	mov	r19,r2
   8afe0:	008bad40 	call	8bad4 <__udivsi3>
   8afe4:	102d883a 	mov	r22,r2
   8afe8:	9826943a 	slli	r19,r19,16
   8afec:	9004d43a 	srli	r2,r18,16
   8aff0:	a5a1383a 	mul	r16,r20,r22
   8aff4:	14c4b03a 	or	r2,r2,r19
   8aff8:	1400052e 	bgeu	r2,r16,8b010 <__udivdi3+0xe4>
   8affc:	1445883a 	add	r2,r2,r17
   8b000:	b0ffffc4 	addi	r3,r22,-1
   8b004:	14400136 	bltu	r2,r17,8b00c <__udivdi3+0xe0>
   8b008:	14012336 	bltu	r2,r16,8b498 <__udivdi3+0x56c>
   8b00c:	182d883a 	mov	r22,r3
   8b010:	1421c83a 	sub	r16,r2,r16
   8b014:	a80b883a 	mov	r5,r21
   8b018:	8009883a 	mov	r4,r16
   8b01c:	008bb380 	call	8bb38 <__umodsi3>
   8b020:	1027883a 	mov	r19,r2
   8b024:	a80b883a 	mov	r5,r21
   8b028:	8009883a 	mov	r4,r16
   8b02c:	008bad40 	call	8bad4 <__udivsi3>
   8b030:	9826943a 	slli	r19,r19,16
   8b034:	a0a9383a 	mul	r20,r20,r2
   8b038:	94bfffcc 	andi	r18,r18,65535
   8b03c:	94e4b03a 	or	r18,r18,r19
   8b040:	9500052e 	bgeu	r18,r20,8b058 <__udivdi3+0x12c>
   8b044:	8ca5883a 	add	r18,r17,r18
   8b048:	10ffffc4 	addi	r3,r2,-1
   8b04c:	9440f136 	bltu	r18,r17,8b414 <__udivdi3+0x4e8>
   8b050:	9500f02e 	bgeu	r18,r20,8b414 <__udivdi3+0x4e8>
   8b054:	10bfff84 	addi	r2,r2,-2
   8b058:	b00c943a 	slli	r6,r22,16
   8b05c:	0007883a 	mov	r3,zero
   8b060:	3084b03a 	or	r2,r6,r2
   8b064:	00005906 	br	8b1cc <__udivdi3+0x2a0>
   8b068:	29c05636 	bltu	r5,r7,8b1c4 <__udivdi3+0x298>
   8b06c:	00bfffd4 	movui	r2,65535
   8b070:	11c0622e 	bgeu	r2,r7,8b1fc <__udivdi3+0x2d0>
   8b074:	00804034 	movhi	r2,256
   8b078:	10bfffc4 	addi	r2,r2,-1
   8b07c:	11c0ee36 	bltu	r2,r7,8b438 <__udivdi3+0x50c>
   8b080:	00800404 	movi	r2,16
   8b084:	3886d83a 	srl	r3,r7,r2
   8b088:	01000274 	movhi	r4,9
   8b08c:	21086a04 	addi	r4,r4,8616
   8b090:	20c7883a 	add	r3,r4,r3
   8b094:	18c00003 	ldbu	r3,0(r3)
   8b098:	05400804 	movi	r21,32
   8b09c:	1885883a 	add	r2,r3,r2
   8b0a0:	a8abc83a 	sub	r21,r21,r2
   8b0a4:	a800621e 	bne	r21,zero,8b230 <__udivdi3+0x304>
   8b0a8:	3c00e936 	bltu	r7,r16,8b450 <__udivdi3+0x524>
   8b0ac:	9985403a 	cmpgeu	r2,r19,r6
   8b0b0:	0007883a 	mov	r3,zero
   8b0b4:	00004506 	br	8b1cc <__udivdi3+0x2a0>
   8b0b8:	3000041e 	bne	r6,zero,8b0cc <__udivdi3+0x1a0>
   8b0bc:	000b883a 	mov	r5,zero
   8b0c0:	01000044 	movi	r4,1
   8b0c4:	008bad40 	call	8bad4 <__udivsi3>
   8b0c8:	1023883a 	mov	r17,r2
   8b0cc:	00bfffd4 	movui	r2,65535
   8b0d0:	14404e2e 	bgeu	r2,r17,8b20c <__udivdi3+0x2e0>
   8b0d4:	00804034 	movhi	r2,256
   8b0d8:	10bfffc4 	addi	r2,r2,-1
   8b0dc:	1440d836 	bltu	r2,r17,8b440 <__udivdi3+0x514>
   8b0e0:	00800404 	movi	r2,16
   8b0e4:	8886d83a 	srl	r3,r17,r2
   8b0e8:	01000274 	movhi	r4,9
   8b0ec:	21086a04 	addi	r4,r4,8616
   8b0f0:	20c7883a 	add	r3,r4,r3
   8b0f4:	18c00003 	ldbu	r3,0(r3)
   8b0f8:	1885883a 	add	r2,r3,r2
   8b0fc:	00c00804 	movi	r3,32
   8b100:	1887c83a 	sub	r3,r3,r2
   8b104:	18008f1e 	bne	r3,zero,8b344 <__udivdi3+0x418>
   8b108:	882ad43a 	srli	r21,r17,16
   8b10c:	8461c83a 	sub	r16,r16,r17
   8b110:	8d3fffcc 	andi	r20,r17,65535
   8b114:	00c00044 	movi	r3,1
   8b118:	8009883a 	mov	r4,r16
   8b11c:	a80b883a 	mov	r5,r21
   8b120:	d8c00015 	stw	r3,0(sp)
   8b124:	008bb380 	call	8bb38 <__umodsi3>
   8b128:	8009883a 	mov	r4,r16
   8b12c:	a80b883a 	mov	r5,r21
   8b130:	1027883a 	mov	r19,r2
   8b134:	008bad40 	call	8bad4 <__udivsi3>
   8b138:	9826943a 	slli	r19,r19,16
   8b13c:	9008d43a 	srli	r4,r18,16
   8b140:	1521383a 	mul	r16,r2,r20
   8b144:	102d883a 	mov	r22,r2
   8b148:	24c8b03a 	or	r4,r4,r19
   8b14c:	d8c00017 	ldw	r3,0(sp)
   8b150:	2400052e 	bgeu	r4,r16,8b168 <__udivdi3+0x23c>
   8b154:	2449883a 	add	r4,r4,r17
   8b158:	b0bfffc4 	addi	r2,r22,-1
   8b15c:	24400136 	bltu	r4,r17,8b164 <__udivdi3+0x238>
   8b160:	2400ca36 	bltu	r4,r16,8b48c <__udivdi3+0x560>
   8b164:	102d883a 	mov	r22,r2
   8b168:	2421c83a 	sub	r16,r4,r16
   8b16c:	a80b883a 	mov	r5,r21
   8b170:	8009883a 	mov	r4,r16
   8b174:	d8c00015 	stw	r3,0(sp)
   8b178:	008bb380 	call	8bb38 <__umodsi3>
   8b17c:	1027883a 	mov	r19,r2
   8b180:	a80b883a 	mov	r5,r21
   8b184:	8009883a 	mov	r4,r16
   8b188:	008bad40 	call	8bad4 <__udivsi3>
   8b18c:	9826943a 	slli	r19,r19,16
   8b190:	1529383a 	mul	r20,r2,r20
   8b194:	94bfffcc 	andi	r18,r18,65535
   8b198:	94e4b03a 	or	r18,r18,r19
   8b19c:	d8c00017 	ldw	r3,0(sp)
   8b1a0:	9500052e 	bgeu	r18,r20,8b1b8 <__udivdi3+0x28c>
   8b1a4:	8ca5883a 	add	r18,r17,r18
   8b1a8:	113fffc4 	addi	r4,r2,-1
   8b1ac:	94409736 	bltu	r18,r17,8b40c <__udivdi3+0x4e0>
   8b1b0:	9500962e 	bgeu	r18,r20,8b40c <__udivdi3+0x4e0>
   8b1b4:	10bfff84 	addi	r2,r2,-2
   8b1b8:	b00c943a 	slli	r6,r22,16
   8b1bc:	3084b03a 	or	r2,r6,r2
   8b1c0:	00000206 	br	8b1cc <__udivdi3+0x2a0>
   8b1c4:	0007883a 	mov	r3,zero
   8b1c8:	0005883a 	mov	r2,zero
   8b1cc:	dfc00a17 	ldw	ra,40(sp)
   8b1d0:	df000917 	ldw	fp,36(sp)
   8b1d4:	ddc00817 	ldw	r23,32(sp)
   8b1d8:	dd800717 	ldw	r22,28(sp)
   8b1dc:	dd400617 	ldw	r21,24(sp)
   8b1e0:	dd000517 	ldw	r20,20(sp)
   8b1e4:	dcc00417 	ldw	r19,16(sp)
   8b1e8:	dc800317 	ldw	r18,12(sp)
   8b1ec:	dc400217 	ldw	r17,8(sp)
   8b1f0:	dc000117 	ldw	r16,4(sp)
   8b1f4:	dec00b04 	addi	sp,sp,44
   8b1f8:	f800283a 	ret
   8b1fc:	00803fc4 	movi	r2,255
   8b200:	11c5803a 	cmpltu	r2,r2,r7
   8b204:	100490fa 	slli	r2,r2,3
   8b208:	003f9e06 	br	8b084 <rx_descriptor_end+0xfff8b024>
   8b20c:	00803fc4 	movi	r2,255
   8b210:	1445803a 	cmpltu	r2,r2,r17
   8b214:	100490fa 	slli	r2,r2,3
   8b218:	003fb206 	br	8b0e4 <rx_descriptor_end+0xfff8b084>
   8b21c:	00804034 	movhi	r2,256
   8b220:	10bfffc4 	addi	r2,r2,-1
   8b224:	11808836 	bltu	r2,r6,8b448 <__udivdi3+0x51c>
   8b228:	00800404 	movi	r2,16
   8b22c:	003f5606 	br	8af88 <rx_descriptor_end+0xfff8af28>
   8b230:	30aed83a 	srl	r23,r6,r2
   8b234:	3d4e983a 	sll	r7,r7,r21
   8b238:	80acd83a 	srl	r22,r16,r2
   8b23c:	9884d83a 	srl	r2,r19,r2
   8b240:	3deeb03a 	or	r23,r7,r23
   8b244:	b824d43a 	srli	r18,r23,16
   8b248:	8560983a 	sll	r16,r16,r21
   8b24c:	b009883a 	mov	r4,r22
   8b250:	900b883a 	mov	r5,r18
   8b254:	3568983a 	sll	r20,r6,r21
   8b258:	1420b03a 	or	r16,r2,r16
   8b25c:	008bb380 	call	8bb38 <__umodsi3>
   8b260:	b009883a 	mov	r4,r22
   8b264:	900b883a 	mov	r5,r18
   8b268:	1023883a 	mov	r17,r2
   8b26c:	008bad40 	call	8bad4 <__udivsi3>
   8b270:	8808943a 	slli	r4,r17,16
   8b274:	bf3fffcc 	andi	fp,r23,65535
   8b278:	8006d43a 	srli	r3,r16,16
   8b27c:	e0a3383a 	mul	r17,fp,r2
   8b280:	100d883a 	mov	r6,r2
   8b284:	1906b03a 	or	r3,r3,r4
   8b288:	1c40042e 	bgeu	r3,r17,8b29c <__udivdi3+0x370>
   8b28c:	1dc7883a 	add	r3,r3,r23
   8b290:	10bfffc4 	addi	r2,r2,-1
   8b294:	1dc0752e 	bgeu	r3,r23,8b46c <__udivdi3+0x540>
   8b298:	100d883a 	mov	r6,r2
   8b29c:	1c63c83a 	sub	r17,r3,r17
   8b2a0:	900b883a 	mov	r5,r18
   8b2a4:	8809883a 	mov	r4,r17
   8b2a8:	d9800015 	stw	r6,0(sp)
   8b2ac:	008bb380 	call	8bb38 <__umodsi3>
   8b2b0:	102d883a 	mov	r22,r2
   8b2b4:	8809883a 	mov	r4,r17
   8b2b8:	900b883a 	mov	r5,r18
   8b2bc:	008bad40 	call	8bad4 <__udivsi3>
   8b2c0:	b02c943a 	slli	r22,r22,16
   8b2c4:	e089383a 	mul	r4,fp,r2
   8b2c8:	843fffcc 	andi	r16,r16,65535
   8b2cc:	85a0b03a 	or	r16,r16,r22
   8b2d0:	d9800017 	ldw	r6,0(sp)
   8b2d4:	8100042e 	bgeu	r16,r4,8b2e8 <__udivdi3+0x3bc>
   8b2d8:	85e1883a 	add	r16,r16,r23
   8b2dc:	10ffffc4 	addi	r3,r2,-1
   8b2e0:	85c05e2e 	bgeu	r16,r23,8b45c <__udivdi3+0x530>
   8b2e4:	1805883a 	mov	r2,r3
   8b2e8:	300c943a 	slli	r6,r6,16
   8b2ec:	a17fffcc 	andi	r5,r20,65535
   8b2f0:	a028d43a 	srli	r20,r20,16
   8b2f4:	3084b03a 	or	r2,r6,r2
   8b2f8:	10ffffcc 	andi	r3,r2,65535
   8b2fc:	100cd43a 	srli	r6,r2,16
   8b300:	194f383a 	mul	r7,r3,r5
   8b304:	1d07383a 	mul	r3,r3,r20
   8b308:	314b383a 	mul	r5,r6,r5
   8b30c:	3810d43a 	srli	r8,r7,16
   8b310:	8121c83a 	sub	r16,r16,r4
   8b314:	1947883a 	add	r3,r3,r5
   8b318:	40c7883a 	add	r3,r8,r3
   8b31c:	350d383a 	mul	r6,r6,r20
   8b320:	1940022e 	bgeu	r3,r5,8b32c <__udivdi3+0x400>
   8b324:	01000074 	movhi	r4,1
   8b328:	310d883a 	add	r6,r6,r4
   8b32c:	1828d43a 	srli	r20,r3,16
   8b330:	a18d883a 	add	r6,r20,r6
   8b334:	81803e36 	bltu	r16,r6,8b430 <__udivdi3+0x504>
   8b338:	81803826 	beq	r16,r6,8b41c <__udivdi3+0x4f0>
   8b33c:	0007883a 	mov	r3,zero
   8b340:	003fa206 	br	8b1cc <rx_descriptor_end+0xfff8b16c>
   8b344:	88e2983a 	sll	r17,r17,r3
   8b348:	80a8d83a 	srl	r20,r16,r2
   8b34c:	80e0983a 	sll	r16,r16,r3
   8b350:	882ad43a 	srli	r21,r17,16
   8b354:	9884d83a 	srl	r2,r19,r2
   8b358:	a009883a 	mov	r4,r20
   8b35c:	a80b883a 	mov	r5,r21
   8b360:	142eb03a 	or	r23,r2,r16
   8b364:	98e4983a 	sll	r18,r19,r3
   8b368:	008bb380 	call	8bb38 <__umodsi3>
   8b36c:	a009883a 	mov	r4,r20
   8b370:	a80b883a 	mov	r5,r21
   8b374:	1021883a 	mov	r16,r2
   8b378:	008bad40 	call	8bad4 <__udivsi3>
   8b37c:	1039883a 	mov	fp,r2
   8b380:	8d3fffcc 	andi	r20,r17,65535
   8b384:	8020943a 	slli	r16,r16,16
   8b388:	b804d43a 	srli	r2,r23,16
   8b38c:	a72d383a 	mul	r22,r20,fp
   8b390:	1404b03a 	or	r2,r2,r16
   8b394:	1580062e 	bgeu	r2,r22,8b3b0 <__udivdi3+0x484>
   8b398:	1445883a 	add	r2,r2,r17
   8b39c:	e0ffffc4 	addi	r3,fp,-1
   8b3a0:	14403836 	bltu	r2,r17,8b484 <__udivdi3+0x558>
   8b3a4:	1580372e 	bgeu	r2,r22,8b484 <__udivdi3+0x558>
   8b3a8:	e73fff84 	addi	fp,fp,-2
   8b3ac:	1445883a 	add	r2,r2,r17
   8b3b0:	15adc83a 	sub	r22,r2,r22
   8b3b4:	a80b883a 	mov	r5,r21
   8b3b8:	b009883a 	mov	r4,r22
   8b3bc:	008bb380 	call	8bb38 <__umodsi3>
   8b3c0:	1027883a 	mov	r19,r2
   8b3c4:	b009883a 	mov	r4,r22
   8b3c8:	a80b883a 	mov	r5,r21
   8b3cc:	008bad40 	call	8bad4 <__udivsi3>
   8b3d0:	9826943a 	slli	r19,r19,16
   8b3d4:	a0a1383a 	mul	r16,r20,r2
   8b3d8:	b93fffcc 	andi	r4,r23,65535
   8b3dc:	24c8b03a 	or	r4,r4,r19
   8b3e0:	2400062e 	bgeu	r4,r16,8b3fc <__udivdi3+0x4d0>
   8b3e4:	2449883a 	add	r4,r4,r17
   8b3e8:	10ffffc4 	addi	r3,r2,-1
   8b3ec:	24402336 	bltu	r4,r17,8b47c <__udivdi3+0x550>
   8b3f0:	2400222e 	bgeu	r4,r16,8b47c <__udivdi3+0x550>
   8b3f4:	10bfff84 	addi	r2,r2,-2
   8b3f8:	2449883a 	add	r4,r4,r17
   8b3fc:	e038943a 	slli	fp,fp,16
   8b400:	2421c83a 	sub	r16,r4,r16
   8b404:	e086b03a 	or	r3,fp,r2
   8b408:	003f4306 	br	8b118 <rx_descriptor_end+0xfff8b0b8>
   8b40c:	2005883a 	mov	r2,r4
   8b410:	003f6906 	br	8b1b8 <rx_descriptor_end+0xfff8b158>
   8b414:	1805883a 	mov	r2,r3
   8b418:	003f0f06 	br	8b058 <rx_descriptor_end+0xfff8aff8>
   8b41c:	1806943a 	slli	r3,r3,16
   8b420:	9d66983a 	sll	r19,r19,r21
   8b424:	39ffffcc 	andi	r7,r7,65535
   8b428:	19c7883a 	add	r3,r3,r7
   8b42c:	98ffc32e 	bgeu	r19,r3,8b33c <rx_descriptor_end+0xfff8b2dc>
   8b430:	10bfffc4 	addi	r2,r2,-1
   8b434:	003fc106 	br	8b33c <rx_descriptor_end+0xfff8b2dc>
   8b438:	00800604 	movi	r2,24
   8b43c:	003f1106 	br	8b084 <rx_descriptor_end+0xfff8b024>
   8b440:	00800604 	movi	r2,24
   8b444:	003f2706 	br	8b0e4 <rx_descriptor_end+0xfff8b084>
   8b448:	00800604 	movi	r2,24
   8b44c:	003ece06 	br	8af88 <rx_descriptor_end+0xfff8af28>
   8b450:	0007883a 	mov	r3,zero
   8b454:	00800044 	movi	r2,1
   8b458:	003f5c06 	br	8b1cc <rx_descriptor_end+0xfff8b16c>
   8b45c:	813fa12e 	bgeu	r16,r4,8b2e4 <rx_descriptor_end+0xfff8b284>
   8b460:	10bfff84 	addi	r2,r2,-2
   8b464:	85e1883a 	add	r16,r16,r23
   8b468:	003f9f06 	br	8b2e8 <rx_descriptor_end+0xfff8b288>
   8b46c:	1c7f8a2e 	bgeu	r3,r17,8b298 <rx_descriptor_end+0xfff8b238>
   8b470:	31bfff84 	addi	r6,r6,-2
   8b474:	1dc7883a 	add	r3,r3,r23
   8b478:	003f8806 	br	8b29c <rx_descriptor_end+0xfff8b23c>
   8b47c:	1805883a 	mov	r2,r3
   8b480:	003fde06 	br	8b3fc <rx_descriptor_end+0xfff8b39c>
   8b484:	1839883a 	mov	fp,r3
   8b488:	003fc906 	br	8b3b0 <rx_descriptor_end+0xfff8b350>
   8b48c:	b5bfff84 	addi	r22,r22,-2
   8b490:	2449883a 	add	r4,r4,r17
   8b494:	003f3406 	br	8b168 <rx_descriptor_end+0xfff8b108>
   8b498:	b5bfff84 	addi	r22,r22,-2
   8b49c:	1445883a 	add	r2,r2,r17
   8b4a0:	003edb06 	br	8b010 <rx_descriptor_end+0xfff8afb0>

0008b4a4 <__umoddi3>:
   8b4a4:	defff404 	addi	sp,sp,-48
   8b4a8:	df000a15 	stw	fp,40(sp)
   8b4ac:	dc400315 	stw	r17,12(sp)
   8b4b0:	dc000215 	stw	r16,8(sp)
   8b4b4:	dfc00b15 	stw	ra,44(sp)
   8b4b8:	ddc00915 	stw	r23,36(sp)
   8b4bc:	dd800815 	stw	r22,32(sp)
   8b4c0:	dd400715 	stw	r21,28(sp)
   8b4c4:	dd000615 	stw	r20,24(sp)
   8b4c8:	dcc00515 	stw	r19,20(sp)
   8b4cc:	dc800415 	stw	r18,16(sp)
   8b4d0:	2021883a 	mov	r16,r4
   8b4d4:	2823883a 	mov	r17,r5
   8b4d8:	2839883a 	mov	fp,r5
   8b4dc:	38003c1e 	bne	r7,zero,8b5d0 <__umoddi3+0x12c>
   8b4e0:	3027883a 	mov	r19,r6
   8b4e4:	2029883a 	mov	r20,r4
   8b4e8:	2980512e 	bgeu	r5,r6,8b630 <__umoddi3+0x18c>
   8b4ec:	00bfffd4 	movui	r2,65535
   8b4f0:	11809a36 	bltu	r2,r6,8b75c <__umoddi3+0x2b8>
   8b4f4:	01003fc4 	movi	r4,255
   8b4f8:	2189803a 	cmpltu	r4,r4,r6
   8b4fc:	200890fa 	slli	r4,r4,3
   8b500:	3104d83a 	srl	r2,r6,r4
   8b504:	00c00274 	movhi	r3,9
   8b508:	18c86a04 	addi	r3,r3,8616
   8b50c:	1885883a 	add	r2,r3,r2
   8b510:	10c00003 	ldbu	r3,0(r2)
   8b514:	00800804 	movi	r2,32
   8b518:	1909883a 	add	r4,r3,r4
   8b51c:	1125c83a 	sub	r18,r2,r4
   8b520:	90000526 	beq	r18,zero,8b538 <__umoddi3+0x94>
   8b524:	8ca2983a 	sll	r17,r17,r18
   8b528:	8108d83a 	srl	r4,r16,r4
   8b52c:	34a6983a 	sll	r19,r6,r18
   8b530:	84a8983a 	sll	r20,r16,r18
   8b534:	2478b03a 	or	fp,r4,r17
   8b538:	982ed43a 	srli	r23,r19,16
   8b53c:	e009883a 	mov	r4,fp
   8b540:	9dbfffcc 	andi	r22,r19,65535
   8b544:	b80b883a 	mov	r5,r23
   8b548:	008bb380 	call	8bb38 <__umodsi3>
   8b54c:	e009883a 	mov	r4,fp
   8b550:	b80b883a 	mov	r5,r23
   8b554:	102b883a 	mov	r21,r2
   8b558:	008bad40 	call	8bad4 <__udivsi3>
   8b55c:	a806943a 	slli	r3,r21,16
   8b560:	a008d43a 	srli	r4,r20,16
   8b564:	b085383a 	mul	r2,r22,r2
   8b568:	20c8b03a 	or	r4,r4,r3
   8b56c:	2080032e 	bgeu	r4,r2,8b57c <__umoddi3+0xd8>
   8b570:	24c9883a 	add	r4,r4,r19
   8b574:	24c00136 	bltu	r4,r19,8b57c <__umoddi3+0xd8>
   8b578:	20811036 	bltu	r4,r2,8b9bc <__umoddi3+0x518>
   8b57c:	20abc83a 	sub	r21,r4,r2
   8b580:	b80b883a 	mov	r5,r23
   8b584:	a809883a 	mov	r4,r21
   8b588:	008bb380 	call	8bb38 <__umodsi3>
   8b58c:	1023883a 	mov	r17,r2
   8b590:	b80b883a 	mov	r5,r23
   8b594:	a809883a 	mov	r4,r21
   8b598:	008bad40 	call	8bad4 <__udivsi3>
   8b59c:	8822943a 	slli	r17,r17,16
   8b5a0:	b085383a 	mul	r2,r22,r2
   8b5a4:	a0ffffcc 	andi	r3,r20,65535
   8b5a8:	1c46b03a 	or	r3,r3,r17
   8b5ac:	1880042e 	bgeu	r3,r2,8b5c0 <__umoddi3+0x11c>
   8b5b0:	1cc7883a 	add	r3,r3,r19
   8b5b4:	1cc00236 	bltu	r3,r19,8b5c0 <__umoddi3+0x11c>
   8b5b8:	1880012e 	bgeu	r3,r2,8b5c0 <__umoddi3+0x11c>
   8b5bc:	1cc7883a 	add	r3,r3,r19
   8b5c0:	1885c83a 	sub	r2,r3,r2
   8b5c4:	1484d83a 	srl	r2,r2,r18
   8b5c8:	0007883a 	mov	r3,zero
   8b5cc:	00004f06 	br	8b70c <__umoddi3+0x268>
   8b5d0:	29c04c36 	bltu	r5,r7,8b704 <__umoddi3+0x260>
   8b5d4:	00bfffd4 	movui	r2,65535
   8b5d8:	11c0582e 	bgeu	r2,r7,8b73c <__umoddi3+0x298>
   8b5dc:	00804034 	movhi	r2,256
   8b5e0:	10bfffc4 	addi	r2,r2,-1
   8b5e4:	11c0e736 	bltu	r2,r7,8b984 <__umoddi3+0x4e0>
   8b5e8:	01000404 	movi	r4,16
   8b5ec:	3904d83a 	srl	r2,r7,r4
   8b5f0:	00c00274 	movhi	r3,9
   8b5f4:	18c86a04 	addi	r3,r3,8616
   8b5f8:	1885883a 	add	r2,r3,r2
   8b5fc:	14c00003 	ldbu	r19,0(r2)
   8b600:	00c00804 	movi	r3,32
   8b604:	9927883a 	add	r19,r19,r4
   8b608:	1ce9c83a 	sub	r20,r3,r19
   8b60c:	a000581e 	bne	r20,zero,8b770 <__umoddi3+0x2cc>
   8b610:	3c400136 	bltu	r7,r17,8b618 <__umoddi3+0x174>
   8b614:	8180eb36 	bltu	r16,r6,8b9c4 <__umoddi3+0x520>
   8b618:	8185c83a 	sub	r2,r16,r6
   8b61c:	89e3c83a 	sub	r17,r17,r7
   8b620:	8089803a 	cmpltu	r4,r16,r2
   8b624:	8939c83a 	sub	fp,r17,r4
   8b628:	e007883a 	mov	r3,fp
   8b62c:	00003706 	br	8b70c <__umoddi3+0x268>
   8b630:	3000041e 	bne	r6,zero,8b644 <__umoddi3+0x1a0>
   8b634:	000b883a 	mov	r5,zero
   8b638:	01000044 	movi	r4,1
   8b63c:	008bad40 	call	8bad4 <__udivsi3>
   8b640:	1027883a 	mov	r19,r2
   8b644:	00bfffd4 	movui	r2,65535
   8b648:	14c0402e 	bgeu	r2,r19,8b74c <__umoddi3+0x2a8>
   8b64c:	00804034 	movhi	r2,256
   8b650:	10bfffc4 	addi	r2,r2,-1
   8b654:	14c0cd36 	bltu	r2,r19,8b98c <__umoddi3+0x4e8>
   8b658:	00800404 	movi	r2,16
   8b65c:	9886d83a 	srl	r3,r19,r2
   8b660:	01000274 	movhi	r4,9
   8b664:	21086a04 	addi	r4,r4,8616
   8b668:	20c7883a 	add	r3,r4,r3
   8b66c:	18c00003 	ldbu	r3,0(r3)
   8b670:	1887883a 	add	r3,r3,r2
   8b674:	00800804 	movi	r2,32
   8b678:	10e5c83a 	sub	r18,r2,r3
   8b67c:	9000901e 	bne	r18,zero,8b8c0 <__umoddi3+0x41c>
   8b680:	982cd43a 	srli	r22,r19,16
   8b684:	8ce3c83a 	sub	r17,r17,r19
   8b688:	9d7fffcc 	andi	r21,r19,65535
   8b68c:	b00b883a 	mov	r5,r22
   8b690:	8809883a 	mov	r4,r17
   8b694:	008bb380 	call	8bb38 <__umodsi3>
   8b698:	8809883a 	mov	r4,r17
   8b69c:	b00b883a 	mov	r5,r22
   8b6a0:	1021883a 	mov	r16,r2
   8b6a4:	008bad40 	call	8bad4 <__udivsi3>
   8b6a8:	8006943a 	slli	r3,r16,16
   8b6ac:	a008d43a 	srli	r4,r20,16
   8b6b0:	1545383a 	mul	r2,r2,r21
   8b6b4:	20c8b03a 	or	r4,r4,r3
   8b6b8:	2080042e 	bgeu	r4,r2,8b6cc <__umoddi3+0x228>
   8b6bc:	24c9883a 	add	r4,r4,r19
   8b6c0:	24c00236 	bltu	r4,r19,8b6cc <__umoddi3+0x228>
   8b6c4:	2080012e 	bgeu	r4,r2,8b6cc <__umoddi3+0x228>
   8b6c8:	24c9883a 	add	r4,r4,r19
   8b6cc:	20a1c83a 	sub	r16,r4,r2
   8b6d0:	b00b883a 	mov	r5,r22
   8b6d4:	8009883a 	mov	r4,r16
   8b6d8:	008bb380 	call	8bb38 <__umodsi3>
   8b6dc:	1023883a 	mov	r17,r2
   8b6e0:	b00b883a 	mov	r5,r22
   8b6e4:	8009883a 	mov	r4,r16
   8b6e8:	008bad40 	call	8bad4 <__udivsi3>
   8b6ec:	8822943a 	slli	r17,r17,16
   8b6f0:	1545383a 	mul	r2,r2,r21
   8b6f4:	a53fffcc 	andi	r20,r20,65535
   8b6f8:	a446b03a 	or	r3,r20,r17
   8b6fc:	18bfb02e 	bgeu	r3,r2,8b5c0 <rx_descriptor_end+0xfff8b560>
   8b700:	003fab06 	br	8b5b0 <rx_descriptor_end+0xfff8b550>
   8b704:	2005883a 	mov	r2,r4
   8b708:	2807883a 	mov	r3,r5
   8b70c:	dfc00b17 	ldw	ra,44(sp)
   8b710:	df000a17 	ldw	fp,40(sp)
   8b714:	ddc00917 	ldw	r23,36(sp)
   8b718:	dd800817 	ldw	r22,32(sp)
   8b71c:	dd400717 	ldw	r21,28(sp)
   8b720:	dd000617 	ldw	r20,24(sp)
   8b724:	dcc00517 	ldw	r19,20(sp)
   8b728:	dc800417 	ldw	r18,16(sp)
   8b72c:	dc400317 	ldw	r17,12(sp)
   8b730:	dc000217 	ldw	r16,8(sp)
   8b734:	dec00c04 	addi	sp,sp,48
   8b738:	f800283a 	ret
   8b73c:	04c03fc4 	movi	r19,255
   8b740:	99c9803a 	cmpltu	r4,r19,r7
   8b744:	200890fa 	slli	r4,r4,3
   8b748:	003fa806 	br	8b5ec <rx_descriptor_end+0xfff8b58c>
   8b74c:	00803fc4 	movi	r2,255
   8b750:	14c5803a 	cmpltu	r2,r2,r19
   8b754:	100490fa 	slli	r2,r2,3
   8b758:	003fc006 	br	8b65c <rx_descriptor_end+0xfff8b5fc>
   8b75c:	00804034 	movhi	r2,256
   8b760:	10bfffc4 	addi	r2,r2,-1
   8b764:	11808b36 	bltu	r2,r6,8b994 <__umoddi3+0x4f0>
   8b768:	01000404 	movi	r4,16
   8b76c:	003f6406 	br	8b500 <rx_descriptor_end+0xfff8b4a0>
   8b770:	34c4d83a 	srl	r2,r6,r19
   8b774:	3d0e983a 	sll	r7,r7,r20
   8b778:	8cf8d83a 	srl	fp,r17,r19
   8b77c:	8d10983a 	sll	r8,r17,r20
   8b780:	38aab03a 	or	r21,r7,r2
   8b784:	a82cd43a 	srli	r22,r21,16
   8b788:	84e2d83a 	srl	r17,r16,r19
   8b78c:	e009883a 	mov	r4,fp
   8b790:	b00b883a 	mov	r5,r22
   8b794:	8a22b03a 	or	r17,r17,r8
   8b798:	3524983a 	sll	r18,r6,r20
   8b79c:	008bb380 	call	8bb38 <__umodsi3>
   8b7a0:	e009883a 	mov	r4,fp
   8b7a4:	b00b883a 	mov	r5,r22
   8b7a8:	102f883a 	mov	r23,r2
   8b7ac:	008bad40 	call	8bad4 <__udivsi3>
   8b7b0:	100d883a 	mov	r6,r2
   8b7b4:	b808943a 	slli	r4,r23,16
   8b7b8:	aa3fffcc 	andi	r8,r21,65535
   8b7bc:	8804d43a 	srli	r2,r17,16
   8b7c0:	41af383a 	mul	r23,r8,r6
   8b7c4:	8520983a 	sll	r16,r16,r20
   8b7c8:	1104b03a 	or	r2,r2,r4
   8b7cc:	15c0042e 	bgeu	r2,r23,8b7e0 <__umoddi3+0x33c>
   8b7d0:	1545883a 	add	r2,r2,r21
   8b7d4:	30ffffc4 	addi	r3,r6,-1
   8b7d8:	1540742e 	bgeu	r2,r21,8b9ac <__umoddi3+0x508>
   8b7dc:	180d883a 	mov	r6,r3
   8b7e0:	15efc83a 	sub	r23,r2,r23
   8b7e4:	b00b883a 	mov	r5,r22
   8b7e8:	b809883a 	mov	r4,r23
   8b7ec:	d9800115 	stw	r6,4(sp)
   8b7f0:	da000015 	stw	r8,0(sp)
   8b7f4:	008bb380 	call	8bb38 <__umodsi3>
   8b7f8:	b00b883a 	mov	r5,r22
   8b7fc:	b809883a 	mov	r4,r23
   8b800:	1039883a 	mov	fp,r2
   8b804:	008bad40 	call	8bad4 <__udivsi3>
   8b808:	da000017 	ldw	r8,0(sp)
   8b80c:	e038943a 	slli	fp,fp,16
   8b810:	100b883a 	mov	r5,r2
   8b814:	4089383a 	mul	r4,r8,r2
   8b818:	8a3fffcc 	andi	r8,r17,65535
   8b81c:	4710b03a 	or	r8,r8,fp
   8b820:	d9800117 	ldw	r6,4(sp)
   8b824:	4100042e 	bgeu	r8,r4,8b838 <__umoddi3+0x394>
   8b828:	4551883a 	add	r8,r8,r21
   8b82c:	10bfffc4 	addi	r2,r2,-1
   8b830:	45405a2e 	bgeu	r8,r21,8b99c <__umoddi3+0x4f8>
   8b834:	100b883a 	mov	r5,r2
   8b838:	300c943a 	slli	r6,r6,16
   8b83c:	91ffffcc 	andi	r7,r18,65535
   8b840:	9004d43a 	srli	r2,r18,16
   8b844:	314cb03a 	or	r6,r6,r5
   8b848:	317fffcc 	andi	r5,r6,65535
   8b84c:	300cd43a 	srli	r6,r6,16
   8b850:	29d3383a 	mul	r9,r5,r7
   8b854:	288b383a 	mul	r5,r5,r2
   8b858:	31cf383a 	mul	r7,r6,r7
   8b85c:	4806d43a 	srli	r3,r9,16
   8b860:	4111c83a 	sub	r8,r8,r4
   8b864:	29cb883a 	add	r5,r5,r7
   8b868:	194b883a 	add	r5,r3,r5
   8b86c:	3085383a 	mul	r2,r6,r2
   8b870:	29c0022e 	bgeu	r5,r7,8b87c <__umoddi3+0x3d8>
   8b874:	00c00074 	movhi	r3,1
   8b878:	10c5883a 	add	r2,r2,r3
   8b87c:	2808d43a 	srli	r4,r5,16
   8b880:	280a943a 	slli	r5,r5,16
   8b884:	4a7fffcc 	andi	r9,r9,65535
   8b888:	2085883a 	add	r2,r4,r2
   8b88c:	2a4b883a 	add	r5,r5,r9
   8b890:	40803636 	bltu	r8,r2,8b96c <__umoddi3+0x4c8>
   8b894:	40804d26 	beq	r8,r2,8b9cc <__umoddi3+0x528>
   8b898:	4089c83a 	sub	r4,r8,r2
   8b89c:	280f883a 	mov	r7,r5
   8b8a0:	81cfc83a 	sub	r7,r16,r7
   8b8a4:	81c7803a 	cmpltu	r3,r16,r7
   8b8a8:	20c7c83a 	sub	r3,r4,r3
   8b8ac:	1cc4983a 	sll	r2,r3,r19
   8b8b0:	3d0ed83a 	srl	r7,r7,r20
   8b8b4:	1d06d83a 	srl	r3,r3,r20
   8b8b8:	11c4b03a 	or	r2,r2,r7
   8b8bc:	003f9306 	br	8b70c <rx_descriptor_end+0xfff8b6ac>
   8b8c0:	9ca6983a 	sll	r19,r19,r18
   8b8c4:	88e8d83a 	srl	r20,r17,r3
   8b8c8:	80c4d83a 	srl	r2,r16,r3
   8b8cc:	982cd43a 	srli	r22,r19,16
   8b8d0:	8ca2983a 	sll	r17,r17,r18
   8b8d4:	a009883a 	mov	r4,r20
   8b8d8:	b00b883a 	mov	r5,r22
   8b8dc:	1478b03a 	or	fp,r2,r17
   8b8e0:	008bb380 	call	8bb38 <__umodsi3>
   8b8e4:	a009883a 	mov	r4,r20
   8b8e8:	b00b883a 	mov	r5,r22
   8b8ec:	1023883a 	mov	r17,r2
   8b8f0:	008bad40 	call	8bad4 <__udivsi3>
   8b8f4:	9d7fffcc 	andi	r21,r19,65535
   8b8f8:	880a943a 	slli	r5,r17,16
   8b8fc:	e008d43a 	srli	r4,fp,16
   8b900:	a885383a 	mul	r2,r21,r2
   8b904:	84a8983a 	sll	r20,r16,r18
   8b908:	2148b03a 	or	r4,r4,r5
   8b90c:	2080042e 	bgeu	r4,r2,8b920 <__umoddi3+0x47c>
   8b910:	24c9883a 	add	r4,r4,r19
   8b914:	24c00236 	bltu	r4,r19,8b920 <__umoddi3+0x47c>
   8b918:	2080012e 	bgeu	r4,r2,8b920 <__umoddi3+0x47c>
   8b91c:	24c9883a 	add	r4,r4,r19
   8b920:	20a3c83a 	sub	r17,r4,r2
   8b924:	b00b883a 	mov	r5,r22
   8b928:	8809883a 	mov	r4,r17
   8b92c:	008bb380 	call	8bb38 <__umodsi3>
   8b930:	102f883a 	mov	r23,r2
   8b934:	8809883a 	mov	r4,r17
   8b938:	b00b883a 	mov	r5,r22
   8b93c:	008bad40 	call	8bad4 <__udivsi3>
   8b940:	b82e943a 	slli	r23,r23,16
   8b944:	a885383a 	mul	r2,r21,r2
   8b948:	e13fffcc 	andi	r4,fp,65535
   8b94c:	25c8b03a 	or	r4,r4,r23
   8b950:	2080042e 	bgeu	r4,r2,8b964 <__umoddi3+0x4c0>
   8b954:	24c9883a 	add	r4,r4,r19
   8b958:	24c00236 	bltu	r4,r19,8b964 <__umoddi3+0x4c0>
   8b95c:	2080012e 	bgeu	r4,r2,8b964 <__umoddi3+0x4c0>
   8b960:	24c9883a 	add	r4,r4,r19
   8b964:	20a3c83a 	sub	r17,r4,r2
   8b968:	003f4806 	br	8b68c <rx_descriptor_end+0xfff8b62c>
   8b96c:	2c8fc83a 	sub	r7,r5,r18
   8b970:	1545c83a 	sub	r2,r2,r21
   8b974:	29cb803a 	cmpltu	r5,r5,r7
   8b978:	1145c83a 	sub	r2,r2,r5
   8b97c:	4089c83a 	sub	r4,r8,r2
   8b980:	003fc706 	br	8b8a0 <rx_descriptor_end+0xfff8b840>
   8b984:	01000604 	movi	r4,24
   8b988:	003f1806 	br	8b5ec <rx_descriptor_end+0xfff8b58c>
   8b98c:	00800604 	movi	r2,24
   8b990:	003f3206 	br	8b65c <rx_descriptor_end+0xfff8b5fc>
   8b994:	01000604 	movi	r4,24
   8b998:	003ed906 	br	8b500 <rx_descriptor_end+0xfff8b4a0>
   8b99c:	413fa52e 	bgeu	r8,r4,8b834 <rx_descriptor_end+0xfff8b7d4>
   8b9a0:	297fff84 	addi	r5,r5,-2
   8b9a4:	4551883a 	add	r8,r8,r21
   8b9a8:	003fa306 	br	8b838 <rx_descriptor_end+0xfff8b7d8>
   8b9ac:	15ff8b2e 	bgeu	r2,r23,8b7dc <rx_descriptor_end+0xfff8b77c>
   8b9b0:	31bfff84 	addi	r6,r6,-2
   8b9b4:	1545883a 	add	r2,r2,r21
   8b9b8:	003f8906 	br	8b7e0 <rx_descriptor_end+0xfff8b780>
   8b9bc:	24c9883a 	add	r4,r4,r19
   8b9c0:	003eee06 	br	8b57c <rx_descriptor_end+0xfff8b51c>
   8b9c4:	8005883a 	mov	r2,r16
   8b9c8:	003f1706 	br	8b628 <rx_descriptor_end+0xfff8b5c8>
   8b9cc:	817fe736 	bltu	r16,r5,8b96c <rx_descriptor_end+0xfff8b90c>
   8b9d0:	280f883a 	mov	r7,r5
   8b9d4:	0009883a 	mov	r4,zero
   8b9d8:	003fb106 	br	8b8a0 <rx_descriptor_end+0xfff8b840>

0008b9dc <__divsi3>:
   8b9dc:	20001b16 	blt	r4,zero,8ba4c <__divsi3+0x70>
   8b9e0:	000f883a 	mov	r7,zero
   8b9e4:	28001616 	blt	r5,zero,8ba40 <__divsi3+0x64>
   8b9e8:	200d883a 	mov	r6,r4
   8b9ec:	29001a2e 	bgeu	r5,r4,8ba58 <__divsi3+0x7c>
   8b9f0:	00800804 	movi	r2,32
   8b9f4:	00c00044 	movi	r3,1
   8b9f8:	00000106 	br	8ba00 <__divsi3+0x24>
   8b9fc:	10000d26 	beq	r2,zero,8ba34 <__divsi3+0x58>
   8ba00:	294b883a 	add	r5,r5,r5
   8ba04:	10bfffc4 	addi	r2,r2,-1
   8ba08:	18c7883a 	add	r3,r3,r3
   8ba0c:	293ffb36 	bltu	r5,r4,8b9fc <rx_descriptor_end+0xfff8b99c>
   8ba10:	0005883a 	mov	r2,zero
   8ba14:	18000726 	beq	r3,zero,8ba34 <__divsi3+0x58>
   8ba18:	0005883a 	mov	r2,zero
   8ba1c:	31400236 	bltu	r6,r5,8ba28 <__divsi3+0x4c>
   8ba20:	314dc83a 	sub	r6,r6,r5
   8ba24:	10c4b03a 	or	r2,r2,r3
   8ba28:	1806d07a 	srli	r3,r3,1
   8ba2c:	280ad07a 	srli	r5,r5,1
   8ba30:	183ffa1e 	bne	r3,zero,8ba1c <rx_descriptor_end+0xfff8b9bc>
   8ba34:	38000126 	beq	r7,zero,8ba3c <__divsi3+0x60>
   8ba38:	0085c83a 	sub	r2,zero,r2
   8ba3c:	f800283a 	ret
   8ba40:	014bc83a 	sub	r5,zero,r5
   8ba44:	39c0005c 	xori	r7,r7,1
   8ba48:	003fe706 	br	8b9e8 <rx_descriptor_end+0xfff8b988>
   8ba4c:	0109c83a 	sub	r4,zero,r4
   8ba50:	01c00044 	movi	r7,1
   8ba54:	003fe306 	br	8b9e4 <rx_descriptor_end+0xfff8b984>
   8ba58:	00c00044 	movi	r3,1
   8ba5c:	003fee06 	br	8ba18 <rx_descriptor_end+0xfff8b9b8>

0008ba60 <__modsi3>:
   8ba60:	20001716 	blt	r4,zero,8bac0 <__modsi3+0x60>
   8ba64:	000f883a 	mov	r7,zero
   8ba68:	2005883a 	mov	r2,r4
   8ba6c:	28001216 	blt	r5,zero,8bab8 <__modsi3+0x58>
   8ba70:	2900162e 	bgeu	r5,r4,8bacc <__modsi3+0x6c>
   8ba74:	01800804 	movi	r6,32
   8ba78:	00c00044 	movi	r3,1
   8ba7c:	00000106 	br	8ba84 <__modsi3+0x24>
   8ba80:	30000a26 	beq	r6,zero,8baac <__modsi3+0x4c>
   8ba84:	294b883a 	add	r5,r5,r5
   8ba88:	31bfffc4 	addi	r6,r6,-1
   8ba8c:	18c7883a 	add	r3,r3,r3
   8ba90:	293ffb36 	bltu	r5,r4,8ba80 <rx_descriptor_end+0xfff8ba20>
   8ba94:	18000526 	beq	r3,zero,8baac <__modsi3+0x4c>
   8ba98:	1806d07a 	srli	r3,r3,1
   8ba9c:	11400136 	bltu	r2,r5,8baa4 <__modsi3+0x44>
   8baa0:	1145c83a 	sub	r2,r2,r5
   8baa4:	280ad07a 	srli	r5,r5,1
   8baa8:	183ffb1e 	bne	r3,zero,8ba98 <rx_descriptor_end+0xfff8ba38>
   8baac:	38000126 	beq	r7,zero,8bab4 <__modsi3+0x54>
   8bab0:	0085c83a 	sub	r2,zero,r2
   8bab4:	f800283a 	ret
   8bab8:	014bc83a 	sub	r5,zero,r5
   8babc:	003fec06 	br	8ba70 <rx_descriptor_end+0xfff8ba10>
   8bac0:	0109c83a 	sub	r4,zero,r4
   8bac4:	01c00044 	movi	r7,1
   8bac8:	003fe706 	br	8ba68 <rx_descriptor_end+0xfff8ba08>
   8bacc:	00c00044 	movi	r3,1
   8bad0:	003ff106 	br	8ba98 <rx_descriptor_end+0xfff8ba38>

0008bad4 <__udivsi3>:
   8bad4:	200d883a 	mov	r6,r4
   8bad8:	2900152e 	bgeu	r5,r4,8bb30 <__udivsi3+0x5c>
   8badc:	28001416 	blt	r5,zero,8bb30 <__udivsi3+0x5c>
   8bae0:	00800804 	movi	r2,32
   8bae4:	00c00044 	movi	r3,1
   8bae8:	00000206 	br	8baf4 <__udivsi3+0x20>
   8baec:	10000e26 	beq	r2,zero,8bb28 <__udivsi3+0x54>
   8baf0:	28000516 	blt	r5,zero,8bb08 <__udivsi3+0x34>
   8baf4:	294b883a 	add	r5,r5,r5
   8baf8:	10bfffc4 	addi	r2,r2,-1
   8bafc:	18c7883a 	add	r3,r3,r3
   8bb00:	293ffa36 	bltu	r5,r4,8baec <rx_descriptor_end+0xfff8ba8c>
   8bb04:	18000826 	beq	r3,zero,8bb28 <__udivsi3+0x54>
   8bb08:	0005883a 	mov	r2,zero
   8bb0c:	31400236 	bltu	r6,r5,8bb18 <__udivsi3+0x44>
   8bb10:	314dc83a 	sub	r6,r6,r5
   8bb14:	10c4b03a 	or	r2,r2,r3
   8bb18:	1806d07a 	srli	r3,r3,1
   8bb1c:	280ad07a 	srli	r5,r5,1
   8bb20:	183ffa1e 	bne	r3,zero,8bb0c <rx_descriptor_end+0xfff8baac>
   8bb24:	f800283a 	ret
   8bb28:	0005883a 	mov	r2,zero
   8bb2c:	f800283a 	ret
   8bb30:	00c00044 	movi	r3,1
   8bb34:	003ff406 	br	8bb08 <rx_descriptor_end+0xfff8baa8>

0008bb38 <__umodsi3>:
   8bb38:	2005883a 	mov	r2,r4
   8bb3c:	2900122e 	bgeu	r5,r4,8bb88 <__umodsi3+0x50>
   8bb40:	28001116 	blt	r5,zero,8bb88 <__umodsi3+0x50>
   8bb44:	01800804 	movi	r6,32
   8bb48:	00c00044 	movi	r3,1
   8bb4c:	00000206 	br	8bb58 <__umodsi3+0x20>
   8bb50:	30000c26 	beq	r6,zero,8bb84 <__umodsi3+0x4c>
   8bb54:	28000516 	blt	r5,zero,8bb6c <__umodsi3+0x34>
   8bb58:	294b883a 	add	r5,r5,r5
   8bb5c:	31bfffc4 	addi	r6,r6,-1
   8bb60:	18c7883a 	add	r3,r3,r3
   8bb64:	293ffa36 	bltu	r5,r4,8bb50 <rx_descriptor_end+0xfff8baf0>
   8bb68:	18000626 	beq	r3,zero,8bb84 <__umodsi3+0x4c>
   8bb6c:	1806d07a 	srli	r3,r3,1
   8bb70:	11400136 	bltu	r2,r5,8bb78 <__umodsi3+0x40>
   8bb74:	1145c83a 	sub	r2,r2,r5
   8bb78:	280ad07a 	srli	r5,r5,1
   8bb7c:	183ffb1e 	bne	r3,zero,8bb6c <rx_descriptor_end+0xfff8bb0c>
   8bb80:	f800283a 	ret
   8bb84:	f800283a 	ret
   8bb88:	00c00044 	movi	r3,1
   8bb8c:	003ff706 	br	8bb6c <rx_descriptor_end+0xfff8bb0c>

0008bb90 <__adddf3>:
   8bb90:	02c00434 	movhi	r11,16
   8bb94:	5affffc4 	addi	r11,r11,-1
   8bb98:	2806d7fa 	srli	r3,r5,31
   8bb9c:	2ad4703a 	and	r10,r5,r11
   8bba0:	3ad2703a 	and	r9,r7,r11
   8bba4:	3804d53a 	srli	r2,r7,20
   8bba8:	3018d77a 	srli	r12,r6,29
   8bbac:	280ad53a 	srli	r5,r5,20
   8bbb0:	501490fa 	slli	r10,r10,3
   8bbb4:	2010d77a 	srli	r8,r4,29
   8bbb8:	481290fa 	slli	r9,r9,3
   8bbbc:	380ed7fa 	srli	r7,r7,31
   8bbc0:	defffb04 	addi	sp,sp,-20
   8bbc4:	dc800215 	stw	r18,8(sp)
   8bbc8:	dc400115 	stw	r17,4(sp)
   8bbcc:	dc000015 	stw	r16,0(sp)
   8bbd0:	dfc00415 	stw	ra,16(sp)
   8bbd4:	dcc00315 	stw	r19,12(sp)
   8bbd8:	1c803fcc 	andi	r18,r3,255
   8bbdc:	2c01ffcc 	andi	r16,r5,2047
   8bbe0:	5210b03a 	or	r8,r10,r8
   8bbe4:	202290fa 	slli	r17,r4,3
   8bbe8:	1081ffcc 	andi	r2,r2,2047
   8bbec:	4b12b03a 	or	r9,r9,r12
   8bbf0:	300c90fa 	slli	r6,r6,3
   8bbf4:	91c07526 	beq	r18,r7,8bdcc <__adddf3+0x23c>
   8bbf8:	8087c83a 	sub	r3,r16,r2
   8bbfc:	00c0ab0e 	bge	zero,r3,8beac <__adddf3+0x31c>
   8bc00:	10002a1e 	bne	r2,zero,8bcac <__adddf3+0x11c>
   8bc04:	4984b03a 	or	r2,r9,r6
   8bc08:	1000961e 	bne	r2,zero,8be64 <__adddf3+0x2d4>
   8bc0c:	888001cc 	andi	r2,r17,7
   8bc10:	10000726 	beq	r2,zero,8bc30 <__adddf3+0xa0>
   8bc14:	888003cc 	andi	r2,r17,15
   8bc18:	00c00104 	movi	r3,4
   8bc1c:	10c00426 	beq	r2,r3,8bc30 <__adddf3+0xa0>
   8bc20:	88c7883a 	add	r3,r17,r3
   8bc24:	1c63803a 	cmpltu	r17,r3,r17
   8bc28:	4451883a 	add	r8,r8,r17
   8bc2c:	1823883a 	mov	r17,r3
   8bc30:	4080202c 	andhi	r2,r8,128
   8bc34:	10005926 	beq	r2,zero,8bd9c <__adddf3+0x20c>
   8bc38:	84000044 	addi	r16,r16,1
   8bc3c:	0081ffc4 	movi	r2,2047
   8bc40:	8080ba26 	beq	r16,r2,8bf2c <__adddf3+0x39c>
   8bc44:	00bfe034 	movhi	r2,65408
   8bc48:	10bfffc4 	addi	r2,r2,-1
   8bc4c:	4090703a 	and	r8,r8,r2
   8bc50:	4004977a 	slli	r2,r8,29
   8bc54:	4010927a 	slli	r8,r8,9
   8bc58:	8822d0fa 	srli	r17,r17,3
   8bc5c:	8401ffcc 	andi	r16,r16,2047
   8bc60:	4010d33a 	srli	r8,r8,12
   8bc64:	9007883a 	mov	r3,r18
   8bc68:	1444b03a 	or	r2,r2,r17
   8bc6c:	8401ffcc 	andi	r16,r16,2047
   8bc70:	8020953a 	slli	r16,r16,20
   8bc74:	18c03fcc 	andi	r3,r3,255
   8bc78:	01000434 	movhi	r4,16
   8bc7c:	213fffc4 	addi	r4,r4,-1
   8bc80:	180697fa 	slli	r3,r3,31
   8bc84:	4110703a 	and	r8,r8,r4
   8bc88:	4410b03a 	or	r8,r8,r16
   8bc8c:	40c6b03a 	or	r3,r8,r3
   8bc90:	dfc00417 	ldw	ra,16(sp)
   8bc94:	dcc00317 	ldw	r19,12(sp)
   8bc98:	dc800217 	ldw	r18,8(sp)
   8bc9c:	dc400117 	ldw	r17,4(sp)
   8bca0:	dc000017 	ldw	r16,0(sp)
   8bca4:	dec00504 	addi	sp,sp,20
   8bca8:	f800283a 	ret
   8bcac:	0081ffc4 	movi	r2,2047
   8bcb0:	80bfd626 	beq	r16,r2,8bc0c <rx_descriptor_end+0xfff8bbac>
   8bcb4:	4a402034 	orhi	r9,r9,128
   8bcb8:	00800e04 	movi	r2,56
   8bcbc:	10c09f16 	blt	r2,r3,8bf3c <__adddf3+0x3ac>
   8bcc0:	008007c4 	movi	r2,31
   8bcc4:	10c0c216 	blt	r2,r3,8bfd0 <__adddf3+0x440>
   8bcc8:	00800804 	movi	r2,32
   8bccc:	10c5c83a 	sub	r2,r2,r3
   8bcd0:	488a983a 	sll	r5,r9,r2
   8bcd4:	30c8d83a 	srl	r4,r6,r3
   8bcd8:	3084983a 	sll	r2,r6,r2
   8bcdc:	48c6d83a 	srl	r3,r9,r3
   8bce0:	290cb03a 	or	r6,r5,r4
   8bce4:	1004c03a 	cmpne	r2,r2,zero
   8bce8:	308cb03a 	or	r6,r6,r2
   8bcec:	898dc83a 	sub	r6,r17,r6
   8bcf0:	89a3803a 	cmpltu	r17,r17,r6
   8bcf4:	40d1c83a 	sub	r8,r8,r3
   8bcf8:	4451c83a 	sub	r8,r8,r17
   8bcfc:	3023883a 	mov	r17,r6
   8bd00:	4080202c 	andhi	r2,r8,128
   8bd04:	10002326 	beq	r2,zero,8bd94 <__adddf3+0x204>
   8bd08:	04c02034 	movhi	r19,128
   8bd0c:	9cffffc4 	addi	r19,r19,-1
   8bd10:	44e6703a 	and	r19,r8,r19
   8bd14:	98007626 	beq	r19,zero,8bef0 <__adddf3+0x360>
   8bd18:	9809883a 	mov	r4,r19
   8bd1c:	008e1940 	call	8e194 <__clzsi2>
   8bd20:	10fffe04 	addi	r3,r2,-8
   8bd24:	010007c4 	movi	r4,31
   8bd28:	20c07716 	blt	r4,r3,8bf08 <__adddf3+0x378>
   8bd2c:	00800804 	movi	r2,32
   8bd30:	10c5c83a 	sub	r2,r2,r3
   8bd34:	8884d83a 	srl	r2,r17,r2
   8bd38:	98d0983a 	sll	r8,r19,r3
   8bd3c:	88e2983a 	sll	r17,r17,r3
   8bd40:	1204b03a 	or	r2,r2,r8
   8bd44:	1c007416 	blt	r3,r16,8bf18 <__adddf3+0x388>
   8bd48:	1c21c83a 	sub	r16,r3,r16
   8bd4c:	82000044 	addi	r8,r16,1
   8bd50:	00c007c4 	movi	r3,31
   8bd54:	1a009116 	blt	r3,r8,8bf9c <__adddf3+0x40c>
   8bd58:	00c00804 	movi	r3,32
   8bd5c:	1a07c83a 	sub	r3,r3,r8
   8bd60:	8a08d83a 	srl	r4,r17,r8
   8bd64:	88e2983a 	sll	r17,r17,r3
   8bd68:	10c6983a 	sll	r3,r2,r3
   8bd6c:	1210d83a 	srl	r8,r2,r8
   8bd70:	8804c03a 	cmpne	r2,r17,zero
   8bd74:	1906b03a 	or	r3,r3,r4
   8bd78:	18a2b03a 	or	r17,r3,r2
   8bd7c:	0021883a 	mov	r16,zero
   8bd80:	003fa206 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8bd84:	1890b03a 	or	r8,r3,r2
   8bd88:	40017d26 	beq	r8,zero,8c380 <__adddf3+0x7f0>
   8bd8c:	1011883a 	mov	r8,r2
   8bd90:	1823883a 	mov	r17,r3
   8bd94:	888001cc 	andi	r2,r17,7
   8bd98:	103f9e1e 	bne	r2,zero,8bc14 <rx_descriptor_end+0xfff8bbb4>
   8bd9c:	4004977a 	slli	r2,r8,29
   8bda0:	8822d0fa 	srli	r17,r17,3
   8bda4:	4010d0fa 	srli	r8,r8,3
   8bda8:	9007883a 	mov	r3,r18
   8bdac:	1444b03a 	or	r2,r2,r17
   8bdb0:	0101ffc4 	movi	r4,2047
   8bdb4:	81002426 	beq	r16,r4,8be48 <__adddf3+0x2b8>
   8bdb8:	8120703a 	and	r16,r16,r4
   8bdbc:	01000434 	movhi	r4,16
   8bdc0:	213fffc4 	addi	r4,r4,-1
   8bdc4:	4110703a 	and	r8,r8,r4
   8bdc8:	003fa806 	br	8bc6c <rx_descriptor_end+0xfff8bc0c>
   8bdcc:	8089c83a 	sub	r4,r16,r2
   8bdd0:	01005e0e 	bge	zero,r4,8bf4c <__adddf3+0x3bc>
   8bdd4:	10002b26 	beq	r2,zero,8be84 <__adddf3+0x2f4>
   8bdd8:	0081ffc4 	movi	r2,2047
   8bddc:	80bf8b26 	beq	r16,r2,8bc0c <rx_descriptor_end+0xfff8bbac>
   8bde0:	4a402034 	orhi	r9,r9,128
   8bde4:	00800e04 	movi	r2,56
   8bde8:	1100a40e 	bge	r2,r4,8c07c <__adddf3+0x4ec>
   8bdec:	498cb03a 	or	r6,r9,r6
   8bdf0:	300ac03a 	cmpne	r5,r6,zero
   8bdf4:	0013883a 	mov	r9,zero
   8bdf8:	2c4b883a 	add	r5,r5,r17
   8bdfc:	2c63803a 	cmpltu	r17,r5,r17
   8be00:	4a11883a 	add	r8,r9,r8
   8be04:	8a11883a 	add	r8,r17,r8
   8be08:	2823883a 	mov	r17,r5
   8be0c:	4080202c 	andhi	r2,r8,128
   8be10:	103fe026 	beq	r2,zero,8bd94 <rx_descriptor_end+0xfff8bd34>
   8be14:	84000044 	addi	r16,r16,1
   8be18:	0081ffc4 	movi	r2,2047
   8be1c:	8080d226 	beq	r16,r2,8c168 <__adddf3+0x5d8>
   8be20:	00bfe034 	movhi	r2,65408
   8be24:	10bfffc4 	addi	r2,r2,-1
   8be28:	4090703a 	and	r8,r8,r2
   8be2c:	880ad07a 	srli	r5,r17,1
   8be30:	400897fa 	slli	r4,r8,31
   8be34:	88c0004c 	andi	r3,r17,1
   8be38:	28e2b03a 	or	r17,r5,r3
   8be3c:	4010d07a 	srli	r8,r8,1
   8be40:	2462b03a 	or	r17,r4,r17
   8be44:	003f7106 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8be48:	4088b03a 	or	r4,r8,r2
   8be4c:	20014526 	beq	r4,zero,8c364 <__adddf3+0x7d4>
   8be50:	01000434 	movhi	r4,16
   8be54:	42000234 	orhi	r8,r8,8
   8be58:	213fffc4 	addi	r4,r4,-1
   8be5c:	4110703a 	and	r8,r8,r4
   8be60:	003f8206 	br	8bc6c <rx_descriptor_end+0xfff8bc0c>
   8be64:	18ffffc4 	addi	r3,r3,-1
   8be68:	1800491e 	bne	r3,zero,8bf90 <__adddf3+0x400>
   8be6c:	898bc83a 	sub	r5,r17,r6
   8be70:	8963803a 	cmpltu	r17,r17,r5
   8be74:	4251c83a 	sub	r8,r8,r9
   8be78:	4451c83a 	sub	r8,r8,r17
   8be7c:	2823883a 	mov	r17,r5
   8be80:	003f9f06 	br	8bd00 <rx_descriptor_end+0xfff8bca0>
   8be84:	4984b03a 	or	r2,r9,r6
   8be88:	103f6026 	beq	r2,zero,8bc0c <rx_descriptor_end+0xfff8bbac>
   8be8c:	213fffc4 	addi	r4,r4,-1
   8be90:	2000931e 	bne	r4,zero,8c0e0 <__adddf3+0x550>
   8be94:	898d883a 	add	r6,r17,r6
   8be98:	3463803a 	cmpltu	r17,r6,r17
   8be9c:	4251883a 	add	r8,r8,r9
   8bea0:	8a11883a 	add	r8,r17,r8
   8bea4:	3023883a 	mov	r17,r6
   8bea8:	003fd806 	br	8be0c <rx_descriptor_end+0xfff8bdac>
   8beac:	1800541e 	bne	r3,zero,8c000 <__adddf3+0x470>
   8beb0:	80800044 	addi	r2,r16,1
   8beb4:	1081ffcc 	andi	r2,r2,2047
   8beb8:	00c00044 	movi	r3,1
   8bebc:	1880a00e 	bge	r3,r2,8c140 <__adddf3+0x5b0>
   8bec0:	8989c83a 	sub	r4,r17,r6
   8bec4:	8905803a 	cmpltu	r2,r17,r4
   8bec8:	4267c83a 	sub	r19,r8,r9
   8becc:	98a7c83a 	sub	r19,r19,r2
   8bed0:	9880202c 	andhi	r2,r19,128
   8bed4:	10006326 	beq	r2,zero,8c064 <__adddf3+0x4d4>
   8bed8:	3463c83a 	sub	r17,r6,r17
   8bedc:	4a07c83a 	sub	r3,r9,r8
   8bee0:	344d803a 	cmpltu	r6,r6,r17
   8bee4:	19a7c83a 	sub	r19,r3,r6
   8bee8:	3825883a 	mov	r18,r7
   8beec:	983f8a1e 	bne	r19,zero,8bd18 <rx_descriptor_end+0xfff8bcb8>
   8bef0:	8809883a 	mov	r4,r17
   8bef4:	008e1940 	call	8e194 <__clzsi2>
   8bef8:	10800804 	addi	r2,r2,32
   8befc:	10fffe04 	addi	r3,r2,-8
   8bf00:	010007c4 	movi	r4,31
   8bf04:	20ff890e 	bge	r4,r3,8bd2c <rx_descriptor_end+0xfff8bccc>
   8bf08:	10bff604 	addi	r2,r2,-40
   8bf0c:	8884983a 	sll	r2,r17,r2
   8bf10:	0023883a 	mov	r17,zero
   8bf14:	1c3f8c0e 	bge	r3,r16,8bd48 <rx_descriptor_end+0xfff8bce8>
   8bf18:	023fe034 	movhi	r8,65408
   8bf1c:	423fffc4 	addi	r8,r8,-1
   8bf20:	80e1c83a 	sub	r16,r16,r3
   8bf24:	1210703a 	and	r8,r2,r8
   8bf28:	003f3806 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8bf2c:	9007883a 	mov	r3,r18
   8bf30:	0011883a 	mov	r8,zero
   8bf34:	0005883a 	mov	r2,zero
   8bf38:	003f4c06 	br	8bc6c <rx_descriptor_end+0xfff8bc0c>
   8bf3c:	498cb03a 	or	r6,r9,r6
   8bf40:	300cc03a 	cmpne	r6,r6,zero
   8bf44:	0007883a 	mov	r3,zero
   8bf48:	003f6806 	br	8bcec <rx_descriptor_end+0xfff8bc8c>
   8bf4c:	20009c1e 	bne	r4,zero,8c1c0 <__adddf3+0x630>
   8bf50:	80800044 	addi	r2,r16,1
   8bf54:	1141ffcc 	andi	r5,r2,2047
   8bf58:	01000044 	movi	r4,1
   8bf5c:	2140670e 	bge	r4,r5,8c0fc <__adddf3+0x56c>
   8bf60:	0101ffc4 	movi	r4,2047
   8bf64:	11007f26 	beq	r2,r4,8c164 <__adddf3+0x5d4>
   8bf68:	898d883a 	add	r6,r17,r6
   8bf6c:	4247883a 	add	r3,r8,r9
   8bf70:	3451803a 	cmpltu	r8,r6,r17
   8bf74:	40d1883a 	add	r8,r8,r3
   8bf78:	402297fa 	slli	r17,r8,31
   8bf7c:	300cd07a 	srli	r6,r6,1
   8bf80:	4010d07a 	srli	r8,r8,1
   8bf84:	1021883a 	mov	r16,r2
   8bf88:	89a2b03a 	or	r17,r17,r6
   8bf8c:	003f1f06 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8bf90:	0081ffc4 	movi	r2,2047
   8bf94:	80bf481e 	bne	r16,r2,8bcb8 <rx_descriptor_end+0xfff8bc58>
   8bf98:	003f1c06 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8bf9c:	843ff844 	addi	r16,r16,-31
   8bfa0:	01000804 	movi	r4,32
   8bfa4:	1406d83a 	srl	r3,r2,r16
   8bfa8:	41005026 	beq	r8,r4,8c0ec <__adddf3+0x55c>
   8bfac:	01001004 	movi	r4,64
   8bfb0:	2211c83a 	sub	r8,r4,r8
   8bfb4:	1204983a 	sll	r2,r2,r8
   8bfb8:	88a2b03a 	or	r17,r17,r2
   8bfbc:	8822c03a 	cmpne	r17,r17,zero
   8bfc0:	1c62b03a 	or	r17,r3,r17
   8bfc4:	0011883a 	mov	r8,zero
   8bfc8:	0021883a 	mov	r16,zero
   8bfcc:	003f7106 	br	8bd94 <rx_descriptor_end+0xfff8bd34>
   8bfd0:	193ff804 	addi	r4,r3,-32
   8bfd4:	00800804 	movi	r2,32
   8bfd8:	4908d83a 	srl	r4,r9,r4
   8bfdc:	18804526 	beq	r3,r2,8c0f4 <__adddf3+0x564>
   8bfe0:	00801004 	movi	r2,64
   8bfe4:	10c5c83a 	sub	r2,r2,r3
   8bfe8:	4886983a 	sll	r3,r9,r2
   8bfec:	198cb03a 	or	r6,r3,r6
   8bff0:	300cc03a 	cmpne	r6,r6,zero
   8bff4:	218cb03a 	or	r6,r4,r6
   8bff8:	0007883a 	mov	r3,zero
   8bffc:	003f3b06 	br	8bcec <rx_descriptor_end+0xfff8bc8c>
   8c000:	80002a26 	beq	r16,zero,8c0ac <__adddf3+0x51c>
   8c004:	0101ffc4 	movi	r4,2047
   8c008:	11006826 	beq	r2,r4,8c1ac <__adddf3+0x61c>
   8c00c:	00c7c83a 	sub	r3,zero,r3
   8c010:	42002034 	orhi	r8,r8,128
   8c014:	01000e04 	movi	r4,56
   8c018:	20c07c16 	blt	r4,r3,8c20c <__adddf3+0x67c>
   8c01c:	010007c4 	movi	r4,31
   8c020:	20c0da16 	blt	r4,r3,8c38c <__adddf3+0x7fc>
   8c024:	01000804 	movi	r4,32
   8c028:	20c9c83a 	sub	r4,r4,r3
   8c02c:	4114983a 	sll	r10,r8,r4
   8c030:	88cad83a 	srl	r5,r17,r3
   8c034:	8908983a 	sll	r4,r17,r4
   8c038:	40c6d83a 	srl	r3,r8,r3
   8c03c:	5162b03a 	or	r17,r10,r5
   8c040:	2008c03a 	cmpne	r4,r4,zero
   8c044:	8922b03a 	or	r17,r17,r4
   8c048:	3463c83a 	sub	r17,r6,r17
   8c04c:	48c7c83a 	sub	r3,r9,r3
   8c050:	344d803a 	cmpltu	r6,r6,r17
   8c054:	1991c83a 	sub	r8,r3,r6
   8c058:	1021883a 	mov	r16,r2
   8c05c:	3825883a 	mov	r18,r7
   8c060:	003f2706 	br	8bd00 <rx_descriptor_end+0xfff8bca0>
   8c064:	24d0b03a 	or	r8,r4,r19
   8c068:	40001b1e 	bne	r8,zero,8c0d8 <__adddf3+0x548>
   8c06c:	0005883a 	mov	r2,zero
   8c070:	0007883a 	mov	r3,zero
   8c074:	0021883a 	mov	r16,zero
   8c078:	003f4d06 	br	8bdb0 <rx_descriptor_end+0xfff8bd50>
   8c07c:	008007c4 	movi	r2,31
   8c080:	11003c16 	blt	r2,r4,8c174 <__adddf3+0x5e4>
   8c084:	00800804 	movi	r2,32
   8c088:	1105c83a 	sub	r2,r2,r4
   8c08c:	488e983a 	sll	r7,r9,r2
   8c090:	310ad83a 	srl	r5,r6,r4
   8c094:	3084983a 	sll	r2,r6,r2
   8c098:	4912d83a 	srl	r9,r9,r4
   8c09c:	394ab03a 	or	r5,r7,r5
   8c0a0:	1004c03a 	cmpne	r2,r2,zero
   8c0a4:	288ab03a 	or	r5,r5,r2
   8c0a8:	003f5306 	br	8bdf8 <rx_descriptor_end+0xfff8bd98>
   8c0ac:	4448b03a 	or	r4,r8,r17
   8c0b0:	20003e26 	beq	r4,zero,8c1ac <__adddf3+0x61c>
   8c0b4:	00c6303a 	nor	r3,zero,r3
   8c0b8:	18003a1e 	bne	r3,zero,8c1a4 <__adddf3+0x614>
   8c0bc:	3463c83a 	sub	r17,r6,r17
   8c0c0:	4a07c83a 	sub	r3,r9,r8
   8c0c4:	344d803a 	cmpltu	r6,r6,r17
   8c0c8:	1991c83a 	sub	r8,r3,r6
   8c0cc:	1021883a 	mov	r16,r2
   8c0d0:	3825883a 	mov	r18,r7
   8c0d4:	003f0a06 	br	8bd00 <rx_descriptor_end+0xfff8bca0>
   8c0d8:	2023883a 	mov	r17,r4
   8c0dc:	003f0d06 	br	8bd14 <rx_descriptor_end+0xfff8bcb4>
   8c0e0:	0081ffc4 	movi	r2,2047
   8c0e4:	80bf3f1e 	bne	r16,r2,8bde4 <rx_descriptor_end+0xfff8bd84>
   8c0e8:	003ec806 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c0ec:	0005883a 	mov	r2,zero
   8c0f0:	003fb106 	br	8bfb8 <rx_descriptor_end+0xfff8bf58>
   8c0f4:	0007883a 	mov	r3,zero
   8c0f8:	003fbc06 	br	8bfec <rx_descriptor_end+0xfff8bf8c>
   8c0fc:	4444b03a 	or	r2,r8,r17
   8c100:	8000871e 	bne	r16,zero,8c320 <__adddf3+0x790>
   8c104:	1000ba26 	beq	r2,zero,8c3f0 <__adddf3+0x860>
   8c108:	4984b03a 	or	r2,r9,r6
   8c10c:	103ebf26 	beq	r2,zero,8bc0c <rx_descriptor_end+0xfff8bbac>
   8c110:	8985883a 	add	r2,r17,r6
   8c114:	4247883a 	add	r3,r8,r9
   8c118:	1451803a 	cmpltu	r8,r2,r17
   8c11c:	40d1883a 	add	r8,r8,r3
   8c120:	40c0202c 	andhi	r3,r8,128
   8c124:	1023883a 	mov	r17,r2
   8c128:	183f1a26 	beq	r3,zero,8bd94 <rx_descriptor_end+0xfff8bd34>
   8c12c:	00bfe034 	movhi	r2,65408
   8c130:	10bfffc4 	addi	r2,r2,-1
   8c134:	2021883a 	mov	r16,r4
   8c138:	4090703a 	and	r8,r8,r2
   8c13c:	003eb306 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c140:	4444b03a 	or	r2,r8,r17
   8c144:	8000291e 	bne	r16,zero,8c1ec <__adddf3+0x65c>
   8c148:	10004b1e 	bne	r2,zero,8c278 <__adddf3+0x6e8>
   8c14c:	4990b03a 	or	r8,r9,r6
   8c150:	40008b26 	beq	r8,zero,8c380 <__adddf3+0x7f0>
   8c154:	4811883a 	mov	r8,r9
   8c158:	3023883a 	mov	r17,r6
   8c15c:	3825883a 	mov	r18,r7
   8c160:	003eaa06 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c164:	1021883a 	mov	r16,r2
   8c168:	0011883a 	mov	r8,zero
   8c16c:	0005883a 	mov	r2,zero
   8c170:	003f0f06 	br	8bdb0 <rx_descriptor_end+0xfff8bd50>
   8c174:	217ff804 	addi	r5,r4,-32
   8c178:	00800804 	movi	r2,32
   8c17c:	494ad83a 	srl	r5,r9,r5
   8c180:	20807d26 	beq	r4,r2,8c378 <__adddf3+0x7e8>
   8c184:	00801004 	movi	r2,64
   8c188:	1109c83a 	sub	r4,r2,r4
   8c18c:	4912983a 	sll	r9,r9,r4
   8c190:	498cb03a 	or	r6,r9,r6
   8c194:	300cc03a 	cmpne	r6,r6,zero
   8c198:	298ab03a 	or	r5,r5,r6
   8c19c:	0013883a 	mov	r9,zero
   8c1a0:	003f1506 	br	8bdf8 <rx_descriptor_end+0xfff8bd98>
   8c1a4:	0101ffc4 	movi	r4,2047
   8c1a8:	113f9a1e 	bne	r2,r4,8c014 <rx_descriptor_end+0xfff8bfb4>
   8c1ac:	4811883a 	mov	r8,r9
   8c1b0:	3023883a 	mov	r17,r6
   8c1b4:	1021883a 	mov	r16,r2
   8c1b8:	3825883a 	mov	r18,r7
   8c1bc:	003e9306 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c1c0:	8000161e 	bne	r16,zero,8c21c <__adddf3+0x68c>
   8c1c4:	444ab03a 	or	r5,r8,r17
   8c1c8:	28005126 	beq	r5,zero,8c310 <__adddf3+0x780>
   8c1cc:	0108303a 	nor	r4,zero,r4
   8c1d0:	20004d1e 	bne	r4,zero,8c308 <__adddf3+0x778>
   8c1d4:	89a3883a 	add	r17,r17,r6
   8c1d8:	4253883a 	add	r9,r8,r9
   8c1dc:	898d803a 	cmpltu	r6,r17,r6
   8c1e0:	3251883a 	add	r8,r6,r9
   8c1e4:	1021883a 	mov	r16,r2
   8c1e8:	003f0806 	br	8be0c <rx_descriptor_end+0xfff8bdac>
   8c1ec:	1000301e 	bne	r2,zero,8c2b0 <__adddf3+0x720>
   8c1f0:	4984b03a 	or	r2,r9,r6
   8c1f4:	10007126 	beq	r2,zero,8c3bc <__adddf3+0x82c>
   8c1f8:	4811883a 	mov	r8,r9
   8c1fc:	3023883a 	mov	r17,r6
   8c200:	3825883a 	mov	r18,r7
   8c204:	0401ffc4 	movi	r16,2047
   8c208:	003e8006 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c20c:	4462b03a 	or	r17,r8,r17
   8c210:	8822c03a 	cmpne	r17,r17,zero
   8c214:	0007883a 	mov	r3,zero
   8c218:	003f8b06 	br	8c048 <rx_descriptor_end+0xfff8bfe8>
   8c21c:	0141ffc4 	movi	r5,2047
   8c220:	11403b26 	beq	r2,r5,8c310 <__adddf3+0x780>
   8c224:	0109c83a 	sub	r4,zero,r4
   8c228:	42002034 	orhi	r8,r8,128
   8c22c:	01400e04 	movi	r5,56
   8c230:	29006716 	blt	r5,r4,8c3d0 <__adddf3+0x840>
   8c234:	014007c4 	movi	r5,31
   8c238:	29007016 	blt	r5,r4,8c3fc <__adddf3+0x86c>
   8c23c:	01400804 	movi	r5,32
   8c240:	290bc83a 	sub	r5,r5,r4
   8c244:	4154983a 	sll	r10,r8,r5
   8c248:	890ed83a 	srl	r7,r17,r4
   8c24c:	894a983a 	sll	r5,r17,r5
   8c250:	4108d83a 	srl	r4,r8,r4
   8c254:	51e2b03a 	or	r17,r10,r7
   8c258:	280ac03a 	cmpne	r5,r5,zero
   8c25c:	8962b03a 	or	r17,r17,r5
   8c260:	89a3883a 	add	r17,r17,r6
   8c264:	2253883a 	add	r9,r4,r9
   8c268:	898d803a 	cmpltu	r6,r17,r6
   8c26c:	3251883a 	add	r8,r6,r9
   8c270:	1021883a 	mov	r16,r2
   8c274:	003ee506 	br	8be0c <rx_descriptor_end+0xfff8bdac>
   8c278:	4984b03a 	or	r2,r9,r6
   8c27c:	103e6326 	beq	r2,zero,8bc0c <rx_descriptor_end+0xfff8bbac>
   8c280:	8987c83a 	sub	r3,r17,r6
   8c284:	88c9803a 	cmpltu	r4,r17,r3
   8c288:	4245c83a 	sub	r2,r8,r9
   8c28c:	1105c83a 	sub	r2,r2,r4
   8c290:	1100202c 	andhi	r4,r2,128
   8c294:	203ebb26 	beq	r4,zero,8bd84 <rx_descriptor_end+0xfff8bd24>
   8c298:	3463c83a 	sub	r17,r6,r17
   8c29c:	4a07c83a 	sub	r3,r9,r8
   8c2a0:	344d803a 	cmpltu	r6,r6,r17
   8c2a4:	1991c83a 	sub	r8,r3,r6
   8c2a8:	3825883a 	mov	r18,r7
   8c2ac:	003e5706 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c2b0:	4984b03a 	or	r2,r9,r6
   8c2b4:	10002e26 	beq	r2,zero,8c370 <__adddf3+0x7e0>
   8c2b8:	4004d0fa 	srli	r2,r8,3
   8c2bc:	8822d0fa 	srli	r17,r17,3
   8c2c0:	4010977a 	slli	r8,r8,29
   8c2c4:	10c0022c 	andhi	r3,r2,8
   8c2c8:	4462b03a 	or	r17,r8,r17
   8c2cc:	18000826 	beq	r3,zero,8c2f0 <__adddf3+0x760>
   8c2d0:	4808d0fa 	srli	r4,r9,3
   8c2d4:	20c0022c 	andhi	r3,r4,8
   8c2d8:	1800051e 	bne	r3,zero,8c2f0 <__adddf3+0x760>
   8c2dc:	300cd0fa 	srli	r6,r6,3
   8c2e0:	4806977a 	slli	r3,r9,29
   8c2e4:	2005883a 	mov	r2,r4
   8c2e8:	3825883a 	mov	r18,r7
   8c2ec:	19a2b03a 	or	r17,r3,r6
   8c2f0:	8810d77a 	srli	r8,r17,29
   8c2f4:	100490fa 	slli	r2,r2,3
   8c2f8:	882290fa 	slli	r17,r17,3
   8c2fc:	0401ffc4 	movi	r16,2047
   8c300:	4090b03a 	or	r8,r8,r2
   8c304:	003e4106 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c308:	0141ffc4 	movi	r5,2047
   8c30c:	117fc71e 	bne	r2,r5,8c22c <rx_descriptor_end+0xfff8c1cc>
   8c310:	4811883a 	mov	r8,r9
   8c314:	3023883a 	mov	r17,r6
   8c318:	1021883a 	mov	r16,r2
   8c31c:	003e3b06 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c320:	10002f26 	beq	r2,zero,8c3e0 <__adddf3+0x850>
   8c324:	4984b03a 	or	r2,r9,r6
   8c328:	10001126 	beq	r2,zero,8c370 <__adddf3+0x7e0>
   8c32c:	4004d0fa 	srli	r2,r8,3
   8c330:	8822d0fa 	srli	r17,r17,3
   8c334:	4010977a 	slli	r8,r8,29
   8c338:	10c0022c 	andhi	r3,r2,8
   8c33c:	4462b03a 	or	r17,r8,r17
   8c340:	183feb26 	beq	r3,zero,8c2f0 <rx_descriptor_end+0xfff8c290>
   8c344:	4808d0fa 	srli	r4,r9,3
   8c348:	20c0022c 	andhi	r3,r4,8
   8c34c:	183fe81e 	bne	r3,zero,8c2f0 <rx_descriptor_end+0xfff8c290>
   8c350:	300cd0fa 	srli	r6,r6,3
   8c354:	4806977a 	slli	r3,r9,29
   8c358:	2005883a 	mov	r2,r4
   8c35c:	19a2b03a 	or	r17,r3,r6
   8c360:	003fe306 	br	8c2f0 <rx_descriptor_end+0xfff8c290>
   8c364:	0011883a 	mov	r8,zero
   8c368:	0005883a 	mov	r2,zero
   8c36c:	003e3f06 	br	8bc6c <rx_descriptor_end+0xfff8bc0c>
   8c370:	0401ffc4 	movi	r16,2047
   8c374:	003e2506 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c378:	0013883a 	mov	r9,zero
   8c37c:	003f8406 	br	8c190 <rx_descriptor_end+0xfff8c130>
   8c380:	0005883a 	mov	r2,zero
   8c384:	0007883a 	mov	r3,zero
   8c388:	003e8906 	br	8bdb0 <rx_descriptor_end+0xfff8bd50>
   8c38c:	197ff804 	addi	r5,r3,-32
   8c390:	01000804 	movi	r4,32
   8c394:	414ad83a 	srl	r5,r8,r5
   8c398:	19002426 	beq	r3,r4,8c42c <__adddf3+0x89c>
   8c39c:	01001004 	movi	r4,64
   8c3a0:	20c7c83a 	sub	r3,r4,r3
   8c3a4:	40c6983a 	sll	r3,r8,r3
   8c3a8:	1c46b03a 	or	r3,r3,r17
   8c3ac:	1806c03a 	cmpne	r3,r3,zero
   8c3b0:	28e2b03a 	or	r17,r5,r3
   8c3b4:	0007883a 	mov	r3,zero
   8c3b8:	003f2306 	br	8c048 <rx_descriptor_end+0xfff8bfe8>
   8c3bc:	0007883a 	mov	r3,zero
   8c3c0:	5811883a 	mov	r8,r11
   8c3c4:	00bfffc4 	movi	r2,-1
   8c3c8:	0401ffc4 	movi	r16,2047
   8c3cc:	003e7806 	br	8bdb0 <rx_descriptor_end+0xfff8bd50>
   8c3d0:	4462b03a 	or	r17,r8,r17
   8c3d4:	8822c03a 	cmpne	r17,r17,zero
   8c3d8:	0009883a 	mov	r4,zero
   8c3dc:	003fa006 	br	8c260 <rx_descriptor_end+0xfff8c200>
   8c3e0:	4811883a 	mov	r8,r9
   8c3e4:	3023883a 	mov	r17,r6
   8c3e8:	0401ffc4 	movi	r16,2047
   8c3ec:	003e0706 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c3f0:	4811883a 	mov	r8,r9
   8c3f4:	3023883a 	mov	r17,r6
   8c3f8:	003e0406 	br	8bc0c <rx_descriptor_end+0xfff8bbac>
   8c3fc:	21fff804 	addi	r7,r4,-32
   8c400:	01400804 	movi	r5,32
   8c404:	41ced83a 	srl	r7,r8,r7
   8c408:	21400a26 	beq	r4,r5,8c434 <__adddf3+0x8a4>
   8c40c:	01401004 	movi	r5,64
   8c410:	2909c83a 	sub	r4,r5,r4
   8c414:	4108983a 	sll	r4,r8,r4
   8c418:	2448b03a 	or	r4,r4,r17
   8c41c:	2008c03a 	cmpne	r4,r4,zero
   8c420:	3922b03a 	or	r17,r7,r4
   8c424:	0009883a 	mov	r4,zero
   8c428:	003f8d06 	br	8c260 <rx_descriptor_end+0xfff8c200>
   8c42c:	0007883a 	mov	r3,zero
   8c430:	003fdd06 	br	8c3a8 <rx_descriptor_end+0xfff8c348>
   8c434:	0009883a 	mov	r4,zero
   8c438:	003ff706 	br	8c418 <rx_descriptor_end+0xfff8c3b8>

0008c43c <__divdf3>:
   8c43c:	defff204 	addi	sp,sp,-56
   8c440:	dd400915 	stw	r21,36(sp)
   8c444:	282ad53a 	srli	r21,r5,20
   8c448:	dd000815 	stw	r20,32(sp)
   8c44c:	2828d7fa 	srli	r20,r5,31
   8c450:	dc000415 	stw	r16,16(sp)
   8c454:	04000434 	movhi	r16,16
   8c458:	df000c15 	stw	fp,48(sp)
   8c45c:	843fffc4 	addi	r16,r16,-1
   8c460:	dfc00d15 	stw	ra,52(sp)
   8c464:	ddc00b15 	stw	r23,44(sp)
   8c468:	dd800a15 	stw	r22,40(sp)
   8c46c:	dcc00715 	stw	r19,28(sp)
   8c470:	dc800615 	stw	r18,24(sp)
   8c474:	dc400515 	stw	r17,20(sp)
   8c478:	ad41ffcc 	andi	r21,r21,2047
   8c47c:	2c20703a 	and	r16,r5,r16
   8c480:	a7003fcc 	andi	fp,r20,255
   8c484:	a8006126 	beq	r21,zero,8c60c <__divdf3+0x1d0>
   8c488:	0081ffc4 	movi	r2,2047
   8c48c:	2025883a 	mov	r18,r4
   8c490:	a8803726 	beq	r21,r2,8c570 <__divdf3+0x134>
   8c494:	80800434 	orhi	r2,r16,16
   8c498:	100490fa 	slli	r2,r2,3
   8c49c:	2020d77a 	srli	r16,r4,29
   8c4a0:	202490fa 	slli	r18,r4,3
   8c4a4:	ad7f0044 	addi	r21,r21,-1023
   8c4a8:	80a0b03a 	or	r16,r16,r2
   8c4ac:	0027883a 	mov	r19,zero
   8c4b0:	0013883a 	mov	r9,zero
   8c4b4:	3804d53a 	srli	r2,r7,20
   8c4b8:	382cd7fa 	srli	r22,r7,31
   8c4bc:	04400434 	movhi	r17,16
   8c4c0:	8c7fffc4 	addi	r17,r17,-1
   8c4c4:	1081ffcc 	andi	r2,r2,2047
   8c4c8:	3011883a 	mov	r8,r6
   8c4cc:	3c62703a 	and	r17,r7,r17
   8c4d0:	b5c03fcc 	andi	r23,r22,255
   8c4d4:	10006c26 	beq	r2,zero,8c688 <__divdf3+0x24c>
   8c4d8:	00c1ffc4 	movi	r3,2047
   8c4dc:	10c06426 	beq	r2,r3,8c670 <__divdf3+0x234>
   8c4e0:	88c00434 	orhi	r3,r17,16
   8c4e4:	180690fa 	slli	r3,r3,3
   8c4e8:	3022d77a 	srli	r17,r6,29
   8c4ec:	301090fa 	slli	r8,r6,3
   8c4f0:	10bf0044 	addi	r2,r2,-1023
   8c4f4:	88e2b03a 	or	r17,r17,r3
   8c4f8:	000f883a 	mov	r7,zero
   8c4fc:	a58cf03a 	xor	r6,r20,r22
   8c500:	3cc8b03a 	or	r4,r7,r19
   8c504:	a8abc83a 	sub	r21,r21,r2
   8c508:	008003c4 	movi	r2,15
   8c50c:	3007883a 	mov	r3,r6
   8c510:	34c03fcc 	andi	r19,r6,255
   8c514:	11009036 	bltu	r2,r4,8c758 <__divdf3+0x31c>
   8c518:	200890ba 	slli	r4,r4,2
   8c51c:	00800274 	movhi	r2,9
   8c520:	10b14c04 	addi	r2,r2,-15056
   8c524:	2089883a 	add	r4,r4,r2
   8c528:	20800017 	ldw	r2,0(r4)
   8c52c:	1000683a 	jmp	r2
   8c530:	0008c758 	cmpnei	zero,zero,8989
   8c534:	0008c5a8 	cmpgeui	zero,zero,8982
   8c538:	0008c748 	cmpgei	zero,zero,8989
   8c53c:	0008c59c 	xori	zero,zero,8982
   8c540:	0008c748 	cmpgei	zero,zero,8989
   8c544:	0008c71c 	xori	zero,zero,8988
   8c548:	0008c748 	cmpgei	zero,zero,8989
   8c54c:	0008c59c 	xori	zero,zero,8982
   8c550:	0008c5a8 	cmpgeui	zero,zero,8982
   8c554:	0008c5a8 	cmpgeui	zero,zero,8982
   8c558:	0008c71c 	xori	zero,zero,8988
   8c55c:	0008c59c 	xori	zero,zero,8982
   8c560:	0008c58c 	andi	zero,zero,8982
   8c564:	0008c58c 	andi	zero,zero,8982
   8c568:	0008c58c 	andi	zero,zero,8982
   8c56c:	0008ca3c 	xorhi	zero,zero,9000
   8c570:	2404b03a 	or	r2,r4,r16
   8c574:	1000661e 	bne	r2,zero,8c710 <__divdf3+0x2d4>
   8c578:	04c00204 	movi	r19,8
   8c57c:	0021883a 	mov	r16,zero
   8c580:	0025883a 	mov	r18,zero
   8c584:	02400084 	movi	r9,2
   8c588:	003fca06 	br	8c4b4 <rx_descriptor_end+0xfff8c454>
   8c58c:	8023883a 	mov	r17,r16
   8c590:	9011883a 	mov	r8,r18
   8c594:	e02f883a 	mov	r23,fp
   8c598:	480f883a 	mov	r7,r9
   8c59c:	00800084 	movi	r2,2
   8c5a0:	3881311e 	bne	r7,r2,8ca68 <__divdf3+0x62c>
   8c5a4:	b827883a 	mov	r19,r23
   8c5a8:	98c0004c 	andi	r3,r19,1
   8c5ac:	0081ffc4 	movi	r2,2047
   8c5b0:	000b883a 	mov	r5,zero
   8c5b4:	0025883a 	mov	r18,zero
   8c5b8:	1004953a 	slli	r2,r2,20
   8c5bc:	18c03fcc 	andi	r3,r3,255
   8c5c0:	04400434 	movhi	r17,16
   8c5c4:	8c7fffc4 	addi	r17,r17,-1
   8c5c8:	180697fa 	slli	r3,r3,31
   8c5cc:	2c4a703a 	and	r5,r5,r17
   8c5d0:	288ab03a 	or	r5,r5,r2
   8c5d4:	28c6b03a 	or	r3,r5,r3
   8c5d8:	9005883a 	mov	r2,r18
   8c5dc:	dfc00d17 	ldw	ra,52(sp)
   8c5e0:	df000c17 	ldw	fp,48(sp)
   8c5e4:	ddc00b17 	ldw	r23,44(sp)
   8c5e8:	dd800a17 	ldw	r22,40(sp)
   8c5ec:	dd400917 	ldw	r21,36(sp)
   8c5f0:	dd000817 	ldw	r20,32(sp)
   8c5f4:	dcc00717 	ldw	r19,28(sp)
   8c5f8:	dc800617 	ldw	r18,24(sp)
   8c5fc:	dc400517 	ldw	r17,20(sp)
   8c600:	dc000417 	ldw	r16,16(sp)
   8c604:	dec00e04 	addi	sp,sp,56
   8c608:	f800283a 	ret
   8c60c:	2404b03a 	or	r2,r4,r16
   8c610:	2027883a 	mov	r19,r4
   8c614:	10003926 	beq	r2,zero,8c6fc <__divdf3+0x2c0>
   8c618:	80012e26 	beq	r16,zero,8cad4 <__divdf3+0x698>
   8c61c:	8009883a 	mov	r4,r16
   8c620:	d9800315 	stw	r6,12(sp)
   8c624:	d9c00215 	stw	r7,8(sp)
   8c628:	008e1940 	call	8e194 <__clzsi2>
   8c62c:	d9800317 	ldw	r6,12(sp)
   8c630:	d9c00217 	ldw	r7,8(sp)
   8c634:	113ffd44 	addi	r4,r2,-11
   8c638:	00c00704 	movi	r3,28
   8c63c:	19012116 	blt	r3,r4,8cac4 <__divdf3+0x688>
   8c640:	00c00744 	movi	r3,29
   8c644:	147ffe04 	addi	r17,r2,-8
   8c648:	1907c83a 	sub	r3,r3,r4
   8c64c:	8460983a 	sll	r16,r16,r17
   8c650:	98c6d83a 	srl	r3,r19,r3
   8c654:	9c64983a 	sll	r18,r19,r17
   8c658:	1c20b03a 	or	r16,r3,r16
   8c65c:	1080fcc4 	addi	r2,r2,1011
   8c660:	00abc83a 	sub	r21,zero,r2
   8c664:	0027883a 	mov	r19,zero
   8c668:	0013883a 	mov	r9,zero
   8c66c:	003f9106 	br	8c4b4 <rx_descriptor_end+0xfff8c454>
   8c670:	3446b03a 	or	r3,r6,r17
   8c674:	18001f1e 	bne	r3,zero,8c6f4 <__divdf3+0x2b8>
   8c678:	0023883a 	mov	r17,zero
   8c67c:	0011883a 	mov	r8,zero
   8c680:	01c00084 	movi	r7,2
   8c684:	003f9d06 	br	8c4fc <rx_descriptor_end+0xfff8c49c>
   8c688:	3446b03a 	or	r3,r6,r17
   8c68c:	18001526 	beq	r3,zero,8c6e4 <__divdf3+0x2a8>
   8c690:	88011b26 	beq	r17,zero,8cb00 <__divdf3+0x6c4>
   8c694:	8809883a 	mov	r4,r17
   8c698:	d9800315 	stw	r6,12(sp)
   8c69c:	da400115 	stw	r9,4(sp)
   8c6a0:	008e1940 	call	8e194 <__clzsi2>
   8c6a4:	d9800317 	ldw	r6,12(sp)
   8c6a8:	da400117 	ldw	r9,4(sp)
   8c6ac:	113ffd44 	addi	r4,r2,-11
   8c6b0:	00c00704 	movi	r3,28
   8c6b4:	19010e16 	blt	r3,r4,8caf0 <__divdf3+0x6b4>
   8c6b8:	00c00744 	movi	r3,29
   8c6bc:	123ffe04 	addi	r8,r2,-8
   8c6c0:	1907c83a 	sub	r3,r3,r4
   8c6c4:	8a22983a 	sll	r17,r17,r8
   8c6c8:	30c6d83a 	srl	r3,r6,r3
   8c6cc:	3210983a 	sll	r8,r6,r8
   8c6d0:	1c62b03a 	or	r17,r3,r17
   8c6d4:	1080fcc4 	addi	r2,r2,1011
   8c6d8:	0085c83a 	sub	r2,zero,r2
   8c6dc:	000f883a 	mov	r7,zero
   8c6e0:	003f8606 	br	8c4fc <rx_descriptor_end+0xfff8c49c>
   8c6e4:	0023883a 	mov	r17,zero
   8c6e8:	0011883a 	mov	r8,zero
   8c6ec:	01c00044 	movi	r7,1
   8c6f0:	003f8206 	br	8c4fc <rx_descriptor_end+0xfff8c49c>
   8c6f4:	01c000c4 	movi	r7,3
   8c6f8:	003f8006 	br	8c4fc <rx_descriptor_end+0xfff8c49c>
   8c6fc:	04c00104 	movi	r19,4
   8c700:	0021883a 	mov	r16,zero
   8c704:	0025883a 	mov	r18,zero
   8c708:	02400044 	movi	r9,1
   8c70c:	003f6906 	br	8c4b4 <rx_descriptor_end+0xfff8c454>
   8c710:	04c00304 	movi	r19,12
   8c714:	024000c4 	movi	r9,3
   8c718:	003f6606 	br	8c4b4 <rx_descriptor_end+0xfff8c454>
   8c71c:	01400434 	movhi	r5,16
   8c720:	0007883a 	mov	r3,zero
   8c724:	297fffc4 	addi	r5,r5,-1
   8c728:	04bfffc4 	movi	r18,-1
   8c72c:	0081ffc4 	movi	r2,2047
   8c730:	003fa106 	br	8c5b8 <rx_descriptor_end+0xfff8c558>
   8c734:	00c00044 	movi	r3,1
   8c738:	1887c83a 	sub	r3,r3,r2
   8c73c:	01000e04 	movi	r4,56
   8c740:	20c1210e 	bge	r4,r3,8cbc8 <__divdf3+0x78c>
   8c744:	98c0004c 	andi	r3,r19,1
   8c748:	0005883a 	mov	r2,zero
   8c74c:	000b883a 	mov	r5,zero
   8c750:	0025883a 	mov	r18,zero
   8c754:	003f9806 	br	8c5b8 <rx_descriptor_end+0xfff8c558>
   8c758:	8c00fd36 	bltu	r17,r16,8cb50 <__divdf3+0x714>
   8c75c:	8440fb26 	beq	r16,r17,8cb4c <__divdf3+0x710>
   8c760:	8007883a 	mov	r3,r16
   8c764:	ad7fffc4 	addi	r21,r21,-1
   8c768:	0021883a 	mov	r16,zero
   8c76c:	4004d63a 	srli	r2,r8,24
   8c770:	8822923a 	slli	r17,r17,8
   8c774:	1809883a 	mov	r4,r3
   8c778:	402c923a 	slli	r22,r8,8
   8c77c:	88b8b03a 	or	fp,r17,r2
   8c780:	e028d43a 	srli	r20,fp,16
   8c784:	d8c00015 	stw	r3,0(sp)
   8c788:	e5ffffcc 	andi	r23,fp,65535
   8c78c:	a00b883a 	mov	r5,r20
   8c790:	008bad40 	call	8bad4 <__udivsi3>
   8c794:	d8c00017 	ldw	r3,0(sp)
   8c798:	a00b883a 	mov	r5,r20
   8c79c:	d8800315 	stw	r2,12(sp)
   8c7a0:	1809883a 	mov	r4,r3
   8c7a4:	008bb380 	call	8bb38 <__umodsi3>
   8c7a8:	d9800317 	ldw	r6,12(sp)
   8c7ac:	1006943a 	slli	r3,r2,16
   8c7b0:	9004d43a 	srli	r2,r18,16
   8c7b4:	b9a3383a 	mul	r17,r23,r6
   8c7b8:	10c4b03a 	or	r2,r2,r3
   8c7bc:	1440062e 	bgeu	r2,r17,8c7d8 <__divdf3+0x39c>
   8c7c0:	1705883a 	add	r2,r2,fp
   8c7c4:	30ffffc4 	addi	r3,r6,-1
   8c7c8:	1700ee36 	bltu	r2,fp,8cb84 <__divdf3+0x748>
   8c7cc:	1440ed2e 	bgeu	r2,r17,8cb84 <__divdf3+0x748>
   8c7d0:	31bfff84 	addi	r6,r6,-2
   8c7d4:	1705883a 	add	r2,r2,fp
   8c7d8:	1463c83a 	sub	r17,r2,r17
   8c7dc:	a00b883a 	mov	r5,r20
   8c7e0:	8809883a 	mov	r4,r17
   8c7e4:	d9800315 	stw	r6,12(sp)
   8c7e8:	008bad40 	call	8bad4 <__udivsi3>
   8c7ec:	a00b883a 	mov	r5,r20
   8c7f0:	8809883a 	mov	r4,r17
   8c7f4:	d8800215 	stw	r2,8(sp)
   8c7f8:	008bb380 	call	8bb38 <__umodsi3>
   8c7fc:	d9c00217 	ldw	r7,8(sp)
   8c800:	1004943a 	slli	r2,r2,16
   8c804:	94bfffcc 	andi	r18,r18,65535
   8c808:	b9d1383a 	mul	r8,r23,r7
   8c80c:	90a4b03a 	or	r18,r18,r2
   8c810:	d9800317 	ldw	r6,12(sp)
   8c814:	9200062e 	bgeu	r18,r8,8c830 <__divdf3+0x3f4>
   8c818:	9725883a 	add	r18,r18,fp
   8c81c:	38bfffc4 	addi	r2,r7,-1
   8c820:	9700d636 	bltu	r18,fp,8cb7c <__divdf3+0x740>
   8c824:	9200d52e 	bgeu	r18,r8,8cb7c <__divdf3+0x740>
   8c828:	39ffff84 	addi	r7,r7,-2
   8c82c:	9725883a 	add	r18,r18,fp
   8c830:	3004943a 	slli	r2,r6,16
   8c834:	b012d43a 	srli	r9,r22,16
   8c838:	b1bfffcc 	andi	r6,r22,65535
   8c83c:	11e2b03a 	or	r17,r2,r7
   8c840:	8806d43a 	srli	r3,r17,16
   8c844:	893fffcc 	andi	r4,r17,65535
   8c848:	218b383a 	mul	r5,r4,r6
   8c84c:	30c5383a 	mul	r2,r6,r3
   8c850:	2249383a 	mul	r4,r4,r9
   8c854:	280ed43a 	srli	r7,r5,16
   8c858:	9225c83a 	sub	r18,r18,r8
   8c85c:	2089883a 	add	r4,r4,r2
   8c860:	3909883a 	add	r4,r7,r4
   8c864:	1a47383a 	mul	r3,r3,r9
   8c868:	2080022e 	bgeu	r4,r2,8c874 <__divdf3+0x438>
   8c86c:	00800074 	movhi	r2,1
   8c870:	1887883a 	add	r3,r3,r2
   8c874:	2004d43a 	srli	r2,r4,16
   8c878:	2008943a 	slli	r4,r4,16
   8c87c:	297fffcc 	andi	r5,r5,65535
   8c880:	10c7883a 	add	r3,r2,r3
   8c884:	2149883a 	add	r4,r4,r5
   8c888:	90c0a536 	bltu	r18,r3,8cb20 <__divdf3+0x6e4>
   8c88c:	90c0bf26 	beq	r18,r3,8cb8c <__divdf3+0x750>
   8c890:	90c7c83a 	sub	r3,r18,r3
   8c894:	810fc83a 	sub	r7,r16,r4
   8c898:	81e5803a 	cmpltu	r18,r16,r7
   8c89c:	1ca5c83a 	sub	r18,r3,r18
   8c8a0:	e480c126 	beq	fp,r18,8cba8 <__divdf3+0x76c>
   8c8a4:	a00b883a 	mov	r5,r20
   8c8a8:	9009883a 	mov	r4,r18
   8c8ac:	d9800315 	stw	r6,12(sp)
   8c8b0:	d9c00215 	stw	r7,8(sp)
   8c8b4:	da400115 	stw	r9,4(sp)
   8c8b8:	008bad40 	call	8bad4 <__udivsi3>
   8c8bc:	a00b883a 	mov	r5,r20
   8c8c0:	9009883a 	mov	r4,r18
   8c8c4:	d8800015 	stw	r2,0(sp)
   8c8c8:	008bb380 	call	8bb38 <__umodsi3>
   8c8cc:	d9c00217 	ldw	r7,8(sp)
   8c8d0:	da000017 	ldw	r8,0(sp)
   8c8d4:	1006943a 	slli	r3,r2,16
   8c8d8:	3804d43a 	srli	r2,r7,16
   8c8dc:	ba21383a 	mul	r16,r23,r8
   8c8e0:	d9800317 	ldw	r6,12(sp)
   8c8e4:	10c4b03a 	or	r2,r2,r3
   8c8e8:	da400117 	ldw	r9,4(sp)
   8c8ec:	1400062e 	bgeu	r2,r16,8c908 <__divdf3+0x4cc>
   8c8f0:	1705883a 	add	r2,r2,fp
   8c8f4:	40ffffc4 	addi	r3,r8,-1
   8c8f8:	1700ad36 	bltu	r2,fp,8cbb0 <__divdf3+0x774>
   8c8fc:	1400ac2e 	bgeu	r2,r16,8cbb0 <__divdf3+0x774>
   8c900:	423fff84 	addi	r8,r8,-2
   8c904:	1705883a 	add	r2,r2,fp
   8c908:	1421c83a 	sub	r16,r2,r16
   8c90c:	a00b883a 	mov	r5,r20
   8c910:	8009883a 	mov	r4,r16
   8c914:	d9800315 	stw	r6,12(sp)
   8c918:	d9c00215 	stw	r7,8(sp)
   8c91c:	da000015 	stw	r8,0(sp)
   8c920:	da400115 	stw	r9,4(sp)
   8c924:	008bad40 	call	8bad4 <__udivsi3>
   8c928:	8009883a 	mov	r4,r16
   8c92c:	a00b883a 	mov	r5,r20
   8c930:	1025883a 	mov	r18,r2
   8c934:	008bb380 	call	8bb38 <__umodsi3>
   8c938:	d9c00217 	ldw	r7,8(sp)
   8c93c:	1004943a 	slli	r2,r2,16
   8c940:	bcaf383a 	mul	r23,r23,r18
   8c944:	393fffcc 	andi	r4,r7,65535
   8c948:	2088b03a 	or	r4,r4,r2
   8c94c:	d9800317 	ldw	r6,12(sp)
   8c950:	da000017 	ldw	r8,0(sp)
   8c954:	da400117 	ldw	r9,4(sp)
   8c958:	25c0062e 	bgeu	r4,r23,8c974 <__divdf3+0x538>
   8c95c:	2709883a 	add	r4,r4,fp
   8c960:	90bfffc4 	addi	r2,r18,-1
   8c964:	27009436 	bltu	r4,fp,8cbb8 <__divdf3+0x77c>
   8c968:	25c0932e 	bgeu	r4,r23,8cbb8 <__divdf3+0x77c>
   8c96c:	94bfff84 	addi	r18,r18,-2
   8c970:	2709883a 	add	r4,r4,fp
   8c974:	4004943a 	slli	r2,r8,16
   8c978:	25efc83a 	sub	r23,r4,r23
   8c97c:	1490b03a 	or	r8,r2,r18
   8c980:	4008d43a 	srli	r4,r8,16
   8c984:	40ffffcc 	andi	r3,r8,65535
   8c988:	30c5383a 	mul	r2,r6,r3
   8c98c:	1a47383a 	mul	r3,r3,r9
   8c990:	310d383a 	mul	r6,r6,r4
   8c994:	100ad43a 	srli	r5,r2,16
   8c998:	4913383a 	mul	r9,r9,r4
   8c99c:	1987883a 	add	r3,r3,r6
   8c9a0:	28c7883a 	add	r3,r5,r3
   8c9a4:	1980022e 	bgeu	r3,r6,8c9b0 <__divdf3+0x574>
   8c9a8:	01000074 	movhi	r4,1
   8c9ac:	4913883a 	add	r9,r9,r4
   8c9b0:	1808d43a 	srli	r4,r3,16
   8c9b4:	1806943a 	slli	r3,r3,16
   8c9b8:	10bfffcc 	andi	r2,r2,65535
   8c9bc:	2253883a 	add	r9,r4,r9
   8c9c0:	1887883a 	add	r3,r3,r2
   8c9c4:	ba403836 	bltu	r23,r9,8caa8 <__divdf3+0x66c>
   8c9c8:	ba403626 	beq	r23,r9,8caa4 <__divdf3+0x668>
   8c9cc:	42000054 	ori	r8,r8,1
   8c9d0:	a880ffc4 	addi	r2,r21,1023
   8c9d4:	00bf570e 	bge	zero,r2,8c734 <rx_descriptor_end+0xfff8c6d4>
   8c9d8:	40c001cc 	andi	r3,r8,7
   8c9dc:	18000726 	beq	r3,zero,8c9fc <__divdf3+0x5c0>
   8c9e0:	40c003cc 	andi	r3,r8,15
   8c9e4:	01000104 	movi	r4,4
   8c9e8:	19000426 	beq	r3,r4,8c9fc <__divdf3+0x5c0>
   8c9ec:	4107883a 	add	r3,r8,r4
   8c9f0:	1a11803a 	cmpltu	r8,r3,r8
   8c9f4:	8a23883a 	add	r17,r17,r8
   8c9f8:	1811883a 	mov	r8,r3
   8c9fc:	88c0402c 	andhi	r3,r17,256
   8ca00:	18000426 	beq	r3,zero,8ca14 <__divdf3+0x5d8>
   8ca04:	00ffc034 	movhi	r3,65280
   8ca08:	18ffffc4 	addi	r3,r3,-1
   8ca0c:	a8810004 	addi	r2,r21,1024
   8ca10:	88e2703a 	and	r17,r17,r3
   8ca14:	00c1ff84 	movi	r3,2046
   8ca18:	18bee316 	blt	r3,r2,8c5a8 <rx_descriptor_end+0xfff8c548>
   8ca1c:	8824977a 	slli	r18,r17,29
   8ca20:	4010d0fa 	srli	r8,r8,3
   8ca24:	8822927a 	slli	r17,r17,9
   8ca28:	1081ffcc 	andi	r2,r2,2047
   8ca2c:	9224b03a 	or	r18,r18,r8
   8ca30:	880ad33a 	srli	r5,r17,12
   8ca34:	98c0004c 	andi	r3,r19,1
   8ca38:	003edf06 	br	8c5b8 <rx_descriptor_end+0xfff8c558>
   8ca3c:	8080022c 	andhi	r2,r16,8
   8ca40:	10001226 	beq	r2,zero,8ca8c <__divdf3+0x650>
   8ca44:	8880022c 	andhi	r2,r17,8
   8ca48:	1000101e 	bne	r2,zero,8ca8c <__divdf3+0x650>
   8ca4c:	00800434 	movhi	r2,16
   8ca50:	89400234 	orhi	r5,r17,8
   8ca54:	10bfffc4 	addi	r2,r2,-1
   8ca58:	b007883a 	mov	r3,r22
   8ca5c:	288a703a 	and	r5,r5,r2
   8ca60:	4025883a 	mov	r18,r8
   8ca64:	003f3106 	br	8c72c <rx_descriptor_end+0xfff8c6cc>
   8ca68:	008000c4 	movi	r2,3
   8ca6c:	3880a626 	beq	r7,r2,8cd08 <__divdf3+0x8cc>
   8ca70:	00800044 	movi	r2,1
   8ca74:	3880521e 	bne	r7,r2,8cbc0 <__divdf3+0x784>
   8ca78:	b807883a 	mov	r3,r23
   8ca7c:	0005883a 	mov	r2,zero
   8ca80:	000b883a 	mov	r5,zero
   8ca84:	0025883a 	mov	r18,zero
   8ca88:	003ecb06 	br	8c5b8 <rx_descriptor_end+0xfff8c558>
   8ca8c:	00800434 	movhi	r2,16
   8ca90:	81400234 	orhi	r5,r16,8
   8ca94:	10bfffc4 	addi	r2,r2,-1
   8ca98:	a007883a 	mov	r3,r20
   8ca9c:	288a703a 	and	r5,r5,r2
   8caa0:	003f2206 	br	8c72c <rx_descriptor_end+0xfff8c6cc>
   8caa4:	183fca26 	beq	r3,zero,8c9d0 <rx_descriptor_end+0xfff8c970>
   8caa8:	e5ef883a 	add	r23,fp,r23
   8caac:	40bfffc4 	addi	r2,r8,-1
   8cab0:	bf00392e 	bgeu	r23,fp,8cb98 <__divdf3+0x75c>
   8cab4:	1011883a 	mov	r8,r2
   8cab8:	ba7fc41e 	bne	r23,r9,8c9cc <rx_descriptor_end+0xfff8c96c>
   8cabc:	b0ffc31e 	bne	r22,r3,8c9cc <rx_descriptor_end+0xfff8c96c>
   8cac0:	003fc306 	br	8c9d0 <rx_descriptor_end+0xfff8c970>
   8cac4:	143ff604 	addi	r16,r2,-40
   8cac8:	9c20983a 	sll	r16,r19,r16
   8cacc:	0025883a 	mov	r18,zero
   8cad0:	003ee206 	br	8c65c <rx_descriptor_end+0xfff8c5fc>
   8cad4:	d9800315 	stw	r6,12(sp)
   8cad8:	d9c00215 	stw	r7,8(sp)
   8cadc:	008e1940 	call	8e194 <__clzsi2>
   8cae0:	10800804 	addi	r2,r2,32
   8cae4:	d9c00217 	ldw	r7,8(sp)
   8cae8:	d9800317 	ldw	r6,12(sp)
   8caec:	003ed106 	br	8c634 <rx_descriptor_end+0xfff8c5d4>
   8caf0:	147ff604 	addi	r17,r2,-40
   8caf4:	3462983a 	sll	r17,r6,r17
   8caf8:	0011883a 	mov	r8,zero
   8cafc:	003ef506 	br	8c6d4 <rx_descriptor_end+0xfff8c674>
   8cb00:	3009883a 	mov	r4,r6
   8cb04:	d9800315 	stw	r6,12(sp)
   8cb08:	da400115 	stw	r9,4(sp)
   8cb0c:	008e1940 	call	8e194 <__clzsi2>
   8cb10:	10800804 	addi	r2,r2,32
   8cb14:	da400117 	ldw	r9,4(sp)
   8cb18:	d9800317 	ldw	r6,12(sp)
   8cb1c:	003ee306 	br	8c6ac <rx_descriptor_end+0xfff8c64c>
   8cb20:	85a1883a 	add	r16,r16,r22
   8cb24:	8585803a 	cmpltu	r2,r16,r22
   8cb28:	1705883a 	add	r2,r2,fp
   8cb2c:	14a5883a 	add	r18,r2,r18
   8cb30:	88bfffc4 	addi	r2,r17,-1
   8cb34:	e4800c2e 	bgeu	fp,r18,8cb68 <__divdf3+0x72c>
   8cb38:	90c03e36 	bltu	r18,r3,8cc34 <__divdf3+0x7f8>
   8cb3c:	1c806926 	beq	r3,r18,8cce4 <__divdf3+0x8a8>
   8cb40:	90c7c83a 	sub	r3,r18,r3
   8cb44:	1023883a 	mov	r17,r2
   8cb48:	003f5206 	br	8c894 <rx_descriptor_end+0xfff8c834>
   8cb4c:	923f0436 	bltu	r18,r8,8c760 <rx_descriptor_end+0xfff8c700>
   8cb50:	800897fa 	slli	r4,r16,31
   8cb54:	9004d07a 	srli	r2,r18,1
   8cb58:	8006d07a 	srli	r3,r16,1
   8cb5c:	902097fa 	slli	r16,r18,31
   8cb60:	20a4b03a 	or	r18,r4,r2
   8cb64:	003f0106 	br	8c76c <rx_descriptor_end+0xfff8c70c>
   8cb68:	e4bff51e 	bne	fp,r18,8cb40 <rx_descriptor_end+0xfff8cae0>
   8cb6c:	85bff22e 	bgeu	r16,r22,8cb38 <rx_descriptor_end+0xfff8cad8>
   8cb70:	e0c7c83a 	sub	r3,fp,r3
   8cb74:	1023883a 	mov	r17,r2
   8cb78:	003f4606 	br	8c894 <rx_descriptor_end+0xfff8c834>
   8cb7c:	100f883a 	mov	r7,r2
   8cb80:	003f2b06 	br	8c830 <rx_descriptor_end+0xfff8c7d0>
   8cb84:	180d883a 	mov	r6,r3
   8cb88:	003f1306 	br	8c7d8 <rx_descriptor_end+0xfff8c778>
   8cb8c:	813fe436 	bltu	r16,r4,8cb20 <rx_descriptor_end+0xfff8cac0>
   8cb90:	0007883a 	mov	r3,zero
   8cb94:	003f3f06 	br	8c894 <rx_descriptor_end+0xfff8c834>
   8cb98:	ba402c36 	bltu	r23,r9,8cc4c <__divdf3+0x810>
   8cb9c:	4dc05426 	beq	r9,r23,8ccf0 <__divdf3+0x8b4>
   8cba0:	1011883a 	mov	r8,r2
   8cba4:	003f8906 	br	8c9cc <rx_descriptor_end+0xfff8c96c>
   8cba8:	023fffc4 	movi	r8,-1
   8cbac:	003f8806 	br	8c9d0 <rx_descriptor_end+0xfff8c970>
   8cbb0:	1811883a 	mov	r8,r3
   8cbb4:	003f5406 	br	8c908 <rx_descriptor_end+0xfff8c8a8>
   8cbb8:	1025883a 	mov	r18,r2
   8cbbc:	003f6d06 	br	8c974 <rx_descriptor_end+0xfff8c914>
   8cbc0:	b827883a 	mov	r19,r23
   8cbc4:	003f8206 	br	8c9d0 <rx_descriptor_end+0xfff8c970>
   8cbc8:	010007c4 	movi	r4,31
   8cbcc:	20c02616 	blt	r4,r3,8cc68 <__divdf3+0x82c>
   8cbd0:	00800804 	movi	r2,32
   8cbd4:	10c5c83a 	sub	r2,r2,r3
   8cbd8:	888a983a 	sll	r5,r17,r2
   8cbdc:	40c8d83a 	srl	r4,r8,r3
   8cbe0:	4084983a 	sll	r2,r8,r2
   8cbe4:	88e2d83a 	srl	r17,r17,r3
   8cbe8:	2906b03a 	or	r3,r5,r4
   8cbec:	1004c03a 	cmpne	r2,r2,zero
   8cbf0:	1886b03a 	or	r3,r3,r2
   8cbf4:	188001cc 	andi	r2,r3,7
   8cbf8:	10000726 	beq	r2,zero,8cc18 <__divdf3+0x7dc>
   8cbfc:	188003cc 	andi	r2,r3,15
   8cc00:	01000104 	movi	r4,4
   8cc04:	11000426 	beq	r2,r4,8cc18 <__divdf3+0x7dc>
   8cc08:	1805883a 	mov	r2,r3
   8cc0c:	10c00104 	addi	r3,r2,4
   8cc10:	1885803a 	cmpltu	r2,r3,r2
   8cc14:	88a3883a 	add	r17,r17,r2
   8cc18:	8880202c 	andhi	r2,r17,128
   8cc1c:	10002726 	beq	r2,zero,8ccbc <__divdf3+0x880>
   8cc20:	98c0004c 	andi	r3,r19,1
   8cc24:	00800044 	movi	r2,1
   8cc28:	000b883a 	mov	r5,zero
   8cc2c:	0025883a 	mov	r18,zero
   8cc30:	003e6106 	br	8c5b8 <rx_descriptor_end+0xfff8c558>
   8cc34:	85a1883a 	add	r16,r16,r22
   8cc38:	8585803a 	cmpltu	r2,r16,r22
   8cc3c:	1705883a 	add	r2,r2,fp
   8cc40:	14a5883a 	add	r18,r2,r18
   8cc44:	8c7fff84 	addi	r17,r17,-2
   8cc48:	003f1106 	br	8c890 <rx_descriptor_end+0xfff8c830>
   8cc4c:	b589883a 	add	r4,r22,r22
   8cc50:	25ad803a 	cmpltu	r22,r4,r22
   8cc54:	b739883a 	add	fp,r22,fp
   8cc58:	40bfff84 	addi	r2,r8,-2
   8cc5c:	bf2f883a 	add	r23,r23,fp
   8cc60:	202d883a 	mov	r22,r4
   8cc64:	003f9306 	br	8cab4 <rx_descriptor_end+0xfff8ca54>
   8cc68:	013ff844 	movi	r4,-31
   8cc6c:	2085c83a 	sub	r2,r4,r2
   8cc70:	8888d83a 	srl	r4,r17,r2
   8cc74:	00800804 	movi	r2,32
   8cc78:	18802126 	beq	r3,r2,8cd00 <__divdf3+0x8c4>
   8cc7c:	00801004 	movi	r2,64
   8cc80:	10c5c83a 	sub	r2,r2,r3
   8cc84:	8884983a 	sll	r2,r17,r2
   8cc88:	1204b03a 	or	r2,r2,r8
   8cc8c:	1004c03a 	cmpne	r2,r2,zero
   8cc90:	2084b03a 	or	r2,r4,r2
   8cc94:	144001cc 	andi	r17,r2,7
   8cc98:	88000d1e 	bne	r17,zero,8ccd0 <__divdf3+0x894>
   8cc9c:	000b883a 	mov	r5,zero
   8cca0:	1024d0fa 	srli	r18,r2,3
   8cca4:	98c0004c 	andi	r3,r19,1
   8cca8:	0005883a 	mov	r2,zero
   8ccac:	9464b03a 	or	r18,r18,r17
   8ccb0:	003e4106 	br	8c5b8 <rx_descriptor_end+0xfff8c558>
   8ccb4:	1007883a 	mov	r3,r2
   8ccb8:	0023883a 	mov	r17,zero
   8ccbc:	880a927a 	slli	r5,r17,9
   8ccc0:	1805883a 	mov	r2,r3
   8ccc4:	8822977a 	slli	r17,r17,29
   8ccc8:	280ad33a 	srli	r5,r5,12
   8cccc:	003ff406 	br	8cca0 <rx_descriptor_end+0xfff8cc40>
   8ccd0:	10c003cc 	andi	r3,r2,15
   8ccd4:	01000104 	movi	r4,4
   8ccd8:	193ff626 	beq	r3,r4,8ccb4 <rx_descriptor_end+0xfff8cc54>
   8ccdc:	0023883a 	mov	r17,zero
   8cce0:	003fca06 	br	8cc0c <rx_descriptor_end+0xfff8cbac>
   8cce4:	813fd336 	bltu	r16,r4,8cc34 <rx_descriptor_end+0xfff8cbd4>
   8cce8:	1023883a 	mov	r17,r2
   8ccec:	003fa806 	br	8cb90 <rx_descriptor_end+0xfff8cb30>
   8ccf0:	b0ffd636 	bltu	r22,r3,8cc4c <rx_descriptor_end+0xfff8cbec>
   8ccf4:	1011883a 	mov	r8,r2
   8ccf8:	b0ff341e 	bne	r22,r3,8c9cc <rx_descriptor_end+0xfff8c96c>
   8ccfc:	003f3406 	br	8c9d0 <rx_descriptor_end+0xfff8c970>
   8cd00:	0005883a 	mov	r2,zero
   8cd04:	003fe006 	br	8cc88 <rx_descriptor_end+0xfff8cc28>
   8cd08:	00800434 	movhi	r2,16
   8cd0c:	89400234 	orhi	r5,r17,8
   8cd10:	10bfffc4 	addi	r2,r2,-1
   8cd14:	b807883a 	mov	r3,r23
   8cd18:	288a703a 	and	r5,r5,r2
   8cd1c:	4025883a 	mov	r18,r8
   8cd20:	003e8206 	br	8c72c <rx_descriptor_end+0xfff8c6cc>

0008cd24 <__eqdf2>:
   8cd24:	2804d53a 	srli	r2,r5,20
   8cd28:	3806d53a 	srli	r3,r7,20
   8cd2c:	02000434 	movhi	r8,16
   8cd30:	423fffc4 	addi	r8,r8,-1
   8cd34:	1081ffcc 	andi	r2,r2,2047
   8cd38:	0281ffc4 	movi	r10,2047
   8cd3c:	2a12703a 	and	r9,r5,r8
   8cd40:	18c1ffcc 	andi	r3,r3,2047
   8cd44:	3a10703a 	and	r8,r7,r8
   8cd48:	280ad7fa 	srli	r5,r5,31
   8cd4c:	380ed7fa 	srli	r7,r7,31
   8cd50:	12801026 	beq	r2,r10,8cd94 <__eqdf2+0x70>
   8cd54:	0281ffc4 	movi	r10,2047
   8cd58:	1a800a26 	beq	r3,r10,8cd84 <__eqdf2+0x60>
   8cd5c:	10c00226 	beq	r2,r3,8cd68 <__eqdf2+0x44>
   8cd60:	00800044 	movi	r2,1
   8cd64:	f800283a 	ret
   8cd68:	4a3ffd1e 	bne	r9,r8,8cd60 <rx_descriptor_end+0xfff8cd00>
   8cd6c:	21bffc1e 	bne	r4,r6,8cd60 <rx_descriptor_end+0xfff8cd00>
   8cd70:	29c00c26 	beq	r5,r7,8cda4 <__eqdf2+0x80>
   8cd74:	103ffa1e 	bne	r2,zero,8cd60 <rx_descriptor_end+0xfff8cd00>
   8cd78:	2244b03a 	or	r2,r4,r9
   8cd7c:	1004c03a 	cmpne	r2,r2,zero
   8cd80:	f800283a 	ret
   8cd84:	3214b03a 	or	r10,r6,r8
   8cd88:	503ff426 	beq	r10,zero,8cd5c <rx_descriptor_end+0xfff8ccfc>
   8cd8c:	00800044 	movi	r2,1
   8cd90:	f800283a 	ret
   8cd94:	2254b03a 	or	r10,r4,r9
   8cd98:	503fee26 	beq	r10,zero,8cd54 <rx_descriptor_end+0xfff8ccf4>
   8cd9c:	00800044 	movi	r2,1
   8cda0:	f800283a 	ret
   8cda4:	0005883a 	mov	r2,zero
   8cda8:	f800283a 	ret

0008cdac <__gedf2>:
   8cdac:	2804d53a 	srli	r2,r5,20
   8cdb0:	3806d53a 	srli	r3,r7,20
   8cdb4:	02000434 	movhi	r8,16
   8cdb8:	423fffc4 	addi	r8,r8,-1
   8cdbc:	1081ffcc 	andi	r2,r2,2047
   8cdc0:	0241ffc4 	movi	r9,2047
   8cdc4:	2a14703a 	and	r10,r5,r8
   8cdc8:	18c1ffcc 	andi	r3,r3,2047
   8cdcc:	3a10703a 	and	r8,r7,r8
   8cdd0:	280ad7fa 	srli	r5,r5,31
   8cdd4:	380ed7fa 	srli	r7,r7,31
   8cdd8:	12401d26 	beq	r2,r9,8ce50 <__gedf2+0xa4>
   8cddc:	0241ffc4 	movi	r9,2047
   8cde0:	1a401226 	beq	r3,r9,8ce2c <__gedf2+0x80>
   8cde4:	1000081e 	bne	r2,zero,8ce08 <__gedf2+0x5c>
   8cde8:	2296b03a 	or	r11,r4,r10
   8cdec:	5813003a 	cmpeq	r9,r11,zero
   8cdf0:	1800091e 	bne	r3,zero,8ce18 <__gedf2+0x6c>
   8cdf4:	3218b03a 	or	r12,r6,r8
   8cdf8:	6000071e 	bne	r12,zero,8ce18 <__gedf2+0x6c>
   8cdfc:	0005883a 	mov	r2,zero
   8ce00:	5800101e 	bne	r11,zero,8ce44 <__gedf2+0x98>
   8ce04:	f800283a 	ret
   8ce08:	18000c1e 	bne	r3,zero,8ce3c <__gedf2+0x90>
   8ce0c:	3212b03a 	or	r9,r6,r8
   8ce10:	48000c26 	beq	r9,zero,8ce44 <__gedf2+0x98>
   8ce14:	0013883a 	mov	r9,zero
   8ce18:	39c03fcc 	andi	r7,r7,255
   8ce1c:	48000826 	beq	r9,zero,8ce40 <__gedf2+0x94>
   8ce20:	38000926 	beq	r7,zero,8ce48 <__gedf2+0x9c>
   8ce24:	00800044 	movi	r2,1
   8ce28:	f800283a 	ret
   8ce2c:	3212b03a 	or	r9,r6,r8
   8ce30:	483fec26 	beq	r9,zero,8cde4 <rx_descriptor_end+0xfff8cd84>
   8ce34:	00bfff84 	movi	r2,-2
   8ce38:	f800283a 	ret
   8ce3c:	39c03fcc 	andi	r7,r7,255
   8ce40:	29c00626 	beq	r5,r7,8ce5c <__gedf2+0xb0>
   8ce44:	283ff726 	beq	r5,zero,8ce24 <rx_descriptor_end+0xfff8cdc4>
   8ce48:	00bfffc4 	movi	r2,-1
   8ce4c:	f800283a 	ret
   8ce50:	2292b03a 	or	r9,r4,r10
   8ce54:	483fe126 	beq	r9,zero,8cddc <rx_descriptor_end+0xfff8cd7c>
   8ce58:	003ff606 	br	8ce34 <rx_descriptor_end+0xfff8cdd4>
   8ce5c:	18bff916 	blt	r3,r2,8ce44 <rx_descriptor_end+0xfff8cde4>
   8ce60:	10c00316 	blt	r2,r3,8ce70 <__gedf2+0xc4>
   8ce64:	42bff736 	bltu	r8,r10,8ce44 <rx_descriptor_end+0xfff8cde4>
   8ce68:	52000326 	beq	r10,r8,8ce78 <__gedf2+0xcc>
   8ce6c:	5200042e 	bgeu	r10,r8,8ce80 <__gedf2+0xd4>
   8ce70:	283fec1e 	bne	r5,zero,8ce24 <rx_descriptor_end+0xfff8cdc4>
   8ce74:	003ff406 	br	8ce48 <rx_descriptor_end+0xfff8cde8>
   8ce78:	313ff236 	bltu	r6,r4,8ce44 <rx_descriptor_end+0xfff8cde4>
   8ce7c:	21bffc36 	bltu	r4,r6,8ce70 <rx_descriptor_end+0xfff8ce10>
   8ce80:	0005883a 	mov	r2,zero
   8ce84:	f800283a 	ret

0008ce88 <__ledf2>:
   8ce88:	2804d53a 	srli	r2,r5,20
   8ce8c:	3810d53a 	srli	r8,r7,20
   8ce90:	00c00434 	movhi	r3,16
   8ce94:	18ffffc4 	addi	r3,r3,-1
   8ce98:	1081ffcc 	andi	r2,r2,2047
   8ce9c:	0241ffc4 	movi	r9,2047
   8cea0:	28d4703a 	and	r10,r5,r3
   8cea4:	4201ffcc 	andi	r8,r8,2047
   8cea8:	38c6703a 	and	r3,r7,r3
   8ceac:	280ad7fa 	srli	r5,r5,31
   8ceb0:	380ed7fa 	srli	r7,r7,31
   8ceb4:	12401f26 	beq	r2,r9,8cf34 <__ledf2+0xac>
   8ceb8:	0241ffc4 	movi	r9,2047
   8cebc:	42401426 	beq	r8,r9,8cf10 <__ledf2+0x88>
   8cec0:	1000091e 	bne	r2,zero,8cee8 <__ledf2+0x60>
   8cec4:	2296b03a 	or	r11,r4,r10
   8cec8:	5813003a 	cmpeq	r9,r11,zero
   8cecc:	29403fcc 	andi	r5,r5,255
   8ced0:	40000a1e 	bne	r8,zero,8cefc <__ledf2+0x74>
   8ced4:	30d8b03a 	or	r12,r6,r3
   8ced8:	6000081e 	bne	r12,zero,8cefc <__ledf2+0x74>
   8cedc:	0005883a 	mov	r2,zero
   8cee0:	5800111e 	bne	r11,zero,8cf28 <__ledf2+0xa0>
   8cee4:	f800283a 	ret
   8cee8:	29403fcc 	andi	r5,r5,255
   8ceec:	40000c1e 	bne	r8,zero,8cf20 <__ledf2+0x98>
   8cef0:	30d2b03a 	or	r9,r6,r3
   8cef4:	48000c26 	beq	r9,zero,8cf28 <__ledf2+0xa0>
   8cef8:	0013883a 	mov	r9,zero
   8cefc:	39c03fcc 	andi	r7,r7,255
   8cf00:	48000826 	beq	r9,zero,8cf24 <__ledf2+0x9c>
   8cf04:	38001126 	beq	r7,zero,8cf4c <__ledf2+0xc4>
   8cf08:	00800044 	movi	r2,1
   8cf0c:	f800283a 	ret
   8cf10:	30d2b03a 	or	r9,r6,r3
   8cf14:	483fea26 	beq	r9,zero,8cec0 <rx_descriptor_end+0xfff8ce60>
   8cf18:	00800084 	movi	r2,2
   8cf1c:	f800283a 	ret
   8cf20:	39c03fcc 	andi	r7,r7,255
   8cf24:	39400726 	beq	r7,r5,8cf44 <__ledf2+0xbc>
   8cf28:	2800081e 	bne	r5,zero,8cf4c <__ledf2+0xc4>
   8cf2c:	00800044 	movi	r2,1
   8cf30:	f800283a 	ret
   8cf34:	2292b03a 	or	r9,r4,r10
   8cf38:	483fdf26 	beq	r9,zero,8ceb8 <rx_descriptor_end+0xfff8ce58>
   8cf3c:	00800084 	movi	r2,2
   8cf40:	f800283a 	ret
   8cf44:	4080030e 	bge	r8,r2,8cf54 <__ledf2+0xcc>
   8cf48:	383fef26 	beq	r7,zero,8cf08 <rx_descriptor_end+0xfff8cea8>
   8cf4c:	00bfffc4 	movi	r2,-1
   8cf50:	f800283a 	ret
   8cf54:	123feb16 	blt	r2,r8,8cf04 <rx_descriptor_end+0xfff8cea4>
   8cf58:	1abff336 	bltu	r3,r10,8cf28 <rx_descriptor_end+0xfff8cec8>
   8cf5c:	50c00326 	beq	r10,r3,8cf6c <__ledf2+0xe4>
   8cf60:	50c0042e 	bgeu	r10,r3,8cf74 <__ledf2+0xec>
   8cf64:	283fe81e 	bne	r5,zero,8cf08 <rx_descriptor_end+0xfff8cea8>
   8cf68:	003ff806 	br	8cf4c <rx_descriptor_end+0xfff8ceec>
   8cf6c:	313fee36 	bltu	r6,r4,8cf28 <rx_descriptor_end+0xfff8cec8>
   8cf70:	21bffc36 	bltu	r4,r6,8cf64 <rx_descriptor_end+0xfff8cf04>
   8cf74:	0005883a 	mov	r2,zero
   8cf78:	f800283a 	ret

0008cf7c <__muldf3>:
   8cf7c:	defff304 	addi	sp,sp,-52
   8cf80:	2804d53a 	srli	r2,r5,20
   8cf84:	dd800915 	stw	r22,36(sp)
   8cf88:	282cd7fa 	srli	r22,r5,31
   8cf8c:	dc000315 	stw	r16,12(sp)
   8cf90:	04000434 	movhi	r16,16
   8cf94:	dd400815 	stw	r21,32(sp)
   8cf98:	dc800515 	stw	r18,20(sp)
   8cf9c:	843fffc4 	addi	r16,r16,-1
   8cfa0:	dfc00c15 	stw	ra,48(sp)
   8cfa4:	df000b15 	stw	fp,44(sp)
   8cfa8:	ddc00a15 	stw	r23,40(sp)
   8cfac:	dd000715 	stw	r20,28(sp)
   8cfb0:	dcc00615 	stw	r19,24(sp)
   8cfb4:	dc400415 	stw	r17,16(sp)
   8cfb8:	1481ffcc 	andi	r18,r2,2047
   8cfbc:	2c20703a 	and	r16,r5,r16
   8cfc0:	b02b883a 	mov	r21,r22
   8cfc4:	b2403fcc 	andi	r9,r22,255
   8cfc8:	90006026 	beq	r18,zero,8d14c <__muldf3+0x1d0>
   8cfcc:	0081ffc4 	movi	r2,2047
   8cfd0:	2029883a 	mov	r20,r4
   8cfd4:	90803626 	beq	r18,r2,8d0b0 <__muldf3+0x134>
   8cfd8:	80800434 	orhi	r2,r16,16
   8cfdc:	100490fa 	slli	r2,r2,3
   8cfe0:	2020d77a 	srli	r16,r4,29
   8cfe4:	202890fa 	slli	r20,r4,3
   8cfe8:	94bf0044 	addi	r18,r18,-1023
   8cfec:	80a0b03a 	or	r16,r16,r2
   8cff0:	0027883a 	mov	r19,zero
   8cff4:	0039883a 	mov	fp,zero
   8cff8:	3804d53a 	srli	r2,r7,20
   8cffc:	382ed7fa 	srli	r23,r7,31
   8d000:	04400434 	movhi	r17,16
   8d004:	8c7fffc4 	addi	r17,r17,-1
   8d008:	1081ffcc 	andi	r2,r2,2047
   8d00c:	3011883a 	mov	r8,r6
   8d010:	3c62703a 	and	r17,r7,r17
   8d014:	ba803fcc 	andi	r10,r23,255
   8d018:	10006d26 	beq	r2,zero,8d1d0 <__muldf3+0x254>
   8d01c:	00c1ffc4 	movi	r3,2047
   8d020:	10c06526 	beq	r2,r3,8d1b8 <__muldf3+0x23c>
   8d024:	88c00434 	orhi	r3,r17,16
   8d028:	180690fa 	slli	r3,r3,3
   8d02c:	3022d77a 	srli	r17,r6,29
   8d030:	301090fa 	slli	r8,r6,3
   8d034:	10bf0044 	addi	r2,r2,-1023
   8d038:	88e2b03a 	or	r17,r17,r3
   8d03c:	000b883a 	mov	r5,zero
   8d040:	9085883a 	add	r2,r18,r2
   8d044:	2cc8b03a 	or	r4,r5,r19
   8d048:	00c003c4 	movi	r3,15
   8d04c:	bdacf03a 	xor	r22,r23,r22
   8d050:	12c00044 	addi	r11,r2,1
   8d054:	19009936 	bltu	r3,r4,8d2bc <__muldf3+0x340>
   8d058:	200890ba 	slli	r4,r4,2
   8d05c:	00c00274 	movhi	r3,9
   8d060:	18f41c04 	addi	r3,r3,-12176
   8d064:	20c9883a 	add	r4,r4,r3
   8d068:	20c00017 	ldw	r3,0(r4)
   8d06c:	1800683a 	jmp	r3
   8d070:	0008d2bc 	xorhi	zero,zero,9034
   8d074:	0008d0d0 	cmplti	zero,zero,9027
   8d078:	0008d0d0 	cmplti	zero,zero,9027
   8d07c:	0008d0cc 	andi	zero,zero,9027
   8d080:	0008d298 	cmpnei	zero,zero,9034
   8d084:	0008d298 	cmpnei	zero,zero,9034
   8d088:	0008d280 	call	8d28 <__reset-0x772d8>
   8d08c:	0008d0cc 	andi	zero,zero,9027
   8d090:	0008d298 	cmpnei	zero,zero,9034
   8d094:	0008d280 	call	8d28 <__reset-0x772d8>
   8d098:	0008d298 	cmpnei	zero,zero,9034
   8d09c:	0008d0cc 	andi	zero,zero,9027
   8d0a0:	0008d2a8 	cmpgeui	zero,zero,9034
   8d0a4:	0008d2a8 	cmpgeui	zero,zero,9034
   8d0a8:	0008d2a8 	cmpgeui	zero,zero,9034
   8d0ac:	0008d4c4 	movi	zero,9043
   8d0b0:	2404b03a 	or	r2,r4,r16
   8d0b4:	10006f1e 	bne	r2,zero,8d274 <__muldf3+0x2f8>
   8d0b8:	04c00204 	movi	r19,8
   8d0bc:	0021883a 	mov	r16,zero
   8d0c0:	0029883a 	mov	r20,zero
   8d0c4:	07000084 	movi	fp,2
   8d0c8:	003fcb06 	br	8cff8 <rx_descriptor_end+0xfff8cf98>
   8d0cc:	502d883a 	mov	r22,r10
   8d0d0:	00800084 	movi	r2,2
   8d0d4:	28805726 	beq	r5,r2,8d234 <__muldf3+0x2b8>
   8d0d8:	008000c4 	movi	r2,3
   8d0dc:	28816626 	beq	r5,r2,8d678 <__muldf3+0x6fc>
   8d0e0:	00800044 	movi	r2,1
   8d0e4:	2881411e 	bne	r5,r2,8d5ec <__muldf3+0x670>
   8d0e8:	b02b883a 	mov	r21,r22
   8d0ec:	0005883a 	mov	r2,zero
   8d0f0:	000b883a 	mov	r5,zero
   8d0f4:	0029883a 	mov	r20,zero
   8d0f8:	1004953a 	slli	r2,r2,20
   8d0fc:	a8c03fcc 	andi	r3,r21,255
   8d100:	04400434 	movhi	r17,16
   8d104:	8c7fffc4 	addi	r17,r17,-1
   8d108:	180697fa 	slli	r3,r3,31
   8d10c:	2c4a703a 	and	r5,r5,r17
   8d110:	288ab03a 	or	r5,r5,r2
   8d114:	28c6b03a 	or	r3,r5,r3
   8d118:	a005883a 	mov	r2,r20
   8d11c:	dfc00c17 	ldw	ra,48(sp)
   8d120:	df000b17 	ldw	fp,44(sp)
   8d124:	ddc00a17 	ldw	r23,40(sp)
   8d128:	dd800917 	ldw	r22,36(sp)
   8d12c:	dd400817 	ldw	r21,32(sp)
   8d130:	dd000717 	ldw	r20,28(sp)
   8d134:	dcc00617 	ldw	r19,24(sp)
   8d138:	dc800517 	ldw	r18,20(sp)
   8d13c:	dc400417 	ldw	r17,16(sp)
   8d140:	dc000317 	ldw	r16,12(sp)
   8d144:	dec00d04 	addi	sp,sp,52
   8d148:	f800283a 	ret
   8d14c:	2404b03a 	or	r2,r4,r16
   8d150:	2027883a 	mov	r19,r4
   8d154:	10004226 	beq	r2,zero,8d260 <__muldf3+0x2e4>
   8d158:	8000fc26 	beq	r16,zero,8d54c <__muldf3+0x5d0>
   8d15c:	8009883a 	mov	r4,r16
   8d160:	d9800215 	stw	r6,8(sp)
   8d164:	d9c00015 	stw	r7,0(sp)
   8d168:	da400115 	stw	r9,4(sp)
   8d16c:	008e1940 	call	8e194 <__clzsi2>
   8d170:	d9800217 	ldw	r6,8(sp)
   8d174:	d9c00017 	ldw	r7,0(sp)
   8d178:	da400117 	ldw	r9,4(sp)
   8d17c:	113ffd44 	addi	r4,r2,-11
   8d180:	00c00704 	movi	r3,28
   8d184:	1900ed16 	blt	r3,r4,8d53c <__muldf3+0x5c0>
   8d188:	00c00744 	movi	r3,29
   8d18c:	147ffe04 	addi	r17,r2,-8
   8d190:	1907c83a 	sub	r3,r3,r4
   8d194:	8460983a 	sll	r16,r16,r17
   8d198:	98c6d83a 	srl	r3,r19,r3
   8d19c:	9c68983a 	sll	r20,r19,r17
   8d1a0:	1c20b03a 	or	r16,r3,r16
   8d1a4:	1080fcc4 	addi	r2,r2,1011
   8d1a8:	00a5c83a 	sub	r18,zero,r2
   8d1ac:	0027883a 	mov	r19,zero
   8d1b0:	0039883a 	mov	fp,zero
   8d1b4:	003f9006 	br	8cff8 <rx_descriptor_end+0xfff8cf98>
   8d1b8:	3446b03a 	or	r3,r6,r17
   8d1bc:	1800261e 	bne	r3,zero,8d258 <__muldf3+0x2dc>
   8d1c0:	0023883a 	mov	r17,zero
   8d1c4:	0011883a 	mov	r8,zero
   8d1c8:	01400084 	movi	r5,2
   8d1cc:	003f9c06 	br	8d040 <rx_descriptor_end+0xfff8cfe0>
   8d1d0:	3446b03a 	or	r3,r6,r17
   8d1d4:	18001c26 	beq	r3,zero,8d248 <__muldf3+0x2cc>
   8d1d8:	8800ce26 	beq	r17,zero,8d514 <__muldf3+0x598>
   8d1dc:	8809883a 	mov	r4,r17
   8d1e0:	d9800215 	stw	r6,8(sp)
   8d1e4:	da400115 	stw	r9,4(sp)
   8d1e8:	da800015 	stw	r10,0(sp)
   8d1ec:	008e1940 	call	8e194 <__clzsi2>
   8d1f0:	d9800217 	ldw	r6,8(sp)
   8d1f4:	da400117 	ldw	r9,4(sp)
   8d1f8:	da800017 	ldw	r10,0(sp)
   8d1fc:	113ffd44 	addi	r4,r2,-11
   8d200:	00c00704 	movi	r3,28
   8d204:	1900bf16 	blt	r3,r4,8d504 <__muldf3+0x588>
   8d208:	00c00744 	movi	r3,29
   8d20c:	123ffe04 	addi	r8,r2,-8
   8d210:	1907c83a 	sub	r3,r3,r4
   8d214:	8a22983a 	sll	r17,r17,r8
   8d218:	30c6d83a 	srl	r3,r6,r3
   8d21c:	3210983a 	sll	r8,r6,r8
   8d220:	1c62b03a 	or	r17,r3,r17
   8d224:	1080fcc4 	addi	r2,r2,1011
   8d228:	0085c83a 	sub	r2,zero,r2
   8d22c:	000b883a 	mov	r5,zero
   8d230:	003f8306 	br	8d040 <rx_descriptor_end+0xfff8cfe0>
   8d234:	b02b883a 	mov	r21,r22
   8d238:	0081ffc4 	movi	r2,2047
   8d23c:	000b883a 	mov	r5,zero
   8d240:	0029883a 	mov	r20,zero
   8d244:	003fac06 	br	8d0f8 <rx_descriptor_end+0xfff8d098>
   8d248:	0023883a 	mov	r17,zero
   8d24c:	0011883a 	mov	r8,zero
   8d250:	01400044 	movi	r5,1
   8d254:	003f7a06 	br	8d040 <rx_descriptor_end+0xfff8cfe0>
   8d258:	014000c4 	movi	r5,3
   8d25c:	003f7806 	br	8d040 <rx_descriptor_end+0xfff8cfe0>
   8d260:	04c00104 	movi	r19,4
   8d264:	0021883a 	mov	r16,zero
   8d268:	0029883a 	mov	r20,zero
   8d26c:	07000044 	movi	fp,1
   8d270:	003f6106 	br	8cff8 <rx_descriptor_end+0xfff8cf98>
   8d274:	04c00304 	movi	r19,12
   8d278:	070000c4 	movi	fp,3
   8d27c:	003f5e06 	br	8cff8 <rx_descriptor_end+0xfff8cf98>
   8d280:	01400434 	movhi	r5,16
   8d284:	002b883a 	mov	r21,zero
   8d288:	297fffc4 	addi	r5,r5,-1
   8d28c:	053fffc4 	movi	r20,-1
   8d290:	0081ffc4 	movi	r2,2047
   8d294:	003f9806 	br	8d0f8 <rx_descriptor_end+0xfff8d098>
   8d298:	8023883a 	mov	r17,r16
   8d29c:	a011883a 	mov	r8,r20
   8d2a0:	e00b883a 	mov	r5,fp
   8d2a4:	003f8a06 	br	8d0d0 <rx_descriptor_end+0xfff8d070>
   8d2a8:	8023883a 	mov	r17,r16
   8d2ac:	a011883a 	mov	r8,r20
   8d2b0:	482d883a 	mov	r22,r9
   8d2b4:	e00b883a 	mov	r5,fp
   8d2b8:	003f8506 	br	8d0d0 <rx_descriptor_end+0xfff8d070>
   8d2bc:	a00ad43a 	srli	r5,r20,16
   8d2c0:	401ad43a 	srli	r13,r8,16
   8d2c4:	a53fffcc 	andi	r20,r20,65535
   8d2c8:	423fffcc 	andi	r8,r8,65535
   8d2cc:	4519383a 	mul	r12,r8,r20
   8d2d0:	4147383a 	mul	r3,r8,r5
   8d2d4:	6d09383a 	mul	r4,r13,r20
   8d2d8:	600cd43a 	srli	r6,r12,16
   8d2dc:	2b5d383a 	mul	r14,r5,r13
   8d2e0:	20c9883a 	add	r4,r4,r3
   8d2e4:	310d883a 	add	r6,r6,r4
   8d2e8:	30c0022e 	bgeu	r6,r3,8d2f4 <__muldf3+0x378>
   8d2ec:	00c00074 	movhi	r3,1
   8d2f0:	70dd883a 	add	r14,r14,r3
   8d2f4:	8826d43a 	srli	r19,r17,16
   8d2f8:	8bffffcc 	andi	r15,r17,65535
   8d2fc:	7d23383a 	mul	r17,r15,r20
   8d300:	7949383a 	mul	r4,r15,r5
   8d304:	9d29383a 	mul	r20,r19,r20
   8d308:	8814d43a 	srli	r10,r17,16
   8d30c:	3012943a 	slli	r9,r6,16
   8d310:	a129883a 	add	r20,r20,r4
   8d314:	633fffcc 	andi	r12,r12,65535
   8d318:	5515883a 	add	r10,r10,r20
   8d31c:	3006d43a 	srli	r3,r6,16
   8d320:	4b13883a 	add	r9,r9,r12
   8d324:	2ccb383a 	mul	r5,r5,r19
   8d328:	5100022e 	bgeu	r10,r4,8d334 <__muldf3+0x3b8>
   8d32c:	01000074 	movhi	r4,1
   8d330:	290b883a 	add	r5,r5,r4
   8d334:	802ad43a 	srli	r21,r16,16
   8d338:	843fffcc 	andi	r16,r16,65535
   8d33c:	440d383a 	mul	r6,r8,r16
   8d340:	4565383a 	mul	r18,r8,r21
   8d344:	8349383a 	mul	r4,r16,r13
   8d348:	500e943a 	slli	r7,r10,16
   8d34c:	3010d43a 	srli	r8,r6,16
   8d350:	5028d43a 	srli	r20,r10,16
   8d354:	2489883a 	add	r4,r4,r18
   8d358:	8abfffcc 	andi	r10,r17,65535
   8d35c:	3a95883a 	add	r10,r7,r10
   8d360:	4119883a 	add	r12,r8,r4
   8d364:	a169883a 	add	r20,r20,r5
   8d368:	1a87883a 	add	r3,r3,r10
   8d36c:	6d5b383a 	mul	r13,r13,r21
   8d370:	6480022e 	bgeu	r12,r18,8d37c <__muldf3+0x400>
   8d374:	01000074 	movhi	r4,1
   8d378:	691b883a 	add	r13,r13,r4
   8d37c:	7c25383a 	mul	r18,r15,r16
   8d380:	7d4b383a 	mul	r5,r15,r21
   8d384:	84cf383a 	mul	r7,r16,r19
   8d388:	901ed43a 	srli	r15,r18,16
   8d38c:	6008d43a 	srli	r4,r12,16
   8d390:	6010943a 	slli	r8,r12,16
   8d394:	394f883a 	add	r7,r7,r5
   8d398:	333fffcc 	andi	r12,r6,65535
   8d39c:	79df883a 	add	r15,r15,r7
   8d3a0:	235b883a 	add	r13,r4,r13
   8d3a4:	9d63383a 	mul	r17,r19,r21
   8d3a8:	4309883a 	add	r4,r8,r12
   8d3ac:	7940022e 	bgeu	r15,r5,8d3b8 <__muldf3+0x43c>
   8d3b0:	01400074 	movhi	r5,1
   8d3b4:	8963883a 	add	r17,r17,r5
   8d3b8:	780a943a 	slli	r5,r15,16
   8d3bc:	91bfffcc 	andi	r6,r18,65535
   8d3c0:	70c7883a 	add	r3,r14,r3
   8d3c4:	298d883a 	add	r6,r5,r6
   8d3c8:	1a8f803a 	cmpltu	r7,r3,r10
   8d3cc:	350b883a 	add	r5,r6,r20
   8d3d0:	20c7883a 	add	r3,r4,r3
   8d3d4:	3955883a 	add	r10,r7,r5
   8d3d8:	1909803a 	cmpltu	r4,r3,r4
   8d3dc:	6a91883a 	add	r8,r13,r10
   8d3e0:	780cd43a 	srli	r6,r15,16
   8d3e4:	2219883a 	add	r12,r4,r8
   8d3e8:	2d0b803a 	cmpltu	r5,r5,r20
   8d3ec:	51cf803a 	cmpltu	r7,r10,r7
   8d3f0:	29ceb03a 	or	r7,r5,r7
   8d3f4:	4351803a 	cmpltu	r8,r8,r13
   8d3f8:	610b803a 	cmpltu	r5,r12,r4
   8d3fc:	4148b03a 	or	r4,r8,r5
   8d400:	398f883a 	add	r7,r7,r6
   8d404:	3909883a 	add	r4,r7,r4
   8d408:	1810927a 	slli	r8,r3,9
   8d40c:	2449883a 	add	r4,r4,r17
   8d410:	2008927a 	slli	r4,r4,9
   8d414:	6022d5fa 	srli	r17,r12,23
   8d418:	1806d5fa 	srli	r3,r3,23
   8d41c:	4252b03a 	or	r9,r8,r9
   8d420:	600a927a 	slli	r5,r12,9
   8d424:	4810c03a 	cmpne	r8,r9,zero
   8d428:	2462b03a 	or	r17,r4,r17
   8d42c:	40c6b03a 	or	r3,r8,r3
   8d430:	8900402c 	andhi	r4,r17,256
   8d434:	1950b03a 	or	r8,r3,r5
   8d438:	20000726 	beq	r4,zero,8d458 <__muldf3+0x4dc>
   8d43c:	4006d07a 	srli	r3,r8,1
   8d440:	880497fa 	slli	r2,r17,31
   8d444:	4200004c 	andi	r8,r8,1
   8d448:	8822d07a 	srli	r17,r17,1
   8d44c:	1a10b03a 	or	r8,r3,r8
   8d450:	1210b03a 	or	r8,r2,r8
   8d454:	5805883a 	mov	r2,r11
   8d458:	1140ffc4 	addi	r5,r2,1023
   8d45c:	0140440e 	bge	zero,r5,8d570 <__muldf3+0x5f4>
   8d460:	40c001cc 	andi	r3,r8,7
   8d464:	18000726 	beq	r3,zero,8d484 <__muldf3+0x508>
   8d468:	40c003cc 	andi	r3,r8,15
   8d46c:	01000104 	movi	r4,4
   8d470:	19000426 	beq	r3,r4,8d484 <__muldf3+0x508>
   8d474:	4107883a 	add	r3,r8,r4
   8d478:	1a11803a 	cmpltu	r8,r3,r8
   8d47c:	8a23883a 	add	r17,r17,r8
   8d480:	1811883a 	mov	r8,r3
   8d484:	88c0402c 	andhi	r3,r17,256
   8d488:	18000426 	beq	r3,zero,8d49c <__muldf3+0x520>
   8d48c:	11410004 	addi	r5,r2,1024
   8d490:	00bfc034 	movhi	r2,65280
   8d494:	10bfffc4 	addi	r2,r2,-1
   8d498:	88a2703a 	and	r17,r17,r2
   8d49c:	0081ff84 	movi	r2,2046
   8d4a0:	117f6416 	blt	r2,r5,8d234 <rx_descriptor_end+0xfff8d1d4>
   8d4a4:	8828977a 	slli	r20,r17,29
   8d4a8:	4010d0fa 	srli	r8,r8,3
   8d4ac:	8822927a 	slli	r17,r17,9
   8d4b0:	2881ffcc 	andi	r2,r5,2047
   8d4b4:	a228b03a 	or	r20,r20,r8
   8d4b8:	880ad33a 	srli	r5,r17,12
   8d4bc:	b02b883a 	mov	r21,r22
   8d4c0:	003f0d06 	br	8d0f8 <rx_descriptor_end+0xfff8d098>
   8d4c4:	8080022c 	andhi	r2,r16,8
   8d4c8:	10000926 	beq	r2,zero,8d4f0 <__muldf3+0x574>
   8d4cc:	8880022c 	andhi	r2,r17,8
   8d4d0:	1000071e 	bne	r2,zero,8d4f0 <__muldf3+0x574>
   8d4d4:	00800434 	movhi	r2,16
   8d4d8:	89400234 	orhi	r5,r17,8
   8d4dc:	10bfffc4 	addi	r2,r2,-1
   8d4e0:	b82b883a 	mov	r21,r23
   8d4e4:	288a703a 	and	r5,r5,r2
   8d4e8:	4029883a 	mov	r20,r8
   8d4ec:	003f6806 	br	8d290 <rx_descriptor_end+0xfff8d230>
   8d4f0:	00800434 	movhi	r2,16
   8d4f4:	81400234 	orhi	r5,r16,8
   8d4f8:	10bfffc4 	addi	r2,r2,-1
   8d4fc:	288a703a 	and	r5,r5,r2
   8d500:	003f6306 	br	8d290 <rx_descriptor_end+0xfff8d230>
   8d504:	147ff604 	addi	r17,r2,-40
   8d508:	3462983a 	sll	r17,r6,r17
   8d50c:	0011883a 	mov	r8,zero
   8d510:	003f4406 	br	8d224 <rx_descriptor_end+0xfff8d1c4>
   8d514:	3009883a 	mov	r4,r6
   8d518:	d9800215 	stw	r6,8(sp)
   8d51c:	da400115 	stw	r9,4(sp)
   8d520:	da800015 	stw	r10,0(sp)
   8d524:	008e1940 	call	8e194 <__clzsi2>
   8d528:	10800804 	addi	r2,r2,32
   8d52c:	da800017 	ldw	r10,0(sp)
   8d530:	da400117 	ldw	r9,4(sp)
   8d534:	d9800217 	ldw	r6,8(sp)
   8d538:	003f3006 	br	8d1fc <rx_descriptor_end+0xfff8d19c>
   8d53c:	143ff604 	addi	r16,r2,-40
   8d540:	9c20983a 	sll	r16,r19,r16
   8d544:	0029883a 	mov	r20,zero
   8d548:	003f1606 	br	8d1a4 <rx_descriptor_end+0xfff8d144>
   8d54c:	d9800215 	stw	r6,8(sp)
   8d550:	d9c00015 	stw	r7,0(sp)
   8d554:	da400115 	stw	r9,4(sp)
   8d558:	008e1940 	call	8e194 <__clzsi2>
   8d55c:	10800804 	addi	r2,r2,32
   8d560:	da400117 	ldw	r9,4(sp)
   8d564:	d9c00017 	ldw	r7,0(sp)
   8d568:	d9800217 	ldw	r6,8(sp)
   8d56c:	003f0306 	br	8d17c <rx_descriptor_end+0xfff8d11c>
   8d570:	00c00044 	movi	r3,1
   8d574:	1947c83a 	sub	r3,r3,r5
   8d578:	00800e04 	movi	r2,56
   8d57c:	10feda16 	blt	r2,r3,8d0e8 <rx_descriptor_end+0xfff8d088>
   8d580:	008007c4 	movi	r2,31
   8d584:	10c01b16 	blt	r2,r3,8d5f4 <__muldf3+0x678>
   8d588:	00800804 	movi	r2,32
   8d58c:	10c5c83a 	sub	r2,r2,r3
   8d590:	888a983a 	sll	r5,r17,r2
   8d594:	40c8d83a 	srl	r4,r8,r3
   8d598:	4084983a 	sll	r2,r8,r2
   8d59c:	88e2d83a 	srl	r17,r17,r3
   8d5a0:	2906b03a 	or	r3,r5,r4
   8d5a4:	1004c03a 	cmpne	r2,r2,zero
   8d5a8:	1886b03a 	or	r3,r3,r2
   8d5ac:	188001cc 	andi	r2,r3,7
   8d5b0:	10000726 	beq	r2,zero,8d5d0 <__muldf3+0x654>
   8d5b4:	188003cc 	andi	r2,r3,15
   8d5b8:	01000104 	movi	r4,4
   8d5bc:	11000426 	beq	r2,r4,8d5d0 <__muldf3+0x654>
   8d5c0:	1805883a 	mov	r2,r3
   8d5c4:	10c00104 	addi	r3,r2,4
   8d5c8:	1885803a 	cmpltu	r2,r3,r2
   8d5cc:	88a3883a 	add	r17,r17,r2
   8d5d0:	8880202c 	andhi	r2,r17,128
   8d5d4:	10001c26 	beq	r2,zero,8d648 <__muldf3+0x6cc>
   8d5d8:	b02b883a 	mov	r21,r22
   8d5dc:	00800044 	movi	r2,1
   8d5e0:	000b883a 	mov	r5,zero
   8d5e4:	0029883a 	mov	r20,zero
   8d5e8:	003ec306 	br	8d0f8 <rx_descriptor_end+0xfff8d098>
   8d5ec:	5805883a 	mov	r2,r11
   8d5f0:	003f9906 	br	8d458 <rx_descriptor_end+0xfff8d3f8>
   8d5f4:	00bff844 	movi	r2,-31
   8d5f8:	1145c83a 	sub	r2,r2,r5
   8d5fc:	8888d83a 	srl	r4,r17,r2
   8d600:	00800804 	movi	r2,32
   8d604:	18801a26 	beq	r3,r2,8d670 <__muldf3+0x6f4>
   8d608:	00801004 	movi	r2,64
   8d60c:	10c5c83a 	sub	r2,r2,r3
   8d610:	8884983a 	sll	r2,r17,r2
   8d614:	1204b03a 	or	r2,r2,r8
   8d618:	1004c03a 	cmpne	r2,r2,zero
   8d61c:	2084b03a 	or	r2,r4,r2
   8d620:	144001cc 	andi	r17,r2,7
   8d624:	88000d1e 	bne	r17,zero,8d65c <__muldf3+0x6e0>
   8d628:	000b883a 	mov	r5,zero
   8d62c:	1028d0fa 	srli	r20,r2,3
   8d630:	b02b883a 	mov	r21,r22
   8d634:	0005883a 	mov	r2,zero
   8d638:	a468b03a 	or	r20,r20,r17
   8d63c:	003eae06 	br	8d0f8 <rx_descriptor_end+0xfff8d098>
   8d640:	1007883a 	mov	r3,r2
   8d644:	0023883a 	mov	r17,zero
   8d648:	880a927a 	slli	r5,r17,9
   8d64c:	1805883a 	mov	r2,r3
   8d650:	8822977a 	slli	r17,r17,29
   8d654:	280ad33a 	srli	r5,r5,12
   8d658:	003ff406 	br	8d62c <rx_descriptor_end+0xfff8d5cc>
   8d65c:	10c003cc 	andi	r3,r2,15
   8d660:	01000104 	movi	r4,4
   8d664:	193ff626 	beq	r3,r4,8d640 <rx_descriptor_end+0xfff8d5e0>
   8d668:	0023883a 	mov	r17,zero
   8d66c:	003fd506 	br	8d5c4 <rx_descriptor_end+0xfff8d564>
   8d670:	0005883a 	mov	r2,zero
   8d674:	003fe706 	br	8d614 <rx_descriptor_end+0xfff8d5b4>
   8d678:	00800434 	movhi	r2,16
   8d67c:	89400234 	orhi	r5,r17,8
   8d680:	10bfffc4 	addi	r2,r2,-1
   8d684:	b02b883a 	mov	r21,r22
   8d688:	288a703a 	and	r5,r5,r2
   8d68c:	4029883a 	mov	r20,r8
   8d690:	003eff06 	br	8d290 <rx_descriptor_end+0xfff8d230>

0008d694 <__subdf3>:
   8d694:	02000434 	movhi	r8,16
   8d698:	423fffc4 	addi	r8,r8,-1
   8d69c:	defffb04 	addi	sp,sp,-20
   8d6a0:	2a14703a 	and	r10,r5,r8
   8d6a4:	3812d53a 	srli	r9,r7,20
   8d6a8:	3a10703a 	and	r8,r7,r8
   8d6ac:	2006d77a 	srli	r3,r4,29
   8d6b0:	3004d77a 	srli	r2,r6,29
   8d6b4:	dc000015 	stw	r16,0(sp)
   8d6b8:	501490fa 	slli	r10,r10,3
   8d6bc:	2820d53a 	srli	r16,r5,20
   8d6c0:	401090fa 	slli	r8,r8,3
   8d6c4:	dc800215 	stw	r18,8(sp)
   8d6c8:	dc400115 	stw	r17,4(sp)
   8d6cc:	dfc00415 	stw	ra,16(sp)
   8d6d0:	202290fa 	slli	r17,r4,3
   8d6d4:	dcc00315 	stw	r19,12(sp)
   8d6d8:	4a41ffcc 	andi	r9,r9,2047
   8d6dc:	0101ffc4 	movi	r4,2047
   8d6e0:	2824d7fa 	srli	r18,r5,31
   8d6e4:	8401ffcc 	andi	r16,r16,2047
   8d6e8:	50c6b03a 	or	r3,r10,r3
   8d6ec:	380ed7fa 	srli	r7,r7,31
   8d6f0:	408ab03a 	or	r5,r8,r2
   8d6f4:	300c90fa 	slli	r6,r6,3
   8d6f8:	49009626 	beq	r9,r4,8d954 <__subdf3+0x2c0>
   8d6fc:	39c0005c 	xori	r7,r7,1
   8d700:	8245c83a 	sub	r2,r16,r9
   8d704:	3c807426 	beq	r7,r18,8d8d8 <__subdf3+0x244>
   8d708:	0080af0e 	bge	zero,r2,8d9c8 <__subdf3+0x334>
   8d70c:	48002a1e 	bne	r9,zero,8d7b8 <__subdf3+0x124>
   8d710:	2988b03a 	or	r4,r5,r6
   8d714:	20009a1e 	bne	r4,zero,8d980 <__subdf3+0x2ec>
   8d718:	888001cc 	andi	r2,r17,7
   8d71c:	10000726 	beq	r2,zero,8d73c <__subdf3+0xa8>
   8d720:	888003cc 	andi	r2,r17,15
   8d724:	01000104 	movi	r4,4
   8d728:	11000426 	beq	r2,r4,8d73c <__subdf3+0xa8>
   8d72c:	890b883a 	add	r5,r17,r4
   8d730:	2c63803a 	cmpltu	r17,r5,r17
   8d734:	1c47883a 	add	r3,r3,r17
   8d738:	2823883a 	mov	r17,r5
   8d73c:	1880202c 	andhi	r2,r3,128
   8d740:	10005926 	beq	r2,zero,8d8a8 <__subdf3+0x214>
   8d744:	84000044 	addi	r16,r16,1
   8d748:	0081ffc4 	movi	r2,2047
   8d74c:	8080be26 	beq	r16,r2,8da48 <__subdf3+0x3b4>
   8d750:	017fe034 	movhi	r5,65408
   8d754:	297fffc4 	addi	r5,r5,-1
   8d758:	1946703a 	and	r3,r3,r5
   8d75c:	1804977a 	slli	r2,r3,29
   8d760:	1806927a 	slli	r3,r3,9
   8d764:	8822d0fa 	srli	r17,r17,3
   8d768:	8401ffcc 	andi	r16,r16,2047
   8d76c:	180ad33a 	srli	r5,r3,12
   8d770:	9100004c 	andi	r4,r18,1
   8d774:	1444b03a 	or	r2,r2,r17
   8d778:	80c1ffcc 	andi	r3,r16,2047
   8d77c:	1820953a 	slli	r16,r3,20
   8d780:	20c03fcc 	andi	r3,r4,255
   8d784:	180897fa 	slli	r4,r3,31
   8d788:	00c00434 	movhi	r3,16
   8d78c:	18ffffc4 	addi	r3,r3,-1
   8d790:	28c6703a 	and	r3,r5,r3
   8d794:	1c06b03a 	or	r3,r3,r16
   8d798:	1906b03a 	or	r3,r3,r4
   8d79c:	dfc00417 	ldw	ra,16(sp)
   8d7a0:	dcc00317 	ldw	r19,12(sp)
   8d7a4:	dc800217 	ldw	r18,8(sp)
   8d7a8:	dc400117 	ldw	r17,4(sp)
   8d7ac:	dc000017 	ldw	r16,0(sp)
   8d7b0:	dec00504 	addi	sp,sp,20
   8d7b4:	f800283a 	ret
   8d7b8:	0101ffc4 	movi	r4,2047
   8d7bc:	813fd626 	beq	r16,r4,8d718 <rx_descriptor_end+0xfff8d6b8>
   8d7c0:	29402034 	orhi	r5,r5,128
   8d7c4:	01000e04 	movi	r4,56
   8d7c8:	2080a316 	blt	r4,r2,8da58 <__subdf3+0x3c4>
   8d7cc:	010007c4 	movi	r4,31
   8d7d0:	2080c616 	blt	r4,r2,8daec <__subdf3+0x458>
   8d7d4:	01000804 	movi	r4,32
   8d7d8:	2089c83a 	sub	r4,r4,r2
   8d7dc:	2910983a 	sll	r8,r5,r4
   8d7e0:	308ed83a 	srl	r7,r6,r2
   8d7e4:	3108983a 	sll	r4,r6,r4
   8d7e8:	2884d83a 	srl	r2,r5,r2
   8d7ec:	41ccb03a 	or	r6,r8,r7
   8d7f0:	2008c03a 	cmpne	r4,r4,zero
   8d7f4:	310cb03a 	or	r6,r6,r4
   8d7f8:	898dc83a 	sub	r6,r17,r6
   8d7fc:	89a3803a 	cmpltu	r17,r17,r6
   8d800:	1887c83a 	sub	r3,r3,r2
   8d804:	1c47c83a 	sub	r3,r3,r17
   8d808:	3023883a 	mov	r17,r6
   8d80c:	1880202c 	andhi	r2,r3,128
   8d810:	10002326 	beq	r2,zero,8d8a0 <__subdf3+0x20c>
   8d814:	04c02034 	movhi	r19,128
   8d818:	9cffffc4 	addi	r19,r19,-1
   8d81c:	1ce6703a 	and	r19,r3,r19
   8d820:	98007a26 	beq	r19,zero,8da0c <__subdf3+0x378>
   8d824:	9809883a 	mov	r4,r19
   8d828:	008e1940 	call	8e194 <__clzsi2>
   8d82c:	113ffe04 	addi	r4,r2,-8
   8d830:	00c007c4 	movi	r3,31
   8d834:	19007b16 	blt	r3,r4,8da24 <__subdf3+0x390>
   8d838:	00800804 	movi	r2,32
   8d83c:	1105c83a 	sub	r2,r2,r4
   8d840:	8884d83a 	srl	r2,r17,r2
   8d844:	9906983a 	sll	r3,r19,r4
   8d848:	8922983a 	sll	r17,r17,r4
   8d84c:	10c4b03a 	or	r2,r2,r3
   8d850:	24007816 	blt	r4,r16,8da34 <__subdf3+0x3a0>
   8d854:	2421c83a 	sub	r16,r4,r16
   8d858:	80c00044 	addi	r3,r16,1
   8d85c:	010007c4 	movi	r4,31
   8d860:	20c09516 	blt	r4,r3,8dab8 <__subdf3+0x424>
   8d864:	01400804 	movi	r5,32
   8d868:	28cbc83a 	sub	r5,r5,r3
   8d86c:	88c8d83a 	srl	r4,r17,r3
   8d870:	8962983a 	sll	r17,r17,r5
   8d874:	114a983a 	sll	r5,r2,r5
   8d878:	10c6d83a 	srl	r3,r2,r3
   8d87c:	8804c03a 	cmpne	r2,r17,zero
   8d880:	290ab03a 	or	r5,r5,r4
   8d884:	28a2b03a 	or	r17,r5,r2
   8d888:	0021883a 	mov	r16,zero
   8d88c:	003fa206 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8d890:	2090b03a 	or	r8,r4,r2
   8d894:	40018e26 	beq	r8,zero,8ded0 <__subdf3+0x83c>
   8d898:	1007883a 	mov	r3,r2
   8d89c:	2023883a 	mov	r17,r4
   8d8a0:	888001cc 	andi	r2,r17,7
   8d8a4:	103f9e1e 	bne	r2,zero,8d720 <rx_descriptor_end+0xfff8d6c0>
   8d8a8:	1804977a 	slli	r2,r3,29
   8d8ac:	8822d0fa 	srli	r17,r17,3
   8d8b0:	1810d0fa 	srli	r8,r3,3
   8d8b4:	9100004c 	andi	r4,r18,1
   8d8b8:	1444b03a 	or	r2,r2,r17
   8d8bc:	00c1ffc4 	movi	r3,2047
   8d8c0:	80c02826 	beq	r16,r3,8d964 <__subdf3+0x2d0>
   8d8c4:	01400434 	movhi	r5,16
   8d8c8:	297fffc4 	addi	r5,r5,-1
   8d8cc:	80e0703a 	and	r16,r16,r3
   8d8d0:	414a703a 	and	r5,r8,r5
   8d8d4:	003fa806 	br	8d778 <rx_descriptor_end+0xfff8d718>
   8d8d8:	0080630e 	bge	zero,r2,8da68 <__subdf3+0x3d4>
   8d8dc:	48003026 	beq	r9,zero,8d9a0 <__subdf3+0x30c>
   8d8e0:	0101ffc4 	movi	r4,2047
   8d8e4:	813f8c26 	beq	r16,r4,8d718 <rx_descriptor_end+0xfff8d6b8>
   8d8e8:	29402034 	orhi	r5,r5,128
   8d8ec:	01000e04 	movi	r4,56
   8d8f0:	2080a90e 	bge	r4,r2,8db98 <__subdf3+0x504>
   8d8f4:	298cb03a 	or	r6,r5,r6
   8d8f8:	3012c03a 	cmpne	r9,r6,zero
   8d8fc:	0005883a 	mov	r2,zero
   8d900:	4c53883a 	add	r9,r9,r17
   8d904:	4c63803a 	cmpltu	r17,r9,r17
   8d908:	10c7883a 	add	r3,r2,r3
   8d90c:	88c7883a 	add	r3,r17,r3
   8d910:	4823883a 	mov	r17,r9
   8d914:	1880202c 	andhi	r2,r3,128
   8d918:	1000d026 	beq	r2,zero,8dc5c <__subdf3+0x5c8>
   8d91c:	84000044 	addi	r16,r16,1
   8d920:	0081ffc4 	movi	r2,2047
   8d924:	8080fe26 	beq	r16,r2,8dd20 <__subdf3+0x68c>
   8d928:	00bfe034 	movhi	r2,65408
   8d92c:	10bfffc4 	addi	r2,r2,-1
   8d930:	1886703a 	and	r3,r3,r2
   8d934:	880ad07a 	srli	r5,r17,1
   8d938:	180497fa 	slli	r2,r3,31
   8d93c:	8900004c 	andi	r4,r17,1
   8d940:	2922b03a 	or	r17,r5,r4
   8d944:	1806d07a 	srli	r3,r3,1
   8d948:	1462b03a 	or	r17,r2,r17
   8d94c:	3825883a 	mov	r18,r7
   8d950:	003f7106 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8d954:	2984b03a 	or	r2,r5,r6
   8d958:	103f6826 	beq	r2,zero,8d6fc <rx_descriptor_end+0xfff8d69c>
   8d95c:	39c03fcc 	andi	r7,r7,255
   8d960:	003f6706 	br	8d700 <rx_descriptor_end+0xfff8d6a0>
   8d964:	4086b03a 	or	r3,r8,r2
   8d968:	18015226 	beq	r3,zero,8deb4 <__subdf3+0x820>
   8d96c:	00c00434 	movhi	r3,16
   8d970:	41400234 	orhi	r5,r8,8
   8d974:	18ffffc4 	addi	r3,r3,-1
   8d978:	28ca703a 	and	r5,r5,r3
   8d97c:	003f7e06 	br	8d778 <rx_descriptor_end+0xfff8d718>
   8d980:	10bfffc4 	addi	r2,r2,-1
   8d984:	1000491e 	bne	r2,zero,8daac <__subdf3+0x418>
   8d988:	898fc83a 	sub	r7,r17,r6
   8d98c:	89e3803a 	cmpltu	r17,r17,r7
   8d990:	1947c83a 	sub	r3,r3,r5
   8d994:	1c47c83a 	sub	r3,r3,r17
   8d998:	3823883a 	mov	r17,r7
   8d99c:	003f9b06 	br	8d80c <rx_descriptor_end+0xfff8d7ac>
   8d9a0:	2988b03a 	or	r4,r5,r6
   8d9a4:	203f5c26 	beq	r4,zero,8d718 <rx_descriptor_end+0xfff8d6b8>
   8d9a8:	10bfffc4 	addi	r2,r2,-1
   8d9ac:	1000931e 	bne	r2,zero,8dbfc <__subdf3+0x568>
   8d9b0:	898d883a 	add	r6,r17,r6
   8d9b4:	3463803a 	cmpltu	r17,r6,r17
   8d9b8:	1947883a 	add	r3,r3,r5
   8d9bc:	88c7883a 	add	r3,r17,r3
   8d9c0:	3023883a 	mov	r17,r6
   8d9c4:	003fd306 	br	8d914 <rx_descriptor_end+0xfff8d8b4>
   8d9c8:	1000541e 	bne	r2,zero,8db1c <__subdf3+0x488>
   8d9cc:	80800044 	addi	r2,r16,1
   8d9d0:	1081ffcc 	andi	r2,r2,2047
   8d9d4:	01000044 	movi	r4,1
   8d9d8:	2080a20e 	bge	r4,r2,8dc64 <__subdf3+0x5d0>
   8d9dc:	8989c83a 	sub	r4,r17,r6
   8d9e0:	8905803a 	cmpltu	r2,r17,r4
   8d9e4:	1967c83a 	sub	r19,r3,r5
   8d9e8:	98a7c83a 	sub	r19,r19,r2
   8d9ec:	9880202c 	andhi	r2,r19,128
   8d9f0:	10006326 	beq	r2,zero,8db80 <__subdf3+0x4ec>
   8d9f4:	3463c83a 	sub	r17,r6,r17
   8d9f8:	28c7c83a 	sub	r3,r5,r3
   8d9fc:	344d803a 	cmpltu	r6,r6,r17
   8da00:	19a7c83a 	sub	r19,r3,r6
   8da04:	3825883a 	mov	r18,r7
   8da08:	983f861e 	bne	r19,zero,8d824 <rx_descriptor_end+0xfff8d7c4>
   8da0c:	8809883a 	mov	r4,r17
   8da10:	008e1940 	call	8e194 <__clzsi2>
   8da14:	10800804 	addi	r2,r2,32
   8da18:	113ffe04 	addi	r4,r2,-8
   8da1c:	00c007c4 	movi	r3,31
   8da20:	193f850e 	bge	r3,r4,8d838 <rx_descriptor_end+0xfff8d7d8>
   8da24:	10bff604 	addi	r2,r2,-40
   8da28:	8884983a 	sll	r2,r17,r2
   8da2c:	0023883a 	mov	r17,zero
   8da30:	243f880e 	bge	r4,r16,8d854 <rx_descriptor_end+0xfff8d7f4>
   8da34:	00ffe034 	movhi	r3,65408
   8da38:	18ffffc4 	addi	r3,r3,-1
   8da3c:	8121c83a 	sub	r16,r16,r4
   8da40:	10c6703a 	and	r3,r2,r3
   8da44:	003f3406 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8da48:	9100004c 	andi	r4,r18,1
   8da4c:	000b883a 	mov	r5,zero
   8da50:	0005883a 	mov	r2,zero
   8da54:	003f4806 	br	8d778 <rx_descriptor_end+0xfff8d718>
   8da58:	298cb03a 	or	r6,r5,r6
   8da5c:	300cc03a 	cmpne	r6,r6,zero
   8da60:	0005883a 	mov	r2,zero
   8da64:	003f6406 	br	8d7f8 <rx_descriptor_end+0xfff8d798>
   8da68:	10009a1e 	bne	r2,zero,8dcd4 <__subdf3+0x640>
   8da6c:	82400044 	addi	r9,r16,1
   8da70:	4881ffcc 	andi	r2,r9,2047
   8da74:	02800044 	movi	r10,1
   8da78:	5080670e 	bge	r10,r2,8dc18 <__subdf3+0x584>
   8da7c:	0081ffc4 	movi	r2,2047
   8da80:	4880af26 	beq	r9,r2,8dd40 <__subdf3+0x6ac>
   8da84:	898d883a 	add	r6,r17,r6
   8da88:	1945883a 	add	r2,r3,r5
   8da8c:	3447803a 	cmpltu	r3,r6,r17
   8da90:	1887883a 	add	r3,r3,r2
   8da94:	182297fa 	slli	r17,r3,31
   8da98:	300cd07a 	srli	r6,r6,1
   8da9c:	1806d07a 	srli	r3,r3,1
   8daa0:	4821883a 	mov	r16,r9
   8daa4:	89a2b03a 	or	r17,r17,r6
   8daa8:	003f1b06 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8daac:	0101ffc4 	movi	r4,2047
   8dab0:	813f441e 	bne	r16,r4,8d7c4 <rx_descriptor_end+0xfff8d764>
   8dab4:	003f1806 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dab8:	843ff844 	addi	r16,r16,-31
   8dabc:	01400804 	movi	r5,32
   8dac0:	1408d83a 	srl	r4,r2,r16
   8dac4:	19405026 	beq	r3,r5,8dc08 <__subdf3+0x574>
   8dac8:	01401004 	movi	r5,64
   8dacc:	28c7c83a 	sub	r3,r5,r3
   8dad0:	10c4983a 	sll	r2,r2,r3
   8dad4:	88a2b03a 	or	r17,r17,r2
   8dad8:	8822c03a 	cmpne	r17,r17,zero
   8dadc:	2462b03a 	or	r17,r4,r17
   8dae0:	0007883a 	mov	r3,zero
   8dae4:	0021883a 	mov	r16,zero
   8dae8:	003f6d06 	br	8d8a0 <rx_descriptor_end+0xfff8d840>
   8daec:	11fff804 	addi	r7,r2,-32
   8daf0:	01000804 	movi	r4,32
   8daf4:	29ced83a 	srl	r7,r5,r7
   8daf8:	11004526 	beq	r2,r4,8dc10 <__subdf3+0x57c>
   8dafc:	01001004 	movi	r4,64
   8db00:	2089c83a 	sub	r4,r4,r2
   8db04:	2904983a 	sll	r2,r5,r4
   8db08:	118cb03a 	or	r6,r2,r6
   8db0c:	300cc03a 	cmpne	r6,r6,zero
   8db10:	398cb03a 	or	r6,r7,r6
   8db14:	0005883a 	mov	r2,zero
   8db18:	003f3706 	br	8d7f8 <rx_descriptor_end+0xfff8d798>
   8db1c:	80002a26 	beq	r16,zero,8dbc8 <__subdf3+0x534>
   8db20:	0101ffc4 	movi	r4,2047
   8db24:	49006626 	beq	r9,r4,8dcc0 <__subdf3+0x62c>
   8db28:	0085c83a 	sub	r2,zero,r2
   8db2c:	18c02034 	orhi	r3,r3,128
   8db30:	01000e04 	movi	r4,56
   8db34:	20807e16 	blt	r4,r2,8dd30 <__subdf3+0x69c>
   8db38:	010007c4 	movi	r4,31
   8db3c:	2080e716 	blt	r4,r2,8dedc <__subdf3+0x848>
   8db40:	01000804 	movi	r4,32
   8db44:	2089c83a 	sub	r4,r4,r2
   8db48:	1914983a 	sll	r10,r3,r4
   8db4c:	8890d83a 	srl	r8,r17,r2
   8db50:	8908983a 	sll	r4,r17,r4
   8db54:	1884d83a 	srl	r2,r3,r2
   8db58:	5222b03a 	or	r17,r10,r8
   8db5c:	2006c03a 	cmpne	r3,r4,zero
   8db60:	88e2b03a 	or	r17,r17,r3
   8db64:	3463c83a 	sub	r17,r6,r17
   8db68:	2885c83a 	sub	r2,r5,r2
   8db6c:	344d803a 	cmpltu	r6,r6,r17
   8db70:	1187c83a 	sub	r3,r2,r6
   8db74:	4821883a 	mov	r16,r9
   8db78:	3825883a 	mov	r18,r7
   8db7c:	003f2306 	br	8d80c <rx_descriptor_end+0xfff8d7ac>
   8db80:	24d0b03a 	or	r8,r4,r19
   8db84:	40001b1e 	bne	r8,zero,8dbf4 <__subdf3+0x560>
   8db88:	0005883a 	mov	r2,zero
   8db8c:	0009883a 	mov	r4,zero
   8db90:	0021883a 	mov	r16,zero
   8db94:	003f4906 	br	8d8bc <rx_descriptor_end+0xfff8d85c>
   8db98:	010007c4 	movi	r4,31
   8db9c:	20803a16 	blt	r4,r2,8dc88 <__subdf3+0x5f4>
   8dba0:	01000804 	movi	r4,32
   8dba4:	2089c83a 	sub	r4,r4,r2
   8dba8:	2912983a 	sll	r9,r5,r4
   8dbac:	3090d83a 	srl	r8,r6,r2
   8dbb0:	3108983a 	sll	r4,r6,r4
   8dbb4:	2884d83a 	srl	r2,r5,r2
   8dbb8:	4a12b03a 	or	r9,r9,r8
   8dbbc:	2008c03a 	cmpne	r4,r4,zero
   8dbc0:	4912b03a 	or	r9,r9,r4
   8dbc4:	003f4e06 	br	8d900 <rx_descriptor_end+0xfff8d8a0>
   8dbc8:	1c48b03a 	or	r4,r3,r17
   8dbcc:	20003c26 	beq	r4,zero,8dcc0 <__subdf3+0x62c>
   8dbd0:	0084303a 	nor	r2,zero,r2
   8dbd4:	1000381e 	bne	r2,zero,8dcb8 <__subdf3+0x624>
   8dbd8:	3463c83a 	sub	r17,r6,r17
   8dbdc:	28c5c83a 	sub	r2,r5,r3
   8dbe0:	344d803a 	cmpltu	r6,r6,r17
   8dbe4:	1187c83a 	sub	r3,r2,r6
   8dbe8:	4821883a 	mov	r16,r9
   8dbec:	3825883a 	mov	r18,r7
   8dbf0:	003f0606 	br	8d80c <rx_descriptor_end+0xfff8d7ac>
   8dbf4:	2023883a 	mov	r17,r4
   8dbf8:	003f0906 	br	8d820 <rx_descriptor_end+0xfff8d7c0>
   8dbfc:	0101ffc4 	movi	r4,2047
   8dc00:	813f3a1e 	bne	r16,r4,8d8ec <rx_descriptor_end+0xfff8d88c>
   8dc04:	003ec406 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dc08:	0005883a 	mov	r2,zero
   8dc0c:	003fb106 	br	8dad4 <rx_descriptor_end+0xfff8da74>
   8dc10:	0005883a 	mov	r2,zero
   8dc14:	003fbc06 	br	8db08 <rx_descriptor_end+0xfff8daa8>
   8dc18:	1c44b03a 	or	r2,r3,r17
   8dc1c:	80008e1e 	bne	r16,zero,8de58 <__subdf3+0x7c4>
   8dc20:	1000c826 	beq	r2,zero,8df44 <__subdf3+0x8b0>
   8dc24:	2984b03a 	or	r2,r5,r6
   8dc28:	103ebb26 	beq	r2,zero,8d718 <rx_descriptor_end+0xfff8d6b8>
   8dc2c:	8989883a 	add	r4,r17,r6
   8dc30:	1945883a 	add	r2,r3,r5
   8dc34:	2447803a 	cmpltu	r3,r4,r17
   8dc38:	1887883a 	add	r3,r3,r2
   8dc3c:	1880202c 	andhi	r2,r3,128
   8dc40:	2023883a 	mov	r17,r4
   8dc44:	103f1626 	beq	r2,zero,8d8a0 <rx_descriptor_end+0xfff8d840>
   8dc48:	00bfe034 	movhi	r2,65408
   8dc4c:	10bfffc4 	addi	r2,r2,-1
   8dc50:	5021883a 	mov	r16,r10
   8dc54:	1886703a 	and	r3,r3,r2
   8dc58:	003eaf06 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dc5c:	3825883a 	mov	r18,r7
   8dc60:	003f0f06 	br	8d8a0 <rx_descriptor_end+0xfff8d840>
   8dc64:	1c44b03a 	or	r2,r3,r17
   8dc68:	8000251e 	bne	r16,zero,8dd00 <__subdf3+0x66c>
   8dc6c:	1000661e 	bne	r2,zero,8de08 <__subdf3+0x774>
   8dc70:	2990b03a 	or	r8,r5,r6
   8dc74:	40009626 	beq	r8,zero,8ded0 <__subdf3+0x83c>
   8dc78:	2807883a 	mov	r3,r5
   8dc7c:	3023883a 	mov	r17,r6
   8dc80:	3825883a 	mov	r18,r7
   8dc84:	003ea406 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dc88:	127ff804 	addi	r9,r2,-32
   8dc8c:	01000804 	movi	r4,32
   8dc90:	2a52d83a 	srl	r9,r5,r9
   8dc94:	11008c26 	beq	r2,r4,8dec8 <__subdf3+0x834>
   8dc98:	01001004 	movi	r4,64
   8dc9c:	2085c83a 	sub	r2,r4,r2
   8dca0:	2884983a 	sll	r2,r5,r2
   8dca4:	118cb03a 	or	r6,r2,r6
   8dca8:	300cc03a 	cmpne	r6,r6,zero
   8dcac:	4992b03a 	or	r9,r9,r6
   8dcb0:	0005883a 	mov	r2,zero
   8dcb4:	003f1206 	br	8d900 <rx_descriptor_end+0xfff8d8a0>
   8dcb8:	0101ffc4 	movi	r4,2047
   8dcbc:	493f9c1e 	bne	r9,r4,8db30 <rx_descriptor_end+0xfff8dad0>
   8dcc0:	2807883a 	mov	r3,r5
   8dcc4:	3023883a 	mov	r17,r6
   8dcc8:	4821883a 	mov	r16,r9
   8dccc:	3825883a 	mov	r18,r7
   8dcd0:	003e9106 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dcd4:	80001f1e 	bne	r16,zero,8dd54 <__subdf3+0x6c0>
   8dcd8:	1c48b03a 	or	r4,r3,r17
   8dcdc:	20005a26 	beq	r4,zero,8de48 <__subdf3+0x7b4>
   8dce0:	0084303a 	nor	r2,zero,r2
   8dce4:	1000561e 	bne	r2,zero,8de40 <__subdf3+0x7ac>
   8dce8:	89a3883a 	add	r17,r17,r6
   8dcec:	1945883a 	add	r2,r3,r5
   8dcf0:	898d803a 	cmpltu	r6,r17,r6
   8dcf4:	3087883a 	add	r3,r6,r2
   8dcf8:	4821883a 	mov	r16,r9
   8dcfc:	003f0506 	br	8d914 <rx_descriptor_end+0xfff8d8b4>
   8dd00:	10002b1e 	bne	r2,zero,8ddb0 <__subdf3+0x71c>
   8dd04:	2984b03a 	or	r2,r5,r6
   8dd08:	10008026 	beq	r2,zero,8df0c <__subdf3+0x878>
   8dd0c:	2807883a 	mov	r3,r5
   8dd10:	3023883a 	mov	r17,r6
   8dd14:	3825883a 	mov	r18,r7
   8dd18:	0401ffc4 	movi	r16,2047
   8dd1c:	003e7e06 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dd20:	3809883a 	mov	r4,r7
   8dd24:	0011883a 	mov	r8,zero
   8dd28:	0005883a 	mov	r2,zero
   8dd2c:	003ee306 	br	8d8bc <rx_descriptor_end+0xfff8d85c>
   8dd30:	1c62b03a 	or	r17,r3,r17
   8dd34:	8822c03a 	cmpne	r17,r17,zero
   8dd38:	0005883a 	mov	r2,zero
   8dd3c:	003f8906 	br	8db64 <rx_descriptor_end+0xfff8db04>
   8dd40:	3809883a 	mov	r4,r7
   8dd44:	4821883a 	mov	r16,r9
   8dd48:	0011883a 	mov	r8,zero
   8dd4c:	0005883a 	mov	r2,zero
   8dd50:	003eda06 	br	8d8bc <rx_descriptor_end+0xfff8d85c>
   8dd54:	0101ffc4 	movi	r4,2047
   8dd58:	49003b26 	beq	r9,r4,8de48 <__subdf3+0x7b4>
   8dd5c:	0085c83a 	sub	r2,zero,r2
   8dd60:	18c02034 	orhi	r3,r3,128
   8dd64:	01000e04 	movi	r4,56
   8dd68:	20806e16 	blt	r4,r2,8df24 <__subdf3+0x890>
   8dd6c:	010007c4 	movi	r4,31
   8dd70:	20807716 	blt	r4,r2,8df50 <__subdf3+0x8bc>
   8dd74:	01000804 	movi	r4,32
   8dd78:	2089c83a 	sub	r4,r4,r2
   8dd7c:	1914983a 	sll	r10,r3,r4
   8dd80:	8890d83a 	srl	r8,r17,r2
   8dd84:	8908983a 	sll	r4,r17,r4
   8dd88:	1884d83a 	srl	r2,r3,r2
   8dd8c:	5222b03a 	or	r17,r10,r8
   8dd90:	2006c03a 	cmpne	r3,r4,zero
   8dd94:	88e2b03a 	or	r17,r17,r3
   8dd98:	89a3883a 	add	r17,r17,r6
   8dd9c:	1145883a 	add	r2,r2,r5
   8dda0:	898d803a 	cmpltu	r6,r17,r6
   8dda4:	3087883a 	add	r3,r6,r2
   8dda8:	4821883a 	mov	r16,r9
   8ddac:	003ed906 	br	8d914 <rx_descriptor_end+0xfff8d8b4>
   8ddb0:	2984b03a 	or	r2,r5,r6
   8ddb4:	10004226 	beq	r2,zero,8dec0 <__subdf3+0x82c>
   8ddb8:	1808d0fa 	srli	r4,r3,3
   8ddbc:	8822d0fa 	srli	r17,r17,3
   8ddc0:	1806977a 	slli	r3,r3,29
   8ddc4:	2080022c 	andhi	r2,r4,8
   8ddc8:	1c62b03a 	or	r17,r3,r17
   8ddcc:	10000826 	beq	r2,zero,8ddf0 <__subdf3+0x75c>
   8ddd0:	2812d0fa 	srli	r9,r5,3
   8ddd4:	4880022c 	andhi	r2,r9,8
   8ddd8:	1000051e 	bne	r2,zero,8ddf0 <__subdf3+0x75c>
   8dddc:	300cd0fa 	srli	r6,r6,3
   8dde0:	2804977a 	slli	r2,r5,29
   8dde4:	4809883a 	mov	r4,r9
   8dde8:	3825883a 	mov	r18,r7
   8ddec:	11a2b03a 	or	r17,r2,r6
   8ddf0:	8806d77a 	srli	r3,r17,29
   8ddf4:	200890fa 	slli	r4,r4,3
   8ddf8:	882290fa 	slli	r17,r17,3
   8ddfc:	0401ffc4 	movi	r16,2047
   8de00:	1906b03a 	or	r3,r3,r4
   8de04:	003e4406 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8de08:	2984b03a 	or	r2,r5,r6
   8de0c:	103e4226 	beq	r2,zero,8d718 <rx_descriptor_end+0xfff8d6b8>
   8de10:	8989c83a 	sub	r4,r17,r6
   8de14:	8911803a 	cmpltu	r8,r17,r4
   8de18:	1945c83a 	sub	r2,r3,r5
   8de1c:	1205c83a 	sub	r2,r2,r8
   8de20:	1200202c 	andhi	r8,r2,128
   8de24:	403e9a26 	beq	r8,zero,8d890 <rx_descriptor_end+0xfff8d830>
   8de28:	3463c83a 	sub	r17,r6,r17
   8de2c:	28c5c83a 	sub	r2,r5,r3
   8de30:	344d803a 	cmpltu	r6,r6,r17
   8de34:	1187c83a 	sub	r3,r2,r6
   8de38:	3825883a 	mov	r18,r7
   8de3c:	003e3606 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8de40:	0101ffc4 	movi	r4,2047
   8de44:	493fc71e 	bne	r9,r4,8dd64 <rx_descriptor_end+0xfff8dd04>
   8de48:	2807883a 	mov	r3,r5
   8de4c:	3023883a 	mov	r17,r6
   8de50:	4821883a 	mov	r16,r9
   8de54:	003e3006 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8de58:	10003626 	beq	r2,zero,8df34 <__subdf3+0x8a0>
   8de5c:	2984b03a 	or	r2,r5,r6
   8de60:	10001726 	beq	r2,zero,8dec0 <__subdf3+0x82c>
   8de64:	1808d0fa 	srli	r4,r3,3
   8de68:	8822d0fa 	srli	r17,r17,3
   8de6c:	1806977a 	slli	r3,r3,29
   8de70:	2080022c 	andhi	r2,r4,8
   8de74:	1c62b03a 	or	r17,r3,r17
   8de78:	10000726 	beq	r2,zero,8de98 <__subdf3+0x804>
   8de7c:	2812d0fa 	srli	r9,r5,3
   8de80:	4880022c 	andhi	r2,r9,8
   8de84:	1000041e 	bne	r2,zero,8de98 <__subdf3+0x804>
   8de88:	300cd0fa 	srli	r6,r6,3
   8de8c:	2804977a 	slli	r2,r5,29
   8de90:	4809883a 	mov	r4,r9
   8de94:	11a2b03a 	or	r17,r2,r6
   8de98:	8806d77a 	srli	r3,r17,29
   8de9c:	200890fa 	slli	r4,r4,3
   8dea0:	882290fa 	slli	r17,r17,3
   8dea4:	3825883a 	mov	r18,r7
   8dea8:	1906b03a 	or	r3,r3,r4
   8deac:	0401ffc4 	movi	r16,2047
   8deb0:	003e1906 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8deb4:	000b883a 	mov	r5,zero
   8deb8:	0005883a 	mov	r2,zero
   8debc:	003e2e06 	br	8d778 <rx_descriptor_end+0xfff8d718>
   8dec0:	0401ffc4 	movi	r16,2047
   8dec4:	003e1406 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8dec8:	0005883a 	mov	r2,zero
   8decc:	003f7506 	br	8dca4 <rx_descriptor_end+0xfff8dc44>
   8ded0:	0005883a 	mov	r2,zero
   8ded4:	0009883a 	mov	r4,zero
   8ded8:	003e7806 	br	8d8bc <rx_descriptor_end+0xfff8d85c>
   8dedc:	123ff804 	addi	r8,r2,-32
   8dee0:	01000804 	movi	r4,32
   8dee4:	1a10d83a 	srl	r8,r3,r8
   8dee8:	11002526 	beq	r2,r4,8df80 <__subdf3+0x8ec>
   8deec:	01001004 	movi	r4,64
   8def0:	2085c83a 	sub	r2,r4,r2
   8def4:	1884983a 	sll	r2,r3,r2
   8def8:	1444b03a 	or	r2,r2,r17
   8defc:	1004c03a 	cmpne	r2,r2,zero
   8df00:	40a2b03a 	or	r17,r8,r2
   8df04:	0005883a 	mov	r2,zero
   8df08:	003f1606 	br	8db64 <rx_descriptor_end+0xfff8db04>
   8df0c:	02000434 	movhi	r8,16
   8df10:	0009883a 	mov	r4,zero
   8df14:	423fffc4 	addi	r8,r8,-1
   8df18:	00bfffc4 	movi	r2,-1
   8df1c:	0401ffc4 	movi	r16,2047
   8df20:	003e6606 	br	8d8bc <rx_descriptor_end+0xfff8d85c>
   8df24:	1c62b03a 	or	r17,r3,r17
   8df28:	8822c03a 	cmpne	r17,r17,zero
   8df2c:	0005883a 	mov	r2,zero
   8df30:	003f9906 	br	8dd98 <rx_descriptor_end+0xfff8dd38>
   8df34:	2807883a 	mov	r3,r5
   8df38:	3023883a 	mov	r17,r6
   8df3c:	0401ffc4 	movi	r16,2047
   8df40:	003df506 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8df44:	2807883a 	mov	r3,r5
   8df48:	3023883a 	mov	r17,r6
   8df4c:	003df206 	br	8d718 <rx_descriptor_end+0xfff8d6b8>
   8df50:	123ff804 	addi	r8,r2,-32
   8df54:	01000804 	movi	r4,32
   8df58:	1a10d83a 	srl	r8,r3,r8
   8df5c:	11000a26 	beq	r2,r4,8df88 <__subdf3+0x8f4>
   8df60:	01001004 	movi	r4,64
   8df64:	2085c83a 	sub	r2,r4,r2
   8df68:	1884983a 	sll	r2,r3,r2
   8df6c:	1444b03a 	or	r2,r2,r17
   8df70:	1004c03a 	cmpne	r2,r2,zero
   8df74:	40a2b03a 	or	r17,r8,r2
   8df78:	0005883a 	mov	r2,zero
   8df7c:	003f8606 	br	8dd98 <rx_descriptor_end+0xfff8dd38>
   8df80:	0005883a 	mov	r2,zero
   8df84:	003fdc06 	br	8def8 <rx_descriptor_end+0xfff8de98>
   8df88:	0005883a 	mov	r2,zero
   8df8c:	003ff706 	br	8df6c <rx_descriptor_end+0xfff8df0c>

0008df90 <__fixdfsi>:
   8df90:	280cd53a 	srli	r6,r5,20
   8df94:	00c00434 	movhi	r3,16
   8df98:	18ffffc4 	addi	r3,r3,-1
   8df9c:	3181ffcc 	andi	r6,r6,2047
   8dfa0:	01c0ff84 	movi	r7,1022
   8dfa4:	28c6703a 	and	r3,r5,r3
   8dfa8:	280ad7fa 	srli	r5,r5,31
   8dfac:	3980120e 	bge	r7,r6,8dff8 <__fixdfsi+0x68>
   8dfb0:	00810744 	movi	r2,1053
   8dfb4:	11800c16 	blt	r2,r6,8dfe8 <__fixdfsi+0x58>
   8dfb8:	00810cc4 	movi	r2,1075
   8dfbc:	1185c83a 	sub	r2,r2,r6
   8dfc0:	01c007c4 	movi	r7,31
   8dfc4:	18c00434 	orhi	r3,r3,16
   8dfc8:	38800d16 	blt	r7,r2,8e000 <__fixdfsi+0x70>
   8dfcc:	31befb44 	addi	r6,r6,-1043
   8dfd0:	2084d83a 	srl	r2,r4,r2
   8dfd4:	1986983a 	sll	r3,r3,r6
   8dfd8:	1884b03a 	or	r2,r3,r2
   8dfdc:	28000726 	beq	r5,zero,8dffc <__fixdfsi+0x6c>
   8dfe0:	0085c83a 	sub	r2,zero,r2
   8dfe4:	f800283a 	ret
   8dfe8:	00a00034 	movhi	r2,32768
   8dfec:	10bfffc4 	addi	r2,r2,-1
   8dff0:	2885883a 	add	r2,r5,r2
   8dff4:	f800283a 	ret
   8dff8:	0005883a 	mov	r2,zero
   8dffc:	f800283a 	ret
   8e000:	008104c4 	movi	r2,1043
   8e004:	1185c83a 	sub	r2,r2,r6
   8e008:	1884d83a 	srl	r2,r3,r2
   8e00c:	003ff306 	br	8dfdc <rx_descriptor_end+0xfff8df7c>

0008e010 <__floatsidf>:
   8e010:	defffd04 	addi	sp,sp,-12
   8e014:	dfc00215 	stw	ra,8(sp)
   8e018:	dc400115 	stw	r17,4(sp)
   8e01c:	dc000015 	stw	r16,0(sp)
   8e020:	20002b26 	beq	r4,zero,8e0d0 <__floatsidf+0xc0>
   8e024:	2023883a 	mov	r17,r4
   8e028:	2020d7fa 	srli	r16,r4,31
   8e02c:	20002d16 	blt	r4,zero,8e0e4 <__floatsidf+0xd4>
   8e030:	8809883a 	mov	r4,r17
   8e034:	008e1940 	call	8e194 <__clzsi2>
   8e038:	01410784 	movi	r5,1054
   8e03c:	288bc83a 	sub	r5,r5,r2
   8e040:	01010cc4 	movi	r4,1075
   8e044:	2149c83a 	sub	r4,r4,r5
   8e048:	00c007c4 	movi	r3,31
   8e04c:	1900160e 	bge	r3,r4,8e0a8 <__floatsidf+0x98>
   8e050:	00c104c4 	movi	r3,1043
   8e054:	1947c83a 	sub	r3,r3,r5
   8e058:	88c6983a 	sll	r3,r17,r3
   8e05c:	00800434 	movhi	r2,16
   8e060:	10bfffc4 	addi	r2,r2,-1
   8e064:	1886703a 	and	r3,r3,r2
   8e068:	2941ffcc 	andi	r5,r5,2047
   8e06c:	800d883a 	mov	r6,r16
   8e070:	0005883a 	mov	r2,zero
   8e074:	280a953a 	slli	r5,r5,20
   8e078:	31803fcc 	andi	r6,r6,255
   8e07c:	01000434 	movhi	r4,16
   8e080:	300c97fa 	slli	r6,r6,31
   8e084:	213fffc4 	addi	r4,r4,-1
   8e088:	1906703a 	and	r3,r3,r4
   8e08c:	1946b03a 	or	r3,r3,r5
   8e090:	1986b03a 	or	r3,r3,r6
   8e094:	dfc00217 	ldw	ra,8(sp)
   8e098:	dc400117 	ldw	r17,4(sp)
   8e09c:	dc000017 	ldw	r16,0(sp)
   8e0a0:	dec00304 	addi	sp,sp,12
   8e0a4:	f800283a 	ret
   8e0a8:	00c002c4 	movi	r3,11
   8e0ac:	1887c83a 	sub	r3,r3,r2
   8e0b0:	88c6d83a 	srl	r3,r17,r3
   8e0b4:	8904983a 	sll	r2,r17,r4
   8e0b8:	01000434 	movhi	r4,16
   8e0bc:	213fffc4 	addi	r4,r4,-1
   8e0c0:	2941ffcc 	andi	r5,r5,2047
   8e0c4:	1906703a 	and	r3,r3,r4
   8e0c8:	800d883a 	mov	r6,r16
   8e0cc:	003fe906 	br	8e074 <rx_descriptor_end+0xfff8e014>
   8e0d0:	000d883a 	mov	r6,zero
   8e0d4:	000b883a 	mov	r5,zero
   8e0d8:	0007883a 	mov	r3,zero
   8e0dc:	0005883a 	mov	r2,zero
   8e0e0:	003fe406 	br	8e074 <rx_descriptor_end+0xfff8e014>
   8e0e4:	0123c83a 	sub	r17,zero,r4
   8e0e8:	003fd106 	br	8e030 <rx_descriptor_end+0xfff8dfd0>

0008e0ec <__floatunsidf>:
   8e0ec:	defffe04 	addi	sp,sp,-8
   8e0f0:	dc000015 	stw	r16,0(sp)
   8e0f4:	dfc00115 	stw	ra,4(sp)
   8e0f8:	2021883a 	mov	r16,r4
   8e0fc:	20002226 	beq	r4,zero,8e188 <__floatunsidf+0x9c>
   8e100:	008e1940 	call	8e194 <__clzsi2>
   8e104:	01010784 	movi	r4,1054
   8e108:	2089c83a 	sub	r4,r4,r2
   8e10c:	01810cc4 	movi	r6,1075
   8e110:	310dc83a 	sub	r6,r6,r4
   8e114:	00c007c4 	movi	r3,31
   8e118:	1980120e 	bge	r3,r6,8e164 <__floatunsidf+0x78>
   8e11c:	00c104c4 	movi	r3,1043
   8e120:	1907c83a 	sub	r3,r3,r4
   8e124:	80ca983a 	sll	r5,r16,r3
   8e128:	00800434 	movhi	r2,16
   8e12c:	10bfffc4 	addi	r2,r2,-1
   8e130:	2101ffcc 	andi	r4,r4,2047
   8e134:	0021883a 	mov	r16,zero
   8e138:	288a703a 	and	r5,r5,r2
   8e13c:	2008953a 	slli	r4,r4,20
   8e140:	00c00434 	movhi	r3,16
   8e144:	18ffffc4 	addi	r3,r3,-1
   8e148:	28c6703a 	and	r3,r5,r3
   8e14c:	8005883a 	mov	r2,r16
   8e150:	1906b03a 	or	r3,r3,r4
   8e154:	dfc00117 	ldw	ra,4(sp)
   8e158:	dc000017 	ldw	r16,0(sp)
   8e15c:	dec00204 	addi	sp,sp,8
   8e160:	f800283a 	ret
   8e164:	00c002c4 	movi	r3,11
   8e168:	188bc83a 	sub	r5,r3,r2
   8e16c:	814ad83a 	srl	r5,r16,r5
   8e170:	00c00434 	movhi	r3,16
   8e174:	18ffffc4 	addi	r3,r3,-1
   8e178:	81a0983a 	sll	r16,r16,r6
   8e17c:	2101ffcc 	andi	r4,r4,2047
   8e180:	28ca703a 	and	r5,r5,r3
   8e184:	003fed06 	br	8e13c <rx_descriptor_end+0xfff8e0dc>
   8e188:	0009883a 	mov	r4,zero
   8e18c:	000b883a 	mov	r5,zero
   8e190:	003fea06 	br	8e13c <rx_descriptor_end+0xfff8e0dc>

0008e194 <__clzsi2>:
   8e194:	00bfffd4 	movui	r2,65535
   8e198:	11000536 	bltu	r2,r4,8e1b0 <__clzsi2+0x1c>
   8e19c:	00803fc4 	movi	r2,255
   8e1a0:	11000f36 	bltu	r2,r4,8e1e0 <__clzsi2+0x4c>
   8e1a4:	00800804 	movi	r2,32
   8e1a8:	0007883a 	mov	r3,zero
   8e1ac:	00000506 	br	8e1c4 <__clzsi2+0x30>
   8e1b0:	00804034 	movhi	r2,256
   8e1b4:	10bfffc4 	addi	r2,r2,-1
   8e1b8:	11000c2e 	bgeu	r2,r4,8e1ec <__clzsi2+0x58>
   8e1bc:	00800204 	movi	r2,8
   8e1c0:	00c00604 	movi	r3,24
   8e1c4:	20c8d83a 	srl	r4,r4,r3
   8e1c8:	00c00274 	movhi	r3,9
   8e1cc:	18c86a04 	addi	r3,r3,8616
   8e1d0:	1909883a 	add	r4,r3,r4
   8e1d4:	20c00003 	ldbu	r3,0(r4)
   8e1d8:	10c5c83a 	sub	r2,r2,r3
   8e1dc:	f800283a 	ret
   8e1e0:	00800604 	movi	r2,24
   8e1e4:	00c00204 	movi	r3,8
   8e1e8:	003ff606 	br	8e1c4 <rx_descriptor_end+0xfff8e164>
   8e1ec:	00800404 	movi	r2,16
   8e1f0:	1007883a 	mov	r3,r2
   8e1f4:	003ff306 	br	8e1c4 <rx_descriptor_end+0xfff8e164>

0008e1f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e1f8:	defffe04 	addi	sp,sp,-8
   8e1fc:	dfc00115 	stw	ra,4(sp)
   8e200:	df000015 	stw	fp,0(sp)
   8e204:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e208:	d0a00c17 	ldw	r2,-32720(gp)
   8e20c:	10000326 	beq	r2,zero,8e21c <alt_get_errno+0x24>
   8e210:	d0a00c17 	ldw	r2,-32720(gp)
   8e214:	103ee83a 	callr	r2
   8e218:	00000106 	br	8e220 <alt_get_errno+0x28>
   8e21c:	d0a7fa04 	addi	r2,gp,-24600
}
   8e220:	e037883a 	mov	sp,fp
   8e224:	dfc00117 	ldw	ra,4(sp)
   8e228:	df000017 	ldw	fp,0(sp)
   8e22c:	dec00204 	addi	sp,sp,8
   8e230:	f800283a 	ret

0008e234 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e234:	defffb04 	addi	sp,sp,-20
   8e238:	dfc00415 	stw	ra,16(sp)
   8e23c:	df000315 	stw	fp,12(sp)
   8e240:	df000304 	addi	fp,sp,12
   8e244:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e248:	e0bfff17 	ldw	r2,-4(fp)
   8e24c:	10000616 	blt	r2,zero,8e268 <close+0x34>
   8e250:	e0bfff17 	ldw	r2,-4(fp)
   8e254:	10c00324 	muli	r3,r2,12
   8e258:	00800274 	movhi	r2,9
   8e25c:	108bf004 	addi	r2,r2,12224
   8e260:	1885883a 	add	r2,r3,r2
   8e264:	00000106 	br	8e26c <close+0x38>
   8e268:	0005883a 	mov	r2,zero
   8e26c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8e270:	e0bffd17 	ldw	r2,-12(fp)
   8e274:	10001926 	beq	r2,zero,8e2dc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e278:	e0bffd17 	ldw	r2,-12(fp)
   8e27c:	10800017 	ldw	r2,0(r2)
   8e280:	10800417 	ldw	r2,16(r2)
   8e284:	10000626 	beq	r2,zero,8e2a0 <close+0x6c>
   8e288:	e0bffd17 	ldw	r2,-12(fp)
   8e28c:	10800017 	ldw	r2,0(r2)
   8e290:	10800417 	ldw	r2,16(r2)
   8e294:	e13ffd17 	ldw	r4,-12(fp)
   8e298:	103ee83a 	callr	r2
   8e29c:	00000106 	br	8e2a4 <close+0x70>
   8e2a0:	0005883a 	mov	r2,zero
   8e2a4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e2a8:	e13fff17 	ldw	r4,-4(fp)
   8e2ac:	008eba40 	call	8eba4 <alt_release_fd>
    if (rval < 0)
   8e2b0:	e0bffe17 	ldw	r2,-8(fp)
   8e2b4:	1000070e 	bge	r2,zero,8e2d4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8e2b8:	008e1f80 	call	8e1f8 <alt_get_errno>
   8e2bc:	1007883a 	mov	r3,r2
   8e2c0:	e0bffe17 	ldw	r2,-8(fp)
   8e2c4:	0085c83a 	sub	r2,zero,r2
   8e2c8:	18800015 	stw	r2,0(r3)
      return -1;
   8e2cc:	00bfffc4 	movi	r2,-1
   8e2d0:	00000706 	br	8e2f0 <close+0xbc>
    }
    return 0;
   8e2d4:	0005883a 	mov	r2,zero
   8e2d8:	00000506 	br	8e2f0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e2dc:	008e1f80 	call	8e1f8 <alt_get_errno>
   8e2e0:	1007883a 	mov	r3,r2
   8e2e4:	00801444 	movi	r2,81
   8e2e8:	18800015 	stw	r2,0(r3)
    return -1;
   8e2ec:	00bfffc4 	movi	r2,-1
  }
}
   8e2f0:	e037883a 	mov	sp,fp
   8e2f4:	dfc00117 	ldw	ra,4(sp)
   8e2f8:	df000017 	ldw	fp,0(sp)
   8e2fc:	dec00204 	addi	sp,sp,8
   8e300:	f800283a 	ret

0008e304 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8e304:	defffe04 	addi	sp,sp,-8
   8e308:	df000115 	stw	fp,4(sp)
   8e30c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8e310:	e03fff15 	stw	zero,-4(fp)
   8e314:	00000506 	br	8e32c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8e318:	e0bfff17 	ldw	r2,-4(fp)
   8e31c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8e320:	e0bfff17 	ldw	r2,-4(fp)
   8e324:	10800804 	addi	r2,r2,32
   8e328:	e0bfff15 	stw	r2,-4(fp)
   8e32c:	e0bfff17 	ldw	r2,-4(fp)
   8e330:	10820030 	cmpltui	r2,r2,2048
   8e334:	103ff81e 	bne	r2,zero,8e318 <rx_descriptor_end+0xfff8e2b8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8e338:	0001883a 	nop
   8e33c:	e037883a 	mov	sp,fp
   8e340:	df000017 	ldw	fp,0(sp)
   8e344:	dec00104 	addi	sp,sp,4
   8e348:	f800283a 	ret

0008e34c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8e34c:	defffc04 	addi	sp,sp,-16
   8e350:	df000315 	stw	fp,12(sp)
   8e354:	df000304 	addi	fp,sp,12
   8e358:	e13ffd15 	stw	r4,-12(fp)
   8e35c:	e17ffe15 	stw	r5,-8(fp)
   8e360:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8e364:	e0bfff17 	ldw	r2,-4(fp)
}
   8e368:	e037883a 	mov	sp,fp
   8e36c:	df000017 	ldw	fp,0(sp)
   8e370:	dec00104 	addi	sp,sp,4
   8e374:	f800283a 	ret

0008e378 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e378:	defffe04 	addi	sp,sp,-8
   8e37c:	dfc00115 	stw	ra,4(sp)
   8e380:	df000015 	stw	fp,0(sp)
   8e384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e388:	d0a00c17 	ldw	r2,-32720(gp)
   8e38c:	10000326 	beq	r2,zero,8e39c <alt_get_errno+0x24>
   8e390:	d0a00c17 	ldw	r2,-32720(gp)
   8e394:	103ee83a 	callr	r2
   8e398:	00000106 	br	8e3a0 <alt_get_errno+0x28>
   8e39c:	d0a7fa04 	addi	r2,gp,-24600
}
   8e3a0:	e037883a 	mov	sp,fp
   8e3a4:	dfc00117 	ldw	ra,4(sp)
   8e3a8:	df000017 	ldw	fp,0(sp)
   8e3ac:	dec00204 	addi	sp,sp,8
   8e3b0:	f800283a 	ret

0008e3b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e3b4:	defffb04 	addi	sp,sp,-20
   8e3b8:	dfc00415 	stw	ra,16(sp)
   8e3bc:	df000315 	stw	fp,12(sp)
   8e3c0:	df000304 	addi	fp,sp,12
   8e3c4:	e13ffe15 	stw	r4,-8(fp)
   8e3c8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e3cc:	e0bffe17 	ldw	r2,-8(fp)
   8e3d0:	10000616 	blt	r2,zero,8e3ec <fstat+0x38>
   8e3d4:	e0bffe17 	ldw	r2,-8(fp)
   8e3d8:	10c00324 	muli	r3,r2,12
   8e3dc:	00800274 	movhi	r2,9
   8e3e0:	108bf004 	addi	r2,r2,12224
   8e3e4:	1885883a 	add	r2,r3,r2
   8e3e8:	00000106 	br	8e3f0 <fstat+0x3c>
   8e3ec:	0005883a 	mov	r2,zero
   8e3f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8e3f4:	e0bffd17 	ldw	r2,-12(fp)
   8e3f8:	10001026 	beq	r2,zero,8e43c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e3fc:	e0bffd17 	ldw	r2,-12(fp)
   8e400:	10800017 	ldw	r2,0(r2)
   8e404:	10800817 	ldw	r2,32(r2)
   8e408:	10000726 	beq	r2,zero,8e428 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8e40c:	e0bffd17 	ldw	r2,-12(fp)
   8e410:	10800017 	ldw	r2,0(r2)
   8e414:	10800817 	ldw	r2,32(r2)
   8e418:	e17fff17 	ldw	r5,-4(fp)
   8e41c:	e13ffd17 	ldw	r4,-12(fp)
   8e420:	103ee83a 	callr	r2
   8e424:	00000a06 	br	8e450 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e428:	e0bfff17 	ldw	r2,-4(fp)
   8e42c:	00c80004 	movi	r3,8192
   8e430:	10c00115 	stw	r3,4(r2)
      return 0;
   8e434:	0005883a 	mov	r2,zero
   8e438:	00000506 	br	8e450 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e43c:	008e3780 	call	8e378 <alt_get_errno>
   8e440:	1007883a 	mov	r3,r2
   8e444:	00801444 	movi	r2,81
   8e448:	18800015 	stw	r2,0(r3)
    return -1;
   8e44c:	00bfffc4 	movi	r2,-1
  }
}
   8e450:	e037883a 	mov	sp,fp
   8e454:	dfc00117 	ldw	ra,4(sp)
   8e458:	df000017 	ldw	fp,0(sp)
   8e45c:	dec00204 	addi	sp,sp,8
   8e460:	f800283a 	ret

0008e464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e464:	defffe04 	addi	sp,sp,-8
   8e468:	dfc00115 	stw	ra,4(sp)
   8e46c:	df000015 	stw	fp,0(sp)
   8e470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e474:	d0a00c17 	ldw	r2,-32720(gp)
   8e478:	10000326 	beq	r2,zero,8e488 <alt_get_errno+0x24>
   8e47c:	d0a00c17 	ldw	r2,-32720(gp)
   8e480:	103ee83a 	callr	r2
   8e484:	00000106 	br	8e48c <alt_get_errno+0x28>
   8e488:	d0a7fa04 	addi	r2,gp,-24600
}
   8e48c:	e037883a 	mov	sp,fp
   8e490:	dfc00117 	ldw	ra,4(sp)
   8e494:	df000017 	ldw	fp,0(sp)
   8e498:	dec00204 	addi	sp,sp,8
   8e49c:	f800283a 	ret

0008e4a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e4a0:	deffed04 	addi	sp,sp,-76
   8e4a4:	dfc01215 	stw	ra,72(sp)
   8e4a8:	df001115 	stw	fp,68(sp)
   8e4ac:	df001104 	addi	fp,sp,68
   8e4b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e4b4:	e0bfff17 	ldw	r2,-4(fp)
   8e4b8:	10000616 	blt	r2,zero,8e4d4 <isatty+0x34>
   8e4bc:	e0bfff17 	ldw	r2,-4(fp)
   8e4c0:	10c00324 	muli	r3,r2,12
   8e4c4:	00800274 	movhi	r2,9
   8e4c8:	108bf004 	addi	r2,r2,12224
   8e4cc:	1885883a 	add	r2,r3,r2
   8e4d0:	00000106 	br	8e4d8 <isatty+0x38>
   8e4d4:	0005883a 	mov	r2,zero
   8e4d8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8e4dc:	e0bfef17 	ldw	r2,-68(fp)
   8e4e0:	10000e26 	beq	r2,zero,8e51c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e4e4:	e0bfef17 	ldw	r2,-68(fp)
   8e4e8:	10800017 	ldw	r2,0(r2)
   8e4ec:	10800817 	ldw	r2,32(r2)
   8e4f0:	1000021e 	bne	r2,zero,8e4fc <isatty+0x5c>
    {
      return 1;
   8e4f4:	00800044 	movi	r2,1
   8e4f8:	00000d06 	br	8e530 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e4fc:	e0bff004 	addi	r2,fp,-64
   8e500:	100b883a 	mov	r5,r2
   8e504:	e13fff17 	ldw	r4,-4(fp)
   8e508:	008e3b40 	call	8e3b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e50c:	e0bff117 	ldw	r2,-60(fp)
   8e510:	10880020 	cmpeqi	r2,r2,8192
   8e514:	10803fcc 	andi	r2,r2,255
   8e518:	00000506 	br	8e530 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e51c:	008e4640 	call	8e464 <alt_get_errno>
   8e520:	1007883a 	mov	r3,r2
   8e524:	00801444 	movi	r2,81
   8e528:	18800015 	stw	r2,0(r3)
    return 0;
   8e52c:	0005883a 	mov	r2,zero
  }
}
   8e530:	e037883a 	mov	sp,fp
   8e534:	dfc00117 	ldw	ra,4(sp)
   8e538:	df000017 	ldw	fp,0(sp)
   8e53c:	dec00204 	addi	sp,sp,8
   8e540:	f800283a 	ret

0008e544 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e544:	defffc04 	addi	sp,sp,-16
   8e548:	df000315 	stw	fp,12(sp)
   8e54c:	df000304 	addi	fp,sp,12
   8e550:	e13ffd15 	stw	r4,-12(fp)
   8e554:	e17ffe15 	stw	r5,-8(fp)
   8e558:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e55c:	e0fffe17 	ldw	r3,-8(fp)
   8e560:	e0bffd17 	ldw	r2,-12(fp)
   8e564:	18800c26 	beq	r3,r2,8e598 <alt_load_section+0x54>
  {
    while( to != end )
   8e568:	00000806 	br	8e58c <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e56c:	e0bffe17 	ldw	r2,-8(fp)
   8e570:	10c00104 	addi	r3,r2,4
   8e574:	e0fffe15 	stw	r3,-8(fp)
   8e578:	e0fffd17 	ldw	r3,-12(fp)
   8e57c:	19000104 	addi	r4,r3,4
   8e580:	e13ffd15 	stw	r4,-12(fp)
   8e584:	18c00017 	ldw	r3,0(r3)
   8e588:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e58c:	e0fffe17 	ldw	r3,-8(fp)
   8e590:	e0bfff17 	ldw	r2,-4(fp)
   8e594:	18bff51e 	bne	r3,r2,8e56c <rx_descriptor_end+0xfff8e50c>
    {
      *to++ = *from++;
    }
  }
}
   8e598:	0001883a 	nop
   8e59c:	e037883a 	mov	sp,fp
   8e5a0:	df000017 	ldw	fp,0(sp)
   8e5a4:	dec00104 	addi	sp,sp,4
   8e5a8:	f800283a 	ret

0008e5ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e5ac:	defffe04 	addi	sp,sp,-8
   8e5b0:	dfc00115 	stw	ra,4(sp)
   8e5b4:	df000015 	stw	fp,0(sp)
   8e5b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e5bc:	01800274 	movhi	r6,9
   8e5c0:	31909304 	addi	r6,r6,16972
   8e5c4:	01400274 	movhi	r5,9
   8e5c8:	2948bd04 	addi	r5,r5,8948
   8e5cc:	01000274 	movhi	r4,9
   8e5d0:	21109304 	addi	r4,r4,16972
   8e5d4:	008e5440 	call	8e544 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e5d8:	01800234 	movhi	r6,8
   8e5dc:	31809104 	addi	r6,r6,580
   8e5e0:	01400234 	movhi	r5,8
   8e5e4:	29400804 	addi	r5,r5,32
   8e5e8:	01000234 	movhi	r4,8
   8e5ec:	21000804 	addi	r4,r4,32
   8e5f0:	008e5440 	call	8e544 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e5f4:	01800274 	movhi	r6,9
   8e5f8:	3188bd04 	addi	r6,r6,8948
   8e5fc:	01400274 	movhi	r5,9
   8e600:	2946ec04 	addi	r5,r5,7088
   8e604:	01000274 	movhi	r4,9
   8e608:	2106ec04 	addi	r4,r4,7088
   8e60c:	008e5440 	call	8e544 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e610:	008e3040 	call	8e304 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e614:	0090bac0 	call	90bac <alt_icache_flush_all>
}
   8e618:	0001883a 	nop
   8e61c:	e037883a 	mov	sp,fp
   8e620:	dfc00117 	ldw	ra,4(sp)
   8e624:	df000017 	ldw	fp,0(sp)
   8e628:	dec00204 	addi	sp,sp,8
   8e62c:	f800283a 	ret

0008e630 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e630:	defffe04 	addi	sp,sp,-8
   8e634:	dfc00115 	stw	ra,4(sp)
   8e638:	df000015 	stw	fp,0(sp)
   8e63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e640:	d0a00c17 	ldw	r2,-32720(gp)
   8e644:	10000326 	beq	r2,zero,8e654 <alt_get_errno+0x24>
   8e648:	d0a00c17 	ldw	r2,-32720(gp)
   8e64c:	103ee83a 	callr	r2
   8e650:	00000106 	br	8e658 <alt_get_errno+0x28>
   8e654:	d0a7fa04 	addi	r2,gp,-24600
}
   8e658:	e037883a 	mov	sp,fp
   8e65c:	dfc00117 	ldw	ra,4(sp)
   8e660:	df000017 	ldw	fp,0(sp)
   8e664:	dec00204 	addi	sp,sp,8
   8e668:	f800283a 	ret

0008e66c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e66c:	defff904 	addi	sp,sp,-28
   8e670:	dfc00615 	stw	ra,24(sp)
   8e674:	df000515 	stw	fp,20(sp)
   8e678:	df000504 	addi	fp,sp,20
   8e67c:	e13ffd15 	stw	r4,-12(fp)
   8e680:	e17ffe15 	stw	r5,-8(fp)
   8e684:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e688:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e68c:	e0bffd17 	ldw	r2,-12(fp)
   8e690:	10000616 	blt	r2,zero,8e6ac <lseek+0x40>
   8e694:	e0bffd17 	ldw	r2,-12(fp)
   8e698:	10c00324 	muli	r3,r2,12
   8e69c:	00800274 	movhi	r2,9
   8e6a0:	108bf004 	addi	r2,r2,12224
   8e6a4:	1885883a 	add	r2,r3,r2
   8e6a8:	00000106 	br	8e6b0 <lseek+0x44>
   8e6ac:	0005883a 	mov	r2,zero
   8e6b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e6b4:	e0bffc17 	ldw	r2,-16(fp)
   8e6b8:	10001026 	beq	r2,zero,8e6fc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e6bc:	e0bffc17 	ldw	r2,-16(fp)
   8e6c0:	10800017 	ldw	r2,0(r2)
   8e6c4:	10800717 	ldw	r2,28(r2)
   8e6c8:	10000926 	beq	r2,zero,8e6f0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e6cc:	e0bffc17 	ldw	r2,-16(fp)
   8e6d0:	10800017 	ldw	r2,0(r2)
   8e6d4:	10800717 	ldw	r2,28(r2)
   8e6d8:	e1bfff17 	ldw	r6,-4(fp)
   8e6dc:	e17ffe17 	ldw	r5,-8(fp)
   8e6e0:	e13ffc17 	ldw	r4,-16(fp)
   8e6e4:	103ee83a 	callr	r2
   8e6e8:	e0bffb15 	stw	r2,-20(fp)
   8e6ec:	00000506 	br	8e704 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e6f0:	00bfde84 	movi	r2,-134
   8e6f4:	e0bffb15 	stw	r2,-20(fp)
   8e6f8:	00000206 	br	8e704 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e6fc:	00bfebc4 	movi	r2,-81
   8e700:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e704:	e0bffb17 	ldw	r2,-20(fp)
   8e708:	1000070e 	bge	r2,zero,8e728 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8e70c:	008e6300 	call	8e630 <alt_get_errno>
   8e710:	1007883a 	mov	r3,r2
   8e714:	e0bffb17 	ldw	r2,-20(fp)
   8e718:	0085c83a 	sub	r2,zero,r2
   8e71c:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e720:	00bfffc4 	movi	r2,-1
   8e724:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e728:	e0bffb17 	ldw	r2,-20(fp)
}
   8e72c:	e037883a 	mov	sp,fp
   8e730:	dfc00117 	ldw	ra,4(sp)
   8e734:	df000017 	ldw	fp,0(sp)
   8e738:	dec00204 	addi	sp,sp,8
   8e73c:	f800283a 	ret

0008e740 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e740:	defffd04 	addi	sp,sp,-12
   8e744:	dfc00215 	stw	ra,8(sp)
   8e748:	df000115 	stw	fp,4(sp)
   8e74c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e750:	0009883a 	mov	r4,zero
   8e754:	008ee200 	call	8ee20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e758:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e75c:	008ee580 	call	8ee58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e760:	01800274 	movhi	r6,9
   8e764:	3188ad04 	addi	r6,r6,8884
   8e768:	01400274 	movhi	r5,9
   8e76c:	2948ad04 	addi	r5,r5,8884
   8e770:	01000274 	movhi	r4,9
   8e774:	2108ad04 	addi	r4,r4,8884
   8e778:	0090f440 	call	90f44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e77c:	0090a5c0 	call	90a5c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e780:	01000274 	movhi	r4,9
   8e784:	2102af04 	addi	r4,r4,2748
   8e788:	00916b40 	call	916b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e78c:	d0a7fe17 	ldw	r2,-24584(gp)
   8e790:	d0e7ff17 	ldw	r3,-24580(gp)
   8e794:	d1280017 	ldw	r4,-24576(gp)
   8e798:	200d883a 	mov	r6,r4
   8e79c:	180b883a 	mov	r5,r3
   8e7a0:	1009883a 	mov	r4,r2
   8e7a4:	00816b40 	call	816b4 <main>
   8e7a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8e7ac:	01000044 	movi	r4,1
   8e7b0:	008e2340 	call	8e234 <close>
  exit (result);
   8e7b4:	e13fff17 	ldw	r4,-4(fp)
   8e7b8:	00916c80 	call	916c8 <exit>

0008e7bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8e7bc:	defffe04 	addi	sp,sp,-8
   8e7c0:	df000115 	stw	fp,4(sp)
   8e7c4:	df000104 	addi	fp,sp,4
   8e7c8:	e13fff15 	stw	r4,-4(fp)
}
   8e7cc:	0001883a 	nop
   8e7d0:	e037883a 	mov	sp,fp
   8e7d4:	df000017 	ldw	fp,0(sp)
   8e7d8:	dec00104 	addi	sp,sp,4
   8e7dc:	f800283a 	ret

0008e7e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e7e0:	defffe04 	addi	sp,sp,-8
   8e7e4:	df000115 	stw	fp,4(sp)
   8e7e8:	df000104 	addi	fp,sp,4
   8e7ec:	e13fff15 	stw	r4,-4(fp)
}
   8e7f0:	0001883a 	nop
   8e7f4:	e037883a 	mov	sp,fp
   8e7f8:	df000017 	ldw	fp,0(sp)
   8e7fc:	dec00104 	addi	sp,sp,4
   8e800:	f800283a 	ret

0008e804 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8e804:	defff204 	addi	sp,sp,-56
   8e808:	dfc00a15 	stw	ra,40(sp)
   8e80c:	df000915 	stw	fp,36(sp)
   8e810:	df000904 	addi	fp,sp,36
   8e814:	e13fff15 	stw	r4,-4(fp)
   8e818:	e1400215 	stw	r5,8(fp)
   8e81c:	e1800315 	stw	r6,12(fp)
   8e820:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   8e824:	e0800204 	addi	r2,fp,8
   8e828:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8e82c:	e0bfff17 	ldw	r2,-4(fp)
   8e830:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   8e834:	00006f06 	br	8e9f4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8e838:	e0bff807 	ldb	r2,-32(fp)
   8e83c:	10800960 	cmpeqi	r2,r2,37
   8e840:	1000041e 	bne	r2,zero,8e854 <alt_printf+0x50>
        {
            alt_putchar(c);
   8e844:	e0bff807 	ldb	r2,-32(fp)
   8e848:	1009883a 	mov	r4,r2
   8e84c:	008ea300 	call	8ea30 <alt_putchar>
   8e850:	00006806 	br	8e9f4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8e854:	e0bff717 	ldw	r2,-36(fp)
   8e858:	10c00044 	addi	r3,r2,1
   8e85c:	e0fff715 	stw	r3,-36(fp)
   8e860:	10800003 	ldbu	r2,0(r2)
   8e864:	e0bff805 	stb	r2,-32(fp)
   8e868:	e0bff807 	ldb	r2,-32(fp)
   8e86c:	10006926 	beq	r2,zero,8ea14 <alt_printf+0x210>
            {
                if (c == '%')
   8e870:	e0bff807 	ldb	r2,-32(fp)
   8e874:	10800958 	cmpnei	r2,r2,37
   8e878:	1000041e 	bne	r2,zero,8e88c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8e87c:	e0bff807 	ldb	r2,-32(fp)
   8e880:	1009883a 	mov	r4,r2
   8e884:	008ea300 	call	8ea30 <alt_putchar>
   8e888:	00005a06 	br	8e9f4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   8e88c:	e0bff807 	ldb	r2,-32(fp)
   8e890:	108018d8 	cmpnei	r2,r2,99
   8e894:	1000081e 	bne	r2,zero,8e8b8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   8e898:	e0bffe17 	ldw	r2,-8(fp)
   8e89c:	10c00104 	addi	r3,r2,4
   8e8a0:	e0fffe15 	stw	r3,-8(fp)
   8e8a4:	10800017 	ldw	r2,0(r2)
   8e8a8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   8e8ac:	e13ffd17 	ldw	r4,-12(fp)
   8e8b0:	008ea300 	call	8ea30 <alt_putchar>
   8e8b4:	00004f06 	br	8e9f4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   8e8b8:	e0bff807 	ldb	r2,-32(fp)
   8e8bc:	10801e18 	cmpnei	r2,r2,120
   8e8c0:	1000341e 	bne	r2,zero,8e994 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8e8c4:	e0bffe17 	ldw	r2,-8(fp)
   8e8c8:	10c00104 	addi	r3,r2,4
   8e8cc:	e0fffe15 	stw	r3,-8(fp)
   8e8d0:	10800017 	ldw	r2,0(r2)
   8e8d4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8e8d8:	e0bffb17 	ldw	r2,-20(fp)
   8e8dc:	1000031e 	bne	r2,zero,8e8ec <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   8e8e0:	01000c04 	movi	r4,48
   8e8e4:	008ea300 	call	8ea30 <alt_putchar>
                        continue;
   8e8e8:	00004206 	br	8e9f4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   8e8ec:	00800704 	movi	r2,28
   8e8f0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   8e8f4:	00000306 	br	8e904 <alt_printf+0x100>
                        digit_shift -= 4;
   8e8f8:	e0bff917 	ldw	r2,-28(fp)
   8e8fc:	10bfff04 	addi	r2,r2,-4
   8e900:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8e904:	00c003c4 	movi	r3,15
   8e908:	e0bff917 	ldw	r2,-28(fp)
   8e90c:	1884983a 	sll	r2,r3,r2
   8e910:	1007883a 	mov	r3,r2
   8e914:	e0bffb17 	ldw	r2,-20(fp)
   8e918:	1884703a 	and	r2,r3,r2
   8e91c:	103ff626 	beq	r2,zero,8e8f8 <rx_descriptor_end+0xfff8e898>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8e920:	00001906 	br	8e988 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8e924:	00c003c4 	movi	r3,15
   8e928:	e0bff917 	ldw	r2,-28(fp)
   8e92c:	1884983a 	sll	r2,r3,r2
   8e930:	1007883a 	mov	r3,r2
   8e934:	e0bffb17 	ldw	r2,-20(fp)
   8e938:	1886703a 	and	r3,r3,r2
   8e93c:	e0bff917 	ldw	r2,-28(fp)
   8e940:	1884d83a 	srl	r2,r3,r2
   8e944:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   8e948:	e0bffc17 	ldw	r2,-16(fp)
   8e94c:	108002a8 	cmpgeui	r2,r2,10
   8e950:	1000041e 	bne	r2,zero,8e964 <alt_printf+0x160>
                            c = '0' + digit;
   8e954:	e0bffc17 	ldw	r2,-16(fp)
   8e958:	10800c04 	addi	r2,r2,48
   8e95c:	e0bff805 	stb	r2,-32(fp)
   8e960:	00000306 	br	8e970 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   8e964:	e0bffc17 	ldw	r2,-16(fp)
   8e968:	108015c4 	addi	r2,r2,87
   8e96c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   8e970:	e0bff807 	ldb	r2,-32(fp)
   8e974:	1009883a 	mov	r4,r2
   8e978:	008ea300 	call	8ea30 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8e97c:	e0bff917 	ldw	r2,-28(fp)
   8e980:	10bfff04 	addi	r2,r2,-4
   8e984:	e0bff915 	stw	r2,-28(fp)
   8e988:	e0bff917 	ldw	r2,-28(fp)
   8e98c:	103fe50e 	bge	r2,zero,8e924 <rx_descriptor_end+0xfff8e8c4>
   8e990:	00001806 	br	8e9f4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8e994:	e0bff807 	ldb	r2,-32(fp)
   8e998:	10801cd8 	cmpnei	r2,r2,115
   8e99c:	1000151e 	bne	r2,zero,8e9f4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8e9a0:	e0bffe17 	ldw	r2,-8(fp)
   8e9a4:	10c00104 	addi	r3,r2,4
   8e9a8:	e0fffe15 	stw	r3,-8(fp)
   8e9ac:	10800017 	ldw	r2,0(r2)
   8e9b0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   8e9b4:	00000906 	br	8e9dc <alt_printf+0x1d8>
                      alt_putchar(*s++);
   8e9b8:	e0bffa17 	ldw	r2,-24(fp)
   8e9bc:	10c00044 	addi	r3,r2,1
   8e9c0:	e0fffa15 	stw	r3,-24(fp)
   8e9c4:	10800003 	ldbu	r2,0(r2)
   8e9c8:	10803fcc 	andi	r2,r2,255
   8e9cc:	1080201c 	xori	r2,r2,128
   8e9d0:	10bfe004 	addi	r2,r2,-128
   8e9d4:	1009883a 	mov	r4,r2
   8e9d8:	008ea300 	call	8ea30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8e9dc:	e0bffa17 	ldw	r2,-24(fp)
   8e9e0:	10800003 	ldbu	r2,0(r2)
   8e9e4:	10803fcc 	andi	r2,r2,255
   8e9e8:	1080201c 	xori	r2,r2,128
   8e9ec:	10bfe004 	addi	r2,r2,-128
   8e9f0:	103ff11e 	bne	r2,zero,8e9b8 <rx_descriptor_end+0xfff8e958>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8e9f4:	e0bff717 	ldw	r2,-36(fp)
   8e9f8:	10c00044 	addi	r3,r2,1
   8e9fc:	e0fff715 	stw	r3,-36(fp)
   8ea00:	10800003 	ldbu	r2,0(r2)
   8ea04:	e0bff805 	stb	r2,-32(fp)
   8ea08:	e0bff807 	ldb	r2,-32(fp)
   8ea0c:	103f8a1e 	bne	r2,zero,8e838 <rx_descriptor_end+0xfff8e7d8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8ea10:	00000106 	br	8ea18 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   8ea14:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8ea18:	0001883a 	nop
   8ea1c:	e037883a 	mov	sp,fp
   8ea20:	dfc00117 	ldw	ra,4(sp)
   8ea24:	df000017 	ldw	fp,0(sp)
   8ea28:	dec00504 	addi	sp,sp,20
   8ea2c:	f800283a 	ret

0008ea30 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8ea30:	defffd04 	addi	sp,sp,-12
   8ea34:	dfc00215 	stw	ra,8(sp)
   8ea38:	df000115 	stw	fp,4(sp)
   8ea3c:	df000104 	addi	fp,sp,4
   8ea40:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   8ea44:	d0a00217 	ldw	r2,-32760(gp)
   8ea48:	10800217 	ldw	r2,8(r2)
   8ea4c:	100b883a 	mov	r5,r2
   8ea50:	e13fff17 	ldw	r4,-4(fp)
   8ea54:	009181c0 	call	9181c <putc>
#endif
#endif
}
   8ea58:	e037883a 	mov	sp,fp
   8ea5c:	dfc00117 	ldw	ra,4(sp)
   8ea60:	df000017 	ldw	fp,0(sp)
   8ea64:	dec00204 	addi	sp,sp,8
   8ea68:	f800283a 	ret

0008ea6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ea6c:	defffe04 	addi	sp,sp,-8
   8ea70:	dfc00115 	stw	ra,4(sp)
   8ea74:	df000015 	stw	fp,0(sp)
   8ea78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ea7c:	d0a00c17 	ldw	r2,-32720(gp)
   8ea80:	10000326 	beq	r2,zero,8ea90 <alt_get_errno+0x24>
   8ea84:	d0a00c17 	ldw	r2,-32720(gp)
   8ea88:	103ee83a 	callr	r2
   8ea8c:	00000106 	br	8ea94 <alt_get_errno+0x28>
   8ea90:	d0a7fa04 	addi	r2,gp,-24600
}
   8ea94:	e037883a 	mov	sp,fp
   8ea98:	dfc00117 	ldw	ra,4(sp)
   8ea9c:	df000017 	ldw	fp,0(sp)
   8eaa0:	dec00204 	addi	sp,sp,8
   8eaa4:	f800283a 	ret

0008eaa8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8eaa8:	defff904 	addi	sp,sp,-28
   8eaac:	dfc00615 	stw	ra,24(sp)
   8eab0:	df000515 	stw	fp,20(sp)
   8eab4:	df000504 	addi	fp,sp,20
   8eab8:	e13ffd15 	stw	r4,-12(fp)
   8eabc:	e17ffe15 	stw	r5,-8(fp)
   8eac0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8eac4:	e0bffd17 	ldw	r2,-12(fp)
   8eac8:	10000616 	blt	r2,zero,8eae4 <read+0x3c>
   8eacc:	e0bffd17 	ldw	r2,-12(fp)
   8ead0:	10c00324 	muli	r3,r2,12
   8ead4:	00800274 	movhi	r2,9
   8ead8:	108bf004 	addi	r2,r2,12224
   8eadc:	1885883a 	add	r2,r3,r2
   8eae0:	00000106 	br	8eae8 <read+0x40>
   8eae4:	0005883a 	mov	r2,zero
   8eae8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8eaec:	e0bffb17 	ldw	r2,-20(fp)
   8eaf0:	10002226 	beq	r2,zero,8eb7c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eaf4:	e0bffb17 	ldw	r2,-20(fp)
   8eaf8:	10800217 	ldw	r2,8(r2)
   8eafc:	108000cc 	andi	r2,r2,3
   8eb00:	10800060 	cmpeqi	r2,r2,1
   8eb04:	1000181e 	bne	r2,zero,8eb68 <read+0xc0>
        (fd->dev->read))
   8eb08:	e0bffb17 	ldw	r2,-20(fp)
   8eb0c:	10800017 	ldw	r2,0(r2)
   8eb10:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eb14:	10001426 	beq	r2,zero,8eb68 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8eb18:	e0bffb17 	ldw	r2,-20(fp)
   8eb1c:	10800017 	ldw	r2,0(r2)
   8eb20:	10800517 	ldw	r2,20(r2)
   8eb24:	e0ffff17 	ldw	r3,-4(fp)
   8eb28:	180d883a 	mov	r6,r3
   8eb2c:	e17ffe17 	ldw	r5,-8(fp)
   8eb30:	e13ffb17 	ldw	r4,-20(fp)
   8eb34:	103ee83a 	callr	r2
   8eb38:	e0bffc15 	stw	r2,-16(fp)
   8eb3c:	e0bffc17 	ldw	r2,-16(fp)
   8eb40:	1000070e 	bge	r2,zero,8eb60 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8eb44:	008ea6c0 	call	8ea6c <alt_get_errno>
   8eb48:	1007883a 	mov	r3,r2
   8eb4c:	e0bffc17 	ldw	r2,-16(fp)
   8eb50:	0085c83a 	sub	r2,zero,r2
   8eb54:	18800015 	stw	r2,0(r3)
          return -1;
   8eb58:	00bfffc4 	movi	r2,-1
   8eb5c:	00000c06 	br	8eb90 <read+0xe8>
        }
        return rval;
   8eb60:	e0bffc17 	ldw	r2,-16(fp)
   8eb64:	00000a06 	br	8eb90 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8eb68:	008ea6c0 	call	8ea6c <alt_get_errno>
   8eb6c:	1007883a 	mov	r3,r2
   8eb70:	00800344 	movi	r2,13
   8eb74:	18800015 	stw	r2,0(r3)
   8eb78:	00000406 	br	8eb8c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8eb7c:	008ea6c0 	call	8ea6c <alt_get_errno>
   8eb80:	1007883a 	mov	r3,r2
   8eb84:	00801444 	movi	r2,81
   8eb88:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8eb8c:	00bfffc4 	movi	r2,-1
}
   8eb90:	e037883a 	mov	sp,fp
   8eb94:	dfc00117 	ldw	ra,4(sp)
   8eb98:	df000017 	ldw	fp,0(sp)
   8eb9c:	dec00204 	addi	sp,sp,8
   8eba0:	f800283a 	ret

0008eba4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8eba4:	defffe04 	addi	sp,sp,-8
   8eba8:	df000115 	stw	fp,4(sp)
   8ebac:	df000104 	addi	fp,sp,4
   8ebb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8ebb4:	e0bfff17 	ldw	r2,-4(fp)
   8ebb8:	108000d0 	cmplti	r2,r2,3
   8ebbc:	10000d1e 	bne	r2,zero,8ebf4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8ebc0:	00800274 	movhi	r2,9
   8ebc4:	108bf004 	addi	r2,r2,12224
   8ebc8:	e0ffff17 	ldw	r3,-4(fp)
   8ebcc:	18c00324 	muli	r3,r3,12
   8ebd0:	10c5883a 	add	r2,r2,r3
   8ebd4:	10800204 	addi	r2,r2,8
   8ebd8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ebdc:	00800274 	movhi	r2,9
   8ebe0:	108bf004 	addi	r2,r2,12224
   8ebe4:	e0ffff17 	ldw	r3,-4(fp)
   8ebe8:	18c00324 	muli	r3,r3,12
   8ebec:	10c5883a 	add	r2,r2,r3
   8ebf0:	10000015 	stw	zero,0(r2)
  }
}
   8ebf4:	0001883a 	nop
   8ebf8:	e037883a 	mov	sp,fp
   8ebfc:	df000017 	ldw	fp,0(sp)
   8ec00:	dec00104 	addi	sp,sp,4
   8ec04:	f800283a 	ret

0008ec08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ec08:	defff904 	addi	sp,sp,-28
   8ec0c:	df000615 	stw	fp,24(sp)
   8ec10:	df000604 	addi	fp,sp,24
   8ec14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ec18:	0005303a 	rdctl	r2,status
   8ec1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ec20:	e0fffe17 	ldw	r3,-8(fp)
   8ec24:	00bfff84 	movi	r2,-2
   8ec28:	1884703a 	and	r2,r3,r2
   8ec2c:	1001703a 	wrctl	status,r2
  
  return context;
   8ec30:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ec34:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ec38:	d0a00d17 	ldw	r2,-32716(gp)
   8ec3c:	10c000c4 	addi	r3,r2,3
   8ec40:	00bfff04 	movi	r2,-4
   8ec44:	1884703a 	and	r2,r3,r2
   8ec48:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ec4c:	d0e00d17 	ldw	r3,-32716(gp)
   8ec50:	e0bfff17 	ldw	r2,-4(fp)
   8ec54:	1887883a 	add	r3,r3,r2
   8ec58:	00800374 	movhi	r2,13
   8ec5c:	10ac0004 	addi	r2,r2,-20480
   8ec60:	10c0062e 	bgeu	r2,r3,8ec7c <sbrk+0x74>
   8ec64:	e0bffb17 	ldw	r2,-20(fp)
   8ec68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ec6c:	e0bffa17 	ldw	r2,-24(fp)
   8ec70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ec74:	00bfffc4 	movi	r2,-1
   8ec78:	00000b06 	br	8eca8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8ec7c:	d0a00d17 	ldw	r2,-32716(gp)
   8ec80:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8ec84:	d0e00d17 	ldw	r3,-32716(gp)
   8ec88:	e0bfff17 	ldw	r2,-4(fp)
   8ec8c:	1885883a 	add	r2,r3,r2
   8ec90:	d0a00d15 	stw	r2,-32716(gp)
   8ec94:	e0bffb17 	ldw	r2,-20(fp)
   8ec98:	e0bffc15 	stw	r2,-16(fp)
   8ec9c:	e0bffc17 	ldw	r2,-16(fp)
   8eca0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8eca4:	e0bffd17 	ldw	r2,-12(fp)
} 
   8eca8:	e037883a 	mov	sp,fp
   8ecac:	df000017 	ldw	fp,0(sp)
   8ecb0:	dec00104 	addi	sp,sp,4
   8ecb4:	f800283a 	ret

0008ecb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ecb8:	defffe04 	addi	sp,sp,-8
   8ecbc:	dfc00115 	stw	ra,4(sp)
   8ecc0:	df000015 	stw	fp,0(sp)
   8ecc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ecc8:	d0a00c17 	ldw	r2,-32720(gp)
   8eccc:	10000326 	beq	r2,zero,8ecdc <alt_get_errno+0x24>
   8ecd0:	d0a00c17 	ldw	r2,-32720(gp)
   8ecd4:	103ee83a 	callr	r2
   8ecd8:	00000106 	br	8ece0 <alt_get_errno+0x28>
   8ecdc:	d0a7fa04 	addi	r2,gp,-24600
}
   8ece0:	e037883a 	mov	sp,fp
   8ece4:	dfc00117 	ldw	ra,4(sp)
   8ece8:	df000017 	ldw	fp,0(sp)
   8ecec:	dec00204 	addi	sp,sp,8
   8ecf0:	f800283a 	ret

0008ecf4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8ecf4:	defff904 	addi	sp,sp,-28
   8ecf8:	dfc00615 	stw	ra,24(sp)
   8ecfc:	df000515 	stw	fp,20(sp)
   8ed00:	df000504 	addi	fp,sp,20
   8ed04:	e13ffd15 	stw	r4,-12(fp)
   8ed08:	e17ffe15 	stw	r5,-8(fp)
   8ed0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ed10:	e0bffd17 	ldw	r2,-12(fp)
   8ed14:	10000616 	blt	r2,zero,8ed30 <write+0x3c>
   8ed18:	e0bffd17 	ldw	r2,-12(fp)
   8ed1c:	10c00324 	muli	r3,r2,12
   8ed20:	00800274 	movhi	r2,9
   8ed24:	108bf004 	addi	r2,r2,12224
   8ed28:	1885883a 	add	r2,r3,r2
   8ed2c:	00000106 	br	8ed34 <write+0x40>
   8ed30:	0005883a 	mov	r2,zero
   8ed34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ed38:	e0bffb17 	ldw	r2,-20(fp)
   8ed3c:	10002126 	beq	r2,zero,8edc4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8ed40:	e0bffb17 	ldw	r2,-20(fp)
   8ed44:	10800217 	ldw	r2,8(r2)
   8ed48:	108000cc 	andi	r2,r2,3
   8ed4c:	10001826 	beq	r2,zero,8edb0 <write+0xbc>
   8ed50:	e0bffb17 	ldw	r2,-20(fp)
   8ed54:	10800017 	ldw	r2,0(r2)
   8ed58:	10800617 	ldw	r2,24(r2)
   8ed5c:	10001426 	beq	r2,zero,8edb0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8ed60:	e0bffb17 	ldw	r2,-20(fp)
   8ed64:	10800017 	ldw	r2,0(r2)
   8ed68:	10800617 	ldw	r2,24(r2)
   8ed6c:	e0ffff17 	ldw	r3,-4(fp)
   8ed70:	180d883a 	mov	r6,r3
   8ed74:	e17ffe17 	ldw	r5,-8(fp)
   8ed78:	e13ffb17 	ldw	r4,-20(fp)
   8ed7c:	103ee83a 	callr	r2
   8ed80:	e0bffc15 	stw	r2,-16(fp)
   8ed84:	e0bffc17 	ldw	r2,-16(fp)
   8ed88:	1000070e 	bge	r2,zero,8eda8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8ed8c:	008ecb80 	call	8ecb8 <alt_get_errno>
   8ed90:	1007883a 	mov	r3,r2
   8ed94:	e0bffc17 	ldw	r2,-16(fp)
   8ed98:	0085c83a 	sub	r2,zero,r2
   8ed9c:	18800015 	stw	r2,0(r3)
        return -1;
   8eda0:	00bfffc4 	movi	r2,-1
   8eda4:	00000c06 	br	8edd8 <write+0xe4>
      }
      return rval;
   8eda8:	e0bffc17 	ldw	r2,-16(fp)
   8edac:	00000a06 	br	8edd8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8edb0:	008ecb80 	call	8ecb8 <alt_get_errno>
   8edb4:	1007883a 	mov	r3,r2
   8edb8:	00800344 	movi	r2,13
   8edbc:	18800015 	stw	r2,0(r3)
   8edc0:	00000406 	br	8edd4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8edc4:	008ecb80 	call	8ecb8 <alt_get_errno>
   8edc8:	1007883a 	mov	r3,r2
   8edcc:	00801444 	movi	r2,81
   8edd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8edd4:	00bfffc4 	movi	r2,-1
}
   8edd8:	e037883a 	mov	sp,fp
   8eddc:	dfc00117 	ldw	ra,4(sp)
   8ede0:	df000017 	ldw	fp,0(sp)
   8ede4:	dec00204 	addi	sp,sp,8
   8ede8:	f800283a 	ret

0008edec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8edec:	defffd04 	addi	sp,sp,-12
   8edf0:	dfc00215 	stw	ra,8(sp)
   8edf4:	df000115 	stw	fp,4(sp)
   8edf8:	df000104 	addi	fp,sp,4
   8edfc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8ee00:	d1600904 	addi	r5,gp,-32732
   8ee04:	e13fff17 	ldw	r4,-4(fp)
   8ee08:	00909b80 	call	909b8 <alt_dev_llist_insert>
}
   8ee0c:	e037883a 	mov	sp,fp
   8ee10:	dfc00117 	ldw	ra,4(sp)
   8ee14:	df000017 	ldw	fp,0(sp)
   8ee18:	dec00204 	addi	sp,sp,8
   8ee1c:	f800283a 	ret

0008ee20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8ee20:	defffd04 	addi	sp,sp,-12
   8ee24:	dfc00215 	stw	ra,8(sp)
   8ee28:	df000115 	stw	fp,4(sp)
   8ee2c:	df000104 	addi	fp,sp,4
   8ee30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   8ee34:	00913b80 	call	913b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8ee38:	00800044 	movi	r2,1
   8ee3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8ee40:	0001883a 	nop
   8ee44:	e037883a 	mov	sp,fp
   8ee48:	dfc00117 	ldw	ra,4(sp)
   8ee4c:	df000017 	ldw	fp,0(sp)
   8ee50:	dec00204 	addi	sp,sp,8
   8ee54:	f800283a 	ret

0008ee58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8ee58:	defffe04 	addi	sp,sp,-8
   8ee5c:	dfc00115 	stw	ra,4(sp)
   8ee60:	df000015 	stw	fp,0(sp)
   8ee64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8ee68:	01c000b4 	movhi	r7,2
   8ee6c:	39e1a804 	addi	r7,r7,-31072
   8ee70:	018000c4 	movi	r6,3
   8ee74:	000b883a 	mov	r5,zero
   8ee78:	01000434 	movhi	r4,16
   8ee7c:	21092004 	addi	r4,r4,9344
   8ee80:	009075c0 	call	9075c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8ee84:	000d883a 	mov	r6,zero
   8ee88:	000b883a 	mov	r5,zero
   8ee8c:	01000274 	movhi	r4,9
   8ee90:	210c5a04 	addi	r4,r4,12648
   8ee94:	008f04c0 	call	8f04c <altera_avalon_jtag_uart_init>
   8ee98:	01000274 	movhi	r4,9
   8ee9c:	210c5004 	addi	r4,r4,12608
   8eea0:	008edec0 	call	8edec <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   8eea4:	01800044 	movi	r6,1
   8eea8:	000b883a 	mov	r5,zero
   8eeac:	01000274 	movhi	r4,9
   8eeb0:	21106804 	addi	r4,r4,16800
   8eeb4:	009063c0 	call	9063c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   8eeb8:	01800084 	movi	r6,2
   8eebc:	000b883a 	mov	r5,zero
   8eec0:	01000274 	movhi	r4,9
   8eec4:	21107404 	addi	r4,r4,16848
   8eec8:	009063c0 	call	9063c <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   8eecc:	0001883a 	nop
}
   8eed0:	0001883a 	nop
   8eed4:	e037883a 	mov	sp,fp
   8eed8:	dfc00117 	ldw	ra,4(sp)
   8eedc:	df000017 	ldw	fp,0(sp)
   8eee0:	dec00204 	addi	sp,sp,8
   8eee4:	f800283a 	ret

0008eee8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8eee8:	defffa04 	addi	sp,sp,-24
   8eeec:	dfc00515 	stw	ra,20(sp)
   8eef0:	df000415 	stw	fp,16(sp)
   8eef4:	df000404 	addi	fp,sp,16
   8eef8:	e13ffd15 	stw	r4,-12(fp)
   8eefc:	e17ffe15 	stw	r5,-8(fp)
   8ef00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ef04:	e0bffd17 	ldw	r2,-12(fp)
   8ef08:	10800017 	ldw	r2,0(r2)
   8ef0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8ef10:	e0bffc17 	ldw	r2,-16(fp)
   8ef14:	10c00a04 	addi	r3,r2,40
   8ef18:	e0bffd17 	ldw	r2,-12(fp)
   8ef1c:	10800217 	ldw	r2,8(r2)
   8ef20:	100f883a 	mov	r7,r2
   8ef24:	e1bfff17 	ldw	r6,-4(fp)
   8ef28:	e17ffe17 	ldw	r5,-8(fp)
   8ef2c:	1809883a 	mov	r4,r3
   8ef30:	008f5100 	call	8f510 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8ef34:	e037883a 	mov	sp,fp
   8ef38:	dfc00117 	ldw	ra,4(sp)
   8ef3c:	df000017 	ldw	fp,0(sp)
   8ef40:	dec00204 	addi	sp,sp,8
   8ef44:	f800283a 	ret

0008ef48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8ef48:	defffa04 	addi	sp,sp,-24
   8ef4c:	dfc00515 	stw	ra,20(sp)
   8ef50:	df000415 	stw	fp,16(sp)
   8ef54:	df000404 	addi	fp,sp,16
   8ef58:	e13ffd15 	stw	r4,-12(fp)
   8ef5c:	e17ffe15 	stw	r5,-8(fp)
   8ef60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ef64:	e0bffd17 	ldw	r2,-12(fp)
   8ef68:	10800017 	ldw	r2,0(r2)
   8ef6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ef70:	e0bffc17 	ldw	r2,-16(fp)
   8ef74:	10c00a04 	addi	r3,r2,40
   8ef78:	e0bffd17 	ldw	r2,-12(fp)
   8ef7c:	10800217 	ldw	r2,8(r2)
   8ef80:	100f883a 	mov	r7,r2
   8ef84:	e1bfff17 	ldw	r6,-4(fp)
   8ef88:	e17ffe17 	ldw	r5,-8(fp)
   8ef8c:	1809883a 	mov	r4,r3
   8ef90:	008f72c0 	call	8f72c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8ef94:	e037883a 	mov	sp,fp
   8ef98:	dfc00117 	ldw	ra,4(sp)
   8ef9c:	df000017 	ldw	fp,0(sp)
   8efa0:	dec00204 	addi	sp,sp,8
   8efa4:	f800283a 	ret

0008efa8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8efa8:	defffc04 	addi	sp,sp,-16
   8efac:	dfc00315 	stw	ra,12(sp)
   8efb0:	df000215 	stw	fp,8(sp)
   8efb4:	df000204 	addi	fp,sp,8
   8efb8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8efbc:	e0bfff17 	ldw	r2,-4(fp)
   8efc0:	10800017 	ldw	r2,0(r2)
   8efc4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8efc8:	e0bffe17 	ldw	r2,-8(fp)
   8efcc:	10c00a04 	addi	r3,r2,40
   8efd0:	e0bfff17 	ldw	r2,-4(fp)
   8efd4:	10800217 	ldw	r2,8(r2)
   8efd8:	100b883a 	mov	r5,r2
   8efdc:	1809883a 	mov	r4,r3
   8efe0:	008f3b80 	call	8f3b8 <altera_avalon_jtag_uart_close>
}
   8efe4:	e037883a 	mov	sp,fp
   8efe8:	dfc00117 	ldw	ra,4(sp)
   8efec:	df000017 	ldw	fp,0(sp)
   8eff0:	dec00204 	addi	sp,sp,8
   8eff4:	f800283a 	ret

0008eff8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8eff8:	defffa04 	addi	sp,sp,-24
   8effc:	dfc00515 	stw	ra,20(sp)
   8f000:	df000415 	stw	fp,16(sp)
   8f004:	df000404 	addi	fp,sp,16
   8f008:	e13ffd15 	stw	r4,-12(fp)
   8f00c:	e17ffe15 	stw	r5,-8(fp)
   8f010:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f014:	e0bffd17 	ldw	r2,-12(fp)
   8f018:	10800017 	ldw	r2,0(r2)
   8f01c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f020:	e0bffc17 	ldw	r2,-16(fp)
   8f024:	10800a04 	addi	r2,r2,40
   8f028:	e1bfff17 	ldw	r6,-4(fp)
   8f02c:	e17ffe17 	ldw	r5,-8(fp)
   8f030:	1009883a 	mov	r4,r2
   8f034:	008f4200 	call	8f420 <altera_avalon_jtag_uart_ioctl>
}
   8f038:	e037883a 	mov	sp,fp
   8f03c:	dfc00117 	ldw	ra,4(sp)
   8f040:	df000017 	ldw	fp,0(sp)
   8f044:	dec00204 	addi	sp,sp,8
   8f048:	f800283a 	ret

0008f04c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f04c:	defffa04 	addi	sp,sp,-24
   8f050:	dfc00515 	stw	ra,20(sp)
   8f054:	df000415 	stw	fp,16(sp)
   8f058:	df000404 	addi	fp,sp,16
   8f05c:	e13ffd15 	stw	r4,-12(fp)
   8f060:	e17ffe15 	stw	r5,-8(fp)
   8f064:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f068:	e0bffd17 	ldw	r2,-12(fp)
   8f06c:	00c00044 	movi	r3,1
   8f070:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f074:	e0bffd17 	ldw	r2,-12(fp)
   8f078:	10800017 	ldw	r2,0(r2)
   8f07c:	10800104 	addi	r2,r2,4
   8f080:	1007883a 	mov	r3,r2
   8f084:	e0bffd17 	ldw	r2,-12(fp)
   8f088:	10800817 	ldw	r2,32(r2)
   8f08c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f090:	e0bffe17 	ldw	r2,-8(fp)
   8f094:	e0ffff17 	ldw	r3,-4(fp)
   8f098:	d8000015 	stw	zero,0(sp)
   8f09c:	e1fffd17 	ldw	r7,-12(fp)
   8f0a0:	01800274 	movhi	r6,9
   8f0a4:	31bc4304 	addi	r6,r6,-3828
   8f0a8:	180b883a 	mov	r5,r3
   8f0ac:	1009883a 	mov	r4,r2
   8f0b0:	0090be00 	call	90be0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f0b4:	e0bffd17 	ldw	r2,-12(fp)
   8f0b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f0bc:	e0bffd17 	ldw	r2,-12(fp)
   8f0c0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f0c4:	d0e80217 	ldw	r3,-24568(gp)
   8f0c8:	e1fffd17 	ldw	r7,-12(fp)
   8f0cc:	01800274 	movhi	r6,9
   8f0d0:	31bcc604 	addi	r6,r6,-3304
   8f0d4:	180b883a 	mov	r5,r3
   8f0d8:	1009883a 	mov	r4,r2
   8f0dc:	00907d80 	call	907d8 <alt_alarm_start>
   8f0e0:	1000040e 	bge	r2,zero,8f0f4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f0e4:	e0fffd17 	ldw	r3,-12(fp)
   8f0e8:	00a00034 	movhi	r2,32768
   8f0ec:	10bfffc4 	addi	r2,r2,-1
   8f0f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f0f4:	0001883a 	nop
   8f0f8:	e037883a 	mov	sp,fp
   8f0fc:	dfc00117 	ldw	ra,4(sp)
   8f100:	df000017 	ldw	fp,0(sp)
   8f104:	dec00204 	addi	sp,sp,8
   8f108:	f800283a 	ret

0008f10c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f10c:	defff804 	addi	sp,sp,-32
   8f110:	df000715 	stw	fp,28(sp)
   8f114:	df000704 	addi	fp,sp,28
   8f118:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f11c:	e0bfff17 	ldw	r2,-4(fp)
   8f120:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f124:	e0bffb17 	ldw	r2,-20(fp)
   8f128:	10800017 	ldw	r2,0(r2)
   8f12c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f130:	e0bffc17 	ldw	r2,-16(fp)
   8f134:	10800104 	addi	r2,r2,4
   8f138:	10800037 	ldwio	r2,0(r2)
   8f13c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f140:	e0bffd17 	ldw	r2,-12(fp)
   8f144:	1080c00c 	andi	r2,r2,768
   8f148:	10006d26 	beq	r2,zero,8f300 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f14c:	e0bffd17 	ldw	r2,-12(fp)
   8f150:	1080400c 	andi	r2,r2,256
   8f154:	10003526 	beq	r2,zero,8f22c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f158:	00800074 	movhi	r2,1
   8f15c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f160:	e0bffb17 	ldw	r2,-20(fp)
   8f164:	10800a17 	ldw	r2,40(r2)
   8f168:	10800044 	addi	r2,r2,1
   8f16c:	1081ffcc 	andi	r2,r2,2047
   8f170:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f174:	e0bffb17 	ldw	r2,-20(fp)
   8f178:	10c00b17 	ldw	r3,44(r2)
   8f17c:	e0bffe17 	ldw	r2,-8(fp)
   8f180:	18801526 	beq	r3,r2,8f1d8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f184:	e0bffc17 	ldw	r2,-16(fp)
   8f188:	10800037 	ldwio	r2,0(r2)
   8f18c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f190:	e0bff917 	ldw	r2,-28(fp)
   8f194:	10a0000c 	andi	r2,r2,32768
   8f198:	10001126 	beq	r2,zero,8f1e0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f19c:	e0bffb17 	ldw	r2,-20(fp)
   8f1a0:	10800a17 	ldw	r2,40(r2)
   8f1a4:	e0fff917 	ldw	r3,-28(fp)
   8f1a8:	1809883a 	mov	r4,r3
   8f1ac:	e0fffb17 	ldw	r3,-20(fp)
   8f1b0:	1885883a 	add	r2,r3,r2
   8f1b4:	10800e04 	addi	r2,r2,56
   8f1b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f1bc:	e0bffb17 	ldw	r2,-20(fp)
   8f1c0:	10800a17 	ldw	r2,40(r2)
   8f1c4:	10800044 	addi	r2,r2,1
   8f1c8:	10c1ffcc 	andi	r3,r2,2047
   8f1cc:	e0bffb17 	ldw	r2,-20(fp)
   8f1d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f1d4:	003fe206 	br	8f160 <rx_descriptor_end+0xfff8f100>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f1d8:	0001883a 	nop
   8f1dc:	00000106 	br	8f1e4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f1e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f1e4:	e0bff917 	ldw	r2,-28(fp)
   8f1e8:	10bfffec 	andhi	r2,r2,65535
   8f1ec:	10000f26 	beq	r2,zero,8f22c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f1f0:	e0bffb17 	ldw	r2,-20(fp)
   8f1f4:	10c00817 	ldw	r3,32(r2)
   8f1f8:	00bfff84 	movi	r2,-2
   8f1fc:	1886703a 	and	r3,r3,r2
   8f200:	e0bffb17 	ldw	r2,-20(fp)
   8f204:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f208:	e0bffc17 	ldw	r2,-16(fp)
   8f20c:	10800104 	addi	r2,r2,4
   8f210:	1007883a 	mov	r3,r2
   8f214:	e0bffb17 	ldw	r2,-20(fp)
   8f218:	10800817 	ldw	r2,32(r2)
   8f21c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f220:	e0bffc17 	ldw	r2,-16(fp)
   8f224:	10800104 	addi	r2,r2,4
   8f228:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f22c:	e0bffd17 	ldw	r2,-12(fp)
   8f230:	1080800c 	andi	r2,r2,512
   8f234:	103fbe26 	beq	r2,zero,8f130 <rx_descriptor_end+0xfff8f0d0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f238:	e0bffd17 	ldw	r2,-12(fp)
   8f23c:	1004d43a 	srli	r2,r2,16
   8f240:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f244:	00001406 	br	8f298 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f248:	e0bffc17 	ldw	r2,-16(fp)
   8f24c:	e0fffb17 	ldw	r3,-20(fp)
   8f250:	18c00d17 	ldw	r3,52(r3)
   8f254:	e13ffb17 	ldw	r4,-20(fp)
   8f258:	20c7883a 	add	r3,r4,r3
   8f25c:	18c20e04 	addi	r3,r3,2104
   8f260:	18c00003 	ldbu	r3,0(r3)
   8f264:	18c03fcc 	andi	r3,r3,255
   8f268:	18c0201c 	xori	r3,r3,128
   8f26c:	18ffe004 	addi	r3,r3,-128
   8f270:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f274:	e0bffb17 	ldw	r2,-20(fp)
   8f278:	10800d17 	ldw	r2,52(r2)
   8f27c:	10800044 	addi	r2,r2,1
   8f280:	10c1ffcc 	andi	r3,r2,2047
   8f284:	e0bffb17 	ldw	r2,-20(fp)
   8f288:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f28c:	e0bffa17 	ldw	r2,-24(fp)
   8f290:	10bfffc4 	addi	r2,r2,-1
   8f294:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f298:	e0bffa17 	ldw	r2,-24(fp)
   8f29c:	10000526 	beq	r2,zero,8f2b4 <altera_avalon_jtag_uart_irq+0x1a8>
   8f2a0:	e0bffb17 	ldw	r2,-20(fp)
   8f2a4:	10c00d17 	ldw	r3,52(r2)
   8f2a8:	e0bffb17 	ldw	r2,-20(fp)
   8f2ac:	10800c17 	ldw	r2,48(r2)
   8f2b0:	18bfe51e 	bne	r3,r2,8f248 <rx_descriptor_end+0xfff8f1e8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f2b4:	e0bffa17 	ldw	r2,-24(fp)
   8f2b8:	103f9d26 	beq	r2,zero,8f130 <rx_descriptor_end+0xfff8f0d0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f2bc:	e0bffb17 	ldw	r2,-20(fp)
   8f2c0:	10c00817 	ldw	r3,32(r2)
   8f2c4:	00bfff44 	movi	r2,-3
   8f2c8:	1886703a 	and	r3,r3,r2
   8f2cc:	e0bffb17 	ldw	r2,-20(fp)
   8f2d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f2d4:	e0bffb17 	ldw	r2,-20(fp)
   8f2d8:	10800017 	ldw	r2,0(r2)
   8f2dc:	10800104 	addi	r2,r2,4
   8f2e0:	1007883a 	mov	r3,r2
   8f2e4:	e0bffb17 	ldw	r2,-20(fp)
   8f2e8:	10800817 	ldw	r2,32(r2)
   8f2ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f2f0:	e0bffc17 	ldw	r2,-16(fp)
   8f2f4:	10800104 	addi	r2,r2,4
   8f2f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f2fc:	003f8c06 	br	8f130 <rx_descriptor_end+0xfff8f0d0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f300:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f304:	0001883a 	nop
   8f308:	e037883a 	mov	sp,fp
   8f30c:	df000017 	ldw	fp,0(sp)
   8f310:	dec00104 	addi	sp,sp,4
   8f314:	f800283a 	ret

0008f318 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f318:	defff804 	addi	sp,sp,-32
   8f31c:	df000715 	stw	fp,28(sp)
   8f320:	df000704 	addi	fp,sp,28
   8f324:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f328:	e0bffb17 	ldw	r2,-20(fp)
   8f32c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f330:	e0bff917 	ldw	r2,-28(fp)
   8f334:	10800017 	ldw	r2,0(r2)
   8f338:	10800104 	addi	r2,r2,4
   8f33c:	10800037 	ldwio	r2,0(r2)
   8f340:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f344:	e0bffa17 	ldw	r2,-24(fp)
   8f348:	1081000c 	andi	r2,r2,1024
   8f34c:	10000b26 	beq	r2,zero,8f37c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f350:	e0bff917 	ldw	r2,-28(fp)
   8f354:	10800017 	ldw	r2,0(r2)
   8f358:	10800104 	addi	r2,r2,4
   8f35c:	1007883a 	mov	r3,r2
   8f360:	e0bff917 	ldw	r2,-28(fp)
   8f364:	10800817 	ldw	r2,32(r2)
   8f368:	10810014 	ori	r2,r2,1024
   8f36c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f370:	e0bff917 	ldw	r2,-28(fp)
   8f374:	10000915 	stw	zero,36(r2)
   8f378:	00000a06 	br	8f3a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f37c:	e0bff917 	ldw	r2,-28(fp)
   8f380:	10c00917 	ldw	r3,36(r2)
   8f384:	00a00034 	movhi	r2,32768
   8f388:	10bfff04 	addi	r2,r2,-4
   8f38c:	10c00536 	bltu	r2,r3,8f3a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f390:	e0bff917 	ldw	r2,-28(fp)
   8f394:	10800917 	ldw	r2,36(r2)
   8f398:	10c00044 	addi	r3,r2,1
   8f39c:	e0bff917 	ldw	r2,-28(fp)
   8f3a0:	10c00915 	stw	r3,36(r2)
   8f3a4:	d0a80217 	ldw	r2,-24568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f3a8:	e037883a 	mov	sp,fp
   8f3ac:	df000017 	ldw	fp,0(sp)
   8f3b0:	dec00104 	addi	sp,sp,4
   8f3b4:	f800283a 	ret

0008f3b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f3b8:	defffd04 	addi	sp,sp,-12
   8f3bc:	df000215 	stw	fp,8(sp)
   8f3c0:	df000204 	addi	fp,sp,8
   8f3c4:	e13ffe15 	stw	r4,-8(fp)
   8f3c8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f3cc:	00000506 	br	8f3e4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f3d0:	e0bfff17 	ldw	r2,-4(fp)
   8f3d4:	1090000c 	andi	r2,r2,16384
   8f3d8:	10000226 	beq	r2,zero,8f3e4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f3dc:	00bffd44 	movi	r2,-11
   8f3e0:	00000b06 	br	8f410 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f3e4:	e0bffe17 	ldw	r2,-8(fp)
   8f3e8:	10c00d17 	ldw	r3,52(r2)
   8f3ec:	e0bffe17 	ldw	r2,-8(fp)
   8f3f0:	10800c17 	ldw	r2,48(r2)
   8f3f4:	18800526 	beq	r3,r2,8f40c <altera_avalon_jtag_uart_close+0x54>
   8f3f8:	e0bffe17 	ldw	r2,-8(fp)
   8f3fc:	10c00917 	ldw	r3,36(r2)
   8f400:	e0bffe17 	ldw	r2,-8(fp)
   8f404:	10800117 	ldw	r2,4(r2)
   8f408:	18bff136 	bltu	r3,r2,8f3d0 <rx_descriptor_end+0xfff8f370>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f40c:	0005883a 	mov	r2,zero
}
   8f410:	e037883a 	mov	sp,fp
   8f414:	df000017 	ldw	fp,0(sp)
   8f418:	dec00104 	addi	sp,sp,4
   8f41c:	f800283a 	ret

0008f420 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f420:	defffa04 	addi	sp,sp,-24
   8f424:	df000515 	stw	fp,20(sp)
   8f428:	df000504 	addi	fp,sp,20
   8f42c:	e13ffd15 	stw	r4,-12(fp)
   8f430:	e17ffe15 	stw	r5,-8(fp)
   8f434:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f438:	00bff9c4 	movi	r2,-25
   8f43c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f440:	e0bffe17 	ldw	r2,-8(fp)
   8f444:	10da8060 	cmpeqi	r3,r2,27137
   8f448:	1800031e 	bne	r3,zero,8f458 <altera_avalon_jtag_uart_ioctl+0x38>
   8f44c:	109a80a0 	cmpeqi	r2,r2,27138
   8f450:	1000181e 	bne	r2,zero,8f4b4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f454:	00002906 	br	8f4fc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f458:	e0bffd17 	ldw	r2,-12(fp)
   8f45c:	10c00117 	ldw	r3,4(r2)
   8f460:	00a00034 	movhi	r2,32768
   8f464:	10bfffc4 	addi	r2,r2,-1
   8f468:	18802126 	beq	r3,r2,8f4f0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f46c:	e0bfff17 	ldw	r2,-4(fp)
   8f470:	10800017 	ldw	r2,0(r2)
   8f474:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f478:	e0bffc17 	ldw	r2,-16(fp)
   8f47c:	10800090 	cmplti	r2,r2,2
   8f480:	1000061e 	bne	r2,zero,8f49c <altera_avalon_jtag_uart_ioctl+0x7c>
   8f484:	e0fffc17 	ldw	r3,-16(fp)
   8f488:	00a00034 	movhi	r2,32768
   8f48c:	10bfffc4 	addi	r2,r2,-1
   8f490:	18800226 	beq	r3,r2,8f49c <altera_avalon_jtag_uart_ioctl+0x7c>
   8f494:	e0bffc17 	ldw	r2,-16(fp)
   8f498:	00000206 	br	8f4a4 <altera_avalon_jtag_uart_ioctl+0x84>
   8f49c:	00a00034 	movhi	r2,32768
   8f4a0:	10bfff84 	addi	r2,r2,-2
   8f4a4:	e0fffd17 	ldw	r3,-12(fp)
   8f4a8:	18800115 	stw	r2,4(r3)
      rc = 0;
   8f4ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f4b0:	00000f06 	br	8f4f0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8f4b4:	e0bffd17 	ldw	r2,-12(fp)
   8f4b8:	10c00117 	ldw	r3,4(r2)
   8f4bc:	00a00034 	movhi	r2,32768
   8f4c0:	10bfffc4 	addi	r2,r2,-1
   8f4c4:	18800c26 	beq	r3,r2,8f4f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8f4c8:	e0bffd17 	ldw	r2,-12(fp)
   8f4cc:	10c00917 	ldw	r3,36(r2)
   8f4d0:	e0bffd17 	ldw	r2,-12(fp)
   8f4d4:	10800117 	ldw	r2,4(r2)
   8f4d8:	1885803a 	cmpltu	r2,r3,r2
   8f4dc:	10c03fcc 	andi	r3,r2,255
   8f4e0:	e0bfff17 	ldw	r2,-4(fp)
   8f4e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8f4e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f4ec:	00000206 	br	8f4f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8f4f0:	0001883a 	nop
   8f4f4:	00000106 	br	8f4fc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8f4f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8f4fc:	e0bffb17 	ldw	r2,-20(fp)
}
   8f500:	e037883a 	mov	sp,fp
   8f504:	df000017 	ldw	fp,0(sp)
   8f508:	dec00104 	addi	sp,sp,4
   8f50c:	f800283a 	ret

0008f510 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f510:	defff304 	addi	sp,sp,-52
   8f514:	dfc00c15 	stw	ra,48(sp)
   8f518:	df000b15 	stw	fp,44(sp)
   8f51c:	df000b04 	addi	fp,sp,44
   8f520:	e13ffc15 	stw	r4,-16(fp)
   8f524:	e17ffd15 	stw	r5,-12(fp)
   8f528:	e1bffe15 	stw	r6,-8(fp)
   8f52c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8f530:	e0bffd17 	ldw	r2,-12(fp)
   8f534:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f538:	00004706 	br	8f658 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f53c:	e0bffc17 	ldw	r2,-16(fp)
   8f540:	10800a17 	ldw	r2,40(r2)
   8f544:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f548:	e0bffc17 	ldw	r2,-16(fp)
   8f54c:	10800b17 	ldw	r2,44(r2)
   8f550:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8f554:	e0fff717 	ldw	r3,-36(fp)
   8f558:	e0bff817 	ldw	r2,-32(fp)
   8f55c:	18800536 	bltu	r3,r2,8f574 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f560:	e0fff717 	ldw	r3,-36(fp)
   8f564:	e0bff817 	ldw	r2,-32(fp)
   8f568:	1885c83a 	sub	r2,r3,r2
   8f56c:	e0bff615 	stw	r2,-40(fp)
   8f570:	00000406 	br	8f584 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8f574:	00c20004 	movi	r3,2048
   8f578:	e0bff817 	ldw	r2,-32(fp)
   8f57c:	1885c83a 	sub	r2,r3,r2
   8f580:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f584:	e0bff617 	ldw	r2,-40(fp)
   8f588:	10001e26 	beq	r2,zero,8f604 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8f58c:	e0fffe17 	ldw	r3,-8(fp)
   8f590:	e0bff617 	ldw	r2,-40(fp)
   8f594:	1880022e 	bgeu	r3,r2,8f5a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8f598:	e0bffe17 	ldw	r2,-8(fp)
   8f59c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8f5a0:	e0bffc17 	ldw	r2,-16(fp)
   8f5a4:	10c00e04 	addi	r3,r2,56
   8f5a8:	e0bff817 	ldw	r2,-32(fp)
   8f5ac:	1885883a 	add	r2,r3,r2
   8f5b0:	e1bff617 	ldw	r6,-40(fp)
   8f5b4:	100b883a 	mov	r5,r2
   8f5b8:	e13ff517 	ldw	r4,-44(fp)
   8f5bc:	008747c0 	call	8747c <memcpy>
      ptr   += n;
   8f5c0:	e0fff517 	ldw	r3,-44(fp)
   8f5c4:	e0bff617 	ldw	r2,-40(fp)
   8f5c8:	1885883a 	add	r2,r3,r2
   8f5cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8f5d0:	e0fffe17 	ldw	r3,-8(fp)
   8f5d4:	e0bff617 	ldw	r2,-40(fp)
   8f5d8:	1885c83a 	sub	r2,r3,r2
   8f5dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f5e0:	e0fff817 	ldw	r3,-32(fp)
   8f5e4:	e0bff617 	ldw	r2,-40(fp)
   8f5e8:	1885883a 	add	r2,r3,r2
   8f5ec:	10c1ffcc 	andi	r3,r2,2047
   8f5f0:	e0bffc17 	ldw	r2,-16(fp)
   8f5f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8f5f8:	e0bffe17 	ldw	r2,-8(fp)
   8f5fc:	00bfcf16 	blt	zero,r2,8f53c <rx_descriptor_end+0xfff8f4dc>
   8f600:	00000106 	br	8f608 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8f604:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8f608:	e0fff517 	ldw	r3,-44(fp)
   8f60c:	e0bffd17 	ldw	r2,-12(fp)
   8f610:	1880141e 	bne	r3,r2,8f664 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8f614:	e0bfff17 	ldw	r2,-4(fp)
   8f618:	1090000c 	andi	r2,r2,16384
   8f61c:	1000131e 	bne	r2,zero,8f66c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8f620:	0001883a 	nop
   8f624:	e0bffc17 	ldw	r2,-16(fp)
   8f628:	10c00a17 	ldw	r3,40(r2)
   8f62c:	e0bff717 	ldw	r2,-36(fp)
   8f630:	1880051e 	bne	r3,r2,8f648 <altera_avalon_jtag_uart_read+0x138>
   8f634:	e0bffc17 	ldw	r2,-16(fp)
   8f638:	10c00917 	ldw	r3,36(r2)
   8f63c:	e0bffc17 	ldw	r2,-16(fp)
   8f640:	10800117 	ldw	r2,4(r2)
   8f644:	18bff736 	bltu	r3,r2,8f624 <rx_descriptor_end+0xfff8f5c4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8f648:	e0bffc17 	ldw	r2,-16(fp)
   8f64c:	10c00a17 	ldw	r3,40(r2)
   8f650:	e0bff717 	ldw	r2,-36(fp)
   8f654:	18800726 	beq	r3,r2,8f674 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f658:	e0bffe17 	ldw	r2,-8(fp)
   8f65c:	00bfb716 	blt	zero,r2,8f53c <rx_descriptor_end+0xfff8f4dc>
   8f660:	00000506 	br	8f678 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8f664:	0001883a 	nop
   8f668:	00000306 	br	8f678 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8f66c:	0001883a 	nop
   8f670:	00000106 	br	8f678 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8f674:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8f678:	e0fff517 	ldw	r3,-44(fp)
   8f67c:	e0bffd17 	ldw	r2,-12(fp)
   8f680:	18801826 	beq	r3,r2,8f6e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f684:	0005303a 	rdctl	r2,status
   8f688:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f68c:	e0fffb17 	ldw	r3,-20(fp)
   8f690:	00bfff84 	movi	r2,-2
   8f694:	1884703a 	and	r2,r3,r2
   8f698:	1001703a 	wrctl	status,r2
  
  return context;
   8f69c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8f6a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f6a4:	e0bffc17 	ldw	r2,-16(fp)
   8f6a8:	10800817 	ldw	r2,32(r2)
   8f6ac:	10c00054 	ori	r3,r2,1
   8f6b0:	e0bffc17 	ldw	r2,-16(fp)
   8f6b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f6b8:	e0bffc17 	ldw	r2,-16(fp)
   8f6bc:	10800017 	ldw	r2,0(r2)
   8f6c0:	10800104 	addi	r2,r2,4
   8f6c4:	1007883a 	mov	r3,r2
   8f6c8:	e0bffc17 	ldw	r2,-16(fp)
   8f6cc:	10800817 	ldw	r2,32(r2)
   8f6d0:	18800035 	stwio	r2,0(r3)
   8f6d4:	e0bffa17 	ldw	r2,-24(fp)
   8f6d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f6dc:	e0bff917 	ldw	r2,-28(fp)
   8f6e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8f6e4:	e0fff517 	ldw	r3,-44(fp)
   8f6e8:	e0bffd17 	ldw	r2,-12(fp)
   8f6ec:	18800426 	beq	r3,r2,8f700 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8f6f0:	e0fff517 	ldw	r3,-44(fp)
   8f6f4:	e0bffd17 	ldw	r2,-12(fp)
   8f6f8:	1885c83a 	sub	r2,r3,r2
   8f6fc:	00000606 	br	8f718 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8f700:	e0bfff17 	ldw	r2,-4(fp)
   8f704:	1090000c 	andi	r2,r2,16384
   8f708:	10000226 	beq	r2,zero,8f714 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8f70c:	00bffd44 	movi	r2,-11
   8f710:	00000106 	br	8f718 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8f714:	00bffec4 	movi	r2,-5
}
   8f718:	e037883a 	mov	sp,fp
   8f71c:	dfc00117 	ldw	ra,4(sp)
   8f720:	df000017 	ldw	fp,0(sp)
   8f724:	dec00204 	addi	sp,sp,8
   8f728:	f800283a 	ret

0008f72c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8f72c:	defff304 	addi	sp,sp,-52
   8f730:	dfc00c15 	stw	ra,48(sp)
   8f734:	df000b15 	stw	fp,44(sp)
   8f738:	df000b04 	addi	fp,sp,44
   8f73c:	e13ffc15 	stw	r4,-16(fp)
   8f740:	e17ffd15 	stw	r5,-12(fp)
   8f744:	e1bffe15 	stw	r6,-8(fp)
   8f748:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8f74c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8f750:	e0bffd17 	ldw	r2,-12(fp)
   8f754:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f758:	00003706 	br	8f838 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8f75c:	e0bffc17 	ldw	r2,-16(fp)
   8f760:	10800c17 	ldw	r2,48(r2)
   8f764:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8f768:	e0bffc17 	ldw	r2,-16(fp)
   8f76c:	10800d17 	ldw	r2,52(r2)
   8f770:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8f774:	e0fff917 	ldw	r3,-28(fp)
   8f778:	e0bff517 	ldw	r2,-44(fp)
   8f77c:	1880062e 	bgeu	r3,r2,8f798 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8f780:	e0fff517 	ldw	r3,-44(fp)
   8f784:	e0bff917 	ldw	r2,-28(fp)
   8f788:	1885c83a 	sub	r2,r3,r2
   8f78c:	10bfffc4 	addi	r2,r2,-1
   8f790:	e0bff615 	stw	r2,-40(fp)
   8f794:	00000b06 	br	8f7c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8f798:	e0bff517 	ldw	r2,-44(fp)
   8f79c:	10000526 	beq	r2,zero,8f7b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8f7a0:	00c20004 	movi	r3,2048
   8f7a4:	e0bff917 	ldw	r2,-28(fp)
   8f7a8:	1885c83a 	sub	r2,r3,r2
   8f7ac:	e0bff615 	stw	r2,-40(fp)
   8f7b0:	00000406 	br	8f7c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8f7b4:	00c1ffc4 	movi	r3,2047
   8f7b8:	e0bff917 	ldw	r2,-28(fp)
   8f7bc:	1885c83a 	sub	r2,r3,r2
   8f7c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f7c4:	e0bff617 	ldw	r2,-40(fp)
   8f7c8:	10001e26 	beq	r2,zero,8f844 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8f7cc:	e0fffe17 	ldw	r3,-8(fp)
   8f7d0:	e0bff617 	ldw	r2,-40(fp)
   8f7d4:	1880022e 	bgeu	r3,r2,8f7e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8f7d8:	e0bffe17 	ldw	r2,-8(fp)
   8f7dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8f7e0:	e0bffc17 	ldw	r2,-16(fp)
   8f7e4:	10c20e04 	addi	r3,r2,2104
   8f7e8:	e0bff917 	ldw	r2,-28(fp)
   8f7ec:	1885883a 	add	r2,r3,r2
   8f7f0:	e1bff617 	ldw	r6,-40(fp)
   8f7f4:	e17ffd17 	ldw	r5,-12(fp)
   8f7f8:	1009883a 	mov	r4,r2
   8f7fc:	008747c0 	call	8747c <memcpy>
      ptr   += n;
   8f800:	e0fffd17 	ldw	r3,-12(fp)
   8f804:	e0bff617 	ldw	r2,-40(fp)
   8f808:	1885883a 	add	r2,r3,r2
   8f80c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8f810:	e0fffe17 	ldw	r3,-8(fp)
   8f814:	e0bff617 	ldw	r2,-40(fp)
   8f818:	1885c83a 	sub	r2,r3,r2
   8f81c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f820:	e0fff917 	ldw	r3,-28(fp)
   8f824:	e0bff617 	ldw	r2,-40(fp)
   8f828:	1885883a 	add	r2,r3,r2
   8f82c:	10c1ffcc 	andi	r3,r2,2047
   8f830:	e0bffc17 	ldw	r2,-16(fp)
   8f834:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f838:	e0bffe17 	ldw	r2,-8(fp)
   8f83c:	00bfc716 	blt	zero,r2,8f75c <rx_descriptor_end+0xfff8f6fc>
   8f840:	00000106 	br	8f848 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8f844:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f848:	0005303a 	rdctl	r2,status
   8f84c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f850:	e0fffb17 	ldw	r3,-20(fp)
   8f854:	00bfff84 	movi	r2,-2
   8f858:	1884703a 	and	r2,r3,r2
   8f85c:	1001703a 	wrctl	status,r2
  
  return context;
   8f860:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8f864:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f868:	e0bffc17 	ldw	r2,-16(fp)
   8f86c:	10800817 	ldw	r2,32(r2)
   8f870:	10c00094 	ori	r3,r2,2
   8f874:	e0bffc17 	ldw	r2,-16(fp)
   8f878:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f87c:	e0bffc17 	ldw	r2,-16(fp)
   8f880:	10800017 	ldw	r2,0(r2)
   8f884:	10800104 	addi	r2,r2,4
   8f888:	1007883a 	mov	r3,r2
   8f88c:	e0bffc17 	ldw	r2,-16(fp)
   8f890:	10800817 	ldw	r2,32(r2)
   8f894:	18800035 	stwio	r2,0(r3)
   8f898:	e0bffa17 	ldw	r2,-24(fp)
   8f89c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f8a0:	e0bff817 	ldw	r2,-32(fp)
   8f8a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8f8a8:	e0bffe17 	ldw	r2,-8(fp)
   8f8ac:	0080100e 	bge	zero,r2,8f8f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8f8b0:	e0bfff17 	ldw	r2,-4(fp)
   8f8b4:	1090000c 	andi	r2,r2,16384
   8f8b8:	1000101e 	bne	r2,zero,8f8fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8f8bc:	0001883a 	nop
   8f8c0:	e0bffc17 	ldw	r2,-16(fp)
   8f8c4:	10c00d17 	ldw	r3,52(r2)
   8f8c8:	e0bff517 	ldw	r2,-44(fp)
   8f8cc:	1880051e 	bne	r3,r2,8f8e4 <altera_avalon_jtag_uart_write+0x1b8>
   8f8d0:	e0bffc17 	ldw	r2,-16(fp)
   8f8d4:	10c00917 	ldw	r3,36(r2)
   8f8d8:	e0bffc17 	ldw	r2,-16(fp)
   8f8dc:	10800117 	ldw	r2,4(r2)
   8f8e0:	18bff736 	bltu	r3,r2,8f8c0 <rx_descriptor_end+0xfff8f860>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8f8e4:	e0bffc17 	ldw	r2,-16(fp)
   8f8e8:	10800917 	ldw	r2,36(r2)
   8f8ec:	1000051e 	bne	r2,zero,8f904 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8f8f0:	e0bffe17 	ldw	r2,-8(fp)
   8f8f4:	00bfd016 	blt	zero,r2,8f838 <rx_descriptor_end+0xfff8f7d8>
   8f8f8:	00000306 	br	8f908 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8f8fc:	0001883a 	nop
   8f900:	00000106 	br	8f908 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8f904:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8f908:	e0fffd17 	ldw	r3,-12(fp)
   8f90c:	e0bff717 	ldw	r2,-36(fp)
   8f910:	18800426 	beq	r3,r2,8f924 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8f914:	e0fffd17 	ldw	r3,-12(fp)
   8f918:	e0bff717 	ldw	r2,-36(fp)
   8f91c:	1885c83a 	sub	r2,r3,r2
   8f920:	00000606 	br	8f93c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8f924:	e0bfff17 	ldw	r2,-4(fp)
   8f928:	1090000c 	andi	r2,r2,16384
   8f92c:	10000226 	beq	r2,zero,8f938 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8f930:	00bffd44 	movi	r2,-11
   8f934:	00000106 	br	8f93c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8f938:	00bffec4 	movi	r2,-5
}
   8f93c:	e037883a 	mov	sp,fp
   8f940:	dfc00117 	ldw	ra,4(sp)
   8f944:	df000017 	ldw	fp,0(sp)
   8f948:	dec00204 	addi	sp,sp,8
   8f94c:	f800283a 	ret

0008f950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f950:	defffe04 	addi	sp,sp,-8
   8f954:	dfc00115 	stw	ra,4(sp)
   8f958:	df000015 	stw	fp,0(sp)
   8f95c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f960:	d0a00c17 	ldw	r2,-32720(gp)
   8f964:	10000326 	beq	r2,zero,8f974 <alt_get_errno+0x24>
   8f968:	d0a00c17 	ldw	r2,-32720(gp)
   8f96c:	103ee83a 	callr	r2
   8f970:	00000106 	br	8f978 <alt_get_errno+0x28>
   8f974:	d0a7fa04 	addi	r2,gp,-24600
}
   8f978:	e037883a 	mov	sp,fp
   8f97c:	dfc00117 	ldw	ra,4(sp)
   8f980:	df000017 	ldw	fp,0(sp)
   8f984:	dec00204 	addi	sp,sp,8
   8f988:	f800283a 	ret

0008f98c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   8f98c:	defffc04 	addi	sp,sp,-16
   8f990:	df000315 	stw	fp,12(sp)
   8f994:	df000304 	addi	fp,sp,12
   8f998:	e13ffe15 	stw	r4,-8(fp)
   8f99c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8f9a0:	e0bffe17 	ldw	r2,-8(fp)
   8f9a4:	10800317 	ldw	r2,12(r2)
   8f9a8:	10800037 	ldwio	r2,0(r2)
   8f9ac:	1080040c 	andi	r2,r2,16
   8f9b0:	10000226 	beq	r2,zero,8f9bc <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   8f9b4:	00bffc04 	movi	r2,-16
   8f9b8:	00003906 	br	8faa0 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8f9bc:	e0bffe17 	ldw	r2,-8(fp)
   8f9c0:	10800317 	ldw	r2,12(r2)
   8f9c4:	10800404 	addi	r2,r2,16
   8f9c8:	e0fffe17 	ldw	r3,-8(fp)
   8f9cc:	18c00317 	ldw	r3,12(r3)
   8f9d0:	18c00404 	addi	r3,r3,16
   8f9d4:	19000037 	ldwio	r4,0(r3)
   8f9d8:	00fff7c4 	movi	r3,-33
   8f9dc:	20c6703a 	and	r3,r4,r3
   8f9e0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8f9e4:	e0bffe17 	ldw	r2,-8(fp)
   8f9e8:	10800317 	ldw	r2,12(r2)
   8f9ec:	00c03fc4 	movi	r3,255
   8f9f0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8f9f4:	e0bffe17 	ldw	r2,-8(fp)
   8f9f8:	10800317 	ldw	r2,12(r2)
   8f9fc:	10800804 	addi	r2,r2,32
   8fa00:	e0ffff17 	ldw	r3,-4(fp)
   8fa04:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   8fa08:	e0bffe17 	ldw	r2,-8(fp)
   8fa0c:	10800917 	ldw	r2,36(r2)
   8fa10:	10001126 	beq	r2,zero,8fa58 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8fa14:	e0bffe17 	ldw	r2,-8(fp)
   8fa18:	10800317 	ldw	r2,12(r2)
   8fa1c:	10800404 	addi	r2,r2,16
   8fa20:	10800037 	ldwio	r2,0(r2)
   8fa24:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   8fa28:	e0bffe17 	ldw	r2,-8(fp)
   8fa2c:	10c00b17 	ldw	r3,44(r2)
   8fa30:	e0bffd17 	ldw	r2,-12(fp)
   8fa34:	1884b03a 	or	r2,r3,r2
   8fa38:	10801814 	ori	r2,r2,96
   8fa3c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8fa40:	e0bffe17 	ldw	r2,-8(fp)
   8fa44:	10800317 	ldw	r2,12(r2)
   8fa48:	10800404 	addi	r2,r2,16
   8fa4c:	e0fffd17 	ldw	r3,-12(fp)
   8fa50:	10c00035 	stwio	r3,0(r2)
   8fa54:	00001106 	br	8fa9c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8fa58:	e0bffe17 	ldw	r2,-8(fp)
   8fa5c:	10800317 	ldw	r2,12(r2)
   8fa60:	10800404 	addi	r2,r2,16
   8fa64:	10800037 	ldwio	r2,0(r2)
   8fa68:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   8fa6c:	e0bffd17 	ldw	r2,-12(fp)
   8fa70:	10801814 	ori	r2,r2,96
   8fa74:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   8fa78:	e0fffd17 	ldw	r3,-12(fp)
   8fa7c:	00bffbc4 	movi	r2,-17
   8fa80:	1884703a 	and	r2,r3,r2
   8fa84:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8fa88:	e0bffe17 	ldw	r2,-8(fp)
   8fa8c:	10800317 	ldw	r2,12(r2)
   8fa90:	10800404 	addi	r2,r2,16
   8fa94:	e0fffd17 	ldw	r3,-12(fp)
   8fa98:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   8fa9c:	0005883a 	mov	r2,zero
}
   8faa0:	e037883a 	mov	sp,fp
   8faa4:	df000017 	ldw	fp,0(sp)
   8faa8:	dec00104 	addi	sp,sp,4
   8faac:	f800283a 	ret

0008fab0 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   8fab0:	defffc04 	addi	sp,sp,-16
   8fab4:	df000315 	stw	fp,12(sp)
   8fab8:	df000304 	addi	fp,sp,12
   8fabc:	e13ffe15 	stw	r4,-8(fp)
   8fac0:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fac4:	0001883a 	nop
   8fac8:	e0bffe17 	ldw	r2,-8(fp)
   8facc:	10800317 	ldw	r2,12(r2)
   8fad0:	10800037 	ldwio	r2,0(r2)
   8fad4:	1080040c 	andi	r2,r2,16
   8fad8:	103ffb1e 	bne	r2,zero,8fac8 <rx_descriptor_end+0xfff8fa68>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fadc:	e0bffe17 	ldw	r2,-8(fp)
   8fae0:	10800317 	ldw	r2,12(r2)
   8fae4:	10800404 	addi	r2,r2,16
   8fae8:	e0fffe17 	ldw	r3,-8(fp)
   8faec:	18c00317 	ldw	r3,12(r3)
   8faf0:	18c00404 	addi	r3,r3,16
   8faf4:	19000037 	ldwio	r4,0(r3)
   8faf8:	00fff7c4 	movi	r3,-33
   8fafc:	20c6703a 	and	r3,r4,r3
   8fb00:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8fb04:	e0bffe17 	ldw	r2,-8(fp)
   8fb08:	10800317 	ldw	r2,12(r2)
   8fb0c:	00c03fc4 	movi	r3,255
   8fb10:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8fb14:	e0bffe17 	ldw	r2,-8(fp)
   8fb18:	10800317 	ldw	r2,12(r2)
   8fb1c:	10800804 	addi	r2,r2,32
   8fb20:	e0ffff17 	ldw	r3,-4(fp)
   8fb24:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fb28:	e0bffe17 	ldw	r2,-8(fp)
   8fb2c:	10800317 	ldw	r2,12(r2)
   8fb30:	10800404 	addi	r2,r2,16
   8fb34:	e0fffe17 	ldw	r3,-8(fp)
   8fb38:	18c00317 	ldw	r3,12(r3)
   8fb3c:	18c00404 	addi	r3,r3,16
   8fb40:	18c00037 	ldwio	r3,0(r3)
   8fb44:	18c01814 	ori	r3,r3,96
   8fb48:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fb4c:	0001883a 	nop
   8fb50:	e0bffe17 	ldw	r2,-8(fp)
   8fb54:	10800317 	ldw	r2,12(r2)
   8fb58:	10800037 	ldwio	r2,0(r2)
   8fb5c:	1080040c 	andi	r2,r2,16
   8fb60:	103ffb1e 	bne	r2,zero,8fb50 <rx_descriptor_end+0xfff8faf0>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   8fb64:	e0bffe17 	ldw	r2,-8(fp)
   8fb68:	10800317 	ldw	r2,12(r2)
   8fb6c:	10800404 	addi	r2,r2,16
   8fb70:	e0fffe17 	ldw	r3,-8(fp)
   8fb74:	18c00317 	ldw	r3,12(r3)
   8fb78:	18c00404 	addi	r3,r3,16
   8fb7c:	19000037 	ldwio	r4,0(r3)
   8fb80:	00fff7c4 	movi	r3,-33
   8fb84:	20c6703a 	and	r3,r4,r3
   8fb88:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   8fb8c:	e0bffe17 	ldw	r2,-8(fp)
   8fb90:	10800317 	ldw	r2,12(r2)
   8fb94:	10800037 	ldwio	r2,0(r2)
   8fb98:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8fb9c:	e0bffe17 	ldw	r2,-8(fp)
   8fba0:	10800317 	ldw	r2,12(r2)
   8fba4:	00c03fc4 	movi	r3,255
   8fba8:	10c00035 	stwio	r3,0(r2)

  return status;
   8fbac:	e0bffd03 	ldbu	r2,-12(fp)
}
   8fbb0:	e037883a 	mov	sp,fp
   8fbb4:	df000017 	ldw	fp,0(sp)
   8fbb8:	dec00104 	addi	sp,sp,4
   8fbbc:	f800283a 	ret

0008fbc0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   8fbc0:	defff404 	addi	sp,sp,-48
   8fbc4:	dfc00b15 	stw	ra,44(sp)
   8fbc8:	df000a15 	stw	fp,40(sp)
   8fbcc:	df000a04 	addi	fp,sp,40
   8fbd0:	e13ffb15 	stw	r4,-20(fp)
   8fbd4:	e17ffc15 	stw	r5,-16(fp)
   8fbd8:	e1bffd15 	stw	r6,-12(fp)
   8fbdc:	e1fffe15 	stw	r7,-8(fp)
   8fbe0:	e0800217 	ldw	r2,8(fp)
   8fbe4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   8fbe8:	e0bfff0b 	ldhu	r2,-4(fp)
   8fbec:	d8000415 	stw	zero,16(sp)
   8fbf0:	d8000315 	stw	zero,12(sp)
   8fbf4:	e0c00417 	ldw	r3,16(fp)
   8fbf8:	d8c00215 	stw	r3,8(sp)
   8fbfc:	e0c00317 	ldw	r3,12(fp)
   8fc00:	d8c00115 	stw	r3,4(sp)
   8fc04:	d8800015 	stw	r2,0(sp)
   8fc08:	e1fffe17 	ldw	r7,-8(fp)
   8fc0c:	e1bffd17 	ldw	r6,-12(fp)
   8fc10:	e17ffc17 	ldw	r5,-16(fp)
   8fc14:	e13ffb17 	ldw	r4,-20(fp)
   8fc18:	008fc340 	call	8fc34 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   8fc1c:	0001883a 	nop
   8fc20:	e037883a 	mov	sp,fp
   8fc24:	dfc00117 	ldw	ra,4(sp)
   8fc28:	df000017 	ldw	fp,0(sp)
   8fc2c:	dec00204 	addi	sp,sp,8
   8fc30:	f800283a 	ret

0008fc34 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   8fc34:	defff204 	addi	sp,sp,-56
   8fc38:	dfc00d15 	stw	ra,52(sp)
   8fc3c:	df000c15 	stw	fp,48(sp)
   8fc40:	df000c04 	addi	fp,sp,48
   8fc44:	e13ffb15 	stw	r4,-20(fp)
   8fc48:	e17ffc15 	stw	r5,-16(fp)
   8fc4c:	e1bffd15 	stw	r6,-12(fp)
   8fc50:	e1fffe15 	stw	r7,-8(fp)
   8fc54:	e0800217 	ldw	r2,8(fp)
   8fc58:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8fc5c:	e0bfff0b 	ldhu	r2,-4(fp)
   8fc60:	d8000615 	stw	zero,24(sp)
   8fc64:	e0c00617 	ldw	r3,24(fp)
   8fc68:	d8c00515 	stw	r3,20(sp)
   8fc6c:	e0c00517 	ldw	r3,20(fp)
   8fc70:	d8c00415 	stw	r3,16(sp)
   8fc74:	e0c00417 	ldw	r3,16(fp)
   8fc78:	d8c00315 	stw	r3,12(sp)
   8fc7c:	e0c00317 	ldw	r3,12(fp)
   8fc80:	d8c00215 	stw	r3,8(sp)
   8fc84:	d8000115 	stw	zero,4(sp)
   8fc88:	d8800015 	stw	r2,0(sp)
   8fc8c:	e1fffe17 	ldw	r7,-8(fp)
   8fc90:	e1bffd17 	ldw	r6,-12(fp)
   8fc94:	e17ffc17 	ldw	r5,-16(fp)
   8fc98:	e13ffb17 	ldw	r4,-20(fp)
   8fc9c:	00901c80 	call	901c8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   8fca0:	0001883a 	nop
   8fca4:	e037883a 	mov	sp,fp
   8fca8:	dfc00117 	ldw	ra,4(sp)
   8fcac:	df000017 	ldw	fp,0(sp)
   8fcb0:	dec00204 	addi	sp,sp,8
   8fcb4:	f800283a 	ret

0008fcb8 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   8fcb8:	defff804 	addi	sp,sp,-32
   8fcbc:	dfc00715 	stw	ra,28(sp)
   8fcc0:	df000615 	stw	fp,24(sp)
   8fcc4:	df000604 	addi	fp,sp,24
   8fcc8:	e13ffc15 	stw	r4,-16(fp)
   8fccc:	e17ffd15 	stw	r5,-12(fp)
   8fcd0:	e1bffe15 	stw	r6,-8(fp)
   8fcd4:	3805883a 	mov	r2,r7
   8fcd8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   8fcdc:	e0ffff0b 	ldhu	r3,-4(fp)
   8fce0:	d8000115 	stw	zero,4(sp)
   8fce4:	e0800217 	ldw	r2,8(fp)
   8fce8:	d8800015 	stw	r2,0(sp)
   8fcec:	180f883a 	mov	r7,r3
   8fcf0:	e1bffe17 	ldw	r6,-8(fp)
   8fcf4:	e17ffd17 	ldw	r5,-12(fp)
   8fcf8:	e13ffc17 	ldw	r4,-16(fp)
   8fcfc:	008fd180 	call	8fd18 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   8fd00:	0001883a 	nop
   8fd04:	e037883a 	mov	sp,fp
   8fd08:	dfc00117 	ldw	ra,4(sp)
   8fd0c:	df000017 	ldw	fp,0(sp)
   8fd10:	dec00204 	addi	sp,sp,8
   8fd14:	f800283a 	ret

0008fd18 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   8fd18:	defff304 	addi	sp,sp,-52
   8fd1c:	dfc00c15 	stw	ra,48(sp)
   8fd20:	df000b15 	stw	fp,44(sp)
   8fd24:	df000b04 	addi	fp,sp,44
   8fd28:	e13ffc15 	stw	r4,-16(fp)
   8fd2c:	e17ffd15 	stw	r5,-12(fp)
   8fd30:	e1bffe15 	stw	r6,-8(fp)
   8fd34:	3805883a 	mov	r2,r7
   8fd38:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8fd3c:	e0bfff0b 	ldhu	r2,-4(fp)
   8fd40:	d8000615 	stw	zero,24(sp)
   8fd44:	e0c00317 	ldw	r3,12(fp)
   8fd48:	d8c00515 	stw	r3,20(sp)
   8fd4c:	d8000415 	stw	zero,16(sp)
   8fd50:	e0c00217 	ldw	r3,8(fp)
   8fd54:	d8c00315 	stw	r3,12(sp)
   8fd58:	d8000215 	stw	zero,8(sp)
   8fd5c:	d8000115 	stw	zero,4(sp)
   8fd60:	d8800015 	stw	r2,0(sp)
   8fd64:	e1fffe17 	ldw	r7,-8(fp)
   8fd68:	000d883a 	mov	r6,zero
   8fd6c:	e17ffd17 	ldw	r5,-12(fp)
   8fd70:	e13ffc17 	ldw	r4,-16(fp)
   8fd74:	00901c80 	call	901c8 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   8fd78:	0001883a 	nop
   8fd7c:	e037883a 	mov	sp,fp
   8fd80:	dfc00117 	ldw	ra,4(sp)
   8fd84:	df000017 	ldw	fp,0(sp)
   8fd88:	dec00204 	addi	sp,sp,8
   8fd8c:	f800283a 	ret

0008fd90 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   8fd90:	defff404 	addi	sp,sp,-48
   8fd94:	dfc00b15 	stw	ra,44(sp)
   8fd98:	df000a15 	stw	fp,40(sp)
   8fd9c:	df000a04 	addi	fp,sp,40
   8fda0:	e13ffb15 	stw	r4,-20(fp)
   8fda4:	e17ffc15 	stw	r5,-16(fp)
   8fda8:	e1bffd15 	stw	r6,-12(fp)
   8fdac:	3807883a 	mov	r3,r7
   8fdb0:	e0800517 	ldw	r2,20(fp)
   8fdb4:	e0fffe0d 	sth	r3,-8(fp)
   8fdb8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   8fdbc:	e0fffe0b 	ldhu	r3,-8(fp)
   8fdc0:	e0bfff03 	ldbu	r2,-4(fp)
   8fdc4:	d8800415 	stw	r2,16(sp)
   8fdc8:	d8000315 	stw	zero,12(sp)
   8fdcc:	e0800417 	ldw	r2,16(fp)
   8fdd0:	d8800215 	stw	r2,8(sp)
   8fdd4:	e0800317 	ldw	r2,12(fp)
   8fdd8:	d8800115 	stw	r2,4(sp)
   8fddc:	e0800217 	ldw	r2,8(fp)
   8fde0:	d8800015 	stw	r2,0(sp)
   8fde4:	180f883a 	mov	r7,r3
   8fde8:	e1bffd17 	ldw	r6,-12(fp)
   8fdec:	e17ffc17 	ldw	r5,-16(fp)
   8fdf0:	e13ffb17 	ldw	r4,-20(fp)
   8fdf4:	008fe100 	call	8fe10 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   8fdf8:	0001883a 	nop
   8fdfc:	e037883a 	mov	sp,fp
   8fe00:	dfc00117 	ldw	ra,4(sp)
   8fe04:	df000017 	ldw	fp,0(sp)
   8fe08:	dec00204 	addi	sp,sp,8
   8fe0c:	f800283a 	ret

0008fe10 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   8fe10:	defff204 	addi	sp,sp,-56
   8fe14:	dfc00d15 	stw	ra,52(sp)
   8fe18:	df000c15 	stw	fp,48(sp)
   8fe1c:	df000c04 	addi	fp,sp,48
   8fe20:	e13ffb15 	stw	r4,-20(fp)
   8fe24:	e17ffc15 	stw	r5,-16(fp)
   8fe28:	e1bffd15 	stw	r6,-12(fp)
   8fe2c:	3807883a 	mov	r3,r7
   8fe30:	e0800617 	ldw	r2,24(fp)
   8fe34:	e0fffe0d 	sth	r3,-8(fp)
   8fe38:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8fe3c:	e0bffe0b 	ldhu	r2,-8(fp)
   8fe40:	e0ffff03 	ldbu	r3,-4(fp)
   8fe44:	d8c00615 	stw	r3,24(sp)
   8fe48:	d8000515 	stw	zero,20(sp)
   8fe4c:	e0c00517 	ldw	r3,20(fp)
   8fe50:	d8c00415 	stw	r3,16(sp)
   8fe54:	e0c00317 	ldw	r3,12(fp)
   8fe58:	d8c00315 	stw	r3,12(sp)
   8fe5c:	e0c00217 	ldw	r3,8(fp)
   8fe60:	d8c00215 	stw	r3,8(sp)
   8fe64:	e0c00417 	ldw	r3,16(fp)
   8fe68:	d8c00115 	stw	r3,4(sp)
   8fe6c:	d8800015 	stw	r2,0(sp)
   8fe70:	000f883a 	mov	r7,zero
   8fe74:	e1bffd17 	ldw	r6,-12(fp)
   8fe78:	e17ffc17 	ldw	r5,-16(fp)
   8fe7c:	e13ffb17 	ldw	r4,-20(fp)
   8fe80:	00901c80 	call	901c8 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   8fe84:	0001883a 	nop
   8fe88:	e037883a 	mov	sp,fp
   8fe8c:	dfc00117 	ldw	ra,4(sp)
   8fe90:	df000017 	ldw	fp,0(sp)
   8fe94:	dec00204 	addi	sp,sp,8
   8fe98:	f800283a 	ret

0008fe9c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   8fe9c:	defffb04 	addi	sp,sp,-20
   8fea0:	df000415 	stw	fp,16(sp)
   8fea4:	df000404 	addi	fp,sp,16
   8fea8:	e13ffc15 	stw	r4,-16(fp)
   8feac:	e17ffd15 	stw	r5,-12(fp)
   8feb0:	e1bffe15 	stw	r6,-8(fp)
   8feb4:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   8feb8:	e0bffc17 	ldw	r2,-16(fp)
   8febc:	e0fffd17 	ldw	r3,-12(fp)
   8fec0:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   8fec4:	e0bffc17 	ldw	r2,-16(fp)
   8fec8:	e0ffff17 	ldw	r3,-4(fp)
   8fecc:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   8fed0:	e0bffc17 	ldw	r2,-16(fp)
   8fed4:	e0fffe17 	ldw	r3,-8(fp)
   8fed8:	10c00b15 	stw	r3,44(r2)
}
   8fedc:	0001883a 	nop
   8fee0:	e037883a 	mov	sp,fp
   8fee4:	df000017 	ldw	fp,0(sp)
   8fee8:	dec00104 	addi	sp,sp,4
   8feec:	f800283a 	ret

0008fef0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   8fef0:	defffd04 	addi	sp,sp,-12
   8fef4:	df000215 	stw	fp,8(sp)
   8fef8:	df000204 	addi	fp,sp,8
   8fefc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8ff00:	e0bfff17 	ldw	r2,-4(fp)
   8ff04:	10800317 	ldw	r2,12(r2)
   8ff08:	10800404 	addi	r2,r2,16
   8ff0c:	10800037 	ldwio	r2,0(r2)
   8ff10:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   8ff14:	e0bffe17 	ldw	r2,-8(fp)
   8ff18:	10800814 	ori	r2,r2,32
   8ff1c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8ff20:	e0bfff17 	ldw	r2,-4(fp)
   8ff24:	10800317 	ldw	r2,12(r2)
   8ff28:	10800404 	addi	r2,r2,16
   8ff2c:	e0fffe17 	ldw	r3,-8(fp)
   8ff30:	10c00035 	stwio	r3,0(r2)
}
   8ff34:	0001883a 	nop
   8ff38:	e037883a 	mov	sp,fp
   8ff3c:	df000017 	ldw	fp,0(sp)
   8ff40:	dec00104 	addi	sp,sp,4
   8ff44:	f800283a 	ret

0008ff48 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   8ff48:	defffd04 	addi	sp,sp,-12
   8ff4c:	df000215 	stw	fp,8(sp)
   8ff50:	df000204 	addi	fp,sp,8
   8ff54:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8ff58:	e0bfff17 	ldw	r2,-4(fp)
   8ff5c:	10800317 	ldw	r2,12(r2)
   8ff60:	10800404 	addi	r2,r2,16
   8ff64:	10800037 	ldwio	r2,0(r2)
   8ff68:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   8ff6c:	e0fffe17 	ldw	r3,-8(fp)
   8ff70:	00bff7c4 	movi	r2,-33
   8ff74:	1884703a 	and	r2,r3,r2
   8ff78:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8ff7c:	e0bfff17 	ldw	r2,-4(fp)
   8ff80:	10800317 	ldw	r2,12(r2)
   8ff84:	10800404 	addi	r2,r2,16
   8ff88:	e0fffe17 	ldw	r3,-8(fp)
   8ff8c:	10c00035 	stwio	r3,0(r2)
}
   8ff90:	0001883a 	nop
   8ff94:	e037883a 	mov	sp,fp
   8ff98:	df000017 	ldw	fp,0(sp)
   8ff9c:	dec00104 	addi	sp,sp,4
   8ffa0:	f800283a 	ret

0008ffa4 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   8ffa4:	defffe04 	addi	sp,sp,-8
   8ffa8:	df000115 	stw	fp,4(sp)
   8ffac:	df000104 	addi	fp,sp,4
   8ffb0:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   8ffb4:	e0bfff17 	ldw	r2,-4(fp)
   8ffb8:	10800784 	addi	r2,r2,30
   8ffbc:	10800023 	ldbuio	r2,0(r2)
   8ffc0:	10803fcc 	andi	r2,r2,255
   8ffc4:	10801fcc 	andi	r2,r2,127
   8ffc8:	10000226 	beq	r2,zero,8ffd4 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   8ffcc:	00bffec4 	movi	r2,-5
   8ffd0:	00000906 	br	8fff8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   8ffd4:	e0bfff17 	ldw	r2,-4(fp)
   8ffd8:	108007c4 	addi	r2,r2,31
   8ffdc:	10800023 	ldbuio	r2,0(r2)
   8ffe0:	10803fcc 	andi	r2,r2,255
   8ffe4:	1080200c 	andi	r2,r2,128
   8ffe8:	10000226 	beq	r2,zero,8fff4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   8ffec:	00bfe244 	movi	r2,-119
   8fff0:	00000106 	br	8fff8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   8fff4:	0005883a 	mov	r2,zero
}
   8fff8:	e037883a 	mov	sp,fp
   8fffc:	df000017 	ldw	fp,0(sp)
   90000:	dec00104 	addi	sp,sp,4
   90004:	f800283a 	ret

00090008 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   90008:	defffc04 	addi	sp,sp,-16
   9000c:	dfc00315 	stw	ra,12(sp)
   90010:	df000215 	stw	fp,8(sp)
   90014:	df000204 	addi	fp,sp,8
   90018:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   9001c:	d1600e04 	addi	r5,gp,-32712
   90020:	e13fff17 	ldw	r4,-4(fp)
   90024:	0090b1c0 	call	90b1c <alt_find_dev>
   90028:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   9002c:	e0bffe17 	ldw	r2,-8(fp)
   90030:	1000041e 	bne	r2,zero,90044 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   90034:	008f9500 	call	8f950 <alt_get_errno>
   90038:	1007883a 	mov	r3,r2
   9003c:	008004c4 	movi	r2,19
   90040:	18800015 	stw	r2,0(r3)
  }

  return dev;
   90044:	e0bffe17 	ldw	r2,-8(fp)
}
   90048:	e037883a 	mov	sp,fp
   9004c:	dfc00117 	ldw	ra,4(sp)
   90050:	df000017 	ldw	fp,0(sp)
   90054:	dec00204 	addi	sp,sp,8
   90058:	f800283a 	ret

0009005c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   9005c:	defff104 	addi	sp,sp,-60
   90060:	dfc00e15 	stw	ra,56(sp)
   90064:	df000d15 	stw	fp,52(sp)
   90068:	df000d04 	addi	fp,sp,52
   9006c:	e13ffa15 	stw	r4,-24(fp)
   90070:	e17ffb15 	stw	r5,-20(fp)
   90074:	e1bffc15 	stw	r6,-16(fp)
   90078:	e1fffd15 	stw	r7,-12(fp)
   9007c:	e0c00217 	ldw	r3,8(fp)
   90080:	e0800617 	ldw	r2,24(fp)
   90084:	e0fffe0d 	sth	r3,-8(fp)
   90088:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   9008c:	e0bffe0b 	ldhu	r2,-8(fp)
   90090:	e0ffff03 	ldbu	r3,-4(fp)
   90094:	d8c00615 	stw	r3,24(sp)
   90098:	d8000515 	stw	zero,20(sp)
   9009c:	d8000415 	stw	zero,16(sp)
   900a0:	e0c00517 	ldw	r3,20(fp)
   900a4:	d8c00315 	stw	r3,12(sp)
   900a8:	e0c00417 	ldw	r3,16(fp)
   900ac:	d8c00215 	stw	r3,8(sp)
   900b0:	e0c00317 	ldw	r3,12(fp)
   900b4:	d8c00115 	stw	r3,4(sp)
   900b8:	d8800015 	stw	r2,0(sp)
   900bc:	e1fffd17 	ldw	r7,-12(fp)
   900c0:	e1bffc17 	ldw	r6,-16(fp)
   900c4:	e17ffb17 	ldw	r5,-20(fp)
   900c8:	e13ffa17 	ldw	r4,-24(fp)
   900cc:	00901c80 	call	901c8 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   900d0:	0001883a 	nop
   900d4:	e037883a 	mov	sp,fp
   900d8:	dfc00117 	ldw	ra,4(sp)
   900dc:	df000017 	ldw	fp,0(sp)
   900e0:	dec00204 	addi	sp,sp,8
   900e4:	f800283a 	ret

000900e8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   900e8:	defffc04 	addi	sp,sp,-16
   900ec:	df000315 	stw	fp,12(sp)
   900f0:	df000304 	addi	fp,sp,12
   900f4:	e13ffe15 	stw	r4,-8(fp)
   900f8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   900fc:	e0bffe17 	ldw	r2,-8(fp)
   90100:	10800317 	ldw	r2,12(r2)
   90104:	10800404 	addi	r2,r2,16
   90108:	10800037 	ldwio	r2,0(r2)
   9010c:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   90110:	e0fffd17 	ldw	r3,-12(fp)
   90114:	00a00434 	movhi	r2,32784
   90118:	10bfffc4 	addi	r2,r2,-1
   9011c:	1884703a 	and	r2,r3,r2
   90120:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   90124:	e0bfff17 	ldw	r2,-4(fp)
   90128:	1004953a 	slli	r2,r2,20
   9012c:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   90130:	e0bffd17 	ldw	r2,-12(fp)
   90134:	1884b03a 	or	r2,r3,r2
   90138:	10800134 	orhi	r2,r2,4
   9013c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   90140:	e0bffe17 	ldw	r2,-8(fp)
   90144:	10800317 	ldw	r2,12(r2)
   90148:	10800404 	addi	r2,r2,16
   9014c:	e0fffd17 	ldw	r3,-12(fp)
   90150:	10c00035 	stwio	r3,0(r2)
  
  return;
   90154:	0001883a 	nop
}
   90158:	e037883a 	mov	sp,fp
   9015c:	df000017 	ldw	fp,0(sp)
   90160:	dec00104 	addi	sp,sp,4
   90164:	f800283a 	ret

00090168 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   90168:	defffd04 	addi	sp,sp,-12
   9016c:	df000215 	stw	fp,8(sp)
   90170:	df000204 	addi	fp,sp,8
   90174:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   90178:	e0bfff17 	ldw	r2,-4(fp)
   9017c:	10800317 	ldw	r2,12(r2)
   90180:	10800404 	addi	r2,r2,16
   90184:	10800037 	ldwio	r2,0(r2)
   90188:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   9018c:	e0fffe17 	ldw	r3,-8(fp)
   90190:	00bfff34 	movhi	r2,65532
   90194:	10bfffc4 	addi	r2,r2,-1
   90198:	1884703a 	and	r2,r3,r2
   9019c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   901a0:	e0bfff17 	ldw	r2,-4(fp)
   901a4:	10800317 	ldw	r2,12(r2)
   901a8:	10800404 	addi	r2,r2,16
   901ac:	e0fffe17 	ldw	r3,-8(fp)
   901b0:	10c00035 	stwio	r3,0(r2)
  
  return;
   901b4:	0001883a 	nop
}
   901b8:	e037883a 	mov	sp,fp
   901bc:	df000017 	ldw	fp,0(sp)
   901c0:	dec00104 	addi	sp,sp,4
   901c4:	f800283a 	ret

000901c8 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   901c8:	defff804 	addi	sp,sp,-32
   901cc:	dfc00715 	stw	ra,28(sp)
   901d0:	df000615 	stw	fp,24(sp)
   901d4:	df000604 	addi	fp,sp,24
   901d8:	e13ffa15 	stw	r4,-24(fp)
   901dc:	e17ffb15 	stw	r5,-20(fp)
   901e0:	e1bffc15 	stw	r6,-16(fp)
   901e4:	e1fffd15 	stw	r7,-12(fp)
   901e8:	e0c00217 	ldw	r3,8(fp)
   901ec:	e0800817 	ldw	r2,32(fp)
   901f0:	e0fffe0d 	sth	r3,-8(fp)
   901f4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   901f8:	e0bffb17 	ldw	r2,-20(fp)
   901fc:	108007c4 	addi	r2,r2,31
   90200:	e0fffb17 	ldw	r3,-20(fp)
   90204:	18c007c3 	ldbu	r3,31(r3)
   90208:	19003fcc 	andi	r4,r3,255
   9020c:	00ffdfc4 	movi	r3,-129
   90210:	20c6703a 	and	r3,r4,r3
   90214:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   90218:	e0bffa17 	ldw	r2,-24(fp)
   9021c:	e0fffc17 	ldw	r3,-16(fp)
   90220:	19403fcc 	andi	r5,r3,255
   90224:	10c00003 	ldbu	r3,0(r2)
   90228:	1806703a 	and	r3,r3,zero
   9022c:	1809883a 	mov	r4,r3
   90230:	2807883a 	mov	r3,r5
   90234:	20c6b03a 	or	r3,r4,r3
   90238:	10c00005 	stb	r3,0(r2)
   9023c:	e0fffc17 	ldw	r3,-16(fp)
   90240:	1806d23a 	srli	r3,r3,8
   90244:	19403fcc 	andi	r5,r3,255
   90248:	10c00043 	ldbu	r3,1(r2)
   9024c:	1806703a 	and	r3,r3,zero
   90250:	1809883a 	mov	r4,r3
   90254:	2807883a 	mov	r3,r5
   90258:	20c6b03a 	or	r3,r4,r3
   9025c:	10c00045 	stb	r3,1(r2)
   90260:	e0fffc17 	ldw	r3,-16(fp)
   90264:	1806d43a 	srli	r3,r3,16
   90268:	19403fcc 	andi	r5,r3,255
   9026c:	10c00083 	ldbu	r3,2(r2)
   90270:	1806703a 	and	r3,r3,zero
   90274:	1809883a 	mov	r4,r3
   90278:	2807883a 	mov	r3,r5
   9027c:	20c6b03a 	or	r3,r4,r3
   90280:	10c00085 	stb	r3,2(r2)
   90284:	e0fffc17 	ldw	r3,-16(fp)
   90288:	180ad63a 	srli	r5,r3,24
   9028c:	10c000c3 	ldbu	r3,3(r2)
   90290:	1806703a 	and	r3,r3,zero
   90294:	1809883a 	mov	r4,r3
   90298:	2807883a 	mov	r3,r5
   9029c:	20c6b03a 	or	r3,r4,r3
   902a0:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   902a4:	e0bffa17 	ldw	r2,-24(fp)
   902a8:	e0fffd17 	ldw	r3,-12(fp)
   902ac:	19403fcc 	andi	r5,r3,255
   902b0:	10c00203 	ldbu	r3,8(r2)
   902b4:	1806703a 	and	r3,r3,zero
   902b8:	1809883a 	mov	r4,r3
   902bc:	2807883a 	mov	r3,r5
   902c0:	20c6b03a 	or	r3,r4,r3
   902c4:	10c00205 	stb	r3,8(r2)
   902c8:	e0fffd17 	ldw	r3,-12(fp)
   902cc:	1806d23a 	srli	r3,r3,8
   902d0:	19403fcc 	andi	r5,r3,255
   902d4:	10c00243 	ldbu	r3,9(r2)
   902d8:	1806703a 	and	r3,r3,zero
   902dc:	1809883a 	mov	r4,r3
   902e0:	2807883a 	mov	r3,r5
   902e4:	20c6b03a 	or	r3,r4,r3
   902e8:	10c00245 	stb	r3,9(r2)
   902ec:	e0fffd17 	ldw	r3,-12(fp)
   902f0:	1806d43a 	srli	r3,r3,16
   902f4:	19403fcc 	andi	r5,r3,255
   902f8:	10c00283 	ldbu	r3,10(r2)
   902fc:	1806703a 	and	r3,r3,zero
   90300:	1809883a 	mov	r4,r3
   90304:	2807883a 	mov	r3,r5
   90308:	20c6b03a 	or	r3,r4,r3
   9030c:	10c00285 	stb	r3,10(r2)
   90310:	e0fffd17 	ldw	r3,-12(fp)
   90314:	180ad63a 	srli	r5,r3,24
   90318:	10c002c3 	ldbu	r3,11(r2)
   9031c:	1806703a 	and	r3,r3,zero
   90320:	1809883a 	mov	r4,r3
   90324:	2807883a 	mov	r3,r5
   90328:	20c6b03a 	or	r3,r4,r3
   9032c:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   90330:	e0bffa17 	ldw	r2,-24(fp)
   90334:	e0fffb17 	ldw	r3,-20(fp)
   90338:	19403fcc 	andi	r5,r3,255
   9033c:	10c00403 	ldbu	r3,16(r2)
   90340:	1806703a 	and	r3,r3,zero
   90344:	1809883a 	mov	r4,r3
   90348:	2807883a 	mov	r3,r5
   9034c:	20c6b03a 	or	r3,r4,r3
   90350:	10c00405 	stb	r3,16(r2)
   90354:	e0fffb17 	ldw	r3,-20(fp)
   90358:	1806d23a 	srli	r3,r3,8
   9035c:	19403fcc 	andi	r5,r3,255
   90360:	10c00443 	ldbu	r3,17(r2)
   90364:	1806703a 	and	r3,r3,zero
   90368:	1809883a 	mov	r4,r3
   9036c:	2807883a 	mov	r3,r5
   90370:	20c6b03a 	or	r3,r4,r3
   90374:	10c00445 	stb	r3,17(r2)
   90378:	e0fffb17 	ldw	r3,-20(fp)
   9037c:	1806d43a 	srli	r3,r3,16
   90380:	19403fcc 	andi	r5,r3,255
   90384:	10c00483 	ldbu	r3,18(r2)
   90388:	1806703a 	and	r3,r3,zero
   9038c:	1809883a 	mov	r4,r3
   90390:	2807883a 	mov	r3,r5
   90394:	20c6b03a 	or	r3,r4,r3
   90398:	10c00485 	stb	r3,18(r2)
   9039c:	e0fffb17 	ldw	r3,-20(fp)
   903a0:	180ad63a 	srli	r5,r3,24
   903a4:	10c004c3 	ldbu	r3,19(r2)
   903a8:	1806703a 	and	r3,r3,zero
   903ac:	1809883a 	mov	r4,r3
   903b0:	2807883a 	mov	r3,r5
   903b4:	20c6b03a 	or	r3,r4,r3
   903b8:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   903bc:	e0bffa17 	ldw	r2,-24(fp)
   903c0:	10c00103 	ldbu	r3,4(r2)
   903c4:	1806703a 	and	r3,r3,zero
   903c8:	10c00105 	stb	r3,4(r2)
   903cc:	10c00143 	ldbu	r3,5(r2)
   903d0:	1806703a 	and	r3,r3,zero
   903d4:	10c00145 	stb	r3,5(r2)
   903d8:	10c00183 	ldbu	r3,6(r2)
   903dc:	1806703a 	and	r3,r3,zero
   903e0:	10c00185 	stb	r3,6(r2)
   903e4:	10c001c3 	ldbu	r3,7(r2)
   903e8:	1806703a 	and	r3,r3,zero
   903ec:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   903f0:	e0bffa17 	ldw	r2,-24(fp)
   903f4:	10c00303 	ldbu	r3,12(r2)
   903f8:	1806703a 	and	r3,r3,zero
   903fc:	10c00305 	stb	r3,12(r2)
   90400:	10c00343 	ldbu	r3,13(r2)
   90404:	1806703a 	and	r3,r3,zero
   90408:	10c00345 	stb	r3,13(r2)
   9040c:	10c00383 	ldbu	r3,14(r2)
   90410:	1806703a 	and	r3,r3,zero
   90414:	10c00385 	stb	r3,14(r2)
   90418:	10c003c3 	ldbu	r3,15(r2)
   9041c:	1806703a 	and	r3,r3,zero
   90420:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   90424:	e0bffa17 	ldw	r2,-24(fp)
   90428:	10c00503 	ldbu	r3,20(r2)
   9042c:	1806703a 	and	r3,r3,zero
   90430:	10c00505 	stb	r3,20(r2)
   90434:	10c00543 	ldbu	r3,21(r2)
   90438:	1806703a 	and	r3,r3,zero
   9043c:	10c00545 	stb	r3,21(r2)
   90440:	10c00583 	ldbu	r3,22(r2)
   90444:	1806703a 	and	r3,r3,zero
   90448:	10c00585 	stb	r3,22(r2)
   9044c:	10c005c3 	ldbu	r3,23(r2)
   90450:	1806703a 	and	r3,r3,zero
   90454:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   90458:	e0bffa17 	ldw	r2,-24(fp)
   9045c:	e0fffe17 	ldw	r3,-8(fp)
   90460:	19403fcc 	andi	r5,r3,255
   90464:	10c00603 	ldbu	r3,24(r2)
   90468:	1806703a 	and	r3,r3,zero
   9046c:	1809883a 	mov	r4,r3
   90470:	2807883a 	mov	r3,r5
   90474:	20c6b03a 	or	r3,r4,r3
   90478:	10c00605 	stb	r3,24(r2)
   9047c:	e0fffe17 	ldw	r3,-8(fp)
   90480:	1806d23a 	srli	r3,r3,8
   90484:	19403fcc 	andi	r5,r3,255
   90488:	10c00643 	ldbu	r3,25(r2)
   9048c:	1806703a 	and	r3,r3,zero
   90490:	1809883a 	mov	r4,r3
   90494:	2807883a 	mov	r3,r5
   90498:	20c6b03a 	or	r3,r4,r3
   9049c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   904a0:	e0bffa17 	ldw	r2,-24(fp)
   904a4:	10c00703 	ldbu	r3,28(r2)
   904a8:	1806703a 	and	r3,r3,zero
   904ac:	10c00705 	stb	r3,28(r2)
   904b0:	10c00743 	ldbu	r3,29(r2)
   904b4:	1806703a 	and	r3,r3,zero
   904b8:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   904bc:	e0bffa17 	ldw	r2,-24(fp)
   904c0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   904c4:	e0800617 	ldw	r2,24(fp)
   904c8:	1007883a 	mov	r3,r2
   904cc:	e0bffa17 	ldw	r2,-24(fp)
   904d0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   904d4:	e0800717 	ldw	r2,28(fp)
   904d8:	1007883a 	mov	r3,r2
   904dc:	e0bffa17 	ldw	r2,-24(fp)
   904e0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   904e4:	e0800317 	ldw	r2,12(fp)
   904e8:	10000226 	beq	r2,zero,904f4 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   904ec:	00bfe044 	movi	r2,-127
   904f0:	00000106 	br	904f8 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   904f4:	00bfe004 	movi	r2,-128
   904f8:	e0c00417 	ldw	r3,16(fp)
   904fc:	18000226 	beq	r3,zero,90508 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   90500:	00c00084 	movi	r3,2
   90504:	00000106 	br	9050c <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   90508:	0007883a 	mov	r3,zero
   9050c:	10c4b03a 	or	r2,r2,r3
   90510:	1007883a 	mov	r3,r2
   90514:	e0800517 	ldw	r2,20(fp)
   90518:	10000226 	beq	r2,zero,90524 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   9051c:	00800104 	movi	r2,4
   90520:	00000106 	br	90528 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   90524:	0005883a 	mov	r2,zero
   90528:	1884b03a 	or	r2,r3,r2
   9052c:	1007883a 	mov	r3,r2
   90530:	e0bfff03 	ldbu	r2,-4(fp)
   90534:	10000426 	beq	r2,zero,90548 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   90538:	e0bfff03 	ldbu	r2,-4(fp)
   9053c:	108003cc 	andi	r2,r2,15
   90540:	100490fa 	slli	r2,r2,3
   90544:	00000106 	br	9054c <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   90548:	0005883a 	mov	r2,zero
   9054c:	1884b03a 	or	r2,r3,r2
   90550:	1007883a 	mov	r3,r2
   90554:	e0bffa17 	ldw	r2,-24(fp)
   90558:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   9055c:	01400804 	movi	r5,32
   90560:	e13ffa17 	ldw	r4,-24(fp)
   90564:	00909040 	call	90904 <alt_dcache_flush>
}
   90568:	0001883a 	nop
   9056c:	e037883a 	mov	sp,fp
   90570:	dfc00117 	ldw	ra,4(sp)
   90574:	df000017 	ldw	fp,0(sp)
   90578:	dec00204 	addi	sp,sp,8
   9057c:	f800283a 	ret

00090580 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   90580:	defff904 	addi	sp,sp,-28
   90584:	dfc00615 	stw	ra,24(sp)
   90588:	df000515 	stw	fp,20(sp)
   9058c:	df000504 	addi	fp,sp,20
   90590:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   90594:	e0bfff17 	ldw	r2,-4(fp)
   90598:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   9059c:	e0bffb17 	ldw	r2,-20(fp)
   905a0:	10800317 	ldw	r2,12(r2)
   905a4:	10800404 	addi	r2,r2,16
   905a8:	e0fffb17 	ldw	r3,-20(fp)
   905ac:	18c00317 	ldw	r3,12(r3)
   905b0:	18c00404 	addi	r3,r3,16
   905b4:	18c00037 	ldwio	r3,0(r3)
   905b8:	18e00034 	orhi	r3,r3,32768
   905bc:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   905c0:	e0bffb17 	ldw	r2,-20(fp)
   905c4:	10800317 	ldw	r2,12(r2)
   905c8:	10800404 	addi	r2,r2,16
   905cc:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   905d0:	e0bffb17 	ldw	r2,-20(fp)
   905d4:	10800917 	ldw	r2,36(r2)
   905d8:	10001226 	beq	r2,zero,90624 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   905dc:	0005303a 	rdctl	r2,status
   905e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   905e4:	e0fffd17 	ldw	r3,-12(fp)
   905e8:	00bfff84 	movi	r2,-2
   905ec:	1884703a 	and	r2,r3,r2
   905f0:	1001703a 	wrctl	status,r2
  
  return context;
   905f4:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   905f8:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   905fc:	e0bffb17 	ldw	r2,-20(fp)
   90600:	10800917 	ldw	r2,36(r2)
   90604:	e0fffb17 	ldw	r3,-20(fp)
   90608:	18c00a17 	ldw	r3,40(r3)
   9060c:	1809883a 	mov	r4,r3
   90610:	103ee83a 	callr	r2
   90614:	e0bffc17 	ldw	r2,-16(fp)
   90618:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9061c:	e0bffe17 	ldw	r2,-8(fp)
   90620:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   90624:	0001883a 	nop
   90628:	e037883a 	mov	sp,fp
   9062c:	dfc00117 	ldw	ra,4(sp)
   90630:	df000017 	ldw	fp,0(sp)
   90634:	dec00204 	addi	sp,sp,8
   90638:	f800283a 	ret

0009063c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   9063c:	defffa04 	addi	sp,sp,-24
   90640:	dfc00515 	stw	ra,20(sp)
   90644:	df000415 	stw	fp,16(sp)
   90648:	df000404 	addi	fp,sp,16
   9064c:	e13ffd15 	stw	r4,-12(fp)
   90650:	e17ffe15 	stw	r5,-8(fp)
   90654:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   90658:	e0bffd17 	ldw	r2,-12(fp)
   9065c:	10800317 	ldw	r2,12(r2)
   90660:	10800404 	addi	r2,r2,16
   90664:	00c00074 	movhi	r3,1
   90668:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   9066c:	e0bffd17 	ldw	r2,-12(fp)
   90670:	10800317 	ldw	r2,12(r2)
   90674:	10800404 	addi	r2,r2,16
   90678:	00c00074 	movhi	r3,1
   9067c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   90680:	e0bffd17 	ldw	r2,-12(fp)
   90684:	10800317 	ldw	r2,12(r2)
   90688:	10800404 	addi	r2,r2,16
   9068c:	0007883a 	mov	r3,zero
   90690:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   90694:	e0bffd17 	ldw	r2,-12(fp)
   90698:	10800317 	ldw	r2,12(r2)
   9069c:	00c03fc4 	movi	r3,255
   906a0:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   906a4:	d1600e04 	addi	r5,gp,-32712
   906a8:	e13ffd17 	ldw	r4,-12(fp)
   906ac:	00909b80 	call	909b8 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   906b0:	d8000015 	stw	zero,0(sp)
   906b4:	e1fffd17 	ldw	r7,-12(fp)
   906b8:	01800274 	movhi	r6,9
   906bc:	31816004 	addi	r6,r6,1408
   906c0:	e17fff17 	ldw	r5,-4(fp)
   906c4:	e13ffe17 	ldw	r4,-8(fp)
   906c8:	0090be00 	call	90be0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   906cc:	0001883a 	nop
   906d0:	e037883a 	mov	sp,fp
   906d4:	dfc00117 	ldw	ra,4(sp)
   906d8:	df000017 	ldw	fp,0(sp)
   906dc:	dec00204 	addi	sp,sp,8
   906e0:	f800283a 	ret

000906e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   906e4:	defffa04 	addi	sp,sp,-24
   906e8:	dfc00515 	stw	ra,20(sp)
   906ec:	df000415 	stw	fp,16(sp)
   906f0:	df000404 	addi	fp,sp,16
   906f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   906f8:	0007883a 	mov	r3,zero
   906fc:	e0bfff17 	ldw	r2,-4(fp)
   90700:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   90704:	e0bfff17 	ldw	r2,-4(fp)
   90708:	10800104 	addi	r2,r2,4
   9070c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90710:	0005303a 	rdctl	r2,status
   90714:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90718:	e0fffd17 	ldw	r3,-12(fp)
   9071c:	00bfff84 	movi	r2,-2
   90720:	1884703a 	and	r2,r3,r2
   90724:	1001703a 	wrctl	status,r2
  
  return context;
   90728:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   9072c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   90730:	00912b00 	call	912b0 <alt_tick>
   90734:	e0bffc17 	ldw	r2,-16(fp)
   90738:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9073c:	e0bffe17 	ldw	r2,-8(fp)
   90740:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   90744:	0001883a 	nop
   90748:	e037883a 	mov	sp,fp
   9074c:	dfc00117 	ldw	ra,4(sp)
   90750:	df000017 	ldw	fp,0(sp)
   90754:	dec00204 	addi	sp,sp,8
   90758:	f800283a 	ret

0009075c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   9075c:	defff804 	addi	sp,sp,-32
   90760:	dfc00715 	stw	ra,28(sp)
   90764:	df000615 	stw	fp,24(sp)
   90768:	df000604 	addi	fp,sp,24
   9076c:	e13ffc15 	stw	r4,-16(fp)
   90770:	e17ffd15 	stw	r5,-12(fp)
   90774:	e1bffe15 	stw	r6,-8(fp)
   90778:	e1ffff15 	stw	r7,-4(fp)
   9077c:	e0bfff17 	ldw	r2,-4(fp)
   90780:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   90784:	d0a80217 	ldw	r2,-24568(gp)
   90788:	1000021e 	bne	r2,zero,90794 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   9078c:	e0bffb17 	ldw	r2,-20(fp)
   90790:	d0a80215 	stw	r2,-24568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   90794:	e0bffc17 	ldw	r2,-16(fp)
   90798:	10800104 	addi	r2,r2,4
   9079c:	00c001c4 	movi	r3,7
   907a0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   907a4:	d8000015 	stw	zero,0(sp)
   907a8:	e1fffc17 	ldw	r7,-16(fp)
   907ac:	01800274 	movhi	r6,9
   907b0:	3181b904 	addi	r6,r6,1764
   907b4:	e17ffe17 	ldw	r5,-8(fp)
   907b8:	e13ffd17 	ldw	r4,-12(fp)
   907bc:	0090be00 	call	90be0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   907c0:	0001883a 	nop
   907c4:	e037883a 	mov	sp,fp
   907c8:	dfc00117 	ldw	ra,4(sp)
   907cc:	df000017 	ldw	fp,0(sp)
   907d0:	dec00204 	addi	sp,sp,8
   907d4:	f800283a 	ret

000907d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   907d8:	defff504 	addi	sp,sp,-44
   907dc:	df000a15 	stw	fp,40(sp)
   907e0:	df000a04 	addi	fp,sp,40
   907e4:	e13ffc15 	stw	r4,-16(fp)
   907e8:	e17ffd15 	stw	r5,-12(fp)
   907ec:	e1bffe15 	stw	r6,-8(fp)
   907f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   907f4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   907f8:	d0a80217 	ldw	r2,-24568(gp)
  
  if (alt_ticks_per_second ())
   907fc:	10003c26 	beq	r2,zero,908f0 <alt_alarm_start+0x118>
  {
    if (alarm)
   90800:	e0bffc17 	ldw	r2,-16(fp)
   90804:	10003826 	beq	r2,zero,908e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   90808:	e0bffc17 	ldw	r2,-16(fp)
   9080c:	e0fffe17 	ldw	r3,-8(fp)
   90810:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   90814:	e0bffc17 	ldw	r2,-16(fp)
   90818:	e0ffff17 	ldw	r3,-4(fp)
   9081c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90820:	0005303a 	rdctl	r2,status
   90824:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90828:	e0fff917 	ldw	r3,-28(fp)
   9082c:	00bfff84 	movi	r2,-2
   90830:	1884703a 	and	r2,r3,r2
   90834:	1001703a 	wrctl	status,r2
  
  return context;
   90838:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   9083c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   90840:	d0a80317 	ldw	r2,-24564(gp)
      
      current_nticks = alt_nticks();
   90844:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   90848:	e0fffd17 	ldw	r3,-12(fp)
   9084c:	e0bff617 	ldw	r2,-40(fp)
   90850:	1885883a 	add	r2,r3,r2
   90854:	10c00044 	addi	r3,r2,1
   90858:	e0bffc17 	ldw	r2,-16(fp)
   9085c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   90860:	e0bffc17 	ldw	r2,-16(fp)
   90864:	10c00217 	ldw	r3,8(r2)
   90868:	e0bff617 	ldw	r2,-40(fp)
   9086c:	1880042e 	bgeu	r3,r2,90880 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   90870:	e0bffc17 	ldw	r2,-16(fp)
   90874:	00c00044 	movi	r3,1
   90878:	10c00405 	stb	r3,16(r2)
   9087c:	00000206 	br	90888 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   90880:	e0bffc17 	ldw	r2,-16(fp)
   90884:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   90888:	e0bffc17 	ldw	r2,-16(fp)
   9088c:	d0e01104 	addi	r3,gp,-32700
   90890:	e0fffa15 	stw	r3,-24(fp)
   90894:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90898:	e0bffb17 	ldw	r2,-20(fp)
   9089c:	e0fffa17 	ldw	r3,-24(fp)
   908a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   908a4:	e0bffa17 	ldw	r2,-24(fp)
   908a8:	10c00017 	ldw	r3,0(r2)
   908ac:	e0bffb17 	ldw	r2,-20(fp)
   908b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   908b4:	e0bffa17 	ldw	r2,-24(fp)
   908b8:	10800017 	ldw	r2,0(r2)
   908bc:	e0fffb17 	ldw	r3,-20(fp)
   908c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   908c4:	e0bffa17 	ldw	r2,-24(fp)
   908c8:	e0fffb17 	ldw	r3,-20(fp)
   908cc:	10c00015 	stw	r3,0(r2)
   908d0:	e0bff817 	ldw	r2,-32(fp)
   908d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   908d8:	e0bff717 	ldw	r2,-36(fp)
   908dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   908e0:	0005883a 	mov	r2,zero
   908e4:	00000306 	br	908f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   908e8:	00bffa84 	movi	r2,-22
   908ec:	00000106 	br	908f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   908f0:	00bfde84 	movi	r2,-134
  }
}
   908f4:	e037883a 	mov	sp,fp
   908f8:	df000017 	ldw	fp,0(sp)
   908fc:	dec00104 	addi	sp,sp,4
   90900:	f800283a 	ret

00090904 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   90904:	defffb04 	addi	sp,sp,-20
   90908:	df000415 	stw	fp,16(sp)
   9090c:	df000404 	addi	fp,sp,16
   90910:	e13ffe15 	stw	r4,-8(fp)
   90914:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   90918:	e0fffe17 	ldw	r3,-8(fp)
   9091c:	e0bfff17 	ldw	r2,-4(fp)
   90920:	1885883a 	add	r2,r3,r2
   90924:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   90928:	e0bffe17 	ldw	r2,-8(fp)
   9092c:	e0bffc15 	stw	r2,-16(fp)
   90930:	00000506 	br	90948 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   90934:	e0bffc17 	ldw	r2,-16(fp)
   90938:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   9093c:	e0bffc17 	ldw	r2,-16(fp)
   90940:	10800804 	addi	r2,r2,32
   90944:	e0bffc15 	stw	r2,-16(fp)
   90948:	e0fffc17 	ldw	r3,-16(fp)
   9094c:	e0bffd17 	ldw	r2,-12(fp)
   90950:	18bff836 	bltu	r3,r2,90934 <rx_descriptor_end+0xfff908d4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   90954:	e0bffe17 	ldw	r2,-8(fp)
   90958:	108007cc 	andi	r2,r2,31
   9095c:	10000226 	beq	r2,zero,90968 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   90960:	e0bffc17 	ldw	r2,-16(fp)
   90964:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   90968:	0001883a 	nop
   9096c:	e037883a 	mov	sp,fp
   90970:	df000017 	ldw	fp,0(sp)
   90974:	dec00104 	addi	sp,sp,4
   90978:	f800283a 	ret

0009097c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9097c:	defffe04 	addi	sp,sp,-8
   90980:	dfc00115 	stw	ra,4(sp)
   90984:	df000015 	stw	fp,0(sp)
   90988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9098c:	d0a00c17 	ldw	r2,-32720(gp)
   90990:	10000326 	beq	r2,zero,909a0 <alt_get_errno+0x24>
   90994:	d0a00c17 	ldw	r2,-32720(gp)
   90998:	103ee83a 	callr	r2
   9099c:	00000106 	br	909a4 <alt_get_errno+0x28>
   909a0:	d0a7fa04 	addi	r2,gp,-24600
}
   909a4:	e037883a 	mov	sp,fp
   909a8:	dfc00117 	ldw	ra,4(sp)
   909ac:	df000017 	ldw	fp,0(sp)
   909b0:	dec00204 	addi	sp,sp,8
   909b4:	f800283a 	ret

000909b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   909b8:	defffa04 	addi	sp,sp,-24
   909bc:	dfc00515 	stw	ra,20(sp)
   909c0:	df000415 	stw	fp,16(sp)
   909c4:	df000404 	addi	fp,sp,16
   909c8:	e13ffe15 	stw	r4,-8(fp)
   909cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   909d0:	e0bffe17 	ldw	r2,-8(fp)
   909d4:	10000326 	beq	r2,zero,909e4 <alt_dev_llist_insert+0x2c>
   909d8:	e0bffe17 	ldw	r2,-8(fp)
   909dc:	10800217 	ldw	r2,8(r2)
   909e0:	1000061e 	bne	r2,zero,909fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   909e4:	009097c0 	call	9097c <alt_get_errno>
   909e8:	1007883a 	mov	r3,r2
   909ec:	00800584 	movi	r2,22
   909f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   909f4:	00bffa84 	movi	r2,-22
   909f8:	00001306 	br	90a48 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   909fc:	e0bffe17 	ldw	r2,-8(fp)
   90a00:	e0ffff17 	ldw	r3,-4(fp)
   90a04:	e0fffc15 	stw	r3,-16(fp)
   90a08:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90a0c:	e0bffd17 	ldw	r2,-12(fp)
   90a10:	e0fffc17 	ldw	r3,-16(fp)
   90a14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90a18:	e0bffc17 	ldw	r2,-16(fp)
   90a1c:	10c00017 	ldw	r3,0(r2)
   90a20:	e0bffd17 	ldw	r2,-12(fp)
   90a24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90a28:	e0bffc17 	ldw	r2,-16(fp)
   90a2c:	10800017 	ldw	r2,0(r2)
   90a30:	e0fffd17 	ldw	r3,-12(fp)
   90a34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90a38:	e0bffc17 	ldw	r2,-16(fp)
   90a3c:	e0fffd17 	ldw	r3,-12(fp)
   90a40:	10c00015 	stw	r3,0(r2)

  return 0;  
   90a44:	0005883a 	mov	r2,zero
}
   90a48:	e037883a 	mov	sp,fp
   90a4c:	dfc00117 	ldw	ra,4(sp)
   90a50:	df000017 	ldw	fp,0(sp)
   90a54:	dec00204 	addi	sp,sp,8
   90a58:	f800283a 	ret

00090a5c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   90a5c:	defffd04 	addi	sp,sp,-12
   90a60:	dfc00215 	stw	ra,8(sp)
   90a64:	df000115 	stw	fp,4(sp)
   90a68:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90a6c:	00800274 	movhi	r2,9
   90a70:	1086eb04 	addi	r2,r2,7084
   90a74:	e0bfff15 	stw	r2,-4(fp)
   90a78:	00000606 	br	90a94 <_do_ctors+0x38>
        (*ctor) (); 
   90a7c:	e0bfff17 	ldw	r2,-4(fp)
   90a80:	10800017 	ldw	r2,0(r2)
   90a84:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90a88:	e0bfff17 	ldw	r2,-4(fp)
   90a8c:	10bfff04 	addi	r2,r2,-4
   90a90:	e0bfff15 	stw	r2,-4(fp)
   90a94:	e0ffff17 	ldw	r3,-4(fp)
   90a98:	00800274 	movhi	r2,9
   90a9c:	1086ec04 	addi	r2,r2,7088
   90aa0:	18bff62e 	bgeu	r3,r2,90a7c <rx_descriptor_end+0xfff90a1c>
        (*ctor) (); 
}
   90aa4:	0001883a 	nop
   90aa8:	e037883a 	mov	sp,fp
   90aac:	dfc00117 	ldw	ra,4(sp)
   90ab0:	df000017 	ldw	fp,0(sp)
   90ab4:	dec00204 	addi	sp,sp,8
   90ab8:	f800283a 	ret

00090abc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   90abc:	defffd04 	addi	sp,sp,-12
   90ac0:	dfc00215 	stw	ra,8(sp)
   90ac4:	df000115 	stw	fp,4(sp)
   90ac8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90acc:	00800274 	movhi	r2,9
   90ad0:	1086eb04 	addi	r2,r2,7084
   90ad4:	e0bfff15 	stw	r2,-4(fp)
   90ad8:	00000606 	br	90af4 <_do_dtors+0x38>
        (*dtor) (); 
   90adc:	e0bfff17 	ldw	r2,-4(fp)
   90ae0:	10800017 	ldw	r2,0(r2)
   90ae4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90ae8:	e0bfff17 	ldw	r2,-4(fp)
   90aec:	10bfff04 	addi	r2,r2,-4
   90af0:	e0bfff15 	stw	r2,-4(fp)
   90af4:	e0ffff17 	ldw	r3,-4(fp)
   90af8:	00800274 	movhi	r2,9
   90afc:	1086ec04 	addi	r2,r2,7088
   90b00:	18bff62e 	bgeu	r3,r2,90adc <rx_descriptor_end+0xfff90a7c>
        (*dtor) (); 
}
   90b04:	0001883a 	nop
   90b08:	e037883a 	mov	sp,fp
   90b0c:	dfc00117 	ldw	ra,4(sp)
   90b10:	df000017 	ldw	fp,0(sp)
   90b14:	dec00204 	addi	sp,sp,8
   90b18:	f800283a 	ret

00090b1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   90b1c:	defffa04 	addi	sp,sp,-24
   90b20:	dfc00515 	stw	ra,20(sp)
   90b24:	df000415 	stw	fp,16(sp)
   90b28:	df000404 	addi	fp,sp,16
   90b2c:	e13ffe15 	stw	r4,-8(fp)
   90b30:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   90b34:	e0bfff17 	ldw	r2,-4(fp)
   90b38:	10800017 	ldw	r2,0(r2)
   90b3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   90b40:	e13ffe17 	ldw	r4,-8(fp)
   90b44:	00887700 	call	88770 <strlen>
   90b48:	10800044 	addi	r2,r2,1
   90b4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90b50:	00000d06 	br	90b88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   90b54:	e0bffc17 	ldw	r2,-16(fp)
   90b58:	10800217 	ldw	r2,8(r2)
   90b5c:	e0fffd17 	ldw	r3,-12(fp)
   90b60:	180d883a 	mov	r6,r3
   90b64:	e17ffe17 	ldw	r5,-8(fp)
   90b68:	1009883a 	mov	r4,r2
   90b6c:	00917000 	call	91700 <memcmp>
   90b70:	1000021e 	bne	r2,zero,90b7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   90b74:	e0bffc17 	ldw	r2,-16(fp)
   90b78:	00000706 	br	90b98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90b7c:	e0bffc17 	ldw	r2,-16(fp)
   90b80:	10800017 	ldw	r2,0(r2)
   90b84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90b88:	e0fffc17 	ldw	r3,-16(fp)
   90b8c:	e0bfff17 	ldw	r2,-4(fp)
   90b90:	18bff01e 	bne	r3,r2,90b54 <rx_descriptor_end+0xfff90af4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   90b94:	0005883a 	mov	r2,zero
}
   90b98:	e037883a 	mov	sp,fp
   90b9c:	dfc00117 	ldw	ra,4(sp)
   90ba0:	df000017 	ldw	fp,0(sp)
   90ba4:	dec00204 	addi	sp,sp,8
   90ba8:	f800283a 	ret

00090bac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   90bac:	defffe04 	addi	sp,sp,-8
   90bb0:	dfc00115 	stw	ra,4(sp)
   90bb4:	df000015 	stw	fp,0(sp)
   90bb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   90bbc:	01440004 	movi	r5,4096
   90bc0:	0009883a 	mov	r4,zero
   90bc4:	00915880 	call	91588 <alt_icache_flush>
#endif
}
   90bc8:	0001883a 	nop
   90bcc:	e037883a 	mov	sp,fp
   90bd0:	dfc00117 	ldw	ra,4(sp)
   90bd4:	df000017 	ldw	fp,0(sp)
   90bd8:	dec00204 	addi	sp,sp,8
   90bdc:	f800283a 	ret

00090be0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   90be0:	defff904 	addi	sp,sp,-28
   90be4:	dfc00615 	stw	ra,24(sp)
   90be8:	df000515 	stw	fp,20(sp)
   90bec:	df000504 	addi	fp,sp,20
   90bf0:	e13ffc15 	stw	r4,-16(fp)
   90bf4:	e17ffd15 	stw	r5,-12(fp)
   90bf8:	e1bffe15 	stw	r6,-8(fp)
   90bfc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   90c00:	e0800217 	ldw	r2,8(fp)
   90c04:	d8800015 	stw	r2,0(sp)
   90c08:	e1ffff17 	ldw	r7,-4(fp)
   90c0c:	e1bffe17 	ldw	r6,-8(fp)
   90c10:	e17ffd17 	ldw	r5,-12(fp)
   90c14:	e13ffc17 	ldw	r4,-16(fp)
   90c18:	0090d900 	call	90d90 <alt_iic_isr_register>
}  
   90c1c:	e037883a 	mov	sp,fp
   90c20:	dfc00117 	ldw	ra,4(sp)
   90c24:	df000017 	ldw	fp,0(sp)
   90c28:	dec00204 	addi	sp,sp,8
   90c2c:	f800283a 	ret

00090c30 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   90c30:	defff904 	addi	sp,sp,-28
   90c34:	df000615 	stw	fp,24(sp)
   90c38:	df000604 	addi	fp,sp,24
   90c3c:	e13ffe15 	stw	r4,-8(fp)
   90c40:	e17fff15 	stw	r5,-4(fp)
   90c44:	e0bfff17 	ldw	r2,-4(fp)
   90c48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90c4c:	0005303a 	rdctl	r2,status
   90c50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90c54:	e0fffb17 	ldw	r3,-20(fp)
   90c58:	00bfff84 	movi	r2,-2
   90c5c:	1884703a 	and	r2,r3,r2
   90c60:	1001703a 	wrctl	status,r2
  
  return context;
   90c64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90c68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   90c6c:	00c00044 	movi	r3,1
   90c70:	e0bffa17 	ldw	r2,-24(fp)
   90c74:	1884983a 	sll	r2,r3,r2
   90c78:	1007883a 	mov	r3,r2
   90c7c:	d0a80117 	ldw	r2,-24572(gp)
   90c80:	1884b03a 	or	r2,r3,r2
   90c84:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90c88:	d0a80117 	ldw	r2,-24572(gp)
   90c8c:	100170fa 	wrctl	ienable,r2
   90c90:	e0bffc17 	ldw	r2,-16(fp)
   90c94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90c98:	e0bffd17 	ldw	r2,-12(fp)
   90c9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90ca0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   90ca4:	0001883a 	nop
}
   90ca8:	e037883a 	mov	sp,fp
   90cac:	df000017 	ldw	fp,0(sp)
   90cb0:	dec00104 	addi	sp,sp,4
   90cb4:	f800283a 	ret

00090cb8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   90cb8:	defff904 	addi	sp,sp,-28
   90cbc:	df000615 	stw	fp,24(sp)
   90cc0:	df000604 	addi	fp,sp,24
   90cc4:	e13ffe15 	stw	r4,-8(fp)
   90cc8:	e17fff15 	stw	r5,-4(fp)
   90ccc:	e0bfff17 	ldw	r2,-4(fp)
   90cd0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90cd4:	0005303a 	rdctl	r2,status
   90cd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90cdc:	e0fffb17 	ldw	r3,-20(fp)
   90ce0:	00bfff84 	movi	r2,-2
   90ce4:	1884703a 	and	r2,r3,r2
   90ce8:	1001703a 	wrctl	status,r2
  
  return context;
   90cec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90cf0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   90cf4:	00c00044 	movi	r3,1
   90cf8:	e0bffa17 	ldw	r2,-24(fp)
   90cfc:	1884983a 	sll	r2,r3,r2
   90d00:	0084303a 	nor	r2,zero,r2
   90d04:	1007883a 	mov	r3,r2
   90d08:	d0a80117 	ldw	r2,-24572(gp)
   90d0c:	1884703a 	and	r2,r3,r2
   90d10:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90d14:	d0a80117 	ldw	r2,-24572(gp)
   90d18:	100170fa 	wrctl	ienable,r2
   90d1c:	e0bffc17 	ldw	r2,-16(fp)
   90d20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90d24:	e0bffd17 	ldw	r2,-12(fp)
   90d28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90d2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   90d30:	0001883a 	nop
}
   90d34:	e037883a 	mov	sp,fp
   90d38:	df000017 	ldw	fp,0(sp)
   90d3c:	dec00104 	addi	sp,sp,4
   90d40:	f800283a 	ret

00090d44 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   90d44:	defffc04 	addi	sp,sp,-16
   90d48:	df000315 	stw	fp,12(sp)
   90d4c:	df000304 	addi	fp,sp,12
   90d50:	e13ffe15 	stw	r4,-8(fp)
   90d54:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   90d58:	000530fa 	rdctl	r2,ienable
   90d5c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   90d60:	00c00044 	movi	r3,1
   90d64:	e0bfff17 	ldw	r2,-4(fp)
   90d68:	1884983a 	sll	r2,r3,r2
   90d6c:	1007883a 	mov	r3,r2
   90d70:	e0bffd17 	ldw	r2,-12(fp)
   90d74:	1884703a 	and	r2,r3,r2
   90d78:	1004c03a 	cmpne	r2,r2,zero
   90d7c:	10803fcc 	andi	r2,r2,255
}
   90d80:	e037883a 	mov	sp,fp
   90d84:	df000017 	ldw	fp,0(sp)
   90d88:	dec00104 	addi	sp,sp,4
   90d8c:	f800283a 	ret

00090d90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   90d90:	defff504 	addi	sp,sp,-44
   90d94:	dfc00a15 	stw	ra,40(sp)
   90d98:	df000915 	stw	fp,36(sp)
   90d9c:	df000904 	addi	fp,sp,36
   90da0:	e13ffc15 	stw	r4,-16(fp)
   90da4:	e17ffd15 	stw	r5,-12(fp)
   90da8:	e1bffe15 	stw	r6,-8(fp)
   90dac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   90db0:	00bffa84 	movi	r2,-22
   90db4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   90db8:	e0bffd17 	ldw	r2,-12(fp)
   90dbc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   90dc0:	e0bff817 	ldw	r2,-32(fp)
   90dc4:	10800808 	cmpgei	r2,r2,32
   90dc8:	1000271e 	bne	r2,zero,90e68 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90dcc:	0005303a 	rdctl	r2,status
   90dd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90dd4:	e0fffb17 	ldw	r3,-20(fp)
   90dd8:	00bfff84 	movi	r2,-2
   90ddc:	1884703a 	and	r2,r3,r2
   90de0:	1001703a 	wrctl	status,r2
  
  return context;
   90de4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   90de8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   90dec:	00800274 	movhi	r2,9
   90df0:	10998f04 	addi	r2,r2,26172
   90df4:	e0fff817 	ldw	r3,-32(fp)
   90df8:	180690fa 	slli	r3,r3,3
   90dfc:	10c5883a 	add	r2,r2,r3
   90e00:	e0fffe17 	ldw	r3,-8(fp)
   90e04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   90e08:	00800274 	movhi	r2,9
   90e0c:	10998f04 	addi	r2,r2,26172
   90e10:	e0fff817 	ldw	r3,-32(fp)
   90e14:	180690fa 	slli	r3,r3,3
   90e18:	10c5883a 	add	r2,r2,r3
   90e1c:	10800104 	addi	r2,r2,4
   90e20:	e0ffff17 	ldw	r3,-4(fp)
   90e24:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   90e28:	e0bffe17 	ldw	r2,-8(fp)
   90e2c:	10000526 	beq	r2,zero,90e44 <alt_iic_isr_register+0xb4>
   90e30:	e0bff817 	ldw	r2,-32(fp)
   90e34:	100b883a 	mov	r5,r2
   90e38:	e13ffc17 	ldw	r4,-16(fp)
   90e3c:	0090c300 	call	90c30 <alt_ic_irq_enable>
   90e40:	00000406 	br	90e54 <alt_iic_isr_register+0xc4>
   90e44:	e0bff817 	ldw	r2,-32(fp)
   90e48:	100b883a 	mov	r5,r2
   90e4c:	e13ffc17 	ldw	r4,-16(fp)
   90e50:	0090cb80 	call	90cb8 <alt_ic_irq_disable>
   90e54:	e0bff715 	stw	r2,-36(fp)
   90e58:	e0bffa17 	ldw	r2,-24(fp)
   90e5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e60:	e0bff917 	ldw	r2,-28(fp)
   90e64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   90e68:	e0bff717 	ldw	r2,-36(fp)
}
   90e6c:	e037883a 	mov	sp,fp
   90e70:	dfc00117 	ldw	ra,4(sp)
   90e74:	df000017 	ldw	fp,0(sp)
   90e78:	dec00204 	addi	sp,sp,8
   90e7c:	f800283a 	ret

00090e80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   90e80:	defff904 	addi	sp,sp,-28
   90e84:	dfc00615 	stw	ra,24(sp)
   90e88:	df000515 	stw	fp,20(sp)
   90e8c:	df000504 	addi	fp,sp,20
   90e90:	e13ffc15 	stw	r4,-16(fp)
   90e94:	e17ffd15 	stw	r5,-12(fp)
   90e98:	e1bffe15 	stw	r6,-8(fp)
   90e9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   90ea0:	e1bfff17 	ldw	r6,-4(fp)
   90ea4:	e17ffe17 	ldw	r5,-8(fp)
   90ea8:	e13ffd17 	ldw	r4,-12(fp)
   90eac:	00910c00 	call	910c0 <open>
   90eb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   90eb4:	e0bffb17 	ldw	r2,-20(fp)
   90eb8:	10001c16 	blt	r2,zero,90f2c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   90ebc:	00800274 	movhi	r2,9
   90ec0:	108bf004 	addi	r2,r2,12224
   90ec4:	e0fffb17 	ldw	r3,-20(fp)
   90ec8:	18c00324 	muli	r3,r3,12
   90ecc:	10c5883a 	add	r2,r2,r3
   90ed0:	10c00017 	ldw	r3,0(r2)
   90ed4:	e0bffc17 	ldw	r2,-16(fp)
   90ed8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   90edc:	00800274 	movhi	r2,9
   90ee0:	108bf004 	addi	r2,r2,12224
   90ee4:	e0fffb17 	ldw	r3,-20(fp)
   90ee8:	18c00324 	muli	r3,r3,12
   90eec:	10c5883a 	add	r2,r2,r3
   90ef0:	10800104 	addi	r2,r2,4
   90ef4:	10c00017 	ldw	r3,0(r2)
   90ef8:	e0bffc17 	ldw	r2,-16(fp)
   90efc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   90f00:	00800274 	movhi	r2,9
   90f04:	108bf004 	addi	r2,r2,12224
   90f08:	e0fffb17 	ldw	r3,-20(fp)
   90f0c:	18c00324 	muli	r3,r3,12
   90f10:	10c5883a 	add	r2,r2,r3
   90f14:	10800204 	addi	r2,r2,8
   90f18:	10c00017 	ldw	r3,0(r2)
   90f1c:	e0bffc17 	ldw	r2,-16(fp)
   90f20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   90f24:	e13ffb17 	ldw	r4,-20(fp)
   90f28:	008eba40 	call	8eba4 <alt_release_fd>
  }
} 
   90f2c:	0001883a 	nop
   90f30:	e037883a 	mov	sp,fp
   90f34:	dfc00117 	ldw	ra,4(sp)
   90f38:	df000017 	ldw	fp,0(sp)
   90f3c:	dec00204 	addi	sp,sp,8
   90f40:	f800283a 	ret

00090f44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   90f44:	defffb04 	addi	sp,sp,-20
   90f48:	dfc00415 	stw	ra,16(sp)
   90f4c:	df000315 	stw	fp,12(sp)
   90f50:	df000304 	addi	fp,sp,12
   90f54:	e13ffd15 	stw	r4,-12(fp)
   90f58:	e17ffe15 	stw	r5,-8(fp)
   90f5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   90f60:	01c07fc4 	movi	r7,511
   90f64:	01800044 	movi	r6,1
   90f68:	e17ffd17 	ldw	r5,-12(fp)
   90f6c:	01000274 	movhi	r4,9
   90f70:	210bf304 	addi	r4,r4,12236
   90f74:	0090e800 	call	90e80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   90f78:	01c07fc4 	movi	r7,511
   90f7c:	000d883a 	mov	r6,zero
   90f80:	e17ffe17 	ldw	r5,-8(fp)
   90f84:	01000274 	movhi	r4,9
   90f88:	210bf004 	addi	r4,r4,12224
   90f8c:	0090e800 	call	90e80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   90f90:	01c07fc4 	movi	r7,511
   90f94:	01800044 	movi	r6,1
   90f98:	e17fff17 	ldw	r5,-4(fp)
   90f9c:	01000274 	movhi	r4,9
   90fa0:	210bf604 	addi	r4,r4,12248
   90fa4:	0090e800 	call	90e80 <alt_open_fd>
}  
   90fa8:	0001883a 	nop
   90fac:	e037883a 	mov	sp,fp
   90fb0:	dfc00117 	ldw	ra,4(sp)
   90fb4:	df000017 	ldw	fp,0(sp)
   90fb8:	dec00204 	addi	sp,sp,8
   90fbc:	f800283a 	ret

00090fc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90fc0:	defffe04 	addi	sp,sp,-8
   90fc4:	dfc00115 	stw	ra,4(sp)
   90fc8:	df000015 	stw	fp,0(sp)
   90fcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90fd0:	d0a00c17 	ldw	r2,-32720(gp)
   90fd4:	10000326 	beq	r2,zero,90fe4 <alt_get_errno+0x24>
   90fd8:	d0a00c17 	ldw	r2,-32720(gp)
   90fdc:	103ee83a 	callr	r2
   90fe0:	00000106 	br	90fe8 <alt_get_errno+0x28>
   90fe4:	d0a7fa04 	addi	r2,gp,-24600
}
   90fe8:	e037883a 	mov	sp,fp
   90fec:	dfc00117 	ldw	ra,4(sp)
   90ff0:	df000017 	ldw	fp,0(sp)
   90ff4:	dec00204 	addi	sp,sp,8
   90ff8:	f800283a 	ret

00090ffc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   90ffc:	defffd04 	addi	sp,sp,-12
   91000:	df000215 	stw	fp,8(sp)
   91004:	df000204 	addi	fp,sp,8
   91008:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   9100c:	e0bfff17 	ldw	r2,-4(fp)
   91010:	10800217 	ldw	r2,8(r2)
   91014:	10d00034 	orhi	r3,r2,16384
   91018:	e0bfff17 	ldw	r2,-4(fp)
   9101c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   91020:	e03ffe15 	stw	zero,-8(fp)
   91024:	00001d06 	br	9109c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91028:	00800274 	movhi	r2,9
   9102c:	108bf004 	addi	r2,r2,12224
   91030:	e0fffe17 	ldw	r3,-8(fp)
   91034:	18c00324 	muli	r3,r3,12
   91038:	10c5883a 	add	r2,r2,r3
   9103c:	10c00017 	ldw	r3,0(r2)
   91040:	e0bfff17 	ldw	r2,-4(fp)
   91044:	10800017 	ldw	r2,0(r2)
   91048:	1880111e 	bne	r3,r2,91090 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9104c:	00800274 	movhi	r2,9
   91050:	108bf004 	addi	r2,r2,12224
   91054:	e0fffe17 	ldw	r3,-8(fp)
   91058:	18c00324 	muli	r3,r3,12
   9105c:	10c5883a 	add	r2,r2,r3
   91060:	10800204 	addi	r2,r2,8
   91064:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91068:	1000090e 	bge	r2,zero,91090 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   9106c:	e0bffe17 	ldw	r2,-8(fp)
   91070:	10c00324 	muli	r3,r2,12
   91074:	00800274 	movhi	r2,9
   91078:	108bf004 	addi	r2,r2,12224
   9107c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   91080:	e0bfff17 	ldw	r2,-4(fp)
   91084:	18800226 	beq	r3,r2,91090 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   91088:	00bffcc4 	movi	r2,-13
   9108c:	00000806 	br	910b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   91090:	e0bffe17 	ldw	r2,-8(fp)
   91094:	10800044 	addi	r2,r2,1
   91098:	e0bffe15 	stw	r2,-8(fp)
   9109c:	d0a00b17 	ldw	r2,-32724(gp)
   910a0:	1007883a 	mov	r3,r2
   910a4:	e0bffe17 	ldw	r2,-8(fp)
   910a8:	18bfdf2e 	bgeu	r3,r2,91028 <rx_descriptor_end+0xfff90fc8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   910ac:	0005883a 	mov	r2,zero
}
   910b0:	e037883a 	mov	sp,fp
   910b4:	df000017 	ldw	fp,0(sp)
   910b8:	dec00104 	addi	sp,sp,4
   910bc:	f800283a 	ret

000910c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   910c0:	defff604 	addi	sp,sp,-40
   910c4:	dfc00915 	stw	ra,36(sp)
   910c8:	df000815 	stw	fp,32(sp)
   910cc:	df000804 	addi	fp,sp,32
   910d0:	e13ffd15 	stw	r4,-12(fp)
   910d4:	e17ffe15 	stw	r5,-8(fp)
   910d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   910dc:	00bfffc4 	movi	r2,-1
   910e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   910e4:	00bffb44 	movi	r2,-19
   910e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   910ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   910f0:	d1600904 	addi	r5,gp,-32732
   910f4:	e13ffd17 	ldw	r4,-12(fp)
   910f8:	0090b1c0 	call	90b1c <alt_find_dev>
   910fc:	e0bff815 	stw	r2,-32(fp)
   91100:	e0bff817 	ldw	r2,-32(fp)
   91104:	1000051e 	bne	r2,zero,9111c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   91108:	e13ffd17 	ldw	r4,-12(fp)
   9110c:	00913dc0 	call	913dc <alt_find_file>
   91110:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   91114:	00800044 	movi	r2,1
   91118:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   9111c:	e0bff817 	ldw	r2,-32(fp)
   91120:	10002926 	beq	r2,zero,911c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   91124:	e13ff817 	ldw	r4,-32(fp)
   91128:	00914e40 	call	914e4 <alt_get_fd>
   9112c:	e0bff915 	stw	r2,-28(fp)
   91130:	e0bff917 	ldw	r2,-28(fp)
   91134:	1000030e 	bge	r2,zero,91144 <open+0x84>
    {
      status = index;
   91138:	e0bff917 	ldw	r2,-28(fp)
   9113c:	e0bffa15 	stw	r2,-24(fp)
   91140:	00002306 	br	911d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   91144:	e0bff917 	ldw	r2,-28(fp)
   91148:	10c00324 	muli	r3,r2,12
   9114c:	00800274 	movhi	r2,9
   91150:	108bf004 	addi	r2,r2,12224
   91154:	1885883a 	add	r2,r3,r2
   91158:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   9115c:	e0fffe17 	ldw	r3,-8(fp)
   91160:	00900034 	movhi	r2,16384
   91164:	10bfffc4 	addi	r2,r2,-1
   91168:	1886703a 	and	r3,r3,r2
   9116c:	e0bffc17 	ldw	r2,-16(fp)
   91170:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   91174:	e0bffb17 	ldw	r2,-20(fp)
   91178:	1000051e 	bne	r2,zero,91190 <open+0xd0>
   9117c:	e13ffc17 	ldw	r4,-16(fp)
   91180:	0090ffc0 	call	90ffc <alt_file_locked>
   91184:	e0bffa15 	stw	r2,-24(fp)
   91188:	e0bffa17 	ldw	r2,-24(fp)
   9118c:	10001016 	blt	r2,zero,911d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   91190:	e0bff817 	ldw	r2,-32(fp)
   91194:	10800317 	ldw	r2,12(r2)
   91198:	10000826 	beq	r2,zero,911bc <open+0xfc>
   9119c:	e0bff817 	ldw	r2,-32(fp)
   911a0:	10800317 	ldw	r2,12(r2)
   911a4:	e1ffff17 	ldw	r7,-4(fp)
   911a8:	e1bffe17 	ldw	r6,-8(fp)
   911ac:	e17ffd17 	ldw	r5,-12(fp)
   911b0:	e13ffc17 	ldw	r4,-16(fp)
   911b4:	103ee83a 	callr	r2
   911b8:	00000106 	br	911c0 <open+0x100>
   911bc:	0005883a 	mov	r2,zero
   911c0:	e0bffa15 	stw	r2,-24(fp)
   911c4:	00000206 	br	911d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   911c8:	00bffb44 	movi	r2,-19
   911cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   911d0:	e0bffa17 	ldw	r2,-24(fp)
   911d4:	1000090e 	bge	r2,zero,911fc <open+0x13c>
  {
    alt_release_fd (index);  
   911d8:	e13ff917 	ldw	r4,-28(fp)
   911dc:	008eba40 	call	8eba4 <alt_release_fd>
    ALT_ERRNO = -status;
   911e0:	0090fc00 	call	90fc0 <alt_get_errno>
   911e4:	1007883a 	mov	r3,r2
   911e8:	e0bffa17 	ldw	r2,-24(fp)
   911ec:	0085c83a 	sub	r2,zero,r2
   911f0:	18800015 	stw	r2,0(r3)
    return -1;
   911f4:	00bfffc4 	movi	r2,-1
   911f8:	00000106 	br	91200 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   911fc:	e0bff917 	ldw	r2,-28(fp)
}
   91200:	e037883a 	mov	sp,fp
   91204:	dfc00117 	ldw	ra,4(sp)
   91208:	df000017 	ldw	fp,0(sp)
   9120c:	dec00204 	addi	sp,sp,8
   91210:	f800283a 	ret

00091214 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   91214:	defffa04 	addi	sp,sp,-24
   91218:	df000515 	stw	fp,20(sp)
   9121c:	df000504 	addi	fp,sp,20
   91220:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91224:	0005303a 	rdctl	r2,status
   91228:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9122c:	e0fffc17 	ldw	r3,-16(fp)
   91230:	00bfff84 	movi	r2,-2
   91234:	1884703a 	and	r2,r3,r2
   91238:	1001703a 	wrctl	status,r2
  
  return context;
   9123c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   91240:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   91244:	e0bfff17 	ldw	r2,-4(fp)
   91248:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   9124c:	e0bffd17 	ldw	r2,-12(fp)
   91250:	10800017 	ldw	r2,0(r2)
   91254:	e0fffd17 	ldw	r3,-12(fp)
   91258:	18c00117 	ldw	r3,4(r3)
   9125c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   91260:	e0bffd17 	ldw	r2,-12(fp)
   91264:	10800117 	ldw	r2,4(r2)
   91268:	e0fffd17 	ldw	r3,-12(fp)
   9126c:	18c00017 	ldw	r3,0(r3)
   91270:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   91274:	e0bffd17 	ldw	r2,-12(fp)
   91278:	e0fffd17 	ldw	r3,-12(fp)
   9127c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   91280:	e0bffd17 	ldw	r2,-12(fp)
   91284:	e0fffd17 	ldw	r3,-12(fp)
   91288:	10c00015 	stw	r3,0(r2)
   9128c:	e0bffb17 	ldw	r2,-20(fp)
   91290:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91294:	e0bffe17 	ldw	r2,-8(fp)
   91298:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   9129c:	0001883a 	nop
   912a0:	e037883a 	mov	sp,fp
   912a4:	df000017 	ldw	fp,0(sp)
   912a8:	dec00104 	addi	sp,sp,4
   912ac:	f800283a 	ret

000912b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   912b0:	defffb04 	addi	sp,sp,-20
   912b4:	dfc00415 	stw	ra,16(sp)
   912b8:	df000315 	stw	fp,12(sp)
   912bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   912c0:	d0a01117 	ldw	r2,-32700(gp)
   912c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   912c8:	d0a80317 	ldw	r2,-24564(gp)
   912cc:	10800044 	addi	r2,r2,1
   912d0:	d0a80315 	stw	r2,-24564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   912d4:	00002e06 	br	91390 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   912d8:	e0bffd17 	ldw	r2,-12(fp)
   912dc:	10800017 	ldw	r2,0(r2)
   912e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   912e4:	e0bffd17 	ldw	r2,-12(fp)
   912e8:	10800403 	ldbu	r2,16(r2)
   912ec:	10803fcc 	andi	r2,r2,255
   912f0:	10000426 	beq	r2,zero,91304 <alt_tick+0x54>
   912f4:	d0a80317 	ldw	r2,-24564(gp)
   912f8:	1000021e 	bne	r2,zero,91304 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   912fc:	e0bffd17 	ldw	r2,-12(fp)
   91300:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   91304:	e0bffd17 	ldw	r2,-12(fp)
   91308:	10800217 	ldw	r2,8(r2)
   9130c:	d0e80317 	ldw	r3,-24564(gp)
   91310:	18801d36 	bltu	r3,r2,91388 <alt_tick+0xd8>
   91314:	e0bffd17 	ldw	r2,-12(fp)
   91318:	10800403 	ldbu	r2,16(r2)
   9131c:	10803fcc 	andi	r2,r2,255
   91320:	1000191e 	bne	r2,zero,91388 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   91324:	e0bffd17 	ldw	r2,-12(fp)
   91328:	10800317 	ldw	r2,12(r2)
   9132c:	e0fffd17 	ldw	r3,-12(fp)
   91330:	18c00517 	ldw	r3,20(r3)
   91334:	1809883a 	mov	r4,r3
   91338:	103ee83a 	callr	r2
   9133c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   91340:	e0bfff17 	ldw	r2,-4(fp)
   91344:	1000031e 	bne	r2,zero,91354 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   91348:	e13ffd17 	ldw	r4,-12(fp)
   9134c:	00912140 	call	91214 <alt_alarm_stop>
   91350:	00000d06 	br	91388 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   91354:	e0bffd17 	ldw	r2,-12(fp)
   91358:	10c00217 	ldw	r3,8(r2)
   9135c:	e0bfff17 	ldw	r2,-4(fp)
   91360:	1887883a 	add	r3,r3,r2
   91364:	e0bffd17 	ldw	r2,-12(fp)
   91368:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   9136c:	e0bffd17 	ldw	r2,-12(fp)
   91370:	10c00217 	ldw	r3,8(r2)
   91374:	d0a80317 	ldw	r2,-24564(gp)
   91378:	1880032e 	bgeu	r3,r2,91388 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   9137c:	e0bffd17 	ldw	r2,-12(fp)
   91380:	00c00044 	movi	r3,1
   91384:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   91388:	e0bffe17 	ldw	r2,-8(fp)
   9138c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91390:	e0fffd17 	ldw	r3,-12(fp)
   91394:	d0a01104 	addi	r2,gp,-32700
   91398:	18bfcf1e 	bne	r3,r2,912d8 <rx_descriptor_end+0xfff91278>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   9139c:	0001883a 	nop
}
   913a0:	0001883a 	nop
   913a4:	e037883a 	mov	sp,fp
   913a8:	dfc00117 	ldw	ra,4(sp)
   913ac:	df000017 	ldw	fp,0(sp)
   913b0:	dec00204 	addi	sp,sp,8
   913b4:	f800283a 	ret

000913b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   913b8:	deffff04 	addi	sp,sp,-4
   913bc:	df000015 	stw	fp,0(sp)
   913c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   913c4:	000170fa 	wrctl	ienable,zero
}
   913c8:	0001883a 	nop
   913cc:	e037883a 	mov	sp,fp
   913d0:	df000017 	ldw	fp,0(sp)
   913d4:	dec00104 	addi	sp,sp,4
   913d8:	f800283a 	ret

000913dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   913dc:	defffb04 	addi	sp,sp,-20
   913e0:	dfc00415 	stw	ra,16(sp)
   913e4:	df000315 	stw	fp,12(sp)
   913e8:	df000304 	addi	fp,sp,12
   913ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   913f0:	d0a00717 	ldw	r2,-32740(gp)
   913f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   913f8:	00003106 	br	914c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   913fc:	e0bffd17 	ldw	r2,-12(fp)
   91400:	10800217 	ldw	r2,8(r2)
   91404:	1009883a 	mov	r4,r2
   91408:	00887700 	call	88770 <strlen>
   9140c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   91410:	e0bffd17 	ldw	r2,-12(fp)
   91414:	10c00217 	ldw	r3,8(r2)
   91418:	e0bffe17 	ldw	r2,-8(fp)
   9141c:	10bfffc4 	addi	r2,r2,-1
   91420:	1885883a 	add	r2,r3,r2
   91424:	10800003 	ldbu	r2,0(r2)
   91428:	10803fcc 	andi	r2,r2,255
   9142c:	1080201c 	xori	r2,r2,128
   91430:	10bfe004 	addi	r2,r2,-128
   91434:	10800bd8 	cmpnei	r2,r2,47
   91438:	1000031e 	bne	r2,zero,91448 <alt_find_file+0x6c>
    {
      len -= 1;
   9143c:	e0bffe17 	ldw	r2,-8(fp)
   91440:	10bfffc4 	addi	r2,r2,-1
   91444:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   91448:	e0bffe17 	ldw	r2,-8(fp)
   9144c:	e0ffff17 	ldw	r3,-4(fp)
   91450:	1885883a 	add	r2,r3,r2
   91454:	10800003 	ldbu	r2,0(r2)
   91458:	10803fcc 	andi	r2,r2,255
   9145c:	1080201c 	xori	r2,r2,128
   91460:	10bfe004 	addi	r2,r2,-128
   91464:	10800be0 	cmpeqi	r2,r2,47
   91468:	1000081e 	bne	r2,zero,9148c <alt_find_file+0xb0>
   9146c:	e0bffe17 	ldw	r2,-8(fp)
   91470:	e0ffff17 	ldw	r3,-4(fp)
   91474:	1885883a 	add	r2,r3,r2
   91478:	10800003 	ldbu	r2,0(r2)
   9147c:	10803fcc 	andi	r2,r2,255
   91480:	1080201c 	xori	r2,r2,128
   91484:	10bfe004 	addi	r2,r2,-128
   91488:	10000a1e 	bne	r2,zero,914b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   9148c:	e0bffd17 	ldw	r2,-12(fp)
   91490:	10800217 	ldw	r2,8(r2)
   91494:	e0fffe17 	ldw	r3,-8(fp)
   91498:	180d883a 	mov	r6,r3
   9149c:	e17fff17 	ldw	r5,-4(fp)
   914a0:	1009883a 	mov	r4,r2
   914a4:	00917000 	call	91700 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   914a8:	1000021e 	bne	r2,zero,914b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   914ac:	e0bffd17 	ldw	r2,-12(fp)
   914b0:	00000706 	br	914d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   914b4:	e0bffd17 	ldw	r2,-12(fp)
   914b8:	10800017 	ldw	r2,0(r2)
   914bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   914c0:	e0fffd17 	ldw	r3,-12(fp)
   914c4:	d0a00704 	addi	r2,gp,-32740
   914c8:	18bfcc1e 	bne	r3,r2,913fc <rx_descriptor_end+0xfff9139c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   914cc:	0005883a 	mov	r2,zero
}
   914d0:	e037883a 	mov	sp,fp
   914d4:	dfc00117 	ldw	ra,4(sp)
   914d8:	df000017 	ldw	fp,0(sp)
   914dc:	dec00204 	addi	sp,sp,8
   914e0:	f800283a 	ret

000914e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   914e4:	defffc04 	addi	sp,sp,-16
   914e8:	df000315 	stw	fp,12(sp)
   914ec:	df000304 	addi	fp,sp,12
   914f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   914f4:	00bffa04 	movi	r2,-24
   914f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   914fc:	e03ffd15 	stw	zero,-12(fp)
   91500:	00001906 	br	91568 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   91504:	00800274 	movhi	r2,9
   91508:	108bf004 	addi	r2,r2,12224
   9150c:	e0fffd17 	ldw	r3,-12(fp)
   91510:	18c00324 	muli	r3,r3,12
   91514:	10c5883a 	add	r2,r2,r3
   91518:	10800017 	ldw	r2,0(r2)
   9151c:	10000f1e 	bne	r2,zero,9155c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   91520:	00800274 	movhi	r2,9
   91524:	108bf004 	addi	r2,r2,12224
   91528:	e0fffd17 	ldw	r3,-12(fp)
   9152c:	18c00324 	muli	r3,r3,12
   91530:	10c5883a 	add	r2,r2,r3
   91534:	e0ffff17 	ldw	r3,-4(fp)
   91538:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   9153c:	d0e00b17 	ldw	r3,-32724(gp)
   91540:	e0bffd17 	ldw	r2,-12(fp)
   91544:	1880020e 	bge	r3,r2,91550 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   91548:	e0bffd17 	ldw	r2,-12(fp)
   9154c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   91550:	e0bffd17 	ldw	r2,-12(fp)
   91554:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   91558:	00000606 	br	91574 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9155c:	e0bffd17 	ldw	r2,-12(fp)
   91560:	10800044 	addi	r2,r2,1
   91564:	e0bffd15 	stw	r2,-12(fp)
   91568:	e0bffd17 	ldw	r2,-12(fp)
   9156c:	10800810 	cmplti	r2,r2,32
   91570:	103fe41e 	bne	r2,zero,91504 <rx_descriptor_end+0xfff914a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   91574:	e0bffe17 	ldw	r2,-8(fp)
}
   91578:	e037883a 	mov	sp,fp
   9157c:	df000017 	ldw	fp,0(sp)
   91580:	dec00104 	addi	sp,sp,4
   91584:	f800283a 	ret

00091588 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   91588:	defffb04 	addi	sp,sp,-20
   9158c:	df000415 	stw	fp,16(sp)
   91590:	df000404 	addi	fp,sp,16
   91594:	e13ffe15 	stw	r4,-8(fp)
   91598:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   9159c:	e0bfff17 	ldw	r2,-4(fp)
   915a0:	10840070 	cmpltui	r2,r2,4097
   915a4:	1000021e 	bne	r2,zero,915b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   915a8:	00840004 	movi	r2,4096
   915ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   915b0:	e0fffe17 	ldw	r3,-8(fp)
   915b4:	e0bfff17 	ldw	r2,-4(fp)
   915b8:	1885883a 	add	r2,r3,r2
   915bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   915c0:	e0bffe17 	ldw	r2,-8(fp)
   915c4:	e0bffc15 	stw	r2,-16(fp)
   915c8:	00000506 	br	915e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   915cc:	e0bffc17 	ldw	r2,-16(fp)
   915d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   915d4:	e0bffc17 	ldw	r2,-16(fp)
   915d8:	10800804 	addi	r2,r2,32
   915dc:	e0bffc15 	stw	r2,-16(fp)
   915e0:	e0fffc17 	ldw	r3,-16(fp)
   915e4:	e0bffd17 	ldw	r2,-12(fp)
   915e8:	18bff836 	bltu	r3,r2,915cc <rx_descriptor_end+0xfff9156c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   915ec:	e0bffe17 	ldw	r2,-8(fp)
   915f0:	108007cc 	andi	r2,r2,31
   915f4:	10000226 	beq	r2,zero,91600 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   915f8:	e0bffc17 	ldw	r2,-16(fp)
   915fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   91600:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   91604:	0001883a 	nop
   91608:	e037883a 	mov	sp,fp
   9160c:	df000017 	ldw	fp,0(sp)
   91610:	dec00104 	addi	sp,sp,4
   91614:	f800283a 	ret

00091618 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   91618:	defffe04 	addi	sp,sp,-8
   9161c:	df000115 	stw	fp,4(sp)
   91620:	df000104 	addi	fp,sp,4
   91624:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   91628:	e0bfff17 	ldw	r2,-4(fp)
   9162c:	10bffe84 	addi	r2,r2,-6
   91630:	10c00428 	cmpgeui	r3,r2,16
   91634:	18001a1e 	bne	r3,zero,916a0 <alt_exception_cause_generated_bad_addr+0x88>
   91638:	100690ba 	slli	r3,r2,2
   9163c:	00800274 	movhi	r2,9
   91640:	10859404 	addi	r2,r2,5712
   91644:	1885883a 	add	r2,r3,r2
   91648:	10800017 	ldw	r2,0(r2)
   9164c:	1000683a 	jmp	r2
   91650:	00091690 	cmplti	zero,zero,9306
   91654:	00091690 	cmplti	zero,zero,9306
   91658:	000916a0 	cmpeqi	zero,zero,9306
   9165c:	000916a0 	cmpeqi	zero,zero,9306
   91660:	000916a0 	cmpeqi	zero,zero,9306
   91664:	00091690 	cmplti	zero,zero,9306
   91668:	00091698 	cmpnei	zero,zero,9306
   9166c:	000916a0 	cmpeqi	zero,zero,9306
   91670:	00091690 	cmplti	zero,zero,9306
   91674:	00091690 	cmplti	zero,zero,9306
   91678:	000916a0 	cmpeqi	zero,zero,9306
   9167c:	00091690 	cmplti	zero,zero,9306
   91680:	00091698 	cmpnei	zero,zero,9306
   91684:	000916a0 	cmpeqi	zero,zero,9306
   91688:	000916a0 	cmpeqi	zero,zero,9306
   9168c:	00091690 	cmplti	zero,zero,9306
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   91690:	00800044 	movi	r2,1
   91694:	00000306 	br	916a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   91698:	0005883a 	mov	r2,zero
   9169c:	00000106 	br	916a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   916a0:	0005883a 	mov	r2,zero
  }
}
   916a4:	e037883a 	mov	sp,fp
   916a8:	df000017 	ldw	fp,0(sp)
   916ac:	dec00104 	addi	sp,sp,4
   916b0:	f800283a 	ret

000916b4 <atexit>:
   916b4:	200b883a 	mov	r5,r4
   916b8:	000f883a 	mov	r7,zero
   916bc:	000d883a 	mov	r6,zero
   916c0:	0009883a 	mov	r4,zero
   916c4:	00918e41 	jmpi	918e4 <__register_exitproc>

000916c8 <exit>:
   916c8:	defffe04 	addi	sp,sp,-8
   916cc:	000b883a 	mov	r5,zero
   916d0:	dc000015 	stw	r16,0(sp)
   916d4:	dfc00115 	stw	ra,4(sp)
   916d8:	2021883a 	mov	r16,r4
   916dc:	00919fc0 	call	919fc <__call_exitprocs>
   916e0:	00800274 	movhi	r2,9
   916e4:	10908104 	addi	r2,r2,16900
   916e8:	11000017 	ldw	r4,0(r2)
   916ec:	20800f17 	ldw	r2,60(r4)
   916f0:	10000126 	beq	r2,zero,916f8 <exit+0x30>
   916f4:	103ee83a 	callr	r2
   916f8:	8009883a 	mov	r4,r16
   916fc:	0091b7c0 	call	91b7c <_exit>

00091700 <memcmp>:
   91700:	01c000c4 	movi	r7,3
   91704:	3980192e 	bgeu	r7,r6,9176c <memcmp+0x6c>
   91708:	2144b03a 	or	r2,r4,r5
   9170c:	11c4703a 	and	r2,r2,r7
   91710:	10000f26 	beq	r2,zero,91750 <memcmp+0x50>
   91714:	20800003 	ldbu	r2,0(r4)
   91718:	28c00003 	ldbu	r3,0(r5)
   9171c:	10c0151e 	bne	r2,r3,91774 <memcmp+0x74>
   91720:	31bfff84 	addi	r6,r6,-2
   91724:	01ffffc4 	movi	r7,-1
   91728:	00000406 	br	9173c <memcmp+0x3c>
   9172c:	20800003 	ldbu	r2,0(r4)
   91730:	28c00003 	ldbu	r3,0(r5)
   91734:	31bfffc4 	addi	r6,r6,-1
   91738:	10c00e1e 	bne	r2,r3,91774 <memcmp+0x74>
   9173c:	21000044 	addi	r4,r4,1
   91740:	29400044 	addi	r5,r5,1
   91744:	31fff91e 	bne	r6,r7,9172c <rx_descriptor_end+0xfff916cc>
   91748:	0005883a 	mov	r2,zero
   9174c:	f800283a 	ret
   91750:	20c00017 	ldw	r3,0(r4)
   91754:	28800017 	ldw	r2,0(r5)
   91758:	18bfee1e 	bne	r3,r2,91714 <rx_descriptor_end+0xfff916b4>
   9175c:	31bfff04 	addi	r6,r6,-4
   91760:	21000104 	addi	r4,r4,4
   91764:	29400104 	addi	r5,r5,4
   91768:	39bff936 	bltu	r7,r6,91750 <rx_descriptor_end+0xfff916f0>
   9176c:	303fe91e 	bne	r6,zero,91714 <rx_descriptor_end+0xfff916b4>
   91770:	003ff506 	br	91748 <rx_descriptor_end+0xfff916e8>
   91774:	10c5c83a 	sub	r2,r2,r3
   91778:	f800283a 	ret

0009177c <_putc_r>:
   9177c:	defffc04 	addi	sp,sp,-16
   91780:	dc000215 	stw	r16,8(sp)
   91784:	dfc00315 	stw	ra,12(sp)
   91788:	2021883a 	mov	r16,r4
   9178c:	20000226 	beq	r4,zero,91798 <_putc_r+0x1c>
   91790:	20800e17 	ldw	r2,56(r4)
   91794:	10001b26 	beq	r2,zero,91804 <_putc_r+0x88>
   91798:	30800217 	ldw	r2,8(r6)
   9179c:	10bfffc4 	addi	r2,r2,-1
   917a0:	30800215 	stw	r2,8(r6)
   917a4:	10000a16 	blt	r2,zero,917d0 <_putc_r+0x54>
   917a8:	30800017 	ldw	r2,0(r6)
   917ac:	11400005 	stb	r5,0(r2)
   917b0:	30800017 	ldw	r2,0(r6)
   917b4:	10c00044 	addi	r3,r2,1
   917b8:	30c00015 	stw	r3,0(r6)
   917bc:	10800003 	ldbu	r2,0(r2)
   917c0:	dfc00317 	ldw	ra,12(sp)
   917c4:	dc000217 	ldw	r16,8(sp)
   917c8:	dec00404 	addi	sp,sp,16
   917cc:	f800283a 	ret
   917d0:	30c00617 	ldw	r3,24(r6)
   917d4:	10c00616 	blt	r2,r3,917f0 <_putc_r+0x74>
   917d8:	30800017 	ldw	r2,0(r6)
   917dc:	00c00284 	movi	r3,10
   917e0:	11400005 	stb	r5,0(r2)
   917e4:	30800017 	ldw	r2,0(r6)
   917e8:	11400003 	ldbu	r5,0(r2)
   917ec:	28fff11e 	bne	r5,r3,917b4 <rx_descriptor_end+0xfff91754>
   917f0:	8009883a 	mov	r4,r16
   917f4:	dfc00317 	ldw	ra,12(sp)
   917f8:	dc000217 	ldw	r16,8(sp)
   917fc:	dec00404 	addi	sp,sp,16
   91800:	008abec1 	jmpi	8abec <__swbuf_r>
   91804:	d9400015 	stw	r5,0(sp)
   91808:	d9800115 	stw	r6,4(sp)
   9180c:	0081f7c0 	call	81f7c <__sinit>
   91810:	d9800117 	ldw	r6,4(sp)
   91814:	d9400017 	ldw	r5,0(sp)
   91818:	003fdf06 	br	91798 <rx_descriptor_end+0xfff91738>

0009181c <putc>:
   9181c:	00800274 	movhi	r2,9
   91820:	defffc04 	addi	sp,sp,-16
   91824:	10908204 	addi	r2,r2,16904
   91828:	dc000115 	stw	r16,4(sp)
   9182c:	14000017 	ldw	r16,0(r2)
   91830:	dc400215 	stw	r17,8(sp)
   91834:	dfc00315 	stw	ra,12(sp)
   91838:	2023883a 	mov	r17,r4
   9183c:	80000226 	beq	r16,zero,91848 <putc+0x2c>
   91840:	80800e17 	ldw	r2,56(r16)
   91844:	10001a26 	beq	r2,zero,918b0 <putc+0x94>
   91848:	28800217 	ldw	r2,8(r5)
   9184c:	10bfffc4 	addi	r2,r2,-1
   91850:	28800215 	stw	r2,8(r5)
   91854:	10000b16 	blt	r2,zero,91884 <putc+0x68>
   91858:	28800017 	ldw	r2,0(r5)
   9185c:	14400005 	stb	r17,0(r2)
   91860:	28800017 	ldw	r2,0(r5)
   91864:	10c00044 	addi	r3,r2,1
   91868:	28c00015 	stw	r3,0(r5)
   9186c:	10800003 	ldbu	r2,0(r2)
   91870:	dfc00317 	ldw	ra,12(sp)
   91874:	dc400217 	ldw	r17,8(sp)
   91878:	dc000117 	ldw	r16,4(sp)
   9187c:	dec00404 	addi	sp,sp,16
   91880:	f800283a 	ret
   91884:	28c00617 	ldw	r3,24(r5)
   91888:	10c00e16 	blt	r2,r3,918c4 <putc+0xa8>
   9188c:	28800017 	ldw	r2,0(r5)
   91890:	01000284 	movi	r4,10
   91894:	14400005 	stb	r17,0(r2)
   91898:	28800017 	ldw	r2,0(r5)
   9189c:	10c00003 	ldbu	r3,0(r2)
   918a0:	193ff01e 	bne	r3,r4,91864 <rx_descriptor_end+0xfff91804>
   918a4:	280d883a 	mov	r6,r5
   918a8:	180b883a 	mov	r5,r3
   918ac:	00000706 	br	918cc <putc+0xb0>
   918b0:	8009883a 	mov	r4,r16
   918b4:	d9400015 	stw	r5,0(sp)
   918b8:	0081f7c0 	call	81f7c <__sinit>
   918bc:	d9400017 	ldw	r5,0(sp)
   918c0:	003fe106 	br	91848 <rx_descriptor_end+0xfff917e8>
   918c4:	280d883a 	mov	r6,r5
   918c8:	880b883a 	mov	r5,r17
   918cc:	8009883a 	mov	r4,r16
   918d0:	dfc00317 	ldw	ra,12(sp)
   918d4:	dc400217 	ldw	r17,8(sp)
   918d8:	dc000117 	ldw	r16,4(sp)
   918dc:	dec00404 	addi	sp,sp,16
   918e0:	008abec1 	jmpi	8abec <__swbuf_r>

000918e4 <__register_exitproc>:
   918e4:	defffa04 	addi	sp,sp,-24
   918e8:	dc000315 	stw	r16,12(sp)
   918ec:	04000274 	movhi	r16,9
   918f0:	84108104 	addi	r16,r16,16900
   918f4:	80c00017 	ldw	r3,0(r16)
   918f8:	dc400415 	stw	r17,16(sp)
   918fc:	dfc00515 	stw	ra,20(sp)
   91900:	18805217 	ldw	r2,328(r3)
   91904:	2023883a 	mov	r17,r4
   91908:	10003726 	beq	r2,zero,919e8 <__register_exitproc+0x104>
   9190c:	10c00117 	ldw	r3,4(r2)
   91910:	010007c4 	movi	r4,31
   91914:	20c00e16 	blt	r4,r3,91950 <__register_exitproc+0x6c>
   91918:	1a000044 	addi	r8,r3,1
   9191c:	8800221e 	bne	r17,zero,919a8 <__register_exitproc+0xc4>
   91920:	18c00084 	addi	r3,r3,2
   91924:	18c7883a 	add	r3,r3,r3
   91928:	18c7883a 	add	r3,r3,r3
   9192c:	12000115 	stw	r8,4(r2)
   91930:	10c7883a 	add	r3,r2,r3
   91934:	19400015 	stw	r5,0(r3)
   91938:	0005883a 	mov	r2,zero
   9193c:	dfc00517 	ldw	ra,20(sp)
   91940:	dc400417 	ldw	r17,16(sp)
   91944:	dc000317 	ldw	r16,12(sp)
   91948:	dec00604 	addi	sp,sp,24
   9194c:	f800283a 	ret
   91950:	00800234 	movhi	r2,8
   91954:	10896204 	addi	r2,r2,9608
   91958:	10002626 	beq	r2,zero,919f4 <__register_exitproc+0x110>
   9195c:	01006404 	movi	r4,400
   91960:	d9400015 	stw	r5,0(sp)
   91964:	d9800115 	stw	r6,4(sp)
   91968:	d9c00215 	stw	r7,8(sp)
   9196c:	00825880 	call	82588 <malloc>
   91970:	d9400017 	ldw	r5,0(sp)
   91974:	d9800117 	ldw	r6,4(sp)
   91978:	d9c00217 	ldw	r7,8(sp)
   9197c:	10001d26 	beq	r2,zero,919f4 <__register_exitproc+0x110>
   91980:	81000017 	ldw	r4,0(r16)
   91984:	10000115 	stw	zero,4(r2)
   91988:	02000044 	movi	r8,1
   9198c:	22405217 	ldw	r9,328(r4)
   91990:	0007883a 	mov	r3,zero
   91994:	12400015 	stw	r9,0(r2)
   91998:	20805215 	stw	r2,328(r4)
   9199c:	10006215 	stw	zero,392(r2)
   919a0:	10006315 	stw	zero,396(r2)
   919a4:	883fde26 	beq	r17,zero,91920 <rx_descriptor_end+0xfff918c0>
   919a8:	18c9883a 	add	r4,r3,r3
   919ac:	2109883a 	add	r4,r4,r4
   919b0:	1109883a 	add	r4,r2,r4
   919b4:	21802215 	stw	r6,136(r4)
   919b8:	01800044 	movi	r6,1
   919bc:	12406217 	ldw	r9,392(r2)
   919c0:	30cc983a 	sll	r6,r6,r3
   919c4:	4992b03a 	or	r9,r9,r6
   919c8:	12406215 	stw	r9,392(r2)
   919cc:	21c04215 	stw	r7,264(r4)
   919d0:	01000084 	movi	r4,2
   919d4:	893fd21e 	bne	r17,r4,91920 <rx_descriptor_end+0xfff918c0>
   919d8:	11006317 	ldw	r4,396(r2)
   919dc:	218cb03a 	or	r6,r4,r6
   919e0:	11806315 	stw	r6,396(r2)
   919e4:	003fce06 	br	91920 <rx_descriptor_end+0xfff918c0>
   919e8:	18805304 	addi	r2,r3,332
   919ec:	18805215 	stw	r2,328(r3)
   919f0:	003fc606 	br	9190c <rx_descriptor_end+0xfff918ac>
   919f4:	00bfffc4 	movi	r2,-1
   919f8:	003fd006 	br	9193c <rx_descriptor_end+0xfff918dc>

000919fc <__call_exitprocs>:
   919fc:	defff504 	addi	sp,sp,-44
   91a00:	df000915 	stw	fp,36(sp)
   91a04:	dd400615 	stw	r21,24(sp)
   91a08:	dc800315 	stw	r18,12(sp)
   91a0c:	dfc00a15 	stw	ra,40(sp)
   91a10:	ddc00815 	stw	r23,32(sp)
   91a14:	dd800715 	stw	r22,28(sp)
   91a18:	dd000515 	stw	r20,20(sp)
   91a1c:	dcc00415 	stw	r19,16(sp)
   91a20:	dc400215 	stw	r17,8(sp)
   91a24:	dc000115 	stw	r16,4(sp)
   91a28:	d9000015 	stw	r4,0(sp)
   91a2c:	2839883a 	mov	fp,r5
   91a30:	04800044 	movi	r18,1
   91a34:	057fffc4 	movi	r21,-1
   91a38:	00800274 	movhi	r2,9
   91a3c:	10908104 	addi	r2,r2,16900
   91a40:	12000017 	ldw	r8,0(r2)
   91a44:	45005217 	ldw	r20,328(r8)
   91a48:	44c05204 	addi	r19,r8,328
   91a4c:	a0001c26 	beq	r20,zero,91ac0 <__call_exitprocs+0xc4>
   91a50:	a0800117 	ldw	r2,4(r20)
   91a54:	15ffffc4 	addi	r23,r2,-1
   91a58:	b8000d16 	blt	r23,zero,91a90 <__call_exitprocs+0x94>
   91a5c:	14000044 	addi	r16,r2,1
   91a60:	8421883a 	add	r16,r16,r16
   91a64:	8421883a 	add	r16,r16,r16
   91a68:	84402004 	addi	r17,r16,128
   91a6c:	a463883a 	add	r17,r20,r17
   91a70:	a421883a 	add	r16,r20,r16
   91a74:	e0001e26 	beq	fp,zero,91af0 <__call_exitprocs+0xf4>
   91a78:	80804017 	ldw	r2,256(r16)
   91a7c:	e0801c26 	beq	fp,r2,91af0 <__call_exitprocs+0xf4>
   91a80:	bdffffc4 	addi	r23,r23,-1
   91a84:	843fff04 	addi	r16,r16,-4
   91a88:	8c7fff04 	addi	r17,r17,-4
   91a8c:	bd7ff91e 	bne	r23,r21,91a74 <rx_descriptor_end+0xfff91a14>
   91a90:	00800234 	movhi	r2,8
   91a94:	10896704 	addi	r2,r2,9628
   91a98:	10000926 	beq	r2,zero,91ac0 <__call_exitprocs+0xc4>
   91a9c:	a0800117 	ldw	r2,4(r20)
   91aa0:	1000301e 	bne	r2,zero,91b64 <__call_exitprocs+0x168>
   91aa4:	a0800017 	ldw	r2,0(r20)
   91aa8:	10003226 	beq	r2,zero,91b74 <__call_exitprocs+0x178>
   91aac:	a009883a 	mov	r4,r20
   91ab0:	98800015 	stw	r2,0(r19)
   91ab4:	008259c0 	call	8259c <free>
   91ab8:	9d000017 	ldw	r20,0(r19)
   91abc:	a03fe41e 	bne	r20,zero,91a50 <rx_descriptor_end+0xfff919f0>
   91ac0:	dfc00a17 	ldw	ra,40(sp)
   91ac4:	df000917 	ldw	fp,36(sp)
   91ac8:	ddc00817 	ldw	r23,32(sp)
   91acc:	dd800717 	ldw	r22,28(sp)
   91ad0:	dd400617 	ldw	r21,24(sp)
   91ad4:	dd000517 	ldw	r20,20(sp)
   91ad8:	dcc00417 	ldw	r19,16(sp)
   91adc:	dc800317 	ldw	r18,12(sp)
   91ae0:	dc400217 	ldw	r17,8(sp)
   91ae4:	dc000117 	ldw	r16,4(sp)
   91ae8:	dec00b04 	addi	sp,sp,44
   91aec:	f800283a 	ret
   91af0:	a0800117 	ldw	r2,4(r20)
   91af4:	80c00017 	ldw	r3,0(r16)
   91af8:	10bfffc4 	addi	r2,r2,-1
   91afc:	15c01426 	beq	r2,r23,91b50 <__call_exitprocs+0x154>
   91b00:	80000015 	stw	zero,0(r16)
   91b04:	183fde26 	beq	r3,zero,91a80 <rx_descriptor_end+0xfff91a20>
   91b08:	95c8983a 	sll	r4,r18,r23
   91b0c:	a0806217 	ldw	r2,392(r20)
   91b10:	a5800117 	ldw	r22,4(r20)
   91b14:	2084703a 	and	r2,r4,r2
   91b18:	10000b26 	beq	r2,zero,91b48 <__call_exitprocs+0x14c>
   91b1c:	a0806317 	ldw	r2,396(r20)
   91b20:	2088703a 	and	r4,r4,r2
   91b24:	20000c1e 	bne	r4,zero,91b58 <__call_exitprocs+0x15c>
   91b28:	89400017 	ldw	r5,0(r17)
   91b2c:	d9000017 	ldw	r4,0(sp)
   91b30:	183ee83a 	callr	r3
   91b34:	a0800117 	ldw	r2,4(r20)
   91b38:	15bfbf1e 	bne	r2,r22,91a38 <rx_descriptor_end+0xfff919d8>
   91b3c:	98800017 	ldw	r2,0(r19)
   91b40:	153fcf26 	beq	r2,r20,91a80 <rx_descriptor_end+0xfff91a20>
   91b44:	003fbc06 	br	91a38 <rx_descriptor_end+0xfff919d8>
   91b48:	183ee83a 	callr	r3
   91b4c:	003ff906 	br	91b34 <rx_descriptor_end+0xfff91ad4>
   91b50:	a5c00115 	stw	r23,4(r20)
   91b54:	003feb06 	br	91b04 <rx_descriptor_end+0xfff91aa4>
   91b58:	89000017 	ldw	r4,0(r17)
   91b5c:	183ee83a 	callr	r3
   91b60:	003ff406 	br	91b34 <rx_descriptor_end+0xfff91ad4>
   91b64:	a0800017 	ldw	r2,0(r20)
   91b68:	a027883a 	mov	r19,r20
   91b6c:	1029883a 	mov	r20,r2
   91b70:	003fb606 	br	91a4c <rx_descriptor_end+0xfff919ec>
   91b74:	0005883a 	mov	r2,zero
   91b78:	003ffb06 	br	91b68 <rx_descriptor_end+0xfff91b08>

00091b7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   91b7c:	defffd04 	addi	sp,sp,-12
   91b80:	df000215 	stw	fp,8(sp)
   91b84:	df000204 	addi	fp,sp,8
   91b88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   91b8c:	0001883a 	nop
   91b90:	e0bfff17 	ldw	r2,-4(fp)
   91b94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   91b98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   91b9c:	10000226 	beq	r2,zero,91ba8 <_exit+0x2c>
    ALT_SIM_FAIL();
   91ba0:	002af070 	cmpltui	zero,zero,43969
   91ba4:	00000106 	br	91bac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   91ba8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   91bac:	003fff06 	br	91bac <rx_descriptor_end+0xfff91b4c>
