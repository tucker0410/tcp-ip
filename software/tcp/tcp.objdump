
tcp.elf:     file format elf32-littlenios2
tcp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000125c0 memsz 0x000125c0 flags r-x
    LOAD off    0x000135e0 vaddr 0x000925e0 paddr 0x00094538 align 2**12
         filesz 0x00001f58 memsz 0x00001f58 flags rw-
    LOAD off    0x00016490 vaddr 0x00096490 paddr 0x00096490 align 2**12
         filesz 0x00000000 memsz 0x00000598 flags rw-
    LOAD off    0x00016000 vaddr 0x00100000 paddr 0x00096a28 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011b30  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000086c  00091d74  00091d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f58  000925e0  00094538  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000598  00096490  00096490  00016490  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  00096a28  00096a28  00016080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  00096a28  00016000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  00016080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd0  00000000  00000000  000160a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002778f  00000000  00000000  00017078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009e97  00000000  00000000  0003e807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c38c  00000000  00000000  0004869e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002680  00000000  00000000  00054a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003f1f  00000000  00000000  000570ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b65  00000000  00000000  0005afcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00072b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001938  00000000  00000000  00072b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00077e36  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00077e39  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00077e3e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00077e3f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00077e40  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00077e49  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00077e52  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  00077e5b  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  00077e67  2**0
                  CONTENTS, READONLY
 27 .jdi          00004653  00000000  00000000  00077e8d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074e2d  00000000  00000000  0007c4e0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00091d74 l    d  .rodata	00000000 .rodata
000925e0 l    d  .rwdata	00000000 .rwdata
00096490 l    d  .bss	00000000 .bss
00096a28 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tcp_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 functions.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00081cfc l     F .text	00000008 __fp_unlock
00081d10 l     F .text	0000019c __sinit.part.1
00081eac l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000929e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00092312 l     O .rodata	00000010 zeroes.4404
000856ac l     F .text	000000bc __sbprintf
00092322 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00085970 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0009322c l     O .rwdata	00000020 lc_ctype_charset
0009320c l     O .rwdata	00000020 lc_message_charset
0009324c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
00092350 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00089554 l     F .text	000000fc __sprint_r.part.0
00092484 l     O .rodata	00000010 blanks.4348
00092474 l     O .rodata	00000010 zeroes.4349
0008aae0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008e524 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008e678 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008e6a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e870 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e95c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0008ed98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00094520 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008efe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f118 l     F .text	00000034 alt_dev_reg
0009342c l     O .rwdata	00001060 jtag_uart
0009448c l     O .rwdata	00000030 sgdma_rx
000944bc l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f438 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f644 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0008fc7c l     F .text	0000003c alt_get_errno
000908ac l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00090a10 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00090ca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000911ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000912ec l     F .text	0000003c alt_get_errno
00091328 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000964fc g     O .bss	00000004 alt_instruction_exception_handler
00083184 g     F .text	00000018 putchar
00088b60 g     F .text	00000074 _mprec_log10
00088c4c g     F .text	0000008c __any_on
0008b01c g     F .text	00000054 _isatty_r
0009235c g     O .rodata	00000028 __mprec_tinytens
0008ea6c g     F .text	0000007c alt_main
0008319c g     F .text	000000c0 _puts_r
000809e0 g     F .text	0000032c rx_ethernet_isr
00096928 g     O .bss	00000100 alt_irq
00087894 g     F .text	00000060 _lseek_r
00094538 g       *ABS*	00000000 __flash_rwdata_start
000964ac g     O .bss	00000004 conn
0008d050 g     F .text	00000088 .hidden __eqdf2
00096a28 g       *ABS*	00000000 __alt_heap_start
00083140 g     F .text	0000003c printf
0008fddc g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0008b070 g     F .text	0000009c _wcrtomb_r
0008339c g     F .text	0000005c __sseek
0008204c g     F .text	00000010 __sinit
0008ab9c g     F .text	00000140 __swbuf_r
0008154c g     F .text	000000c0 recv
00081028 g     F .text	00000228 connect
000877b8 g     F .text	0000007c _setlocale_r
00081eb4 g     F .text	00000068 __sfmoreglue
0008eb0c g     F .text	00000024 __malloc_unlock
000904f4 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
000816fc g     F .text	0000007c recDisconnect
00082e8c g     F .text	0000015c memmove
00082034 g     F .text	00000018 _cleanup
00096494 g     O .bss	00000004 in
00087cdc g     F .text	000000a8 _Balloc
000964b0 g     O .bss	00000004 timer
0008d0d8 g     F .text	000000dc .hidden __gtdf2
000916e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
00090044 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008afc0 g     F .text	0000005c _fstat_r
000964d4 g     O .bss	00000004 errno
00083318 g     F .text	00000008 __seofread
000964e8 g     O .bss	00000004 alt_argv
0009c4ec g       *ABS*	00000000 _gp
000932ac g     O .rwdata	00000180 alt_fd_list
0008317c g     F .text	00000008 _putchar_r
00090e48 g     F .text	00000090 alt_find_dev
00087b94 g     F .text	00000148 memcpy
00081d04 g     F .text	0000000c _cleanup_r
0008e33c g     F .text	000000dc .hidden __floatsidf
00091270 g     F .text	0000007c alt_io_redirect
0008d1b4 g     F .text	000000f4 .hidden __ltdf2
00091d74 g       *ABS*	00000000 __DTOR_END__
0008325c g     F .text	00000014 puts
00091944 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00089404 g     F .text	00000074 __fpclassifyd
00088abc g     F .text	000000a4 __ratio
0008aac4 g     F .text	0000001c __vfiprintf_internal
0009013c g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0008f83c g     F .text	0000021c altera_avalon_jtag_uart_read
00082658 g     F .text	00000014 malloc
00083110 g     F .text	00000030 _printf_r
0008be00 g     F .text	00000064 .hidden __udivsi3
000944ec g     O .rwdata	00000004 tse
0008e7cc g     F .text	000000a4 isatty
000923ac g     O .rodata	000000c8 __mprec_tens
00087834 g     F .text	0000000c __locale_charset
000918b4 g     F .text	00000090 alt_icache_flush
000964d0 g     O .bss	00000004 __malloc_top_pad
00094500 g     O .rwdata	00000004 __mb_cur_max
00087864 g     F .text	0000000c _localeconv_r
000880e8 g     F .text	0000003c __i2b
000872fc g     F .text	000004bc __sfvwrite_r
00090274 g     F .text	0000005c alt_avalon_sgdma_stop
00083270 g     F .text	00000054 _sbrk_r
00088e40 g     F .text	00000060 _read_r
00090c30 g     F .text	00000078 alt_dcache_flush
00094518 g     O .rwdata	00000004 alt_max_fd
000871f8 g     F .text	000000f0 _fclose_r
00081ccc g     F .text	00000030 fflush
000964cc g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
0008bebc g     F .text	000008ac .hidden __adddf3
000964b4 g     O .bss	00000004 sentPacket
00088864 g     F .text	0000010c __b2d
0008b7d0 g     F .text	00000538 .hidden __umoddi3
0008e998 g     F .text	000000d4 lseek
000944f0 g     O .rwdata	00000004 _global_impure_ptr
00088ea0 g     F .text	00000564 _realloc_r
00096a28 g       *ABS*	00000000 __bss_end
000910bc g     F .text	000000f0 alt_iic_isr_register
0008fcb8 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
000915dc g     F .text	00000108 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
0008b258 g     F .text	00000578 .hidden __udivdi3
00081250 g     F .text	0000017c send
0008af1c g     F .text	00000024 _fputwc_r
00092384 g     O .rodata	00000028 __mprec_bigtens
00087ecc g     F .text	00000104 __s2b
0008e418 g     F .text	000000a8 .hidden __floatunsidf
000885a4 g     F .text	00000060 __mcmp
0008206c g     F .text	00000018 __fp_lock_all
00091070 g     F .text	0000004c alt_ic_irq_enabled
00091540 g     F .text	0000009c alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
000964f0 g     O .bss	00000004 alt_irq_active
000925e0 g     O .rwdata	00000400 tx_frame
000800fc g     F .exceptions	000000d4 alt_irq_handler
00093284 g     O .rwdata	00000028 alt_dev_null
000813cc g     F .text	00000180 accept
000902d0 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
000964b8 g     O .bss	00000004 isConnected
0008e630 g     F .text	00000048 alt_dcache_flush_all
00087fd0 g     F .text	00000068 __hi0bits
0008e2bc g     F .text	00000080 .hidden __fixdfsi
00100040 g     O .descriptor_memory	00000020 rx_descriptor
00094538 g       *ABS*	00000000 __ram_rwdata_end
00094510 g     O .rwdata	00000008 alt_dev_list
0008f020 g     F .text	000000f8 write
00090414 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00088cd8 g     F .text	000000a0 _putc_r
000925e0 g       *ABS*	00000000 __ram_rodata_end
0008e6e0 g     F .text	000000b0 fstat
0008d1b4 g     F .text	000000f4 .hidden __ledf2
0008831c g     F .text	00000140 __pow5mult
00089668 g     F .text	0000145c ___vfiprintf_internal_r
000964e0 g     O .bss	00000004 __nlocale_changed
0008be64 g     F .text	00000058 .hidden __umodsi3
000900bc g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
000901c8 g     F .text	00000054 alt_avalon_sgdma_register_callback
00096a28 g       *ABS*	00000000 end
0008160c g     F .text	000000f0 disconnect
0008f378 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00091d74 g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00090494 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00090a88 g     F .text	0000007c alt_avalon_timer_sc_init
0008e4c0 g     F .text	00000064 .hidden __clzsi2
0008fa58 g     F .text	00000224 altera_avalon_jtag_uart_write
0008feec g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
0008205c g     F .text	00000004 __sfp_lock_acquire
00087ab0 g     F .text	000000e4 memchr
00083498 g     F .text	000021f8 ___vfprintf_internal_r
0008ffe4 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
000821c0 g     F .text	00000310 _free_r
0008eb30 g     F .text	0000022c alt_printf
00087840 g     F .text	00000010 __locale_mb_cur_max
00091bc0 g     F .text	00000180 __call_exitprocs
000964dc g     O .bss	00000004 __mlocale_changed
000944f8 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
000964f4 g     O .bss	00000004 _alt_tick_rate
0009649c g     O .bss	00000004 sgdma_tx_dev
00090334 g     F .text	00000054 alt_avalon_sgdma_open
0008845c g     F .text	00000148 __lshift
000964f8 g     O .bss	00000004 _alt_nticks
0008edd4 g     F .text	000000fc read
0008f184 g     F .text	00000090 alt_sys_init
00096498 g     O .bss	00000004 transmissionStatus
00091aa8 g     F .text	00000118 __register_exitproc
000964bc g     O .bss	00000005 buffer
00088124 g     F .text	000001f8 __multiply
0008f6e4 g     F .text	00000068 altera_avalon_jtag_uart_close
000925e0 g       *ABS*	00000000 __ram_rwdata_start
00091d74 g       *ABS*	00000000 __ram_rodata_start
00096900 g     O .bss	00000028 __malloc_current_mallinfo
00088970 g     F .text	0000014c __d2b
0008f214 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00091810 g     F .text	000000a4 alt_get_fd
0008591c g     F .text	00000054 _close_r
00091a2c g     F .text	0000007c memcmp
0008f2d4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00096a28 g       *ABS*	00000000 __alt_stack_base
0008f324 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000857c8 g     F .text	00000154 __swsetup_r
0008c768 g     F .text	000008e8 .hidden __divdf3
00081f1c g     F .text	00000118 __sfp
00088bd4 g     F .text	00000078 __copybits
00092e04 g     O .rwdata	00000408 __malloc_av_
00082068 g     F .text	00000004 __sinit_lock_release
0008d2a8 g     F .text	00000718 .hidden __muldf3
000832c4 g     F .text	00000054 __sread
00091708 g     F .text	00000108 alt_find_file
00090ce4 g     F .text	000000a4 alt_dev_llist_insert
0008eae8 g     F .text	00000024 __malloc_lock
0008ef34 g     F .text	000000b0 sbrk
0009021c g     F .text	00000058 alt_avalon_sgdma_start
00081c70 g     F .text	0000005c _fflush_r
0008acf4 g     F .text	000000c4 _calloc_r
00096490 g       *ABS*	00000000 __bss_start
00082fe8 g     F .text	00000128 memset
00081778 g     F .text	000002dc main
000964ec g     O .bss	00000004 alt_envp
000964c8 g     O .bss	00000004 __malloc_max_total_mem
0008f274 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008acdc g     F .text	00000018 __swbuf
00094524 g     O .rwdata	00000008 alt_sgdma_list
000833f8 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
000872e8 g     F .text	00000014 fclose
00085b70 g     F .text	00001688 _dtoa_r
00082680 g     F .text	0000080c _malloc_r
0008b1cc g     F .text	00000030 __ascii_wctomb
0009451c g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
00096500 g     O .bss	00000400 rx_frame
000824d0 g     F .text	000000c4 _fwalk
00088d78 g     F .text	000000c8 putc
0008bd08 g     F .text	00000084 .hidden __divsi3
0008209c g     F .text	00000124 _malloc_trim_r
00091d74 g       *ABS*	00000000 __CTOR_END__
000964a4 g     O .bss	00000004 seqNumber
00089478 g     F .text	000000dc strcmp
00080290 g     F .text	0000042c transmit
00091d74 g       *ABS*	00000000 __flash_rodata_start
00091d74 g       *ABS*	00000000 __DTOR_LIST__
00096490 g     O .bss	00000004 count
0008d050 g     F .text	00000088 .hidden __nedf2
0008f14c g     F .text	00000038 alt_irq_init
0008eed0 g     F .text	00000064 alt_release_fd
00092494 g     O .rodata	00000100 .hidden __clz_tab
000964d8 g     O .bss	00000004 _PathLocale
000919e0 g     F .text	00000014 atexit
00085768 g     F .text	00000060 _write_r
00087870 g     F .text	00000018 setlocale
000964a8 g     O .bss	00000004 ackNumber
000944f4 g     O .rwdata	00000004 _impure_ptr
000964e4 g     O .bss	00000004 alt_argc
000806bc g     F .text	00000324 receive
00081a54 g     F .text	0000021c __sflush_r
00090de8 g     F .text	00000060 _do_dtors
0008785c g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
00088800 g     F .text	00000064 __ulp
00082084 g     F .text	00000018 __fp_unlock_all
00094508 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00087888 g     F .text	0000000c localeconv
00090f0c g     F .text	00000050 alt_ic_isr_register
00094538 g       *ABS*	00000000 _edata
00096a28 g       *ABS*	00000000 _end
0008adb8 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f74c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00080d0c g     F .text	0000031c tx_ethernet_isr
00090fe4 g     F .text	0000008c alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
00090388 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
00083320 g     F .text	0000007c __swrite
000944fc g     O .rwdata	00000004 __malloc_trim_threshold
00087850 g     F .text	0000000c __locale_msgcharset
000919f4 g     F .text	00000038 exit
00082594 g     F .text	000000c4 _fwalk_reent
00088604 g     F .text	000001fc __mdiff
0008bd8c g     F .text	00000074 .hidden __modsi3
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082060 g     F .text	00000004 __sfp_lock_release
000964a0 g     O .bss	00000004 sgdma_rx_dev
00091d40 g     F .text	00000034 _exit
00090b04 g     F .text	0000012c alt_alarm_start
000878f4 g     F .text	000001bc __smakebuf_r
00083400 g     F .text	00000098 strlen
000913ec g     F .text	00000154 open
0008d0d8 g     F .text	000000dc .hidden __gedf2
0008ed5c g     F .text	0000003c alt_putchar
00094504 g     O .rwdata	00000004 __wctomb
00089650 g     F .text	00000018 __sprint_r
00090ed8 g     F .text	00000034 alt_icache_flush_all
0009452c g     O .rwdata	00000004 alt_priority_mask
00090f5c g     F .text	00000088 alt_ic_irq_enable
00085690 g     F .text	0000001c __vfprintf_internal
0008b1fc g     F .text	0000005c _wctomb_r
0008ff60 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0008d9c0 g     F .text	000008fc .hidden __subdf3
00088038 g     F .text	000000b0 __lo0bits
00094530 g     O .rwdata	00000008 alt_alarm_list
00090d88 g     F .text	00000060 _do_ctors
0008b10c g     F .text	000000c0 wcrtomb
0008e560 g     F .text	000000d0 close
0008e8d8 g     F .text	00000084 alt_load
00090968 g     F .text	000000a8 alt_avalon_sgdma_init
0008af40 g     F .text	00000080 fputwc
0008266c g     F .text	00000014 free
000964c4 g     O .bss	00000004 pack
00082064 g     F .text	00000004 __sinit_lock_acquire
00087dac g     F .text	00000120 __multadd
00087d84 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_main_memory-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	109a4a04 	addi	r2,r2,26920
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	109a4a04 	addi	r2,r2,26920
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a80417 	ldw	r2,-24560(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a80417 	ldw	r2,-24560(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <rx_descriptor_end+0xfff801e8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6b13b14 	ori	gp,gp,50412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	10992414 	ori	r2,r2,25744

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18da8a14 	ori	r3,r3,27176

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <rx_descriptor_end+0xfff80218>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008e8d80 	call	8e8d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008ea6c0 	call	8ea6c <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <rx_descriptor_end+0xfff8022c>

00080290 <transmit>:
alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

int transmissionStatus = 0;

int transmit(int device, struct packet * pack){
   80290:	defff704 	addi	sp,sp,-36
   80294:	dfc00815 	stw	ra,32(sp)
   80298:	df000715 	stw	fp,28(sp)
   8029c:	df000704 	addi	fp,sp,28
   802a0:	e13ffe15 	stw	r4,-8(fp)
   802a4:	e17fff15 	stw	r5,-4(fp)
	printf("transmit function\n");
   802a8:	01000274 	movhi	r4,9
   802ac:	21075d04 	addi	r4,r4,7540
   802b0:	008325c0 	call	8325c <puts>
	//Specify the addresses of the PHY devices to be accessed through MDIO interface
	if(!device){
   802b4:	e0bffe17 	ldw	r2,-8(fp)
   802b8:	1000051e 	bne	r2,zero,802d0 <transmit+0x40>
		*(tse + 0x0F) = 0x10;
   802bc:	d0a00017 	ldw	r2,-32768(gp)
   802c0:	10800f04 	addi	r2,r2,60
   802c4:	00c00404 	movi	r3,16
   802c8:	10c00015 	stw	r3,0(r2)
   802cc:	00000406 	br	802e0 <transmit+0x50>
	}
	else {
		*(tse + 0x0F) = 0x11;
   802d0:	d0a00017 	ldw	r2,-32768(gp)
   802d4:	10800f04 	addi	r2,r2,60
   802d8:	00c00444 	movi	r3,17
   802dc:	10c00015 	stw	r3,0(r2)
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   802e0:	d0a00017 	ldw	r2,-32768(gp)
   802e4:	10c00204 	addi	r3,r2,8
   802e8:	d0a00017 	ldw	r2,-32768(gp)
   802ec:	10800204 	addi	r2,r2,8
   802f0:	11000017 	ldw	r4,0(r2)
   802f4:	00802034 	movhi	r2,128
   802f8:	10808804 	addi	r2,r2,544
   802fc:	2084b03a 	or	r2,r4,r2
   80300:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));
   80304:	0001883a 	nop
   80308:	d0a00017 	ldw	r2,-32768(gp)
   8030c:	10800204 	addi	r2,r2,8
   80310:	10c00017 	ldw	r3,0(r2)
   80314:	d0a00017 	ldw	r2,-32768(gp)
   80318:	10800204 	addi	r2,r2,8
   8031c:	11000017 	ldw	r4,0(r2)
   80320:	00802034 	movhi	r2,128
   80324:	10808804 	addi	r2,r2,544
   80328:	2084b03a 	or	r2,r4,r2
   8032c:	18bff61e 	bne	r3,r2,80308 <rx_descriptor_end+0xfff802a8>

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;//tx_section_empty
   80330:	d0a00017 	ldw	r2,-32768(gp)
   80334:	10800904 	addi	r2,r2,36
   80338:	00c1fc04 	movi	r3,2032
   8033c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 0x03;//tx_almost_full
   80340:	d0a00017 	ldw	r2,-32768(gp)
   80344:	10800e04 	addi	r2,r2,56
   80348:	00c000c4 	movi	r3,3
   8034c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 0x08;//tx_almost_empty
   80350:	d0a00017 	ldw	r2,-32768(gp)
   80354:	10800d04 	addi	r2,r2,52
   80358:	00c00204 	movi	r3,8
   8035c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;//rx_section_empty
   80360:	d0a00017 	ldw	r2,-32768(gp)
   80364:	10800704 	addi	r2,r2,28
   80368:	00c1fc04 	movi	r3,2032
   8036c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 0x08;//rx_almost_full
   80370:	d0a00017 	ldw	r2,-32768(gp)
   80374:	10800c04 	addi	r2,r2,48
   80378:	00c00204 	movi	r3,8
   8037c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 0x08;//rx_almost_empty
   80380:	d0a00017 	ldw	r2,-32768(gp)
   80384:	10800b04 	addi	r2,r2,44
   80388:	00c00204 	movi	r3,8
   8038c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0x00;//tx_section_full
   80390:	d0a00017 	ldw	r2,-32768(gp)
   80394:	10800a04 	addi	r2,r2,40
   80398:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0x00;//rx_section_full
   8039c:	d0a00017 	ldw	r2,-32768(gp)
   803a0:	10800804 	addi	r2,r2,32
   803a4:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	if(!device){
   803a8:	e0bffe17 	ldw	r2,-8(fp)
   803ac:	10000a1e 	bne	r2,zero,803d8 <transmit+0x148>
		*(tse + 0x03) = 0x17231C00;
   803b0:	d0a00017 	ldw	r2,-32768(gp)
   803b4:	10c00304 	addi	r3,r2,12
   803b8:	0085c8f4 	movhi	r2,5923
   803bc:	10870004 	addi	r2,r2,7168
   803c0:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000CB4A;
   803c4:	d0a00017 	ldw	r2,-32768(gp)
   803c8:	10800404 	addi	r2,r2,16
   803cc:	00f2d294 	movui	r3,52042
   803d0:	10c00015 	stw	r3,0(r2)
   803d4:	00000906 	br	803fc <transmit+0x16c>
	}
	else {
		//MAC2: C8-16-0B-93-67-DA
		*(tse + 0x03) = 0x930B16C8;
   803d8:	d0a00017 	ldw	r2,-32768(gp)
   803dc:	10c00304 	addi	r3,r2,12
   803e0:	00a4c2f4 	movhi	r2,37643
   803e4:	1085b204 	addi	r2,r2,5832
   803e8:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000DA67;
   803ec:	d0a00017 	ldw	r2,-32768(gp)
   803f0:	10800404 	addi	r2,r2,16
   803f4:	00f699d4 	movui	r3,55911
   803f8:	10c00015 	stw	r3,0(r2)
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;//frame length
   803fc:	d0a00017 	ldw	r2,-32768(gp)
   80400:	10800504 	addi	r2,r2,20
   80404:	00c17b84 	movi	r3,1518
   80408:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;//tx_ipg_length
   8040c:	d0a00017 	ldw	r2,-32768(gp)
   80410:	10801704 	addi	r2,r2,92
   80414:	00c00304 	movi	r3,12
   80418:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;//pause_quanta
   8041c:	d0a00017 	ldw	r2,-32768(gp)
   80420:	10800604 	addi	r2,r2,24
   80424:	00ffffd4 	movui	r3,65535
   80428:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;//config register
   8042c:	d0a00017 	ldw	r2,-32768(gp)
   80430:	10c00204 	addi	r3,r2,8
   80434:	00802034 	movhi	r2,128
   80438:	10808804 	addi	r2,r2,544
   8043c:	18800015 	stw	r2,0(r3)

	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   80440:	d0a00017 	ldw	r2,-32768(gp)
   80444:	10c00204 	addi	r3,r2,8
   80448:	00802034 	movhi	r2,128
   8044c:	10888804 	addi	r2,r2,8736
   80450:	18800015 	stw	r2,0(r3)
	alt_printf("Setting the reset tx");
   80454:	01000274 	movhi	r4,9
   80458:	21076204 	addi	r4,r4,7560
   8045c:	008eb300 	call	8eb30 <alt_printf>
	while ( *(tse + 0x02) != ( 0x00800220 ) ) printf(" ");
   80460:	00000206 	br	8046c <transmit+0x1dc>
   80464:	01000804 	movi	r4,32
   80468:	00831840 	call	83184 <putchar>
   8046c:	d0a00017 	ldw	r2,-32768(gp)
   80470:	10800204 	addi	r2,r2,8
   80474:	10c00017 	ldw	r3,0(r2)
   80478:	00802034 	movhi	r2,128
   8047c:	10808804 	addi	r2,r2,544
   80480:	18bff81e 	bne	r3,r2,80464 <rx_descriptor_end+0xfff80404>

	//Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0000023B;
   80484:	d0a00017 	ldw	r2,-32768(gp)
   80488:	10800204 	addi	r2,r2,8
   8048c:	d0e00017 	ldw	r3,-32768(gp)
   80490:	18c00204 	addi	r3,r3,8
   80494:	18c00017 	ldw	r3,0(r3)
   80498:	18c08ed4 	ori	r3,r3,571
   8049c:	10c00015 	stw	r3,0(r2)
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0000023B ) );
   804a0:	0001883a 	nop
   804a4:	d0a00017 	ldw	r2,-32768(gp)
   804a8:	10800204 	addi	r2,r2,8
   804ac:	10c00017 	ldw	r3,0(r2)
   804b0:	d0a00017 	ldw	r2,-32768(gp)
   804b4:	10800204 	addi	r2,r2,8
   804b8:	10800017 	ldw	r2,0(r2)
   804bc:	10808ed4 	ori	r2,r2,571
   804c0:	18bff81e 	bne	r3,r2,804a4 <rx_descriptor_end+0xfff80444>

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   804c4:	01000274 	movhi	r4,9
   804c8:	21076804 	addi	r4,r4,7584
   804cc:	00903340 	call	90334 <alt_avalon_sgdma_open>
   804d0:	d0a7ec15 	stw	r2,-24656(gp)
	if (sgdma_tx_dev == NULL) {
   804d4:	d0a7ec17 	ldw	r2,-24656(gp)
   804d8:	1000051e 	bne	r2,zero,804f0 <transmit+0x260>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   804dc:	01000274 	movhi	r4,9
   804e0:	21076c04 	addi	r4,r4,7600
   804e4:	008eb300 	call	8eb30 <alt_printf>
		return -1;
   804e8:	00bfffc4 	movi	r2,-1
   804ec:	00006e06 	br	806a8 <transmit+0x418>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   804f0:	01000274 	movhi	r4,9
   804f4:	21077b04 	addi	r4,r4,7660
   804f8:	008eb300 	call	8eb30 <alt_printf>

	int i = 17;
   804fc:	00800444 	movi	r2,17
   80500:	e0bffd15 	stw	r2,-12(fp)

	memmove(tx_frame+16, pack->sourceIP, 4);
   80504:	00800274 	movhi	r2,9
   80508:	10897c04 	addi	r2,r2,9712
   8050c:	e0ffff17 	ldw	r3,-4(fp)
   80510:	01800104 	movi	r6,4
   80514:	180b883a 	mov	r5,r3
   80518:	1009883a 	mov	r4,r2
   8051c:	0082e8c0 	call	82e8c <memmove>
	memmove(tx_frame+20, pack->destIP, 4);
   80520:	00800274 	movhi	r2,9
   80524:	10897d04 	addi	r2,r2,9716
   80528:	e0ffff17 	ldw	r3,-4(fp)
   8052c:	18c00104 	addi	r3,r3,4
   80530:	01800104 	movi	r6,4
   80534:	180b883a 	mov	r5,r3
   80538:	1009883a 	mov	r4,r2
   8053c:	0082e8c0 	call	82e8c <memmove>
	memmove(tx_frame+24, pack->payload->sourcePort, 2);
   80540:	00800274 	movhi	r2,9
   80544:	10897e04 	addi	r2,r2,9720
   80548:	e0ffff17 	ldw	r3,-4(fp)
   8054c:	18c00217 	ldw	r3,8(r3)
   80550:	01800084 	movi	r6,2
   80554:	180b883a 	mov	r5,r3
   80558:	1009883a 	mov	r4,r2
   8055c:	0082e8c0 	call	82e8c <memmove>
	memmove(tx_frame+26, pack->payload->destPort, 2);
   80560:	00800274 	movhi	r2,9
   80564:	10897e84 	addi	r2,r2,9722
   80568:	e0ffff17 	ldw	r3,-4(fp)
   8056c:	18c00217 	ldw	r3,8(r3)
   80570:	18c00084 	addi	r3,r3,2
   80574:	01800084 	movi	r6,2
   80578:	180b883a 	mov	r5,r3
   8057c:	1009883a 	mov	r4,r2
   80580:	0082e8c0 	call	82e8c <memmove>
	memmove(tx_frame+28, pack->payload->syn, 1);
   80584:	00800274 	movhi	r2,9
   80588:	10897f04 	addi	r2,r2,9724
   8058c:	e0ffff17 	ldw	r3,-4(fp)
   80590:	18c00217 	ldw	r3,8(r3)
   80594:	18c00204 	addi	r3,r3,8
   80598:	18c00003 	ldbu	r3,0(r3)
   8059c:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+29, pack->payload->fin, 1);
   805a0:	00800274 	movhi	r2,9
   805a4:	10897f44 	addi	r2,r2,9725
   805a8:	e0ffff17 	ldw	r3,-4(fp)
   805ac:	18c00217 	ldw	r3,8(r3)
   805b0:	18c00284 	addi	r3,r3,10
   805b4:	18c00003 	ldbu	r3,0(r3)
   805b8:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+30, pack->payload->seqNum, 1);
   805bc:	00800274 	movhi	r2,9
   805c0:	10897f84 	addi	r2,r2,9726
   805c4:	e0ffff17 	ldw	r3,-4(fp)
   805c8:	18c00217 	ldw	r3,8(r3)
   805cc:	18c00104 	addi	r3,r3,4
   805d0:	18c00003 	ldbu	r3,0(r3)
   805d4:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+31, pack->payload->ackNum, 1);
   805d8:	00800274 	movhi	r2,9
   805dc:	10897fc4 	addi	r2,r2,9727
   805e0:	e0ffff17 	ldw	r3,-4(fp)
   805e4:	18c00217 	ldw	r3,8(r3)
   805e8:	18c00184 	addi	r3,r3,6
   805ec:	18c00003 	ldbu	r3,0(r3)
   805f0:	10c00005 	stb	r3,0(r2)
	memmove(tx_frame+32, pack->payload->data, 1);
   805f4:	00800274 	movhi	r2,9
   805f8:	10898004 	addi	r2,r2,9728
   805fc:	e0ffff17 	ldw	r3,-4(fp)
   80600:	18c00217 	ldw	r3,8(r3)
   80604:	18c00304 	addi	r3,r3,12
   80608:	18c00003 	ldbu	r3,0(r3)
   8060c:	10c00005 	stb	r3,0(r2)
	memset(tx_frame+33, 0, 28);
   80610:	00800274 	movhi	r2,9
   80614:	10898044 	addi	r2,r2,9729
   80618:	01800704 	movi	r6,28
   8061c:	000b883a 	mov	r5,zero
   80620:	1009883a 	mov	r4,r2
   80624:	0082fe80 	call	82fe8 <memset>

	// Set interrupts for the sgdma transmit device
	//sgdma_tx_dev searches for sgdma_tx device, returns null if none,
	alt_avalon_sgdma_register_callback(sgdma_tx_dev, (alt_avalon_sgdma_callback) tx_ethernet_isr, 0x00000014, NULL );
   80628:	d0a7ec17 	ldw	r2,-24656(gp)
   8062c:	000f883a 	mov	r7,zero
   80630:	01800504 	movi	r6,20
   80634:	01400234 	movhi	r5,8
   80638:	29434304 	addi	r5,r5,3340
   8063c:	1009883a 	mov	r4,r2
   80640:	00901c80 	call	901c8 <alt_avalon_sgdma_register_callback>

	// Create sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0);
   80644:	d8000315 	stw	zero,12(sp)
   80648:	00800044 	movi	r2,1
   8064c:	d8800215 	stw	r2,8(sp)
   80650:	00800044 	movi	r2,1
   80654:	d8800115 	stw	r2,4(sp)
   80658:	d8000015 	stw	zero,0(sp)
   8065c:	01c00f84 	movi	r7,62
   80660:	01800274 	movhi	r6,9
   80664:	31897804 	addi	r6,r6,9696
   80668:	01400434 	movhi	r5,16
   8066c:	29400804 	addi	r5,r5,32
   80670:	01000434 	movhi	r4,16
   80674:	21000004 	addi	r4,r4,0
   80678:	00900bc0 	call	900bc <alt_avalon_sgdma_construct_mem_to_stream_desc>

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);
   8067c:	d0a7ec17 	ldw	r2,-24656(gp)
   80680:	01400434 	movhi	r5,16
   80684:	29400004 	addi	r5,r5,0
   80688:	1009883a 	mov	r4,r2
   8068c:	008fcb80 	call	8fcb8 <alt_avalon_sgdma_do_async_transfer>

	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
   80690:	0001883a 	nop
   80694:	01000434 	movhi	r4,16
   80698:	21000004 	addi	r4,r4,0
   8069c:	00902d00 	call	902d0 <alt_avalon_sgdma_check_descriptor_status>
   806a0:	103ffc1e 	bne	r2,zero,80694 <rx_descriptor_end+0xfff80634>

	return transmissionStatus;
   806a4:	d0a7eb17 	ldw	r2,-24660(gp)
}
   806a8:	e037883a 	mov	sp,fp
   806ac:	dfc00117 	ldw	ra,4(sp)
   806b0:	df000017 	ldw	fp,0(sp)
   806b4:	dec00204 	addi	sp,sp,8
   806b8:	f800283a 	ret

000806bc <receive>:


char * receive(int device){
   806bc:	defffc04 	addi	sp,sp,-16
   806c0:	dfc00315 	stw	ra,12(sp)
   806c4:	df000215 	stw	fp,8(sp)
   806c8:	df000204 	addi	fp,sp,8
   806cc:	e13fff15 	stw	r4,-4(fp)
	printf("receive function\n");
   806d0:	01000274 	movhi	r4,9
   806d4:	21078604 	addi	r4,r4,7704
   806d8:	008325c0 	call	8325c <puts>
	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   806dc:	01000274 	movhi	r4,9
   806e0:	21078b04 	addi	r4,r4,7724
   806e4:	00903340 	call	90334 <alt_avalon_sgdma_open>
   806e8:	d0a7ed15 	stw	r2,-24652(gp)
	if (sgdma_rx_dev == NULL) {
   806ec:	d0a7ed17 	ldw	r2,-24652(gp)
   806f0:	1000041e 	bne	r2,zero,80704 <receive+0x48>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   806f4:	01000274 	movhi	r4,9
   806f8:	21078f04 	addi	r4,r4,7740
   806fc:	008eb300 	call	8eb30 <alt_printf>
   80700:	00000306 	br	80710 <receive+0x54>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   80704:	01000274 	movhi	r4,9
   80708:	21079e04 	addi	r4,r4,7800
   8070c:	008eb300 	call	8eb30 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback(sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80710:	d0a7ed17 	ldw	r2,-24652(gp)
   80714:	000f883a 	mov	r7,zero
   80718:	01800504 	movi	r6,20
   8071c:	01400234 	movhi	r5,8
   80720:	29427804 	addi	r5,r5,2528
   80724:	1009883a 	mov	r4,r2
   80728:	00901c80 	call	901c8 <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   8072c:	d8000015 	stw	zero,0(sp)
   80730:	000f883a 	mov	r7,zero
   80734:	01800274 	movhi	r6,9
   80738:	31994004 	addi	r6,r6,25856
   8073c:	01400434 	movhi	r5,16
   80740:	29401804 	addi	r5,r5,96
   80744:	01000434 	movhi	r4,16
   80748:	21001004 	addi	r4,r4,64
   8074c:	008ffe40 	call	8ffe4 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor );
   80750:	d0a7ed17 	ldw	r2,-24652(gp)
   80754:	01400434 	movhi	r5,16
   80758:	29401004 	addi	r5,r5,64
   8075c:	1009883a 	mov	r4,r2
   80760:	008fcb80 	call	8fcb8 <alt_avalon_sgdma_do_async_transfer>

	//Specify the addresses of the PHY devices to be accessed through MDIO interface

	if(!device){
   80764:	e0bfff17 	ldw	r2,-4(fp)
   80768:	1000051e 	bne	r2,zero,80780 <receive+0xc4>
		*(tse + 0x0F) = 0x10;
   8076c:	d0a00017 	ldw	r2,-32768(gp)
   80770:	10800f04 	addi	r2,r2,60
   80774:	00c00404 	movi	r3,16
   80778:	10c00015 	stw	r3,0(r2)
   8077c:	00000406 	br	80790 <receive+0xd4>
	}
	else {
		*(tse + 0x0F) = 0x11;
   80780:	d0a00017 	ldw	r2,-32768(gp)
   80784:	10800f04 	addi	r2,r2,60
   80788:	00c00444 	movi	r3,17
   8078c:	10c00015 	stw	r3,0(r2)
	}

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   80790:	d0a00017 	ldw	r2,-32768(gp)
   80794:	10c00204 	addi	r3,r2,8
   80798:	d0a00017 	ldw	r2,-32768(gp)
   8079c:	10800204 	addi	r2,r2,8
   807a0:	11000017 	ldw	r4,0(r2)
   807a4:	00802034 	movhi	r2,128
   807a8:	10808804 	addi	r2,r2,544
   807ac:	2084b03a 	or	r2,r4,r2
   807b0:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse +0x02 ) | 0x00800220));
   807b4:	0001883a 	nop
   807b8:	d0a00017 	ldw	r2,-32768(gp)
   807bc:	10800204 	addi	r2,r2,8
   807c0:	10c00017 	ldw	r3,0(r2)
   807c4:	d0a00017 	ldw	r2,-32768(gp)
   807c8:	10800204 	addi	r2,r2,8
   807cc:	11000017 	ldw	r4,0(r2)
   807d0:	00802034 	movhi	r2,128
   807d4:	10808804 	addi	r2,r2,544
   807d8:	2084b03a 	or	r2,r4,r2
   807dc:	18bff61e 	bne	r3,r2,807b8 <rx_descriptor_end+0xfff80758>

	//MAC FIFO Configuration
	*(tse + 0x09) = TSE_TRANSMIT_FIFO_DEPTH-16;	//tx_section_empty
   807e0:	d0a00017 	ldw	r2,-32768(gp)
   807e4:	10800904 	addi	r2,r2,36
   807e8:	00c1fc04 	movi	r3,2032
   807ec:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 0x03;						//tx_almost_full
   807f0:	d0a00017 	ldw	r2,-32768(gp)
   807f4:	10800e04 	addi	r2,r2,56
   807f8:	00c000c4 	movi	r3,3
   807fc:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 0x08;						//tx_almost_empty
   80800:	d0a00017 	ldw	r2,-32768(gp)
   80804:	10800d04 	addi	r2,r2,52
   80808:	00c00204 	movi	r3,8
   8080c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;	//rx_section_empty
   80810:	d0a00017 	ldw	r2,-32768(gp)
   80814:	10800704 	addi	r2,r2,28
   80818:	00c1fc04 	movi	r3,2032
   8081c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 0x08;						//rx_almost_full
   80820:	d0a00017 	ldw	r2,-32768(gp)
   80824:	10800c04 	addi	r2,r2,48
   80828:	00c00204 	movi	r3,8
   8082c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 0x08;						//rx_almost_empty
   80830:	d0a00017 	ldw	r2,-32768(gp)
   80834:	10800b04 	addi	r2,r2,44
   80838:	00c00204 	movi	r3,8
   8083c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0x00;						//tx_section_full
   80840:	d0a00017 	ldw	r2,-32768(gp)
   80844:	10800a04 	addi	r2,r2,40
   80848:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0x00;						//rx_section_full
   8084c:	d0a00017 	ldw	r2,-32768(gp)
   80850:	10800804 	addi	r2,r2,32
   80854:	10000015 	stw	zero,0(r2)


	if(!device){						// Initialize the MAC address
   80858:	e0bfff17 	ldw	r2,-4(fp)
   8085c:	10000a1e 	bne	r2,zero,80888 <receive+0x1cc>
		*(tse + 0x03) = 0x17231C00;
   80860:	d0a00017 	ldw	r2,-32768(gp)
   80864:	10c00304 	addi	r3,r2,12
   80868:	0085c8f4 	movhi	r2,5923
   8086c:	10870004 	addi	r2,r2,7168
   80870:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000CB4A;
   80874:	d0a00017 	ldw	r2,-32768(gp)
   80878:	10800404 	addi	r2,r2,16
   8087c:	00f2d294 	movui	r3,52042
   80880:	10c00015 	stw	r3,0(r2)
   80884:	00000906 	br	808ac <receive+0x1f0>
	}
	else {
		*(tse + 0x03) = 0x930B16C8;		//MAC 2: C8-16-0B-93-67-DA
   80888:	d0a00017 	ldw	r2,-32768(gp)
   8088c:	10c00304 	addi	r3,r2,12
   80890:	00a4c2f4 	movhi	r2,37643
   80894:	1085b204 	addi	r2,r2,5832
   80898:	18800015 	stw	r2,0(r3)
		*(tse + 0x04) = 0x0000DA67;
   8089c:	d0a00017 	ldw	r2,-32768(gp)
   808a0:	10800404 	addi	r2,r2,16
   808a4:	00f699d4 	movui	r3,55911
   808a8:	10c00015 	stw	r3,0(r2)
	}
	// MAC function configuration
	*(tse + 0x05) = 1518;		//frame length
   808ac:	d0a00017 	ldw	r2,-32768(gp)
   808b0:	10800504 	addi	r2,r2,20
   808b4:	00c17b84 	movi	r3,1518
   808b8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;			//tx_ipg_length
   808bc:	d0a00017 	ldw	r2,-32768(gp)
   808c0:	10801704 	addi	r2,r2,92
   808c4:	00c00304 	movi	r3,12
   808c8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;		//pause_quant
   808cc:	d0a00017 	ldw	r2,-32768(gp)
   808d0:	10800604 	addi	r2,r2,24
   808d4:	00ffffd4 	movui	r3,65535
   808d8:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;	//config register
   808dc:	d0a00017 	ldw	r2,-32768(gp)
   808e0:	10c00204 	addi	r3,r2,8
   808e4:	00802034 	movhi	r2,128
   808e8:	10808804 	addi	r2,r2,544
   808ec:	18800015 	stw	r2,0(r3)

	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   808f0:	d0a00017 	ldw	r2,-32768(gp)
   808f4:	10c00204 	addi	r3,r2,8
   808f8:	00802034 	movhi	r2,128
   808fc:	10888804 	addi	r2,r2,8736
   80900:	18800015 	stw	r2,0(r3)
	alt_printf("Setting the reset rx");
   80904:	01000274 	movhi	r4,9
   80908:	2107a904 	addi	r4,r4,7844
   8090c:	008eb300 	call	8eb30 <alt_printf>
	while ( *(tse + 0x02) != ( 0x00800220 )) printf(" ") ;
   80910:	00000206 	br	8091c <receive+0x260>
   80914:	01000804 	movi	r4,32
   80918:	00831840 	call	83184 <putchar>
   8091c:	d0a00017 	ldw	r2,-32768(gp)
   80920:	10800204 	addi	r2,r2,8
   80924:	10c00017 	ldw	r3,0(r2)
   80928:	00802034 	movhi	r2,128
   8092c:	10808804 	addi	r2,r2,544
   80930:	18bff81e 	bne	r3,r2,80914 <rx_descriptor_end+0xfff808b4>

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode

	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;//3rd bit changed to 0/8
   80934:	d0a00017 	ldw	r2,-32768(gp)
   80938:	10c00204 	addi	r3,r2,8
   8093c:	d0a00017 	ldw	r2,-32768(gp)
   80940:	10800204 	addi	r2,r2,8
   80944:	11000017 	ldw	r4,0(r2)
   80948:	00802034 	movhi	r2,128
   8094c:	10808ec4 	addi	r2,r2,571
   80950:	2084b03a 	or	r2,r4,r2
   80954:	18800015 	stw	r2,0(r3)
	printf( "OR while loop\n");
   80958:	01000274 	movhi	r4,9
   8095c:	2107af04 	addi	r4,r4,7868
   80960:	008325c0 	call	8325c <puts>
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) );
   80964:	0001883a 	nop
   80968:	d0a00017 	ldw	r2,-32768(gp)
   8096c:	10800204 	addi	r2,r2,8
   80970:	10c00017 	ldw	r3,0(r2)
   80974:	d0a00017 	ldw	r2,-32768(gp)
   80978:	10800204 	addi	r2,r2,8
   8097c:	11000017 	ldw	r4,0(r2)
   80980:	00802034 	movhi	r2,128
   80984:	10808ec4 	addi	r2,r2,571
   80988:	2084b03a 	or	r2,r4,r2
   8098c:	18bff61e 	bne	r3,r2,80968 <rx_descriptor_end+0xfff80908>
	printf (" FINISH OR while loop \n");
   80990:	01000274 	movhi	r4,9
   80994:	2107b304 	addi	r4,r4,7884
   80998:	008325c0 	call	8325c <puts>

	while (1) {
		in=IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   8099c:	00800434 	movhi	r2,16
   809a0:	10892804 	addi	r2,r2,9376
   809a4:	10800037 	ldwio	r2,0(r2)
   809a8:	d0a7ea15 	stw	r2,-24664(gp)
		if (in == 1){
   809ac:	d0a7ea17 	ldw	r2,-24664(gp)
   809b0:	10800058 	cmpnei	r2,r2,1
   809b4:	1000051e 	bne	r2,zero,809cc <receive+0x310>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x01);//turn on or turn off the LED
   809b8:	00c00044 	movi	r3,1
   809bc:	00800434 	movhi	r2,16
   809c0:	10892c04 	addi	r2,r2,9392
   809c4:	10c00035 	stwio	r3,0(r2)
   809c8:	003ff406 	br	8099c <rx_descriptor_end+0xfff8093c>
		}
		else{
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x00);
   809cc:	0007883a 	mov	r3,zero
   809d0:	00800434 	movhi	r2,16
   809d4:	10892c04 	addi	r2,r2,9392
   809d8:	10c00035 	stwio	r3,0(r2)
		}
	}
   809dc:	003fef06 	br	8099c <rx_descriptor_end+0xfff8093c>

000809e0 <rx_ethernet_isr>:
}

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
 ****************************************************************************************/
void rx_ethernet_isr (void *context){
   809e0:	defffa04 	addi	sp,sp,-24
   809e4:	dfc00515 	stw	ra,20(sp)
   809e8:	df000415 	stw	fp,16(sp)
   809ec:	df000404 	addi	fp,sp,16
   809f0:	e13fff15 	stw	r4,-4(fp)

	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	if(in == 1){ // check if the switch is on
   809f4:	d0a7ea17 	ldw	r2,-24664(gp)
   809f8:	10800060 	cmpeqi	r2,r2,1
   809fc:	1000b51e 	bne	r2,zero,80cd4 <rx_ethernet_isr+0x2f4>
		//alt_printf( "Destination address: %x,%x,%x,%x%x,%x \n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
		//alt_printf( "Source address: %x,%x,%x,%x,%x,%x \n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
	}
	else {
		alt_dcache_flush_all();
   80a00:	008e6300 	call	8e630 <alt_dcache_flush_all>
		printf( "Destination MAC address: %x.%x.%x.%x.%x.%x\n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5],rx_frame[6], rx_frame[7] );
   80a04:	00800274 	movhi	r2,9
   80a08:	10994004 	addi	r2,r2,25856
   80a0c:	10800083 	ldbu	r2,2(r2)
   80a10:	11403fcc 	andi	r5,r2,255
   80a14:	00800274 	movhi	r2,9
   80a18:	10994004 	addi	r2,r2,25856
   80a1c:	108000c3 	ldbu	r2,3(r2)
   80a20:	11803fcc 	andi	r6,r2,255
   80a24:	00800274 	movhi	r2,9
   80a28:	10994004 	addi	r2,r2,25856
   80a2c:	10800103 	ldbu	r2,4(r2)
   80a30:	11c03fcc 	andi	r7,r2,255
   80a34:	00800274 	movhi	r2,9
   80a38:	10994004 	addi	r2,r2,25856
   80a3c:	10800143 	ldbu	r2,5(r2)
   80a40:	10c03fcc 	andi	r3,r2,255
   80a44:	00800274 	movhi	r2,9
   80a48:	10994004 	addi	r2,r2,25856
   80a4c:	10800183 	ldbu	r2,6(r2)
   80a50:	11003fcc 	andi	r4,r2,255
   80a54:	00800274 	movhi	r2,9
   80a58:	10994004 	addi	r2,r2,25856
   80a5c:	108001c3 	ldbu	r2,7(r2)
   80a60:	10803fcc 	andi	r2,r2,255
   80a64:	d8800215 	stw	r2,8(sp)
   80a68:	d9000115 	stw	r4,4(sp)
   80a6c:	d8c00015 	stw	r3,0(sp)
   80a70:	01000274 	movhi	r4,9
   80a74:	2107b904 	addi	r4,r4,7908
   80a78:	00831400 	call	83140 <printf>
		printf( "Source MAC address: %x.%x.%x.%x.%x.%x\n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11],rx_frame[12], rx_frame[13] );
   80a7c:	00800274 	movhi	r2,9
   80a80:	10994004 	addi	r2,r2,25856
   80a84:	10800203 	ldbu	r2,8(r2)
   80a88:	11403fcc 	andi	r5,r2,255
   80a8c:	00800274 	movhi	r2,9
   80a90:	10994004 	addi	r2,r2,25856
   80a94:	10800243 	ldbu	r2,9(r2)
   80a98:	11803fcc 	andi	r6,r2,255
   80a9c:	00800274 	movhi	r2,9
   80aa0:	10994004 	addi	r2,r2,25856
   80aa4:	10800283 	ldbu	r2,10(r2)
   80aa8:	11c03fcc 	andi	r7,r2,255
   80aac:	00800274 	movhi	r2,9
   80ab0:	10994004 	addi	r2,r2,25856
   80ab4:	108002c3 	ldbu	r2,11(r2)
   80ab8:	10c03fcc 	andi	r3,r2,255
   80abc:	00800274 	movhi	r2,9
   80ac0:	10994004 	addi	r2,r2,25856
   80ac4:	10800303 	ldbu	r2,12(r2)
   80ac8:	11003fcc 	andi	r4,r2,255
   80acc:	00800274 	movhi	r2,9
   80ad0:	10994004 	addi	r2,r2,25856
   80ad4:	10800343 	ldbu	r2,13(r2)
   80ad8:	10803fcc 	andi	r2,r2,255
   80adc:	d8800215 	stw	r2,8(sp)
   80ae0:	d9000115 	stw	r4,4(sp)
   80ae4:	d8c00015 	stw	r3,0(sp)
   80ae8:	01000274 	movhi	r4,9
   80aec:	2107c404 	addi	r4,r4,7952
   80af0:	00831400 	call	83140 <printf>
		printf( "Length: %d%d\nSource IP: %d.%d.%d.%d\n", rx_frame[14], rx_frame[15], rx_frame[16], rx_frame[17],rx_frame[18], rx_frame[19] );
   80af4:	00800274 	movhi	r2,9
   80af8:	10994004 	addi	r2,r2,25856
   80afc:	10800383 	ldbu	r2,14(r2)
   80b00:	11403fcc 	andi	r5,r2,255
   80b04:	00800274 	movhi	r2,9
   80b08:	10994004 	addi	r2,r2,25856
   80b0c:	108003c3 	ldbu	r2,15(r2)
   80b10:	11803fcc 	andi	r6,r2,255
   80b14:	00800274 	movhi	r2,9
   80b18:	10994004 	addi	r2,r2,25856
   80b1c:	10800403 	ldbu	r2,16(r2)
   80b20:	11c03fcc 	andi	r7,r2,255
   80b24:	00800274 	movhi	r2,9
   80b28:	10994004 	addi	r2,r2,25856
   80b2c:	10800443 	ldbu	r2,17(r2)
   80b30:	10c03fcc 	andi	r3,r2,255
   80b34:	00800274 	movhi	r2,9
   80b38:	10994004 	addi	r2,r2,25856
   80b3c:	10800483 	ldbu	r2,18(r2)
   80b40:	11003fcc 	andi	r4,r2,255
   80b44:	00800274 	movhi	r2,9
   80b48:	10994004 	addi	r2,r2,25856
   80b4c:	108004c3 	ldbu	r2,19(r2)
   80b50:	10803fcc 	andi	r2,r2,255
   80b54:	d8800215 	stw	r2,8(sp)
   80b58:	d9000115 	stw	r4,4(sp)
   80b5c:	d8c00015 	stw	r3,0(sp)
   80b60:	01000274 	movhi	r4,9
   80b64:	2107ce04 	addi	r4,r4,7992
   80b68:	00831400 	call	83140 <printf>
		printf( "Destination IP: %d.%d.%d.%d\nSource Port: %d%d\n", rx_frame[20], rx_frame[21], rx_frame[22], rx_frame[23],rx_frame[24], rx_frame[25] );
   80b6c:	00800274 	movhi	r2,9
   80b70:	10994004 	addi	r2,r2,25856
   80b74:	10800503 	ldbu	r2,20(r2)
   80b78:	11403fcc 	andi	r5,r2,255
   80b7c:	00800274 	movhi	r2,9
   80b80:	10994004 	addi	r2,r2,25856
   80b84:	10800543 	ldbu	r2,21(r2)
   80b88:	11803fcc 	andi	r6,r2,255
   80b8c:	00800274 	movhi	r2,9
   80b90:	10994004 	addi	r2,r2,25856
   80b94:	10800583 	ldbu	r2,22(r2)
   80b98:	11c03fcc 	andi	r7,r2,255
   80b9c:	00800274 	movhi	r2,9
   80ba0:	10994004 	addi	r2,r2,25856
   80ba4:	108005c3 	ldbu	r2,23(r2)
   80ba8:	10c03fcc 	andi	r3,r2,255
   80bac:	00800274 	movhi	r2,9
   80bb0:	10994004 	addi	r2,r2,25856
   80bb4:	10800603 	ldbu	r2,24(r2)
   80bb8:	11003fcc 	andi	r4,r2,255
   80bbc:	00800274 	movhi	r2,9
   80bc0:	10994004 	addi	r2,r2,25856
   80bc4:	10800643 	ldbu	r2,25(r2)
   80bc8:	10803fcc 	andi	r2,r2,255
   80bcc:	d8800215 	stw	r2,8(sp)
   80bd0:	d9000115 	stw	r4,4(sp)
   80bd4:	d8c00015 	stw	r3,0(sp)
   80bd8:	01000274 	movhi	r4,9
   80bdc:	2107d804 	addi	r4,r4,8032
   80be0:	00831400 	call	83140 <printf>
		printf( "Destination Port: %d%d\nSYN: %x\nFIN: %x\nSequence Number: %x\nAck Number: %x\n", rx_frame[26], rx_frame[27], rx_frame[28], rx_frame[29],rx_frame[30], rx_frame[31] );
   80be4:	00800274 	movhi	r2,9
   80be8:	10994004 	addi	r2,r2,25856
   80bec:	10800683 	ldbu	r2,26(r2)
   80bf0:	11403fcc 	andi	r5,r2,255
   80bf4:	00800274 	movhi	r2,9
   80bf8:	10994004 	addi	r2,r2,25856
   80bfc:	108006c3 	ldbu	r2,27(r2)
   80c00:	11803fcc 	andi	r6,r2,255
   80c04:	00800274 	movhi	r2,9
   80c08:	10994004 	addi	r2,r2,25856
   80c0c:	10800703 	ldbu	r2,28(r2)
   80c10:	11c03fcc 	andi	r7,r2,255
   80c14:	00800274 	movhi	r2,9
   80c18:	10994004 	addi	r2,r2,25856
   80c1c:	10800743 	ldbu	r2,29(r2)
   80c20:	10c03fcc 	andi	r3,r2,255
   80c24:	00800274 	movhi	r2,9
   80c28:	10994004 	addi	r2,r2,25856
   80c2c:	10800783 	ldbu	r2,30(r2)
   80c30:	11003fcc 	andi	r4,r2,255
   80c34:	00800274 	movhi	r2,9
   80c38:	10994004 	addi	r2,r2,25856
   80c3c:	108007c3 	ldbu	r2,31(r2)
   80c40:	10803fcc 	andi	r2,r2,255
   80c44:	d8800215 	stw	r2,8(sp)
   80c48:	d9000115 	stw	r4,4(sp)
   80c4c:	d8c00015 	stw	r3,0(sp)
   80c50:	01000274 	movhi	r4,9
   80c54:	2107e404 	addi	r4,r4,8080
   80c58:	00831400 	call	83140 <printf>
		printf( "Data: %x\n", rx_frame[32]);
   80c5c:	00800274 	movhi	r2,9
   80c60:	10994004 	addi	r2,r2,25856
   80c64:	10800803 	ldbu	r2,32(r2)
   80c68:	10803fcc 	andi	r2,r2,255
   80c6c:	100b883a 	mov	r5,r2
   80c70:	01000274 	movhi	r4,9
   80c74:	2107f704 	addi	r4,r4,8156
   80c78:	00831400 	call	83140 <printf>
		//printf below this is experimental
		printf( "MAC ADDRESS 0: %x \n", *(tse + 0x18) );
   80c7c:	d0a00017 	ldw	r2,-32768(gp)
   80c80:	10801804 	addi	r2,r2,96
   80c84:	10800017 	ldw	r2,0(r2)
   80c88:	100b883a 	mov	r5,r2
   80c8c:	01000274 	movhi	r4,9
   80c90:	2107fa04 	addi	r4,r4,8168
   80c94:	00831400 	call	83140 <printf>
		printf( "Successful frames: %x \n", *(tse + 0x1A) );
   80c98:	d0a00017 	ldw	r2,-32768(gp)
   80c9c:	10801a04 	addi	r2,r2,104
   80ca0:	10800017 	ldw	r2,0(r2)
   80ca4:	100b883a 	mov	r5,r2
   80ca8:	01000274 	movhi	r4,9
   80cac:	2107ff04 	addi	r4,r4,8188
   80cb0:	00831400 	call	83140 <printf>
		printf( "Broadcast frames: %x \n", *(tse + 0x26) );
   80cb4:	d0a00017 	ldw	r2,-32768(gp)
   80cb8:	10802604 	addi	r2,r2,152
   80cbc:	10800017 	ldw	r2,0(r2)
   80cc0:	100b883a 	mov	r5,r2
   80cc4:	01000274 	movhi	r4,9
   80cc8:	21080504 	addi	r4,r4,8212
   80ccc:	00831400 	call	83140 <printf>
		alt_dcache_flush_all();
   80cd0:	008e6300 	call	8e630 <alt_dcache_flush_all>
	}
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   80cd4:	0001883a 	nop
   80cd8:	01000434 	movhi	r4,16
   80cdc:	21001004 	addi	r4,r4,64
   80ce0:	00902d00 	call	902d0 <alt_avalon_sgdma_check_descriptor_status>
   80ce4:	103ffc1e 	bne	r2,zero,80cd8 <rx_descriptor_end+0xfff80c78>
		;

	count++;
   80ce8:	d0a7e917 	ldw	r2,-24668(gp)
   80cec:	10800044 	addi	r2,r2,1
   80cf0:	d0a7e915 	stw	r2,-24668(gp)
	// Create new receive sgdma descriptor
	//alt_avalon_sgdma_construct_stream_to_mem_desc(&rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

	// Set up non-blocking transfer of sgdma receive descriptor
	//alt_avalon_sgdma_do_async_transfer(sgdma_rx_dev, &rx_descriptor);
}
   80cf4:	0001883a 	nop
   80cf8:	e037883a 	mov	sp,fp
   80cfc:	dfc00117 	ldw	ra,4(sp)
   80d00:	df000017 	ldw	fp,0(sp)
   80d04:	dec00204 	addi	sp,sp,8
   80d08:	f800283a 	ret

00080d0c <tx_ethernet_isr>:

void tx_ethernet_isr (void *context){
   80d0c:	defffa04 	addi	sp,sp,-24
   80d10:	dfc00515 	stw	ra,20(sp)
   80d14:	df000415 	stw	fp,16(sp)
   80d18:	df000404 	addi	fp,sp,16
   80d1c:	e13fff15 	stw	r4,-4(fp)

	transmissionStatus = 1;
   80d20:	00800044 	movi	r2,1
   80d24:	d0a7eb15 	stw	r2,-24660(gp)
	printf("Destination address: %x.%x.%x.%x.%x.%x \n", tx_frame[2], tx_frame[3], tx_frame[4], tx_frame[5],tx_frame[6], tx_frame[7] );
   80d28:	00800274 	movhi	r2,9
   80d2c:	10897804 	addi	r2,r2,9696
   80d30:	10800083 	ldbu	r2,2(r2)
   80d34:	11403fcc 	andi	r5,r2,255
   80d38:	00800274 	movhi	r2,9
   80d3c:	10897804 	addi	r2,r2,9696
   80d40:	108000c3 	ldbu	r2,3(r2)
   80d44:	11803fcc 	andi	r6,r2,255
   80d48:	00800274 	movhi	r2,9
   80d4c:	10897804 	addi	r2,r2,9696
   80d50:	10800103 	ldbu	r2,4(r2)
   80d54:	11c03fcc 	andi	r7,r2,255
   80d58:	00800274 	movhi	r2,9
   80d5c:	10897804 	addi	r2,r2,9696
   80d60:	10800143 	ldbu	r2,5(r2)
   80d64:	10c03fcc 	andi	r3,r2,255
   80d68:	00800274 	movhi	r2,9
   80d6c:	10897804 	addi	r2,r2,9696
   80d70:	10800183 	ldbu	r2,6(r2)
   80d74:	11003fcc 	andi	r4,r2,255
   80d78:	00800274 	movhi	r2,9
   80d7c:	10897804 	addi	r2,r2,9696
   80d80:	108001c3 	ldbu	r2,7(r2)
   80d84:	10803fcc 	andi	r2,r2,255
   80d88:	d8800215 	stw	r2,8(sp)
   80d8c:	d9000115 	stw	r4,4(sp)
   80d90:	d8c00015 	stw	r3,0(sp)
   80d94:	01000274 	movhi	r4,9
   80d98:	21080b04 	addi	r4,r4,8236
   80d9c:	00831400 	call	83140 <printf>
	printf("Source address: %x.%x.%x.%x.%x.%x\n", tx_frame[8], tx_frame[9], tx_frame[10], tx_frame[11], tx_frame[12], tx_frame[13] );
   80da0:	00800274 	movhi	r2,9
   80da4:	10897804 	addi	r2,r2,9696
   80da8:	10800203 	ldbu	r2,8(r2)
   80dac:	11403fcc 	andi	r5,r2,255
   80db0:	00800274 	movhi	r2,9
   80db4:	10897804 	addi	r2,r2,9696
   80db8:	10800243 	ldbu	r2,9(r2)
   80dbc:	11803fcc 	andi	r6,r2,255
   80dc0:	00800274 	movhi	r2,9
   80dc4:	10897804 	addi	r2,r2,9696
   80dc8:	10800283 	ldbu	r2,10(r2)
   80dcc:	11c03fcc 	andi	r7,r2,255
   80dd0:	00800274 	movhi	r2,9
   80dd4:	10897804 	addi	r2,r2,9696
   80dd8:	108002c3 	ldbu	r2,11(r2)
   80ddc:	10c03fcc 	andi	r3,r2,255
   80de0:	00800274 	movhi	r2,9
   80de4:	10897804 	addi	r2,r2,9696
   80de8:	10800303 	ldbu	r2,12(r2)
   80dec:	11003fcc 	andi	r4,r2,255
   80df0:	00800274 	movhi	r2,9
   80df4:	10897804 	addi	r2,r2,9696
   80df8:	10800343 	ldbu	r2,13(r2)
   80dfc:	10803fcc 	andi	r2,r2,255
   80e00:	d8800215 	stw	r2,8(sp)
   80e04:	d9000115 	stw	r4,4(sp)
   80e08:	d8c00015 	stw	r3,0(sp)
   80e0c:	01000274 	movhi	r4,9
   80e10:	21081604 	addi	r4,r4,8280
   80e14:	00831400 	call	83140 <printf>
	printf("Source IP: %d.%d.%d.%d\n", tx_frame[16], tx_frame[17], tx_frame[18], tx_frame[19]);
   80e18:	00800274 	movhi	r2,9
   80e1c:	10897804 	addi	r2,r2,9696
   80e20:	10800403 	ldbu	r2,16(r2)
   80e24:	10c03fcc 	andi	r3,r2,255
   80e28:	00800274 	movhi	r2,9
   80e2c:	10897804 	addi	r2,r2,9696
   80e30:	10800443 	ldbu	r2,17(r2)
   80e34:	11003fcc 	andi	r4,r2,255
   80e38:	00800274 	movhi	r2,9
   80e3c:	10897804 	addi	r2,r2,9696
   80e40:	10800483 	ldbu	r2,18(r2)
   80e44:	11403fcc 	andi	r5,r2,255
   80e48:	00800274 	movhi	r2,9
   80e4c:	10897804 	addi	r2,r2,9696
   80e50:	108004c3 	ldbu	r2,19(r2)
   80e54:	10803fcc 	andi	r2,r2,255
   80e58:	d8800015 	stw	r2,0(sp)
   80e5c:	280f883a 	mov	r7,r5
   80e60:	200d883a 	mov	r6,r4
   80e64:	180b883a 	mov	r5,r3
   80e68:	01000274 	movhi	r4,9
   80e6c:	21081f04 	addi	r4,r4,8316
   80e70:	00831400 	call	83140 <printf>
	printf("Destination IP: %d.%d.%d.%d\n", tx_frame[20], tx_frame[21], tx_frame[22], tx_frame[23]);
   80e74:	00800274 	movhi	r2,9
   80e78:	10897804 	addi	r2,r2,9696
   80e7c:	10800503 	ldbu	r2,20(r2)
   80e80:	10c03fcc 	andi	r3,r2,255
   80e84:	00800274 	movhi	r2,9
   80e88:	10897804 	addi	r2,r2,9696
   80e8c:	10800543 	ldbu	r2,21(r2)
   80e90:	11003fcc 	andi	r4,r2,255
   80e94:	00800274 	movhi	r2,9
   80e98:	10897804 	addi	r2,r2,9696
   80e9c:	10800583 	ldbu	r2,22(r2)
   80ea0:	11403fcc 	andi	r5,r2,255
   80ea4:	00800274 	movhi	r2,9
   80ea8:	10897804 	addi	r2,r2,9696
   80eac:	108005c3 	ldbu	r2,23(r2)
   80eb0:	10803fcc 	andi	r2,r2,255
   80eb4:	d8800015 	stw	r2,0(sp)
   80eb8:	280f883a 	mov	r7,r5
   80ebc:	200d883a 	mov	r6,r4
   80ec0:	180b883a 	mov	r5,r3
   80ec4:	01000274 	movhi	r4,9
   80ec8:	21082504 	addi	r4,r4,8340
   80ecc:	00831400 	call	83140 <printf>
	printf("Source Port: %d%d%\n Destination Port: %d%d%\n ", tx_frame[24], tx_frame[25], tx_frame[26], tx_frame[27]);
   80ed0:	00800274 	movhi	r2,9
   80ed4:	10897804 	addi	r2,r2,9696
   80ed8:	10800603 	ldbu	r2,24(r2)
   80edc:	10c03fcc 	andi	r3,r2,255
   80ee0:	00800274 	movhi	r2,9
   80ee4:	10897804 	addi	r2,r2,9696
   80ee8:	10800643 	ldbu	r2,25(r2)
   80eec:	11003fcc 	andi	r4,r2,255
   80ef0:	00800274 	movhi	r2,9
   80ef4:	10897804 	addi	r2,r2,9696
   80ef8:	10800683 	ldbu	r2,26(r2)
   80efc:	11403fcc 	andi	r5,r2,255
   80f00:	00800274 	movhi	r2,9
   80f04:	10897804 	addi	r2,r2,9696
   80f08:	108006c3 	ldbu	r2,27(r2)
   80f0c:	10803fcc 	andi	r2,r2,255
   80f10:	d8800015 	stw	r2,0(sp)
   80f14:	280f883a 	mov	r7,r5
   80f18:	200d883a 	mov	r6,r4
   80f1c:	180b883a 	mov	r5,r3
   80f20:	01000274 	movhi	r4,9
   80f24:	21082d04 	addi	r4,r4,8372
   80f28:	00831400 	call	83140 <printf>
	printf("SYN: %x FIN: %x%\n Seq: %x Ack: %x%\n ", tx_frame[28], tx_frame[29], tx_frame[30], tx_frame[31]);
   80f2c:	00800274 	movhi	r2,9
   80f30:	10897804 	addi	r2,r2,9696
   80f34:	10800703 	ldbu	r2,28(r2)
   80f38:	10c03fcc 	andi	r3,r2,255
   80f3c:	00800274 	movhi	r2,9
   80f40:	10897804 	addi	r2,r2,9696
   80f44:	10800743 	ldbu	r2,29(r2)
   80f48:	11003fcc 	andi	r4,r2,255
   80f4c:	00800274 	movhi	r2,9
   80f50:	10897804 	addi	r2,r2,9696
   80f54:	10800783 	ldbu	r2,30(r2)
   80f58:	11403fcc 	andi	r5,r2,255
   80f5c:	00800274 	movhi	r2,9
   80f60:	10897804 	addi	r2,r2,9696
   80f64:	108007c3 	ldbu	r2,31(r2)
   80f68:	10803fcc 	andi	r2,r2,255
   80f6c:	d8800015 	stw	r2,0(sp)
   80f70:	280f883a 	mov	r7,r5
   80f74:	200d883a 	mov	r6,r4
   80f78:	180b883a 	mov	r5,r3
   80f7c:	01000274 	movhi	r4,9
   80f80:	21083904 	addi	r4,r4,8420
   80f84:	00831400 	call	83140 <printf>
	printf("Data: %x%\n ", tx_frame[32]);
   80f88:	00800274 	movhi	r2,9
   80f8c:	10897804 	addi	r2,r2,9696
   80f90:	10800803 	ldbu	r2,32(r2)
   80f94:	10803fcc 	andi	r2,r2,255
   80f98:	100b883a 	mov	r5,r2
   80f9c:	01000274 	movhi	r4,9
   80fa0:	21084304 	addi	r4,r4,8460
   80fa4:	00831400 	call	83140 <printf>
	printf("Frames Transmitted: %x\n", *(tse + 0x1A) );
   80fa8:	d0a00017 	ldw	r2,-32768(gp)
   80fac:	10801a04 	addi	r2,r2,104
   80fb0:	10800017 	ldw	r2,0(r2)
   80fb4:	100b883a 	mov	r5,r2
   80fb8:	01000274 	movhi	r4,9
   80fbc:	21084604 	addi	r4,r4,8472
   80fc0:	00831400 	call	83140 <printf>
	printf("Pause Frames Transmitted: %x \n", *(tse + 0x20));
   80fc4:	d0a00017 	ldw	r2,-32768(gp)
   80fc8:	10802004 	addi	r2,r2,128
   80fcc:	10800017 	ldw	r2,0(r2)
   80fd0:	100b883a 	mov	r5,r2
   80fd4:	01000274 	movhi	r4,9
   80fd8:	21084c04 	addi	r4,r4,8496
   80fdc:	00831400 	call	83140 <printf>
	printf("Config Register: 0x%x\n", *(tse + 0x02));
   80fe0:	d0a00017 	ldw	r2,-32768(gp)
   80fe4:	10800204 	addi	r2,r2,8
   80fe8:	10800017 	ldw	r2,0(r2)
   80fec:	100b883a 	mov	r5,r2
   80ff0:	01000274 	movhi	r4,9
   80ff4:	21085404 	addi	r4,r4,8528
   80ff8:	00831400 	call	83140 <printf>

	// Wait until transmit descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   80ffc:	0001883a 	nop
   81000:	01000434 	movhi	r4,16
   81004:	21000004 	addi	r4,r4,0
   81008:	00902d00 	call	902d0 <alt_avalon_sgdma_check_descriptor_status>
   8100c:	103ffc1e 	bne	r2,zero,81000 <rx_descriptor_end+0xfff80fa0>
	/*	// Create new sgdma transmit descriptor
	alt_avalon_sgdma_construct_mem_to_stream_desc(&tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, strlen(tx_frame)+6+6+2, 0, 1, 1, 0);

	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer(sgdma_tx_dev, &tx_descriptor);*/
}
   81010:	0001883a 	nop
   81014:	e037883a 	mov	sp,fp
   81018:	dfc00117 	ldw	ra,4(sp)
   8101c:	df000017 	ldw	fp,0(sp)
   81020:	dec00204 	addi	sp,sp,8
   81024:	f800283a 	ret

00081028 <connect>:
int seqNumber = 0x00;
int ackNumber = 0x00;

int timer;

int connect(int device, unsigned char * sourceIP, unsigned char * sourcePort, unsigned char * destinationIP, unsigned char * destinationPort){
   81028:	defff904 	addi	sp,sp,-28
   8102c:	dfc00615 	stw	ra,24(sp)
   81030:	df000515 	stw	fp,20(sp)
   81034:	df000504 	addi	fp,sp,20
   81038:	e13ffc15 	stw	r4,-16(fp)
   8103c:	e17ffd15 	stw	r5,-12(fp)
   81040:	e1bffe15 	stw	r6,-8(fp)
   81044:	e1ffff15 	stw	r7,-4(fp)
	printf("connect function\n");
   81048:	01000274 	movhi	r4,9
   8104c:	21085a04 	addi	r4,r4,8552
   81050:	008325c0 	call	8325c <puts>
	conn->syn[0] = 0x01;
   81054:	d0a7f017 	ldw	r2,-24640(gp)
   81058:	00c00044 	movi	r3,1
   8105c:	10c00205 	stb	r3,8(r2)
	conn->fin[0] = 0x00;
   81060:	d0a7f017 	ldw	r2,-24640(gp)
   81064:	10000285 	stb	zero,10(r2)
	memmove(conn->destPort, destinationPort, 2);
   81068:	d0a7f017 	ldw	r2,-24640(gp)
   8106c:	10800084 	addi	r2,r2,2
   81070:	01800084 	movi	r6,2
   81074:	e1400217 	ldw	r5,8(fp)
   81078:	1009883a 	mov	r4,r2
   8107c:	0082e8c0 	call	82e8c <memmove>
	memmove(conn->sourcePort, sourcePort, 2);
   81080:	d0a7f017 	ldw	r2,-24640(gp)
   81084:	01800084 	movi	r6,2
   81088:	e17ffe17 	ldw	r5,-8(fp)
   8108c:	1009883a 	mov	r4,r2
   81090:	0082e8c0 	call	82e8c <memmove>
	conn->seqNum[0] = seqNumber;
   81094:	d0a7f017 	ldw	r2,-24640(gp)
   81098:	d0e7ee17 	ldw	r3,-24648(gp)
   8109c:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   810a0:	d0a7f017 	ldw	r2,-24640(gp)
   810a4:	d0e7ef17 	ldw	r3,-24644(gp)
   810a8:	10c00185 	stb	r3,6(r2)
	conn->data[0] = 0x00;
   810ac:	d0a7f017 	ldw	r2,-24640(gp)
   810b0:	10000305 	stb	zero,12(r2)
	memmove(pack->sourceIP, sourceIP, 4);
   810b4:	d0a7f617 	ldw	r2,-24616(gp)
   810b8:	01800104 	movi	r6,4
   810bc:	e17ffd17 	ldw	r5,-12(fp)
   810c0:	1009883a 	mov	r4,r2
   810c4:	0082e8c0 	call	82e8c <memmove>
	memmove(pack->destIP, destinationIP, 4);
   810c8:	d0a7f617 	ldw	r2,-24616(gp)
   810cc:	10800104 	addi	r2,r2,4
   810d0:	01800104 	movi	r6,4
   810d4:	e17fff17 	ldw	r5,-4(fp)
   810d8:	1009883a 	mov	r4,r2
   810dc:	0082e8c0 	call	82e8c <memmove>
	pack->payload = conn;
   810e0:	d0a7f617 	ldw	r2,-24616(gp)
   810e4:	d0e7f017 	ldw	r3,-24640(gp)
   810e8:	10c00215 	stw	r3,8(r2)
	sentPacket = pack;
   810ec:	d0a7f617 	ldw	r2,-24616(gp)
   810f0:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);//Send Connection Request
   810f4:	d0a7f617 	ldw	r2,-24616(gp)
   810f8:	100b883a 	mov	r5,r2
   810fc:	e13ffc17 	ldw	r4,-16(fp)
   81100:	00802900 	call	80290 <transmit>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81104:	00c00084 	movi	r3,2
   81108:	00800434 	movhi	r2,16
   8110c:	10892004 	addi	r2,r2,9344
   81110:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xFFFF);
   81114:	00ffffd4 	movui	r3,65535
   81118:	00800434 	movhi	r2,16
   8111c:	10892204 	addi	r2,r2,9352
   81120:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
   81124:	00ffffd4 	movui	r3,65535
   81128:	00800434 	movhi	r2,16
   8112c:	10892304 	addi	r2,r2,9356
   81130:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   81134:	00c00104 	movi	r3,4
   81138:	00800434 	movhi	r2,16
   8113c:	10892104 	addi	r2,r2,9348
   81140:	10c00035 	stwio	r3,0(r2)
	char * receivedBuffer = {0};
   81144:	e03ffb15 	stw	zero,-20(fp)
	receivedBuffer = receive(device);//Wait to receive SYNACK
   81148:	e13ffc17 	ldw	r4,-16(fp)
   8114c:	00806bc0 	call	806bc <receive>
   81150:	e0bffb15 	stw	r2,-20(fp)
	if(receivedBuffer[32] == 0x01){
   81154:	e0bffb17 	ldw	r2,-20(fp)
   81158:	10800804 	addi	r2,r2,32
   8115c:	10800003 	ldbu	r2,0(r2)
   81160:	10803fcc 	andi	r2,r2,255
   81164:	1080201c 	xori	r2,r2,128
   81168:	10bfe004 	addi	r2,r2,-128
   8116c:	10800058 	cmpnei	r2,r2,1
   81170:	1000231e 	bne	r2,zero,81200 <connect+0x1d8>
		pack->payload->syn[0] = 0x00;
   81174:	d0a7f617 	ldw	r2,-24616(gp)
   81178:	10800217 	ldw	r2,8(r2)
   8117c:	10000205 	stb	zero,8(r2)
		pack->payload->data[0] = 0x02;
   81180:	d0a7f617 	ldw	r2,-24616(gp)
   81184:	10800217 	ldw	r2,8(r2)
   81188:	00c00084 	movi	r3,2
   8118c:	10c00305 	stb	r3,12(r2)
		pack->payload->seqNum[0] = ++seqNumber;
   81190:	d0a7f617 	ldw	r2,-24616(gp)
   81194:	10800217 	ldw	r2,8(r2)
   81198:	d0e7ee17 	ldw	r3,-24648(gp)
   8119c:	18c00044 	addi	r3,r3,1
   811a0:	d0e7ee15 	stw	r3,-24648(gp)
   811a4:	d0e7ee17 	ldw	r3,-24648(gp)
   811a8:	10c00105 	stb	r3,4(r2)
		pack->payload->ackNum[0] = ++ackNumber;
   811ac:	d0a7f617 	ldw	r2,-24616(gp)
   811b0:	10800217 	ldw	r2,8(r2)
   811b4:	d0e7ef17 	ldw	r3,-24644(gp)
   811b8:	18c00044 	addi	r3,r3,1
   811bc:	d0e7ef15 	stw	r3,-24644(gp)
   811c0:	d0e7ef17 	ldw	r3,-24644(gp)
   811c4:	10c00185 	stb	r3,6(r2)
		transmit(device, pack);//send ack
   811c8:	d0a7f617 	ldw	r2,-24616(gp)
   811cc:	100b883a 	mov	r5,r2
   811d0:	e13ffc17 	ldw	r4,-16(fp)
   811d4:	00802900 	call	80290 <transmit>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   811d8:	00c00204 	movi	r3,8
   811dc:	00800434 	movhi	r2,16
   811e0:	10892104 	addi	r2,r2,9348
   811e4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   811e8:	00c00084 	movi	r3,2
   811ec:	00800434 	movhi	r2,16
   811f0:	10892004 	addi	r2,r2,9344
   811f4:	10c00035 	stwio	r3,0(r2)
		return 1;
   811f8:	00800044 	movi	r2,1
   811fc:	00000f06 	br	8123c <connect+0x214>
	}else{
		alt_printf("Connection Failed");
   81200:	01000274 	movhi	r4,9
   81204:	21085f04 	addi	r4,r4,8572
   81208:	008eb300 	call	8eb30 <alt_printf>
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
   8120c:	00800434 	movhi	r2,16
   81210:	10892004 	addi	r2,r2,9344
   81214:	10800037 	ldwio	r2,0(r2)
   81218:	d0a7f115 	stw	r2,-24636(gp)
		if(timer == 1){
   8121c:	d0a7f117 	ldw	r2,-24636(gp)
   81220:	10800058 	cmpnei	r2,r2,1
   81224:	1000041e 	bne	r2,zero,81238 <connect+0x210>
			transmit(device, sentPacket);
   81228:	d0a7f217 	ldw	r2,-24632(gp)
   8122c:	100b883a 	mov	r5,r2
   81230:	e13ffc17 	ldw	r4,-16(fp)
   81234:	00802900 	call	80290 <transmit>
		}
		return 0;
   81238:	0005883a 	mov	r2,zero
	}
}
   8123c:	e037883a 	mov	sp,fp
   81240:	dfc00117 	ldw	ra,4(sp)
   81244:	df000017 	ldw	fp,0(sp)
   81248:	dec00204 	addi	sp,sp,8
   8124c:	f800283a 	ret

00081250 <send>:

int send(int device, unsigned char data){
   81250:	defffb04 	addi	sp,sp,-20
   81254:	dfc00415 	stw	ra,16(sp)
   81258:	df000315 	stw	fp,12(sp)
   8125c:	df000304 	addi	fp,sp,12
   81260:	e13ffe15 	stw	r4,-8(fp)
   81264:	2805883a 	mov	r2,r5
   81268:	e0bfff05 	stb	r2,-4(fp)
	printf("send function\n");
   8126c:	01000274 	movhi	r4,9
   81270:	21086404 	addi	r4,r4,8592
   81274:	008325c0 	call	8325c <puts>
	conn->syn[0] = 0x00;
   81278:	d0a7f017 	ldw	r2,-24640(gp)
   8127c:	10000205 	stb	zero,8(r2)
	conn->fin[0] = 0x00;
   81280:	d0a7f017 	ldw	r2,-24640(gp)
   81284:	10000285 	stb	zero,10(r2)
	conn->seqNum[0] = seqNumber;
   81288:	d0a7f017 	ldw	r2,-24640(gp)
   8128c:	d0e7ee17 	ldw	r3,-24648(gp)
   81290:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   81294:	d0a7f017 	ldw	r2,-24640(gp)
   81298:	d0e7ef17 	ldw	r3,-24644(gp)
   8129c:	10c00185 	stb	r3,6(r2)
	conn->data[0] = data;
   812a0:	d0a7f017 	ldw	r2,-24640(gp)
   812a4:	e0ffff03 	ldbu	r3,-4(fp)
   812a8:	10c00305 	stb	r3,12(r2)
	pack->payload = conn;
   812ac:	d0a7f617 	ldw	r2,-24616(gp)
   812b0:	d0e7f017 	ldw	r3,-24640(gp)
   812b4:	10c00215 	stw	r3,8(r2)

	sentPacket = pack;
   812b8:	d0a7f617 	ldw	r2,-24616(gp)
   812bc:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);
   812c0:	d0a7f617 	ldw	r2,-24616(gp)
   812c4:	100b883a 	mov	r5,r2
   812c8:	e13ffe17 	ldw	r4,-8(fp)
   812cc:	00802900 	call	80290 <transmit>

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   812d0:	00c00084 	movi	r3,2
   812d4:	00800434 	movhi	r2,16
   812d8:	10892004 	addi	r2,r2,9344
   812dc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
   812e0:	00eaaa94 	movui	r3,43690
   812e4:	00800434 	movhi	r2,16
   812e8:	10892204 	addi	r2,r2,9352
   812ec:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0x002F);
   812f0:	00c00bc4 	movi	r3,47
   812f4:	00800434 	movhi	r2,16
   812f8:	10892304 	addi	r2,r2,9356
   812fc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   81300:	00c00104 	movi	r3,4
   81304:	00800434 	movhi	r2,16
   81308:	10892104 	addi	r2,r2,9348
   8130c:	10c00035 	stwio	r3,0(r2)

	unsigned char * receivedBuffer;

	receivedBuffer = receive(device);
   81310:	e13ffe17 	ldw	r4,-8(fp)
   81314:	00806bc0 	call	806bc <receive>
   81318:	e0bffd15 	stw	r2,-12(fp)
	if(receivedBuffer[32] == 0x02){
   8131c:	e0bffd17 	ldw	r2,-12(fp)
   81320:	10800804 	addi	r2,r2,32
   81324:	10800003 	ldbu	r2,0(r2)
   81328:	10803fcc 	andi	r2,r2,255
   8132c:	10800098 	cmpnei	r2,r2,2
   81330:	1000131e 	bne	r2,zero,81380 <send+0x130>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   81334:	00c00204 	movi	r3,8
   81338:	00800434 	movhi	r2,16
   8133c:	10892104 	addi	r2,r2,9348
   81340:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81344:	00c00084 	movi	r3,2
   81348:	00800434 	movhi	r2,16
   8134c:	10892004 	addi	r2,r2,9344
   81350:	10c00035 	stwio	r3,0(r2)
		alt_printf("Ack received");
   81354:	01000274 	movhi	r4,9
   81358:	21086804 	addi	r4,r4,8608
   8135c:	008eb300 	call	8eb30 <alt_printf>
		seqNumber++;
   81360:	d0a7ee17 	ldw	r2,-24648(gp)
   81364:	10800044 	addi	r2,r2,1
   81368:	d0a7ee15 	stw	r2,-24648(gp)
		ackNumber++;
   8136c:	d0a7ef17 	ldw	r2,-24644(gp)
   81370:	10800044 	addi	r2,r2,1
   81374:	d0a7ef15 	stw	r2,-24644(gp)
		return 1;//sent and ack received
   81378:	00800044 	movi	r2,1
   8137c:	00000e06 	br	813b8 <send+0x168>
	}
	else{
		alt_printf("Timeout Occurred");
   81380:	01000274 	movhi	r4,9
   81384:	21086c04 	addi	r4,r4,8624
   81388:	008eb300 	call	8eb30 <alt_printf>
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
   8138c:	00800434 	movhi	r2,16
   81390:	10892004 	addi	r2,r2,9344
   81394:	10800037 	ldwio	r2,0(r2)
   81398:	d0a7f115 	stw	r2,-24636(gp)
		if(timer == 1){
   8139c:	d0a7f117 	ldw	r2,-24636(gp)
   813a0:	10800058 	cmpnei	r2,r2,1
   813a4:	1000041e 	bne	r2,zero,813b8 <send+0x168>
			transmit(device, sentPacket);
   813a8:	d0a7f217 	ldw	r2,-24632(gp)
   813ac:	100b883a 	mov	r5,r2
   813b0:	e13ffe17 	ldw	r4,-8(fp)
   813b4:	00802900 	call	80290 <transmit>
		}
	}
}
   813b8:	e037883a 	mov	sp,fp
   813bc:	dfc00117 	ldw	ra,4(sp)
   813c0:	df000017 	ldw	fp,0(sp)
   813c4:	dec00204 	addi	sp,sp,8
   813c8:	f800283a 	ret

000813cc <accept>:


int accept(int device){
   813cc:	defffb04 	addi	sp,sp,-20
   813d0:	dfc00415 	stw	ra,16(sp)
   813d4:	df000315 	stw	fp,12(sp)
   813d8:	df000304 	addi	fp,sp,12
   813dc:	e13fff15 	stw	r4,-4(fp)
	//TODO: Check if destIP, port is myIP, port
	printf("accept function\n");
   813e0:	01000274 	movhi	r4,9
   813e4:	21087104 	addi	r4,r4,8644
   813e8:	008325c0 	call	8325c <puts>
	unsigned char * request;
	request = receive(device);
   813ec:	e13fff17 	ldw	r4,-4(fp)
   813f0:	00806bc0 	call	806bc <receive>
   813f4:	e0bffd15 	stw	r2,-12(fp)

	conn->syn[0] = 0x01;
   813f8:	d0a7f017 	ldw	r2,-24640(gp)
   813fc:	00c00044 	movi	r3,1
   81400:	10c00205 	stb	r3,8(r2)
	conn->fin[0] = 0x00;
   81404:	d0a7f017 	ldw	r2,-24640(gp)
   81408:	10000285 	stb	zero,10(r2)
	memmove(conn->destPort, request+24, 2);
   8140c:	d0a7f017 	ldw	r2,-24640(gp)
   81410:	10c00084 	addi	r3,r2,2
   81414:	e0bffd17 	ldw	r2,-12(fp)
   81418:	10800604 	addi	r2,r2,24
   8141c:	01800084 	movi	r6,2
   81420:	100b883a 	mov	r5,r2
   81424:	1809883a 	mov	r4,r3
   81428:	0082e8c0 	call	82e8c <memmove>
	memmove(conn->sourcePort, request+26, 2);
   8142c:	d0a7f017 	ldw	r2,-24640(gp)
   81430:	1007883a 	mov	r3,r2
   81434:	e0bffd17 	ldw	r2,-12(fp)
   81438:	10800684 	addi	r2,r2,26
   8143c:	01800084 	movi	r6,2
   81440:	100b883a 	mov	r5,r2
   81444:	1809883a 	mov	r4,r3
   81448:	0082e8c0 	call	82e8c <memmove>
	conn->seqNum[0] = seqNumber;
   8144c:	d0a7f017 	ldw	r2,-24640(gp)
   81450:	d0e7ee17 	ldw	r3,-24648(gp)
   81454:	10c00105 	stb	r3,4(r2)
	conn->ackNum[0] = ackNumber;
   81458:	d0a7f017 	ldw	r2,-24640(gp)
   8145c:	d0e7ef17 	ldw	r3,-24644(gp)
   81460:	10c00185 	stb	r3,6(r2)
	conn->data[0] = 0x01;
   81464:	d0a7f017 	ldw	r2,-24640(gp)
   81468:	00c00044 	movi	r3,1
   8146c:	10c00305 	stb	r3,12(r2)

	memmove(pack->sourceIP, request+20, 4);
   81470:	d0a7f617 	ldw	r2,-24616(gp)
   81474:	1007883a 	mov	r3,r2
   81478:	e0bffd17 	ldw	r2,-12(fp)
   8147c:	10800504 	addi	r2,r2,20
   81480:	01800104 	movi	r6,4
   81484:	100b883a 	mov	r5,r2
   81488:	1809883a 	mov	r4,r3
   8148c:	0082e8c0 	call	82e8c <memmove>
	memmove(pack->destIP, request+20, 4);
   81490:	d0a7f617 	ldw	r2,-24616(gp)
   81494:	10c00104 	addi	r3,r2,4
   81498:	e0bffd17 	ldw	r2,-12(fp)
   8149c:	10800504 	addi	r2,r2,20
   814a0:	01800104 	movi	r6,4
   814a4:	100b883a 	mov	r5,r2
   814a8:	1809883a 	mov	r4,r3
   814ac:	0082e8c0 	call	82e8c <memmove>
	pack->payload = conn;
   814b0:	d0a7f617 	ldw	r2,-24616(gp)
   814b4:	d0e7f017 	ldw	r3,-24640(gp)
   814b8:	10c00215 	stw	r3,8(r2)

	if(request[28] == 0x01){
   814bc:	e0bffd17 	ldw	r2,-12(fp)
   814c0:	10800704 	addi	r2,r2,28
   814c4:	10800003 	ldbu	r2,0(r2)
   814c8:	10803fcc 	andi	r2,r2,255
   814cc:	10800058 	cmpnei	r2,r2,1
   814d0:	1000061e 	bne	r2,zero,814ec <accept+0x120>
		sentPacket = pack;
   814d4:	d0a7f617 	ldw	r2,-24616(gp)
   814d8:	d0a7f215 	stw	r2,-24632(gp)
		transmit(device, pack);
   814dc:	d0a7f617 	ldw	r2,-24616(gp)
   814e0:	100b883a 	mov	r5,r2
   814e4:	e13fff17 	ldw	r4,-4(fp)
   814e8:	00802900 	call	80290 <transmit>
		//return 1;
		//return 1;
	}

	unsigned char * ack;
	ack = receive(device);
   814ec:	e13fff17 	ldw	r4,-4(fp)
   814f0:	00806bc0 	call	806bc <receive>
   814f4:	e0bffe15 	stw	r2,-8(fp)
	if(ack[32] == 0x02){
   814f8:	e0bffe17 	ldw	r2,-8(fp)
   814fc:	10800804 	addi	r2,r2,32
   81500:	10800003 	ldbu	r2,0(r2)
   81504:	10803fcc 	andi	r2,r2,255
   81508:	10800098 	cmpnei	r2,r2,2
   8150c:	1000091e 	bne	r2,zero,81534 <accept+0x168>
		//Received Ack
		printf("Three way handshake complete");
   81510:	01000274 	movhi	r4,9
   81514:	21087504 	addi	r4,r4,8660
   81518:	00831400 	call	83140 <printf>
		fflush(stdout);
   8151c:	d0a00217 	ldw	r2,-32760(gp)
   81520:	10800217 	ldw	r2,8(r2)
   81524:	1009883a 	mov	r4,r2
   81528:	0081ccc0 	call	81ccc <fflush>
		return 1;
   8152c:	00800044 	movi	r2,1
   81530:	00000106 	br	81538 <accept+0x16c>
	}
	else return 0;
   81534:	0005883a 	mov	r2,zero
}
   81538:	e037883a 	mov	sp,fp
   8153c:	dfc00117 	ldw	ra,4(sp)
   81540:	df000017 	ldw	fp,0(sp)
   81544:	dec00204 	addi	sp,sp,8
   81548:	f800283a 	ret

0008154c <recv>:

int recv(int device){
   8154c:	defffc04 	addi	sp,sp,-16
   81550:	dfc00315 	stw	ra,12(sp)
   81554:	df000215 	stw	fp,8(sp)
   81558:	df000204 	addi	fp,sp,8
   8155c:	e13fff15 	stw	r4,-4(fp)
	printf("receive function\n");
   81560:	01000274 	movhi	r4,9
   81564:	21087d04 	addi	r4,r4,8692
   81568:	008325c0 	call	8325c <puts>
	unsigned char * recvData;
	//signed char * recvData;
	recvData = receive(device);
   8156c:	e13fff17 	ldw	r4,-4(fp)
   81570:	00806bc0 	call	806bc <receive>
   81574:	e0bffe15 	stw	r2,-8(fp)
	if(recvData[32]!= 0x02){
   81578:	e0bffe17 	ldw	r2,-8(fp)
   8157c:	10800804 	addi	r2,r2,32
   81580:	10800003 	ldbu	r2,0(r2)
   81584:	10803fcc 	andi	r2,r2,255
   81588:	108000a0 	cmpeqi	r2,r2,2
   8158c:	1000171e 	bne	r2,zero,815ec <recv+0xa0>
		//Store Data
		//Send Ack
		pack->payload->syn[0] = 0x00;
   81590:	d0a7f617 	ldw	r2,-24616(gp)
   81594:	10800217 	ldw	r2,8(r2)
   81598:	10000205 	stb	zero,8(r2)
		pack->payload->data[0] = 0x02;
   8159c:	d0a7f617 	ldw	r2,-24616(gp)
   815a0:	10800217 	ldw	r2,8(r2)
   815a4:	00c00084 	movi	r3,2
   815a8:	10c00305 	stb	r3,12(r2)
		transmit(device, pack);
   815ac:	d0a7f617 	ldw	r2,-24616(gp)
   815b0:	100b883a 	mov	r5,r2
   815b4:	e13fff17 	ldw	r4,-4(fp)
   815b8:	00802900 	call	80290 <transmit>
		printf("Data Received: %x\n",recvData+32);
   815bc:	e0bffe17 	ldw	r2,-8(fp)
   815c0:	10800804 	addi	r2,r2,32
   815c4:	100b883a 	mov	r5,r2
   815c8:	01000274 	movhi	r4,9
   815cc:	21088204 	addi	r4,r4,8712
   815d0:	00831400 	call	83140 <printf>
		fflush(stdout);
   815d4:	d0a00217 	ldw	r2,-32760(gp)
   815d8:	10800217 	ldw	r2,8(r2)
   815dc:	1009883a 	mov	r4,r2
   815e0:	0081ccc0 	call	81ccc <fflush>
		return 1;
   815e4:	00800044 	movi	r2,1
   815e8:	00000306 	br	815f8 <recv+0xac>
	}
	else{
		printf("Ack received");
   815ec:	01000274 	movhi	r4,9
   815f0:	21086804 	addi	r4,r4,8608
   815f4:	00831400 	call	83140 <printf>
	}
}
   815f8:	e037883a 	mov	sp,fp
   815fc:	dfc00117 	ldw	ra,4(sp)
   81600:	df000017 	ldw	fp,0(sp)
   81604:	dec00204 	addi	sp,sp,8
   81608:	f800283a 	ret

0008160c <disconnect>:

int disconnect(int device){
   8160c:	defffc04 	addi	sp,sp,-16
   81610:	dfc00315 	stw	ra,12(sp)
   81614:	df000215 	stw	fp,8(sp)
   81618:	df000204 	addi	fp,sp,8
   8161c:	e13fff15 	stw	r4,-4(fp)
	printf("disconnect function\n");
   81620:	01000274 	movhi	r4,9
   81624:	21088704 	addi	r4,r4,8732
   81628:	008325c0 	call	8325c <puts>
	conn->fin[0] = 0x01;
   8162c:	d0a7f017 	ldw	r2,-24640(gp)
   81630:	00c00044 	movi	r3,1
   81634:	10c00285 	stb	r3,10(r2)
	sentPacket = pack;
   81638:	d0a7f617 	ldw	r2,-24616(gp)
   8163c:	d0a7f215 	stw	r2,-24632(gp)
	transmit(device, pack);
   81640:	d0a7f617 	ldw	r2,-24616(gp)
   81644:	100b883a 	mov	r5,r2
   81648:	e13fff17 	ldw	r4,-4(fp)
   8164c:	00802900 	call	80290 <transmit>

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   81650:	00c00084 	movi	r3,2
   81654:	00800434 	movhi	r2,16
   81658:	10892004 	addi	r2,r2,9344
   8165c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
   81660:	00eaaa94 	movui	r3,43690
   81664:	00800434 	movhi	r2,16
   81668:	10892204 	addi	r2,r2,9352
   8166c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
   81670:	00ffffd4 	movui	r3,65535
   81674:	00800434 	movhi	r2,16
   81678:	10892304 	addi	r2,r2,9356
   8167c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
   81680:	00c00104 	movi	r3,4
   81684:	00800434 	movhi	r2,16
   81688:	10892104 	addi	r2,r2,9348
   8168c:	10c00035 	stwio	r3,0(r2)

	unsigned char * discon_temp;

	discon_temp = receive(device);
   81690:	e13fff17 	ldw	r4,-4(fp)
   81694:	00806bc0 	call	806bc <receive>
   81698:	e0bffe15 	stw	r2,-8(fp)
	if(discon_temp[32]==0x02){
   8169c:	e0bffe17 	ldw	r2,-8(fp)
   816a0:	10800804 	addi	r2,r2,32
   816a4:	10800003 	ldbu	r2,0(r2)
   816a8:	10803fcc 	andi	r2,r2,255
   816ac:	10800098 	cmpnei	r2,r2,2
   816b0:	10000d1e 	bne	r2,zero,816e8 <disconnect+0xdc>
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
   816b4:	00c00204 	movi	r3,8
   816b8:	00800434 	movhi	r2,16
   816bc:	10892104 	addi	r2,r2,9348
   816c0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
   816c4:	00c00084 	movi	r3,2
   816c8:	00800434 	movhi	r2,16
   816cc:	10892004 	addi	r2,r2,9344
   816d0:	10c00035 	stwio	r3,0(r2)
		printf("Disconnected");
   816d4:	01000274 	movhi	r4,9
   816d8:	21088c04 	addi	r4,r4,8752
   816dc:	00831400 	call	83140 <printf>
		return 1;
   816e0:	00800044 	movi	r2,1
   816e4:	00000006 	br	816e8 <disconnect+0xdc>
	}
}
   816e8:	e037883a 	mov	sp,fp
   816ec:	dfc00117 	ldw	ra,4(sp)
   816f0:	df000017 	ldw	fp,0(sp)
   816f4:	dec00204 	addi	sp,sp,8
   816f8:	f800283a 	ret

000816fc <recDisconnect>:

int recDisconnect(int device){
   816fc:	defffc04 	addi	sp,sp,-16
   81700:	dfc00315 	stw	ra,12(sp)
   81704:	df000215 	stw	fp,8(sp)
   81708:	df000204 	addi	fp,sp,8
   8170c:	e13fff15 	stw	r4,-4(fp)
	printf("recdisconnect function\n");
   81710:	01000274 	movhi	r4,9
   81714:	21089004 	addi	r4,r4,8768
   81718:	008325c0 	call	8325c <puts>
	unsigned char * dreq;
	dreq = receive(device);
   8171c:	e13fff17 	ldw	r4,-4(fp)
   81720:	00806bc0 	call	806bc <receive>
   81724:	e0bffe15 	stw	r2,-8(fp)
	if(dreq[29] == 0x01){
   81728:	e0bffe17 	ldw	r2,-8(fp)
   8172c:	10800744 	addi	r2,r2,29
   81730:	10800003 	ldbu	r2,0(r2)
   81734:	10803fcc 	andi	r2,r2,255
   81738:	10800058 	cmpnei	r2,r2,1
   8173c:	1000091e 	bne	r2,zero,81764 <recDisconnect+0x68>
		//send ack
		conn->data[0] = 0x02;
   81740:	d0a7f017 	ldw	r2,-24640(gp)
   81744:	00c00084 	movi	r3,2
   81748:	10c00305 	stb	r3,12(r2)
		transmit(device, pack);
   8174c:	d0a7f617 	ldw	r2,-24616(gp)
   81750:	100b883a 	mov	r5,r2
   81754:	e13fff17 	ldw	r4,-4(fp)
   81758:	00802900 	call	80290 <transmit>
		return 1;
   8175c:	00800044 	movi	r2,1
   81760:	00000006 	br	81764 <recDisconnect+0x68>
	}
}
   81764:	e037883a 	mov	sp,fp
   81768:	dfc00117 	ldw	ra,4(sp)
   8176c:	df000017 	ldw	fp,0(sp)
   81770:	dec00204 	addi	sp,sp,8
   81774:	f800283a 	ret

00081778 <main>:


int main(void){
   81778:	defff204 	addi	sp,sp,-56
   8177c:	dfc00d15 	stw	ra,52(sp)
   81780:	df000c15 	stw	fp,48(sp)
   81784:	df000c04 	addi	fp,sp,48
	printf("System Initialize.\n");
   81788:	01000274 	movhi	r4,9
   8178c:	21089604 	addi	r4,r4,8792
   81790:	008325c0 	call	8325c <puts>
	while(1){
		//sentPacket = (struct packet*)malloc(sizeof(struct packet));
		pack = (struct packet*)malloc(sizeof(struct packet));
   81794:	01000304 	movi	r4,12
   81798:	00826580 	call	82658 <malloc>
   8179c:	d0a7f615 	stw	r2,-24616(gp)
		conn = (struct segment*)malloc(sizeof(struct segment));
   817a0:	01000384 	movi	r4,14
   817a4:	00826580 	call	82658 <malloc>
   817a8:	d0a7f015 	stw	r2,-24640(gp)
		// IP addressed must be set here
		//int *array = malloc(10 * sizeof(int));
		unsigned char * IP1= malloc(4 * sizeof(unsigned char));
   817ac:	01000104 	movi	r4,4
   817b0:	00826580 	call	82658 <malloc>
   817b4:	e0bff715 	stw	r2,-36(fp)
		//{0xC0,0xA8,0x01,0x01};	//192.168.1.1  //new is 169.254.54.102
		IP1[0] = 0xA9;
   817b8:	e0bff717 	ldw	r2,-36(fp)
   817bc:	00ffea44 	movi	r3,-87
   817c0:	10c00005 	stb	r3,0(r2)
		IP1[1] = 0xFE;
   817c4:	e0bff717 	ldw	r2,-36(fp)
   817c8:	10800044 	addi	r2,r2,1
   817cc:	00ffff84 	movi	r3,-2
   817d0:	10c00005 	stb	r3,0(r2)
		IP1[2] = 0x36;
   817d4:	e0bff717 	ldw	r2,-36(fp)
   817d8:	10800084 	addi	r2,r2,2
   817dc:	00c00d84 	movi	r3,54
   817e0:	10c00005 	stb	r3,0(r2)
		IP1[3] = 0x66;
   817e4:	e0bff717 	ldw	r2,-36(fp)
   817e8:	108000c4 	addi	r2,r2,3
   817ec:	00c01984 	movi	r3,102
   817f0:	10c00005 	stb	r3,0(r2)
		//{0xC0,0xA8,0x01,0x02}; 	//192.168.1.2
		unsigned char * IP2= malloc(4 * sizeof(unsigned char));
   817f4:	01000104 	movi	r4,4
   817f8:	00826580 	call	82658 <malloc>
   817fc:	e0bff815 	stw	r2,-32(fp)
		IP2[0] = 0xA9;
   81800:	e0bff817 	ldw	r2,-32(fp)
   81804:	00ffea44 	movi	r3,-87
   81808:	10c00005 	stb	r3,0(r2)
		IP2[1] = 0xFE;
   8180c:	e0bff817 	ldw	r2,-32(fp)
   81810:	10800044 	addi	r2,r2,1
   81814:	00ffff84 	movi	r3,-2
   81818:	10c00005 	stb	r3,0(r2)
		IP2[2] = 0x6F;
   8181c:	e0bff817 	ldw	r2,-32(fp)
   81820:	10800084 	addi	r2,r2,2
   81824:	00c01bc4 	movi	r3,111
   81828:	10c00005 	stb	r3,0(r2)
		IP2[3] = 0xEF;
   8182c:	e0bff817 	ldw	r2,-32(fp)
   81830:	108000c4 	addi	r2,r2,3
   81834:	00fffbc4 	movi	r3,-17
   81838:	10c00005 	stb	r3,0(r2)

		unsigned char * sPort = malloc(2 * sizeof(unsigned char)); //set aside spot for both port values
   8183c:	01000084 	movi	r4,2
   81840:	00826580 	call	82658 <malloc>
   81844:	e0bff915 	stw	r2,-28(fp)
		sPort[0] = 0x27;
   81848:	e0bff917 	ldw	r2,-28(fp)
   8184c:	00c009c4 	movi	r3,39
   81850:	10c00005 	stb	r3,0(r2)
		sPort[1] = 0x0F;			//9999
   81854:	e0bff917 	ldw	r2,-28(fp)
   81858:	10800044 	addi	r2,r2,1
   8185c:	00c003c4 	movi	r3,15
   81860:	10c00005 	stb	r3,0(r2)

		unsigned char * dPort = malloc(2 * sizeof(unsigned char));
   81864:	01000084 	movi	r4,2
   81868:	00826580 	call	82658 <malloc>
   8186c:	e0bffa15 	stw	r2,-24(fp)
		dPort[0] = 0x23;
   81870:	e0bffa17 	ldw	r2,-24(fp)
   81874:	00c008c4 	movi	r3,35
   81878:	10c00005 	stb	r3,0(r2)
		dPort[1] = 0x82;			//9090
   8187c:	e0bffa17 	ldw	r2,-24(fp)
   81880:	10800044 	addi	r2,r2,1
   81884:	00ffe084 	movi	r3,-126
   81888:	10c00005 	stb	r3,0(r2)

		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0000);
   8188c:	0007883a 	mov	r3,zero
   81890:	00800434 	movhi	r2,16
   81894:	10892104 	addi	r2,r2,9348
   81898:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0000);
   8189c:	0007883a 	mov	r3,zero
   818a0:	00800434 	movhi	r2,16
   818a4:	10892004 	addi	r2,r2,9344
   818a8:	10c00035 	stwio	r3,0(r2)

		buffer[0] = 0xAA;
   818ac:	00bfea84 	movi	r2,-86
   818b0:	d0a7f405 	stb	r2,-24624(gp)
		buffer[1] = 0xBB;
   818b4:	00bfeec4 	movi	r2,-69
   818b8:	d0a7f445 	stb	r2,-24623(gp)
		buffer[2] = 0xCC;
   818bc:	00bff304 	movi	r2,-52
   818c0:	d0a7f485 	stb	r2,-24622(gp)
		buffer[3] = 0xDD;
   818c4:	00bff744 	movi	r2,-35
   818c8:	d0a7f4c5 	stb	r2,-24621(gp)
		buffer[4] = 0xEE;
   818cc:	00bffb84 	movi	r2,-18
   818d0:	d0a7f505 	stb	r2,-24620(gp)

		int transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   818d4:	00800434 	movhi	r2,16
   818d8:	10892804 	addi	r2,r2,9376
   818dc:	10800037 	ldwio	r2,0(r2)
   818e0:	e0bffb15 	stw	r2,-20(fp)
		int isConnected = 0;
   818e4:	e03ffc15 	stw	zero,-16(fp)

		while(1){
		transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   818e8:	00800434 	movhi	r2,16
   818ec:	10892804 	addi	r2,r2,9376
   818f0:	10800037 	ldwio	r2,0(r2)
   818f4:	e0bffb15 	stw	r2,-20(fp)
		if(transmit){
   818f8:	e0bffb17 	ldw	r2,-20(fp)
   818fc:	10002926 	beq	r2,zero,819a4 <main+0x22c>
			isConnected = connect(A,IP1, sPort, IP2, dPort);
   81900:	e0bffa17 	ldw	r2,-24(fp)
   81904:	d8800015 	stw	r2,0(sp)
   81908:	e1fff817 	ldw	r7,-32(fp)
   8190c:	e1bff917 	ldw	r6,-28(fp)
   81910:	e17ff717 	ldw	r5,-36(fp)
   81914:	0009883a 	mov	r4,zero
   81918:	00810280 	call	81028 <connect>
   8191c:	e0bffc15 	stw	r2,-16(fp)
			if(isConnected){
   81920:	e0bffc17 	ldw	r2,-16(fp)
   81924:	103ff026 	beq	r2,zero,818e8 <rx_descriptor_end+0xfff81888>
				int j = 0;
   81928:	e03ff515 	stw	zero,-44(fp)
				while(j < 5){
   8192c:	00001706 	br	8198c <main+0x214>
					int sent = 0;
   81930:	e03fff15 	stw	zero,-4(fp)
					sent = send(A, buffer[j]);
   81934:	e0fff517 	ldw	r3,-44(fp)
   81938:	d0a7f404 	addi	r2,gp,-24624
   8193c:	1885883a 	add	r2,r3,r2
   81940:	10800003 	ldbu	r2,0(r2)
   81944:	10803fcc 	andi	r2,r2,255
   81948:	100b883a 	mov	r5,r2
   8194c:	0009883a 	mov	r4,zero
   81950:	00812500 	call	81250 <send>
   81954:	e0bfff15 	stw	r2,-4(fp)
					if(sent){
   81958:	e0bfff17 	ldw	r2,-4(fp)
   8195c:	10000426 	beq	r2,zero,81970 <main+0x1f8>
						j++;
   81960:	e0bff517 	ldw	r2,-44(fp)
   81964:	10800044 	addi	r2,r2,1
   81968:	e0bff515 	stw	r2,-44(fp)
   8196c:	00000706 	br	8198c <main+0x214>
					}
					else {
						printf("ACK NOT RECEIVED");
   81970:	01000274 	movhi	r4,9
   81974:	21089b04 	addi	r4,r4,8812
   81978:	00831400 	call	83140 <printf>
						fflush(stdout);
   8197c:	d0a00217 	ldw	r2,-32760(gp)
   81980:	10800217 	ldw	r2,8(r2)
   81984:	1009883a 	mov	r4,r2
   81988:	0081ccc0 	call	81ccc <fflush>
		transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		if(transmit){
			isConnected = connect(A,IP1, sPort, IP2, dPort);
			if(isConnected){
				int j = 0;
				while(j < 5){
   8198c:	e0bff517 	ldw	r2,-44(fp)
   81990:	10800150 	cmplti	r2,r2,5
   81994:	103fe61e 	bne	r2,zero,81930 <rx_descriptor_end+0xfff818d0>
						printf("ACK NOT RECEIVED");
						fflush(stdout);
					}

				}
				disconnect(A);
   81998:	0009883a 	mov	r4,zero
   8199c:	008160c0 	call	8160c <disconnect>
   819a0:	003fd106 	br	818e8 <rx_descriptor_end+0xfff81888>
			}
		}
		else {
			int conn = accept(B);
   819a4:	01000044 	movi	r4,1
   819a8:	00813cc0 	call	813cc <accept>
   819ac:	e0bffd15 	stw	r2,-12(fp)
			if(conn){
   819b0:	e0bffd17 	ldw	r2,-12(fp)
   819b4:	10001f26 	beq	r2,zero,81a34 <main+0x2bc>
				printf("Connection Successful");
   819b8:	01000274 	movhi	r4,9
   819bc:	2108a004 	addi	r4,r4,8832
   819c0:	00831400 	call	83140 <printf>
				fflush(stdout);
   819c4:	d0a00217 	ldw	r2,-32760(gp)
   819c8:	10800217 	ldw	r2,8(r2)
   819cc:	1009883a 	mov	r4,r2
   819d0:	0081ccc0 	call	81ccc <fflush>
				printf("Receiving data");
   819d4:	01000274 	movhi	r4,9
   819d8:	2108a604 	addi	r4,r4,8856
   819dc:	00831400 	call	83140 <printf>
				fflush(stdout);
   819e0:	d0a00217 	ldw	r2,-32760(gp)
   819e4:	10800217 	ldw	r2,8(r2)
   819e8:	1009883a 	mov	r4,r2
   819ec:	0081ccc0 	call	81ccc <fflush>
				int k = 0;
   819f0:	e03ff615 	stw	zero,-40(fp)
				while(k < 5){
   819f4:	00000906 	br	81a1c <main+0x2a4>
					int rec = 0;
   819f8:	e03ffe15 	stw	zero,-8(fp)
					rec = recv(B);
   819fc:	01000044 	movi	r4,1
   81a00:	008154c0 	call	8154c <recv>
   81a04:	e0bffe15 	stw	r2,-8(fp)
					if(rec){
   81a08:	e0bffe17 	ldw	r2,-8(fp)
   81a0c:	10000326 	beq	r2,zero,81a1c <main+0x2a4>
						k++;
   81a10:	e0bff617 	ldw	r2,-40(fp)
   81a14:	10800044 	addi	r2,r2,1
   81a18:	e0bff615 	stw	r2,-40(fp)
				printf("Connection Successful");
				fflush(stdout);
				printf("Receiving data");
				fflush(stdout);
				int k = 0;
				while(k < 5){
   81a1c:	e0bff617 	ldw	r2,-40(fp)
   81a20:	10800150 	cmplti	r2,r2,5
   81a24:	103ff41e 	bne	r2,zero,819f8 <rx_descriptor_end+0xfff81998>
					rec = recv(B);
					if(rec){
						k++;
					}
				}
				recDisconnect(B);
   81a28:	01000044 	movi	r4,1
   81a2c:	00816fc0 	call	816fc <recDisconnect>
   81a30:	003fad06 	br	818e8 <rx_descriptor_end+0xfff81888>
			}
			else{
				printf("Connection Failed at Receiver");
   81a34:	01000274 	movhi	r4,9
   81a38:	2108aa04 	addi	r4,r4,8872
   81a3c:	00831400 	call	83140 <printf>
				fflush(stdout);
   81a40:	d0a00217 	ldw	r2,-32760(gp)
   81a44:	10800217 	ldw	r2,8(r2)
   81a48:	1009883a 	mov	r4,r2
   81a4c:	0081ccc0 	call	81ccc <fflush>
			}
		}
	}
   81a50:	003fa506 	br	818e8 <rx_descriptor_end+0xfff81888>

00081a54 <__sflush_r>:
   81a54:	2880030b 	ldhu	r2,12(r5)
   81a58:	defffb04 	addi	sp,sp,-20
   81a5c:	dcc00315 	stw	r19,12(sp)
   81a60:	dc400115 	stw	r17,4(sp)
   81a64:	dfc00415 	stw	ra,16(sp)
   81a68:	dc800215 	stw	r18,8(sp)
   81a6c:	dc000015 	stw	r16,0(sp)
   81a70:	10c0020c 	andi	r3,r2,8
   81a74:	2823883a 	mov	r17,r5
   81a78:	2027883a 	mov	r19,r4
   81a7c:	1800311e 	bne	r3,zero,81b44 <__sflush_r+0xf0>
   81a80:	28c00117 	ldw	r3,4(r5)
   81a84:	10820014 	ori	r2,r2,2048
   81a88:	2880030d 	sth	r2,12(r5)
   81a8c:	00c04b0e 	bge	zero,r3,81bbc <__sflush_r+0x168>
   81a90:	8a000a17 	ldw	r8,40(r17)
   81a94:	40002326 	beq	r8,zero,81b24 <__sflush_r+0xd0>
   81a98:	9c000017 	ldw	r16,0(r19)
   81a9c:	10c4000c 	andi	r3,r2,4096
   81aa0:	98000015 	stw	zero,0(r19)
   81aa4:	18004826 	beq	r3,zero,81bc8 <__sflush_r+0x174>
   81aa8:	89801417 	ldw	r6,80(r17)
   81aac:	10c0010c 	andi	r3,r2,4
   81ab0:	18000626 	beq	r3,zero,81acc <__sflush_r+0x78>
   81ab4:	88c00117 	ldw	r3,4(r17)
   81ab8:	88800c17 	ldw	r2,48(r17)
   81abc:	30cdc83a 	sub	r6,r6,r3
   81ac0:	10000226 	beq	r2,zero,81acc <__sflush_r+0x78>
   81ac4:	88800f17 	ldw	r2,60(r17)
   81ac8:	308dc83a 	sub	r6,r6,r2
   81acc:	89400717 	ldw	r5,28(r17)
   81ad0:	000f883a 	mov	r7,zero
   81ad4:	9809883a 	mov	r4,r19
   81ad8:	403ee83a 	callr	r8
   81adc:	00ffffc4 	movi	r3,-1
   81ae0:	10c04426 	beq	r2,r3,81bf4 <__sflush_r+0x1a0>
   81ae4:	88c0030b 	ldhu	r3,12(r17)
   81ae8:	89000417 	ldw	r4,16(r17)
   81aec:	88000115 	stw	zero,4(r17)
   81af0:	197dffcc 	andi	r5,r3,63487
   81af4:	8940030d 	sth	r5,12(r17)
   81af8:	89000015 	stw	r4,0(r17)
   81afc:	18c4000c 	andi	r3,r3,4096
   81b00:	18002c1e 	bne	r3,zero,81bb4 <__sflush_r+0x160>
   81b04:	89400c17 	ldw	r5,48(r17)
   81b08:	9c000015 	stw	r16,0(r19)
   81b0c:	28000526 	beq	r5,zero,81b24 <__sflush_r+0xd0>
   81b10:	88801004 	addi	r2,r17,64
   81b14:	28800226 	beq	r5,r2,81b20 <__sflush_r+0xcc>
   81b18:	9809883a 	mov	r4,r19
   81b1c:	00821c00 	call	821c0 <_free_r>
   81b20:	88000c15 	stw	zero,48(r17)
   81b24:	0005883a 	mov	r2,zero
   81b28:	dfc00417 	ldw	ra,16(sp)
   81b2c:	dcc00317 	ldw	r19,12(sp)
   81b30:	dc800217 	ldw	r18,8(sp)
   81b34:	dc400117 	ldw	r17,4(sp)
   81b38:	dc000017 	ldw	r16,0(sp)
   81b3c:	dec00504 	addi	sp,sp,20
   81b40:	f800283a 	ret
   81b44:	2c800417 	ldw	r18,16(r5)
   81b48:	903ff626 	beq	r18,zero,81b24 <rx_descriptor_end+0xfff81ac4>
   81b4c:	2c000017 	ldw	r16,0(r5)
   81b50:	108000cc 	andi	r2,r2,3
   81b54:	2c800015 	stw	r18,0(r5)
   81b58:	84a1c83a 	sub	r16,r16,r18
   81b5c:	1000131e 	bne	r2,zero,81bac <__sflush_r+0x158>
   81b60:	28800517 	ldw	r2,20(r5)
   81b64:	88800215 	stw	r2,8(r17)
   81b68:	04000316 	blt	zero,r16,81b78 <__sflush_r+0x124>
   81b6c:	003fed06 	br	81b24 <rx_descriptor_end+0xfff81ac4>
   81b70:	90a5883a 	add	r18,r18,r2
   81b74:	043feb0e 	bge	zero,r16,81b24 <rx_descriptor_end+0xfff81ac4>
   81b78:	88800917 	ldw	r2,36(r17)
   81b7c:	89400717 	ldw	r5,28(r17)
   81b80:	800f883a 	mov	r7,r16
   81b84:	900d883a 	mov	r6,r18
   81b88:	9809883a 	mov	r4,r19
   81b8c:	103ee83a 	callr	r2
   81b90:	80a1c83a 	sub	r16,r16,r2
   81b94:	00bff616 	blt	zero,r2,81b70 <rx_descriptor_end+0xfff81b10>
   81b98:	88c0030b 	ldhu	r3,12(r17)
   81b9c:	00bfffc4 	movi	r2,-1
   81ba0:	18c01014 	ori	r3,r3,64
   81ba4:	88c0030d 	sth	r3,12(r17)
   81ba8:	003fdf06 	br	81b28 <rx_descriptor_end+0xfff81ac8>
   81bac:	0005883a 	mov	r2,zero
   81bb0:	003fec06 	br	81b64 <rx_descriptor_end+0xfff81b04>
   81bb4:	88801415 	stw	r2,80(r17)
   81bb8:	003fd206 	br	81b04 <rx_descriptor_end+0xfff81aa4>
   81bbc:	28c00f17 	ldw	r3,60(r5)
   81bc0:	00ffb316 	blt	zero,r3,81a90 <rx_descriptor_end+0xfff81a30>
   81bc4:	003fd706 	br	81b24 <rx_descriptor_end+0xfff81ac4>
   81bc8:	89400717 	ldw	r5,28(r17)
   81bcc:	000d883a 	mov	r6,zero
   81bd0:	01c00044 	movi	r7,1
   81bd4:	9809883a 	mov	r4,r19
   81bd8:	403ee83a 	callr	r8
   81bdc:	100d883a 	mov	r6,r2
   81be0:	00bfffc4 	movi	r2,-1
   81be4:	30801426 	beq	r6,r2,81c38 <__sflush_r+0x1e4>
   81be8:	8880030b 	ldhu	r2,12(r17)
   81bec:	8a000a17 	ldw	r8,40(r17)
   81bf0:	003fae06 	br	81aac <rx_descriptor_end+0xfff81a4c>
   81bf4:	98c00017 	ldw	r3,0(r19)
   81bf8:	183fba26 	beq	r3,zero,81ae4 <rx_descriptor_end+0xfff81a84>
   81bfc:	01000744 	movi	r4,29
   81c00:	19000626 	beq	r3,r4,81c1c <__sflush_r+0x1c8>
   81c04:	01000584 	movi	r4,22
   81c08:	19000426 	beq	r3,r4,81c1c <__sflush_r+0x1c8>
   81c0c:	88c0030b 	ldhu	r3,12(r17)
   81c10:	18c01014 	ori	r3,r3,64
   81c14:	88c0030d 	sth	r3,12(r17)
   81c18:	003fc306 	br	81b28 <rx_descriptor_end+0xfff81ac8>
   81c1c:	8880030b 	ldhu	r2,12(r17)
   81c20:	88c00417 	ldw	r3,16(r17)
   81c24:	88000115 	stw	zero,4(r17)
   81c28:	10bdffcc 	andi	r2,r2,63487
   81c2c:	8880030d 	sth	r2,12(r17)
   81c30:	88c00015 	stw	r3,0(r17)
   81c34:	003fb306 	br	81b04 <rx_descriptor_end+0xfff81aa4>
   81c38:	98800017 	ldw	r2,0(r19)
   81c3c:	103fea26 	beq	r2,zero,81be8 <rx_descriptor_end+0xfff81b88>
   81c40:	00c00744 	movi	r3,29
   81c44:	10c00226 	beq	r2,r3,81c50 <__sflush_r+0x1fc>
   81c48:	00c00584 	movi	r3,22
   81c4c:	10c0031e 	bne	r2,r3,81c5c <__sflush_r+0x208>
   81c50:	9c000015 	stw	r16,0(r19)
   81c54:	0005883a 	mov	r2,zero
   81c58:	003fb306 	br	81b28 <rx_descriptor_end+0xfff81ac8>
   81c5c:	88c0030b 	ldhu	r3,12(r17)
   81c60:	3005883a 	mov	r2,r6
   81c64:	18c01014 	ori	r3,r3,64
   81c68:	88c0030d 	sth	r3,12(r17)
   81c6c:	003fae06 	br	81b28 <rx_descriptor_end+0xfff81ac8>

00081c70 <_fflush_r>:
   81c70:	defffd04 	addi	sp,sp,-12
   81c74:	dc000115 	stw	r16,4(sp)
   81c78:	dfc00215 	stw	ra,8(sp)
   81c7c:	2021883a 	mov	r16,r4
   81c80:	20000226 	beq	r4,zero,81c8c <_fflush_r+0x1c>
   81c84:	20800e17 	ldw	r2,56(r4)
   81c88:	10000c26 	beq	r2,zero,81cbc <_fflush_r+0x4c>
   81c8c:	2880030f 	ldh	r2,12(r5)
   81c90:	1000051e 	bne	r2,zero,81ca8 <_fflush_r+0x38>
   81c94:	0005883a 	mov	r2,zero
   81c98:	dfc00217 	ldw	ra,8(sp)
   81c9c:	dc000117 	ldw	r16,4(sp)
   81ca0:	dec00304 	addi	sp,sp,12
   81ca4:	f800283a 	ret
   81ca8:	8009883a 	mov	r4,r16
   81cac:	dfc00217 	ldw	ra,8(sp)
   81cb0:	dc000117 	ldw	r16,4(sp)
   81cb4:	dec00304 	addi	sp,sp,12
   81cb8:	0081a541 	jmpi	81a54 <__sflush_r>
   81cbc:	d9400015 	stw	r5,0(sp)
   81cc0:	008204c0 	call	8204c <__sinit>
   81cc4:	d9400017 	ldw	r5,0(sp)
   81cc8:	003ff006 	br	81c8c <rx_descriptor_end+0xfff81c2c>

00081ccc <fflush>:
   81ccc:	20000526 	beq	r4,zero,81ce4 <fflush+0x18>
   81cd0:	00800274 	movhi	r2,9
   81cd4:	10913d04 	addi	r2,r2,17652
   81cd8:	200b883a 	mov	r5,r4
   81cdc:	11000017 	ldw	r4,0(r2)
   81ce0:	0081c701 	jmpi	81c70 <_fflush_r>
   81ce4:	00800274 	movhi	r2,9
   81ce8:	10913c04 	addi	r2,r2,17648
   81cec:	11000017 	ldw	r4,0(r2)
   81cf0:	01400234 	movhi	r5,8
   81cf4:	29471c04 	addi	r5,r5,7280
   81cf8:	00825941 	jmpi	82594 <_fwalk_reent>

00081cfc <__fp_unlock>:
   81cfc:	0005883a 	mov	r2,zero
   81d00:	f800283a 	ret

00081d04 <_cleanup_r>:
   81d04:	01400234 	movhi	r5,8
   81d08:	295c7e04 	addi	r5,r5,29176
   81d0c:	00825941 	jmpi	82594 <_fwalk_reent>

00081d10 <__sinit.part.1>:
   81d10:	defff704 	addi	sp,sp,-36
   81d14:	00c00234 	movhi	r3,8
   81d18:	dfc00815 	stw	ra,32(sp)
   81d1c:	ddc00715 	stw	r23,28(sp)
   81d20:	dd800615 	stw	r22,24(sp)
   81d24:	dd400515 	stw	r21,20(sp)
   81d28:	dd000415 	stw	r20,16(sp)
   81d2c:	dcc00315 	stw	r19,12(sp)
   81d30:	dc800215 	stw	r18,8(sp)
   81d34:	dc400115 	stw	r17,4(sp)
   81d38:	dc000015 	stw	r16,0(sp)
   81d3c:	18c74104 	addi	r3,r3,7428
   81d40:	24000117 	ldw	r16,4(r4)
   81d44:	20c00f15 	stw	r3,60(r4)
   81d48:	2080bb04 	addi	r2,r4,748
   81d4c:	00c000c4 	movi	r3,3
   81d50:	20c0b915 	stw	r3,740(r4)
   81d54:	2080ba15 	stw	r2,744(r4)
   81d58:	2000b815 	stw	zero,736(r4)
   81d5c:	05c00204 	movi	r23,8
   81d60:	00800104 	movi	r2,4
   81d64:	2025883a 	mov	r18,r4
   81d68:	b80d883a 	mov	r6,r23
   81d6c:	81001704 	addi	r4,r16,92
   81d70:	000b883a 	mov	r5,zero
   81d74:	80000015 	stw	zero,0(r16)
   81d78:	80000115 	stw	zero,4(r16)
   81d7c:	80000215 	stw	zero,8(r16)
   81d80:	8080030d 	sth	r2,12(r16)
   81d84:	80001915 	stw	zero,100(r16)
   81d88:	8000038d 	sth	zero,14(r16)
   81d8c:	80000415 	stw	zero,16(r16)
   81d90:	80000515 	stw	zero,20(r16)
   81d94:	80000615 	stw	zero,24(r16)
   81d98:	0082fe80 	call	82fe8 <memset>
   81d9c:	05800234 	movhi	r22,8
   81da0:	94400217 	ldw	r17,8(r18)
   81da4:	05400234 	movhi	r21,8
   81da8:	05000234 	movhi	r20,8
   81dac:	04c00234 	movhi	r19,8
   81db0:	b58cb104 	addi	r22,r22,12996
   81db4:	ad4cc804 	addi	r21,r21,13088
   81db8:	a50ce704 	addi	r20,r20,13212
   81dbc:	9cccfe04 	addi	r19,r19,13304
   81dc0:	85800815 	stw	r22,32(r16)
   81dc4:	85400915 	stw	r21,36(r16)
   81dc8:	85000a15 	stw	r20,40(r16)
   81dcc:	84c00b15 	stw	r19,44(r16)
   81dd0:	84000715 	stw	r16,28(r16)
   81dd4:	00800284 	movi	r2,10
   81dd8:	8880030d 	sth	r2,12(r17)
   81ddc:	00800044 	movi	r2,1
   81de0:	b80d883a 	mov	r6,r23
   81de4:	89001704 	addi	r4,r17,92
   81de8:	000b883a 	mov	r5,zero
   81dec:	88000015 	stw	zero,0(r17)
   81df0:	88000115 	stw	zero,4(r17)
   81df4:	88000215 	stw	zero,8(r17)
   81df8:	88001915 	stw	zero,100(r17)
   81dfc:	8880038d 	sth	r2,14(r17)
   81e00:	88000415 	stw	zero,16(r17)
   81e04:	88000515 	stw	zero,20(r17)
   81e08:	88000615 	stw	zero,24(r17)
   81e0c:	0082fe80 	call	82fe8 <memset>
   81e10:	94000317 	ldw	r16,12(r18)
   81e14:	00800484 	movi	r2,18
   81e18:	8c400715 	stw	r17,28(r17)
   81e1c:	8d800815 	stw	r22,32(r17)
   81e20:	8d400915 	stw	r21,36(r17)
   81e24:	8d000a15 	stw	r20,40(r17)
   81e28:	8cc00b15 	stw	r19,44(r17)
   81e2c:	8080030d 	sth	r2,12(r16)
   81e30:	00800084 	movi	r2,2
   81e34:	80000015 	stw	zero,0(r16)
   81e38:	80000115 	stw	zero,4(r16)
   81e3c:	80000215 	stw	zero,8(r16)
   81e40:	80001915 	stw	zero,100(r16)
   81e44:	8080038d 	sth	r2,14(r16)
   81e48:	80000415 	stw	zero,16(r16)
   81e4c:	80000515 	stw	zero,20(r16)
   81e50:	80000615 	stw	zero,24(r16)
   81e54:	b80d883a 	mov	r6,r23
   81e58:	000b883a 	mov	r5,zero
   81e5c:	81001704 	addi	r4,r16,92
   81e60:	0082fe80 	call	82fe8 <memset>
   81e64:	00800044 	movi	r2,1
   81e68:	84000715 	stw	r16,28(r16)
   81e6c:	85800815 	stw	r22,32(r16)
   81e70:	85400915 	stw	r21,36(r16)
   81e74:	85000a15 	stw	r20,40(r16)
   81e78:	84c00b15 	stw	r19,44(r16)
   81e7c:	90800e15 	stw	r2,56(r18)
   81e80:	dfc00817 	ldw	ra,32(sp)
   81e84:	ddc00717 	ldw	r23,28(sp)
   81e88:	dd800617 	ldw	r22,24(sp)
   81e8c:	dd400517 	ldw	r21,20(sp)
   81e90:	dd000417 	ldw	r20,16(sp)
   81e94:	dcc00317 	ldw	r19,12(sp)
   81e98:	dc800217 	ldw	r18,8(sp)
   81e9c:	dc400117 	ldw	r17,4(sp)
   81ea0:	dc000017 	ldw	r16,0(sp)
   81ea4:	dec00904 	addi	sp,sp,36
   81ea8:	f800283a 	ret

00081eac <__fp_lock>:
   81eac:	0005883a 	mov	r2,zero
   81eb0:	f800283a 	ret

00081eb4 <__sfmoreglue>:
   81eb4:	defffc04 	addi	sp,sp,-16
   81eb8:	dc400115 	stw	r17,4(sp)
   81ebc:	2c7fffc4 	addi	r17,r5,-1
   81ec0:	8c401a24 	muli	r17,r17,104
   81ec4:	dc800215 	stw	r18,8(sp)
   81ec8:	2825883a 	mov	r18,r5
   81ecc:	89401d04 	addi	r5,r17,116
   81ed0:	dc000015 	stw	r16,0(sp)
   81ed4:	dfc00315 	stw	ra,12(sp)
   81ed8:	00826800 	call	82680 <_malloc_r>
   81edc:	1021883a 	mov	r16,r2
   81ee0:	10000726 	beq	r2,zero,81f00 <__sfmoreglue+0x4c>
   81ee4:	11000304 	addi	r4,r2,12
   81ee8:	10000015 	stw	zero,0(r2)
   81eec:	14800115 	stw	r18,4(r2)
   81ef0:	11000215 	stw	r4,8(r2)
   81ef4:	89801a04 	addi	r6,r17,104
   81ef8:	000b883a 	mov	r5,zero
   81efc:	0082fe80 	call	82fe8 <memset>
   81f00:	8005883a 	mov	r2,r16
   81f04:	dfc00317 	ldw	ra,12(sp)
   81f08:	dc800217 	ldw	r18,8(sp)
   81f0c:	dc400117 	ldw	r17,4(sp)
   81f10:	dc000017 	ldw	r16,0(sp)
   81f14:	dec00404 	addi	sp,sp,16
   81f18:	f800283a 	ret

00081f1c <__sfp>:
   81f1c:	defffb04 	addi	sp,sp,-20
   81f20:	dc000015 	stw	r16,0(sp)
   81f24:	04000274 	movhi	r16,9
   81f28:	84113c04 	addi	r16,r16,17648
   81f2c:	dcc00315 	stw	r19,12(sp)
   81f30:	2027883a 	mov	r19,r4
   81f34:	81000017 	ldw	r4,0(r16)
   81f38:	dfc00415 	stw	ra,16(sp)
   81f3c:	dc800215 	stw	r18,8(sp)
   81f40:	20800e17 	ldw	r2,56(r4)
   81f44:	dc400115 	stw	r17,4(sp)
   81f48:	1000021e 	bne	r2,zero,81f54 <__sfp+0x38>
   81f4c:	0081d100 	call	81d10 <__sinit.part.1>
   81f50:	81000017 	ldw	r4,0(r16)
   81f54:	2480b804 	addi	r18,r4,736
   81f58:	047fffc4 	movi	r17,-1
   81f5c:	91000117 	ldw	r4,4(r18)
   81f60:	94000217 	ldw	r16,8(r18)
   81f64:	213fffc4 	addi	r4,r4,-1
   81f68:	20000a16 	blt	r4,zero,81f94 <__sfp+0x78>
   81f6c:	8080030f 	ldh	r2,12(r16)
   81f70:	10000c26 	beq	r2,zero,81fa4 <__sfp+0x88>
   81f74:	80c01d04 	addi	r3,r16,116
   81f78:	00000206 	br	81f84 <__sfp+0x68>
   81f7c:	18bfe60f 	ldh	r2,-104(r3)
   81f80:	10000826 	beq	r2,zero,81fa4 <__sfp+0x88>
   81f84:	213fffc4 	addi	r4,r4,-1
   81f88:	1c3ffd04 	addi	r16,r3,-12
   81f8c:	18c01a04 	addi	r3,r3,104
   81f90:	247ffa1e 	bne	r4,r17,81f7c <rx_descriptor_end+0xfff81f1c>
   81f94:	90800017 	ldw	r2,0(r18)
   81f98:	10001d26 	beq	r2,zero,82010 <__sfp+0xf4>
   81f9c:	1025883a 	mov	r18,r2
   81fa0:	003fee06 	br	81f5c <rx_descriptor_end+0xfff81efc>
   81fa4:	00bfffc4 	movi	r2,-1
   81fa8:	8080038d 	sth	r2,14(r16)
   81fac:	00800044 	movi	r2,1
   81fb0:	8080030d 	sth	r2,12(r16)
   81fb4:	80001915 	stw	zero,100(r16)
   81fb8:	80000015 	stw	zero,0(r16)
   81fbc:	80000215 	stw	zero,8(r16)
   81fc0:	80000115 	stw	zero,4(r16)
   81fc4:	80000415 	stw	zero,16(r16)
   81fc8:	80000515 	stw	zero,20(r16)
   81fcc:	80000615 	stw	zero,24(r16)
   81fd0:	01800204 	movi	r6,8
   81fd4:	000b883a 	mov	r5,zero
   81fd8:	81001704 	addi	r4,r16,92
   81fdc:	0082fe80 	call	82fe8 <memset>
   81fe0:	8005883a 	mov	r2,r16
   81fe4:	80000c15 	stw	zero,48(r16)
   81fe8:	80000d15 	stw	zero,52(r16)
   81fec:	80001115 	stw	zero,68(r16)
   81ff0:	80001215 	stw	zero,72(r16)
   81ff4:	dfc00417 	ldw	ra,16(sp)
   81ff8:	dcc00317 	ldw	r19,12(sp)
   81ffc:	dc800217 	ldw	r18,8(sp)
   82000:	dc400117 	ldw	r17,4(sp)
   82004:	dc000017 	ldw	r16,0(sp)
   82008:	dec00504 	addi	sp,sp,20
   8200c:	f800283a 	ret
   82010:	01400104 	movi	r5,4
   82014:	9809883a 	mov	r4,r19
   82018:	0081eb40 	call	81eb4 <__sfmoreglue>
   8201c:	90800015 	stw	r2,0(r18)
   82020:	103fde1e 	bne	r2,zero,81f9c <rx_descriptor_end+0xfff81f3c>
   82024:	00800304 	movi	r2,12
   82028:	98800015 	stw	r2,0(r19)
   8202c:	0005883a 	mov	r2,zero
   82030:	003ff006 	br	81ff4 <rx_descriptor_end+0xfff81f94>

00082034 <_cleanup>:
   82034:	00800274 	movhi	r2,9
   82038:	10913c04 	addi	r2,r2,17648
   8203c:	11000017 	ldw	r4,0(r2)
   82040:	01400234 	movhi	r5,8
   82044:	295c7e04 	addi	r5,r5,29176
   82048:	00825941 	jmpi	82594 <_fwalk_reent>

0008204c <__sinit>:
   8204c:	20800e17 	ldw	r2,56(r4)
   82050:	10000126 	beq	r2,zero,82058 <__sinit+0xc>
   82054:	f800283a 	ret
   82058:	0081d101 	jmpi	81d10 <__sinit.part.1>

0008205c <__sfp_lock_acquire>:
   8205c:	f800283a 	ret

00082060 <__sfp_lock_release>:
   82060:	f800283a 	ret

00082064 <__sinit_lock_acquire>:
   82064:	f800283a 	ret

00082068 <__sinit_lock_release>:
   82068:	f800283a 	ret

0008206c <__fp_lock_all>:
   8206c:	00800274 	movhi	r2,9
   82070:	10913d04 	addi	r2,r2,17652
   82074:	11000017 	ldw	r4,0(r2)
   82078:	01400234 	movhi	r5,8
   8207c:	2947ab04 	addi	r5,r5,7852
   82080:	00824d01 	jmpi	824d0 <_fwalk>

00082084 <__fp_unlock_all>:
   82084:	00800274 	movhi	r2,9
   82088:	10913d04 	addi	r2,r2,17652
   8208c:	11000017 	ldw	r4,0(r2)
   82090:	01400234 	movhi	r5,8
   82094:	29473f04 	addi	r5,r5,7420
   82098:	00824d01 	jmpi	824d0 <_fwalk>

0008209c <_malloc_trim_r>:
   8209c:	defffb04 	addi	sp,sp,-20
   820a0:	dcc00315 	stw	r19,12(sp)
   820a4:	04c00274 	movhi	r19,9
   820a8:	dc800215 	stw	r18,8(sp)
   820ac:	dc400115 	stw	r17,4(sp)
   820b0:	dc000015 	stw	r16,0(sp)
   820b4:	dfc00415 	stw	ra,16(sp)
   820b8:	2821883a 	mov	r16,r5
   820bc:	9ccb8104 	addi	r19,r19,11780
   820c0:	2025883a 	mov	r18,r4
   820c4:	008eae80 	call	8eae8 <__malloc_lock>
   820c8:	98800217 	ldw	r2,8(r19)
   820cc:	14400117 	ldw	r17,4(r2)
   820d0:	00bfff04 	movi	r2,-4
   820d4:	88a2703a 	and	r17,r17,r2
   820d8:	8c21c83a 	sub	r16,r17,r16
   820dc:	8403fbc4 	addi	r16,r16,4079
   820e0:	8020d33a 	srli	r16,r16,12
   820e4:	0083ffc4 	movi	r2,4095
   820e8:	843fffc4 	addi	r16,r16,-1
   820ec:	8020933a 	slli	r16,r16,12
   820f0:	1400060e 	bge	r2,r16,8210c <_malloc_trim_r+0x70>
   820f4:	000b883a 	mov	r5,zero
   820f8:	9009883a 	mov	r4,r18
   820fc:	00832700 	call	83270 <_sbrk_r>
   82100:	98c00217 	ldw	r3,8(r19)
   82104:	1c47883a 	add	r3,r3,r17
   82108:	10c00a26 	beq	r2,r3,82134 <_malloc_trim_r+0x98>
   8210c:	9009883a 	mov	r4,r18
   82110:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82114:	0005883a 	mov	r2,zero
   82118:	dfc00417 	ldw	ra,16(sp)
   8211c:	dcc00317 	ldw	r19,12(sp)
   82120:	dc800217 	ldw	r18,8(sp)
   82124:	dc400117 	ldw	r17,4(sp)
   82128:	dc000017 	ldw	r16,0(sp)
   8212c:	dec00504 	addi	sp,sp,20
   82130:	f800283a 	ret
   82134:	040bc83a 	sub	r5,zero,r16
   82138:	9009883a 	mov	r4,r18
   8213c:	00832700 	call	83270 <_sbrk_r>
   82140:	00ffffc4 	movi	r3,-1
   82144:	10c00d26 	beq	r2,r3,8217c <_malloc_trim_r+0xe0>
   82148:	00c00274 	movhi	r3,9
   8214c:	18da4004 	addi	r3,r3,26880
   82150:	18800017 	ldw	r2,0(r3)
   82154:	99000217 	ldw	r4,8(r19)
   82158:	8c23c83a 	sub	r17,r17,r16
   8215c:	8c400054 	ori	r17,r17,1
   82160:	1421c83a 	sub	r16,r2,r16
   82164:	24400115 	stw	r17,4(r4)
   82168:	9009883a 	mov	r4,r18
   8216c:	1c000015 	stw	r16,0(r3)
   82170:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82174:	00800044 	movi	r2,1
   82178:	003fe706 	br	82118 <rx_descriptor_end+0xfff820b8>
   8217c:	000b883a 	mov	r5,zero
   82180:	9009883a 	mov	r4,r18
   82184:	00832700 	call	83270 <_sbrk_r>
   82188:	99000217 	ldw	r4,8(r19)
   8218c:	014003c4 	movi	r5,15
   82190:	1107c83a 	sub	r3,r2,r4
   82194:	28ffdd0e 	bge	r5,r3,8210c <rx_descriptor_end+0xfff820ac>
   82198:	01400274 	movhi	r5,9
   8219c:	29513e04 	addi	r5,r5,17656
   821a0:	29400017 	ldw	r5,0(r5)
   821a4:	18c00054 	ori	r3,r3,1
   821a8:	20c00115 	stw	r3,4(r4)
   821ac:	00c00274 	movhi	r3,9
   821b0:	1145c83a 	sub	r2,r2,r5
   821b4:	18da4004 	addi	r3,r3,26880
   821b8:	18800015 	stw	r2,0(r3)
   821bc:	003fd306 	br	8210c <rx_descriptor_end+0xfff820ac>

000821c0 <_free_r>:
   821c0:	28004126 	beq	r5,zero,822c8 <_free_r+0x108>
   821c4:	defffd04 	addi	sp,sp,-12
   821c8:	dc400115 	stw	r17,4(sp)
   821cc:	dc000015 	stw	r16,0(sp)
   821d0:	2023883a 	mov	r17,r4
   821d4:	2821883a 	mov	r16,r5
   821d8:	dfc00215 	stw	ra,8(sp)
   821dc:	008eae80 	call	8eae8 <__malloc_lock>
   821e0:	81ffff17 	ldw	r7,-4(r16)
   821e4:	00bfff84 	movi	r2,-2
   821e8:	01000274 	movhi	r4,9
   821ec:	81bffe04 	addi	r6,r16,-8
   821f0:	3884703a 	and	r2,r7,r2
   821f4:	210b8104 	addi	r4,r4,11780
   821f8:	308b883a 	add	r5,r6,r2
   821fc:	2a400117 	ldw	r9,4(r5)
   82200:	22000217 	ldw	r8,8(r4)
   82204:	00ffff04 	movi	r3,-4
   82208:	48c6703a 	and	r3,r9,r3
   8220c:	2a005726 	beq	r5,r8,8236c <_free_r+0x1ac>
   82210:	28c00115 	stw	r3,4(r5)
   82214:	39c0004c 	andi	r7,r7,1
   82218:	3800091e 	bne	r7,zero,82240 <_free_r+0x80>
   8221c:	823ffe17 	ldw	r8,-8(r16)
   82220:	22400204 	addi	r9,r4,8
   82224:	320dc83a 	sub	r6,r6,r8
   82228:	31c00217 	ldw	r7,8(r6)
   8222c:	1205883a 	add	r2,r2,r8
   82230:	3a406526 	beq	r7,r9,823c8 <_free_r+0x208>
   82234:	32000317 	ldw	r8,12(r6)
   82238:	3a000315 	stw	r8,12(r7)
   8223c:	41c00215 	stw	r7,8(r8)
   82240:	28cf883a 	add	r7,r5,r3
   82244:	39c00117 	ldw	r7,4(r7)
   82248:	39c0004c 	andi	r7,r7,1
   8224c:	38003a26 	beq	r7,zero,82338 <_free_r+0x178>
   82250:	10c00054 	ori	r3,r2,1
   82254:	30c00115 	stw	r3,4(r6)
   82258:	3087883a 	add	r3,r6,r2
   8225c:	18800015 	stw	r2,0(r3)
   82260:	00c07fc4 	movi	r3,511
   82264:	18801936 	bltu	r3,r2,822cc <_free_r+0x10c>
   82268:	1004d0fa 	srli	r2,r2,3
   8226c:	01c00044 	movi	r7,1
   82270:	21400117 	ldw	r5,4(r4)
   82274:	10c00044 	addi	r3,r2,1
   82278:	18c7883a 	add	r3,r3,r3
   8227c:	1005d0ba 	srai	r2,r2,2
   82280:	18c7883a 	add	r3,r3,r3
   82284:	18c7883a 	add	r3,r3,r3
   82288:	1907883a 	add	r3,r3,r4
   8228c:	3884983a 	sll	r2,r7,r2
   82290:	19c00017 	ldw	r7,0(r3)
   82294:	1a3ffe04 	addi	r8,r3,-8
   82298:	1144b03a 	or	r2,r2,r5
   8229c:	32000315 	stw	r8,12(r6)
   822a0:	31c00215 	stw	r7,8(r6)
   822a4:	20800115 	stw	r2,4(r4)
   822a8:	19800015 	stw	r6,0(r3)
   822ac:	39800315 	stw	r6,12(r7)
   822b0:	8809883a 	mov	r4,r17
   822b4:	dfc00217 	ldw	ra,8(sp)
   822b8:	dc400117 	ldw	r17,4(sp)
   822bc:	dc000017 	ldw	r16,0(sp)
   822c0:	dec00304 	addi	sp,sp,12
   822c4:	008eb0c1 	jmpi	8eb0c <__malloc_unlock>
   822c8:	f800283a 	ret
   822cc:	100ad27a 	srli	r5,r2,9
   822d0:	00c00104 	movi	r3,4
   822d4:	19404a36 	bltu	r3,r5,82400 <_free_r+0x240>
   822d8:	100ad1ba 	srli	r5,r2,6
   822dc:	28c00e44 	addi	r3,r5,57
   822e0:	18c7883a 	add	r3,r3,r3
   822e4:	29400e04 	addi	r5,r5,56
   822e8:	18c7883a 	add	r3,r3,r3
   822ec:	18c7883a 	add	r3,r3,r3
   822f0:	1909883a 	add	r4,r3,r4
   822f4:	20c00017 	ldw	r3,0(r4)
   822f8:	01c00274 	movhi	r7,9
   822fc:	213ffe04 	addi	r4,r4,-8
   82300:	39cb8104 	addi	r7,r7,11780
   82304:	20c04426 	beq	r4,r3,82418 <_free_r+0x258>
   82308:	01ffff04 	movi	r7,-4
   8230c:	19400117 	ldw	r5,4(r3)
   82310:	29ca703a 	and	r5,r5,r7
   82314:	1140022e 	bgeu	r2,r5,82320 <_free_r+0x160>
   82318:	18c00217 	ldw	r3,8(r3)
   8231c:	20fffb1e 	bne	r4,r3,8230c <rx_descriptor_end+0xfff822ac>
   82320:	19000317 	ldw	r4,12(r3)
   82324:	31000315 	stw	r4,12(r6)
   82328:	30c00215 	stw	r3,8(r6)
   8232c:	21800215 	stw	r6,8(r4)
   82330:	19800315 	stw	r6,12(r3)
   82334:	003fde06 	br	822b0 <rx_descriptor_end+0xfff82250>
   82338:	29c00217 	ldw	r7,8(r5)
   8233c:	10c5883a 	add	r2,r2,r3
   82340:	00c00274 	movhi	r3,9
   82344:	18cb8304 	addi	r3,r3,11788
   82348:	38c03b26 	beq	r7,r3,82438 <_free_r+0x278>
   8234c:	2a000317 	ldw	r8,12(r5)
   82350:	11400054 	ori	r5,r2,1
   82354:	3087883a 	add	r3,r6,r2
   82358:	3a000315 	stw	r8,12(r7)
   8235c:	41c00215 	stw	r7,8(r8)
   82360:	31400115 	stw	r5,4(r6)
   82364:	18800015 	stw	r2,0(r3)
   82368:	003fbd06 	br	82260 <rx_descriptor_end+0xfff82200>
   8236c:	39c0004c 	andi	r7,r7,1
   82370:	10c5883a 	add	r2,r2,r3
   82374:	3800071e 	bne	r7,zero,82394 <_free_r+0x1d4>
   82378:	81fffe17 	ldw	r7,-8(r16)
   8237c:	31cdc83a 	sub	r6,r6,r7
   82380:	30c00317 	ldw	r3,12(r6)
   82384:	31400217 	ldw	r5,8(r6)
   82388:	11c5883a 	add	r2,r2,r7
   8238c:	28c00315 	stw	r3,12(r5)
   82390:	19400215 	stw	r5,8(r3)
   82394:	10c00054 	ori	r3,r2,1
   82398:	30c00115 	stw	r3,4(r6)
   8239c:	00c00274 	movhi	r3,9
   823a0:	18d13f04 	addi	r3,r3,17660
   823a4:	18c00017 	ldw	r3,0(r3)
   823a8:	21800215 	stw	r6,8(r4)
   823ac:	10ffc036 	bltu	r2,r3,822b0 <rx_descriptor_end+0xfff82250>
   823b0:	00800274 	movhi	r2,9
   823b4:	10993404 	addi	r2,r2,25808
   823b8:	11400017 	ldw	r5,0(r2)
   823bc:	8809883a 	mov	r4,r17
   823c0:	008209c0 	call	8209c <_malloc_trim_r>
   823c4:	003fba06 	br	822b0 <rx_descriptor_end+0xfff82250>
   823c8:	28c9883a 	add	r4,r5,r3
   823cc:	21000117 	ldw	r4,4(r4)
   823d0:	2100004c 	andi	r4,r4,1
   823d4:	2000391e 	bne	r4,zero,824bc <_free_r+0x2fc>
   823d8:	29c00217 	ldw	r7,8(r5)
   823dc:	29000317 	ldw	r4,12(r5)
   823e0:	1885883a 	add	r2,r3,r2
   823e4:	10c00054 	ori	r3,r2,1
   823e8:	39000315 	stw	r4,12(r7)
   823ec:	21c00215 	stw	r7,8(r4)
   823f0:	30c00115 	stw	r3,4(r6)
   823f4:	308d883a 	add	r6,r6,r2
   823f8:	30800015 	stw	r2,0(r6)
   823fc:	003fac06 	br	822b0 <rx_descriptor_end+0xfff82250>
   82400:	00c00504 	movi	r3,20
   82404:	19401536 	bltu	r3,r5,8245c <_free_r+0x29c>
   82408:	28c01704 	addi	r3,r5,92
   8240c:	18c7883a 	add	r3,r3,r3
   82410:	294016c4 	addi	r5,r5,91
   82414:	003fb406 	br	822e8 <rx_descriptor_end+0xfff82288>
   82418:	280bd0ba 	srai	r5,r5,2
   8241c:	00c00044 	movi	r3,1
   82420:	38800117 	ldw	r2,4(r7)
   82424:	194a983a 	sll	r5,r3,r5
   82428:	2007883a 	mov	r3,r4
   8242c:	2884b03a 	or	r2,r5,r2
   82430:	38800115 	stw	r2,4(r7)
   82434:	003fbb06 	br	82324 <rx_descriptor_end+0xfff822c4>
   82438:	21800515 	stw	r6,20(r4)
   8243c:	21800415 	stw	r6,16(r4)
   82440:	10c00054 	ori	r3,r2,1
   82444:	31c00315 	stw	r7,12(r6)
   82448:	31c00215 	stw	r7,8(r6)
   8244c:	30c00115 	stw	r3,4(r6)
   82450:	308d883a 	add	r6,r6,r2
   82454:	30800015 	stw	r2,0(r6)
   82458:	003f9506 	br	822b0 <rx_descriptor_end+0xfff82250>
   8245c:	00c01504 	movi	r3,84
   82460:	19400536 	bltu	r3,r5,82478 <_free_r+0x2b8>
   82464:	100ad33a 	srli	r5,r2,12
   82468:	28c01bc4 	addi	r3,r5,111
   8246c:	18c7883a 	add	r3,r3,r3
   82470:	29401b84 	addi	r5,r5,110
   82474:	003f9c06 	br	822e8 <rx_descriptor_end+0xfff82288>
   82478:	00c05504 	movi	r3,340
   8247c:	19400536 	bltu	r3,r5,82494 <_free_r+0x2d4>
   82480:	100ad3fa 	srli	r5,r2,15
   82484:	28c01e04 	addi	r3,r5,120
   82488:	18c7883a 	add	r3,r3,r3
   8248c:	29401dc4 	addi	r5,r5,119
   82490:	003f9506 	br	822e8 <rx_descriptor_end+0xfff82288>
   82494:	00c15504 	movi	r3,1364
   82498:	19400536 	bltu	r3,r5,824b0 <_free_r+0x2f0>
   8249c:	100ad4ba 	srli	r5,r2,18
   824a0:	28c01f44 	addi	r3,r5,125
   824a4:	18c7883a 	add	r3,r3,r3
   824a8:	29401f04 	addi	r5,r5,124
   824ac:	003f8e06 	br	822e8 <rx_descriptor_end+0xfff82288>
   824b0:	00c03f84 	movi	r3,254
   824b4:	01401f84 	movi	r5,126
   824b8:	003f8b06 	br	822e8 <rx_descriptor_end+0xfff82288>
   824bc:	10c00054 	ori	r3,r2,1
   824c0:	30c00115 	stw	r3,4(r6)
   824c4:	308d883a 	add	r6,r6,r2
   824c8:	30800015 	stw	r2,0(r6)
   824cc:	003f7806 	br	822b0 <rx_descriptor_end+0xfff82250>

000824d0 <_fwalk>:
   824d0:	defff704 	addi	sp,sp,-36
   824d4:	dd000415 	stw	r20,16(sp)
   824d8:	dfc00815 	stw	ra,32(sp)
   824dc:	ddc00715 	stw	r23,28(sp)
   824e0:	dd800615 	stw	r22,24(sp)
   824e4:	dd400515 	stw	r21,20(sp)
   824e8:	dcc00315 	stw	r19,12(sp)
   824ec:	dc800215 	stw	r18,8(sp)
   824f0:	dc400115 	stw	r17,4(sp)
   824f4:	dc000015 	stw	r16,0(sp)
   824f8:	2500b804 	addi	r20,r4,736
   824fc:	a0002326 	beq	r20,zero,8258c <_fwalk+0xbc>
   82500:	282b883a 	mov	r21,r5
   82504:	002f883a 	mov	r23,zero
   82508:	05800044 	movi	r22,1
   8250c:	04ffffc4 	movi	r19,-1
   82510:	a4400117 	ldw	r17,4(r20)
   82514:	a4800217 	ldw	r18,8(r20)
   82518:	8c7fffc4 	addi	r17,r17,-1
   8251c:	88000d16 	blt	r17,zero,82554 <_fwalk+0x84>
   82520:	94000304 	addi	r16,r18,12
   82524:	94800384 	addi	r18,r18,14
   82528:	8080000b 	ldhu	r2,0(r16)
   8252c:	8c7fffc4 	addi	r17,r17,-1
   82530:	813ffd04 	addi	r4,r16,-12
   82534:	b080042e 	bgeu	r22,r2,82548 <_fwalk+0x78>
   82538:	9080000f 	ldh	r2,0(r18)
   8253c:	14c00226 	beq	r2,r19,82548 <_fwalk+0x78>
   82540:	a83ee83a 	callr	r21
   82544:	b8aeb03a 	or	r23,r23,r2
   82548:	84001a04 	addi	r16,r16,104
   8254c:	94801a04 	addi	r18,r18,104
   82550:	8cfff51e 	bne	r17,r19,82528 <rx_descriptor_end+0xfff824c8>
   82554:	a5000017 	ldw	r20,0(r20)
   82558:	a03fed1e 	bne	r20,zero,82510 <rx_descriptor_end+0xfff824b0>
   8255c:	b805883a 	mov	r2,r23
   82560:	dfc00817 	ldw	ra,32(sp)
   82564:	ddc00717 	ldw	r23,28(sp)
   82568:	dd800617 	ldw	r22,24(sp)
   8256c:	dd400517 	ldw	r21,20(sp)
   82570:	dd000417 	ldw	r20,16(sp)
   82574:	dcc00317 	ldw	r19,12(sp)
   82578:	dc800217 	ldw	r18,8(sp)
   8257c:	dc400117 	ldw	r17,4(sp)
   82580:	dc000017 	ldw	r16,0(sp)
   82584:	dec00904 	addi	sp,sp,36
   82588:	f800283a 	ret
   8258c:	002f883a 	mov	r23,zero
   82590:	003ff206 	br	8255c <rx_descriptor_end+0xfff824fc>

00082594 <_fwalk_reent>:
   82594:	defff704 	addi	sp,sp,-36
   82598:	dd000415 	stw	r20,16(sp)
   8259c:	dfc00815 	stw	ra,32(sp)
   825a0:	ddc00715 	stw	r23,28(sp)
   825a4:	dd800615 	stw	r22,24(sp)
   825a8:	dd400515 	stw	r21,20(sp)
   825ac:	dcc00315 	stw	r19,12(sp)
   825b0:	dc800215 	stw	r18,8(sp)
   825b4:	dc400115 	stw	r17,4(sp)
   825b8:	dc000015 	stw	r16,0(sp)
   825bc:	2500b804 	addi	r20,r4,736
   825c0:	a0002326 	beq	r20,zero,82650 <_fwalk_reent+0xbc>
   825c4:	282b883a 	mov	r21,r5
   825c8:	2027883a 	mov	r19,r4
   825cc:	002f883a 	mov	r23,zero
   825d0:	05800044 	movi	r22,1
   825d4:	04bfffc4 	movi	r18,-1
   825d8:	a4400117 	ldw	r17,4(r20)
   825dc:	a4000217 	ldw	r16,8(r20)
   825e0:	8c7fffc4 	addi	r17,r17,-1
   825e4:	88000c16 	blt	r17,zero,82618 <_fwalk_reent+0x84>
   825e8:	84000304 	addi	r16,r16,12
   825ec:	8080000b 	ldhu	r2,0(r16)
   825f0:	8c7fffc4 	addi	r17,r17,-1
   825f4:	817ffd04 	addi	r5,r16,-12
   825f8:	b080052e 	bgeu	r22,r2,82610 <_fwalk_reent+0x7c>
   825fc:	8080008f 	ldh	r2,2(r16)
   82600:	9809883a 	mov	r4,r19
   82604:	14800226 	beq	r2,r18,82610 <_fwalk_reent+0x7c>
   82608:	a83ee83a 	callr	r21
   8260c:	b8aeb03a 	or	r23,r23,r2
   82610:	84001a04 	addi	r16,r16,104
   82614:	8cbff51e 	bne	r17,r18,825ec <rx_descriptor_end+0xfff8258c>
   82618:	a5000017 	ldw	r20,0(r20)
   8261c:	a03fee1e 	bne	r20,zero,825d8 <rx_descriptor_end+0xfff82578>
   82620:	b805883a 	mov	r2,r23
   82624:	dfc00817 	ldw	ra,32(sp)
   82628:	ddc00717 	ldw	r23,28(sp)
   8262c:	dd800617 	ldw	r22,24(sp)
   82630:	dd400517 	ldw	r21,20(sp)
   82634:	dd000417 	ldw	r20,16(sp)
   82638:	dcc00317 	ldw	r19,12(sp)
   8263c:	dc800217 	ldw	r18,8(sp)
   82640:	dc400117 	ldw	r17,4(sp)
   82644:	dc000017 	ldw	r16,0(sp)
   82648:	dec00904 	addi	sp,sp,36
   8264c:	f800283a 	ret
   82650:	002f883a 	mov	r23,zero
   82654:	003ff206 	br	82620 <rx_descriptor_end+0xfff825c0>

00082658 <malloc>:
   82658:	00800274 	movhi	r2,9
   8265c:	10913d04 	addi	r2,r2,17652
   82660:	200b883a 	mov	r5,r4
   82664:	11000017 	ldw	r4,0(r2)
   82668:	00826801 	jmpi	82680 <_malloc_r>

0008266c <free>:
   8266c:	00800274 	movhi	r2,9
   82670:	10913d04 	addi	r2,r2,17652
   82674:	200b883a 	mov	r5,r4
   82678:	11000017 	ldw	r4,0(r2)
   8267c:	00821c01 	jmpi	821c0 <_free_r>

00082680 <_malloc_r>:
   82680:	defff504 	addi	sp,sp,-44
   82684:	dc800315 	stw	r18,12(sp)
   82688:	dfc00a15 	stw	ra,40(sp)
   8268c:	df000915 	stw	fp,36(sp)
   82690:	ddc00815 	stw	r23,32(sp)
   82694:	dd800715 	stw	r22,28(sp)
   82698:	dd400615 	stw	r21,24(sp)
   8269c:	dd000515 	stw	r20,20(sp)
   826a0:	dcc00415 	stw	r19,16(sp)
   826a4:	dc400215 	stw	r17,8(sp)
   826a8:	dc000115 	stw	r16,4(sp)
   826ac:	288002c4 	addi	r2,r5,11
   826b0:	00c00584 	movi	r3,22
   826b4:	2025883a 	mov	r18,r4
   826b8:	18807f2e 	bgeu	r3,r2,828b8 <_malloc_r+0x238>
   826bc:	047ffe04 	movi	r17,-8
   826c0:	1462703a 	and	r17,r2,r17
   826c4:	8800a316 	blt	r17,zero,82954 <_malloc_r+0x2d4>
   826c8:	8940a236 	bltu	r17,r5,82954 <_malloc_r+0x2d4>
   826cc:	008eae80 	call	8eae8 <__malloc_lock>
   826d0:	00807dc4 	movi	r2,503
   826d4:	1441e92e 	bgeu	r2,r17,82e7c <_malloc_r+0x7fc>
   826d8:	8804d27a 	srli	r2,r17,9
   826dc:	1000a126 	beq	r2,zero,82964 <_malloc_r+0x2e4>
   826e0:	00c00104 	movi	r3,4
   826e4:	18811e36 	bltu	r3,r2,82b60 <_malloc_r+0x4e0>
   826e8:	8804d1ba 	srli	r2,r17,6
   826ec:	12000e44 	addi	r8,r2,57
   826f0:	11c00e04 	addi	r7,r2,56
   826f4:	4209883a 	add	r4,r8,r8
   826f8:	04c00274 	movhi	r19,9
   826fc:	2109883a 	add	r4,r4,r4
   82700:	9ccb8104 	addi	r19,r19,11780
   82704:	2109883a 	add	r4,r4,r4
   82708:	9909883a 	add	r4,r19,r4
   8270c:	24000117 	ldw	r16,4(r4)
   82710:	213ffe04 	addi	r4,r4,-8
   82714:	24009726 	beq	r4,r16,82974 <_malloc_r+0x2f4>
   82718:	80800117 	ldw	r2,4(r16)
   8271c:	01bfff04 	movi	r6,-4
   82720:	014003c4 	movi	r5,15
   82724:	1184703a 	and	r2,r2,r6
   82728:	1447c83a 	sub	r3,r2,r17
   8272c:	28c00716 	blt	r5,r3,8274c <_malloc_r+0xcc>
   82730:	1800920e 	bge	r3,zero,8297c <_malloc_r+0x2fc>
   82734:	84000317 	ldw	r16,12(r16)
   82738:	24008e26 	beq	r4,r16,82974 <_malloc_r+0x2f4>
   8273c:	80800117 	ldw	r2,4(r16)
   82740:	1184703a 	and	r2,r2,r6
   82744:	1447c83a 	sub	r3,r2,r17
   82748:	28fff90e 	bge	r5,r3,82730 <rx_descriptor_end+0xfff826d0>
   8274c:	3809883a 	mov	r4,r7
   82750:	01800274 	movhi	r6,9
   82754:	9c000417 	ldw	r16,16(r19)
   82758:	318b8104 	addi	r6,r6,11780
   8275c:	32000204 	addi	r8,r6,8
   82760:	82013426 	beq	r16,r8,82c34 <_malloc_r+0x5b4>
   82764:	80c00117 	ldw	r3,4(r16)
   82768:	00bfff04 	movi	r2,-4
   8276c:	188e703a 	and	r7,r3,r2
   82770:	3c45c83a 	sub	r2,r7,r17
   82774:	00c003c4 	movi	r3,15
   82778:	18811f16 	blt	r3,r2,82bf8 <_malloc_r+0x578>
   8277c:	32000515 	stw	r8,20(r6)
   82780:	32000415 	stw	r8,16(r6)
   82784:	10007f0e 	bge	r2,zero,82984 <_malloc_r+0x304>
   82788:	00807fc4 	movi	r2,511
   8278c:	11c0fd36 	bltu	r2,r7,82b84 <_malloc_r+0x504>
   82790:	3806d0fa 	srli	r3,r7,3
   82794:	01c00044 	movi	r7,1
   82798:	30800117 	ldw	r2,4(r6)
   8279c:	19400044 	addi	r5,r3,1
   827a0:	294b883a 	add	r5,r5,r5
   827a4:	1807d0ba 	srai	r3,r3,2
   827a8:	294b883a 	add	r5,r5,r5
   827ac:	294b883a 	add	r5,r5,r5
   827b0:	298b883a 	add	r5,r5,r6
   827b4:	38c6983a 	sll	r3,r7,r3
   827b8:	29c00017 	ldw	r7,0(r5)
   827bc:	2a7ffe04 	addi	r9,r5,-8
   827c0:	1886b03a 	or	r3,r3,r2
   827c4:	82400315 	stw	r9,12(r16)
   827c8:	81c00215 	stw	r7,8(r16)
   827cc:	30c00115 	stw	r3,4(r6)
   827d0:	2c000015 	stw	r16,0(r5)
   827d4:	3c000315 	stw	r16,12(r7)
   827d8:	2005d0ba 	srai	r2,r4,2
   827dc:	01400044 	movi	r5,1
   827e0:	288a983a 	sll	r5,r5,r2
   827e4:	19406f36 	bltu	r3,r5,829a4 <_malloc_r+0x324>
   827e8:	28c4703a 	and	r2,r5,r3
   827ec:	10000a1e 	bne	r2,zero,82818 <_malloc_r+0x198>
   827f0:	00bfff04 	movi	r2,-4
   827f4:	294b883a 	add	r5,r5,r5
   827f8:	2088703a 	and	r4,r4,r2
   827fc:	28c4703a 	and	r2,r5,r3
   82800:	21000104 	addi	r4,r4,4
   82804:	1000041e 	bne	r2,zero,82818 <_malloc_r+0x198>
   82808:	294b883a 	add	r5,r5,r5
   8280c:	28c4703a 	and	r2,r5,r3
   82810:	21000104 	addi	r4,r4,4
   82814:	103ffc26 	beq	r2,zero,82808 <rx_descriptor_end+0xfff827a8>
   82818:	02bfff04 	movi	r10,-4
   8281c:	024003c4 	movi	r9,15
   82820:	21800044 	addi	r6,r4,1
   82824:	318d883a 	add	r6,r6,r6
   82828:	318d883a 	add	r6,r6,r6
   8282c:	318d883a 	add	r6,r6,r6
   82830:	998d883a 	add	r6,r19,r6
   82834:	333ffe04 	addi	r12,r6,-8
   82838:	2017883a 	mov	r11,r4
   8283c:	31800104 	addi	r6,r6,4
   82840:	34000017 	ldw	r16,0(r6)
   82844:	31fffd04 	addi	r7,r6,-12
   82848:	81c0041e 	bne	r16,r7,8285c <_malloc_r+0x1dc>
   8284c:	0000fb06 	br	82c3c <_malloc_r+0x5bc>
   82850:	1801030e 	bge	r3,zero,82c60 <_malloc_r+0x5e0>
   82854:	84000317 	ldw	r16,12(r16)
   82858:	81c0f826 	beq	r16,r7,82c3c <_malloc_r+0x5bc>
   8285c:	80800117 	ldw	r2,4(r16)
   82860:	1284703a 	and	r2,r2,r10
   82864:	1447c83a 	sub	r3,r2,r17
   82868:	48fff90e 	bge	r9,r3,82850 <rx_descriptor_end+0xfff827f0>
   8286c:	80800317 	ldw	r2,12(r16)
   82870:	81000217 	ldw	r4,8(r16)
   82874:	89400054 	ori	r5,r17,1
   82878:	81400115 	stw	r5,4(r16)
   8287c:	20800315 	stw	r2,12(r4)
   82880:	11000215 	stw	r4,8(r2)
   82884:	8463883a 	add	r17,r16,r17
   82888:	9c400515 	stw	r17,20(r19)
   8288c:	9c400415 	stw	r17,16(r19)
   82890:	18800054 	ori	r2,r3,1
   82894:	88800115 	stw	r2,4(r17)
   82898:	8a000315 	stw	r8,12(r17)
   8289c:	8a000215 	stw	r8,8(r17)
   828a0:	88e3883a 	add	r17,r17,r3
   828a4:	88c00015 	stw	r3,0(r17)
   828a8:	9009883a 	mov	r4,r18
   828ac:	008eb0c0 	call	8eb0c <__malloc_unlock>
   828b0:	80800204 	addi	r2,r16,8
   828b4:	00001b06 	br	82924 <_malloc_r+0x2a4>
   828b8:	04400404 	movi	r17,16
   828bc:	89402536 	bltu	r17,r5,82954 <_malloc_r+0x2d4>
   828c0:	008eae80 	call	8eae8 <__malloc_lock>
   828c4:	00800184 	movi	r2,6
   828c8:	01000084 	movi	r4,2
   828cc:	04c00274 	movhi	r19,9
   828d0:	1085883a 	add	r2,r2,r2
   828d4:	9ccb8104 	addi	r19,r19,11780
   828d8:	1085883a 	add	r2,r2,r2
   828dc:	9885883a 	add	r2,r19,r2
   828e0:	14000117 	ldw	r16,4(r2)
   828e4:	10fffe04 	addi	r3,r2,-8
   828e8:	80c0d926 	beq	r16,r3,82c50 <_malloc_r+0x5d0>
   828ec:	80c00117 	ldw	r3,4(r16)
   828f0:	81000317 	ldw	r4,12(r16)
   828f4:	00bfff04 	movi	r2,-4
   828f8:	1884703a 	and	r2,r3,r2
   828fc:	81400217 	ldw	r5,8(r16)
   82900:	8085883a 	add	r2,r16,r2
   82904:	10c00117 	ldw	r3,4(r2)
   82908:	29000315 	stw	r4,12(r5)
   8290c:	21400215 	stw	r5,8(r4)
   82910:	18c00054 	ori	r3,r3,1
   82914:	10c00115 	stw	r3,4(r2)
   82918:	9009883a 	mov	r4,r18
   8291c:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82920:	80800204 	addi	r2,r16,8
   82924:	dfc00a17 	ldw	ra,40(sp)
   82928:	df000917 	ldw	fp,36(sp)
   8292c:	ddc00817 	ldw	r23,32(sp)
   82930:	dd800717 	ldw	r22,28(sp)
   82934:	dd400617 	ldw	r21,24(sp)
   82938:	dd000517 	ldw	r20,20(sp)
   8293c:	dcc00417 	ldw	r19,16(sp)
   82940:	dc800317 	ldw	r18,12(sp)
   82944:	dc400217 	ldw	r17,8(sp)
   82948:	dc000117 	ldw	r16,4(sp)
   8294c:	dec00b04 	addi	sp,sp,44
   82950:	f800283a 	ret
   82954:	00800304 	movi	r2,12
   82958:	90800015 	stw	r2,0(r18)
   8295c:	0005883a 	mov	r2,zero
   82960:	003ff006 	br	82924 <rx_descriptor_end+0xfff828c4>
   82964:	01002004 	movi	r4,128
   82968:	02001004 	movi	r8,64
   8296c:	01c00fc4 	movi	r7,63
   82970:	003f6106 	br	826f8 <rx_descriptor_end+0xfff82698>
   82974:	4009883a 	mov	r4,r8
   82978:	003f7506 	br	82750 <rx_descriptor_end+0xfff826f0>
   8297c:	81000317 	ldw	r4,12(r16)
   82980:	003fde06 	br	828fc <rx_descriptor_end+0xfff8289c>
   82984:	81c5883a 	add	r2,r16,r7
   82988:	11400117 	ldw	r5,4(r2)
   8298c:	9009883a 	mov	r4,r18
   82990:	29400054 	ori	r5,r5,1
   82994:	11400115 	stw	r5,4(r2)
   82998:	008eb0c0 	call	8eb0c <__malloc_unlock>
   8299c:	80800204 	addi	r2,r16,8
   829a0:	003fe006 	br	82924 <rx_descriptor_end+0xfff828c4>
   829a4:	9c000217 	ldw	r16,8(r19)
   829a8:	00bfff04 	movi	r2,-4
   829ac:	85800117 	ldw	r22,4(r16)
   829b0:	b0ac703a 	and	r22,r22,r2
   829b4:	b4400336 	bltu	r22,r17,829c4 <_malloc_r+0x344>
   829b8:	b445c83a 	sub	r2,r22,r17
   829bc:	00c003c4 	movi	r3,15
   829c0:	18805d16 	blt	r3,r2,82b38 <_malloc_r+0x4b8>
   829c4:	05c00274 	movhi	r23,9
   829c8:	00800274 	movhi	r2,9
   829cc:	10993404 	addi	r2,r2,25808
   829d0:	bdd13e04 	addi	r23,r23,17656
   829d4:	15400017 	ldw	r21,0(r2)
   829d8:	b8c00017 	ldw	r3,0(r23)
   829dc:	00bfffc4 	movi	r2,-1
   829e0:	858d883a 	add	r6,r16,r22
   829e4:	8d6b883a 	add	r21,r17,r21
   829e8:	1880ea26 	beq	r3,r2,82d94 <_malloc_r+0x714>
   829ec:	ad4403c4 	addi	r21,r21,4111
   829f0:	00bc0004 	movi	r2,-4096
   829f4:	a8aa703a 	and	r21,r21,r2
   829f8:	a80b883a 	mov	r5,r21
   829fc:	9009883a 	mov	r4,r18
   82a00:	d9800015 	stw	r6,0(sp)
   82a04:	00832700 	call	83270 <_sbrk_r>
   82a08:	1029883a 	mov	r20,r2
   82a0c:	00bfffc4 	movi	r2,-1
   82a10:	d9800017 	ldw	r6,0(sp)
   82a14:	a080e826 	beq	r20,r2,82db8 <_malloc_r+0x738>
   82a18:	a180a636 	bltu	r20,r6,82cb4 <_malloc_r+0x634>
   82a1c:	07000274 	movhi	fp,9
   82a20:	e71a4004 	addi	fp,fp,26880
   82a24:	e0800017 	ldw	r2,0(fp)
   82a28:	a887883a 	add	r3,r21,r2
   82a2c:	e0c00015 	stw	r3,0(fp)
   82a30:	3500e626 	beq	r6,r20,82dcc <_malloc_r+0x74c>
   82a34:	b9000017 	ldw	r4,0(r23)
   82a38:	00bfffc4 	movi	r2,-1
   82a3c:	2080ee26 	beq	r4,r2,82df8 <_malloc_r+0x778>
   82a40:	a185c83a 	sub	r2,r20,r6
   82a44:	10c5883a 	add	r2,r2,r3
   82a48:	e0800015 	stw	r2,0(fp)
   82a4c:	a0c001cc 	andi	r3,r20,7
   82a50:	1800bc26 	beq	r3,zero,82d44 <_malloc_r+0x6c4>
   82a54:	a0e9c83a 	sub	r20,r20,r3
   82a58:	00840204 	movi	r2,4104
   82a5c:	a5000204 	addi	r20,r20,8
   82a60:	10c7c83a 	sub	r3,r2,r3
   82a64:	a545883a 	add	r2,r20,r21
   82a68:	1083ffcc 	andi	r2,r2,4095
   82a6c:	18abc83a 	sub	r21,r3,r2
   82a70:	a80b883a 	mov	r5,r21
   82a74:	9009883a 	mov	r4,r18
   82a78:	00832700 	call	83270 <_sbrk_r>
   82a7c:	00ffffc4 	movi	r3,-1
   82a80:	10c0e126 	beq	r2,r3,82e08 <_malloc_r+0x788>
   82a84:	1505c83a 	sub	r2,r2,r20
   82a88:	1545883a 	add	r2,r2,r21
   82a8c:	10800054 	ori	r2,r2,1
   82a90:	e0c00017 	ldw	r3,0(fp)
   82a94:	9d000215 	stw	r20,8(r19)
   82a98:	a0800115 	stw	r2,4(r20)
   82a9c:	a8c7883a 	add	r3,r21,r3
   82aa0:	e0c00015 	stw	r3,0(fp)
   82aa4:	84c00e26 	beq	r16,r19,82ae0 <_malloc_r+0x460>
   82aa8:	018003c4 	movi	r6,15
   82aac:	3580a72e 	bgeu	r6,r22,82d4c <_malloc_r+0x6cc>
   82ab0:	81400117 	ldw	r5,4(r16)
   82ab4:	013ffe04 	movi	r4,-8
   82ab8:	b0bffd04 	addi	r2,r22,-12
   82abc:	1104703a 	and	r2,r2,r4
   82ac0:	2900004c 	andi	r4,r5,1
   82ac4:	2088b03a 	or	r4,r4,r2
   82ac8:	81000115 	stw	r4,4(r16)
   82acc:	01400144 	movi	r5,5
   82ad0:	8089883a 	add	r4,r16,r2
   82ad4:	21400115 	stw	r5,4(r4)
   82ad8:	21400215 	stw	r5,8(r4)
   82adc:	3080cd36 	bltu	r6,r2,82e14 <_malloc_r+0x794>
   82ae0:	00800274 	movhi	r2,9
   82ae4:	10993304 	addi	r2,r2,25804
   82ae8:	11000017 	ldw	r4,0(r2)
   82aec:	20c0012e 	bgeu	r4,r3,82af4 <_malloc_r+0x474>
   82af0:	10c00015 	stw	r3,0(r2)
   82af4:	00800274 	movhi	r2,9
   82af8:	10993204 	addi	r2,r2,25800
   82afc:	11000017 	ldw	r4,0(r2)
   82b00:	9c000217 	ldw	r16,8(r19)
   82b04:	20c0012e 	bgeu	r4,r3,82b0c <_malloc_r+0x48c>
   82b08:	10c00015 	stw	r3,0(r2)
   82b0c:	80c00117 	ldw	r3,4(r16)
   82b10:	00bfff04 	movi	r2,-4
   82b14:	1886703a 	and	r3,r3,r2
   82b18:	1c45c83a 	sub	r2,r3,r17
   82b1c:	1c400236 	bltu	r3,r17,82b28 <_malloc_r+0x4a8>
   82b20:	00c003c4 	movi	r3,15
   82b24:	18800416 	blt	r3,r2,82b38 <_malloc_r+0x4b8>
   82b28:	9009883a 	mov	r4,r18
   82b2c:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82b30:	0005883a 	mov	r2,zero
   82b34:	003f7b06 	br	82924 <rx_descriptor_end+0xfff828c4>
   82b38:	88c00054 	ori	r3,r17,1
   82b3c:	80c00115 	stw	r3,4(r16)
   82b40:	8463883a 	add	r17,r16,r17
   82b44:	10800054 	ori	r2,r2,1
   82b48:	9c400215 	stw	r17,8(r19)
   82b4c:	88800115 	stw	r2,4(r17)
   82b50:	9009883a 	mov	r4,r18
   82b54:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82b58:	80800204 	addi	r2,r16,8
   82b5c:	003f7106 	br	82924 <rx_descriptor_end+0xfff828c4>
   82b60:	00c00504 	movi	r3,20
   82b64:	18804a2e 	bgeu	r3,r2,82c90 <_malloc_r+0x610>
   82b68:	00c01504 	movi	r3,84
   82b6c:	18806e36 	bltu	r3,r2,82d28 <_malloc_r+0x6a8>
   82b70:	8804d33a 	srli	r2,r17,12
   82b74:	12001bc4 	addi	r8,r2,111
   82b78:	11c01b84 	addi	r7,r2,110
   82b7c:	4209883a 	add	r4,r8,r8
   82b80:	003edd06 	br	826f8 <rx_descriptor_end+0xfff82698>
   82b84:	3804d27a 	srli	r2,r7,9
   82b88:	00c00104 	movi	r3,4
   82b8c:	1880442e 	bgeu	r3,r2,82ca0 <_malloc_r+0x620>
   82b90:	00c00504 	movi	r3,20
   82b94:	18808136 	bltu	r3,r2,82d9c <_malloc_r+0x71c>
   82b98:	11401704 	addi	r5,r2,92
   82b9c:	10c016c4 	addi	r3,r2,91
   82ba0:	294b883a 	add	r5,r5,r5
   82ba4:	294b883a 	add	r5,r5,r5
   82ba8:	294b883a 	add	r5,r5,r5
   82bac:	994b883a 	add	r5,r19,r5
   82bb0:	28800017 	ldw	r2,0(r5)
   82bb4:	01800274 	movhi	r6,9
   82bb8:	297ffe04 	addi	r5,r5,-8
   82bbc:	318b8104 	addi	r6,r6,11780
   82bc0:	28806526 	beq	r5,r2,82d58 <_malloc_r+0x6d8>
   82bc4:	01bfff04 	movi	r6,-4
   82bc8:	10c00117 	ldw	r3,4(r2)
   82bcc:	1986703a 	and	r3,r3,r6
   82bd0:	38c0022e 	bgeu	r7,r3,82bdc <_malloc_r+0x55c>
   82bd4:	10800217 	ldw	r2,8(r2)
   82bd8:	28bffb1e 	bne	r5,r2,82bc8 <rx_descriptor_end+0xfff82b68>
   82bdc:	11400317 	ldw	r5,12(r2)
   82be0:	98c00117 	ldw	r3,4(r19)
   82be4:	81400315 	stw	r5,12(r16)
   82be8:	80800215 	stw	r2,8(r16)
   82bec:	2c000215 	stw	r16,8(r5)
   82bf0:	14000315 	stw	r16,12(r2)
   82bf4:	003ef806 	br	827d8 <rx_descriptor_end+0xfff82778>
   82bf8:	88c00054 	ori	r3,r17,1
   82bfc:	80c00115 	stw	r3,4(r16)
   82c00:	8463883a 	add	r17,r16,r17
   82c04:	34400515 	stw	r17,20(r6)
   82c08:	34400415 	stw	r17,16(r6)
   82c0c:	10c00054 	ori	r3,r2,1
   82c10:	8a000315 	stw	r8,12(r17)
   82c14:	8a000215 	stw	r8,8(r17)
   82c18:	88c00115 	stw	r3,4(r17)
   82c1c:	88a3883a 	add	r17,r17,r2
   82c20:	88800015 	stw	r2,0(r17)
   82c24:	9009883a 	mov	r4,r18
   82c28:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82c2c:	80800204 	addi	r2,r16,8
   82c30:	003f3c06 	br	82924 <rx_descriptor_end+0xfff828c4>
   82c34:	30c00117 	ldw	r3,4(r6)
   82c38:	003ee706 	br	827d8 <rx_descriptor_end+0xfff82778>
   82c3c:	5ac00044 	addi	r11,r11,1
   82c40:	588000cc 	andi	r2,r11,3
   82c44:	31800204 	addi	r6,r6,8
   82c48:	103efd1e 	bne	r2,zero,82840 <rx_descriptor_end+0xfff827e0>
   82c4c:	00002406 	br	82ce0 <_malloc_r+0x660>
   82c50:	14000317 	ldw	r16,12(r2)
   82c54:	143f251e 	bne	r2,r16,828ec <rx_descriptor_end+0xfff8288c>
   82c58:	21000084 	addi	r4,r4,2
   82c5c:	003ebc06 	br	82750 <rx_descriptor_end+0xfff826f0>
   82c60:	8085883a 	add	r2,r16,r2
   82c64:	10c00117 	ldw	r3,4(r2)
   82c68:	81000317 	ldw	r4,12(r16)
   82c6c:	81400217 	ldw	r5,8(r16)
   82c70:	18c00054 	ori	r3,r3,1
   82c74:	10c00115 	stw	r3,4(r2)
   82c78:	29000315 	stw	r4,12(r5)
   82c7c:	21400215 	stw	r5,8(r4)
   82c80:	9009883a 	mov	r4,r18
   82c84:	008eb0c0 	call	8eb0c <__malloc_unlock>
   82c88:	80800204 	addi	r2,r16,8
   82c8c:	003f2506 	br	82924 <rx_descriptor_end+0xfff828c4>
   82c90:	12001704 	addi	r8,r2,92
   82c94:	11c016c4 	addi	r7,r2,91
   82c98:	4209883a 	add	r4,r8,r8
   82c9c:	003e9606 	br	826f8 <rx_descriptor_end+0xfff82698>
   82ca0:	3804d1ba 	srli	r2,r7,6
   82ca4:	11400e44 	addi	r5,r2,57
   82ca8:	10c00e04 	addi	r3,r2,56
   82cac:	294b883a 	add	r5,r5,r5
   82cb0:	003fbc06 	br	82ba4 <rx_descriptor_end+0xfff82b44>
   82cb4:	84ff5926 	beq	r16,r19,82a1c <rx_descriptor_end+0xfff829bc>
   82cb8:	00800274 	movhi	r2,9
   82cbc:	108b8104 	addi	r2,r2,11780
   82cc0:	14000217 	ldw	r16,8(r2)
   82cc4:	00bfff04 	movi	r2,-4
   82cc8:	80c00117 	ldw	r3,4(r16)
   82ccc:	1886703a 	and	r3,r3,r2
   82cd0:	003f9106 	br	82b18 <rx_descriptor_end+0xfff82ab8>
   82cd4:	60800217 	ldw	r2,8(r12)
   82cd8:	213fffc4 	addi	r4,r4,-1
   82cdc:	1300651e 	bne	r2,r12,82e74 <_malloc_r+0x7f4>
   82ce0:	208000cc 	andi	r2,r4,3
   82ce4:	633ffe04 	addi	r12,r12,-8
   82ce8:	103ffa1e 	bne	r2,zero,82cd4 <rx_descriptor_end+0xfff82c74>
   82cec:	98800117 	ldw	r2,4(r19)
   82cf0:	0146303a 	nor	r3,zero,r5
   82cf4:	1884703a 	and	r2,r3,r2
   82cf8:	98800115 	stw	r2,4(r19)
   82cfc:	294b883a 	add	r5,r5,r5
   82d00:	117f2836 	bltu	r2,r5,829a4 <rx_descriptor_end+0xfff82944>
   82d04:	283f2726 	beq	r5,zero,829a4 <rx_descriptor_end+0xfff82944>
   82d08:	2886703a 	and	r3,r5,r2
   82d0c:	5809883a 	mov	r4,r11
   82d10:	183ec31e 	bne	r3,zero,82820 <rx_descriptor_end+0xfff827c0>
   82d14:	294b883a 	add	r5,r5,r5
   82d18:	2886703a 	and	r3,r5,r2
   82d1c:	21000104 	addi	r4,r4,4
   82d20:	183ffc26 	beq	r3,zero,82d14 <rx_descriptor_end+0xfff82cb4>
   82d24:	003ebe06 	br	82820 <rx_descriptor_end+0xfff827c0>
   82d28:	00c05504 	movi	r3,340
   82d2c:	18801236 	bltu	r3,r2,82d78 <_malloc_r+0x6f8>
   82d30:	8804d3fa 	srli	r2,r17,15
   82d34:	12001e04 	addi	r8,r2,120
   82d38:	11c01dc4 	addi	r7,r2,119
   82d3c:	4209883a 	add	r4,r8,r8
   82d40:	003e6d06 	br	826f8 <rx_descriptor_end+0xfff82698>
   82d44:	00c40004 	movi	r3,4096
   82d48:	003f4606 	br	82a64 <rx_descriptor_end+0xfff82a04>
   82d4c:	00800044 	movi	r2,1
   82d50:	a0800115 	stw	r2,4(r20)
   82d54:	003f7406 	br	82b28 <rx_descriptor_end+0xfff82ac8>
   82d58:	1805d0ba 	srai	r2,r3,2
   82d5c:	01c00044 	movi	r7,1
   82d60:	30c00117 	ldw	r3,4(r6)
   82d64:	388e983a 	sll	r7,r7,r2
   82d68:	2805883a 	mov	r2,r5
   82d6c:	38c6b03a 	or	r3,r7,r3
   82d70:	30c00115 	stw	r3,4(r6)
   82d74:	003f9b06 	br	82be4 <rx_descriptor_end+0xfff82b84>
   82d78:	00c15504 	movi	r3,1364
   82d7c:	18801a36 	bltu	r3,r2,82de8 <_malloc_r+0x768>
   82d80:	8804d4ba 	srli	r2,r17,18
   82d84:	12001f44 	addi	r8,r2,125
   82d88:	11c01f04 	addi	r7,r2,124
   82d8c:	4209883a 	add	r4,r8,r8
   82d90:	003e5906 	br	826f8 <rx_descriptor_end+0xfff82698>
   82d94:	ad400404 	addi	r21,r21,16
   82d98:	003f1706 	br	829f8 <rx_descriptor_end+0xfff82998>
   82d9c:	00c01504 	movi	r3,84
   82da0:	18802336 	bltu	r3,r2,82e30 <_malloc_r+0x7b0>
   82da4:	3804d33a 	srli	r2,r7,12
   82da8:	11401bc4 	addi	r5,r2,111
   82dac:	10c01b84 	addi	r3,r2,110
   82db0:	294b883a 	add	r5,r5,r5
   82db4:	003f7b06 	br	82ba4 <rx_descriptor_end+0xfff82b44>
   82db8:	9c000217 	ldw	r16,8(r19)
   82dbc:	00bfff04 	movi	r2,-4
   82dc0:	80c00117 	ldw	r3,4(r16)
   82dc4:	1886703a 	and	r3,r3,r2
   82dc8:	003f5306 	br	82b18 <rx_descriptor_end+0xfff82ab8>
   82dcc:	3083ffcc 	andi	r2,r6,4095
   82dd0:	103f181e 	bne	r2,zero,82a34 <rx_descriptor_end+0xfff829d4>
   82dd4:	99000217 	ldw	r4,8(r19)
   82dd8:	b545883a 	add	r2,r22,r21
   82ddc:	10800054 	ori	r2,r2,1
   82de0:	20800115 	stw	r2,4(r4)
   82de4:	003f3e06 	br	82ae0 <rx_descriptor_end+0xfff82a80>
   82de8:	01003f84 	movi	r4,254
   82dec:	02001fc4 	movi	r8,127
   82df0:	01c01f84 	movi	r7,126
   82df4:	003e4006 	br	826f8 <rx_descriptor_end+0xfff82698>
   82df8:	00800274 	movhi	r2,9
   82dfc:	10913e04 	addi	r2,r2,17656
   82e00:	15000015 	stw	r20,0(r2)
   82e04:	003f1106 	br	82a4c <rx_descriptor_end+0xfff829ec>
   82e08:	00800044 	movi	r2,1
   82e0c:	002b883a 	mov	r21,zero
   82e10:	003f1f06 	br	82a90 <rx_descriptor_end+0xfff82a30>
   82e14:	81400204 	addi	r5,r16,8
   82e18:	9009883a 	mov	r4,r18
   82e1c:	00821c00 	call	821c0 <_free_r>
   82e20:	00800274 	movhi	r2,9
   82e24:	109a4004 	addi	r2,r2,26880
   82e28:	10c00017 	ldw	r3,0(r2)
   82e2c:	003f2c06 	br	82ae0 <rx_descriptor_end+0xfff82a80>
   82e30:	00c05504 	movi	r3,340
   82e34:	18800536 	bltu	r3,r2,82e4c <_malloc_r+0x7cc>
   82e38:	3804d3fa 	srli	r2,r7,15
   82e3c:	11401e04 	addi	r5,r2,120
   82e40:	10c01dc4 	addi	r3,r2,119
   82e44:	294b883a 	add	r5,r5,r5
   82e48:	003f5606 	br	82ba4 <rx_descriptor_end+0xfff82b44>
   82e4c:	00c15504 	movi	r3,1364
   82e50:	18800536 	bltu	r3,r2,82e68 <_malloc_r+0x7e8>
   82e54:	3804d4ba 	srli	r2,r7,18
   82e58:	11401f44 	addi	r5,r2,125
   82e5c:	10c01f04 	addi	r3,r2,124
   82e60:	294b883a 	add	r5,r5,r5
   82e64:	003f4f06 	br	82ba4 <rx_descriptor_end+0xfff82b44>
   82e68:	01403f84 	movi	r5,254
   82e6c:	00c01f84 	movi	r3,126
   82e70:	003f4c06 	br	82ba4 <rx_descriptor_end+0xfff82b44>
   82e74:	98800117 	ldw	r2,4(r19)
   82e78:	003fa006 	br	82cfc <rx_descriptor_end+0xfff82c9c>
   82e7c:	8808d0fa 	srli	r4,r17,3
   82e80:	20800044 	addi	r2,r4,1
   82e84:	1085883a 	add	r2,r2,r2
   82e88:	003e9006 	br	828cc <rx_descriptor_end+0xfff8286c>

00082e8c <memmove>:
   82e8c:	2005883a 	mov	r2,r4
   82e90:	29000b2e 	bgeu	r5,r4,82ec0 <memmove+0x34>
   82e94:	298f883a 	add	r7,r5,r6
   82e98:	21c0092e 	bgeu	r4,r7,82ec0 <memmove+0x34>
   82e9c:	2187883a 	add	r3,r4,r6
   82ea0:	198bc83a 	sub	r5,r3,r6
   82ea4:	30004826 	beq	r6,zero,82fc8 <memmove+0x13c>
   82ea8:	39ffffc4 	addi	r7,r7,-1
   82eac:	39000003 	ldbu	r4,0(r7)
   82eb0:	18ffffc4 	addi	r3,r3,-1
   82eb4:	19000005 	stb	r4,0(r3)
   82eb8:	28fffb1e 	bne	r5,r3,82ea8 <rx_descriptor_end+0xfff82e48>
   82ebc:	f800283a 	ret
   82ec0:	00c003c4 	movi	r3,15
   82ec4:	1980412e 	bgeu	r3,r6,82fcc <memmove+0x140>
   82ec8:	2886b03a 	or	r3,r5,r2
   82ecc:	18c000cc 	andi	r3,r3,3
   82ed0:	1800401e 	bne	r3,zero,82fd4 <memmove+0x148>
   82ed4:	33fffc04 	addi	r15,r6,-16
   82ed8:	781ed13a 	srli	r15,r15,4
   82edc:	28c00104 	addi	r3,r5,4
   82ee0:	13400104 	addi	r13,r2,4
   82ee4:	781c913a 	slli	r14,r15,4
   82ee8:	2b000204 	addi	r12,r5,8
   82eec:	12c00204 	addi	r11,r2,8
   82ef0:	73800504 	addi	r14,r14,20
   82ef4:	2a800304 	addi	r10,r5,12
   82ef8:	12400304 	addi	r9,r2,12
   82efc:	2b9d883a 	add	r14,r5,r14
   82f00:	2811883a 	mov	r8,r5
   82f04:	100f883a 	mov	r7,r2
   82f08:	41000017 	ldw	r4,0(r8)
   82f0c:	39c00404 	addi	r7,r7,16
   82f10:	18c00404 	addi	r3,r3,16
   82f14:	393ffc15 	stw	r4,-16(r7)
   82f18:	193ffc17 	ldw	r4,-16(r3)
   82f1c:	6b400404 	addi	r13,r13,16
   82f20:	5ac00404 	addi	r11,r11,16
   82f24:	693ffc15 	stw	r4,-16(r13)
   82f28:	61000017 	ldw	r4,0(r12)
   82f2c:	4a400404 	addi	r9,r9,16
   82f30:	42000404 	addi	r8,r8,16
   82f34:	593ffc15 	stw	r4,-16(r11)
   82f38:	51000017 	ldw	r4,0(r10)
   82f3c:	63000404 	addi	r12,r12,16
   82f40:	52800404 	addi	r10,r10,16
   82f44:	493ffc15 	stw	r4,-16(r9)
   82f48:	1bbfef1e 	bne	r3,r14,82f08 <rx_descriptor_end+0xfff82ea8>
   82f4c:	79000044 	addi	r4,r15,1
   82f50:	2008913a 	slli	r4,r4,4
   82f54:	328003cc 	andi	r10,r6,15
   82f58:	02c000c4 	movi	r11,3
   82f5c:	1107883a 	add	r3,r2,r4
   82f60:	290b883a 	add	r5,r5,r4
   82f64:	5a801e2e 	bgeu	r11,r10,82fe0 <memmove+0x154>
   82f68:	1813883a 	mov	r9,r3
   82f6c:	2811883a 	mov	r8,r5
   82f70:	500f883a 	mov	r7,r10
   82f74:	41000017 	ldw	r4,0(r8)
   82f78:	4a400104 	addi	r9,r9,4
   82f7c:	39ffff04 	addi	r7,r7,-4
   82f80:	493fff15 	stw	r4,-4(r9)
   82f84:	42000104 	addi	r8,r8,4
   82f88:	59fffa36 	bltu	r11,r7,82f74 <rx_descriptor_end+0xfff82f14>
   82f8c:	513fff04 	addi	r4,r10,-4
   82f90:	2008d0ba 	srli	r4,r4,2
   82f94:	318000cc 	andi	r6,r6,3
   82f98:	21000044 	addi	r4,r4,1
   82f9c:	2109883a 	add	r4,r4,r4
   82fa0:	2109883a 	add	r4,r4,r4
   82fa4:	1907883a 	add	r3,r3,r4
   82fa8:	290b883a 	add	r5,r5,r4
   82fac:	30000b26 	beq	r6,zero,82fdc <memmove+0x150>
   82fb0:	198d883a 	add	r6,r3,r6
   82fb4:	29c00003 	ldbu	r7,0(r5)
   82fb8:	18c00044 	addi	r3,r3,1
   82fbc:	29400044 	addi	r5,r5,1
   82fc0:	19ffffc5 	stb	r7,-1(r3)
   82fc4:	19bffb1e 	bne	r3,r6,82fb4 <rx_descriptor_end+0xfff82f54>
   82fc8:	f800283a 	ret
   82fcc:	1007883a 	mov	r3,r2
   82fd0:	003ff606 	br	82fac <rx_descriptor_end+0xfff82f4c>
   82fd4:	1007883a 	mov	r3,r2
   82fd8:	003ff506 	br	82fb0 <rx_descriptor_end+0xfff82f50>
   82fdc:	f800283a 	ret
   82fe0:	500d883a 	mov	r6,r10
   82fe4:	003ff106 	br	82fac <rx_descriptor_end+0xfff82f4c>

00082fe8 <memset>:
   82fe8:	20c000cc 	andi	r3,r4,3
   82fec:	2005883a 	mov	r2,r4
   82ff0:	18004426 	beq	r3,zero,83104 <memset+0x11c>
   82ff4:	31ffffc4 	addi	r7,r6,-1
   82ff8:	30004026 	beq	r6,zero,830fc <memset+0x114>
   82ffc:	2813883a 	mov	r9,r5
   83000:	200d883a 	mov	r6,r4
   83004:	2007883a 	mov	r3,r4
   83008:	00000406 	br	8301c <memset+0x34>
   8300c:	3a3fffc4 	addi	r8,r7,-1
   83010:	31800044 	addi	r6,r6,1
   83014:	38003926 	beq	r7,zero,830fc <memset+0x114>
   83018:	400f883a 	mov	r7,r8
   8301c:	18c00044 	addi	r3,r3,1
   83020:	32400005 	stb	r9,0(r6)
   83024:	1a0000cc 	andi	r8,r3,3
   83028:	403ff81e 	bne	r8,zero,8300c <rx_descriptor_end+0xfff82fac>
   8302c:	010000c4 	movi	r4,3
   83030:	21c02d2e 	bgeu	r4,r7,830e8 <memset+0x100>
   83034:	29003fcc 	andi	r4,r5,255
   83038:	200c923a 	slli	r6,r4,8
   8303c:	3108b03a 	or	r4,r6,r4
   83040:	200c943a 	slli	r6,r4,16
   83044:	218cb03a 	or	r6,r4,r6
   83048:	010003c4 	movi	r4,15
   8304c:	21c0182e 	bgeu	r4,r7,830b0 <memset+0xc8>
   83050:	3b3ffc04 	addi	r12,r7,-16
   83054:	6018d13a 	srli	r12,r12,4
   83058:	1a000104 	addi	r8,r3,4
   8305c:	1ac00204 	addi	r11,r3,8
   83060:	6008913a 	slli	r4,r12,4
   83064:	1a800304 	addi	r10,r3,12
   83068:	1813883a 	mov	r9,r3
   8306c:	21000504 	addi	r4,r4,20
   83070:	1909883a 	add	r4,r3,r4
   83074:	49800015 	stw	r6,0(r9)
   83078:	41800015 	stw	r6,0(r8)
   8307c:	59800015 	stw	r6,0(r11)
   83080:	51800015 	stw	r6,0(r10)
   83084:	42000404 	addi	r8,r8,16
   83088:	4a400404 	addi	r9,r9,16
   8308c:	5ac00404 	addi	r11,r11,16
   83090:	52800404 	addi	r10,r10,16
   83094:	413ff71e 	bne	r8,r4,83074 <rx_descriptor_end+0xfff83014>
   83098:	63000044 	addi	r12,r12,1
   8309c:	6018913a 	slli	r12,r12,4
   830a0:	39c003cc 	andi	r7,r7,15
   830a4:	010000c4 	movi	r4,3
   830a8:	1b07883a 	add	r3,r3,r12
   830ac:	21c00e2e 	bgeu	r4,r7,830e8 <memset+0x100>
   830b0:	1813883a 	mov	r9,r3
   830b4:	3811883a 	mov	r8,r7
   830b8:	010000c4 	movi	r4,3
   830bc:	49800015 	stw	r6,0(r9)
   830c0:	423fff04 	addi	r8,r8,-4
   830c4:	4a400104 	addi	r9,r9,4
   830c8:	223ffc36 	bltu	r4,r8,830bc <rx_descriptor_end+0xfff8305c>
   830cc:	393fff04 	addi	r4,r7,-4
   830d0:	2008d0ba 	srli	r4,r4,2
   830d4:	39c000cc 	andi	r7,r7,3
   830d8:	21000044 	addi	r4,r4,1
   830dc:	2109883a 	add	r4,r4,r4
   830e0:	2109883a 	add	r4,r4,r4
   830e4:	1907883a 	add	r3,r3,r4
   830e8:	38000526 	beq	r7,zero,83100 <memset+0x118>
   830ec:	19cf883a 	add	r7,r3,r7
   830f0:	19400005 	stb	r5,0(r3)
   830f4:	18c00044 	addi	r3,r3,1
   830f8:	38fffd1e 	bne	r7,r3,830f0 <rx_descriptor_end+0xfff83090>
   830fc:	f800283a 	ret
   83100:	f800283a 	ret
   83104:	2007883a 	mov	r3,r4
   83108:	300f883a 	mov	r7,r6
   8310c:	003fc706 	br	8302c <rx_descriptor_end+0xfff82fcc>

00083110 <_printf_r>:
   83110:	defffd04 	addi	sp,sp,-12
   83114:	2805883a 	mov	r2,r5
   83118:	dfc00015 	stw	ra,0(sp)
   8311c:	d9800115 	stw	r6,4(sp)
   83120:	d9c00215 	stw	r7,8(sp)
   83124:	21400217 	ldw	r5,8(r4)
   83128:	d9c00104 	addi	r7,sp,4
   8312c:	100d883a 	mov	r6,r2
   83130:	00834980 	call	83498 <___vfprintf_internal_r>
   83134:	dfc00017 	ldw	ra,0(sp)
   83138:	dec00304 	addi	sp,sp,12
   8313c:	f800283a 	ret

00083140 <printf>:
   83140:	defffc04 	addi	sp,sp,-16
   83144:	dfc00015 	stw	ra,0(sp)
   83148:	d9400115 	stw	r5,4(sp)
   8314c:	d9800215 	stw	r6,8(sp)
   83150:	d9c00315 	stw	r7,12(sp)
   83154:	00800274 	movhi	r2,9
   83158:	10913d04 	addi	r2,r2,17652
   8315c:	10800017 	ldw	r2,0(r2)
   83160:	200b883a 	mov	r5,r4
   83164:	d9800104 	addi	r6,sp,4
   83168:	11000217 	ldw	r4,8(r2)
   8316c:	00856900 	call	85690 <__vfprintf_internal>
   83170:	dfc00017 	ldw	ra,0(sp)
   83174:	dec00404 	addi	sp,sp,16
   83178:	f800283a 	ret

0008317c <_putchar_r>:
   8317c:	21800217 	ldw	r6,8(r4)
   83180:	0088cd81 	jmpi	88cd8 <_putc_r>

00083184 <putchar>:
   83184:	00800274 	movhi	r2,9
   83188:	10913d04 	addi	r2,r2,17652
   8318c:	200b883a 	mov	r5,r4
   83190:	11000017 	ldw	r4,0(r2)
   83194:	21800217 	ldw	r6,8(r4)
   83198:	0088cd81 	jmpi	88cd8 <_putc_r>

0008319c <_puts_r>:
   8319c:	defff604 	addi	sp,sp,-40
   831a0:	dc000715 	stw	r16,28(sp)
   831a4:	2021883a 	mov	r16,r4
   831a8:	2809883a 	mov	r4,r5
   831ac:	dc400815 	stw	r17,32(sp)
   831b0:	dfc00915 	stw	ra,36(sp)
   831b4:	2823883a 	mov	r17,r5
   831b8:	00834000 	call	83400 <strlen>
   831bc:	10c00044 	addi	r3,r2,1
   831c0:	d8800115 	stw	r2,4(sp)
   831c4:	00800274 	movhi	r2,9
   831c8:	1088b304 	addi	r2,r2,8908
   831cc:	d8800215 	stw	r2,8(sp)
   831d0:	00800044 	movi	r2,1
   831d4:	d8800315 	stw	r2,12(sp)
   831d8:	00800084 	movi	r2,2
   831dc:	dc400015 	stw	r17,0(sp)
   831e0:	d8c00615 	stw	r3,24(sp)
   831e4:	dec00415 	stw	sp,16(sp)
   831e8:	d8800515 	stw	r2,20(sp)
   831ec:	80000226 	beq	r16,zero,831f8 <_puts_r+0x5c>
   831f0:	80800e17 	ldw	r2,56(r16)
   831f4:	10001426 	beq	r2,zero,83248 <_puts_r+0xac>
   831f8:	81400217 	ldw	r5,8(r16)
   831fc:	2880030b 	ldhu	r2,12(r5)
   83200:	10c8000c 	andi	r3,r2,8192
   83204:	1800061e 	bne	r3,zero,83220 <_puts_r+0x84>
   83208:	29001917 	ldw	r4,100(r5)
   8320c:	00f7ffc4 	movi	r3,-8193
   83210:	10880014 	ori	r2,r2,8192
   83214:	20c6703a 	and	r3,r4,r3
   83218:	2880030d 	sth	r2,12(r5)
   8321c:	28c01915 	stw	r3,100(r5)
   83220:	d9800404 	addi	r6,sp,16
   83224:	8009883a 	mov	r4,r16
   83228:	00872fc0 	call	872fc <__sfvwrite_r>
   8322c:	1000091e 	bne	r2,zero,83254 <_puts_r+0xb8>
   83230:	00800284 	movi	r2,10
   83234:	dfc00917 	ldw	ra,36(sp)
   83238:	dc400817 	ldw	r17,32(sp)
   8323c:	dc000717 	ldw	r16,28(sp)
   83240:	dec00a04 	addi	sp,sp,40
   83244:	f800283a 	ret
   83248:	8009883a 	mov	r4,r16
   8324c:	008204c0 	call	8204c <__sinit>
   83250:	003fe906 	br	831f8 <rx_descriptor_end+0xfff83198>
   83254:	00bfffc4 	movi	r2,-1
   83258:	003ff606 	br	83234 <rx_descriptor_end+0xfff831d4>

0008325c <puts>:
   8325c:	00800274 	movhi	r2,9
   83260:	10913d04 	addi	r2,r2,17652
   83264:	200b883a 	mov	r5,r4
   83268:	11000017 	ldw	r4,0(r2)
   8326c:	008319c1 	jmpi	8319c <_puts_r>

00083270 <_sbrk_r>:
   83270:	defffd04 	addi	sp,sp,-12
   83274:	dc000015 	stw	r16,0(sp)
   83278:	04000274 	movhi	r16,9
   8327c:	dc400115 	stw	r17,4(sp)
   83280:	84193504 	addi	r16,r16,25812
   83284:	2023883a 	mov	r17,r4
   83288:	2809883a 	mov	r4,r5
   8328c:	dfc00215 	stw	ra,8(sp)
   83290:	80000015 	stw	zero,0(r16)
   83294:	008ef340 	call	8ef34 <sbrk>
   83298:	00ffffc4 	movi	r3,-1
   8329c:	10c00526 	beq	r2,r3,832b4 <_sbrk_r+0x44>
   832a0:	dfc00217 	ldw	ra,8(sp)
   832a4:	dc400117 	ldw	r17,4(sp)
   832a8:	dc000017 	ldw	r16,0(sp)
   832ac:	dec00304 	addi	sp,sp,12
   832b0:	f800283a 	ret
   832b4:	80c00017 	ldw	r3,0(r16)
   832b8:	183ff926 	beq	r3,zero,832a0 <rx_descriptor_end+0xfff83240>
   832bc:	88c00015 	stw	r3,0(r17)
   832c0:	003ff706 	br	832a0 <rx_descriptor_end+0xfff83240>

000832c4 <__sread>:
   832c4:	defffe04 	addi	sp,sp,-8
   832c8:	dc000015 	stw	r16,0(sp)
   832cc:	2821883a 	mov	r16,r5
   832d0:	2940038f 	ldh	r5,14(r5)
   832d4:	dfc00115 	stw	ra,4(sp)
   832d8:	0088e400 	call	88e40 <_read_r>
   832dc:	10000716 	blt	r2,zero,832fc <__sread+0x38>
   832e0:	80c01417 	ldw	r3,80(r16)
   832e4:	1887883a 	add	r3,r3,r2
   832e8:	80c01415 	stw	r3,80(r16)
   832ec:	dfc00117 	ldw	ra,4(sp)
   832f0:	dc000017 	ldw	r16,0(sp)
   832f4:	dec00204 	addi	sp,sp,8
   832f8:	f800283a 	ret
   832fc:	80c0030b 	ldhu	r3,12(r16)
   83300:	18fbffcc 	andi	r3,r3,61439
   83304:	80c0030d 	sth	r3,12(r16)
   83308:	dfc00117 	ldw	ra,4(sp)
   8330c:	dc000017 	ldw	r16,0(sp)
   83310:	dec00204 	addi	sp,sp,8
   83314:	f800283a 	ret

00083318 <__seofread>:
   83318:	0005883a 	mov	r2,zero
   8331c:	f800283a 	ret

00083320 <__swrite>:
   83320:	2880030b 	ldhu	r2,12(r5)
   83324:	defffb04 	addi	sp,sp,-20
   83328:	dcc00315 	stw	r19,12(sp)
   8332c:	dc800215 	stw	r18,8(sp)
   83330:	dc400115 	stw	r17,4(sp)
   83334:	dc000015 	stw	r16,0(sp)
   83338:	dfc00415 	stw	ra,16(sp)
   8333c:	10c0400c 	andi	r3,r2,256
   83340:	2821883a 	mov	r16,r5
   83344:	2023883a 	mov	r17,r4
   83348:	3025883a 	mov	r18,r6
   8334c:	3827883a 	mov	r19,r7
   83350:	18000526 	beq	r3,zero,83368 <__swrite+0x48>
   83354:	2940038f 	ldh	r5,14(r5)
   83358:	01c00084 	movi	r7,2
   8335c:	000d883a 	mov	r6,zero
   83360:	00878940 	call	87894 <_lseek_r>
   83364:	8080030b 	ldhu	r2,12(r16)
   83368:	8140038f 	ldh	r5,14(r16)
   8336c:	10bbffcc 	andi	r2,r2,61439
   83370:	980f883a 	mov	r7,r19
   83374:	900d883a 	mov	r6,r18
   83378:	8809883a 	mov	r4,r17
   8337c:	8080030d 	sth	r2,12(r16)
   83380:	dfc00417 	ldw	ra,16(sp)
   83384:	dcc00317 	ldw	r19,12(sp)
   83388:	dc800217 	ldw	r18,8(sp)
   8338c:	dc400117 	ldw	r17,4(sp)
   83390:	dc000017 	ldw	r16,0(sp)
   83394:	dec00504 	addi	sp,sp,20
   83398:	00857681 	jmpi	85768 <_write_r>

0008339c <__sseek>:
   8339c:	defffe04 	addi	sp,sp,-8
   833a0:	dc000015 	stw	r16,0(sp)
   833a4:	2821883a 	mov	r16,r5
   833a8:	2940038f 	ldh	r5,14(r5)
   833ac:	dfc00115 	stw	ra,4(sp)
   833b0:	00878940 	call	87894 <_lseek_r>
   833b4:	00ffffc4 	movi	r3,-1
   833b8:	10c00826 	beq	r2,r3,833dc <__sseek+0x40>
   833bc:	80c0030b 	ldhu	r3,12(r16)
   833c0:	80801415 	stw	r2,80(r16)
   833c4:	18c40014 	ori	r3,r3,4096
   833c8:	80c0030d 	sth	r3,12(r16)
   833cc:	dfc00117 	ldw	ra,4(sp)
   833d0:	dc000017 	ldw	r16,0(sp)
   833d4:	dec00204 	addi	sp,sp,8
   833d8:	f800283a 	ret
   833dc:	80c0030b 	ldhu	r3,12(r16)
   833e0:	18fbffcc 	andi	r3,r3,61439
   833e4:	80c0030d 	sth	r3,12(r16)
   833e8:	dfc00117 	ldw	ra,4(sp)
   833ec:	dc000017 	ldw	r16,0(sp)
   833f0:	dec00204 	addi	sp,sp,8
   833f4:	f800283a 	ret

000833f8 <__sclose>:
   833f8:	2940038f 	ldh	r5,14(r5)
   833fc:	008591c1 	jmpi	8591c <_close_r>

00083400 <strlen>:
   83400:	208000cc 	andi	r2,r4,3
   83404:	10002026 	beq	r2,zero,83488 <strlen+0x88>
   83408:	20800007 	ldb	r2,0(r4)
   8340c:	10002026 	beq	r2,zero,83490 <strlen+0x90>
   83410:	2005883a 	mov	r2,r4
   83414:	00000206 	br	83420 <strlen+0x20>
   83418:	10c00007 	ldb	r3,0(r2)
   8341c:	18001826 	beq	r3,zero,83480 <strlen+0x80>
   83420:	10800044 	addi	r2,r2,1
   83424:	10c000cc 	andi	r3,r2,3
   83428:	183ffb1e 	bne	r3,zero,83418 <rx_descriptor_end+0xfff833b8>
   8342c:	10c00017 	ldw	r3,0(r2)
   83430:	01ffbff4 	movhi	r7,65279
   83434:	39ffbfc4 	addi	r7,r7,-257
   83438:	00ca303a 	nor	r5,zero,r3
   8343c:	01a02074 	movhi	r6,32897
   83440:	19c7883a 	add	r3,r3,r7
   83444:	31a02004 	addi	r6,r6,-32640
   83448:	1946703a 	and	r3,r3,r5
   8344c:	1986703a 	and	r3,r3,r6
   83450:	1800091e 	bne	r3,zero,83478 <strlen+0x78>
   83454:	10800104 	addi	r2,r2,4
   83458:	10c00017 	ldw	r3,0(r2)
   8345c:	19cb883a 	add	r5,r3,r7
   83460:	00c6303a 	nor	r3,zero,r3
   83464:	28c6703a 	and	r3,r5,r3
   83468:	1986703a 	and	r3,r3,r6
   8346c:	183ff926 	beq	r3,zero,83454 <rx_descriptor_end+0xfff833f4>
   83470:	00000106 	br	83478 <strlen+0x78>
   83474:	10800044 	addi	r2,r2,1
   83478:	10c00007 	ldb	r3,0(r2)
   8347c:	183ffd1e 	bne	r3,zero,83474 <rx_descriptor_end+0xfff83414>
   83480:	1105c83a 	sub	r2,r2,r4
   83484:	f800283a 	ret
   83488:	2005883a 	mov	r2,r4
   8348c:	003fe706 	br	8342c <rx_descriptor_end+0xfff833cc>
   83490:	0005883a 	mov	r2,zero
   83494:	f800283a 	ret

00083498 <___vfprintf_internal_r>:
   83498:	deffb804 	addi	sp,sp,-288
   8349c:	dfc04715 	stw	ra,284(sp)
   834a0:	ddc04515 	stw	r23,276(sp)
   834a4:	dd404315 	stw	r21,268(sp)
   834a8:	d9002c15 	stw	r4,176(sp)
   834ac:	282f883a 	mov	r23,r5
   834b0:	302b883a 	mov	r21,r6
   834b4:	d9c02d15 	stw	r7,180(sp)
   834b8:	df004615 	stw	fp,280(sp)
   834bc:	dd804415 	stw	r22,272(sp)
   834c0:	dd004215 	stw	r20,264(sp)
   834c4:	dcc04115 	stw	r19,260(sp)
   834c8:	dc804015 	stw	r18,256(sp)
   834cc:	dc403f15 	stw	r17,252(sp)
   834d0:	dc003e15 	stw	r16,248(sp)
   834d4:	00878640 	call	87864 <_localeconv_r>
   834d8:	10800017 	ldw	r2,0(r2)
   834dc:	1009883a 	mov	r4,r2
   834e0:	d8803415 	stw	r2,208(sp)
   834e4:	00834000 	call	83400 <strlen>
   834e8:	d8803715 	stw	r2,220(sp)
   834ec:	d8802c17 	ldw	r2,176(sp)
   834f0:	10000226 	beq	r2,zero,834fc <___vfprintf_internal_r+0x64>
   834f4:	10800e17 	ldw	r2,56(r2)
   834f8:	1000f926 	beq	r2,zero,838e0 <___vfprintf_internal_r+0x448>
   834fc:	b880030b 	ldhu	r2,12(r23)
   83500:	10c8000c 	andi	r3,r2,8192
   83504:	1800061e 	bne	r3,zero,83520 <___vfprintf_internal_r+0x88>
   83508:	b9001917 	ldw	r4,100(r23)
   8350c:	00f7ffc4 	movi	r3,-8193
   83510:	10880014 	ori	r2,r2,8192
   83514:	20c6703a 	and	r3,r4,r3
   83518:	b880030d 	sth	r2,12(r23)
   8351c:	b8c01915 	stw	r3,100(r23)
   83520:	10c0020c 	andi	r3,r2,8
   83524:	1800c126 	beq	r3,zero,8382c <___vfprintf_internal_r+0x394>
   83528:	b8c00417 	ldw	r3,16(r23)
   8352c:	1800bf26 	beq	r3,zero,8382c <___vfprintf_internal_r+0x394>
   83530:	1080068c 	andi	r2,r2,26
   83534:	00c00284 	movi	r3,10
   83538:	10c0c426 	beq	r2,r3,8384c <___vfprintf_internal_r+0x3b4>
   8353c:	d8c00404 	addi	r3,sp,16
   83540:	05000274 	movhi	r20,9
   83544:	d9001e04 	addi	r4,sp,120
   83548:	a508c484 	addi	r20,r20,8978
   8354c:	d8c01e15 	stw	r3,120(sp)
   83550:	d8002015 	stw	zero,128(sp)
   83554:	d8001f15 	stw	zero,124(sp)
   83558:	d8003315 	stw	zero,204(sp)
   8355c:	d8003615 	stw	zero,216(sp)
   83560:	d8003815 	stw	zero,224(sp)
   83564:	1811883a 	mov	r8,r3
   83568:	d8003915 	stw	zero,228(sp)
   8356c:	d8003a15 	stw	zero,232(sp)
   83570:	d8002f15 	stw	zero,188(sp)
   83574:	d9002815 	stw	r4,160(sp)
   83578:	a8800007 	ldb	r2,0(r21)
   8357c:	10027b26 	beq	r2,zero,83f6c <___vfprintf_internal_r+0xad4>
   83580:	00c00944 	movi	r3,37
   83584:	a821883a 	mov	r16,r21
   83588:	10c0021e 	bne	r2,r3,83594 <___vfprintf_internal_r+0xfc>
   8358c:	00001406 	br	835e0 <___vfprintf_internal_r+0x148>
   83590:	10c00326 	beq	r2,r3,835a0 <___vfprintf_internal_r+0x108>
   83594:	84000044 	addi	r16,r16,1
   83598:	80800007 	ldb	r2,0(r16)
   8359c:	103ffc1e 	bne	r2,zero,83590 <rx_descriptor_end+0xfff83530>
   835a0:	8563c83a 	sub	r17,r16,r21
   835a4:	88000e26 	beq	r17,zero,835e0 <___vfprintf_internal_r+0x148>
   835a8:	d8c02017 	ldw	r3,128(sp)
   835ac:	d8801f17 	ldw	r2,124(sp)
   835b0:	45400015 	stw	r21,0(r8)
   835b4:	1c47883a 	add	r3,r3,r17
   835b8:	10800044 	addi	r2,r2,1
   835bc:	d8c02015 	stw	r3,128(sp)
   835c0:	44400115 	stw	r17,4(r8)
   835c4:	d8801f15 	stw	r2,124(sp)
   835c8:	00c001c4 	movi	r3,7
   835cc:	1880a716 	blt	r3,r2,8386c <___vfprintf_internal_r+0x3d4>
   835d0:	42000204 	addi	r8,r8,8
   835d4:	d9402f17 	ldw	r5,188(sp)
   835d8:	2c4b883a 	add	r5,r5,r17
   835dc:	d9402f15 	stw	r5,188(sp)
   835e0:	80800007 	ldb	r2,0(r16)
   835e4:	1000a826 	beq	r2,zero,83888 <___vfprintf_internal_r+0x3f0>
   835e8:	84400047 	ldb	r17,1(r16)
   835ec:	00bfffc4 	movi	r2,-1
   835f0:	85400044 	addi	r21,r16,1
   835f4:	d8002785 	stb	zero,158(sp)
   835f8:	0007883a 	mov	r3,zero
   835fc:	000f883a 	mov	r7,zero
   83600:	d8802915 	stw	r2,164(sp)
   83604:	d8003115 	stw	zero,196(sp)
   83608:	0025883a 	mov	r18,zero
   8360c:	01401604 	movi	r5,88
   83610:	01800244 	movi	r6,9
   83614:	02800a84 	movi	r10,42
   83618:	02401b04 	movi	r9,108
   8361c:	ad400044 	addi	r21,r21,1
   83620:	88bff804 	addi	r2,r17,-32
   83624:	28830436 	bltu	r5,r2,84238 <___vfprintf_internal_r+0xda0>
   83628:	100490ba 	slli	r2,r2,2
   8362c:	01000234 	movhi	r4,8
   83630:	210d9004 	addi	r4,r4,13888
   83634:	1105883a 	add	r2,r2,r4
   83638:	10800017 	ldw	r2,0(r2)
   8363c:	1000683a 	jmp	r2
   83640:	00084158 	cmpnei	zero,zero,8453
   83644:	00084238 	rdprs	zero,zero,8456
   83648:	00084238 	rdprs	zero,zero,8456
   8364c:	00084178 	rdprs	zero,zero,8453
   83650:	00084238 	rdprs	zero,zero,8456
   83654:	00084238 	rdprs	zero,zero,8456
   83658:	00084238 	rdprs	zero,zero,8456
   8365c:	00084238 	rdprs	zero,zero,8456
   83660:	00084238 	rdprs	zero,zero,8456
   83664:	00084238 	rdprs	zero,zero,8456
   83668:	000838ec 	andhi	zero,zero,8419
   8366c:	00084094 	movui	zero,8450
   83670:	00084238 	rdprs	zero,zero,8456
   83674:	000837b4 	movhi	zero,8414
   83678:	00083914 	movui	zero,8420
   8367c:	00084238 	rdprs	zero,zero,8456
   83680:	00083954 	movui	zero,8421
   83684:	00083960 	cmpeqi	zero,zero,8421
   83688:	00083960 	cmpeqi	zero,zero,8421
   8368c:	00083960 	cmpeqi	zero,zero,8421
   83690:	00083960 	cmpeqi	zero,zero,8421
   83694:	00083960 	cmpeqi	zero,zero,8421
   83698:	00083960 	cmpeqi	zero,zero,8421
   8369c:	00083960 	cmpeqi	zero,zero,8421
   836a0:	00083960 	cmpeqi	zero,zero,8421
   836a4:	00083960 	cmpeqi	zero,zero,8421
   836a8:	00084238 	rdprs	zero,zero,8456
   836ac:	00084238 	rdprs	zero,zero,8456
   836b0:	00084238 	rdprs	zero,zero,8456
   836b4:	00084238 	rdprs	zero,zero,8456
   836b8:	00084238 	rdprs	zero,zero,8456
   836bc:	00084238 	rdprs	zero,zero,8456
   836c0:	00084238 	rdprs	zero,zero,8456
   836c4:	00084238 	rdprs	zero,zero,8456
   836c8:	00084238 	rdprs	zero,zero,8456
   836cc:	00084238 	rdprs	zero,zero,8456
   836d0:	00083994 	movui	zero,8422
   836d4:	00083a50 	cmplti	zero,zero,8425
   836d8:	00084238 	rdprs	zero,zero,8456
   836dc:	00083a50 	cmplti	zero,zero,8425
   836e0:	00084238 	rdprs	zero,zero,8456
   836e4:	00084238 	rdprs	zero,zero,8456
   836e8:	00084238 	rdprs	zero,zero,8456
   836ec:	00084238 	rdprs	zero,zero,8456
   836f0:	00083af0 	cmpltui	zero,zero,8427
   836f4:	00084238 	rdprs	zero,zero,8456
   836f8:	00084238 	rdprs	zero,zero,8456
   836fc:	00083afc 	xorhi	zero,zero,8427
   83700:	00084238 	rdprs	zero,zero,8456
   83704:	00084238 	rdprs	zero,zero,8456
   83708:	00084238 	rdprs	zero,zero,8456
   8370c:	00084238 	rdprs	zero,zero,8456
   83710:	00084238 	rdprs	zero,zero,8456
   83714:	00083f74 	movhi	zero,8445
   83718:	00084238 	rdprs	zero,zero,8456
   8371c:	00084238 	rdprs	zero,zero,8456
   83720:	00083fd4 	movui	zero,8447
   83724:	00084238 	rdprs	zero,zero,8456
   83728:	00084238 	rdprs	zero,zero,8456
   8372c:	00084238 	rdprs	zero,zero,8456
   83730:	00084238 	rdprs	zero,zero,8456
   83734:	00084238 	rdprs	zero,zero,8456
   83738:	00084238 	rdprs	zero,zero,8456
   8373c:	00084238 	rdprs	zero,zero,8456
   83740:	00084238 	rdprs	zero,zero,8456
   83744:	00084238 	rdprs	zero,zero,8456
   83748:	00084238 	rdprs	zero,zero,8456
   8374c:	000841e4 	muli	zero,zero,8455
   83750:	00084184 	movi	zero,8454
   83754:	00083a50 	cmplti	zero,zero,8425
   83758:	00083a50 	cmplti	zero,zero,8425
   8375c:	00083a50 	cmplti	zero,zero,8425
   83760:	00084194 	movui	zero,8454
   83764:	00084184 	movi	zero,8454
   83768:	00084238 	rdprs	zero,zero,8456
   8376c:	00084238 	rdprs	zero,zero,8456
   83770:	000841a0 	cmpeqi	zero,zero,8454
   83774:	00084238 	rdprs	zero,zero,8456
   83778:	000841b0 	cmpltui	zero,zero,8454
   8377c:	00084084 	movi	zero,8450
   83780:	000837c0 	call	837c <__alt_mem_main_memory-0x77c84>
   83784:	000840a4 	muli	zero,zero,8450
   83788:	00084238 	rdprs	zero,zero,8456
   8378c:	000840b0 	cmpltui	zero,zero,8450
   83790:	00084238 	rdprs	zero,zero,8456
   83794:	0008410c 	andi	zero,zero,8452
   83798:	00084238 	rdprs	zero,zero,8456
   8379c:	00084238 	rdprs	zero,zero,8456
   837a0:	0008411c 	xori	zero,zero,8452
   837a4:	d9003117 	ldw	r4,196(sp)
   837a8:	d8802d15 	stw	r2,180(sp)
   837ac:	0109c83a 	sub	r4,zero,r4
   837b0:	d9003115 	stw	r4,196(sp)
   837b4:	94800114 	ori	r18,r18,4
   837b8:	ac400007 	ldb	r17,0(r21)
   837bc:	003f9706 	br	8361c <rx_descriptor_end+0xfff835bc>
   837c0:	00800c04 	movi	r2,48
   837c4:	d9002d17 	ldw	r4,180(sp)
   837c8:	d9402917 	ldw	r5,164(sp)
   837cc:	d8802705 	stb	r2,156(sp)
   837d0:	00801e04 	movi	r2,120
   837d4:	d8802745 	stb	r2,157(sp)
   837d8:	d8002785 	stb	zero,158(sp)
   837dc:	20c00104 	addi	r3,r4,4
   837e0:	24c00017 	ldw	r19,0(r4)
   837e4:	002d883a 	mov	r22,zero
   837e8:	90800094 	ori	r2,r18,2
   837ec:	28029a16 	blt	r5,zero,84258 <___vfprintf_internal_r+0xdc0>
   837f0:	00bfdfc4 	movi	r2,-129
   837f4:	90a4703a 	and	r18,r18,r2
   837f8:	d8c02d15 	stw	r3,180(sp)
   837fc:	94800094 	ori	r18,r18,2
   83800:	9802871e 	bne	r19,zero,84220 <___vfprintf_internal_r+0xd88>
   83804:	00800274 	movhi	r2,9
   83808:	1088bd04 	addi	r2,r2,8948
   8380c:	d8803915 	stw	r2,228(sp)
   83810:	04401e04 	movi	r17,120
   83814:	d8802917 	ldw	r2,164(sp)
   83818:	0039883a 	mov	fp,zero
   8381c:	1001e926 	beq	r2,zero,83fc4 <___vfprintf_internal_r+0xb2c>
   83820:	0027883a 	mov	r19,zero
   83824:	002d883a 	mov	r22,zero
   83828:	00020506 	br	84040 <___vfprintf_internal_r+0xba8>
   8382c:	d9002c17 	ldw	r4,176(sp)
   83830:	b80b883a 	mov	r5,r23
   83834:	00857c80 	call	857c8 <__swsetup_r>
   83838:	1005ac1e 	bne	r2,zero,84eec <___vfprintf_internal_r+0x1a54>
   8383c:	b880030b 	ldhu	r2,12(r23)
   83840:	00c00284 	movi	r3,10
   83844:	1080068c 	andi	r2,r2,26
   83848:	10ff3c1e 	bne	r2,r3,8353c <rx_descriptor_end+0xfff834dc>
   8384c:	b880038f 	ldh	r2,14(r23)
   83850:	103f3a16 	blt	r2,zero,8353c <rx_descriptor_end+0xfff834dc>
   83854:	d9c02d17 	ldw	r7,180(sp)
   83858:	d9002c17 	ldw	r4,176(sp)
   8385c:	a80d883a 	mov	r6,r21
   83860:	b80b883a 	mov	r5,r23
   83864:	00856ac0 	call	856ac <__sbprintf>
   83868:	00001106 	br	838b0 <___vfprintf_internal_r+0x418>
   8386c:	d9002c17 	ldw	r4,176(sp)
   83870:	d9801e04 	addi	r6,sp,120
   83874:	b80b883a 	mov	r5,r23
   83878:	00896500 	call	89650 <__sprint_r>
   8387c:	1000081e 	bne	r2,zero,838a0 <___vfprintf_internal_r+0x408>
   83880:	da000404 	addi	r8,sp,16
   83884:	003f5306 	br	835d4 <rx_descriptor_end+0xfff83574>
   83888:	d8802017 	ldw	r2,128(sp)
   8388c:	10000426 	beq	r2,zero,838a0 <___vfprintf_internal_r+0x408>
   83890:	d9002c17 	ldw	r4,176(sp)
   83894:	d9801e04 	addi	r6,sp,120
   83898:	b80b883a 	mov	r5,r23
   8389c:	00896500 	call	89650 <__sprint_r>
   838a0:	b880030b 	ldhu	r2,12(r23)
   838a4:	1080100c 	andi	r2,r2,64
   838a8:	1005901e 	bne	r2,zero,84eec <___vfprintf_internal_r+0x1a54>
   838ac:	d8802f17 	ldw	r2,188(sp)
   838b0:	dfc04717 	ldw	ra,284(sp)
   838b4:	df004617 	ldw	fp,280(sp)
   838b8:	ddc04517 	ldw	r23,276(sp)
   838bc:	dd804417 	ldw	r22,272(sp)
   838c0:	dd404317 	ldw	r21,268(sp)
   838c4:	dd004217 	ldw	r20,264(sp)
   838c8:	dcc04117 	ldw	r19,260(sp)
   838cc:	dc804017 	ldw	r18,256(sp)
   838d0:	dc403f17 	ldw	r17,252(sp)
   838d4:	dc003e17 	ldw	r16,248(sp)
   838d8:	dec04804 	addi	sp,sp,288
   838dc:	f800283a 	ret
   838e0:	d9002c17 	ldw	r4,176(sp)
   838e4:	008204c0 	call	8204c <__sinit>
   838e8:	003f0406 	br	834fc <rx_descriptor_end+0xfff8349c>
   838ec:	d8802d17 	ldw	r2,180(sp)
   838f0:	d9002d17 	ldw	r4,180(sp)
   838f4:	10800017 	ldw	r2,0(r2)
   838f8:	d8803115 	stw	r2,196(sp)
   838fc:	20800104 	addi	r2,r4,4
   83900:	d9003117 	ldw	r4,196(sp)
   83904:	203fa716 	blt	r4,zero,837a4 <rx_descriptor_end+0xfff83744>
   83908:	d8802d15 	stw	r2,180(sp)
   8390c:	ac400007 	ldb	r17,0(r21)
   83910:	003f4206 	br	8361c <rx_descriptor_end+0xfff835bc>
   83914:	ac400007 	ldb	r17,0(r21)
   83918:	aac00044 	addi	r11,r21,1
   8391c:	8a872826 	beq	r17,r10,855c0 <___vfprintf_internal_r+0x2128>
   83920:	88bff404 	addi	r2,r17,-48
   83924:	0009883a 	mov	r4,zero
   83928:	30867d36 	bltu	r6,r2,85320 <___vfprintf_internal_r+0x1e88>
   8392c:	5c400007 	ldb	r17,0(r11)
   83930:	210002a4 	muli	r4,r4,10
   83934:	5d400044 	addi	r21,r11,1
   83938:	a817883a 	mov	r11,r21
   8393c:	2089883a 	add	r4,r4,r2
   83940:	88bff404 	addi	r2,r17,-48
   83944:	30bff92e 	bgeu	r6,r2,8392c <rx_descriptor_end+0xfff838cc>
   83948:	2005c916 	blt	r4,zero,85070 <___vfprintf_internal_r+0x1bd8>
   8394c:	d9002915 	stw	r4,164(sp)
   83950:	003f3306 	br	83620 <rx_descriptor_end+0xfff835c0>
   83954:	94802014 	ori	r18,r18,128
   83958:	ac400007 	ldb	r17,0(r21)
   8395c:	003f2f06 	br	8361c <rx_descriptor_end+0xfff835bc>
   83960:	a809883a 	mov	r4,r21
   83964:	d8003115 	stw	zero,196(sp)
   83968:	88bff404 	addi	r2,r17,-48
   8396c:	0017883a 	mov	r11,zero
   83970:	24400007 	ldb	r17,0(r4)
   83974:	5ac002a4 	muli	r11,r11,10
   83978:	ad400044 	addi	r21,r21,1
   8397c:	a809883a 	mov	r4,r21
   83980:	12d7883a 	add	r11,r2,r11
   83984:	88bff404 	addi	r2,r17,-48
   83988:	30bff92e 	bgeu	r6,r2,83970 <rx_descriptor_end+0xfff83910>
   8398c:	dac03115 	stw	r11,196(sp)
   83990:	003f2306 	br	83620 <rx_descriptor_end+0xfff835c0>
   83994:	18c03fcc 	andi	r3,r3,255
   83998:	18072b1e 	bne	r3,zero,85648 <___vfprintf_internal_r+0x21b0>
   8399c:	94800414 	ori	r18,r18,16
   839a0:	9080080c 	andi	r2,r18,32
   839a4:	10037b26 	beq	r2,zero,84794 <___vfprintf_internal_r+0x12fc>
   839a8:	d9402d17 	ldw	r5,180(sp)
   839ac:	28800117 	ldw	r2,4(r5)
   839b0:	2cc00017 	ldw	r19,0(r5)
   839b4:	29400204 	addi	r5,r5,8
   839b8:	d9402d15 	stw	r5,180(sp)
   839bc:	102d883a 	mov	r22,r2
   839c0:	10044b16 	blt	r2,zero,84af0 <___vfprintf_internal_r+0x1658>
   839c4:	d9402917 	ldw	r5,164(sp)
   839c8:	df002783 	ldbu	fp,158(sp)
   839cc:	2803bc16 	blt	r5,zero,848c0 <___vfprintf_internal_r+0x1428>
   839d0:	00ffdfc4 	movi	r3,-129
   839d4:	9d84b03a 	or	r2,r19,r22
   839d8:	90e4703a 	and	r18,r18,r3
   839dc:	10017726 	beq	r2,zero,83fbc <___vfprintf_internal_r+0xb24>
   839e0:	b0038326 	beq	r22,zero,847f0 <___vfprintf_internal_r+0x1358>
   839e4:	dc402a15 	stw	r17,168(sp)
   839e8:	dc001e04 	addi	r16,sp,120
   839ec:	b023883a 	mov	r17,r22
   839f0:	402d883a 	mov	r22,r8
   839f4:	9809883a 	mov	r4,r19
   839f8:	880b883a 	mov	r5,r17
   839fc:	01800284 	movi	r6,10
   83a00:	000f883a 	mov	r7,zero
   83a04:	008b7d00 	call	8b7d0 <__umoddi3>
   83a08:	10800c04 	addi	r2,r2,48
   83a0c:	843fffc4 	addi	r16,r16,-1
   83a10:	9809883a 	mov	r4,r19
   83a14:	880b883a 	mov	r5,r17
   83a18:	80800005 	stb	r2,0(r16)
   83a1c:	01800284 	movi	r6,10
   83a20:	000f883a 	mov	r7,zero
   83a24:	008b2580 	call	8b258 <__udivdi3>
   83a28:	1027883a 	mov	r19,r2
   83a2c:	10c4b03a 	or	r2,r2,r3
   83a30:	1823883a 	mov	r17,r3
   83a34:	103fef1e 	bne	r2,zero,839f4 <rx_descriptor_end+0xfff83994>
   83a38:	d8c02817 	ldw	r3,160(sp)
   83a3c:	dc402a17 	ldw	r17,168(sp)
   83a40:	b011883a 	mov	r8,r22
   83a44:	1c07c83a 	sub	r3,r3,r16
   83a48:	d8c02e15 	stw	r3,184(sp)
   83a4c:	00005906 	br	83bb4 <___vfprintf_internal_r+0x71c>
   83a50:	18c03fcc 	andi	r3,r3,255
   83a54:	1806fa1e 	bne	r3,zero,85640 <___vfprintf_internal_r+0x21a8>
   83a58:	9080020c 	andi	r2,r18,8
   83a5c:	10048a26 	beq	r2,zero,84c88 <___vfprintf_internal_r+0x17f0>
   83a60:	d8c02d17 	ldw	r3,180(sp)
   83a64:	d9002d17 	ldw	r4,180(sp)
   83a68:	d9402d17 	ldw	r5,180(sp)
   83a6c:	18c00017 	ldw	r3,0(r3)
   83a70:	21000117 	ldw	r4,4(r4)
   83a74:	29400204 	addi	r5,r5,8
   83a78:	d8c03615 	stw	r3,216(sp)
   83a7c:	d9003815 	stw	r4,224(sp)
   83a80:	d9402d15 	stw	r5,180(sp)
   83a84:	d9003617 	ldw	r4,216(sp)
   83a88:	d9403817 	ldw	r5,224(sp)
   83a8c:	da003d15 	stw	r8,244(sp)
   83a90:	04000044 	movi	r16,1
   83a94:	00894040 	call	89404 <__fpclassifyd>
   83a98:	da003d17 	ldw	r8,244(sp)
   83a9c:	14041f1e 	bne	r2,r16,84b1c <___vfprintf_internal_r+0x1684>
   83aa0:	d9003617 	ldw	r4,216(sp)
   83aa4:	d9403817 	ldw	r5,224(sp)
   83aa8:	000d883a 	mov	r6,zero
   83aac:	000f883a 	mov	r7,zero
   83ab0:	008d1b40 	call	8d1b4 <__ledf2>
   83ab4:	da003d17 	ldw	r8,244(sp)
   83ab8:	1005be16 	blt	r2,zero,851b4 <___vfprintf_internal_r+0x1d1c>
   83abc:	df002783 	ldbu	fp,158(sp)
   83ac0:	008011c4 	movi	r2,71
   83ac4:	1445330e 	bge	r2,r17,84f94 <___vfprintf_internal_r+0x1afc>
   83ac8:	04000274 	movhi	r16,9
   83acc:	8408b504 	addi	r16,r16,8916
   83ad0:	00c000c4 	movi	r3,3
   83ad4:	00bfdfc4 	movi	r2,-129
   83ad8:	d8c02a15 	stw	r3,168(sp)
   83adc:	90a4703a 	and	r18,r18,r2
   83ae0:	d8c02e15 	stw	r3,184(sp)
   83ae4:	d8002915 	stw	zero,164(sp)
   83ae8:	d8003215 	stw	zero,200(sp)
   83aec:	00003706 	br	83bcc <___vfprintf_internal_r+0x734>
   83af0:	94800214 	ori	r18,r18,8
   83af4:	ac400007 	ldb	r17,0(r21)
   83af8:	003ec806 	br	8361c <rx_descriptor_end+0xfff835bc>
   83afc:	18c03fcc 	andi	r3,r3,255
   83b00:	1806db1e 	bne	r3,zero,85670 <___vfprintf_internal_r+0x21d8>
   83b04:	94800414 	ori	r18,r18,16
   83b08:	9080080c 	andi	r2,r18,32
   83b0c:	1002d826 	beq	r2,zero,84670 <___vfprintf_internal_r+0x11d8>
   83b10:	d9402d17 	ldw	r5,180(sp)
   83b14:	d8c02917 	ldw	r3,164(sp)
   83b18:	d8002785 	stb	zero,158(sp)
   83b1c:	28800204 	addi	r2,r5,8
   83b20:	2cc00017 	ldw	r19,0(r5)
   83b24:	2d800117 	ldw	r22,4(r5)
   83b28:	18048f16 	blt	r3,zero,84d68 <___vfprintf_internal_r+0x18d0>
   83b2c:	013fdfc4 	movi	r4,-129
   83b30:	9d86b03a 	or	r3,r19,r22
   83b34:	d8802d15 	stw	r2,180(sp)
   83b38:	9124703a 	and	r18,r18,r4
   83b3c:	1802d91e 	bne	r3,zero,846a4 <___vfprintf_internal_r+0x120c>
   83b40:	d8c02917 	ldw	r3,164(sp)
   83b44:	0039883a 	mov	fp,zero
   83b48:	1805c326 	beq	r3,zero,85258 <___vfprintf_internal_r+0x1dc0>
   83b4c:	0027883a 	mov	r19,zero
   83b50:	002d883a 	mov	r22,zero
   83b54:	dc001e04 	addi	r16,sp,120
   83b58:	9806d0fa 	srli	r3,r19,3
   83b5c:	b008977a 	slli	r4,r22,29
   83b60:	b02cd0fa 	srli	r22,r22,3
   83b64:	9cc001cc 	andi	r19,r19,7
   83b68:	98800c04 	addi	r2,r19,48
   83b6c:	843fffc4 	addi	r16,r16,-1
   83b70:	20e6b03a 	or	r19,r4,r3
   83b74:	80800005 	stb	r2,0(r16)
   83b78:	9d86b03a 	or	r3,r19,r22
   83b7c:	183ff61e 	bne	r3,zero,83b58 <rx_descriptor_end+0xfff83af8>
   83b80:	90c0004c 	andi	r3,r18,1
   83b84:	18013b26 	beq	r3,zero,84074 <___vfprintf_internal_r+0xbdc>
   83b88:	10803fcc 	andi	r2,r2,255
   83b8c:	1080201c 	xori	r2,r2,128
   83b90:	10bfe004 	addi	r2,r2,-128
   83b94:	00c00c04 	movi	r3,48
   83b98:	10c13626 	beq	r2,r3,84074 <___vfprintf_internal_r+0xbdc>
   83b9c:	80ffffc5 	stb	r3,-1(r16)
   83ba0:	d8c02817 	ldw	r3,160(sp)
   83ba4:	80bfffc4 	addi	r2,r16,-1
   83ba8:	1021883a 	mov	r16,r2
   83bac:	1887c83a 	sub	r3,r3,r2
   83bb0:	d8c02e15 	stw	r3,184(sp)
   83bb4:	d8802e17 	ldw	r2,184(sp)
   83bb8:	d9002917 	ldw	r4,164(sp)
   83bbc:	1100010e 	bge	r2,r4,83bc4 <___vfprintf_internal_r+0x72c>
   83bc0:	2005883a 	mov	r2,r4
   83bc4:	d8802a15 	stw	r2,168(sp)
   83bc8:	d8003215 	stw	zero,200(sp)
   83bcc:	e7003fcc 	andi	fp,fp,255
   83bd0:	e700201c 	xori	fp,fp,128
   83bd4:	e73fe004 	addi	fp,fp,-128
   83bd8:	e0000326 	beq	fp,zero,83be8 <___vfprintf_internal_r+0x750>
   83bdc:	d8c02a17 	ldw	r3,168(sp)
   83be0:	18c00044 	addi	r3,r3,1
   83be4:	d8c02a15 	stw	r3,168(sp)
   83be8:	90c0008c 	andi	r3,r18,2
   83bec:	d8c02b15 	stw	r3,172(sp)
   83bf0:	18000326 	beq	r3,zero,83c00 <___vfprintf_internal_r+0x768>
   83bf4:	d8c02a17 	ldw	r3,168(sp)
   83bf8:	18c00084 	addi	r3,r3,2
   83bfc:	d8c02a15 	stw	r3,168(sp)
   83c00:	90c0210c 	andi	r3,r18,132
   83c04:	d8c03015 	stw	r3,192(sp)
   83c08:	1801a31e 	bne	r3,zero,84298 <___vfprintf_internal_r+0xe00>
   83c0c:	d9003117 	ldw	r4,196(sp)
   83c10:	d8c02a17 	ldw	r3,168(sp)
   83c14:	20e7c83a 	sub	r19,r4,r3
   83c18:	04c19f0e 	bge	zero,r19,84298 <___vfprintf_internal_r+0xe00>
   83c1c:	02400404 	movi	r9,16
   83c20:	d8c02017 	ldw	r3,128(sp)
   83c24:	d8801f17 	ldw	r2,124(sp)
   83c28:	4cc50d0e 	bge	r9,r19,85060 <___vfprintf_internal_r+0x1bc8>
   83c2c:	01400274 	movhi	r5,9
   83c30:	2948c884 	addi	r5,r5,8994
   83c34:	dc403b15 	stw	r17,236(sp)
   83c38:	d9403515 	stw	r5,212(sp)
   83c3c:	9823883a 	mov	r17,r19
   83c40:	482d883a 	mov	r22,r9
   83c44:	9027883a 	mov	r19,r18
   83c48:	070001c4 	movi	fp,7
   83c4c:	8025883a 	mov	r18,r16
   83c50:	dc002c17 	ldw	r16,176(sp)
   83c54:	00000306 	br	83c64 <___vfprintf_internal_r+0x7cc>
   83c58:	8c7ffc04 	addi	r17,r17,-16
   83c5c:	42000204 	addi	r8,r8,8
   83c60:	b440130e 	bge	r22,r17,83cb0 <___vfprintf_internal_r+0x818>
   83c64:	01000274 	movhi	r4,9
   83c68:	18c00404 	addi	r3,r3,16
   83c6c:	10800044 	addi	r2,r2,1
   83c70:	2108c884 	addi	r4,r4,8994
   83c74:	41000015 	stw	r4,0(r8)
   83c78:	45800115 	stw	r22,4(r8)
   83c7c:	d8c02015 	stw	r3,128(sp)
   83c80:	d8801f15 	stw	r2,124(sp)
   83c84:	e0bff40e 	bge	fp,r2,83c58 <rx_descriptor_end+0xfff83bf8>
   83c88:	d9801e04 	addi	r6,sp,120
   83c8c:	b80b883a 	mov	r5,r23
   83c90:	8009883a 	mov	r4,r16
   83c94:	00896500 	call	89650 <__sprint_r>
   83c98:	103f011e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   83c9c:	8c7ffc04 	addi	r17,r17,-16
   83ca0:	d8c02017 	ldw	r3,128(sp)
   83ca4:	d8801f17 	ldw	r2,124(sp)
   83ca8:	da000404 	addi	r8,sp,16
   83cac:	b47fed16 	blt	r22,r17,83c64 <rx_descriptor_end+0xfff83c04>
   83cb0:	9021883a 	mov	r16,r18
   83cb4:	9825883a 	mov	r18,r19
   83cb8:	8827883a 	mov	r19,r17
   83cbc:	dc403b17 	ldw	r17,236(sp)
   83cc0:	d9403517 	ldw	r5,212(sp)
   83cc4:	98c7883a 	add	r3,r19,r3
   83cc8:	10800044 	addi	r2,r2,1
   83ccc:	41400015 	stw	r5,0(r8)
   83cd0:	44c00115 	stw	r19,4(r8)
   83cd4:	d8c02015 	stw	r3,128(sp)
   83cd8:	d8801f15 	stw	r2,124(sp)
   83cdc:	010001c4 	movi	r4,7
   83ce0:	2082a316 	blt	r4,r2,84770 <___vfprintf_internal_r+0x12d8>
   83ce4:	df002787 	ldb	fp,158(sp)
   83ce8:	42000204 	addi	r8,r8,8
   83cec:	e0000c26 	beq	fp,zero,83d20 <___vfprintf_internal_r+0x888>
   83cf0:	d8801f17 	ldw	r2,124(sp)
   83cf4:	d9002784 	addi	r4,sp,158
   83cf8:	18c00044 	addi	r3,r3,1
   83cfc:	10800044 	addi	r2,r2,1
   83d00:	41000015 	stw	r4,0(r8)
   83d04:	01000044 	movi	r4,1
   83d08:	41000115 	stw	r4,4(r8)
   83d0c:	d8c02015 	stw	r3,128(sp)
   83d10:	d8801f15 	stw	r2,124(sp)
   83d14:	010001c4 	movi	r4,7
   83d18:	20823c16 	blt	r4,r2,8460c <___vfprintf_internal_r+0x1174>
   83d1c:	42000204 	addi	r8,r8,8
   83d20:	d8802b17 	ldw	r2,172(sp)
   83d24:	10000c26 	beq	r2,zero,83d58 <___vfprintf_internal_r+0x8c0>
   83d28:	d8801f17 	ldw	r2,124(sp)
   83d2c:	d9002704 	addi	r4,sp,156
   83d30:	18c00084 	addi	r3,r3,2
   83d34:	10800044 	addi	r2,r2,1
   83d38:	41000015 	stw	r4,0(r8)
   83d3c:	01000084 	movi	r4,2
   83d40:	41000115 	stw	r4,4(r8)
   83d44:	d8c02015 	stw	r3,128(sp)
   83d48:	d8801f15 	stw	r2,124(sp)
   83d4c:	010001c4 	movi	r4,7
   83d50:	20823616 	blt	r4,r2,8462c <___vfprintf_internal_r+0x1194>
   83d54:	42000204 	addi	r8,r8,8
   83d58:	d9003017 	ldw	r4,192(sp)
   83d5c:	00802004 	movi	r2,128
   83d60:	20819926 	beq	r4,r2,843c8 <___vfprintf_internal_r+0xf30>
   83d64:	d9402917 	ldw	r5,164(sp)
   83d68:	d8802e17 	ldw	r2,184(sp)
   83d6c:	28adc83a 	sub	r22,r5,r2
   83d70:	0580310e 	bge	zero,r22,83e38 <___vfprintf_internal_r+0x9a0>
   83d74:	07000404 	movi	fp,16
   83d78:	d8801f17 	ldw	r2,124(sp)
   83d7c:	e584140e 	bge	fp,r22,84dd0 <___vfprintf_internal_r+0x1938>
   83d80:	01400274 	movhi	r5,9
   83d84:	2948c484 	addi	r5,r5,8978
   83d88:	dc402915 	stw	r17,164(sp)
   83d8c:	d9402b15 	stw	r5,172(sp)
   83d90:	b023883a 	mov	r17,r22
   83d94:	04c001c4 	movi	r19,7
   83d98:	a82d883a 	mov	r22,r21
   83d9c:	902b883a 	mov	r21,r18
   83da0:	8025883a 	mov	r18,r16
   83da4:	dc002c17 	ldw	r16,176(sp)
   83da8:	00000306 	br	83db8 <___vfprintf_internal_r+0x920>
   83dac:	8c7ffc04 	addi	r17,r17,-16
   83db0:	42000204 	addi	r8,r8,8
   83db4:	e440110e 	bge	fp,r17,83dfc <___vfprintf_internal_r+0x964>
   83db8:	18c00404 	addi	r3,r3,16
   83dbc:	10800044 	addi	r2,r2,1
   83dc0:	45000015 	stw	r20,0(r8)
   83dc4:	47000115 	stw	fp,4(r8)
   83dc8:	d8c02015 	stw	r3,128(sp)
   83dcc:	d8801f15 	stw	r2,124(sp)
   83dd0:	98bff60e 	bge	r19,r2,83dac <rx_descriptor_end+0xfff83d4c>
   83dd4:	d9801e04 	addi	r6,sp,120
   83dd8:	b80b883a 	mov	r5,r23
   83ddc:	8009883a 	mov	r4,r16
   83de0:	00896500 	call	89650 <__sprint_r>
   83de4:	103eae1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   83de8:	8c7ffc04 	addi	r17,r17,-16
   83dec:	d8c02017 	ldw	r3,128(sp)
   83df0:	d8801f17 	ldw	r2,124(sp)
   83df4:	da000404 	addi	r8,sp,16
   83df8:	e47fef16 	blt	fp,r17,83db8 <rx_descriptor_end+0xfff83d58>
   83dfc:	9021883a 	mov	r16,r18
   83e00:	a825883a 	mov	r18,r21
   83e04:	b02b883a 	mov	r21,r22
   83e08:	882d883a 	mov	r22,r17
   83e0c:	dc402917 	ldw	r17,164(sp)
   83e10:	d9002b17 	ldw	r4,172(sp)
   83e14:	1d87883a 	add	r3,r3,r22
   83e18:	10800044 	addi	r2,r2,1
   83e1c:	41000015 	stw	r4,0(r8)
   83e20:	45800115 	stw	r22,4(r8)
   83e24:	d8c02015 	stw	r3,128(sp)
   83e28:	d8801f15 	stw	r2,124(sp)
   83e2c:	010001c4 	movi	r4,7
   83e30:	2081ee16 	blt	r4,r2,845ec <___vfprintf_internal_r+0x1154>
   83e34:	42000204 	addi	r8,r8,8
   83e38:	9080400c 	andi	r2,r18,256
   83e3c:	1001181e 	bne	r2,zero,842a0 <___vfprintf_internal_r+0xe08>
   83e40:	d9402e17 	ldw	r5,184(sp)
   83e44:	d8801f17 	ldw	r2,124(sp)
   83e48:	44000015 	stw	r16,0(r8)
   83e4c:	1947883a 	add	r3,r3,r5
   83e50:	10800044 	addi	r2,r2,1
   83e54:	41400115 	stw	r5,4(r8)
   83e58:	d8c02015 	stw	r3,128(sp)
   83e5c:	d8801f15 	stw	r2,124(sp)
   83e60:	010001c4 	movi	r4,7
   83e64:	2081d316 	blt	r4,r2,845b4 <___vfprintf_internal_r+0x111c>
   83e68:	42000204 	addi	r8,r8,8
   83e6c:	9480010c 	andi	r18,r18,4
   83e70:	90003226 	beq	r18,zero,83f3c <___vfprintf_internal_r+0xaa4>
   83e74:	d9403117 	ldw	r5,196(sp)
   83e78:	d8802a17 	ldw	r2,168(sp)
   83e7c:	28a1c83a 	sub	r16,r5,r2
   83e80:	04002e0e 	bge	zero,r16,83f3c <___vfprintf_internal_r+0xaa4>
   83e84:	04400404 	movi	r17,16
   83e88:	d8801f17 	ldw	r2,124(sp)
   83e8c:	8c04a20e 	bge	r17,r16,85118 <___vfprintf_internal_r+0x1c80>
   83e90:	01400274 	movhi	r5,9
   83e94:	2948c884 	addi	r5,r5,8994
   83e98:	d9403515 	stw	r5,212(sp)
   83e9c:	048001c4 	movi	r18,7
   83ea0:	dcc02c17 	ldw	r19,176(sp)
   83ea4:	00000306 	br	83eb4 <___vfprintf_internal_r+0xa1c>
   83ea8:	843ffc04 	addi	r16,r16,-16
   83eac:	42000204 	addi	r8,r8,8
   83eb0:	8c00130e 	bge	r17,r16,83f00 <___vfprintf_internal_r+0xa68>
   83eb4:	01000274 	movhi	r4,9
   83eb8:	18c00404 	addi	r3,r3,16
   83ebc:	10800044 	addi	r2,r2,1
   83ec0:	2108c884 	addi	r4,r4,8994
   83ec4:	41000015 	stw	r4,0(r8)
   83ec8:	44400115 	stw	r17,4(r8)
   83ecc:	d8c02015 	stw	r3,128(sp)
   83ed0:	d8801f15 	stw	r2,124(sp)
   83ed4:	90bff40e 	bge	r18,r2,83ea8 <rx_descriptor_end+0xfff83e48>
   83ed8:	d9801e04 	addi	r6,sp,120
   83edc:	b80b883a 	mov	r5,r23
   83ee0:	9809883a 	mov	r4,r19
   83ee4:	00896500 	call	89650 <__sprint_r>
   83ee8:	103e6d1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   83eec:	843ffc04 	addi	r16,r16,-16
   83ef0:	d8c02017 	ldw	r3,128(sp)
   83ef4:	d8801f17 	ldw	r2,124(sp)
   83ef8:	da000404 	addi	r8,sp,16
   83efc:	8c3fed16 	blt	r17,r16,83eb4 <rx_descriptor_end+0xfff83e54>
   83f00:	d9403517 	ldw	r5,212(sp)
   83f04:	1c07883a 	add	r3,r3,r16
   83f08:	10800044 	addi	r2,r2,1
   83f0c:	41400015 	stw	r5,0(r8)
   83f10:	44000115 	stw	r16,4(r8)
   83f14:	d8c02015 	stw	r3,128(sp)
   83f18:	d8801f15 	stw	r2,124(sp)
   83f1c:	010001c4 	movi	r4,7
   83f20:	2080060e 	bge	r4,r2,83f3c <___vfprintf_internal_r+0xaa4>
   83f24:	d9002c17 	ldw	r4,176(sp)
   83f28:	d9801e04 	addi	r6,sp,120
   83f2c:	b80b883a 	mov	r5,r23
   83f30:	00896500 	call	89650 <__sprint_r>
   83f34:	103e5a1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   83f38:	d8c02017 	ldw	r3,128(sp)
   83f3c:	d8803117 	ldw	r2,196(sp)
   83f40:	d9002a17 	ldw	r4,168(sp)
   83f44:	1100010e 	bge	r2,r4,83f4c <___vfprintf_internal_r+0xab4>
   83f48:	2005883a 	mov	r2,r4
   83f4c:	d9402f17 	ldw	r5,188(sp)
   83f50:	288b883a 	add	r5,r5,r2
   83f54:	d9402f15 	stw	r5,188(sp)
   83f58:	18019e1e 	bne	r3,zero,845d4 <___vfprintf_internal_r+0x113c>
   83f5c:	a8800007 	ldb	r2,0(r21)
   83f60:	d8001f15 	stw	zero,124(sp)
   83f64:	da000404 	addi	r8,sp,16
   83f68:	103d851e 	bne	r2,zero,83580 <rx_descriptor_end+0xfff83520>
   83f6c:	a821883a 	mov	r16,r21
   83f70:	003d9b06 	br	835e0 <rx_descriptor_end+0xfff83580>
   83f74:	18c03fcc 	andi	r3,r3,255
   83f78:	1805c11e 	bne	r3,zero,85680 <___vfprintf_internal_r+0x21e8>
   83f7c:	94800414 	ori	r18,r18,16
   83f80:	9080080c 	andi	r2,r18,32
   83f84:	10020c26 	beq	r2,zero,847b8 <___vfprintf_internal_r+0x1320>
   83f88:	d8802d17 	ldw	r2,180(sp)
   83f8c:	d9002917 	ldw	r4,164(sp)
   83f90:	d8002785 	stb	zero,158(sp)
   83f94:	10c00204 	addi	r3,r2,8
   83f98:	14c00017 	ldw	r19,0(r2)
   83f9c:	15800117 	ldw	r22,4(r2)
   83fa0:	20040f16 	blt	r4,zero,84fe0 <___vfprintf_internal_r+0x1b48>
   83fa4:	013fdfc4 	movi	r4,-129
   83fa8:	9d84b03a 	or	r2,r19,r22
   83fac:	d8c02d15 	stw	r3,180(sp)
   83fb0:	9124703a 	and	r18,r18,r4
   83fb4:	0039883a 	mov	fp,zero
   83fb8:	103e891e 	bne	r2,zero,839e0 <rx_descriptor_end+0xfff83980>
   83fbc:	d9002917 	ldw	r4,164(sp)
   83fc0:	2002c11e 	bne	r4,zero,84ac8 <___vfprintf_internal_r+0x1630>
   83fc4:	d8002915 	stw	zero,164(sp)
   83fc8:	d8002e15 	stw	zero,184(sp)
   83fcc:	dc001e04 	addi	r16,sp,120
   83fd0:	003ef806 	br	83bb4 <rx_descriptor_end+0xfff83b54>
   83fd4:	18c03fcc 	andi	r3,r3,255
   83fd8:	18059d1e 	bne	r3,zero,85650 <___vfprintf_internal_r+0x21b8>
   83fdc:	01400274 	movhi	r5,9
   83fe0:	2948b804 	addi	r5,r5,8928
   83fe4:	d9403915 	stw	r5,228(sp)
   83fe8:	9080080c 	andi	r2,r18,32
   83fec:	10005226 	beq	r2,zero,84138 <___vfprintf_internal_r+0xca0>
   83ff0:	d8802d17 	ldw	r2,180(sp)
   83ff4:	14c00017 	ldw	r19,0(r2)
   83ff8:	15800117 	ldw	r22,4(r2)
   83ffc:	10800204 	addi	r2,r2,8
   84000:	d8802d15 	stw	r2,180(sp)
   84004:	9080004c 	andi	r2,r18,1
   84008:	10019026 	beq	r2,zero,8464c <___vfprintf_internal_r+0x11b4>
   8400c:	9d84b03a 	or	r2,r19,r22
   84010:	10036926 	beq	r2,zero,84db8 <___vfprintf_internal_r+0x1920>
   84014:	d8c02917 	ldw	r3,164(sp)
   84018:	00800c04 	movi	r2,48
   8401c:	d8802705 	stb	r2,156(sp)
   84020:	dc402745 	stb	r17,157(sp)
   84024:	d8002785 	stb	zero,158(sp)
   84028:	90800094 	ori	r2,r18,2
   8402c:	18045d16 	blt	r3,zero,851a4 <___vfprintf_internal_r+0x1d0c>
   84030:	00bfdfc4 	movi	r2,-129
   84034:	90a4703a 	and	r18,r18,r2
   84038:	94800094 	ori	r18,r18,2
   8403c:	0039883a 	mov	fp,zero
   84040:	d9003917 	ldw	r4,228(sp)
   84044:	dc001e04 	addi	r16,sp,120
   84048:	988003cc 	andi	r2,r19,15
   8404c:	b006973a 	slli	r3,r22,28
   84050:	2085883a 	add	r2,r4,r2
   84054:	9826d13a 	srli	r19,r19,4
   84058:	10800003 	ldbu	r2,0(r2)
   8405c:	b02cd13a 	srli	r22,r22,4
   84060:	843fffc4 	addi	r16,r16,-1
   84064:	1ce6b03a 	or	r19,r3,r19
   84068:	80800005 	stb	r2,0(r16)
   8406c:	9d84b03a 	or	r2,r19,r22
   84070:	103ff51e 	bne	r2,zero,84048 <rx_descriptor_end+0xfff83fe8>
   84074:	d8c02817 	ldw	r3,160(sp)
   84078:	1c07c83a 	sub	r3,r3,r16
   8407c:	d8c02e15 	stw	r3,184(sp)
   84080:	003ecc06 	br	83bb4 <rx_descriptor_end+0xfff83b54>
   84084:	18c03fcc 	andi	r3,r3,255
   84088:	183e9f26 	beq	r3,zero,83b08 <rx_descriptor_end+0xfff83aa8>
   8408c:	d9c02785 	stb	r7,158(sp)
   84090:	003e9d06 	br	83b08 <rx_descriptor_end+0xfff83aa8>
   84094:	00c00044 	movi	r3,1
   84098:	01c00ac4 	movi	r7,43
   8409c:	ac400007 	ldb	r17,0(r21)
   840a0:	003d5e06 	br	8361c <rx_descriptor_end+0xfff835bc>
   840a4:	94800814 	ori	r18,r18,32
   840a8:	ac400007 	ldb	r17,0(r21)
   840ac:	003d5b06 	br	8361c <rx_descriptor_end+0xfff835bc>
   840b0:	d8c02d17 	ldw	r3,180(sp)
   840b4:	d8002785 	stb	zero,158(sp)
   840b8:	1c000017 	ldw	r16,0(r3)
   840bc:	1cc00104 	addi	r19,r3,4
   840c0:	80041926 	beq	r16,zero,85128 <___vfprintf_internal_r+0x1c90>
   840c4:	d9002917 	ldw	r4,164(sp)
   840c8:	2003d016 	blt	r4,zero,8500c <___vfprintf_internal_r+0x1b74>
   840cc:	200d883a 	mov	r6,r4
   840d0:	000b883a 	mov	r5,zero
   840d4:	8009883a 	mov	r4,r16
   840d8:	da003d15 	stw	r8,244(sp)
   840dc:	0087ab00 	call	87ab0 <memchr>
   840e0:	da003d17 	ldw	r8,244(sp)
   840e4:	10045426 	beq	r2,zero,85238 <___vfprintf_internal_r+0x1da0>
   840e8:	1405c83a 	sub	r2,r2,r16
   840ec:	d8802e15 	stw	r2,184(sp)
   840f0:	1003cc16 	blt	r2,zero,85024 <___vfprintf_internal_r+0x1b8c>
   840f4:	df002783 	ldbu	fp,158(sp)
   840f8:	d8802a15 	stw	r2,168(sp)
   840fc:	dcc02d15 	stw	r19,180(sp)
   84100:	d8002915 	stw	zero,164(sp)
   84104:	d8003215 	stw	zero,200(sp)
   84108:	003eb006 	br	83bcc <rx_descriptor_end+0xfff83b6c>
   8410c:	18c03fcc 	andi	r3,r3,255
   84110:	183f9b26 	beq	r3,zero,83f80 <rx_descriptor_end+0xfff83f20>
   84114:	d9c02785 	stb	r7,158(sp)
   84118:	003f9906 	br	83f80 <rx_descriptor_end+0xfff83f20>
   8411c:	18c03fcc 	andi	r3,r3,255
   84120:	1805551e 	bne	r3,zero,85678 <___vfprintf_internal_r+0x21e0>
   84124:	01400274 	movhi	r5,9
   84128:	2948bd04 	addi	r5,r5,8948
   8412c:	d9403915 	stw	r5,228(sp)
   84130:	9080080c 	andi	r2,r18,32
   84134:	103fae1e 	bne	r2,zero,83ff0 <rx_descriptor_end+0xfff83f90>
   84138:	9080040c 	andi	r2,r18,16
   8413c:	1002de26 	beq	r2,zero,84cb8 <___vfprintf_internal_r+0x1820>
   84140:	d8c02d17 	ldw	r3,180(sp)
   84144:	002d883a 	mov	r22,zero
   84148:	1cc00017 	ldw	r19,0(r3)
   8414c:	18c00104 	addi	r3,r3,4
   84150:	d8c02d15 	stw	r3,180(sp)
   84154:	003fab06 	br	84004 <rx_descriptor_end+0xfff83fa4>
   84158:	38803fcc 	andi	r2,r7,255
   8415c:	1080201c 	xori	r2,r2,128
   84160:	10bfe004 	addi	r2,r2,-128
   84164:	1002d21e 	bne	r2,zero,84cb0 <___vfprintf_internal_r+0x1818>
   84168:	00c00044 	movi	r3,1
   8416c:	01c00804 	movi	r7,32
   84170:	ac400007 	ldb	r17,0(r21)
   84174:	003d2906 	br	8361c <rx_descriptor_end+0xfff835bc>
   84178:	94800054 	ori	r18,r18,1
   8417c:	ac400007 	ldb	r17,0(r21)
   84180:	003d2606 	br	8361c <rx_descriptor_end+0xfff835bc>
   84184:	18c03fcc 	andi	r3,r3,255
   84188:	183e0526 	beq	r3,zero,839a0 <rx_descriptor_end+0xfff83940>
   8418c:	d9c02785 	stb	r7,158(sp)
   84190:	003e0306 	br	839a0 <rx_descriptor_end+0xfff83940>
   84194:	94801014 	ori	r18,r18,64
   84198:	ac400007 	ldb	r17,0(r21)
   8419c:	003d1f06 	br	8361c <rx_descriptor_end+0xfff835bc>
   841a0:	ac400007 	ldb	r17,0(r21)
   841a4:	8a438726 	beq	r17,r9,84fc4 <___vfprintf_internal_r+0x1b2c>
   841a8:	94800414 	ori	r18,r18,16
   841ac:	003d1b06 	br	8361c <rx_descriptor_end+0xfff835bc>
   841b0:	18c03fcc 	andi	r3,r3,255
   841b4:	1805341e 	bne	r3,zero,85688 <___vfprintf_internal_r+0x21f0>
   841b8:	9080080c 	andi	r2,r18,32
   841bc:	1002cd26 	beq	r2,zero,84cf4 <___vfprintf_internal_r+0x185c>
   841c0:	d9402d17 	ldw	r5,180(sp)
   841c4:	d9002f17 	ldw	r4,188(sp)
   841c8:	28800017 	ldw	r2,0(r5)
   841cc:	2007d7fa 	srai	r3,r4,31
   841d0:	29400104 	addi	r5,r5,4
   841d4:	d9402d15 	stw	r5,180(sp)
   841d8:	11000015 	stw	r4,0(r2)
   841dc:	10c00115 	stw	r3,4(r2)
   841e0:	003ce506 	br	83578 <rx_descriptor_end+0xfff83518>
   841e4:	d8c02d17 	ldw	r3,180(sp)
   841e8:	d9002d17 	ldw	r4,180(sp)
   841ec:	d8002785 	stb	zero,158(sp)
   841f0:	18800017 	ldw	r2,0(r3)
   841f4:	21000104 	addi	r4,r4,4
   841f8:	00c00044 	movi	r3,1
   841fc:	d8c02a15 	stw	r3,168(sp)
   84200:	d8801405 	stb	r2,80(sp)
   84204:	d9002d15 	stw	r4,180(sp)
   84208:	d8c02e15 	stw	r3,184(sp)
   8420c:	d8002915 	stw	zero,164(sp)
   84210:	d8003215 	stw	zero,200(sp)
   84214:	dc001404 	addi	r16,sp,80
   84218:	0039883a 	mov	fp,zero
   8421c:	003e7206 	br	83be8 <rx_descriptor_end+0xfff83b88>
   84220:	01000274 	movhi	r4,9
   84224:	2108bd04 	addi	r4,r4,8948
   84228:	0039883a 	mov	fp,zero
   8422c:	d9003915 	stw	r4,228(sp)
   84230:	04401e04 	movi	r17,120
   84234:	003f8206 	br	84040 <rx_descriptor_end+0xfff83fe0>
   84238:	18c03fcc 	andi	r3,r3,255
   8423c:	1805061e 	bne	r3,zero,85658 <___vfprintf_internal_r+0x21c0>
   84240:	883d9126 	beq	r17,zero,83888 <rx_descriptor_end+0xfff83828>
   84244:	00c00044 	movi	r3,1
   84248:	d8c02a15 	stw	r3,168(sp)
   8424c:	dc401405 	stb	r17,80(sp)
   84250:	d8002785 	stb	zero,158(sp)
   84254:	003fec06 	br	84208 <rx_descriptor_end+0xfff841a8>
   84258:	01400274 	movhi	r5,9
   8425c:	2948bd04 	addi	r5,r5,8948
   84260:	d9403915 	stw	r5,228(sp)
   84264:	d8c02d15 	stw	r3,180(sp)
   84268:	1025883a 	mov	r18,r2
   8426c:	04401e04 	movi	r17,120
   84270:	9d84b03a 	or	r2,r19,r22
   84274:	1000fc1e 	bne	r2,zero,84668 <___vfprintf_internal_r+0x11d0>
   84278:	0039883a 	mov	fp,zero
   8427c:	00800084 	movi	r2,2
   84280:	10803fcc 	andi	r2,r2,255
   84284:	00c00044 	movi	r3,1
   84288:	10c20f26 	beq	r2,r3,84ac8 <___vfprintf_internal_r+0x1630>
   8428c:	00c00084 	movi	r3,2
   84290:	10fd6326 	beq	r2,r3,83820 <rx_descriptor_end+0xfff837c0>
   84294:	003e2d06 	br	83b4c <rx_descriptor_end+0xfff83aec>
   84298:	d8c02017 	ldw	r3,128(sp)
   8429c:	003e9306 	br	83cec <rx_descriptor_end+0xfff83c8c>
   842a0:	00801944 	movi	r2,101
   842a4:	14407e0e 	bge	r2,r17,844a0 <___vfprintf_internal_r+0x1008>
   842a8:	d9003617 	ldw	r4,216(sp)
   842ac:	d9403817 	ldw	r5,224(sp)
   842b0:	000d883a 	mov	r6,zero
   842b4:	000f883a 	mov	r7,zero
   842b8:	d8c03c15 	stw	r3,240(sp)
   842bc:	da003d15 	stw	r8,244(sp)
   842c0:	008d0500 	call	8d050 <__eqdf2>
   842c4:	d8c03c17 	ldw	r3,240(sp)
   842c8:	da003d17 	ldw	r8,244(sp)
   842cc:	1000f71e 	bne	r2,zero,846ac <___vfprintf_internal_r+0x1214>
   842d0:	d8801f17 	ldw	r2,124(sp)
   842d4:	01000274 	movhi	r4,9
   842d8:	2108c404 	addi	r4,r4,8976
   842dc:	18c00044 	addi	r3,r3,1
   842e0:	10800044 	addi	r2,r2,1
   842e4:	41000015 	stw	r4,0(r8)
   842e8:	01000044 	movi	r4,1
   842ec:	41000115 	stw	r4,4(r8)
   842f0:	d8c02015 	stw	r3,128(sp)
   842f4:	d8801f15 	stw	r2,124(sp)
   842f8:	010001c4 	movi	r4,7
   842fc:	2082b816 	blt	r4,r2,84de0 <___vfprintf_internal_r+0x1948>
   84300:	42000204 	addi	r8,r8,8
   84304:	d8802617 	ldw	r2,152(sp)
   84308:	d9403317 	ldw	r5,204(sp)
   8430c:	11400216 	blt	r2,r5,84318 <___vfprintf_internal_r+0xe80>
   84310:	9080004c 	andi	r2,r18,1
   84314:	103ed526 	beq	r2,zero,83e6c <rx_descriptor_end+0xfff83e0c>
   84318:	d8803717 	ldw	r2,220(sp)
   8431c:	d9003417 	ldw	r4,208(sp)
   84320:	d9403717 	ldw	r5,220(sp)
   84324:	1887883a 	add	r3,r3,r2
   84328:	d8801f17 	ldw	r2,124(sp)
   8432c:	41000015 	stw	r4,0(r8)
   84330:	41400115 	stw	r5,4(r8)
   84334:	10800044 	addi	r2,r2,1
   84338:	d8c02015 	stw	r3,128(sp)
   8433c:	d8801f15 	stw	r2,124(sp)
   84340:	010001c4 	movi	r4,7
   84344:	20832916 	blt	r4,r2,84fec <___vfprintf_internal_r+0x1b54>
   84348:	42000204 	addi	r8,r8,8
   8434c:	d8803317 	ldw	r2,204(sp)
   84350:	143fffc4 	addi	r16,r2,-1
   84354:	043ec50e 	bge	zero,r16,83e6c <rx_descriptor_end+0xfff83e0c>
   84358:	04400404 	movi	r17,16
   8435c:	d8801f17 	ldw	r2,124(sp)
   84360:	8c00880e 	bge	r17,r16,84584 <___vfprintf_internal_r+0x10ec>
   84364:	01400274 	movhi	r5,9
   84368:	2948c484 	addi	r5,r5,8978
   8436c:	d9402b15 	stw	r5,172(sp)
   84370:	058001c4 	movi	r22,7
   84374:	dcc02c17 	ldw	r19,176(sp)
   84378:	00000306 	br	84388 <___vfprintf_internal_r+0xef0>
   8437c:	42000204 	addi	r8,r8,8
   84380:	843ffc04 	addi	r16,r16,-16
   84384:	8c00820e 	bge	r17,r16,84590 <___vfprintf_internal_r+0x10f8>
   84388:	18c00404 	addi	r3,r3,16
   8438c:	10800044 	addi	r2,r2,1
   84390:	45000015 	stw	r20,0(r8)
   84394:	44400115 	stw	r17,4(r8)
   84398:	d8c02015 	stw	r3,128(sp)
   8439c:	d8801f15 	stw	r2,124(sp)
   843a0:	b0bff60e 	bge	r22,r2,8437c <rx_descriptor_end+0xfff8431c>
   843a4:	d9801e04 	addi	r6,sp,120
   843a8:	b80b883a 	mov	r5,r23
   843ac:	9809883a 	mov	r4,r19
   843b0:	00896500 	call	89650 <__sprint_r>
   843b4:	103d3a1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   843b8:	d8c02017 	ldw	r3,128(sp)
   843bc:	d8801f17 	ldw	r2,124(sp)
   843c0:	da000404 	addi	r8,sp,16
   843c4:	003fee06 	br	84380 <rx_descriptor_end+0xfff84320>
   843c8:	d9403117 	ldw	r5,196(sp)
   843cc:	d8802a17 	ldw	r2,168(sp)
   843d0:	28adc83a 	sub	r22,r5,r2
   843d4:	05be630e 	bge	zero,r22,83d64 <rx_descriptor_end+0xfff83d04>
   843d8:	07000404 	movi	fp,16
   843dc:	d8801f17 	ldw	r2,124(sp)
   843e0:	e5838f0e 	bge	fp,r22,85220 <___vfprintf_internal_r+0x1d88>
   843e4:	01400274 	movhi	r5,9
   843e8:	2948c484 	addi	r5,r5,8978
   843ec:	dc403015 	stw	r17,192(sp)
   843f0:	d9402b15 	stw	r5,172(sp)
   843f4:	b023883a 	mov	r17,r22
   843f8:	04c001c4 	movi	r19,7
   843fc:	a82d883a 	mov	r22,r21
   84400:	902b883a 	mov	r21,r18
   84404:	8025883a 	mov	r18,r16
   84408:	dc002c17 	ldw	r16,176(sp)
   8440c:	00000306 	br	8441c <___vfprintf_internal_r+0xf84>
   84410:	8c7ffc04 	addi	r17,r17,-16
   84414:	42000204 	addi	r8,r8,8
   84418:	e440110e 	bge	fp,r17,84460 <___vfprintf_internal_r+0xfc8>
   8441c:	18c00404 	addi	r3,r3,16
   84420:	10800044 	addi	r2,r2,1
   84424:	45000015 	stw	r20,0(r8)
   84428:	47000115 	stw	fp,4(r8)
   8442c:	d8c02015 	stw	r3,128(sp)
   84430:	d8801f15 	stw	r2,124(sp)
   84434:	98bff60e 	bge	r19,r2,84410 <rx_descriptor_end+0xfff843b0>
   84438:	d9801e04 	addi	r6,sp,120
   8443c:	b80b883a 	mov	r5,r23
   84440:	8009883a 	mov	r4,r16
   84444:	00896500 	call	89650 <__sprint_r>
   84448:	103d151e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   8444c:	8c7ffc04 	addi	r17,r17,-16
   84450:	d8c02017 	ldw	r3,128(sp)
   84454:	d8801f17 	ldw	r2,124(sp)
   84458:	da000404 	addi	r8,sp,16
   8445c:	e47fef16 	blt	fp,r17,8441c <rx_descriptor_end+0xfff843bc>
   84460:	9021883a 	mov	r16,r18
   84464:	a825883a 	mov	r18,r21
   84468:	b02b883a 	mov	r21,r22
   8446c:	882d883a 	mov	r22,r17
   84470:	dc403017 	ldw	r17,192(sp)
   84474:	d9002b17 	ldw	r4,172(sp)
   84478:	1d87883a 	add	r3,r3,r22
   8447c:	10800044 	addi	r2,r2,1
   84480:	41000015 	stw	r4,0(r8)
   84484:	45800115 	stw	r22,4(r8)
   84488:	d8c02015 	stw	r3,128(sp)
   8448c:	d8801f15 	stw	r2,124(sp)
   84490:	010001c4 	movi	r4,7
   84494:	20818e16 	blt	r4,r2,84ad0 <___vfprintf_internal_r+0x1638>
   84498:	42000204 	addi	r8,r8,8
   8449c:	003e3106 	br	83d64 <rx_descriptor_end+0xfff83d04>
   844a0:	d9403317 	ldw	r5,204(sp)
   844a4:	00800044 	movi	r2,1
   844a8:	18c00044 	addi	r3,r3,1
   844ac:	1141530e 	bge	r2,r5,849fc <___vfprintf_internal_r+0x1564>
   844b0:	dc401f17 	ldw	r17,124(sp)
   844b4:	00800044 	movi	r2,1
   844b8:	40800115 	stw	r2,4(r8)
   844bc:	8c400044 	addi	r17,r17,1
   844c0:	44000015 	stw	r16,0(r8)
   844c4:	d8c02015 	stw	r3,128(sp)
   844c8:	dc401f15 	stw	r17,124(sp)
   844cc:	008001c4 	movi	r2,7
   844d0:	14416b16 	blt	r2,r17,84a80 <___vfprintf_internal_r+0x15e8>
   844d4:	42000204 	addi	r8,r8,8
   844d8:	d8803717 	ldw	r2,220(sp)
   844dc:	d9003417 	ldw	r4,208(sp)
   844e0:	8c400044 	addi	r17,r17,1
   844e4:	10c7883a 	add	r3,r2,r3
   844e8:	40800115 	stw	r2,4(r8)
   844ec:	41000015 	stw	r4,0(r8)
   844f0:	d8c02015 	stw	r3,128(sp)
   844f4:	dc401f15 	stw	r17,124(sp)
   844f8:	008001c4 	movi	r2,7
   844fc:	14416916 	blt	r2,r17,84aa4 <___vfprintf_internal_r+0x160c>
   84500:	45800204 	addi	r22,r8,8
   84504:	d9003617 	ldw	r4,216(sp)
   84508:	d9403817 	ldw	r5,224(sp)
   8450c:	000d883a 	mov	r6,zero
   84510:	000f883a 	mov	r7,zero
   84514:	d8c03c15 	stw	r3,240(sp)
   84518:	008d0500 	call	8d050 <__eqdf2>
   8451c:	d8c03c17 	ldw	r3,240(sp)
   84520:	1000bc26 	beq	r2,zero,84814 <___vfprintf_internal_r+0x137c>
   84524:	d9403317 	ldw	r5,204(sp)
   84528:	84000044 	addi	r16,r16,1
   8452c:	8c400044 	addi	r17,r17,1
   84530:	28bfffc4 	addi	r2,r5,-1
   84534:	1887883a 	add	r3,r3,r2
   84538:	b0800115 	stw	r2,4(r22)
   8453c:	b4000015 	stw	r16,0(r22)
   84540:	d8c02015 	stw	r3,128(sp)
   84544:	dc401f15 	stw	r17,124(sp)
   84548:	008001c4 	movi	r2,7
   8454c:	14414316 	blt	r2,r17,84a5c <___vfprintf_internal_r+0x15c4>
   84550:	b5800204 	addi	r22,r22,8
   84554:	d9003a17 	ldw	r4,232(sp)
   84558:	df0022c4 	addi	fp,sp,139
   8455c:	8c400044 	addi	r17,r17,1
   84560:	20c7883a 	add	r3,r4,r3
   84564:	b7000015 	stw	fp,0(r22)
   84568:	b1000115 	stw	r4,4(r22)
   8456c:	d8c02015 	stw	r3,128(sp)
   84570:	dc401f15 	stw	r17,124(sp)
   84574:	008001c4 	movi	r2,7
   84578:	14400e16 	blt	r2,r17,845b4 <___vfprintf_internal_r+0x111c>
   8457c:	b2000204 	addi	r8,r22,8
   84580:	003e3a06 	br	83e6c <rx_descriptor_end+0xfff83e0c>
   84584:	01000274 	movhi	r4,9
   84588:	2108c484 	addi	r4,r4,8978
   8458c:	d9002b15 	stw	r4,172(sp)
   84590:	d9002b17 	ldw	r4,172(sp)
   84594:	1c07883a 	add	r3,r3,r16
   84598:	44000115 	stw	r16,4(r8)
   8459c:	41000015 	stw	r4,0(r8)
   845a0:	10800044 	addi	r2,r2,1
   845a4:	d8c02015 	stw	r3,128(sp)
   845a8:	d8801f15 	stw	r2,124(sp)
   845ac:	010001c4 	movi	r4,7
   845b0:	20be2d0e 	bge	r4,r2,83e68 <rx_descriptor_end+0xfff83e08>
   845b4:	d9002c17 	ldw	r4,176(sp)
   845b8:	d9801e04 	addi	r6,sp,120
   845bc:	b80b883a 	mov	r5,r23
   845c0:	00896500 	call	89650 <__sprint_r>
   845c4:	103cb61e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   845c8:	d8c02017 	ldw	r3,128(sp)
   845cc:	da000404 	addi	r8,sp,16
   845d0:	003e2606 	br	83e6c <rx_descriptor_end+0xfff83e0c>
   845d4:	d9002c17 	ldw	r4,176(sp)
   845d8:	d9801e04 	addi	r6,sp,120
   845dc:	b80b883a 	mov	r5,r23
   845e0:	00896500 	call	89650 <__sprint_r>
   845e4:	103e5d26 	beq	r2,zero,83f5c <rx_descriptor_end+0xfff83efc>
   845e8:	003cad06 	br	838a0 <rx_descriptor_end+0xfff83840>
   845ec:	d9002c17 	ldw	r4,176(sp)
   845f0:	d9801e04 	addi	r6,sp,120
   845f4:	b80b883a 	mov	r5,r23
   845f8:	00896500 	call	89650 <__sprint_r>
   845fc:	103ca81e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84600:	d8c02017 	ldw	r3,128(sp)
   84604:	da000404 	addi	r8,sp,16
   84608:	003e0b06 	br	83e38 <rx_descriptor_end+0xfff83dd8>
   8460c:	d9002c17 	ldw	r4,176(sp)
   84610:	d9801e04 	addi	r6,sp,120
   84614:	b80b883a 	mov	r5,r23
   84618:	00896500 	call	89650 <__sprint_r>
   8461c:	103ca01e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84620:	d8c02017 	ldw	r3,128(sp)
   84624:	da000404 	addi	r8,sp,16
   84628:	003dbd06 	br	83d20 <rx_descriptor_end+0xfff83cc0>
   8462c:	d9002c17 	ldw	r4,176(sp)
   84630:	d9801e04 	addi	r6,sp,120
   84634:	b80b883a 	mov	r5,r23
   84638:	00896500 	call	89650 <__sprint_r>
   8463c:	103c981e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84640:	d8c02017 	ldw	r3,128(sp)
   84644:	da000404 	addi	r8,sp,16
   84648:	003dc306 	br	83d58 <rx_descriptor_end+0xfff83cf8>
   8464c:	d8802917 	ldw	r2,164(sp)
   84650:	d8002785 	stb	zero,158(sp)
   84654:	103f0616 	blt	r2,zero,84270 <rx_descriptor_end+0xfff84210>
   84658:	00ffdfc4 	movi	r3,-129
   8465c:	9d84b03a 	or	r2,r19,r22
   84660:	90e4703a 	and	r18,r18,r3
   84664:	103c6b26 	beq	r2,zero,83814 <rx_descriptor_end+0xfff837b4>
   84668:	0039883a 	mov	fp,zero
   8466c:	003e7406 	br	84040 <rx_descriptor_end+0xfff83fe0>
   84670:	9080040c 	andi	r2,r18,16
   84674:	1001b326 	beq	r2,zero,84d44 <___vfprintf_internal_r+0x18ac>
   84678:	d9002d17 	ldw	r4,180(sp)
   8467c:	d9402917 	ldw	r5,164(sp)
   84680:	d8002785 	stb	zero,158(sp)
   84684:	20800104 	addi	r2,r4,4
   84688:	24c00017 	ldw	r19,0(r4)
   8468c:	002d883a 	mov	r22,zero
   84690:	2801b516 	blt	r5,zero,84d68 <___vfprintf_internal_r+0x18d0>
   84694:	00ffdfc4 	movi	r3,-129
   84698:	d8802d15 	stw	r2,180(sp)
   8469c:	90e4703a 	and	r18,r18,r3
   846a0:	983d2726 	beq	r19,zero,83b40 <rx_descriptor_end+0xfff83ae0>
   846a4:	0039883a 	mov	fp,zero
   846a8:	003d2a06 	br	83b54 <rx_descriptor_end+0xfff83af4>
   846ac:	dc402617 	ldw	r17,152(sp)
   846b0:	0441d30e 	bge	zero,r17,84e00 <___vfprintf_internal_r+0x1968>
   846b4:	dc403217 	ldw	r17,200(sp)
   846b8:	d8803317 	ldw	r2,204(sp)
   846bc:	1440010e 	bge	r2,r17,846c4 <___vfprintf_internal_r+0x122c>
   846c0:	1023883a 	mov	r17,r2
   846c4:	04400a0e 	bge	zero,r17,846f0 <___vfprintf_internal_r+0x1258>
   846c8:	d8801f17 	ldw	r2,124(sp)
   846cc:	1c47883a 	add	r3,r3,r17
   846d0:	44000015 	stw	r16,0(r8)
   846d4:	10800044 	addi	r2,r2,1
   846d8:	44400115 	stw	r17,4(r8)
   846dc:	d8c02015 	stw	r3,128(sp)
   846e0:	d8801f15 	stw	r2,124(sp)
   846e4:	010001c4 	movi	r4,7
   846e8:	20826516 	blt	r4,r2,85080 <___vfprintf_internal_r+0x1be8>
   846ec:	42000204 	addi	r8,r8,8
   846f0:	88026116 	blt	r17,zero,85078 <___vfprintf_internal_r+0x1be0>
   846f4:	d9003217 	ldw	r4,200(sp)
   846f8:	2463c83a 	sub	r17,r4,r17
   846fc:	04407b0e 	bge	zero,r17,848ec <___vfprintf_internal_r+0x1454>
   84700:	05800404 	movi	r22,16
   84704:	d8801f17 	ldw	r2,124(sp)
   84708:	b4419d0e 	bge	r22,r17,84d80 <___vfprintf_internal_r+0x18e8>
   8470c:	01000274 	movhi	r4,9
   84710:	2108c484 	addi	r4,r4,8978
   84714:	d9002b15 	stw	r4,172(sp)
   84718:	070001c4 	movi	fp,7
   8471c:	dcc02c17 	ldw	r19,176(sp)
   84720:	00000306 	br	84730 <___vfprintf_internal_r+0x1298>
   84724:	42000204 	addi	r8,r8,8
   84728:	8c7ffc04 	addi	r17,r17,-16
   8472c:	b441970e 	bge	r22,r17,84d8c <___vfprintf_internal_r+0x18f4>
   84730:	18c00404 	addi	r3,r3,16
   84734:	10800044 	addi	r2,r2,1
   84738:	45000015 	stw	r20,0(r8)
   8473c:	45800115 	stw	r22,4(r8)
   84740:	d8c02015 	stw	r3,128(sp)
   84744:	d8801f15 	stw	r2,124(sp)
   84748:	e0bff60e 	bge	fp,r2,84724 <rx_descriptor_end+0xfff846c4>
   8474c:	d9801e04 	addi	r6,sp,120
   84750:	b80b883a 	mov	r5,r23
   84754:	9809883a 	mov	r4,r19
   84758:	00896500 	call	89650 <__sprint_r>
   8475c:	103c501e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84760:	d8c02017 	ldw	r3,128(sp)
   84764:	d8801f17 	ldw	r2,124(sp)
   84768:	da000404 	addi	r8,sp,16
   8476c:	003fee06 	br	84728 <rx_descriptor_end+0xfff846c8>
   84770:	d9002c17 	ldw	r4,176(sp)
   84774:	d9801e04 	addi	r6,sp,120
   84778:	b80b883a 	mov	r5,r23
   8477c:	00896500 	call	89650 <__sprint_r>
   84780:	103c471e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84784:	d8c02017 	ldw	r3,128(sp)
   84788:	df002787 	ldb	fp,158(sp)
   8478c:	da000404 	addi	r8,sp,16
   84790:	003d5606 	br	83cec <rx_descriptor_end+0xfff83c8c>
   84794:	9080040c 	andi	r2,r18,16
   84798:	10016126 	beq	r2,zero,84d20 <___vfprintf_internal_r+0x1888>
   8479c:	d8802d17 	ldw	r2,180(sp)
   847a0:	14c00017 	ldw	r19,0(r2)
   847a4:	10800104 	addi	r2,r2,4
   847a8:	d8802d15 	stw	r2,180(sp)
   847ac:	982dd7fa 	srai	r22,r19,31
   847b0:	b005883a 	mov	r2,r22
   847b4:	003c8206 	br	839c0 <rx_descriptor_end+0xfff83960>
   847b8:	9080040c 	andi	r2,r18,16
   847bc:	10003526 	beq	r2,zero,84894 <___vfprintf_internal_r+0x13fc>
   847c0:	d9402d17 	ldw	r5,180(sp)
   847c4:	d8c02917 	ldw	r3,164(sp)
   847c8:	d8002785 	stb	zero,158(sp)
   847cc:	28800104 	addi	r2,r5,4
   847d0:	2cc00017 	ldw	r19,0(r5)
   847d4:	002d883a 	mov	r22,zero
   847d8:	18003716 	blt	r3,zero,848b8 <___vfprintf_internal_r+0x1420>
   847dc:	00ffdfc4 	movi	r3,-129
   847e0:	d8802d15 	stw	r2,180(sp)
   847e4:	90e4703a 	and	r18,r18,r3
   847e8:	0039883a 	mov	fp,zero
   847ec:	983df326 	beq	r19,zero,83fbc <rx_descriptor_end+0xfff83f5c>
   847f0:	00800244 	movi	r2,9
   847f4:	14fc7b36 	bltu	r2,r19,839e4 <rx_descriptor_end+0xfff83984>
   847f8:	d8c02817 	ldw	r3,160(sp)
   847fc:	dc001dc4 	addi	r16,sp,119
   84800:	9cc00c04 	addi	r19,r19,48
   84804:	1c07c83a 	sub	r3,r3,r16
   84808:	dcc01dc5 	stb	r19,119(sp)
   8480c:	d8c02e15 	stw	r3,184(sp)
   84810:	003ce806 	br	83bb4 <rx_descriptor_end+0xfff83b54>
   84814:	d8803317 	ldw	r2,204(sp)
   84818:	143fffc4 	addi	r16,r2,-1
   8481c:	043f4d0e 	bge	zero,r16,84554 <rx_descriptor_end+0xfff844f4>
   84820:	07000404 	movi	fp,16
   84824:	e400810e 	bge	fp,r16,84a2c <___vfprintf_internal_r+0x1594>
   84828:	01400274 	movhi	r5,9
   8482c:	2948c484 	addi	r5,r5,8978
   84830:	d9402b15 	stw	r5,172(sp)
   84834:	01c001c4 	movi	r7,7
   84838:	dcc02c17 	ldw	r19,176(sp)
   8483c:	00000306 	br	8484c <___vfprintf_internal_r+0x13b4>
   84840:	b5800204 	addi	r22,r22,8
   84844:	843ffc04 	addi	r16,r16,-16
   84848:	e4007b0e 	bge	fp,r16,84a38 <___vfprintf_internal_r+0x15a0>
   8484c:	18c00404 	addi	r3,r3,16
   84850:	8c400044 	addi	r17,r17,1
   84854:	b5000015 	stw	r20,0(r22)
   84858:	b7000115 	stw	fp,4(r22)
   8485c:	d8c02015 	stw	r3,128(sp)
   84860:	dc401f15 	stw	r17,124(sp)
   84864:	3c7ff60e 	bge	r7,r17,84840 <rx_descriptor_end+0xfff847e0>
   84868:	d9801e04 	addi	r6,sp,120
   8486c:	b80b883a 	mov	r5,r23
   84870:	9809883a 	mov	r4,r19
   84874:	d9c03c15 	stw	r7,240(sp)
   84878:	00896500 	call	89650 <__sprint_r>
   8487c:	d9c03c17 	ldw	r7,240(sp)
   84880:	103c071e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84884:	d8c02017 	ldw	r3,128(sp)
   84888:	dc401f17 	ldw	r17,124(sp)
   8488c:	dd800404 	addi	r22,sp,16
   84890:	003fec06 	br	84844 <rx_descriptor_end+0xfff847e4>
   84894:	9080100c 	andi	r2,r18,64
   84898:	d8002785 	stb	zero,158(sp)
   8489c:	10010e26 	beq	r2,zero,84cd8 <___vfprintf_internal_r+0x1840>
   848a0:	d9002d17 	ldw	r4,180(sp)
   848a4:	d9402917 	ldw	r5,164(sp)
   848a8:	002d883a 	mov	r22,zero
   848ac:	20800104 	addi	r2,r4,4
   848b0:	24c0000b 	ldhu	r19,0(r4)
   848b4:	283fc90e 	bge	r5,zero,847dc <rx_descriptor_end+0xfff8477c>
   848b8:	d8802d15 	stw	r2,180(sp)
   848bc:	0039883a 	mov	fp,zero
   848c0:	9d84b03a 	or	r2,r19,r22
   848c4:	103c461e 	bne	r2,zero,839e0 <rx_descriptor_end+0xfff83980>
   848c8:	00800044 	movi	r2,1
   848cc:	003e6c06 	br	84280 <rx_descriptor_end+0xfff84220>
   848d0:	d9002c17 	ldw	r4,176(sp)
   848d4:	d9801e04 	addi	r6,sp,120
   848d8:	b80b883a 	mov	r5,r23
   848dc:	00896500 	call	89650 <__sprint_r>
   848e0:	103bef1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   848e4:	d8c02017 	ldw	r3,128(sp)
   848e8:	da000404 	addi	r8,sp,16
   848ec:	d9003217 	ldw	r4,200(sp)
   848f0:	d8802617 	ldw	r2,152(sp)
   848f4:	d9403317 	ldw	r5,204(sp)
   848f8:	8123883a 	add	r17,r16,r4
   848fc:	11400216 	blt	r2,r5,84908 <___vfprintf_internal_r+0x1470>
   84900:	9100004c 	andi	r4,r18,1
   84904:	20000d26 	beq	r4,zero,8493c <___vfprintf_internal_r+0x14a4>
   84908:	d9003717 	ldw	r4,220(sp)
   8490c:	d9403417 	ldw	r5,208(sp)
   84910:	1907883a 	add	r3,r3,r4
   84914:	d9001f17 	ldw	r4,124(sp)
   84918:	41400015 	stw	r5,0(r8)
   8491c:	d9403717 	ldw	r5,220(sp)
   84920:	21000044 	addi	r4,r4,1
   84924:	d8c02015 	stw	r3,128(sp)
   84928:	41400115 	stw	r5,4(r8)
   8492c:	d9001f15 	stw	r4,124(sp)
   84930:	014001c4 	movi	r5,7
   84934:	2901e816 	blt	r5,r4,850d8 <___vfprintf_internal_r+0x1c40>
   84938:	42000204 	addi	r8,r8,8
   8493c:	d9003317 	ldw	r4,204(sp)
   84940:	8121883a 	add	r16,r16,r4
   84944:	2085c83a 	sub	r2,r4,r2
   84948:	8461c83a 	sub	r16,r16,r17
   8494c:	1400010e 	bge	r2,r16,84954 <___vfprintf_internal_r+0x14bc>
   84950:	1021883a 	mov	r16,r2
   84954:	04000a0e 	bge	zero,r16,84980 <___vfprintf_internal_r+0x14e8>
   84958:	d9001f17 	ldw	r4,124(sp)
   8495c:	1c07883a 	add	r3,r3,r16
   84960:	44400015 	stw	r17,0(r8)
   84964:	21000044 	addi	r4,r4,1
   84968:	44000115 	stw	r16,4(r8)
   8496c:	d8c02015 	stw	r3,128(sp)
   84970:	d9001f15 	stw	r4,124(sp)
   84974:	014001c4 	movi	r5,7
   84978:	2901fb16 	blt	r5,r4,85168 <___vfprintf_internal_r+0x1cd0>
   8497c:	42000204 	addi	r8,r8,8
   84980:	8001f716 	blt	r16,zero,85160 <___vfprintf_internal_r+0x1cc8>
   84984:	1421c83a 	sub	r16,r2,r16
   84988:	043d380e 	bge	zero,r16,83e6c <rx_descriptor_end+0xfff83e0c>
   8498c:	04400404 	movi	r17,16
   84990:	d8801f17 	ldw	r2,124(sp)
   84994:	8c3efb0e 	bge	r17,r16,84584 <rx_descriptor_end+0xfff84524>
   84998:	01400274 	movhi	r5,9
   8499c:	2948c484 	addi	r5,r5,8978
   849a0:	d9402b15 	stw	r5,172(sp)
   849a4:	058001c4 	movi	r22,7
   849a8:	dcc02c17 	ldw	r19,176(sp)
   849ac:	00000306 	br	849bc <___vfprintf_internal_r+0x1524>
   849b0:	42000204 	addi	r8,r8,8
   849b4:	843ffc04 	addi	r16,r16,-16
   849b8:	8c3ef50e 	bge	r17,r16,84590 <rx_descriptor_end+0xfff84530>
   849bc:	18c00404 	addi	r3,r3,16
   849c0:	10800044 	addi	r2,r2,1
   849c4:	45000015 	stw	r20,0(r8)
   849c8:	44400115 	stw	r17,4(r8)
   849cc:	d8c02015 	stw	r3,128(sp)
   849d0:	d8801f15 	stw	r2,124(sp)
   849d4:	b0bff60e 	bge	r22,r2,849b0 <rx_descriptor_end+0xfff84950>
   849d8:	d9801e04 	addi	r6,sp,120
   849dc:	b80b883a 	mov	r5,r23
   849e0:	9809883a 	mov	r4,r19
   849e4:	00896500 	call	89650 <__sprint_r>
   849e8:	103bad1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   849ec:	d8c02017 	ldw	r3,128(sp)
   849f0:	d8801f17 	ldw	r2,124(sp)
   849f4:	da000404 	addi	r8,sp,16
   849f8:	003fee06 	br	849b4 <rx_descriptor_end+0xfff84954>
   849fc:	9088703a 	and	r4,r18,r2
   84a00:	203eab1e 	bne	r4,zero,844b0 <rx_descriptor_end+0xfff84450>
   84a04:	dc401f17 	ldw	r17,124(sp)
   84a08:	40800115 	stw	r2,4(r8)
   84a0c:	44000015 	stw	r16,0(r8)
   84a10:	8c400044 	addi	r17,r17,1
   84a14:	d8c02015 	stw	r3,128(sp)
   84a18:	dc401f15 	stw	r17,124(sp)
   84a1c:	008001c4 	movi	r2,7
   84a20:	14400e16 	blt	r2,r17,84a5c <___vfprintf_internal_r+0x15c4>
   84a24:	45800204 	addi	r22,r8,8
   84a28:	003eca06 	br	84554 <rx_descriptor_end+0xfff844f4>
   84a2c:	01000274 	movhi	r4,9
   84a30:	2108c484 	addi	r4,r4,8978
   84a34:	d9002b15 	stw	r4,172(sp)
   84a38:	d8802b17 	ldw	r2,172(sp)
   84a3c:	1c07883a 	add	r3,r3,r16
   84a40:	8c400044 	addi	r17,r17,1
   84a44:	b0800015 	stw	r2,0(r22)
   84a48:	b4000115 	stw	r16,4(r22)
   84a4c:	d8c02015 	stw	r3,128(sp)
   84a50:	dc401f15 	stw	r17,124(sp)
   84a54:	008001c4 	movi	r2,7
   84a58:	147ebd0e 	bge	r2,r17,84550 <rx_descriptor_end+0xfff844f0>
   84a5c:	d9002c17 	ldw	r4,176(sp)
   84a60:	d9801e04 	addi	r6,sp,120
   84a64:	b80b883a 	mov	r5,r23
   84a68:	00896500 	call	89650 <__sprint_r>
   84a6c:	103b8c1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84a70:	d8c02017 	ldw	r3,128(sp)
   84a74:	dc401f17 	ldw	r17,124(sp)
   84a78:	dd800404 	addi	r22,sp,16
   84a7c:	003eb506 	br	84554 <rx_descriptor_end+0xfff844f4>
   84a80:	d9002c17 	ldw	r4,176(sp)
   84a84:	d9801e04 	addi	r6,sp,120
   84a88:	b80b883a 	mov	r5,r23
   84a8c:	00896500 	call	89650 <__sprint_r>
   84a90:	103b831e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84a94:	d8c02017 	ldw	r3,128(sp)
   84a98:	dc401f17 	ldw	r17,124(sp)
   84a9c:	da000404 	addi	r8,sp,16
   84aa0:	003e8d06 	br	844d8 <rx_descriptor_end+0xfff84478>
   84aa4:	d9002c17 	ldw	r4,176(sp)
   84aa8:	d9801e04 	addi	r6,sp,120
   84aac:	b80b883a 	mov	r5,r23
   84ab0:	00896500 	call	89650 <__sprint_r>
   84ab4:	103b7a1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84ab8:	d8c02017 	ldw	r3,128(sp)
   84abc:	dc401f17 	ldw	r17,124(sp)
   84ac0:	dd800404 	addi	r22,sp,16
   84ac4:	003e8f06 	br	84504 <rx_descriptor_end+0xfff844a4>
   84ac8:	0027883a 	mov	r19,zero
   84acc:	003f4a06 	br	847f8 <rx_descriptor_end+0xfff84798>
   84ad0:	d9002c17 	ldw	r4,176(sp)
   84ad4:	d9801e04 	addi	r6,sp,120
   84ad8:	b80b883a 	mov	r5,r23
   84adc:	00896500 	call	89650 <__sprint_r>
   84ae0:	103b6f1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84ae4:	d8c02017 	ldw	r3,128(sp)
   84ae8:	da000404 	addi	r8,sp,16
   84aec:	003c9d06 	br	83d64 <rx_descriptor_end+0xfff83d04>
   84af0:	04e7c83a 	sub	r19,zero,r19
   84af4:	9804c03a 	cmpne	r2,r19,zero
   84af8:	05adc83a 	sub	r22,zero,r22
   84afc:	b0adc83a 	sub	r22,r22,r2
   84b00:	d8802917 	ldw	r2,164(sp)
   84b04:	07000b44 	movi	fp,45
   84b08:	df002785 	stb	fp,158(sp)
   84b0c:	10017b16 	blt	r2,zero,850fc <___vfprintf_internal_r+0x1c64>
   84b10:	00bfdfc4 	movi	r2,-129
   84b14:	90a4703a 	and	r18,r18,r2
   84b18:	003bb106 	br	839e0 <rx_descriptor_end+0xfff83980>
   84b1c:	d9003617 	ldw	r4,216(sp)
   84b20:	d9403817 	ldw	r5,224(sp)
   84b24:	da003d15 	stw	r8,244(sp)
   84b28:	00894040 	call	89404 <__fpclassifyd>
   84b2c:	da003d17 	ldw	r8,244(sp)
   84b30:	1000f026 	beq	r2,zero,84ef4 <___vfprintf_internal_r+0x1a5c>
   84b34:	d9002917 	ldw	r4,164(sp)
   84b38:	05bff7c4 	movi	r22,-33
   84b3c:	00bfffc4 	movi	r2,-1
   84b40:	8dac703a 	and	r22,r17,r22
   84b44:	20820026 	beq	r4,r2,85348 <___vfprintf_internal_r+0x1eb0>
   84b48:	008011c4 	movi	r2,71
   84b4c:	b081f726 	beq	r22,r2,8532c <___vfprintf_internal_r+0x1e94>
   84b50:	d9003817 	ldw	r4,224(sp)
   84b54:	90c04014 	ori	r3,r18,256
   84b58:	d8c02b15 	stw	r3,172(sp)
   84b5c:	20021516 	blt	r4,zero,853b4 <___vfprintf_internal_r+0x1f1c>
   84b60:	dcc03817 	ldw	r19,224(sp)
   84b64:	d8002a05 	stb	zero,168(sp)
   84b68:	00801984 	movi	r2,102
   84b6c:	8881f926 	beq	r17,r2,85354 <___vfprintf_internal_r+0x1ebc>
   84b70:	00801184 	movi	r2,70
   84b74:	88821c26 	beq	r17,r2,853e8 <___vfprintf_internal_r+0x1f50>
   84b78:	00801144 	movi	r2,69
   84b7c:	b081ef26 	beq	r22,r2,8533c <___vfprintf_internal_r+0x1ea4>
   84b80:	d8c02917 	ldw	r3,164(sp)
   84b84:	d8802104 	addi	r2,sp,132
   84b88:	d8800315 	stw	r2,12(sp)
   84b8c:	d9403617 	ldw	r5,216(sp)
   84b90:	d8802504 	addi	r2,sp,148
   84b94:	d9002c17 	ldw	r4,176(sp)
   84b98:	d8800215 	stw	r2,8(sp)
   84b9c:	d8802604 	addi	r2,sp,152
   84ba0:	d8c00015 	stw	r3,0(sp)
   84ba4:	d8800115 	stw	r2,4(sp)
   84ba8:	01c00084 	movi	r7,2
   84bac:	980d883a 	mov	r6,r19
   84bb0:	d8c03c15 	stw	r3,240(sp)
   84bb4:	da003d15 	stw	r8,244(sp)
   84bb8:	0085b700 	call	85b70 <_dtoa_r>
   84bbc:	1021883a 	mov	r16,r2
   84bc0:	008019c4 	movi	r2,103
   84bc4:	d8c03c17 	ldw	r3,240(sp)
   84bc8:	da003d17 	ldw	r8,244(sp)
   84bcc:	88817126 	beq	r17,r2,85194 <___vfprintf_internal_r+0x1cfc>
   84bd0:	008011c4 	movi	r2,71
   84bd4:	88829226 	beq	r17,r2,85620 <___vfprintf_internal_r+0x2188>
   84bd8:	80f9883a 	add	fp,r16,r3
   84bdc:	d9003617 	ldw	r4,216(sp)
   84be0:	000d883a 	mov	r6,zero
   84be4:	000f883a 	mov	r7,zero
   84be8:	980b883a 	mov	r5,r19
   84bec:	da003d15 	stw	r8,244(sp)
   84bf0:	008d0500 	call	8d050 <__eqdf2>
   84bf4:	da003d17 	ldw	r8,244(sp)
   84bf8:	10018d26 	beq	r2,zero,85230 <___vfprintf_internal_r+0x1d98>
   84bfc:	d8802117 	ldw	r2,132(sp)
   84c00:	1700062e 	bgeu	r2,fp,84c1c <___vfprintf_internal_r+0x1784>
   84c04:	01000c04 	movi	r4,48
   84c08:	10c00044 	addi	r3,r2,1
   84c0c:	d8c02115 	stw	r3,132(sp)
   84c10:	11000005 	stb	r4,0(r2)
   84c14:	d8802117 	ldw	r2,132(sp)
   84c18:	173ffb36 	bltu	r2,fp,84c08 <rx_descriptor_end+0xfff84ba8>
   84c1c:	1405c83a 	sub	r2,r2,r16
   84c20:	d8803315 	stw	r2,204(sp)
   84c24:	008011c4 	movi	r2,71
   84c28:	b0817626 	beq	r22,r2,85204 <___vfprintf_internal_r+0x1d6c>
   84c2c:	00801944 	movi	r2,101
   84c30:	1442810e 	bge	r2,r17,85638 <___vfprintf_internal_r+0x21a0>
   84c34:	d8c02617 	ldw	r3,152(sp)
   84c38:	00801984 	movi	r2,102
   84c3c:	d8c03215 	stw	r3,200(sp)
   84c40:	8881fe26 	beq	r17,r2,8543c <___vfprintf_internal_r+0x1fa4>
   84c44:	d8c03217 	ldw	r3,200(sp)
   84c48:	d9003317 	ldw	r4,204(sp)
   84c4c:	1901dd16 	blt	r3,r4,853c4 <___vfprintf_internal_r+0x1f2c>
   84c50:	9480004c 	andi	r18,r18,1
   84c54:	90022b1e 	bne	r18,zero,85504 <___vfprintf_internal_r+0x206c>
   84c58:	1805883a 	mov	r2,r3
   84c5c:	18028016 	blt	r3,zero,85660 <___vfprintf_internal_r+0x21c8>
   84c60:	d8c03217 	ldw	r3,200(sp)
   84c64:	044019c4 	movi	r17,103
   84c68:	d8c02e15 	stw	r3,184(sp)
   84c6c:	df002a07 	ldb	fp,168(sp)
   84c70:	e001531e 	bne	fp,zero,851c0 <___vfprintf_internal_r+0x1d28>
   84c74:	df002783 	ldbu	fp,158(sp)
   84c78:	d8802a15 	stw	r2,168(sp)
   84c7c:	dc802b17 	ldw	r18,172(sp)
   84c80:	d8002915 	stw	zero,164(sp)
   84c84:	003bd106 	br	83bcc <rx_descriptor_end+0xfff83b6c>
   84c88:	d8802d17 	ldw	r2,180(sp)
   84c8c:	d8c02d17 	ldw	r3,180(sp)
   84c90:	d9002d17 	ldw	r4,180(sp)
   84c94:	10800017 	ldw	r2,0(r2)
   84c98:	18c00117 	ldw	r3,4(r3)
   84c9c:	21000204 	addi	r4,r4,8
   84ca0:	d8803615 	stw	r2,216(sp)
   84ca4:	d8c03815 	stw	r3,224(sp)
   84ca8:	d9002d15 	stw	r4,180(sp)
   84cac:	003b7506 	br	83a84 <rx_descriptor_end+0xfff83a24>
   84cb0:	ac400007 	ldb	r17,0(r21)
   84cb4:	003a5906 	br	8361c <rx_descriptor_end+0xfff835bc>
   84cb8:	9080100c 	andi	r2,r18,64
   84cbc:	1000a826 	beq	r2,zero,84f60 <___vfprintf_internal_r+0x1ac8>
   84cc0:	d9002d17 	ldw	r4,180(sp)
   84cc4:	002d883a 	mov	r22,zero
   84cc8:	24c0000b 	ldhu	r19,0(r4)
   84ccc:	21000104 	addi	r4,r4,4
   84cd0:	d9002d15 	stw	r4,180(sp)
   84cd4:	003ccb06 	br	84004 <rx_descriptor_end+0xfff83fa4>
   84cd8:	d8c02d17 	ldw	r3,180(sp)
   84cdc:	d9002917 	ldw	r4,164(sp)
   84ce0:	002d883a 	mov	r22,zero
   84ce4:	18800104 	addi	r2,r3,4
   84ce8:	1cc00017 	ldw	r19,0(r3)
   84cec:	203ebb0e 	bge	r4,zero,847dc <rx_descriptor_end+0xfff8477c>
   84cf0:	003ef106 	br	848b8 <rx_descriptor_end+0xfff84858>
   84cf4:	9080040c 	andi	r2,r18,16
   84cf8:	1000921e 	bne	r2,zero,84f44 <___vfprintf_internal_r+0x1aac>
   84cfc:	9480100c 	andi	r18,r18,64
   84d00:	90013926 	beq	r18,zero,851e8 <___vfprintf_internal_r+0x1d50>
   84d04:	d9002d17 	ldw	r4,180(sp)
   84d08:	d9402f17 	ldw	r5,188(sp)
   84d0c:	20800017 	ldw	r2,0(r4)
   84d10:	21000104 	addi	r4,r4,4
   84d14:	d9002d15 	stw	r4,180(sp)
   84d18:	1140000d 	sth	r5,0(r2)
   84d1c:	003a1606 	br	83578 <rx_descriptor_end+0xfff83518>
   84d20:	9080100c 	andi	r2,r18,64
   84d24:	10008026 	beq	r2,zero,84f28 <___vfprintf_internal_r+0x1a90>
   84d28:	d8c02d17 	ldw	r3,180(sp)
   84d2c:	1cc0000f 	ldh	r19,0(r3)
   84d30:	18c00104 	addi	r3,r3,4
   84d34:	d8c02d15 	stw	r3,180(sp)
   84d38:	982dd7fa 	srai	r22,r19,31
   84d3c:	b005883a 	mov	r2,r22
   84d40:	003b1f06 	br	839c0 <rx_descriptor_end+0xfff83960>
   84d44:	9080100c 	andi	r2,r18,64
   84d48:	d8002785 	stb	zero,158(sp)
   84d4c:	10008a1e 	bne	r2,zero,84f78 <___vfprintf_internal_r+0x1ae0>
   84d50:	d9402d17 	ldw	r5,180(sp)
   84d54:	d8c02917 	ldw	r3,164(sp)
   84d58:	002d883a 	mov	r22,zero
   84d5c:	28800104 	addi	r2,r5,4
   84d60:	2cc00017 	ldw	r19,0(r5)
   84d64:	183e4b0e 	bge	r3,zero,84694 <rx_descriptor_end+0xfff84634>
   84d68:	9d86b03a 	or	r3,r19,r22
   84d6c:	d8802d15 	stw	r2,180(sp)
   84d70:	183e4c1e 	bne	r3,zero,846a4 <rx_descriptor_end+0xfff84644>
   84d74:	0039883a 	mov	fp,zero
   84d78:	0005883a 	mov	r2,zero
   84d7c:	003d4006 	br	84280 <rx_descriptor_end+0xfff84220>
   84d80:	01400274 	movhi	r5,9
   84d84:	2948c484 	addi	r5,r5,8978
   84d88:	d9402b15 	stw	r5,172(sp)
   84d8c:	d9402b17 	ldw	r5,172(sp)
   84d90:	1c47883a 	add	r3,r3,r17
   84d94:	10800044 	addi	r2,r2,1
   84d98:	41400015 	stw	r5,0(r8)
   84d9c:	44400115 	stw	r17,4(r8)
   84da0:	d8c02015 	stw	r3,128(sp)
   84da4:	d8801f15 	stw	r2,124(sp)
   84da8:	010001c4 	movi	r4,7
   84dac:	20bec816 	blt	r4,r2,848d0 <rx_descriptor_end+0xfff84870>
   84db0:	42000204 	addi	r8,r8,8
   84db4:	003ecd06 	br	848ec <rx_descriptor_end+0xfff8488c>
   84db8:	d9002917 	ldw	r4,164(sp)
   84dbc:	d8002785 	stb	zero,158(sp)
   84dc0:	203d2d16 	blt	r4,zero,84278 <rx_descriptor_end+0xfff84218>
   84dc4:	00bfdfc4 	movi	r2,-129
   84dc8:	90a4703a 	and	r18,r18,r2
   84dcc:	003a9106 	br	83814 <rx_descriptor_end+0xfff837b4>
   84dd0:	01000274 	movhi	r4,9
   84dd4:	2108c484 	addi	r4,r4,8978
   84dd8:	d9002b15 	stw	r4,172(sp)
   84ddc:	003c0c06 	br	83e10 <rx_descriptor_end+0xfff83db0>
   84de0:	d9002c17 	ldw	r4,176(sp)
   84de4:	d9801e04 	addi	r6,sp,120
   84de8:	b80b883a 	mov	r5,r23
   84dec:	00896500 	call	89650 <__sprint_r>
   84df0:	103aab1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84df4:	d8c02017 	ldw	r3,128(sp)
   84df8:	da000404 	addi	r8,sp,16
   84dfc:	003d4106 	br	84304 <rx_descriptor_end+0xfff842a4>
   84e00:	d8801f17 	ldw	r2,124(sp)
   84e04:	01400274 	movhi	r5,9
   84e08:	01000044 	movi	r4,1
   84e0c:	18c00044 	addi	r3,r3,1
   84e10:	10800044 	addi	r2,r2,1
   84e14:	2948c404 	addi	r5,r5,8976
   84e18:	41000115 	stw	r4,4(r8)
   84e1c:	41400015 	stw	r5,0(r8)
   84e20:	d8c02015 	stw	r3,128(sp)
   84e24:	d8801f15 	stw	r2,124(sp)
   84e28:	010001c4 	movi	r4,7
   84e2c:	20805c16 	blt	r4,r2,84fa0 <___vfprintf_internal_r+0x1b08>
   84e30:	42000204 	addi	r8,r8,8
   84e34:	8800041e 	bne	r17,zero,84e48 <___vfprintf_internal_r+0x19b0>
   84e38:	d8803317 	ldw	r2,204(sp)
   84e3c:	1000021e 	bne	r2,zero,84e48 <___vfprintf_internal_r+0x19b0>
   84e40:	9080004c 	andi	r2,r18,1
   84e44:	103c0926 	beq	r2,zero,83e6c <rx_descriptor_end+0xfff83e0c>
   84e48:	d9003717 	ldw	r4,220(sp)
   84e4c:	d8801f17 	ldw	r2,124(sp)
   84e50:	d9403417 	ldw	r5,208(sp)
   84e54:	20c7883a 	add	r3,r4,r3
   84e58:	10800044 	addi	r2,r2,1
   84e5c:	41000115 	stw	r4,4(r8)
   84e60:	41400015 	stw	r5,0(r8)
   84e64:	d8c02015 	stw	r3,128(sp)
   84e68:	d8801f15 	stw	r2,124(sp)
   84e6c:	010001c4 	movi	r4,7
   84e70:	20812116 	blt	r4,r2,852f8 <___vfprintf_internal_r+0x1e60>
   84e74:	42000204 	addi	r8,r8,8
   84e78:	0463c83a 	sub	r17,zero,r17
   84e7c:	0440730e 	bge	zero,r17,8504c <___vfprintf_internal_r+0x1bb4>
   84e80:	05800404 	movi	r22,16
   84e84:	b440860e 	bge	r22,r17,850a0 <___vfprintf_internal_r+0x1c08>
   84e88:	01400274 	movhi	r5,9
   84e8c:	2948c484 	addi	r5,r5,8978
   84e90:	d9402b15 	stw	r5,172(sp)
   84e94:	070001c4 	movi	fp,7
   84e98:	dcc02c17 	ldw	r19,176(sp)
   84e9c:	00000306 	br	84eac <___vfprintf_internal_r+0x1a14>
   84ea0:	42000204 	addi	r8,r8,8
   84ea4:	8c7ffc04 	addi	r17,r17,-16
   84ea8:	b440800e 	bge	r22,r17,850ac <___vfprintf_internal_r+0x1c14>
   84eac:	18c00404 	addi	r3,r3,16
   84eb0:	10800044 	addi	r2,r2,1
   84eb4:	45000015 	stw	r20,0(r8)
   84eb8:	45800115 	stw	r22,4(r8)
   84ebc:	d8c02015 	stw	r3,128(sp)
   84ec0:	d8801f15 	stw	r2,124(sp)
   84ec4:	e0bff60e 	bge	fp,r2,84ea0 <rx_descriptor_end+0xfff84e40>
   84ec8:	d9801e04 	addi	r6,sp,120
   84ecc:	b80b883a 	mov	r5,r23
   84ed0:	9809883a 	mov	r4,r19
   84ed4:	00896500 	call	89650 <__sprint_r>
   84ed8:	103a711e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84edc:	d8c02017 	ldw	r3,128(sp)
   84ee0:	d8801f17 	ldw	r2,124(sp)
   84ee4:	da000404 	addi	r8,sp,16
   84ee8:	003fee06 	br	84ea4 <rx_descriptor_end+0xfff84e44>
   84eec:	00bfffc4 	movi	r2,-1
   84ef0:	003a6f06 	br	838b0 <rx_descriptor_end+0xfff83850>
   84ef4:	008011c4 	movi	r2,71
   84ef8:	1440b816 	blt	r2,r17,851dc <___vfprintf_internal_r+0x1d44>
   84efc:	04000274 	movhi	r16,9
   84f00:	8408b604 	addi	r16,r16,8920
   84f04:	00c000c4 	movi	r3,3
   84f08:	00bfdfc4 	movi	r2,-129
   84f0c:	d8c02a15 	stw	r3,168(sp)
   84f10:	90a4703a 	and	r18,r18,r2
   84f14:	df002783 	ldbu	fp,158(sp)
   84f18:	d8c02e15 	stw	r3,184(sp)
   84f1c:	d8002915 	stw	zero,164(sp)
   84f20:	d8003215 	stw	zero,200(sp)
   84f24:	003b2906 	br	83bcc <rx_descriptor_end+0xfff83b6c>
   84f28:	d9002d17 	ldw	r4,180(sp)
   84f2c:	24c00017 	ldw	r19,0(r4)
   84f30:	21000104 	addi	r4,r4,4
   84f34:	d9002d15 	stw	r4,180(sp)
   84f38:	982dd7fa 	srai	r22,r19,31
   84f3c:	b005883a 	mov	r2,r22
   84f40:	003a9f06 	br	839c0 <rx_descriptor_end+0xfff83960>
   84f44:	d9402d17 	ldw	r5,180(sp)
   84f48:	d8c02f17 	ldw	r3,188(sp)
   84f4c:	28800017 	ldw	r2,0(r5)
   84f50:	29400104 	addi	r5,r5,4
   84f54:	d9402d15 	stw	r5,180(sp)
   84f58:	10c00015 	stw	r3,0(r2)
   84f5c:	00398606 	br	83578 <rx_descriptor_end+0xfff83518>
   84f60:	d9402d17 	ldw	r5,180(sp)
   84f64:	002d883a 	mov	r22,zero
   84f68:	2cc00017 	ldw	r19,0(r5)
   84f6c:	29400104 	addi	r5,r5,4
   84f70:	d9402d15 	stw	r5,180(sp)
   84f74:	003c2306 	br	84004 <rx_descriptor_end+0xfff83fa4>
   84f78:	d8c02d17 	ldw	r3,180(sp)
   84f7c:	d9002917 	ldw	r4,164(sp)
   84f80:	002d883a 	mov	r22,zero
   84f84:	18800104 	addi	r2,r3,4
   84f88:	1cc0000b 	ldhu	r19,0(r3)
   84f8c:	203dc10e 	bge	r4,zero,84694 <rx_descriptor_end+0xfff84634>
   84f90:	003f7506 	br	84d68 <rx_descriptor_end+0xfff84d08>
   84f94:	04000274 	movhi	r16,9
   84f98:	8408b404 	addi	r16,r16,8912
   84f9c:	003acc06 	br	83ad0 <rx_descriptor_end+0xfff83a70>
   84fa0:	d9002c17 	ldw	r4,176(sp)
   84fa4:	d9801e04 	addi	r6,sp,120
   84fa8:	b80b883a 	mov	r5,r23
   84fac:	00896500 	call	89650 <__sprint_r>
   84fb0:	103a3b1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   84fb4:	dc402617 	ldw	r17,152(sp)
   84fb8:	d8c02017 	ldw	r3,128(sp)
   84fbc:	da000404 	addi	r8,sp,16
   84fc0:	003f9c06 	br	84e34 <rx_descriptor_end+0xfff84dd4>
   84fc4:	ac400043 	ldbu	r17,1(r21)
   84fc8:	94800814 	ori	r18,r18,32
   84fcc:	ad400044 	addi	r21,r21,1
   84fd0:	8c403fcc 	andi	r17,r17,255
   84fd4:	8c40201c 	xori	r17,r17,128
   84fd8:	8c7fe004 	addi	r17,r17,-128
   84fdc:	00398f06 	br	8361c <rx_descriptor_end+0xfff835bc>
   84fe0:	d8c02d15 	stw	r3,180(sp)
   84fe4:	0039883a 	mov	fp,zero
   84fe8:	003e3506 	br	848c0 <rx_descriptor_end+0xfff84860>
   84fec:	d9002c17 	ldw	r4,176(sp)
   84ff0:	d9801e04 	addi	r6,sp,120
   84ff4:	b80b883a 	mov	r5,r23
   84ff8:	00896500 	call	89650 <__sprint_r>
   84ffc:	103a281e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   85000:	d8c02017 	ldw	r3,128(sp)
   85004:	da000404 	addi	r8,sp,16
   85008:	003cd006 	br	8434c <rx_descriptor_end+0xfff842ec>
   8500c:	8009883a 	mov	r4,r16
   85010:	da003d15 	stw	r8,244(sp)
   85014:	00834000 	call	83400 <strlen>
   85018:	d8802e15 	stw	r2,184(sp)
   8501c:	da003d17 	ldw	r8,244(sp)
   85020:	103c340e 	bge	r2,zero,840f4 <rx_descriptor_end+0xfff84094>
   85024:	0005883a 	mov	r2,zero
   85028:	003c3206 	br	840f4 <rx_descriptor_end+0xfff84094>
   8502c:	d9002c17 	ldw	r4,176(sp)
   85030:	d9801e04 	addi	r6,sp,120
   85034:	b80b883a 	mov	r5,r23
   85038:	00896500 	call	89650 <__sprint_r>
   8503c:	103a181e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   85040:	d8c02017 	ldw	r3,128(sp)
   85044:	d8801f17 	ldw	r2,124(sp)
   85048:	da000404 	addi	r8,sp,16
   8504c:	d9403317 	ldw	r5,204(sp)
   85050:	10800044 	addi	r2,r2,1
   85054:	44000015 	stw	r16,0(r8)
   85058:	28c7883a 	add	r3,r5,r3
   8505c:	003b7d06 	br	83e54 <rx_descriptor_end+0xfff83df4>
   85060:	01000274 	movhi	r4,9
   85064:	2108c884 	addi	r4,r4,8994
   85068:	d9003515 	stw	r4,212(sp)
   8506c:	003b1406 	br	83cc0 <rx_descriptor_end+0xfff83c60>
   85070:	013fffc4 	movi	r4,-1
   85074:	003a3506 	br	8394c <rx_descriptor_end+0xfff838ec>
   85078:	0023883a 	mov	r17,zero
   8507c:	003d9d06 	br	846f4 <rx_descriptor_end+0xfff84694>
   85080:	d9002c17 	ldw	r4,176(sp)
   85084:	d9801e04 	addi	r6,sp,120
   85088:	b80b883a 	mov	r5,r23
   8508c:	00896500 	call	89650 <__sprint_r>
   85090:	103a031e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   85094:	d8c02017 	ldw	r3,128(sp)
   85098:	da000404 	addi	r8,sp,16
   8509c:	003d9406 	br	846f0 <rx_descriptor_end+0xfff84690>
   850a0:	01000274 	movhi	r4,9
   850a4:	2108c484 	addi	r4,r4,8978
   850a8:	d9002b15 	stw	r4,172(sp)
   850ac:	d9002b17 	ldw	r4,172(sp)
   850b0:	1c47883a 	add	r3,r3,r17
   850b4:	10800044 	addi	r2,r2,1
   850b8:	41000015 	stw	r4,0(r8)
   850bc:	44400115 	stw	r17,4(r8)
   850c0:	d8c02015 	stw	r3,128(sp)
   850c4:	d8801f15 	stw	r2,124(sp)
   850c8:	010001c4 	movi	r4,7
   850cc:	20bfd716 	blt	r4,r2,8502c <rx_descriptor_end+0xfff84fcc>
   850d0:	42000204 	addi	r8,r8,8
   850d4:	003fdd06 	br	8504c <rx_descriptor_end+0xfff84fec>
   850d8:	d9002c17 	ldw	r4,176(sp)
   850dc:	d9801e04 	addi	r6,sp,120
   850e0:	b80b883a 	mov	r5,r23
   850e4:	00896500 	call	89650 <__sprint_r>
   850e8:	1039ed1e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   850ec:	d8802617 	ldw	r2,152(sp)
   850f0:	d8c02017 	ldw	r3,128(sp)
   850f4:	da000404 	addi	r8,sp,16
   850f8:	003e1006 	br	8493c <rx_descriptor_end+0xfff848dc>
   850fc:	00800044 	movi	r2,1
   85100:	10803fcc 	andi	r2,r2,255
   85104:	00c00044 	movi	r3,1
   85108:	10fa3526 	beq	r2,r3,839e0 <rx_descriptor_end+0xfff83980>
   8510c:	00c00084 	movi	r3,2
   85110:	10fbcb26 	beq	r2,r3,84040 <rx_descriptor_end+0xfff83fe0>
   85114:	003a8f06 	br	83b54 <rx_descriptor_end+0xfff83af4>
   85118:	01000274 	movhi	r4,9
   8511c:	2108c884 	addi	r4,r4,8994
   85120:	d9003515 	stw	r4,212(sp)
   85124:	003b7606 	br	83f00 <rx_descriptor_end+0xfff83ea0>
   85128:	d8802917 	ldw	r2,164(sp)
   8512c:	00c00184 	movi	r3,6
   85130:	1880012e 	bgeu	r3,r2,85138 <___vfprintf_internal_r+0x1ca0>
   85134:	1805883a 	mov	r2,r3
   85138:	d8802e15 	stw	r2,184(sp)
   8513c:	1000ef16 	blt	r2,zero,854fc <___vfprintf_internal_r+0x2064>
   85140:	04000274 	movhi	r16,9
   85144:	d8802a15 	stw	r2,168(sp)
   85148:	dcc02d15 	stw	r19,180(sp)
   8514c:	d8002915 	stw	zero,164(sp)
   85150:	d8003215 	stw	zero,200(sp)
   85154:	8408c204 	addi	r16,r16,8968
   85158:	0039883a 	mov	fp,zero
   8515c:	003aa206 	br	83be8 <rx_descriptor_end+0xfff83b88>
   85160:	0021883a 	mov	r16,zero
   85164:	003e0706 	br	84984 <rx_descriptor_end+0xfff84924>
   85168:	d9002c17 	ldw	r4,176(sp)
   8516c:	d9801e04 	addi	r6,sp,120
   85170:	b80b883a 	mov	r5,r23
   85174:	00896500 	call	89650 <__sprint_r>
   85178:	1039c91e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   8517c:	d8802617 	ldw	r2,152(sp)
   85180:	d9403317 	ldw	r5,204(sp)
   85184:	d8c02017 	ldw	r3,128(sp)
   85188:	da000404 	addi	r8,sp,16
   8518c:	2885c83a 	sub	r2,r5,r2
   85190:	003dfb06 	br	84980 <rx_descriptor_end+0xfff84920>
   85194:	9080004c 	andi	r2,r18,1
   85198:	103e8f1e 	bne	r2,zero,84bd8 <rx_descriptor_end+0xfff84b78>
   8519c:	d8802117 	ldw	r2,132(sp)
   851a0:	003e9e06 	br	84c1c <rx_descriptor_end+0xfff84bbc>
   851a4:	1025883a 	mov	r18,r2
   851a8:	0039883a 	mov	fp,zero
   851ac:	00800084 	movi	r2,2
   851b0:	003fd306 	br	85100 <rx_descriptor_end+0xfff850a0>
   851b4:	07000b44 	movi	fp,45
   851b8:	df002785 	stb	fp,158(sp)
   851bc:	003a4006 	br	83ac0 <rx_descriptor_end+0xfff83a60>
   851c0:	00c00b44 	movi	r3,45
   851c4:	d8c02785 	stb	r3,158(sp)
   851c8:	d8802a15 	stw	r2,168(sp)
   851cc:	dc802b17 	ldw	r18,172(sp)
   851d0:	d8002915 	stw	zero,164(sp)
   851d4:	07000b44 	movi	fp,45
   851d8:	003a8006 	br	83bdc <rx_descriptor_end+0xfff83b7c>
   851dc:	04000274 	movhi	r16,9
   851e0:	8408b704 	addi	r16,r16,8924
   851e4:	003f4706 	br	84f04 <rx_descriptor_end+0xfff84ea4>
   851e8:	d8c02d17 	ldw	r3,180(sp)
   851ec:	d9002f17 	ldw	r4,188(sp)
   851f0:	18800017 	ldw	r2,0(r3)
   851f4:	18c00104 	addi	r3,r3,4
   851f8:	d8c02d15 	stw	r3,180(sp)
   851fc:	11000015 	stw	r4,0(r2)
   85200:	0038dd06 	br	83578 <rx_descriptor_end+0xfff83518>
   85204:	dd802617 	ldw	r22,152(sp)
   85208:	00bfff44 	movi	r2,-3
   8520c:	b0801c16 	blt	r22,r2,85280 <___vfprintf_internal_r+0x1de8>
   85210:	d9402917 	ldw	r5,164(sp)
   85214:	2d801a16 	blt	r5,r22,85280 <___vfprintf_internal_r+0x1de8>
   85218:	dd803215 	stw	r22,200(sp)
   8521c:	003e8906 	br	84c44 <rx_descriptor_end+0xfff84be4>
   85220:	01000274 	movhi	r4,9
   85224:	2108c484 	addi	r4,r4,8978
   85228:	d9002b15 	stw	r4,172(sp)
   8522c:	003c9106 	br	84474 <rx_descriptor_end+0xfff84414>
   85230:	e005883a 	mov	r2,fp
   85234:	003e7906 	br	84c1c <rx_descriptor_end+0xfff84bbc>
   85238:	d9402917 	ldw	r5,164(sp)
   8523c:	df002783 	ldbu	fp,158(sp)
   85240:	dcc02d15 	stw	r19,180(sp)
   85244:	d9402a15 	stw	r5,168(sp)
   85248:	d9402e15 	stw	r5,184(sp)
   8524c:	d8002915 	stw	zero,164(sp)
   85250:	d8003215 	stw	zero,200(sp)
   85254:	003a5d06 	br	83bcc <rx_descriptor_end+0xfff83b6c>
   85258:	9080004c 	andi	r2,r18,1
   8525c:	0039883a 	mov	fp,zero
   85260:	10000426 	beq	r2,zero,85274 <___vfprintf_internal_r+0x1ddc>
   85264:	00800c04 	movi	r2,48
   85268:	dc001dc4 	addi	r16,sp,119
   8526c:	d8801dc5 	stb	r2,119(sp)
   85270:	003b8006 	br	84074 <rx_descriptor_end+0xfff84014>
   85274:	d8002e15 	stw	zero,184(sp)
   85278:	dc001e04 	addi	r16,sp,120
   8527c:	003a4d06 	br	83bb4 <rx_descriptor_end+0xfff83b54>
   85280:	8c7fff84 	addi	r17,r17,-2
   85284:	b5bfffc4 	addi	r22,r22,-1
   85288:	dd802615 	stw	r22,152(sp)
   8528c:	dc4022c5 	stb	r17,139(sp)
   85290:	b000bf16 	blt	r22,zero,85590 <___vfprintf_internal_r+0x20f8>
   85294:	00800ac4 	movi	r2,43
   85298:	d8802305 	stb	r2,140(sp)
   8529c:	00800244 	movi	r2,9
   852a0:	15807016 	blt	r2,r22,85464 <___vfprintf_internal_r+0x1fcc>
   852a4:	00800c04 	movi	r2,48
   852a8:	b5800c04 	addi	r22,r22,48
   852ac:	d8802345 	stb	r2,141(sp)
   852b0:	dd802385 	stb	r22,142(sp)
   852b4:	d88023c4 	addi	r2,sp,143
   852b8:	df0022c4 	addi	fp,sp,139
   852bc:	d8c03317 	ldw	r3,204(sp)
   852c0:	1739c83a 	sub	fp,r2,fp
   852c4:	d9003317 	ldw	r4,204(sp)
   852c8:	e0c7883a 	add	r3,fp,r3
   852cc:	df003a15 	stw	fp,232(sp)
   852d0:	d8c02e15 	stw	r3,184(sp)
   852d4:	00800044 	movi	r2,1
   852d8:	1100b30e 	bge	r2,r4,855a8 <___vfprintf_internal_r+0x2110>
   852dc:	d8c02e17 	ldw	r3,184(sp)
   852e0:	18c00044 	addi	r3,r3,1
   852e4:	d8c02e15 	stw	r3,184(sp)
   852e8:	1805883a 	mov	r2,r3
   852ec:	1800ac16 	blt	r3,zero,855a0 <___vfprintf_internal_r+0x2108>
   852f0:	d8003215 	stw	zero,200(sp)
   852f4:	003e5d06 	br	84c6c <rx_descriptor_end+0xfff84c0c>
   852f8:	d9002c17 	ldw	r4,176(sp)
   852fc:	d9801e04 	addi	r6,sp,120
   85300:	b80b883a 	mov	r5,r23
   85304:	00896500 	call	89650 <__sprint_r>
   85308:	1039651e 	bne	r2,zero,838a0 <rx_descriptor_end+0xfff83840>
   8530c:	dc402617 	ldw	r17,152(sp)
   85310:	d8c02017 	ldw	r3,128(sp)
   85314:	d8801f17 	ldw	r2,124(sp)
   85318:	da000404 	addi	r8,sp,16
   8531c:	003ed606 	br	84e78 <rx_descriptor_end+0xfff84e18>
   85320:	582b883a 	mov	r21,r11
   85324:	d8002915 	stw	zero,164(sp)
   85328:	0038bd06 	br	83620 <rx_descriptor_end+0xfff835c0>
   8532c:	d8802917 	ldw	r2,164(sp)
   85330:	103e071e 	bne	r2,zero,84b50 <rx_descriptor_end+0xfff84af0>
   85334:	dc002915 	stw	r16,164(sp)
   85338:	003e0506 	br	84b50 <rx_descriptor_end+0xfff84af0>
   8533c:	d9002917 	ldw	r4,164(sp)
   85340:	20c00044 	addi	r3,r4,1
   85344:	003e0f06 	br	84b84 <rx_descriptor_end+0xfff84b24>
   85348:	01400184 	movi	r5,6
   8534c:	d9402915 	stw	r5,164(sp)
   85350:	003dff06 	br	84b50 <rx_descriptor_end+0xfff84af0>
   85354:	d8802104 	addi	r2,sp,132
   85358:	d8800315 	stw	r2,12(sp)
   8535c:	d8802504 	addi	r2,sp,148
   85360:	d8800215 	stw	r2,8(sp)
   85364:	d8802604 	addi	r2,sp,152
   85368:	d8800115 	stw	r2,4(sp)
   8536c:	d8802917 	ldw	r2,164(sp)
   85370:	d9403617 	ldw	r5,216(sp)
   85374:	d9002c17 	ldw	r4,176(sp)
   85378:	d8800015 	stw	r2,0(sp)
   8537c:	01c000c4 	movi	r7,3
   85380:	980d883a 	mov	r6,r19
   85384:	da003d15 	stw	r8,244(sp)
   85388:	0085b700 	call	85b70 <_dtoa_r>
   8538c:	d8c02917 	ldw	r3,164(sp)
   85390:	da003d17 	ldw	r8,244(sp)
   85394:	1021883a 	mov	r16,r2
   85398:	10f9883a 	add	fp,r2,r3
   8539c:	81000007 	ldb	r4,0(r16)
   853a0:	00800c04 	movi	r2,48
   853a4:	20805e26 	beq	r4,r2,85520 <___vfprintf_internal_r+0x2088>
   853a8:	d8c02617 	ldw	r3,152(sp)
   853ac:	e0f9883a 	add	fp,fp,r3
   853b0:	003e0a06 	br	84bdc <rx_descriptor_end+0xfff84b7c>
   853b4:	00c00b44 	movi	r3,45
   853b8:	24e0003c 	xorhi	r19,r4,32768
   853bc:	d8c02a05 	stb	r3,168(sp)
   853c0:	003de906 	br	84b68 <rx_descriptor_end+0xfff84b08>
   853c4:	d8c03217 	ldw	r3,200(sp)
   853c8:	00c07a0e 	bge	zero,r3,855b4 <___vfprintf_internal_r+0x211c>
   853cc:	00800044 	movi	r2,1
   853d0:	d9003317 	ldw	r4,204(sp)
   853d4:	1105883a 	add	r2,r2,r4
   853d8:	d8802e15 	stw	r2,184(sp)
   853dc:	10004e16 	blt	r2,zero,85518 <___vfprintf_internal_r+0x2080>
   853e0:	044019c4 	movi	r17,103
   853e4:	003e2106 	br	84c6c <rx_descriptor_end+0xfff84c0c>
   853e8:	d9002917 	ldw	r4,164(sp)
   853ec:	d8802104 	addi	r2,sp,132
   853f0:	d8800315 	stw	r2,12(sp)
   853f4:	d9000015 	stw	r4,0(sp)
   853f8:	d8802504 	addi	r2,sp,148
   853fc:	d9403617 	ldw	r5,216(sp)
   85400:	d9002c17 	ldw	r4,176(sp)
   85404:	d8800215 	stw	r2,8(sp)
   85408:	d8802604 	addi	r2,sp,152
   8540c:	d8800115 	stw	r2,4(sp)
   85410:	01c000c4 	movi	r7,3
   85414:	980d883a 	mov	r6,r19
   85418:	da003d15 	stw	r8,244(sp)
   8541c:	0085b700 	call	85b70 <_dtoa_r>
   85420:	d8c02917 	ldw	r3,164(sp)
   85424:	da003d17 	ldw	r8,244(sp)
   85428:	1021883a 	mov	r16,r2
   8542c:	00801184 	movi	r2,70
   85430:	80f9883a 	add	fp,r16,r3
   85434:	88bfd926 	beq	r17,r2,8539c <rx_descriptor_end+0xfff8533c>
   85438:	003de806 	br	84bdc <rx_descriptor_end+0xfff84b7c>
   8543c:	d9002917 	ldw	r4,164(sp)
   85440:	00c04d0e 	bge	zero,r3,85578 <___vfprintf_internal_r+0x20e0>
   85444:	2000441e 	bne	r4,zero,85558 <___vfprintf_internal_r+0x20c0>
   85448:	9480004c 	andi	r18,r18,1
   8544c:	9000421e 	bne	r18,zero,85558 <___vfprintf_internal_r+0x20c0>
   85450:	1805883a 	mov	r2,r3
   85454:	18007016 	blt	r3,zero,85618 <___vfprintf_internal_r+0x2180>
   85458:	d8c03217 	ldw	r3,200(sp)
   8545c:	d8c02e15 	stw	r3,184(sp)
   85460:	003e0206 	br	84c6c <rx_descriptor_end+0xfff84c0c>
   85464:	df0022c4 	addi	fp,sp,139
   85468:	dc002915 	stw	r16,164(sp)
   8546c:	4027883a 	mov	r19,r8
   85470:	e021883a 	mov	r16,fp
   85474:	b009883a 	mov	r4,r22
   85478:	01400284 	movi	r5,10
   8547c:	008bd8c0 	call	8bd8c <__modsi3>
   85480:	10800c04 	addi	r2,r2,48
   85484:	843fffc4 	addi	r16,r16,-1
   85488:	b009883a 	mov	r4,r22
   8548c:	01400284 	movi	r5,10
   85490:	80800005 	stb	r2,0(r16)
   85494:	008bd080 	call	8bd08 <__divsi3>
   85498:	102d883a 	mov	r22,r2
   8549c:	00800244 	movi	r2,9
   854a0:	15bff416 	blt	r2,r22,85474 <rx_descriptor_end+0xfff85414>
   854a4:	9811883a 	mov	r8,r19
   854a8:	b0800c04 	addi	r2,r22,48
   854ac:	8027883a 	mov	r19,r16
   854b0:	997fffc4 	addi	r5,r19,-1
   854b4:	98bfffc5 	stb	r2,-1(r19)
   854b8:	dc002917 	ldw	r16,164(sp)
   854bc:	2f006a2e 	bgeu	r5,fp,85668 <___vfprintf_internal_r+0x21d0>
   854c0:	d9c02384 	addi	r7,sp,142
   854c4:	3ccfc83a 	sub	r7,r7,r19
   854c8:	d9002344 	addi	r4,sp,141
   854cc:	e1cf883a 	add	r7,fp,r7
   854d0:	00000106 	br	854d8 <___vfprintf_internal_r+0x2040>
   854d4:	28800003 	ldbu	r2,0(r5)
   854d8:	20800005 	stb	r2,0(r4)
   854dc:	21000044 	addi	r4,r4,1
   854e0:	29400044 	addi	r5,r5,1
   854e4:	393ffb1e 	bne	r7,r4,854d4 <rx_descriptor_end+0xfff85474>
   854e8:	d8802304 	addi	r2,sp,140
   854ec:	14c5c83a 	sub	r2,r2,r19
   854f0:	d8c02344 	addi	r3,sp,141
   854f4:	1885883a 	add	r2,r3,r2
   854f8:	003f7006 	br	852bc <rx_descriptor_end+0xfff8525c>
   854fc:	0005883a 	mov	r2,zero
   85500:	003f0f06 	br	85140 <rx_descriptor_end+0xfff850e0>
   85504:	d8c03217 	ldw	r3,200(sp)
   85508:	18c00044 	addi	r3,r3,1
   8550c:	d8c02e15 	stw	r3,184(sp)
   85510:	1805883a 	mov	r2,r3
   85514:	183fb20e 	bge	r3,zero,853e0 <rx_descriptor_end+0xfff85380>
   85518:	0005883a 	mov	r2,zero
   8551c:	003fb006 	br	853e0 <rx_descriptor_end+0xfff85380>
   85520:	d9003617 	ldw	r4,216(sp)
   85524:	000d883a 	mov	r6,zero
   85528:	000f883a 	mov	r7,zero
   8552c:	980b883a 	mov	r5,r19
   85530:	d8c03c15 	stw	r3,240(sp)
   85534:	da003d15 	stw	r8,244(sp)
   85538:	008d0500 	call	8d050 <__eqdf2>
   8553c:	d8c03c17 	ldw	r3,240(sp)
   85540:	da003d17 	ldw	r8,244(sp)
   85544:	103f9826 	beq	r2,zero,853a8 <rx_descriptor_end+0xfff85348>
   85548:	00800044 	movi	r2,1
   8554c:	10c7c83a 	sub	r3,r2,r3
   85550:	d8c02615 	stw	r3,152(sp)
   85554:	003f9506 	br	853ac <rx_descriptor_end+0xfff8534c>
   85558:	d9002917 	ldw	r4,164(sp)
   8555c:	d8c03217 	ldw	r3,200(sp)
   85560:	20800044 	addi	r2,r4,1
   85564:	1885883a 	add	r2,r3,r2
   85568:	d8802e15 	stw	r2,184(sp)
   8556c:	103dbf0e 	bge	r2,zero,84c6c <rx_descriptor_end+0xfff84c0c>
   85570:	0005883a 	mov	r2,zero
   85574:	003dbd06 	br	84c6c <rx_descriptor_end+0xfff84c0c>
   85578:	2000211e 	bne	r4,zero,85600 <___vfprintf_internal_r+0x2168>
   8557c:	9480004c 	andi	r18,r18,1
   85580:	90001f1e 	bne	r18,zero,85600 <___vfprintf_internal_r+0x2168>
   85584:	00800044 	movi	r2,1
   85588:	d8802e15 	stw	r2,184(sp)
   8558c:	003db706 	br	84c6c <rx_descriptor_end+0xfff84c0c>
   85590:	00800b44 	movi	r2,45
   85594:	05adc83a 	sub	r22,zero,r22
   85598:	d8802305 	stb	r2,140(sp)
   8559c:	003f3f06 	br	8529c <rx_descriptor_end+0xfff8523c>
   855a0:	0005883a 	mov	r2,zero
   855a4:	003f5206 	br	852f0 <rx_descriptor_end+0xfff85290>
   855a8:	90a4703a 	and	r18,r18,r2
   855ac:	903f4e26 	beq	r18,zero,852e8 <rx_descriptor_end+0xfff85288>
   855b0:	003f4a06 	br	852dc <rx_descriptor_end+0xfff8527c>
   855b4:	00800084 	movi	r2,2
   855b8:	10c5c83a 	sub	r2,r2,r3
   855bc:	003f8406 	br	853d0 <rx_descriptor_end+0xfff85370>
   855c0:	d8802d17 	ldw	r2,180(sp)
   855c4:	d9002d17 	ldw	r4,180(sp)
   855c8:	ac400043 	ldbu	r17,1(r21)
   855cc:	10800017 	ldw	r2,0(r2)
   855d0:	582b883a 	mov	r21,r11
   855d4:	d8802915 	stw	r2,164(sp)
   855d8:	20800104 	addi	r2,r4,4
   855dc:	d9002917 	ldw	r4,164(sp)
   855e0:	d8802d15 	stw	r2,180(sp)
   855e4:	203e7a0e 	bge	r4,zero,84fd0 <rx_descriptor_end+0xfff84f70>
   855e8:	8c403fcc 	andi	r17,r17,255
   855ec:	00bfffc4 	movi	r2,-1
   855f0:	8c40201c 	xori	r17,r17,128
   855f4:	d8802915 	stw	r2,164(sp)
   855f8:	8c7fe004 	addi	r17,r17,-128
   855fc:	00380706 	br	8361c <rx_descriptor_end+0xfff835bc>
   85600:	d8c02917 	ldw	r3,164(sp)
   85604:	18c00084 	addi	r3,r3,2
   85608:	d8c02e15 	stw	r3,184(sp)
   8560c:	1805883a 	mov	r2,r3
   85610:	183d960e 	bge	r3,zero,84c6c <rx_descriptor_end+0xfff84c0c>
   85614:	003fd606 	br	85570 <rx_descriptor_end+0xfff85510>
   85618:	0005883a 	mov	r2,zero
   8561c:	003f8e06 	br	85458 <rx_descriptor_end+0xfff853f8>
   85620:	9080004c 	andi	r2,r18,1
   85624:	103f811e 	bne	r2,zero,8542c <rx_descriptor_end+0xfff853cc>
   85628:	d8802117 	ldw	r2,132(sp)
   8562c:	1405c83a 	sub	r2,r2,r16
   85630:	d8803315 	stw	r2,204(sp)
   85634:	b47ef326 	beq	r22,r17,85204 <rx_descriptor_end+0xfff851a4>
   85638:	dd802617 	ldw	r22,152(sp)
   8563c:	003f1106 	br	85284 <rx_descriptor_end+0xfff85224>
   85640:	d9c02785 	stb	r7,158(sp)
   85644:	00390406 	br	83a58 <rx_descriptor_end+0xfff839f8>
   85648:	d9c02785 	stb	r7,158(sp)
   8564c:	0038d306 	br	8399c <rx_descriptor_end+0xfff8393c>
   85650:	d9c02785 	stb	r7,158(sp)
   85654:	003a6106 	br	83fdc <rx_descriptor_end+0xfff83f7c>
   85658:	d9c02785 	stb	r7,158(sp)
   8565c:	003af806 	br	84240 <rx_descriptor_end+0xfff841e0>
   85660:	0005883a 	mov	r2,zero
   85664:	003d7e06 	br	84c60 <rx_descriptor_end+0xfff84c00>
   85668:	d8802344 	addi	r2,sp,141
   8566c:	003f1306 	br	852bc <rx_descriptor_end+0xfff8525c>
   85670:	d9c02785 	stb	r7,158(sp)
   85674:	00392306 	br	83b04 <rx_descriptor_end+0xfff83aa4>
   85678:	d9c02785 	stb	r7,158(sp)
   8567c:	003aa906 	br	84124 <rx_descriptor_end+0xfff840c4>
   85680:	d9c02785 	stb	r7,158(sp)
   85684:	003a3d06 	br	83f7c <rx_descriptor_end+0xfff83f1c>
   85688:	d9c02785 	stb	r7,158(sp)
   8568c:	003aca06 	br	841b8 <rx_descriptor_end+0xfff84158>

00085690 <__vfprintf_internal>:
   85690:	00800274 	movhi	r2,9
   85694:	10913d04 	addi	r2,r2,17652
   85698:	300f883a 	mov	r7,r6
   8569c:	280d883a 	mov	r6,r5
   856a0:	200b883a 	mov	r5,r4
   856a4:	11000017 	ldw	r4,0(r2)
   856a8:	00834981 	jmpi	83498 <___vfprintf_internal_r>

000856ac <__sbprintf>:
   856ac:	2880030b 	ldhu	r2,12(r5)
   856b0:	2ac01917 	ldw	r11,100(r5)
   856b4:	2a80038b 	ldhu	r10,14(r5)
   856b8:	2a400717 	ldw	r9,28(r5)
   856bc:	2a000917 	ldw	r8,36(r5)
   856c0:	defee204 	addi	sp,sp,-1144
   856c4:	00c10004 	movi	r3,1024
   856c8:	dc011a15 	stw	r16,1128(sp)
   856cc:	10bfff4c 	andi	r2,r2,65533
   856d0:	2821883a 	mov	r16,r5
   856d4:	d8cb883a 	add	r5,sp,r3
   856d8:	dc811c15 	stw	r18,1136(sp)
   856dc:	dc411b15 	stw	r17,1132(sp)
   856e0:	dfc11d15 	stw	ra,1140(sp)
   856e4:	2025883a 	mov	r18,r4
   856e8:	d881030d 	sth	r2,1036(sp)
   856ec:	dac11915 	stw	r11,1124(sp)
   856f0:	da81038d 	sth	r10,1038(sp)
   856f4:	da410715 	stw	r9,1052(sp)
   856f8:	da010915 	stw	r8,1060(sp)
   856fc:	dec10015 	stw	sp,1024(sp)
   85700:	dec10415 	stw	sp,1040(sp)
   85704:	d8c10215 	stw	r3,1032(sp)
   85708:	d8c10515 	stw	r3,1044(sp)
   8570c:	d8010615 	stw	zero,1048(sp)
   85710:	00834980 	call	83498 <___vfprintf_internal_r>
   85714:	1023883a 	mov	r17,r2
   85718:	10000416 	blt	r2,zero,8572c <__sbprintf+0x80>
   8571c:	d9410004 	addi	r5,sp,1024
   85720:	9009883a 	mov	r4,r18
   85724:	0081c700 	call	81c70 <_fflush_r>
   85728:	10000d1e 	bne	r2,zero,85760 <__sbprintf+0xb4>
   8572c:	d881030b 	ldhu	r2,1036(sp)
   85730:	1080100c 	andi	r2,r2,64
   85734:	10000326 	beq	r2,zero,85744 <__sbprintf+0x98>
   85738:	8080030b 	ldhu	r2,12(r16)
   8573c:	10801014 	ori	r2,r2,64
   85740:	8080030d 	sth	r2,12(r16)
   85744:	8805883a 	mov	r2,r17
   85748:	dfc11d17 	ldw	ra,1140(sp)
   8574c:	dc811c17 	ldw	r18,1136(sp)
   85750:	dc411b17 	ldw	r17,1132(sp)
   85754:	dc011a17 	ldw	r16,1128(sp)
   85758:	dec11e04 	addi	sp,sp,1144
   8575c:	f800283a 	ret
   85760:	047fffc4 	movi	r17,-1
   85764:	003ff106 	br	8572c <rx_descriptor_end+0xfff856cc>

00085768 <_write_r>:
   85768:	defffd04 	addi	sp,sp,-12
   8576c:	2805883a 	mov	r2,r5
   85770:	dc000015 	stw	r16,0(sp)
   85774:	04000274 	movhi	r16,9
   85778:	dc400115 	stw	r17,4(sp)
   8577c:	300b883a 	mov	r5,r6
   85780:	84193504 	addi	r16,r16,25812
   85784:	2023883a 	mov	r17,r4
   85788:	380d883a 	mov	r6,r7
   8578c:	1009883a 	mov	r4,r2
   85790:	dfc00215 	stw	ra,8(sp)
   85794:	80000015 	stw	zero,0(r16)
   85798:	008f0200 	call	8f020 <write>
   8579c:	00ffffc4 	movi	r3,-1
   857a0:	10c00526 	beq	r2,r3,857b8 <_write_r+0x50>
   857a4:	dfc00217 	ldw	ra,8(sp)
   857a8:	dc400117 	ldw	r17,4(sp)
   857ac:	dc000017 	ldw	r16,0(sp)
   857b0:	dec00304 	addi	sp,sp,12
   857b4:	f800283a 	ret
   857b8:	80c00017 	ldw	r3,0(r16)
   857bc:	183ff926 	beq	r3,zero,857a4 <rx_descriptor_end+0xfff85744>
   857c0:	88c00015 	stw	r3,0(r17)
   857c4:	003ff706 	br	857a4 <rx_descriptor_end+0xfff85744>

000857c8 <__swsetup_r>:
   857c8:	00800274 	movhi	r2,9
   857cc:	defffd04 	addi	sp,sp,-12
   857d0:	10913d04 	addi	r2,r2,17652
   857d4:	dc400115 	stw	r17,4(sp)
   857d8:	2023883a 	mov	r17,r4
   857dc:	11000017 	ldw	r4,0(r2)
   857e0:	dc000015 	stw	r16,0(sp)
   857e4:	dfc00215 	stw	ra,8(sp)
   857e8:	2821883a 	mov	r16,r5
   857ec:	20000226 	beq	r4,zero,857f8 <__swsetup_r+0x30>
   857f0:	20800e17 	ldw	r2,56(r4)
   857f4:	10003126 	beq	r2,zero,858bc <__swsetup_r+0xf4>
   857f8:	8080030b 	ldhu	r2,12(r16)
   857fc:	10c0020c 	andi	r3,r2,8
   85800:	1009883a 	mov	r4,r2
   85804:	18000f26 	beq	r3,zero,85844 <__swsetup_r+0x7c>
   85808:	80c00417 	ldw	r3,16(r16)
   8580c:	18001526 	beq	r3,zero,85864 <__swsetup_r+0x9c>
   85810:	1100004c 	andi	r4,r2,1
   85814:	20001c1e 	bne	r4,zero,85888 <__swsetup_r+0xc0>
   85818:	1080008c 	andi	r2,r2,2
   8581c:	1000291e 	bne	r2,zero,858c4 <__swsetup_r+0xfc>
   85820:	80800517 	ldw	r2,20(r16)
   85824:	80800215 	stw	r2,8(r16)
   85828:	18001c26 	beq	r3,zero,8589c <__swsetup_r+0xd4>
   8582c:	0005883a 	mov	r2,zero
   85830:	dfc00217 	ldw	ra,8(sp)
   85834:	dc400117 	ldw	r17,4(sp)
   85838:	dc000017 	ldw	r16,0(sp)
   8583c:	dec00304 	addi	sp,sp,12
   85840:	f800283a 	ret
   85844:	2080040c 	andi	r2,r4,16
   85848:	10002e26 	beq	r2,zero,85904 <__swsetup_r+0x13c>
   8584c:	2080010c 	andi	r2,r4,4
   85850:	10001e1e 	bne	r2,zero,858cc <__swsetup_r+0x104>
   85854:	80c00417 	ldw	r3,16(r16)
   85858:	20800214 	ori	r2,r4,8
   8585c:	8080030d 	sth	r2,12(r16)
   85860:	183feb1e 	bne	r3,zero,85810 <rx_descriptor_end+0xfff857b0>
   85864:	1100a00c 	andi	r4,r2,640
   85868:	01408004 	movi	r5,512
   8586c:	217fe826 	beq	r4,r5,85810 <rx_descriptor_end+0xfff857b0>
   85870:	800b883a 	mov	r5,r16
   85874:	8809883a 	mov	r4,r17
   85878:	00878f40 	call	878f4 <__smakebuf_r>
   8587c:	8080030b 	ldhu	r2,12(r16)
   85880:	80c00417 	ldw	r3,16(r16)
   85884:	003fe206 	br	85810 <rx_descriptor_end+0xfff857b0>
   85888:	80800517 	ldw	r2,20(r16)
   8588c:	80000215 	stw	zero,8(r16)
   85890:	0085c83a 	sub	r2,zero,r2
   85894:	80800615 	stw	r2,24(r16)
   85898:	183fe41e 	bne	r3,zero,8582c <rx_descriptor_end+0xfff857cc>
   8589c:	80c0030b 	ldhu	r3,12(r16)
   858a0:	0005883a 	mov	r2,zero
   858a4:	1900200c 	andi	r4,r3,128
   858a8:	203fe126 	beq	r4,zero,85830 <rx_descriptor_end+0xfff857d0>
   858ac:	18c01014 	ori	r3,r3,64
   858b0:	80c0030d 	sth	r3,12(r16)
   858b4:	00bfffc4 	movi	r2,-1
   858b8:	003fdd06 	br	85830 <rx_descriptor_end+0xfff857d0>
   858bc:	008204c0 	call	8204c <__sinit>
   858c0:	003fcd06 	br	857f8 <rx_descriptor_end+0xfff85798>
   858c4:	0005883a 	mov	r2,zero
   858c8:	003fd606 	br	85824 <rx_descriptor_end+0xfff857c4>
   858cc:	81400c17 	ldw	r5,48(r16)
   858d0:	28000626 	beq	r5,zero,858ec <__swsetup_r+0x124>
   858d4:	80801004 	addi	r2,r16,64
   858d8:	28800326 	beq	r5,r2,858e8 <__swsetup_r+0x120>
   858dc:	8809883a 	mov	r4,r17
   858e0:	00821c00 	call	821c0 <_free_r>
   858e4:	8100030b 	ldhu	r4,12(r16)
   858e8:	80000c15 	stw	zero,48(r16)
   858ec:	80c00417 	ldw	r3,16(r16)
   858f0:	00bff6c4 	movi	r2,-37
   858f4:	1108703a 	and	r4,r2,r4
   858f8:	80000115 	stw	zero,4(r16)
   858fc:	80c00015 	stw	r3,0(r16)
   85900:	003fd506 	br	85858 <rx_descriptor_end+0xfff857f8>
   85904:	00800244 	movi	r2,9
   85908:	88800015 	stw	r2,0(r17)
   8590c:	20801014 	ori	r2,r4,64
   85910:	8080030d 	sth	r2,12(r16)
   85914:	00bfffc4 	movi	r2,-1
   85918:	003fc506 	br	85830 <rx_descriptor_end+0xfff857d0>

0008591c <_close_r>:
   8591c:	defffd04 	addi	sp,sp,-12
   85920:	dc000015 	stw	r16,0(sp)
   85924:	04000274 	movhi	r16,9
   85928:	dc400115 	stw	r17,4(sp)
   8592c:	84193504 	addi	r16,r16,25812
   85930:	2023883a 	mov	r17,r4
   85934:	2809883a 	mov	r4,r5
   85938:	dfc00215 	stw	ra,8(sp)
   8593c:	80000015 	stw	zero,0(r16)
   85940:	008e5600 	call	8e560 <close>
   85944:	00ffffc4 	movi	r3,-1
   85948:	10c00526 	beq	r2,r3,85960 <_close_r+0x44>
   8594c:	dfc00217 	ldw	ra,8(sp)
   85950:	dc400117 	ldw	r17,4(sp)
   85954:	dc000017 	ldw	r16,0(sp)
   85958:	dec00304 	addi	sp,sp,12
   8595c:	f800283a 	ret
   85960:	80c00017 	ldw	r3,0(r16)
   85964:	183ff926 	beq	r3,zero,8594c <rx_descriptor_end+0xfff858ec>
   85968:	88c00015 	stw	r3,0(r17)
   8596c:	003ff706 	br	8594c <rx_descriptor_end+0xfff858ec>

00085970 <quorem>:
   85970:	defff704 	addi	sp,sp,-36
   85974:	dc800215 	stw	r18,8(sp)
   85978:	20800417 	ldw	r2,16(r4)
   8597c:	2c800417 	ldw	r18,16(r5)
   85980:	dfc00815 	stw	ra,32(sp)
   85984:	ddc00715 	stw	r23,28(sp)
   85988:	dd800615 	stw	r22,24(sp)
   8598c:	dd400515 	stw	r21,20(sp)
   85990:	dd000415 	stw	r20,16(sp)
   85994:	dcc00315 	stw	r19,12(sp)
   85998:	dc400115 	stw	r17,4(sp)
   8599c:	dc000015 	stw	r16,0(sp)
   859a0:	14807116 	blt	r2,r18,85b68 <quorem+0x1f8>
   859a4:	94bfffc4 	addi	r18,r18,-1
   859a8:	94ad883a 	add	r22,r18,r18
   859ac:	b5ad883a 	add	r22,r22,r22
   859b0:	2c400504 	addi	r17,r5,20
   859b4:	8da9883a 	add	r20,r17,r22
   859b8:	25400504 	addi	r21,r4,20
   859bc:	282f883a 	mov	r23,r5
   859c0:	adad883a 	add	r22,r21,r22
   859c4:	a1400017 	ldw	r5,0(r20)
   859c8:	2021883a 	mov	r16,r4
   859cc:	b1000017 	ldw	r4,0(r22)
   859d0:	29400044 	addi	r5,r5,1
   859d4:	008be000 	call	8be00 <__udivsi3>
   859d8:	1027883a 	mov	r19,r2
   859dc:	10002c26 	beq	r2,zero,85a90 <quorem+0x120>
   859e0:	a813883a 	mov	r9,r21
   859e4:	880b883a 	mov	r5,r17
   859e8:	0009883a 	mov	r4,zero
   859ec:	000d883a 	mov	r6,zero
   859f0:	2a000017 	ldw	r8,0(r5)
   859f4:	49c00017 	ldw	r7,0(r9)
   859f8:	29400104 	addi	r5,r5,4
   859fc:	40bfffcc 	andi	r2,r8,65535
   85a00:	14c5383a 	mul	r2,r2,r19
   85a04:	4010d43a 	srli	r8,r8,16
   85a08:	38ffffcc 	andi	r3,r7,65535
   85a0c:	1105883a 	add	r2,r2,r4
   85a10:	1008d43a 	srli	r4,r2,16
   85a14:	44d1383a 	mul	r8,r8,r19
   85a18:	198d883a 	add	r6,r3,r6
   85a1c:	10ffffcc 	andi	r3,r2,65535
   85a20:	30c7c83a 	sub	r3,r6,r3
   85a24:	380ed43a 	srli	r7,r7,16
   85a28:	4105883a 	add	r2,r8,r4
   85a2c:	180dd43a 	srai	r6,r3,16
   85a30:	113fffcc 	andi	r4,r2,65535
   85a34:	390fc83a 	sub	r7,r7,r4
   85a38:	398d883a 	add	r6,r7,r6
   85a3c:	300e943a 	slli	r7,r6,16
   85a40:	18ffffcc 	andi	r3,r3,65535
   85a44:	1008d43a 	srli	r4,r2,16
   85a48:	38ceb03a 	or	r7,r7,r3
   85a4c:	49c00015 	stw	r7,0(r9)
   85a50:	300dd43a 	srai	r6,r6,16
   85a54:	4a400104 	addi	r9,r9,4
   85a58:	a17fe52e 	bgeu	r20,r5,859f0 <rx_descriptor_end+0xfff85990>
   85a5c:	b0800017 	ldw	r2,0(r22)
   85a60:	10000b1e 	bne	r2,zero,85a90 <quorem+0x120>
   85a64:	b0bfff04 	addi	r2,r22,-4
   85a68:	a880082e 	bgeu	r21,r2,85a8c <quorem+0x11c>
   85a6c:	b0ffff17 	ldw	r3,-4(r22)
   85a70:	18000326 	beq	r3,zero,85a80 <quorem+0x110>
   85a74:	00000506 	br	85a8c <quorem+0x11c>
   85a78:	10c00017 	ldw	r3,0(r2)
   85a7c:	1800031e 	bne	r3,zero,85a8c <quorem+0x11c>
   85a80:	10bfff04 	addi	r2,r2,-4
   85a84:	94bfffc4 	addi	r18,r18,-1
   85a88:	a8bffb36 	bltu	r21,r2,85a78 <rx_descriptor_end+0xfff85a18>
   85a8c:	84800415 	stw	r18,16(r16)
   85a90:	b80b883a 	mov	r5,r23
   85a94:	8009883a 	mov	r4,r16
   85a98:	00885a40 	call	885a4 <__mcmp>
   85a9c:	10002616 	blt	r2,zero,85b38 <quorem+0x1c8>
   85aa0:	9cc00044 	addi	r19,r19,1
   85aa4:	a805883a 	mov	r2,r21
   85aa8:	000b883a 	mov	r5,zero
   85aac:	11000017 	ldw	r4,0(r2)
   85ab0:	89800017 	ldw	r6,0(r17)
   85ab4:	10800104 	addi	r2,r2,4
   85ab8:	20ffffcc 	andi	r3,r4,65535
   85abc:	194b883a 	add	r5,r3,r5
   85ac0:	30ffffcc 	andi	r3,r6,65535
   85ac4:	28c7c83a 	sub	r3,r5,r3
   85ac8:	300cd43a 	srli	r6,r6,16
   85acc:	2008d43a 	srli	r4,r4,16
   85ad0:	180bd43a 	srai	r5,r3,16
   85ad4:	18ffffcc 	andi	r3,r3,65535
   85ad8:	2189c83a 	sub	r4,r4,r6
   85adc:	2149883a 	add	r4,r4,r5
   85ae0:	200c943a 	slli	r6,r4,16
   85ae4:	8c400104 	addi	r17,r17,4
   85ae8:	200bd43a 	srai	r5,r4,16
   85aec:	30c6b03a 	or	r3,r6,r3
   85af0:	10ffff15 	stw	r3,-4(r2)
   85af4:	a47fed2e 	bgeu	r20,r17,85aac <rx_descriptor_end+0xfff85a4c>
   85af8:	9485883a 	add	r2,r18,r18
   85afc:	1085883a 	add	r2,r2,r2
   85b00:	a887883a 	add	r3,r21,r2
   85b04:	18800017 	ldw	r2,0(r3)
   85b08:	10000b1e 	bne	r2,zero,85b38 <quorem+0x1c8>
   85b0c:	18bfff04 	addi	r2,r3,-4
   85b10:	a880082e 	bgeu	r21,r2,85b34 <quorem+0x1c4>
   85b14:	18ffff17 	ldw	r3,-4(r3)
   85b18:	18000326 	beq	r3,zero,85b28 <quorem+0x1b8>
   85b1c:	00000506 	br	85b34 <quorem+0x1c4>
   85b20:	10c00017 	ldw	r3,0(r2)
   85b24:	1800031e 	bne	r3,zero,85b34 <quorem+0x1c4>
   85b28:	10bfff04 	addi	r2,r2,-4
   85b2c:	94bfffc4 	addi	r18,r18,-1
   85b30:	a8bffb36 	bltu	r21,r2,85b20 <rx_descriptor_end+0xfff85ac0>
   85b34:	84800415 	stw	r18,16(r16)
   85b38:	9805883a 	mov	r2,r19
   85b3c:	dfc00817 	ldw	ra,32(sp)
   85b40:	ddc00717 	ldw	r23,28(sp)
   85b44:	dd800617 	ldw	r22,24(sp)
   85b48:	dd400517 	ldw	r21,20(sp)
   85b4c:	dd000417 	ldw	r20,16(sp)
   85b50:	dcc00317 	ldw	r19,12(sp)
   85b54:	dc800217 	ldw	r18,8(sp)
   85b58:	dc400117 	ldw	r17,4(sp)
   85b5c:	dc000017 	ldw	r16,0(sp)
   85b60:	dec00904 	addi	sp,sp,36
   85b64:	f800283a 	ret
   85b68:	0005883a 	mov	r2,zero
   85b6c:	003ff306 	br	85b3c <rx_descriptor_end+0xfff85adc>

00085b70 <_dtoa_r>:
   85b70:	20801017 	ldw	r2,64(r4)
   85b74:	deffde04 	addi	sp,sp,-136
   85b78:	df002015 	stw	fp,128(sp)
   85b7c:	dcc01b15 	stw	r19,108(sp)
   85b80:	dc801a15 	stw	r18,104(sp)
   85b84:	dc401915 	stw	r17,100(sp)
   85b88:	dc001815 	stw	r16,96(sp)
   85b8c:	dfc02115 	stw	ra,132(sp)
   85b90:	ddc01f15 	stw	r23,124(sp)
   85b94:	dd801e15 	stw	r22,120(sp)
   85b98:	dd401d15 	stw	r21,116(sp)
   85b9c:	dd001c15 	stw	r20,112(sp)
   85ba0:	d9c00315 	stw	r7,12(sp)
   85ba4:	2039883a 	mov	fp,r4
   85ba8:	3023883a 	mov	r17,r6
   85bac:	2825883a 	mov	r18,r5
   85bb0:	dc002417 	ldw	r16,144(sp)
   85bb4:	3027883a 	mov	r19,r6
   85bb8:	10000826 	beq	r2,zero,85bdc <_dtoa_r+0x6c>
   85bbc:	21801117 	ldw	r6,68(r4)
   85bc0:	00c00044 	movi	r3,1
   85bc4:	100b883a 	mov	r5,r2
   85bc8:	1986983a 	sll	r3,r3,r6
   85bcc:	11800115 	stw	r6,4(r2)
   85bd0:	10c00215 	stw	r3,8(r2)
   85bd4:	0087d840 	call	87d84 <_Bfree>
   85bd8:	e0001015 	stw	zero,64(fp)
   85bdc:	88002e16 	blt	r17,zero,85c98 <_dtoa_r+0x128>
   85be0:	80000015 	stw	zero,0(r16)
   85be4:	889ffc2c 	andhi	r2,r17,32752
   85be8:	00dffc34 	movhi	r3,32752
   85bec:	10c01c26 	beq	r2,r3,85c60 <_dtoa_r+0xf0>
   85bf0:	000d883a 	mov	r6,zero
   85bf4:	000f883a 	mov	r7,zero
   85bf8:	9009883a 	mov	r4,r18
   85bfc:	980b883a 	mov	r5,r19
   85c00:	008d0500 	call	8d050 <__eqdf2>
   85c04:	10002b1e 	bne	r2,zero,85cb4 <_dtoa_r+0x144>
   85c08:	d9c02317 	ldw	r7,140(sp)
   85c0c:	00800044 	movi	r2,1
   85c10:	38800015 	stw	r2,0(r7)
   85c14:	d8802517 	ldw	r2,148(sp)
   85c18:	10019e26 	beq	r2,zero,86294 <_dtoa_r+0x724>
   85c1c:	d8c02517 	ldw	r3,148(sp)
   85c20:	00800274 	movhi	r2,9
   85c24:	1088c444 	addi	r2,r2,8977
   85c28:	18800015 	stw	r2,0(r3)
   85c2c:	10bfffc4 	addi	r2,r2,-1
   85c30:	dfc02117 	ldw	ra,132(sp)
   85c34:	df002017 	ldw	fp,128(sp)
   85c38:	ddc01f17 	ldw	r23,124(sp)
   85c3c:	dd801e17 	ldw	r22,120(sp)
   85c40:	dd401d17 	ldw	r21,116(sp)
   85c44:	dd001c17 	ldw	r20,112(sp)
   85c48:	dcc01b17 	ldw	r19,108(sp)
   85c4c:	dc801a17 	ldw	r18,104(sp)
   85c50:	dc401917 	ldw	r17,100(sp)
   85c54:	dc001817 	ldw	r16,96(sp)
   85c58:	dec02204 	addi	sp,sp,136
   85c5c:	f800283a 	ret
   85c60:	d8c02317 	ldw	r3,140(sp)
   85c64:	0089c3c4 	movi	r2,9999
   85c68:	18800015 	stw	r2,0(r3)
   85c6c:	90017726 	beq	r18,zero,8624c <_dtoa_r+0x6dc>
   85c70:	00800274 	movhi	r2,9
   85c74:	1088d004 	addi	r2,r2,9024
   85c78:	d9002517 	ldw	r4,148(sp)
   85c7c:	203fec26 	beq	r4,zero,85c30 <rx_descriptor_end+0xfff85bd0>
   85c80:	10c000c7 	ldb	r3,3(r2)
   85c84:	1801781e 	bne	r3,zero,86268 <_dtoa_r+0x6f8>
   85c88:	10c000c4 	addi	r3,r2,3
   85c8c:	d9802517 	ldw	r6,148(sp)
   85c90:	30c00015 	stw	r3,0(r6)
   85c94:	003fe606 	br	85c30 <rx_descriptor_end+0xfff85bd0>
   85c98:	04e00034 	movhi	r19,32768
   85c9c:	9cffffc4 	addi	r19,r19,-1
   85ca0:	00800044 	movi	r2,1
   85ca4:	8ce6703a 	and	r19,r17,r19
   85ca8:	80800015 	stw	r2,0(r16)
   85cac:	9823883a 	mov	r17,r19
   85cb0:	003fcc06 	br	85be4 <rx_descriptor_end+0xfff85b84>
   85cb4:	d8800204 	addi	r2,sp,8
   85cb8:	d8800015 	stw	r2,0(sp)
   85cbc:	d9c00104 	addi	r7,sp,4
   85cc0:	900b883a 	mov	r5,r18
   85cc4:	980d883a 	mov	r6,r19
   85cc8:	e009883a 	mov	r4,fp
   85ccc:	8820d53a 	srli	r16,r17,20
   85cd0:	00889700 	call	88970 <__d2b>
   85cd4:	d8800915 	stw	r2,36(sp)
   85cd8:	8001651e 	bne	r16,zero,86270 <_dtoa_r+0x700>
   85cdc:	dd800217 	ldw	r22,8(sp)
   85ce0:	dc000117 	ldw	r16,4(sp)
   85ce4:	00800804 	movi	r2,32
   85ce8:	b421883a 	add	r16,r22,r16
   85cec:	80c10c84 	addi	r3,r16,1074
   85cf0:	10c2d10e 	bge	r2,r3,86838 <_dtoa_r+0xcc8>
   85cf4:	00801004 	movi	r2,64
   85cf8:	81010484 	addi	r4,r16,1042
   85cfc:	10c7c83a 	sub	r3,r2,r3
   85d00:	9108d83a 	srl	r4,r18,r4
   85d04:	88e2983a 	sll	r17,r17,r3
   85d08:	2448b03a 	or	r4,r4,r17
   85d0c:	008e4180 	call	8e418 <__floatunsidf>
   85d10:	017f8434 	movhi	r5,65040
   85d14:	01800044 	movi	r6,1
   85d18:	1009883a 	mov	r4,r2
   85d1c:	194b883a 	add	r5,r3,r5
   85d20:	843fffc4 	addi	r16,r16,-1
   85d24:	d9801115 	stw	r6,68(sp)
   85d28:	000d883a 	mov	r6,zero
   85d2c:	01cffe34 	movhi	r7,16376
   85d30:	008d9c00 	call	8d9c0 <__subdf3>
   85d34:	0198dbf4 	movhi	r6,25455
   85d38:	01cff4f4 	movhi	r7,16339
   85d3c:	3190d844 	addi	r6,r6,17249
   85d40:	39e1e9c4 	addi	r7,r7,-30809
   85d44:	1009883a 	mov	r4,r2
   85d48:	180b883a 	mov	r5,r3
   85d4c:	008d2a80 	call	8d2a8 <__muldf3>
   85d50:	01a2d874 	movhi	r6,35681
   85d54:	01cff1f4 	movhi	r7,16327
   85d58:	31b22cc4 	addi	r6,r6,-14157
   85d5c:	39e28a04 	addi	r7,r7,-30168
   85d60:	180b883a 	mov	r5,r3
   85d64:	1009883a 	mov	r4,r2
   85d68:	008bebc0 	call	8bebc <__adddf3>
   85d6c:	8009883a 	mov	r4,r16
   85d70:	1029883a 	mov	r20,r2
   85d74:	1823883a 	mov	r17,r3
   85d78:	008e33c0 	call	8e33c <__floatsidf>
   85d7c:	019427f4 	movhi	r6,20639
   85d80:	01cff4f4 	movhi	r7,16339
   85d84:	319e7ec4 	addi	r6,r6,31227
   85d88:	39d104c4 	addi	r7,r7,17427
   85d8c:	1009883a 	mov	r4,r2
   85d90:	180b883a 	mov	r5,r3
   85d94:	008d2a80 	call	8d2a8 <__muldf3>
   85d98:	100d883a 	mov	r6,r2
   85d9c:	180f883a 	mov	r7,r3
   85da0:	a009883a 	mov	r4,r20
   85da4:	880b883a 	mov	r5,r17
   85da8:	008bebc0 	call	8bebc <__adddf3>
   85dac:	1009883a 	mov	r4,r2
   85db0:	180b883a 	mov	r5,r3
   85db4:	1029883a 	mov	r20,r2
   85db8:	1823883a 	mov	r17,r3
   85dbc:	008e2bc0 	call	8e2bc <__fixdfsi>
   85dc0:	000d883a 	mov	r6,zero
   85dc4:	000f883a 	mov	r7,zero
   85dc8:	a009883a 	mov	r4,r20
   85dcc:	880b883a 	mov	r5,r17
   85dd0:	d8800515 	stw	r2,20(sp)
   85dd4:	008d1b40 	call	8d1b4 <__ledf2>
   85dd8:	10028716 	blt	r2,zero,867f8 <_dtoa_r+0xc88>
   85ddc:	d8c00517 	ldw	r3,20(sp)
   85de0:	00800584 	movi	r2,22
   85de4:	10c27536 	bltu	r2,r3,867bc <_dtoa_r+0xc4c>
   85de8:	180490fa 	slli	r2,r3,3
   85dec:	00c00274 	movhi	r3,9
   85df0:	18c8eb04 	addi	r3,r3,9132
   85df4:	1885883a 	add	r2,r3,r2
   85df8:	11000017 	ldw	r4,0(r2)
   85dfc:	11400117 	ldw	r5,4(r2)
   85e00:	900d883a 	mov	r6,r18
   85e04:	980f883a 	mov	r7,r19
   85e08:	008d0d80 	call	8d0d8 <__gedf2>
   85e0c:	00828d0e 	bge	zero,r2,86844 <_dtoa_r+0xcd4>
   85e10:	d9000517 	ldw	r4,20(sp)
   85e14:	d8000e15 	stw	zero,56(sp)
   85e18:	213fffc4 	addi	r4,r4,-1
   85e1c:	d9000515 	stw	r4,20(sp)
   85e20:	b42dc83a 	sub	r22,r22,r16
   85e24:	b5bfffc4 	addi	r22,r22,-1
   85e28:	b0026f16 	blt	r22,zero,867e8 <_dtoa_r+0xc78>
   85e2c:	d8000815 	stw	zero,32(sp)
   85e30:	d9c00517 	ldw	r7,20(sp)
   85e34:	38026416 	blt	r7,zero,867c8 <_dtoa_r+0xc58>
   85e38:	b1ed883a 	add	r22,r22,r7
   85e3c:	d9c00d15 	stw	r7,52(sp)
   85e40:	d8000a15 	stw	zero,40(sp)
   85e44:	d9800317 	ldw	r6,12(sp)
   85e48:	00800244 	movi	r2,9
   85e4c:	11811436 	bltu	r2,r6,862a0 <_dtoa_r+0x730>
   85e50:	00800144 	movi	r2,5
   85e54:	1184e10e 	bge	r2,r6,871dc <_dtoa_r+0x166c>
   85e58:	31bfff04 	addi	r6,r6,-4
   85e5c:	d9800315 	stw	r6,12(sp)
   85e60:	0023883a 	mov	r17,zero
   85e64:	d9800317 	ldw	r6,12(sp)
   85e68:	008000c4 	movi	r2,3
   85e6c:	30836726 	beq	r6,r2,86c0c <_dtoa_r+0x109c>
   85e70:	1183410e 	bge	r2,r6,86b78 <_dtoa_r+0x1008>
   85e74:	d9c00317 	ldw	r7,12(sp)
   85e78:	00800104 	movi	r2,4
   85e7c:	38827c26 	beq	r7,r2,86870 <_dtoa_r+0xd00>
   85e80:	00800144 	movi	r2,5
   85e84:	3884c41e 	bne	r7,r2,87198 <_dtoa_r+0x1628>
   85e88:	00800044 	movi	r2,1
   85e8c:	d8800b15 	stw	r2,44(sp)
   85e90:	d8c00517 	ldw	r3,20(sp)
   85e94:	d9002217 	ldw	r4,136(sp)
   85e98:	1907883a 	add	r3,r3,r4
   85e9c:	19800044 	addi	r6,r3,1
   85ea0:	d8c00c15 	stw	r3,48(sp)
   85ea4:	d9800615 	stw	r6,24(sp)
   85ea8:	0183a40e 	bge	zero,r6,86d3c <_dtoa_r+0x11cc>
   85eac:	d9800617 	ldw	r6,24(sp)
   85eb0:	3021883a 	mov	r16,r6
   85eb4:	e0001115 	stw	zero,68(fp)
   85eb8:	008005c4 	movi	r2,23
   85ebc:	1184c92e 	bgeu	r2,r6,871e4 <_dtoa_r+0x1674>
   85ec0:	00c00044 	movi	r3,1
   85ec4:	00800104 	movi	r2,4
   85ec8:	1085883a 	add	r2,r2,r2
   85ecc:	11000504 	addi	r4,r2,20
   85ed0:	180b883a 	mov	r5,r3
   85ed4:	18c00044 	addi	r3,r3,1
   85ed8:	313ffb2e 	bgeu	r6,r4,85ec8 <rx_descriptor_end+0xfff85e68>
   85edc:	e1401115 	stw	r5,68(fp)
   85ee0:	e009883a 	mov	r4,fp
   85ee4:	0087cdc0 	call	87cdc <_Balloc>
   85ee8:	d8800715 	stw	r2,28(sp)
   85eec:	e0801015 	stw	r2,64(fp)
   85ef0:	00800384 	movi	r2,14
   85ef4:	1400f736 	bltu	r2,r16,862d4 <_dtoa_r+0x764>
   85ef8:	8800f626 	beq	r17,zero,862d4 <_dtoa_r+0x764>
   85efc:	d9c00517 	ldw	r7,20(sp)
   85f00:	01c39a0e 	bge	zero,r7,86d6c <_dtoa_r+0x11fc>
   85f04:	388003cc 	andi	r2,r7,15
   85f08:	100490fa 	slli	r2,r2,3
   85f0c:	382bd13a 	srai	r21,r7,4
   85f10:	00c00274 	movhi	r3,9
   85f14:	18c8eb04 	addi	r3,r3,9132
   85f18:	1885883a 	add	r2,r3,r2
   85f1c:	a8c0040c 	andi	r3,r21,16
   85f20:	12400017 	ldw	r9,0(r2)
   85f24:	12000117 	ldw	r8,4(r2)
   85f28:	18037926 	beq	r3,zero,86d10 <_dtoa_r+0x11a0>
   85f2c:	00800274 	movhi	r2,9
   85f30:	1088e104 	addi	r2,r2,9092
   85f34:	11800817 	ldw	r6,32(r2)
   85f38:	11c00917 	ldw	r7,36(r2)
   85f3c:	9009883a 	mov	r4,r18
   85f40:	980b883a 	mov	r5,r19
   85f44:	da001715 	stw	r8,92(sp)
   85f48:	da401615 	stw	r9,88(sp)
   85f4c:	008c7680 	call	8c768 <__divdf3>
   85f50:	da001717 	ldw	r8,92(sp)
   85f54:	da401617 	ldw	r9,88(sp)
   85f58:	ad4003cc 	andi	r21,r21,15
   85f5c:	040000c4 	movi	r16,3
   85f60:	1023883a 	mov	r17,r2
   85f64:	1829883a 	mov	r20,r3
   85f68:	a8001126 	beq	r21,zero,85fb0 <_dtoa_r+0x440>
   85f6c:	05c00274 	movhi	r23,9
   85f70:	bdc8e104 	addi	r23,r23,9092
   85f74:	4805883a 	mov	r2,r9
   85f78:	4007883a 	mov	r3,r8
   85f7c:	a980004c 	andi	r6,r21,1
   85f80:	1009883a 	mov	r4,r2
   85f84:	a82bd07a 	srai	r21,r21,1
   85f88:	180b883a 	mov	r5,r3
   85f8c:	30000426 	beq	r6,zero,85fa0 <_dtoa_r+0x430>
   85f90:	b9800017 	ldw	r6,0(r23)
   85f94:	b9c00117 	ldw	r7,4(r23)
   85f98:	84000044 	addi	r16,r16,1
   85f9c:	008d2a80 	call	8d2a8 <__muldf3>
   85fa0:	bdc00204 	addi	r23,r23,8
   85fa4:	a83ff51e 	bne	r21,zero,85f7c <rx_descriptor_end+0xfff85f1c>
   85fa8:	1013883a 	mov	r9,r2
   85fac:	1811883a 	mov	r8,r3
   85fb0:	480d883a 	mov	r6,r9
   85fb4:	400f883a 	mov	r7,r8
   85fb8:	8809883a 	mov	r4,r17
   85fbc:	a00b883a 	mov	r5,r20
   85fc0:	008c7680 	call	8c768 <__divdf3>
   85fc4:	d8800f15 	stw	r2,60(sp)
   85fc8:	d8c01015 	stw	r3,64(sp)
   85fcc:	d8c00e17 	ldw	r3,56(sp)
   85fd0:	18000626 	beq	r3,zero,85fec <_dtoa_r+0x47c>
   85fd4:	d9000f17 	ldw	r4,60(sp)
   85fd8:	d9401017 	ldw	r5,64(sp)
   85fdc:	000d883a 	mov	r6,zero
   85fe0:	01cffc34 	movhi	r7,16368
   85fe4:	008d1b40 	call	8d1b4 <__ledf2>
   85fe8:	10040b16 	blt	r2,zero,87018 <_dtoa_r+0x14a8>
   85fec:	8009883a 	mov	r4,r16
   85ff0:	008e33c0 	call	8e33c <__floatsidf>
   85ff4:	d9800f17 	ldw	r6,60(sp)
   85ff8:	d9c01017 	ldw	r7,64(sp)
   85ffc:	1009883a 	mov	r4,r2
   86000:	180b883a 	mov	r5,r3
   86004:	008d2a80 	call	8d2a8 <__muldf3>
   86008:	000d883a 	mov	r6,zero
   8600c:	01d00734 	movhi	r7,16412
   86010:	1009883a 	mov	r4,r2
   86014:	180b883a 	mov	r5,r3
   86018:	008bebc0 	call	8bebc <__adddf3>
   8601c:	1021883a 	mov	r16,r2
   86020:	d8800617 	ldw	r2,24(sp)
   86024:	047f3034 	movhi	r17,64704
   86028:	1c63883a 	add	r17,r3,r17
   8602c:	10031826 	beq	r2,zero,86c90 <_dtoa_r+0x1120>
   86030:	d8c00517 	ldw	r3,20(sp)
   86034:	db000617 	ldw	r12,24(sp)
   86038:	d8c01315 	stw	r3,76(sp)
   8603c:	d9000b17 	ldw	r4,44(sp)
   86040:	20038f26 	beq	r4,zero,86e80 <_dtoa_r+0x1310>
   86044:	60bfffc4 	addi	r2,r12,-1
   86048:	100490fa 	slli	r2,r2,3
   8604c:	00c00274 	movhi	r3,9
   86050:	18c8eb04 	addi	r3,r3,9132
   86054:	1885883a 	add	r2,r3,r2
   86058:	11800017 	ldw	r6,0(r2)
   8605c:	11c00117 	ldw	r7,4(r2)
   86060:	d8800717 	ldw	r2,28(sp)
   86064:	0009883a 	mov	r4,zero
   86068:	014ff834 	movhi	r5,16352
   8606c:	db001615 	stw	r12,88(sp)
   86070:	15c00044 	addi	r23,r2,1
   86074:	008c7680 	call	8c768 <__divdf3>
   86078:	800d883a 	mov	r6,r16
   8607c:	880f883a 	mov	r7,r17
   86080:	1009883a 	mov	r4,r2
   86084:	180b883a 	mov	r5,r3
   86088:	008d9c00 	call	8d9c0 <__subdf3>
   8608c:	d9401017 	ldw	r5,64(sp)
   86090:	d9000f17 	ldw	r4,60(sp)
   86094:	102b883a 	mov	r21,r2
   86098:	d8c01215 	stw	r3,72(sp)
   8609c:	008e2bc0 	call	8e2bc <__fixdfsi>
   860a0:	1009883a 	mov	r4,r2
   860a4:	1029883a 	mov	r20,r2
   860a8:	008e33c0 	call	8e33c <__floatsidf>
   860ac:	d9000f17 	ldw	r4,60(sp)
   860b0:	d9401017 	ldw	r5,64(sp)
   860b4:	100d883a 	mov	r6,r2
   860b8:	180f883a 	mov	r7,r3
   860bc:	008d9c00 	call	8d9c0 <__subdf3>
   860c0:	1823883a 	mov	r17,r3
   860c4:	d8c00717 	ldw	r3,28(sp)
   860c8:	d9401217 	ldw	r5,72(sp)
   860cc:	a2000c04 	addi	r8,r20,48
   860d0:	1021883a 	mov	r16,r2
   860d4:	1a000005 	stb	r8,0(r3)
   860d8:	800d883a 	mov	r6,r16
   860dc:	880f883a 	mov	r7,r17
   860e0:	a809883a 	mov	r4,r21
   860e4:	4029883a 	mov	r20,r8
   860e8:	008d0d80 	call	8d0d8 <__gedf2>
   860ec:	00841d16 	blt	zero,r2,87164 <_dtoa_r+0x15f4>
   860f0:	800d883a 	mov	r6,r16
   860f4:	880f883a 	mov	r7,r17
   860f8:	0009883a 	mov	r4,zero
   860fc:	014ffc34 	movhi	r5,16368
   86100:	008d9c00 	call	8d9c0 <__subdf3>
   86104:	d9401217 	ldw	r5,72(sp)
   86108:	100d883a 	mov	r6,r2
   8610c:	180f883a 	mov	r7,r3
   86110:	a809883a 	mov	r4,r21
   86114:	008d0d80 	call	8d0d8 <__gedf2>
   86118:	db001617 	ldw	r12,88(sp)
   8611c:	00840e16 	blt	zero,r2,87158 <_dtoa_r+0x15e8>
   86120:	00800044 	movi	r2,1
   86124:	13006b0e 	bge	r2,r12,862d4 <_dtoa_r+0x764>
   86128:	d9000717 	ldw	r4,28(sp)
   8612c:	dd800f15 	stw	r22,60(sp)
   86130:	dcc01015 	stw	r19,64(sp)
   86134:	2319883a 	add	r12,r4,r12
   86138:	dcc01217 	ldw	r19,72(sp)
   8613c:	602d883a 	mov	r22,r12
   86140:	dc801215 	stw	r18,72(sp)
   86144:	b825883a 	mov	r18,r23
   86148:	00000906 	br	86170 <_dtoa_r+0x600>
   8614c:	008d9c00 	call	8d9c0 <__subdf3>
   86150:	a80d883a 	mov	r6,r21
   86154:	980f883a 	mov	r7,r19
   86158:	1009883a 	mov	r4,r2
   8615c:	180b883a 	mov	r5,r3
   86160:	008d1b40 	call	8d1b4 <__ledf2>
   86164:	1003e816 	blt	r2,zero,87108 <_dtoa_r+0x1598>
   86168:	b825883a 	mov	r18,r23
   8616c:	bd83e926 	beq	r23,r22,87114 <_dtoa_r+0x15a4>
   86170:	a809883a 	mov	r4,r21
   86174:	980b883a 	mov	r5,r19
   86178:	000d883a 	mov	r6,zero
   8617c:	01d00934 	movhi	r7,16420
   86180:	008d2a80 	call	8d2a8 <__muldf3>
   86184:	000d883a 	mov	r6,zero
   86188:	01d00934 	movhi	r7,16420
   8618c:	8009883a 	mov	r4,r16
   86190:	880b883a 	mov	r5,r17
   86194:	102b883a 	mov	r21,r2
   86198:	1827883a 	mov	r19,r3
   8619c:	008d2a80 	call	8d2a8 <__muldf3>
   861a0:	180b883a 	mov	r5,r3
   861a4:	1009883a 	mov	r4,r2
   861a8:	1821883a 	mov	r16,r3
   861ac:	1023883a 	mov	r17,r2
   861b0:	008e2bc0 	call	8e2bc <__fixdfsi>
   861b4:	1009883a 	mov	r4,r2
   861b8:	1029883a 	mov	r20,r2
   861bc:	008e33c0 	call	8e33c <__floatsidf>
   861c0:	8809883a 	mov	r4,r17
   861c4:	800b883a 	mov	r5,r16
   861c8:	100d883a 	mov	r6,r2
   861cc:	180f883a 	mov	r7,r3
   861d0:	008d9c00 	call	8d9c0 <__subdf3>
   861d4:	a5000c04 	addi	r20,r20,48
   861d8:	a80d883a 	mov	r6,r21
   861dc:	980f883a 	mov	r7,r19
   861e0:	1009883a 	mov	r4,r2
   861e4:	180b883a 	mov	r5,r3
   861e8:	95000005 	stb	r20,0(r18)
   861ec:	1021883a 	mov	r16,r2
   861f0:	1823883a 	mov	r17,r3
   861f4:	008d1b40 	call	8d1b4 <__ledf2>
   861f8:	bdc00044 	addi	r23,r23,1
   861fc:	800d883a 	mov	r6,r16
   86200:	880f883a 	mov	r7,r17
   86204:	0009883a 	mov	r4,zero
   86208:	014ffc34 	movhi	r5,16368
   8620c:	103fcf0e 	bge	r2,zero,8614c <rx_descriptor_end+0xfff860ec>
   86210:	d8c01317 	ldw	r3,76(sp)
   86214:	d8c00515 	stw	r3,20(sp)
   86218:	d9400917 	ldw	r5,36(sp)
   8621c:	e009883a 	mov	r4,fp
   86220:	0087d840 	call	87d84 <_Bfree>
   86224:	d9000517 	ldw	r4,20(sp)
   86228:	d9802317 	ldw	r6,140(sp)
   8622c:	d9c02517 	ldw	r7,148(sp)
   86230:	b8000005 	stb	zero,0(r23)
   86234:	20800044 	addi	r2,r4,1
   86238:	30800015 	stw	r2,0(r6)
   8623c:	3802aa26 	beq	r7,zero,86ce8 <_dtoa_r+0x1178>
   86240:	3dc00015 	stw	r23,0(r7)
   86244:	d8800717 	ldw	r2,28(sp)
   86248:	003e7906 	br	85c30 <rx_descriptor_end+0xfff85bd0>
   8624c:	00800434 	movhi	r2,16
   86250:	10bfffc4 	addi	r2,r2,-1
   86254:	88a2703a 	and	r17,r17,r2
   86258:	883e851e 	bne	r17,zero,85c70 <rx_descriptor_end+0xfff85c10>
   8625c:	00800274 	movhi	r2,9
   86260:	1088cd04 	addi	r2,r2,9012
   86264:	003e8406 	br	85c78 <rx_descriptor_end+0xfff85c18>
   86268:	10c00204 	addi	r3,r2,8
   8626c:	003e8706 	br	85c8c <rx_descriptor_end+0xfff85c2c>
   86270:	01400434 	movhi	r5,16
   86274:	297fffc4 	addi	r5,r5,-1
   86278:	994a703a 	and	r5,r19,r5
   8627c:	9009883a 	mov	r4,r18
   86280:	843f0044 	addi	r16,r16,-1023
   86284:	294ffc34 	orhi	r5,r5,16368
   86288:	dd800217 	ldw	r22,8(sp)
   8628c:	d8001115 	stw	zero,68(sp)
   86290:	003ea506 	br	85d28 <rx_descriptor_end+0xfff85cc8>
   86294:	00800274 	movhi	r2,9
   86298:	1088c404 	addi	r2,r2,8976
   8629c:	003e6406 	br	85c30 <rx_descriptor_end+0xfff85bd0>
   862a0:	e0001115 	stw	zero,68(fp)
   862a4:	000b883a 	mov	r5,zero
   862a8:	e009883a 	mov	r4,fp
   862ac:	0087cdc0 	call	87cdc <_Balloc>
   862b0:	01bfffc4 	movi	r6,-1
   862b4:	01c00044 	movi	r7,1
   862b8:	d8800715 	stw	r2,28(sp)
   862bc:	d9800c15 	stw	r6,48(sp)
   862c0:	e0801015 	stw	r2,64(fp)
   862c4:	d8000315 	stw	zero,12(sp)
   862c8:	d9c00b15 	stw	r7,44(sp)
   862cc:	d9800615 	stw	r6,24(sp)
   862d0:	d8002215 	stw	zero,136(sp)
   862d4:	d8800117 	ldw	r2,4(sp)
   862d8:	10008916 	blt	r2,zero,86500 <_dtoa_r+0x990>
   862dc:	d9000517 	ldw	r4,20(sp)
   862e0:	00c00384 	movi	r3,14
   862e4:	19008616 	blt	r3,r4,86500 <_dtoa_r+0x990>
   862e8:	200490fa 	slli	r2,r4,3
   862ec:	00c00274 	movhi	r3,9
   862f0:	d9802217 	ldw	r6,136(sp)
   862f4:	18c8eb04 	addi	r3,r3,9132
   862f8:	1885883a 	add	r2,r3,r2
   862fc:	14000017 	ldw	r16,0(r2)
   86300:	14400117 	ldw	r17,4(r2)
   86304:	30016316 	blt	r6,zero,86894 <_dtoa_r+0xd24>
   86308:	800d883a 	mov	r6,r16
   8630c:	880f883a 	mov	r7,r17
   86310:	9009883a 	mov	r4,r18
   86314:	980b883a 	mov	r5,r19
   86318:	008c7680 	call	8c768 <__divdf3>
   8631c:	180b883a 	mov	r5,r3
   86320:	1009883a 	mov	r4,r2
   86324:	008e2bc0 	call	8e2bc <__fixdfsi>
   86328:	1009883a 	mov	r4,r2
   8632c:	102b883a 	mov	r21,r2
   86330:	008e33c0 	call	8e33c <__floatsidf>
   86334:	800d883a 	mov	r6,r16
   86338:	880f883a 	mov	r7,r17
   8633c:	1009883a 	mov	r4,r2
   86340:	180b883a 	mov	r5,r3
   86344:	008d2a80 	call	8d2a8 <__muldf3>
   86348:	100d883a 	mov	r6,r2
   8634c:	180f883a 	mov	r7,r3
   86350:	9009883a 	mov	r4,r18
   86354:	980b883a 	mov	r5,r19
   86358:	008d9c00 	call	8d9c0 <__subdf3>
   8635c:	d9c00717 	ldw	r7,28(sp)
   86360:	1009883a 	mov	r4,r2
   86364:	a8800c04 	addi	r2,r21,48
   86368:	38800005 	stb	r2,0(r7)
   8636c:	3dc00044 	addi	r23,r7,1
   86370:	d9c00617 	ldw	r7,24(sp)
   86374:	01800044 	movi	r6,1
   86378:	180b883a 	mov	r5,r3
   8637c:	2005883a 	mov	r2,r4
   86380:	39803826 	beq	r7,r6,86464 <_dtoa_r+0x8f4>
   86384:	000d883a 	mov	r6,zero
   86388:	01d00934 	movhi	r7,16420
   8638c:	008d2a80 	call	8d2a8 <__muldf3>
   86390:	000d883a 	mov	r6,zero
   86394:	000f883a 	mov	r7,zero
   86398:	1009883a 	mov	r4,r2
   8639c:	180b883a 	mov	r5,r3
   863a0:	1025883a 	mov	r18,r2
   863a4:	1827883a 	mov	r19,r3
   863a8:	008d0500 	call	8d050 <__eqdf2>
   863ac:	103f9a26 	beq	r2,zero,86218 <rx_descriptor_end+0xfff861b8>
   863b0:	d9c00617 	ldw	r7,24(sp)
   863b4:	d8c00717 	ldw	r3,28(sp)
   863b8:	b829883a 	mov	r20,r23
   863bc:	38bfffc4 	addi	r2,r7,-1
   863c0:	18ad883a 	add	r22,r3,r2
   863c4:	00000a06 	br	863f0 <_dtoa_r+0x880>
   863c8:	008d2a80 	call	8d2a8 <__muldf3>
   863cc:	000d883a 	mov	r6,zero
   863d0:	000f883a 	mov	r7,zero
   863d4:	1009883a 	mov	r4,r2
   863d8:	180b883a 	mov	r5,r3
   863dc:	1025883a 	mov	r18,r2
   863e0:	1827883a 	mov	r19,r3
   863e4:	b829883a 	mov	r20,r23
   863e8:	008d0500 	call	8d050 <__eqdf2>
   863ec:	103f8a26 	beq	r2,zero,86218 <rx_descriptor_end+0xfff861b8>
   863f0:	800d883a 	mov	r6,r16
   863f4:	880f883a 	mov	r7,r17
   863f8:	9009883a 	mov	r4,r18
   863fc:	980b883a 	mov	r5,r19
   86400:	008c7680 	call	8c768 <__divdf3>
   86404:	180b883a 	mov	r5,r3
   86408:	1009883a 	mov	r4,r2
   8640c:	008e2bc0 	call	8e2bc <__fixdfsi>
   86410:	1009883a 	mov	r4,r2
   86414:	102b883a 	mov	r21,r2
   86418:	008e33c0 	call	8e33c <__floatsidf>
   8641c:	800d883a 	mov	r6,r16
   86420:	880f883a 	mov	r7,r17
   86424:	1009883a 	mov	r4,r2
   86428:	180b883a 	mov	r5,r3
   8642c:	008d2a80 	call	8d2a8 <__muldf3>
   86430:	100d883a 	mov	r6,r2
   86434:	180f883a 	mov	r7,r3
   86438:	9009883a 	mov	r4,r18
   8643c:	980b883a 	mov	r5,r19
   86440:	008d9c00 	call	8d9c0 <__subdf3>
   86444:	aa000c04 	addi	r8,r21,48
   86448:	a2000005 	stb	r8,0(r20)
   8644c:	000d883a 	mov	r6,zero
   86450:	01d00934 	movhi	r7,16420
   86454:	1009883a 	mov	r4,r2
   86458:	180b883a 	mov	r5,r3
   8645c:	a5c00044 	addi	r23,r20,1
   86460:	b53fd91e 	bne	r22,r20,863c8 <rx_descriptor_end+0xfff86368>
   86464:	100d883a 	mov	r6,r2
   86468:	180f883a 	mov	r7,r3
   8646c:	1009883a 	mov	r4,r2
   86470:	180b883a 	mov	r5,r3
   86474:	008bebc0 	call	8bebc <__adddf3>
   86478:	100d883a 	mov	r6,r2
   8647c:	180f883a 	mov	r7,r3
   86480:	8009883a 	mov	r4,r16
   86484:	880b883a 	mov	r5,r17
   86488:	1027883a 	mov	r19,r2
   8648c:	1825883a 	mov	r18,r3
   86490:	008d1b40 	call	8d1b4 <__ledf2>
   86494:	10000816 	blt	r2,zero,864b8 <_dtoa_r+0x948>
   86498:	980d883a 	mov	r6,r19
   8649c:	900f883a 	mov	r7,r18
   864a0:	8009883a 	mov	r4,r16
   864a4:	880b883a 	mov	r5,r17
   864a8:	008d0500 	call	8d050 <__eqdf2>
   864ac:	103f5a1e 	bne	r2,zero,86218 <rx_descriptor_end+0xfff861b8>
   864b0:	ad40004c 	andi	r21,r21,1
   864b4:	a83f5826 	beq	r21,zero,86218 <rx_descriptor_end+0xfff861b8>
   864b8:	bd3fffc3 	ldbu	r20,-1(r23)
   864bc:	b8bfffc4 	addi	r2,r23,-1
   864c0:	1007883a 	mov	r3,r2
   864c4:	01400e44 	movi	r5,57
   864c8:	d9800717 	ldw	r6,28(sp)
   864cc:	00000506 	br	864e4 <_dtoa_r+0x974>
   864d0:	18ffffc4 	addi	r3,r3,-1
   864d4:	11824726 	beq	r2,r6,86df4 <_dtoa_r+0x1284>
   864d8:	1d000003 	ldbu	r20,0(r3)
   864dc:	102f883a 	mov	r23,r2
   864e0:	10bfffc4 	addi	r2,r2,-1
   864e4:	a1003fcc 	andi	r4,r20,255
   864e8:	2100201c 	xori	r4,r4,128
   864ec:	213fe004 	addi	r4,r4,-128
   864f0:	217ff726 	beq	r4,r5,864d0 <rx_descriptor_end+0xfff86470>
   864f4:	a2000044 	addi	r8,r20,1
   864f8:	12000005 	stb	r8,0(r2)
   864fc:	003f4606 	br	86218 <rx_descriptor_end+0xfff861b8>
   86500:	d9000b17 	ldw	r4,44(sp)
   86504:	2000c826 	beq	r4,zero,86828 <_dtoa_r+0xcb8>
   86508:	d9800317 	ldw	r6,12(sp)
   8650c:	00c00044 	movi	r3,1
   86510:	1980f90e 	bge	r3,r6,868f8 <_dtoa_r+0xd88>
   86514:	d8800617 	ldw	r2,24(sp)
   86518:	d8c00a17 	ldw	r3,40(sp)
   8651c:	157fffc4 	addi	r21,r2,-1
   86520:	1d41f316 	blt	r3,r21,86cf0 <_dtoa_r+0x1180>
   86524:	1d6bc83a 	sub	r21,r3,r21
   86528:	d9c00617 	ldw	r7,24(sp)
   8652c:	3802aa16 	blt	r7,zero,86fd8 <_dtoa_r+0x1468>
   86530:	dd000817 	ldw	r20,32(sp)
   86534:	d8800617 	ldw	r2,24(sp)
   86538:	d8c00817 	ldw	r3,32(sp)
   8653c:	01400044 	movi	r5,1
   86540:	e009883a 	mov	r4,fp
   86544:	1887883a 	add	r3,r3,r2
   86548:	d8c00815 	stw	r3,32(sp)
   8654c:	b0ad883a 	add	r22,r22,r2
   86550:	00880e80 	call	880e8 <__i2b>
   86554:	1023883a 	mov	r17,r2
   86558:	a0000826 	beq	r20,zero,8657c <_dtoa_r+0xa0c>
   8655c:	0580070e 	bge	zero,r22,8657c <_dtoa_r+0xa0c>
   86560:	a005883a 	mov	r2,r20
   86564:	b500b916 	blt	r22,r20,8684c <_dtoa_r+0xcdc>
   86568:	d9000817 	ldw	r4,32(sp)
   8656c:	a0a9c83a 	sub	r20,r20,r2
   86570:	b0adc83a 	sub	r22,r22,r2
   86574:	2089c83a 	sub	r4,r4,r2
   86578:	d9000815 	stw	r4,32(sp)
   8657c:	d9800a17 	ldw	r6,40(sp)
   86580:	0181810e 	bge	zero,r6,86b88 <_dtoa_r+0x1018>
   86584:	d9c00b17 	ldw	r7,44(sp)
   86588:	3800b326 	beq	r7,zero,86858 <_dtoa_r+0xce8>
   8658c:	a800b226 	beq	r21,zero,86858 <_dtoa_r+0xce8>
   86590:	880b883a 	mov	r5,r17
   86594:	a80d883a 	mov	r6,r21
   86598:	e009883a 	mov	r4,fp
   8659c:	008831c0 	call	8831c <__pow5mult>
   865a0:	d9800917 	ldw	r6,36(sp)
   865a4:	100b883a 	mov	r5,r2
   865a8:	e009883a 	mov	r4,fp
   865ac:	1023883a 	mov	r17,r2
   865b0:	00881240 	call	88124 <__multiply>
   865b4:	1021883a 	mov	r16,r2
   865b8:	d8800a17 	ldw	r2,40(sp)
   865bc:	d9400917 	ldw	r5,36(sp)
   865c0:	e009883a 	mov	r4,fp
   865c4:	1545c83a 	sub	r2,r2,r21
   865c8:	d8800a15 	stw	r2,40(sp)
   865cc:	0087d840 	call	87d84 <_Bfree>
   865d0:	d8c00a17 	ldw	r3,40(sp)
   865d4:	18009f1e 	bne	r3,zero,86854 <_dtoa_r+0xce4>
   865d8:	05c00044 	movi	r23,1
   865dc:	e009883a 	mov	r4,fp
   865e0:	b80b883a 	mov	r5,r23
   865e4:	00880e80 	call	880e8 <__i2b>
   865e8:	d9000d17 	ldw	r4,52(sp)
   865ec:	102b883a 	mov	r21,r2
   865f0:	2000ce26 	beq	r4,zero,8692c <_dtoa_r+0xdbc>
   865f4:	200d883a 	mov	r6,r4
   865f8:	100b883a 	mov	r5,r2
   865fc:	e009883a 	mov	r4,fp
   86600:	008831c0 	call	8831c <__pow5mult>
   86604:	d9800317 	ldw	r6,12(sp)
   86608:	102b883a 	mov	r21,r2
   8660c:	b981810e 	bge	r23,r6,86c14 <_dtoa_r+0x10a4>
   86610:	0027883a 	mov	r19,zero
   86614:	a8800417 	ldw	r2,16(r21)
   86618:	05c00804 	movi	r23,32
   8661c:	10800104 	addi	r2,r2,4
   86620:	1085883a 	add	r2,r2,r2
   86624:	1085883a 	add	r2,r2,r2
   86628:	a885883a 	add	r2,r21,r2
   8662c:	11000017 	ldw	r4,0(r2)
   86630:	0087fd00 	call	87fd0 <__hi0bits>
   86634:	b885c83a 	sub	r2,r23,r2
   86638:	1585883a 	add	r2,r2,r22
   8663c:	108007cc 	andi	r2,r2,31
   86640:	1000b326 	beq	r2,zero,86910 <_dtoa_r+0xda0>
   86644:	00c00804 	movi	r3,32
   86648:	1887c83a 	sub	r3,r3,r2
   8664c:	01000104 	movi	r4,4
   86650:	20c2cd0e 	bge	r4,r3,87188 <_dtoa_r+0x1618>
   86654:	00c00704 	movi	r3,28
   86658:	1885c83a 	sub	r2,r3,r2
   8665c:	d8c00817 	ldw	r3,32(sp)
   86660:	a0a9883a 	add	r20,r20,r2
   86664:	b0ad883a 	add	r22,r22,r2
   86668:	1887883a 	add	r3,r3,r2
   8666c:	d8c00815 	stw	r3,32(sp)
   86670:	d9800817 	ldw	r6,32(sp)
   86674:	0180040e 	bge	zero,r6,86688 <_dtoa_r+0xb18>
   86678:	800b883a 	mov	r5,r16
   8667c:	e009883a 	mov	r4,fp
   86680:	008845c0 	call	8845c <__lshift>
   86684:	1021883a 	mov	r16,r2
   86688:	0580050e 	bge	zero,r22,866a0 <_dtoa_r+0xb30>
   8668c:	a80b883a 	mov	r5,r21
   86690:	b00d883a 	mov	r6,r22
   86694:	e009883a 	mov	r4,fp
   86698:	008845c0 	call	8845c <__lshift>
   8669c:	102b883a 	mov	r21,r2
   866a0:	d9c00e17 	ldw	r7,56(sp)
   866a4:	3801211e 	bne	r7,zero,86b2c <_dtoa_r+0xfbc>
   866a8:	d9800617 	ldw	r6,24(sp)
   866ac:	0181380e 	bge	zero,r6,86b90 <_dtoa_r+0x1020>
   866b0:	d8c00b17 	ldw	r3,44(sp)
   866b4:	1800ab1e 	bne	r3,zero,86964 <_dtoa_r+0xdf4>
   866b8:	dc800717 	ldw	r18,28(sp)
   866bc:	dcc00617 	ldw	r19,24(sp)
   866c0:	9029883a 	mov	r20,r18
   866c4:	00000206 	br	866d0 <_dtoa_r+0xb60>
   866c8:	0087dac0 	call	87dac <__multadd>
   866cc:	1021883a 	mov	r16,r2
   866d0:	a80b883a 	mov	r5,r21
   866d4:	8009883a 	mov	r4,r16
   866d8:	00859700 	call	85970 <quorem>
   866dc:	10800c04 	addi	r2,r2,48
   866e0:	90800005 	stb	r2,0(r18)
   866e4:	94800044 	addi	r18,r18,1
   866e8:	9507c83a 	sub	r3,r18,r20
   866ec:	000f883a 	mov	r7,zero
   866f0:	01800284 	movi	r6,10
   866f4:	800b883a 	mov	r5,r16
   866f8:	e009883a 	mov	r4,fp
   866fc:	1cfff216 	blt	r3,r19,866c8 <rx_descriptor_end+0xfff86668>
   86700:	1011883a 	mov	r8,r2
   86704:	d8800617 	ldw	r2,24(sp)
   86708:	0082370e 	bge	zero,r2,86fe8 <_dtoa_r+0x1478>
   8670c:	d9000717 	ldw	r4,28(sp)
   86710:	0025883a 	mov	r18,zero
   86714:	20af883a 	add	r23,r4,r2
   86718:	01800044 	movi	r6,1
   8671c:	800b883a 	mov	r5,r16
   86720:	e009883a 	mov	r4,fp
   86724:	da001715 	stw	r8,92(sp)
   86728:	008845c0 	call	8845c <__lshift>
   8672c:	a80b883a 	mov	r5,r21
   86730:	1009883a 	mov	r4,r2
   86734:	d8800915 	stw	r2,36(sp)
   86738:	00885a40 	call	885a4 <__mcmp>
   8673c:	da001717 	ldw	r8,92(sp)
   86740:	0081800e 	bge	zero,r2,86d44 <_dtoa_r+0x11d4>
   86744:	b93fffc3 	ldbu	r4,-1(r23)
   86748:	b8bfffc4 	addi	r2,r23,-1
   8674c:	1007883a 	mov	r3,r2
   86750:	01800e44 	movi	r6,57
   86754:	d9c00717 	ldw	r7,28(sp)
   86758:	00000506 	br	86770 <_dtoa_r+0xc00>
   8675c:	18ffffc4 	addi	r3,r3,-1
   86760:	11c12326 	beq	r2,r7,86bf0 <_dtoa_r+0x1080>
   86764:	19000003 	ldbu	r4,0(r3)
   86768:	102f883a 	mov	r23,r2
   8676c:	10bfffc4 	addi	r2,r2,-1
   86770:	21403fcc 	andi	r5,r4,255
   86774:	2940201c 	xori	r5,r5,128
   86778:	297fe004 	addi	r5,r5,-128
   8677c:	29bff726 	beq	r5,r6,8675c <rx_descriptor_end+0xfff866fc>
   86780:	21000044 	addi	r4,r4,1
   86784:	11000005 	stb	r4,0(r2)
   86788:	a80b883a 	mov	r5,r21
   8678c:	e009883a 	mov	r4,fp
   86790:	0087d840 	call	87d84 <_Bfree>
   86794:	883ea026 	beq	r17,zero,86218 <rx_descriptor_end+0xfff861b8>
   86798:	90000426 	beq	r18,zero,867ac <_dtoa_r+0xc3c>
   8679c:	94400326 	beq	r18,r17,867ac <_dtoa_r+0xc3c>
   867a0:	900b883a 	mov	r5,r18
   867a4:	e009883a 	mov	r4,fp
   867a8:	0087d840 	call	87d84 <_Bfree>
   867ac:	880b883a 	mov	r5,r17
   867b0:	e009883a 	mov	r4,fp
   867b4:	0087d840 	call	87d84 <_Bfree>
   867b8:	003e9706 	br	86218 <rx_descriptor_end+0xfff861b8>
   867bc:	01800044 	movi	r6,1
   867c0:	d9800e15 	stw	r6,56(sp)
   867c4:	003d9606 	br	85e20 <rx_descriptor_end+0xfff85dc0>
   867c8:	d8800817 	ldw	r2,32(sp)
   867cc:	d8c00517 	ldw	r3,20(sp)
   867d0:	d8000d15 	stw	zero,52(sp)
   867d4:	10c5c83a 	sub	r2,r2,r3
   867d8:	00c9c83a 	sub	r4,zero,r3
   867dc:	d8800815 	stw	r2,32(sp)
   867e0:	d9000a15 	stw	r4,40(sp)
   867e4:	003d9706 	br	85e44 <rx_descriptor_end+0xfff85de4>
   867e8:	05adc83a 	sub	r22,zero,r22
   867ec:	dd800815 	stw	r22,32(sp)
   867f0:	002d883a 	mov	r22,zero
   867f4:	003d8e06 	br	85e30 <rx_descriptor_end+0xfff85dd0>
   867f8:	d9000517 	ldw	r4,20(sp)
   867fc:	008e33c0 	call	8e33c <__floatsidf>
   86800:	100d883a 	mov	r6,r2
   86804:	180f883a 	mov	r7,r3
   86808:	a009883a 	mov	r4,r20
   8680c:	880b883a 	mov	r5,r17
   86810:	008d0500 	call	8d050 <__eqdf2>
   86814:	103d7126 	beq	r2,zero,85ddc <rx_descriptor_end+0xfff85d7c>
   86818:	d9c00517 	ldw	r7,20(sp)
   8681c:	39ffffc4 	addi	r7,r7,-1
   86820:	d9c00515 	stw	r7,20(sp)
   86824:	003d6d06 	br	85ddc <rx_descriptor_end+0xfff85d7c>
   86828:	dd400a17 	ldw	r21,40(sp)
   8682c:	dd000817 	ldw	r20,32(sp)
   86830:	0023883a 	mov	r17,zero
   86834:	003f4806 	br	86558 <rx_descriptor_end+0xfff864f8>
   86838:	10e3c83a 	sub	r17,r2,r3
   8683c:	9448983a 	sll	r4,r18,r17
   86840:	003d3206 	br	85d0c <rx_descriptor_end+0xfff85cac>
   86844:	d8000e15 	stw	zero,56(sp)
   86848:	003d7506 	br	85e20 <rx_descriptor_end+0xfff85dc0>
   8684c:	b005883a 	mov	r2,r22
   86850:	003f4506 	br	86568 <rx_descriptor_end+0xfff86508>
   86854:	dc000915 	stw	r16,36(sp)
   86858:	d9800a17 	ldw	r6,40(sp)
   8685c:	d9400917 	ldw	r5,36(sp)
   86860:	e009883a 	mov	r4,fp
   86864:	008831c0 	call	8831c <__pow5mult>
   86868:	1021883a 	mov	r16,r2
   8686c:	003f5a06 	br	865d8 <rx_descriptor_end+0xfff86578>
   86870:	01c00044 	movi	r7,1
   86874:	d9c00b15 	stw	r7,44(sp)
   86878:	d8802217 	ldw	r2,136(sp)
   8687c:	0081280e 	bge	zero,r2,86d20 <_dtoa_r+0x11b0>
   86880:	100d883a 	mov	r6,r2
   86884:	1021883a 	mov	r16,r2
   86888:	d8800c15 	stw	r2,48(sp)
   8688c:	d8800615 	stw	r2,24(sp)
   86890:	003d8806 	br	85eb4 <rx_descriptor_end+0xfff85e54>
   86894:	d8800617 	ldw	r2,24(sp)
   86898:	00be9b16 	blt	zero,r2,86308 <rx_descriptor_end+0xfff862a8>
   8689c:	10010f1e 	bne	r2,zero,86cdc <_dtoa_r+0x116c>
   868a0:	880b883a 	mov	r5,r17
   868a4:	000d883a 	mov	r6,zero
   868a8:	01d00534 	movhi	r7,16404
   868ac:	8009883a 	mov	r4,r16
   868b0:	008d2a80 	call	8d2a8 <__muldf3>
   868b4:	900d883a 	mov	r6,r18
   868b8:	980f883a 	mov	r7,r19
   868bc:	1009883a 	mov	r4,r2
   868c0:	180b883a 	mov	r5,r3
   868c4:	008d0d80 	call	8d0d8 <__gedf2>
   868c8:	002b883a 	mov	r21,zero
   868cc:	0023883a 	mov	r17,zero
   868d0:	1000bf16 	blt	r2,zero,86bd0 <_dtoa_r+0x1060>
   868d4:	d9802217 	ldw	r6,136(sp)
   868d8:	ddc00717 	ldw	r23,28(sp)
   868dc:	018c303a 	nor	r6,zero,r6
   868e0:	d9800515 	stw	r6,20(sp)
   868e4:	a80b883a 	mov	r5,r21
   868e8:	e009883a 	mov	r4,fp
   868ec:	0087d840 	call	87d84 <_Bfree>
   868f0:	883e4926 	beq	r17,zero,86218 <rx_descriptor_end+0xfff861b8>
   868f4:	003fad06 	br	867ac <rx_descriptor_end+0xfff8674c>
   868f8:	d9c01117 	ldw	r7,68(sp)
   868fc:	3801bc26 	beq	r7,zero,86ff0 <_dtoa_r+0x1480>
   86900:	10810cc4 	addi	r2,r2,1075
   86904:	dd400a17 	ldw	r21,40(sp)
   86908:	dd000817 	ldw	r20,32(sp)
   8690c:	003f0a06 	br	86538 <rx_descriptor_end+0xfff864d8>
   86910:	00800704 	movi	r2,28
   86914:	d9000817 	ldw	r4,32(sp)
   86918:	a0a9883a 	add	r20,r20,r2
   8691c:	b0ad883a 	add	r22,r22,r2
   86920:	2089883a 	add	r4,r4,r2
   86924:	d9000815 	stw	r4,32(sp)
   86928:	003f5106 	br	86670 <rx_descriptor_end+0xfff86610>
   8692c:	d8c00317 	ldw	r3,12(sp)
   86930:	b8c1fc0e 	bge	r23,r3,87124 <_dtoa_r+0x15b4>
   86934:	0027883a 	mov	r19,zero
   86938:	b805883a 	mov	r2,r23
   8693c:	003f3e06 	br	86638 <rx_descriptor_end+0xfff865d8>
   86940:	880b883a 	mov	r5,r17
   86944:	e009883a 	mov	r4,fp
   86948:	000f883a 	mov	r7,zero
   8694c:	01800284 	movi	r6,10
   86950:	0087dac0 	call	87dac <__multadd>
   86954:	d9000c17 	ldw	r4,48(sp)
   86958:	1023883a 	mov	r17,r2
   8695c:	0102040e 	bge	zero,r4,87170 <_dtoa_r+0x1600>
   86960:	d9000615 	stw	r4,24(sp)
   86964:	0500050e 	bge	zero,r20,8697c <_dtoa_r+0xe0c>
   86968:	880b883a 	mov	r5,r17
   8696c:	a00d883a 	mov	r6,r20
   86970:	e009883a 	mov	r4,fp
   86974:	008845c0 	call	8845c <__lshift>
   86978:	1023883a 	mov	r17,r2
   8697c:	9801241e 	bne	r19,zero,86e10 <_dtoa_r+0x12a0>
   86980:	8829883a 	mov	r20,r17
   86984:	d9000617 	ldw	r4,24(sp)
   86988:	dcc00717 	ldw	r19,28(sp)
   8698c:	9480004c 	andi	r18,r18,1
   86990:	20bfffc4 	addi	r2,r4,-1
   86994:	9885883a 	add	r2,r19,r2
   86998:	d8800415 	stw	r2,16(sp)
   8699c:	dc800615 	stw	r18,24(sp)
   869a0:	a80b883a 	mov	r5,r21
   869a4:	8009883a 	mov	r4,r16
   869a8:	00859700 	call	85970 <quorem>
   869ac:	880b883a 	mov	r5,r17
   869b0:	8009883a 	mov	r4,r16
   869b4:	102f883a 	mov	r23,r2
   869b8:	00885a40 	call	885a4 <__mcmp>
   869bc:	a80b883a 	mov	r5,r21
   869c0:	a00d883a 	mov	r6,r20
   869c4:	e009883a 	mov	r4,fp
   869c8:	102d883a 	mov	r22,r2
   869cc:	00886040 	call	88604 <__mdiff>
   869d0:	1007883a 	mov	r3,r2
   869d4:	10800317 	ldw	r2,12(r2)
   869d8:	bc800c04 	addi	r18,r23,48
   869dc:	180b883a 	mov	r5,r3
   869e0:	10004e1e 	bne	r2,zero,86b1c <_dtoa_r+0xfac>
   869e4:	8009883a 	mov	r4,r16
   869e8:	d8c01615 	stw	r3,88(sp)
   869ec:	00885a40 	call	885a4 <__mcmp>
   869f0:	d8c01617 	ldw	r3,88(sp)
   869f4:	e009883a 	mov	r4,fp
   869f8:	d8801615 	stw	r2,88(sp)
   869fc:	180b883a 	mov	r5,r3
   86a00:	0087d840 	call	87d84 <_Bfree>
   86a04:	d8801617 	ldw	r2,88(sp)
   86a08:	1000041e 	bne	r2,zero,86a1c <_dtoa_r+0xeac>
   86a0c:	d9800317 	ldw	r6,12(sp)
   86a10:	3000021e 	bne	r6,zero,86a1c <_dtoa_r+0xeac>
   86a14:	d8c00617 	ldw	r3,24(sp)
   86a18:	18003726 	beq	r3,zero,86af8 <_dtoa_r+0xf88>
   86a1c:	b0002016 	blt	r22,zero,86aa0 <_dtoa_r+0xf30>
   86a20:	b000041e 	bne	r22,zero,86a34 <_dtoa_r+0xec4>
   86a24:	d9000317 	ldw	r4,12(sp)
   86a28:	2000021e 	bne	r4,zero,86a34 <_dtoa_r+0xec4>
   86a2c:	d8c00617 	ldw	r3,24(sp)
   86a30:	18001b26 	beq	r3,zero,86aa0 <_dtoa_r+0xf30>
   86a34:	00810716 	blt	zero,r2,86e54 <_dtoa_r+0x12e4>
   86a38:	d8c00417 	ldw	r3,16(sp)
   86a3c:	9d800044 	addi	r22,r19,1
   86a40:	9c800005 	stb	r18,0(r19)
   86a44:	b02f883a 	mov	r23,r22
   86a48:	98c10626 	beq	r19,r3,86e64 <_dtoa_r+0x12f4>
   86a4c:	800b883a 	mov	r5,r16
   86a50:	000f883a 	mov	r7,zero
   86a54:	01800284 	movi	r6,10
   86a58:	e009883a 	mov	r4,fp
   86a5c:	0087dac0 	call	87dac <__multadd>
   86a60:	1021883a 	mov	r16,r2
   86a64:	000f883a 	mov	r7,zero
   86a68:	01800284 	movi	r6,10
   86a6c:	880b883a 	mov	r5,r17
   86a70:	e009883a 	mov	r4,fp
   86a74:	8d002526 	beq	r17,r20,86b0c <_dtoa_r+0xf9c>
   86a78:	0087dac0 	call	87dac <__multadd>
   86a7c:	a00b883a 	mov	r5,r20
   86a80:	000f883a 	mov	r7,zero
   86a84:	01800284 	movi	r6,10
   86a88:	e009883a 	mov	r4,fp
   86a8c:	1023883a 	mov	r17,r2
   86a90:	0087dac0 	call	87dac <__multadd>
   86a94:	1029883a 	mov	r20,r2
   86a98:	b027883a 	mov	r19,r22
   86a9c:	003fc006 	br	869a0 <rx_descriptor_end+0xfff86940>
   86aa0:	9011883a 	mov	r8,r18
   86aa4:	00800e0e 	bge	zero,r2,86ae0 <_dtoa_r+0xf70>
   86aa8:	800b883a 	mov	r5,r16
   86aac:	01800044 	movi	r6,1
   86ab0:	e009883a 	mov	r4,fp
   86ab4:	da001715 	stw	r8,92(sp)
   86ab8:	008845c0 	call	8845c <__lshift>
   86abc:	a80b883a 	mov	r5,r21
   86ac0:	1009883a 	mov	r4,r2
   86ac4:	1021883a 	mov	r16,r2
   86ac8:	00885a40 	call	885a4 <__mcmp>
   86acc:	da001717 	ldw	r8,92(sp)
   86ad0:	0081960e 	bge	zero,r2,8712c <_dtoa_r+0x15bc>
   86ad4:	00800e44 	movi	r2,57
   86ad8:	40817026 	beq	r8,r2,8709c <_dtoa_r+0x152c>
   86adc:	ba000c44 	addi	r8,r23,49
   86ae0:	8825883a 	mov	r18,r17
   86ae4:	9dc00044 	addi	r23,r19,1
   86ae8:	9a000005 	stb	r8,0(r19)
   86aec:	a023883a 	mov	r17,r20
   86af0:	dc000915 	stw	r16,36(sp)
   86af4:	003f2406 	br	86788 <rx_descriptor_end+0xfff86728>
   86af8:	00800e44 	movi	r2,57
   86afc:	9011883a 	mov	r8,r18
   86b00:	90816626 	beq	r18,r2,8709c <_dtoa_r+0x152c>
   86b04:	05bff516 	blt	zero,r22,86adc <rx_descriptor_end+0xfff86a7c>
   86b08:	003ff506 	br	86ae0 <rx_descriptor_end+0xfff86a80>
   86b0c:	0087dac0 	call	87dac <__multadd>
   86b10:	1023883a 	mov	r17,r2
   86b14:	1029883a 	mov	r20,r2
   86b18:	003fdf06 	br	86a98 <rx_descriptor_end+0xfff86a38>
   86b1c:	e009883a 	mov	r4,fp
   86b20:	0087d840 	call	87d84 <_Bfree>
   86b24:	00800044 	movi	r2,1
   86b28:	003fbc06 	br	86a1c <rx_descriptor_end+0xfff869bc>
   86b2c:	a80b883a 	mov	r5,r21
   86b30:	8009883a 	mov	r4,r16
   86b34:	00885a40 	call	885a4 <__mcmp>
   86b38:	103edb0e 	bge	r2,zero,866a8 <rx_descriptor_end+0xfff86648>
   86b3c:	800b883a 	mov	r5,r16
   86b40:	000f883a 	mov	r7,zero
   86b44:	01800284 	movi	r6,10
   86b48:	e009883a 	mov	r4,fp
   86b4c:	0087dac0 	call	87dac <__multadd>
   86b50:	1021883a 	mov	r16,r2
   86b54:	d8800517 	ldw	r2,20(sp)
   86b58:	d8c00b17 	ldw	r3,44(sp)
   86b5c:	10bfffc4 	addi	r2,r2,-1
   86b60:	d8800515 	stw	r2,20(sp)
   86b64:	183f761e 	bne	r3,zero,86940 <rx_descriptor_end+0xfff868e0>
   86b68:	d9000c17 	ldw	r4,48(sp)
   86b6c:	0101730e 	bge	zero,r4,8713c <_dtoa_r+0x15cc>
   86b70:	d9000615 	stw	r4,24(sp)
   86b74:	003ed006 	br	866b8 <rx_descriptor_end+0xfff86658>
   86b78:	00800084 	movi	r2,2
   86b7c:	3081861e 	bne	r6,r2,87198 <_dtoa_r+0x1628>
   86b80:	d8000b15 	stw	zero,44(sp)
   86b84:	003f3c06 	br	86878 <rx_descriptor_end+0xfff86818>
   86b88:	dc000917 	ldw	r16,36(sp)
   86b8c:	003e9206 	br	865d8 <rx_descriptor_end+0xfff86578>
   86b90:	d9c00317 	ldw	r7,12(sp)
   86b94:	00800084 	movi	r2,2
   86b98:	11fec50e 	bge	r2,r7,866b0 <rx_descriptor_end+0xfff86650>
   86b9c:	d9000617 	ldw	r4,24(sp)
   86ba0:	20013c1e 	bne	r4,zero,87094 <_dtoa_r+0x1524>
   86ba4:	a80b883a 	mov	r5,r21
   86ba8:	000f883a 	mov	r7,zero
   86bac:	01800144 	movi	r6,5
   86bb0:	e009883a 	mov	r4,fp
   86bb4:	0087dac0 	call	87dac <__multadd>
   86bb8:	100b883a 	mov	r5,r2
   86bbc:	8009883a 	mov	r4,r16
   86bc0:	102b883a 	mov	r21,r2
   86bc4:	00885a40 	call	885a4 <__mcmp>
   86bc8:	dc000915 	stw	r16,36(sp)
   86bcc:	00bf410e 	bge	zero,r2,868d4 <rx_descriptor_end+0xfff86874>
   86bd0:	d9c00717 	ldw	r7,28(sp)
   86bd4:	00800c44 	movi	r2,49
   86bd8:	38800005 	stb	r2,0(r7)
   86bdc:	d8800517 	ldw	r2,20(sp)
   86be0:	3dc00044 	addi	r23,r7,1
   86be4:	10800044 	addi	r2,r2,1
   86be8:	d8800515 	stw	r2,20(sp)
   86bec:	003f3d06 	br	868e4 <rx_descriptor_end+0xfff86884>
   86bf0:	d9800517 	ldw	r6,20(sp)
   86bf4:	d9c00717 	ldw	r7,28(sp)
   86bf8:	00800c44 	movi	r2,49
   86bfc:	31800044 	addi	r6,r6,1
   86c00:	d9800515 	stw	r6,20(sp)
   86c04:	38800005 	stb	r2,0(r7)
   86c08:	003edf06 	br	86788 <rx_descriptor_end+0xfff86728>
   86c0c:	d8000b15 	stw	zero,44(sp)
   86c10:	003c9f06 	br	85e90 <rx_descriptor_end+0xfff85e30>
   86c14:	903e7e1e 	bne	r18,zero,86610 <rx_descriptor_end+0xfff865b0>
   86c18:	00800434 	movhi	r2,16
   86c1c:	10bfffc4 	addi	r2,r2,-1
   86c20:	9884703a 	and	r2,r19,r2
   86c24:	1000ea1e 	bne	r2,zero,86fd0 <_dtoa_r+0x1460>
   86c28:	9cdffc2c 	andhi	r19,r19,32752
   86c2c:	9800e826 	beq	r19,zero,86fd0 <_dtoa_r+0x1460>
   86c30:	d9c00817 	ldw	r7,32(sp)
   86c34:	b5800044 	addi	r22,r22,1
   86c38:	04c00044 	movi	r19,1
   86c3c:	39c00044 	addi	r7,r7,1
   86c40:	d9c00815 	stw	r7,32(sp)
   86c44:	d8800d17 	ldw	r2,52(sp)
   86c48:	103e721e 	bne	r2,zero,86614 <rx_descriptor_end+0xfff865b4>
   86c4c:	00800044 	movi	r2,1
   86c50:	003e7906 	br	86638 <rx_descriptor_end+0xfff865d8>
   86c54:	8009883a 	mov	r4,r16
   86c58:	008e33c0 	call	8e33c <__floatsidf>
   86c5c:	d9800f17 	ldw	r6,60(sp)
   86c60:	d9c01017 	ldw	r7,64(sp)
   86c64:	1009883a 	mov	r4,r2
   86c68:	180b883a 	mov	r5,r3
   86c6c:	008d2a80 	call	8d2a8 <__muldf3>
   86c70:	000d883a 	mov	r6,zero
   86c74:	01d00734 	movhi	r7,16412
   86c78:	1009883a 	mov	r4,r2
   86c7c:	180b883a 	mov	r5,r3
   86c80:	008bebc0 	call	8bebc <__adddf3>
   86c84:	047f3034 	movhi	r17,64704
   86c88:	1021883a 	mov	r16,r2
   86c8c:	1c63883a 	add	r17,r3,r17
   86c90:	d9000f17 	ldw	r4,60(sp)
   86c94:	d9401017 	ldw	r5,64(sp)
   86c98:	000d883a 	mov	r6,zero
   86c9c:	01d00534 	movhi	r7,16404
   86ca0:	008d9c00 	call	8d9c0 <__subdf3>
   86ca4:	800d883a 	mov	r6,r16
   86ca8:	880f883a 	mov	r7,r17
   86cac:	1009883a 	mov	r4,r2
   86cb0:	180b883a 	mov	r5,r3
   86cb4:	102b883a 	mov	r21,r2
   86cb8:	1829883a 	mov	r20,r3
   86cbc:	008d0d80 	call	8d0d8 <__gedf2>
   86cc0:	00806c16 	blt	zero,r2,86e74 <_dtoa_r+0x1304>
   86cc4:	89e0003c 	xorhi	r7,r17,32768
   86cc8:	800d883a 	mov	r6,r16
   86ccc:	a809883a 	mov	r4,r21
   86cd0:	a00b883a 	mov	r5,r20
   86cd4:	008d1b40 	call	8d1b4 <__ledf2>
   86cd8:	103d7e0e 	bge	r2,zero,862d4 <rx_descriptor_end+0xfff86274>
   86cdc:	002b883a 	mov	r21,zero
   86ce0:	0023883a 	mov	r17,zero
   86ce4:	003efb06 	br	868d4 <rx_descriptor_end+0xfff86874>
   86ce8:	d8800717 	ldw	r2,28(sp)
   86cec:	003bd006 	br	85c30 <rx_descriptor_end+0xfff85bd0>
   86cf0:	d9000a17 	ldw	r4,40(sp)
   86cf4:	d9800d17 	ldw	r6,52(sp)
   86cf8:	dd400a15 	stw	r21,40(sp)
   86cfc:	a905c83a 	sub	r2,r21,r4
   86d00:	308d883a 	add	r6,r6,r2
   86d04:	d9800d15 	stw	r6,52(sp)
   86d08:	002b883a 	mov	r21,zero
   86d0c:	003e0606 	br	86528 <rx_descriptor_end+0xfff864c8>
   86d10:	9023883a 	mov	r17,r18
   86d14:	9829883a 	mov	r20,r19
   86d18:	04000084 	movi	r16,2
   86d1c:	003c9206 	br	85f68 <rx_descriptor_end+0xfff85f08>
   86d20:	04000044 	movi	r16,1
   86d24:	dc000c15 	stw	r16,48(sp)
   86d28:	dc000615 	stw	r16,24(sp)
   86d2c:	dc002215 	stw	r16,136(sp)
   86d30:	e0001115 	stw	zero,68(fp)
   86d34:	000b883a 	mov	r5,zero
   86d38:	003c6906 	br	85ee0 <rx_descriptor_end+0xfff85e80>
   86d3c:	3021883a 	mov	r16,r6
   86d40:	003ffb06 	br	86d30 <rx_descriptor_end+0xfff86cd0>
   86d44:	1000021e 	bne	r2,zero,86d50 <_dtoa_r+0x11e0>
   86d48:	4200004c 	andi	r8,r8,1
   86d4c:	403e7d1e 	bne	r8,zero,86744 <rx_descriptor_end+0xfff866e4>
   86d50:	01000c04 	movi	r4,48
   86d54:	00000106 	br	86d5c <_dtoa_r+0x11ec>
   86d58:	102f883a 	mov	r23,r2
   86d5c:	b8bfffc4 	addi	r2,r23,-1
   86d60:	10c00007 	ldb	r3,0(r2)
   86d64:	193ffc26 	beq	r3,r4,86d58 <rx_descriptor_end+0xfff86cf8>
   86d68:	003e8706 	br	86788 <rx_descriptor_end+0xfff86728>
   86d6c:	d8800517 	ldw	r2,20(sp)
   86d70:	00a3c83a 	sub	r17,zero,r2
   86d74:	8800a426 	beq	r17,zero,87008 <_dtoa_r+0x1498>
   86d78:	888003cc 	andi	r2,r17,15
   86d7c:	100490fa 	slli	r2,r2,3
   86d80:	00c00274 	movhi	r3,9
   86d84:	18c8eb04 	addi	r3,r3,9132
   86d88:	1885883a 	add	r2,r3,r2
   86d8c:	11800017 	ldw	r6,0(r2)
   86d90:	11c00117 	ldw	r7,4(r2)
   86d94:	9009883a 	mov	r4,r18
   86d98:	980b883a 	mov	r5,r19
   86d9c:	8823d13a 	srai	r17,r17,4
   86da0:	008d2a80 	call	8d2a8 <__muldf3>
   86da4:	d8800f15 	stw	r2,60(sp)
   86da8:	d8c01015 	stw	r3,64(sp)
   86dac:	8800e826 	beq	r17,zero,87150 <_dtoa_r+0x15e0>
   86db0:	05000274 	movhi	r20,9
   86db4:	a508e104 	addi	r20,r20,9092
   86db8:	04000084 	movi	r16,2
   86dbc:	8980004c 	andi	r6,r17,1
   86dc0:	1009883a 	mov	r4,r2
   86dc4:	8823d07a 	srai	r17,r17,1
   86dc8:	180b883a 	mov	r5,r3
   86dcc:	30000426 	beq	r6,zero,86de0 <_dtoa_r+0x1270>
   86dd0:	a1800017 	ldw	r6,0(r20)
   86dd4:	a1c00117 	ldw	r7,4(r20)
   86dd8:	84000044 	addi	r16,r16,1
   86ddc:	008d2a80 	call	8d2a8 <__muldf3>
   86de0:	a5000204 	addi	r20,r20,8
   86de4:	883ff51e 	bne	r17,zero,86dbc <rx_descriptor_end+0xfff86d5c>
   86de8:	d8800f15 	stw	r2,60(sp)
   86dec:	d8c01015 	stw	r3,64(sp)
   86df0:	003c7606 	br	85fcc <rx_descriptor_end+0xfff85f6c>
   86df4:	00c00c04 	movi	r3,48
   86df8:	10c00005 	stb	r3,0(r2)
   86dfc:	d8c00517 	ldw	r3,20(sp)
   86e00:	bd3fffc3 	ldbu	r20,-1(r23)
   86e04:	18c00044 	addi	r3,r3,1
   86e08:	d8c00515 	stw	r3,20(sp)
   86e0c:	003db906 	br	864f4 <rx_descriptor_end+0xfff86494>
   86e10:	89400117 	ldw	r5,4(r17)
   86e14:	e009883a 	mov	r4,fp
   86e18:	0087cdc0 	call	87cdc <_Balloc>
   86e1c:	89800417 	ldw	r6,16(r17)
   86e20:	89400304 	addi	r5,r17,12
   86e24:	11000304 	addi	r4,r2,12
   86e28:	31800084 	addi	r6,r6,2
   86e2c:	318d883a 	add	r6,r6,r6
   86e30:	318d883a 	add	r6,r6,r6
   86e34:	1027883a 	mov	r19,r2
   86e38:	0087b940 	call	87b94 <memcpy>
   86e3c:	01800044 	movi	r6,1
   86e40:	980b883a 	mov	r5,r19
   86e44:	e009883a 	mov	r4,fp
   86e48:	008845c0 	call	8845c <__lshift>
   86e4c:	1029883a 	mov	r20,r2
   86e50:	003ecc06 	br	86984 <rx_descriptor_end+0xfff86924>
   86e54:	00800e44 	movi	r2,57
   86e58:	90809026 	beq	r18,r2,8709c <_dtoa_r+0x152c>
   86e5c:	92000044 	addi	r8,r18,1
   86e60:	003f1f06 	br	86ae0 <rx_descriptor_end+0xfff86a80>
   86e64:	9011883a 	mov	r8,r18
   86e68:	8825883a 	mov	r18,r17
   86e6c:	a023883a 	mov	r17,r20
   86e70:	003e2906 	br	86718 <rx_descriptor_end+0xfff866b8>
   86e74:	002b883a 	mov	r21,zero
   86e78:	0023883a 	mov	r17,zero
   86e7c:	003f5406 	br	86bd0 <rx_descriptor_end+0xfff86b70>
   86e80:	61bfffc4 	addi	r6,r12,-1
   86e84:	300490fa 	slli	r2,r6,3
   86e88:	00c00274 	movhi	r3,9
   86e8c:	18c8eb04 	addi	r3,r3,9132
   86e90:	1885883a 	add	r2,r3,r2
   86e94:	11000017 	ldw	r4,0(r2)
   86e98:	11400117 	ldw	r5,4(r2)
   86e9c:	d8800717 	ldw	r2,28(sp)
   86ea0:	880f883a 	mov	r7,r17
   86ea4:	d9801215 	stw	r6,72(sp)
   86ea8:	800d883a 	mov	r6,r16
   86eac:	db001615 	stw	r12,88(sp)
   86eb0:	15c00044 	addi	r23,r2,1
   86eb4:	008d2a80 	call	8d2a8 <__muldf3>
   86eb8:	d9401017 	ldw	r5,64(sp)
   86ebc:	d9000f17 	ldw	r4,60(sp)
   86ec0:	d8c01515 	stw	r3,84(sp)
   86ec4:	d8801415 	stw	r2,80(sp)
   86ec8:	008e2bc0 	call	8e2bc <__fixdfsi>
   86ecc:	1009883a 	mov	r4,r2
   86ed0:	1021883a 	mov	r16,r2
   86ed4:	008e33c0 	call	8e33c <__floatsidf>
   86ed8:	d9000f17 	ldw	r4,60(sp)
   86edc:	d9401017 	ldw	r5,64(sp)
   86ee0:	100d883a 	mov	r6,r2
   86ee4:	180f883a 	mov	r7,r3
   86ee8:	008d9c00 	call	8d9c0 <__subdf3>
   86eec:	1829883a 	mov	r20,r3
   86ef0:	d8c00717 	ldw	r3,28(sp)
   86ef4:	84000c04 	addi	r16,r16,48
   86ef8:	1023883a 	mov	r17,r2
   86efc:	1c000005 	stb	r16,0(r3)
   86f00:	db001617 	ldw	r12,88(sp)
   86f04:	00800044 	movi	r2,1
   86f08:	60802226 	beq	r12,r2,86f94 <_dtoa_r+0x1424>
   86f0c:	d9c00717 	ldw	r7,28(sp)
   86f10:	8805883a 	mov	r2,r17
   86f14:	b82b883a 	mov	r21,r23
   86f18:	3b19883a 	add	r12,r7,r12
   86f1c:	6023883a 	mov	r17,r12
   86f20:	a007883a 	mov	r3,r20
   86f24:	dc800f15 	stw	r18,60(sp)
   86f28:	000d883a 	mov	r6,zero
   86f2c:	01d00934 	movhi	r7,16420
   86f30:	1009883a 	mov	r4,r2
   86f34:	180b883a 	mov	r5,r3
   86f38:	008d2a80 	call	8d2a8 <__muldf3>
   86f3c:	180b883a 	mov	r5,r3
   86f40:	1009883a 	mov	r4,r2
   86f44:	1829883a 	mov	r20,r3
   86f48:	1025883a 	mov	r18,r2
   86f4c:	008e2bc0 	call	8e2bc <__fixdfsi>
   86f50:	1009883a 	mov	r4,r2
   86f54:	1021883a 	mov	r16,r2
   86f58:	008e33c0 	call	8e33c <__floatsidf>
   86f5c:	100d883a 	mov	r6,r2
   86f60:	180f883a 	mov	r7,r3
   86f64:	9009883a 	mov	r4,r18
   86f68:	a00b883a 	mov	r5,r20
   86f6c:	84000c04 	addi	r16,r16,48
   86f70:	008d9c00 	call	8d9c0 <__subdf3>
   86f74:	ad400044 	addi	r21,r21,1
   86f78:	ac3fffc5 	stb	r16,-1(r21)
   86f7c:	ac7fea1e 	bne	r21,r17,86f28 <rx_descriptor_end+0xfff86ec8>
   86f80:	1023883a 	mov	r17,r2
   86f84:	d8801217 	ldw	r2,72(sp)
   86f88:	dc800f17 	ldw	r18,60(sp)
   86f8c:	1829883a 	mov	r20,r3
   86f90:	b8af883a 	add	r23,r23,r2
   86f94:	d9001417 	ldw	r4,80(sp)
   86f98:	d9401517 	ldw	r5,84(sp)
   86f9c:	000d883a 	mov	r6,zero
   86fa0:	01cff834 	movhi	r7,16352
   86fa4:	008bebc0 	call	8bebc <__adddf3>
   86fa8:	880d883a 	mov	r6,r17
   86fac:	a00f883a 	mov	r7,r20
   86fb0:	1009883a 	mov	r4,r2
   86fb4:	180b883a 	mov	r5,r3
   86fb8:	008d1b40 	call	8d1b4 <__ledf2>
   86fbc:	10003e0e 	bge	r2,zero,870b8 <_dtoa_r+0x1548>
   86fc0:	d9001317 	ldw	r4,76(sp)
   86fc4:	bd3fffc3 	ldbu	r20,-1(r23)
   86fc8:	d9000515 	stw	r4,20(sp)
   86fcc:	003d3b06 	br	864bc <rx_descriptor_end+0xfff8645c>
   86fd0:	0027883a 	mov	r19,zero
   86fd4:	003f1b06 	br	86c44 <rx_descriptor_end+0xfff86be4>
   86fd8:	d8800817 	ldw	r2,32(sp)
   86fdc:	11e9c83a 	sub	r20,r2,r7
   86fe0:	0005883a 	mov	r2,zero
   86fe4:	003d5406 	br	86538 <rx_descriptor_end+0xfff864d8>
   86fe8:	00800044 	movi	r2,1
   86fec:	003dc706 	br	8670c <rx_descriptor_end+0xfff866ac>
   86ff0:	d8c00217 	ldw	r3,8(sp)
   86ff4:	00800d84 	movi	r2,54
   86ff8:	dd400a17 	ldw	r21,40(sp)
   86ffc:	10c5c83a 	sub	r2,r2,r3
   87000:	dd000817 	ldw	r20,32(sp)
   87004:	003d4c06 	br	86538 <rx_descriptor_end+0xfff864d8>
   87008:	dc800f15 	stw	r18,60(sp)
   8700c:	dcc01015 	stw	r19,64(sp)
   87010:	04000084 	movi	r16,2
   87014:	003bed06 	br	85fcc <rx_descriptor_end+0xfff85f6c>
   87018:	d9000617 	ldw	r4,24(sp)
   8701c:	203f0d26 	beq	r4,zero,86c54 <rx_descriptor_end+0xfff86bf4>
   87020:	d9800c17 	ldw	r6,48(sp)
   87024:	01bcab0e 	bge	zero,r6,862d4 <rx_descriptor_end+0xfff86274>
   87028:	d9401017 	ldw	r5,64(sp)
   8702c:	d9000f17 	ldw	r4,60(sp)
   87030:	000d883a 	mov	r6,zero
   87034:	01d00934 	movhi	r7,16420
   87038:	008d2a80 	call	8d2a8 <__muldf3>
   8703c:	81000044 	addi	r4,r16,1
   87040:	d8800f15 	stw	r2,60(sp)
   87044:	d8c01015 	stw	r3,64(sp)
   87048:	008e33c0 	call	8e33c <__floatsidf>
   8704c:	d9800f17 	ldw	r6,60(sp)
   87050:	d9c01017 	ldw	r7,64(sp)
   87054:	1009883a 	mov	r4,r2
   87058:	180b883a 	mov	r5,r3
   8705c:	008d2a80 	call	8d2a8 <__muldf3>
   87060:	01d00734 	movhi	r7,16412
   87064:	000d883a 	mov	r6,zero
   87068:	1009883a 	mov	r4,r2
   8706c:	180b883a 	mov	r5,r3
   87070:	008bebc0 	call	8bebc <__adddf3>
   87074:	d9c00517 	ldw	r7,20(sp)
   87078:	047f3034 	movhi	r17,64704
   8707c:	1021883a 	mov	r16,r2
   87080:	39ffffc4 	addi	r7,r7,-1
   87084:	d9c01315 	stw	r7,76(sp)
   87088:	1c63883a 	add	r17,r3,r17
   8708c:	db000c17 	ldw	r12,48(sp)
   87090:	003bea06 	br	8603c <rx_descriptor_end+0xfff85fdc>
   87094:	dc000915 	stw	r16,36(sp)
   87098:	003e0e06 	br	868d4 <rx_descriptor_end+0xfff86874>
   8709c:	01000e44 	movi	r4,57
   870a0:	8825883a 	mov	r18,r17
   870a4:	9dc00044 	addi	r23,r19,1
   870a8:	99000005 	stb	r4,0(r19)
   870ac:	a023883a 	mov	r17,r20
   870b0:	dc000915 	stw	r16,36(sp)
   870b4:	003da406 	br	86748 <rx_descriptor_end+0xfff866e8>
   870b8:	d9801417 	ldw	r6,80(sp)
   870bc:	d9c01517 	ldw	r7,84(sp)
   870c0:	0009883a 	mov	r4,zero
   870c4:	014ff834 	movhi	r5,16352
   870c8:	008d9c00 	call	8d9c0 <__subdf3>
   870cc:	880d883a 	mov	r6,r17
   870d0:	a00f883a 	mov	r7,r20
   870d4:	1009883a 	mov	r4,r2
   870d8:	180b883a 	mov	r5,r3
   870dc:	008d0d80 	call	8d0d8 <__gedf2>
   870e0:	00bc7c0e 	bge	zero,r2,862d4 <rx_descriptor_end+0xfff86274>
   870e4:	01000c04 	movi	r4,48
   870e8:	00000106 	br	870f0 <_dtoa_r+0x1580>
   870ec:	102f883a 	mov	r23,r2
   870f0:	b8bfffc4 	addi	r2,r23,-1
   870f4:	10c00007 	ldb	r3,0(r2)
   870f8:	193ffc26 	beq	r3,r4,870ec <rx_descriptor_end+0xfff8708c>
   870fc:	d9801317 	ldw	r6,76(sp)
   87100:	d9800515 	stw	r6,20(sp)
   87104:	003c4406 	br	86218 <rx_descriptor_end+0xfff861b8>
   87108:	d9801317 	ldw	r6,76(sp)
   8710c:	d9800515 	stw	r6,20(sp)
   87110:	003cea06 	br	864bc <rx_descriptor_end+0xfff8645c>
   87114:	dd800f17 	ldw	r22,60(sp)
   87118:	dcc01017 	ldw	r19,64(sp)
   8711c:	dc801217 	ldw	r18,72(sp)
   87120:	003c6c06 	br	862d4 <rx_descriptor_end+0xfff86274>
   87124:	903e031e 	bne	r18,zero,86934 <rx_descriptor_end+0xfff868d4>
   87128:	003ebb06 	br	86c18 <rx_descriptor_end+0xfff86bb8>
   8712c:	103e6c1e 	bne	r2,zero,86ae0 <rx_descriptor_end+0xfff86a80>
   87130:	4080004c 	andi	r2,r8,1
   87134:	103e6a26 	beq	r2,zero,86ae0 <rx_descriptor_end+0xfff86a80>
   87138:	003e6606 	br	86ad4 <rx_descriptor_end+0xfff86a74>
   8713c:	d8c00317 	ldw	r3,12(sp)
   87140:	00800084 	movi	r2,2
   87144:	10c02916 	blt	r2,r3,871ec <_dtoa_r+0x167c>
   87148:	d9000c17 	ldw	r4,48(sp)
   8714c:	003e8806 	br	86b70 <rx_descriptor_end+0xfff86b10>
   87150:	04000084 	movi	r16,2
   87154:	003b9d06 	br	85fcc <rx_descriptor_end+0xfff85f6c>
   87158:	d9001317 	ldw	r4,76(sp)
   8715c:	d9000515 	stw	r4,20(sp)
   87160:	003cd606 	br	864bc <rx_descriptor_end+0xfff8645c>
   87164:	d8801317 	ldw	r2,76(sp)
   87168:	d8800515 	stw	r2,20(sp)
   8716c:	003c2a06 	br	86218 <rx_descriptor_end+0xfff861b8>
   87170:	d9800317 	ldw	r6,12(sp)
   87174:	00800084 	movi	r2,2
   87178:	11801516 	blt	r2,r6,871d0 <_dtoa_r+0x1660>
   8717c:	d9c00c17 	ldw	r7,48(sp)
   87180:	d9c00615 	stw	r7,24(sp)
   87184:	003df706 	br	86964 <rx_descriptor_end+0xfff86904>
   87188:	193d3926 	beq	r3,r4,86670 <rx_descriptor_end+0xfff86610>
   8718c:	00c00f04 	movi	r3,60
   87190:	1885c83a 	sub	r2,r3,r2
   87194:	003ddf06 	br	86914 <rx_descriptor_end+0xfff868b4>
   87198:	e009883a 	mov	r4,fp
   8719c:	e0001115 	stw	zero,68(fp)
   871a0:	000b883a 	mov	r5,zero
   871a4:	0087cdc0 	call	87cdc <_Balloc>
   871a8:	d8800715 	stw	r2,28(sp)
   871ac:	d8c00717 	ldw	r3,28(sp)
   871b0:	00bfffc4 	movi	r2,-1
   871b4:	01000044 	movi	r4,1
   871b8:	d8800c15 	stw	r2,48(sp)
   871bc:	e0c01015 	stw	r3,64(fp)
   871c0:	d9000b15 	stw	r4,44(sp)
   871c4:	d8800615 	stw	r2,24(sp)
   871c8:	d8002215 	stw	zero,136(sp)
   871cc:	003c4106 	br	862d4 <rx_descriptor_end+0xfff86274>
   871d0:	d8c00c17 	ldw	r3,48(sp)
   871d4:	d8c00615 	stw	r3,24(sp)
   871d8:	003e7006 	br	86b9c <rx_descriptor_end+0xfff86b3c>
   871dc:	04400044 	movi	r17,1
   871e0:	003b2006 	br	85e64 <rx_descriptor_end+0xfff85e04>
   871e4:	000b883a 	mov	r5,zero
   871e8:	003b3d06 	br	85ee0 <rx_descriptor_end+0xfff85e80>
   871ec:	d8800c17 	ldw	r2,48(sp)
   871f0:	d8800615 	stw	r2,24(sp)
   871f4:	003e6906 	br	86b9c <rx_descriptor_end+0xfff86b3c>

000871f8 <_fclose_r>:
   871f8:	28003926 	beq	r5,zero,872e0 <_fclose_r+0xe8>
   871fc:	defffc04 	addi	sp,sp,-16
   87200:	dc400115 	stw	r17,4(sp)
   87204:	dc000015 	stw	r16,0(sp)
   87208:	dfc00315 	stw	ra,12(sp)
   8720c:	dc800215 	stw	r18,8(sp)
   87210:	2023883a 	mov	r17,r4
   87214:	2821883a 	mov	r16,r5
   87218:	20000226 	beq	r4,zero,87224 <_fclose_r+0x2c>
   8721c:	20800e17 	ldw	r2,56(r4)
   87220:	10002726 	beq	r2,zero,872c0 <_fclose_r+0xc8>
   87224:	8080030f 	ldh	r2,12(r16)
   87228:	1000071e 	bne	r2,zero,87248 <_fclose_r+0x50>
   8722c:	0005883a 	mov	r2,zero
   87230:	dfc00317 	ldw	ra,12(sp)
   87234:	dc800217 	ldw	r18,8(sp)
   87238:	dc400117 	ldw	r17,4(sp)
   8723c:	dc000017 	ldw	r16,0(sp)
   87240:	dec00404 	addi	sp,sp,16
   87244:	f800283a 	ret
   87248:	800b883a 	mov	r5,r16
   8724c:	8809883a 	mov	r4,r17
   87250:	0081a540 	call	81a54 <__sflush_r>
   87254:	1025883a 	mov	r18,r2
   87258:	80800b17 	ldw	r2,44(r16)
   8725c:	10000426 	beq	r2,zero,87270 <_fclose_r+0x78>
   87260:	81400717 	ldw	r5,28(r16)
   87264:	8809883a 	mov	r4,r17
   87268:	103ee83a 	callr	r2
   8726c:	10001616 	blt	r2,zero,872c8 <_fclose_r+0xd0>
   87270:	8080030b 	ldhu	r2,12(r16)
   87274:	1080200c 	andi	r2,r2,128
   87278:	1000151e 	bne	r2,zero,872d0 <_fclose_r+0xd8>
   8727c:	81400c17 	ldw	r5,48(r16)
   87280:	28000526 	beq	r5,zero,87298 <_fclose_r+0xa0>
   87284:	80801004 	addi	r2,r16,64
   87288:	28800226 	beq	r5,r2,87294 <_fclose_r+0x9c>
   8728c:	8809883a 	mov	r4,r17
   87290:	00821c00 	call	821c0 <_free_r>
   87294:	80000c15 	stw	zero,48(r16)
   87298:	81401117 	ldw	r5,68(r16)
   8729c:	28000326 	beq	r5,zero,872ac <_fclose_r+0xb4>
   872a0:	8809883a 	mov	r4,r17
   872a4:	00821c00 	call	821c0 <_free_r>
   872a8:	80001115 	stw	zero,68(r16)
   872ac:	008205c0 	call	8205c <__sfp_lock_acquire>
   872b0:	8000030d 	sth	zero,12(r16)
   872b4:	00820600 	call	82060 <__sfp_lock_release>
   872b8:	9005883a 	mov	r2,r18
   872bc:	003fdc06 	br	87230 <rx_descriptor_end+0xfff871d0>
   872c0:	008204c0 	call	8204c <__sinit>
   872c4:	003fd706 	br	87224 <rx_descriptor_end+0xfff871c4>
   872c8:	04bfffc4 	movi	r18,-1
   872cc:	003fe806 	br	87270 <rx_descriptor_end+0xfff87210>
   872d0:	81400417 	ldw	r5,16(r16)
   872d4:	8809883a 	mov	r4,r17
   872d8:	00821c00 	call	821c0 <_free_r>
   872dc:	003fe706 	br	8727c <rx_descriptor_end+0xfff8721c>
   872e0:	0005883a 	mov	r2,zero
   872e4:	f800283a 	ret

000872e8 <fclose>:
   872e8:	00800274 	movhi	r2,9
   872ec:	10913d04 	addi	r2,r2,17652
   872f0:	200b883a 	mov	r5,r4
   872f4:	11000017 	ldw	r4,0(r2)
   872f8:	00871f81 	jmpi	871f8 <_fclose_r>

000872fc <__sfvwrite_r>:
   872fc:	30800217 	ldw	r2,8(r6)
   87300:	10006726 	beq	r2,zero,874a0 <__sfvwrite_r+0x1a4>
   87304:	28c0030b 	ldhu	r3,12(r5)
   87308:	defff404 	addi	sp,sp,-48
   8730c:	dd400715 	stw	r21,28(sp)
   87310:	dd000615 	stw	r20,24(sp)
   87314:	dc000215 	stw	r16,8(sp)
   87318:	dfc00b15 	stw	ra,44(sp)
   8731c:	df000a15 	stw	fp,40(sp)
   87320:	ddc00915 	stw	r23,36(sp)
   87324:	dd800815 	stw	r22,32(sp)
   87328:	dcc00515 	stw	r19,20(sp)
   8732c:	dc800415 	stw	r18,16(sp)
   87330:	dc400315 	stw	r17,12(sp)
   87334:	1880020c 	andi	r2,r3,8
   87338:	2821883a 	mov	r16,r5
   8733c:	202b883a 	mov	r21,r4
   87340:	3029883a 	mov	r20,r6
   87344:	10002726 	beq	r2,zero,873e4 <__sfvwrite_r+0xe8>
   87348:	28800417 	ldw	r2,16(r5)
   8734c:	10002526 	beq	r2,zero,873e4 <__sfvwrite_r+0xe8>
   87350:	1880008c 	andi	r2,r3,2
   87354:	a4400017 	ldw	r17,0(r20)
   87358:	10002a26 	beq	r2,zero,87404 <__sfvwrite_r+0x108>
   8735c:	05a00034 	movhi	r22,32768
   87360:	0027883a 	mov	r19,zero
   87364:	0025883a 	mov	r18,zero
   87368:	b5bf0004 	addi	r22,r22,-1024
   8736c:	980d883a 	mov	r6,r19
   87370:	a809883a 	mov	r4,r21
   87374:	90004626 	beq	r18,zero,87490 <__sfvwrite_r+0x194>
   87378:	900f883a 	mov	r7,r18
   8737c:	b480022e 	bgeu	r22,r18,87388 <__sfvwrite_r+0x8c>
   87380:	01e00034 	movhi	r7,32768
   87384:	39ff0004 	addi	r7,r7,-1024
   87388:	80800917 	ldw	r2,36(r16)
   8738c:	81400717 	ldw	r5,28(r16)
   87390:	103ee83a 	callr	r2
   87394:	0080570e 	bge	zero,r2,874f4 <__sfvwrite_r+0x1f8>
   87398:	a0c00217 	ldw	r3,8(r20)
   8739c:	98a7883a 	add	r19,r19,r2
   873a0:	90a5c83a 	sub	r18,r18,r2
   873a4:	1885c83a 	sub	r2,r3,r2
   873a8:	a0800215 	stw	r2,8(r20)
   873ac:	103fef1e 	bne	r2,zero,8736c <rx_descriptor_end+0xfff8730c>
   873b0:	0005883a 	mov	r2,zero
   873b4:	dfc00b17 	ldw	ra,44(sp)
   873b8:	df000a17 	ldw	fp,40(sp)
   873bc:	ddc00917 	ldw	r23,36(sp)
   873c0:	dd800817 	ldw	r22,32(sp)
   873c4:	dd400717 	ldw	r21,28(sp)
   873c8:	dd000617 	ldw	r20,24(sp)
   873cc:	dcc00517 	ldw	r19,20(sp)
   873d0:	dc800417 	ldw	r18,16(sp)
   873d4:	dc400317 	ldw	r17,12(sp)
   873d8:	dc000217 	ldw	r16,8(sp)
   873dc:	dec00c04 	addi	sp,sp,48
   873e0:	f800283a 	ret
   873e4:	800b883a 	mov	r5,r16
   873e8:	a809883a 	mov	r4,r21
   873ec:	00857c80 	call	857c8 <__swsetup_r>
   873f0:	1000eb1e 	bne	r2,zero,877a0 <__sfvwrite_r+0x4a4>
   873f4:	80c0030b 	ldhu	r3,12(r16)
   873f8:	a4400017 	ldw	r17,0(r20)
   873fc:	1880008c 	andi	r2,r3,2
   87400:	103fd61e 	bne	r2,zero,8735c <rx_descriptor_end+0xfff872fc>
   87404:	1880004c 	andi	r2,r3,1
   87408:	10003f1e 	bne	r2,zero,87508 <__sfvwrite_r+0x20c>
   8740c:	0039883a 	mov	fp,zero
   87410:	0025883a 	mov	r18,zero
   87414:	90001a26 	beq	r18,zero,87480 <__sfvwrite_r+0x184>
   87418:	1880800c 	andi	r2,r3,512
   8741c:	84c00217 	ldw	r19,8(r16)
   87420:	10002126 	beq	r2,zero,874a8 <__sfvwrite_r+0x1ac>
   87424:	982f883a 	mov	r23,r19
   87428:	94c09336 	bltu	r18,r19,87678 <__sfvwrite_r+0x37c>
   8742c:	1881200c 	andi	r2,r3,1152
   87430:	10009e1e 	bne	r2,zero,876ac <__sfvwrite_r+0x3b0>
   87434:	81000017 	ldw	r4,0(r16)
   87438:	b80d883a 	mov	r6,r23
   8743c:	e00b883a 	mov	r5,fp
   87440:	0082e8c0 	call	82e8c <memmove>
   87444:	80c00217 	ldw	r3,8(r16)
   87448:	81000017 	ldw	r4,0(r16)
   8744c:	9005883a 	mov	r2,r18
   87450:	1ce7c83a 	sub	r19,r3,r19
   87454:	25cf883a 	add	r7,r4,r23
   87458:	84c00215 	stw	r19,8(r16)
   8745c:	81c00015 	stw	r7,0(r16)
   87460:	a0c00217 	ldw	r3,8(r20)
   87464:	e0b9883a 	add	fp,fp,r2
   87468:	90a5c83a 	sub	r18,r18,r2
   8746c:	18a7c83a 	sub	r19,r3,r2
   87470:	a4c00215 	stw	r19,8(r20)
   87474:	983fce26 	beq	r19,zero,873b0 <rx_descriptor_end+0xfff87350>
   87478:	80c0030b 	ldhu	r3,12(r16)
   8747c:	903fe61e 	bne	r18,zero,87418 <rx_descriptor_end+0xfff873b8>
   87480:	8f000017 	ldw	fp,0(r17)
   87484:	8c800117 	ldw	r18,4(r17)
   87488:	8c400204 	addi	r17,r17,8
   8748c:	003fe106 	br	87414 <rx_descriptor_end+0xfff873b4>
   87490:	8cc00017 	ldw	r19,0(r17)
   87494:	8c800117 	ldw	r18,4(r17)
   87498:	8c400204 	addi	r17,r17,8
   8749c:	003fb306 	br	8736c <rx_descriptor_end+0xfff8730c>
   874a0:	0005883a 	mov	r2,zero
   874a4:	f800283a 	ret
   874a8:	81000017 	ldw	r4,0(r16)
   874ac:	80800417 	ldw	r2,16(r16)
   874b0:	11005736 	bltu	r2,r4,87610 <__sfvwrite_r+0x314>
   874b4:	85c00517 	ldw	r23,20(r16)
   874b8:	95c05536 	bltu	r18,r23,87610 <__sfvwrite_r+0x314>
   874bc:	00a00034 	movhi	r2,32768
   874c0:	10bfffc4 	addi	r2,r2,-1
   874c4:	9009883a 	mov	r4,r18
   874c8:	1480012e 	bgeu	r2,r18,874d0 <__sfvwrite_r+0x1d4>
   874cc:	1009883a 	mov	r4,r2
   874d0:	b80b883a 	mov	r5,r23
   874d4:	008bd080 	call	8bd08 <__divsi3>
   874d8:	15cf383a 	mul	r7,r2,r23
   874dc:	81400717 	ldw	r5,28(r16)
   874e0:	80800917 	ldw	r2,36(r16)
   874e4:	e00d883a 	mov	r6,fp
   874e8:	a809883a 	mov	r4,r21
   874ec:	103ee83a 	callr	r2
   874f0:	00bfdb16 	blt	zero,r2,87460 <rx_descriptor_end+0xfff87400>
   874f4:	8080030b 	ldhu	r2,12(r16)
   874f8:	10801014 	ori	r2,r2,64
   874fc:	8080030d 	sth	r2,12(r16)
   87500:	00bfffc4 	movi	r2,-1
   87504:	003fab06 	br	873b4 <rx_descriptor_end+0xfff87354>
   87508:	0027883a 	mov	r19,zero
   8750c:	0011883a 	mov	r8,zero
   87510:	0039883a 	mov	fp,zero
   87514:	0025883a 	mov	r18,zero
   87518:	90001f26 	beq	r18,zero,87598 <__sfvwrite_r+0x29c>
   8751c:	40005a26 	beq	r8,zero,87688 <__sfvwrite_r+0x38c>
   87520:	982d883a 	mov	r22,r19
   87524:	94c0012e 	bgeu	r18,r19,8752c <__sfvwrite_r+0x230>
   87528:	902d883a 	mov	r22,r18
   8752c:	81000017 	ldw	r4,0(r16)
   87530:	80800417 	ldw	r2,16(r16)
   87534:	b02f883a 	mov	r23,r22
   87538:	81c00517 	ldw	r7,20(r16)
   8753c:	1100032e 	bgeu	r2,r4,8754c <__sfvwrite_r+0x250>
   87540:	80c00217 	ldw	r3,8(r16)
   87544:	38c7883a 	add	r3,r7,r3
   87548:	1d801816 	blt	r3,r22,875ac <__sfvwrite_r+0x2b0>
   8754c:	b1c03e16 	blt	r22,r7,87648 <__sfvwrite_r+0x34c>
   87550:	80800917 	ldw	r2,36(r16)
   87554:	81400717 	ldw	r5,28(r16)
   87558:	e00d883a 	mov	r6,fp
   8755c:	da000115 	stw	r8,4(sp)
   87560:	a809883a 	mov	r4,r21
   87564:	103ee83a 	callr	r2
   87568:	102f883a 	mov	r23,r2
   8756c:	da000117 	ldw	r8,4(sp)
   87570:	00bfe00e 	bge	zero,r2,874f4 <rx_descriptor_end+0xfff87494>
   87574:	9de7c83a 	sub	r19,r19,r23
   87578:	98001f26 	beq	r19,zero,875f8 <__sfvwrite_r+0x2fc>
   8757c:	a0800217 	ldw	r2,8(r20)
   87580:	e5f9883a 	add	fp,fp,r23
   87584:	95e5c83a 	sub	r18,r18,r23
   87588:	15efc83a 	sub	r23,r2,r23
   8758c:	a5c00215 	stw	r23,8(r20)
   87590:	b83f8726 	beq	r23,zero,873b0 <rx_descriptor_end+0xfff87350>
   87594:	903fe11e 	bne	r18,zero,8751c <rx_descriptor_end+0xfff874bc>
   87598:	8f000017 	ldw	fp,0(r17)
   8759c:	8c800117 	ldw	r18,4(r17)
   875a0:	0011883a 	mov	r8,zero
   875a4:	8c400204 	addi	r17,r17,8
   875a8:	003fdb06 	br	87518 <rx_descriptor_end+0xfff874b8>
   875ac:	180d883a 	mov	r6,r3
   875b0:	e00b883a 	mov	r5,fp
   875b4:	da000115 	stw	r8,4(sp)
   875b8:	d8c00015 	stw	r3,0(sp)
   875bc:	0082e8c0 	call	82e8c <memmove>
   875c0:	d8c00017 	ldw	r3,0(sp)
   875c4:	80800017 	ldw	r2,0(r16)
   875c8:	800b883a 	mov	r5,r16
   875cc:	a809883a 	mov	r4,r21
   875d0:	10c5883a 	add	r2,r2,r3
   875d4:	80800015 	stw	r2,0(r16)
   875d8:	d8c00015 	stw	r3,0(sp)
   875dc:	0081c700 	call	81c70 <_fflush_r>
   875e0:	d8c00017 	ldw	r3,0(sp)
   875e4:	da000117 	ldw	r8,4(sp)
   875e8:	103fc21e 	bne	r2,zero,874f4 <rx_descriptor_end+0xfff87494>
   875ec:	182f883a 	mov	r23,r3
   875f0:	9de7c83a 	sub	r19,r19,r23
   875f4:	983fe11e 	bne	r19,zero,8757c <rx_descriptor_end+0xfff8751c>
   875f8:	800b883a 	mov	r5,r16
   875fc:	a809883a 	mov	r4,r21
   87600:	0081c700 	call	81c70 <_fflush_r>
   87604:	103fbb1e 	bne	r2,zero,874f4 <rx_descriptor_end+0xfff87494>
   87608:	0011883a 	mov	r8,zero
   8760c:	003fdb06 	br	8757c <rx_descriptor_end+0xfff8751c>
   87610:	94c0012e 	bgeu	r18,r19,87618 <__sfvwrite_r+0x31c>
   87614:	9027883a 	mov	r19,r18
   87618:	980d883a 	mov	r6,r19
   8761c:	e00b883a 	mov	r5,fp
   87620:	0082e8c0 	call	82e8c <memmove>
   87624:	80800217 	ldw	r2,8(r16)
   87628:	80c00017 	ldw	r3,0(r16)
   8762c:	14c5c83a 	sub	r2,r2,r19
   87630:	1cc7883a 	add	r3,r3,r19
   87634:	80800215 	stw	r2,8(r16)
   87638:	80c00015 	stw	r3,0(r16)
   8763c:	10004326 	beq	r2,zero,8774c <__sfvwrite_r+0x450>
   87640:	9805883a 	mov	r2,r19
   87644:	003f8606 	br	87460 <rx_descriptor_end+0xfff87400>
   87648:	b00d883a 	mov	r6,r22
   8764c:	e00b883a 	mov	r5,fp
   87650:	da000115 	stw	r8,4(sp)
   87654:	0082e8c0 	call	82e8c <memmove>
   87658:	80800217 	ldw	r2,8(r16)
   8765c:	80c00017 	ldw	r3,0(r16)
   87660:	da000117 	ldw	r8,4(sp)
   87664:	1585c83a 	sub	r2,r2,r22
   87668:	1dad883a 	add	r22,r3,r22
   8766c:	80800215 	stw	r2,8(r16)
   87670:	85800015 	stw	r22,0(r16)
   87674:	003fbf06 	br	87574 <rx_descriptor_end+0xfff87514>
   87678:	81000017 	ldw	r4,0(r16)
   8767c:	9027883a 	mov	r19,r18
   87680:	902f883a 	mov	r23,r18
   87684:	003f6c06 	br	87438 <rx_descriptor_end+0xfff873d8>
   87688:	900d883a 	mov	r6,r18
   8768c:	01400284 	movi	r5,10
   87690:	e009883a 	mov	r4,fp
   87694:	0087ab00 	call	87ab0 <memchr>
   87698:	10003e26 	beq	r2,zero,87794 <__sfvwrite_r+0x498>
   8769c:	10800044 	addi	r2,r2,1
   876a0:	1727c83a 	sub	r19,r2,fp
   876a4:	02000044 	movi	r8,1
   876a8:	003f9d06 	br	87520 <rx_descriptor_end+0xfff874c0>
   876ac:	80800517 	ldw	r2,20(r16)
   876b0:	81400417 	ldw	r5,16(r16)
   876b4:	81c00017 	ldw	r7,0(r16)
   876b8:	10a7883a 	add	r19,r2,r2
   876bc:	9885883a 	add	r2,r19,r2
   876c0:	1026d7fa 	srli	r19,r2,31
   876c4:	396dc83a 	sub	r22,r7,r5
   876c8:	b1000044 	addi	r4,r22,1
   876cc:	9885883a 	add	r2,r19,r2
   876d0:	1027d07a 	srai	r19,r2,1
   876d4:	2485883a 	add	r2,r4,r18
   876d8:	980d883a 	mov	r6,r19
   876dc:	9880022e 	bgeu	r19,r2,876e8 <__sfvwrite_r+0x3ec>
   876e0:	1027883a 	mov	r19,r2
   876e4:	100d883a 	mov	r6,r2
   876e8:	18c1000c 	andi	r3,r3,1024
   876ec:	18001c26 	beq	r3,zero,87760 <__sfvwrite_r+0x464>
   876f0:	300b883a 	mov	r5,r6
   876f4:	a809883a 	mov	r4,r21
   876f8:	00826800 	call	82680 <_malloc_r>
   876fc:	102f883a 	mov	r23,r2
   87700:	10002926 	beq	r2,zero,877a8 <__sfvwrite_r+0x4ac>
   87704:	81400417 	ldw	r5,16(r16)
   87708:	b00d883a 	mov	r6,r22
   8770c:	1009883a 	mov	r4,r2
   87710:	0087b940 	call	87b94 <memcpy>
   87714:	8080030b 	ldhu	r2,12(r16)
   87718:	00fedfc4 	movi	r3,-1153
   8771c:	10c4703a 	and	r2,r2,r3
   87720:	10802014 	ori	r2,r2,128
   87724:	8080030d 	sth	r2,12(r16)
   87728:	bd89883a 	add	r4,r23,r22
   8772c:	9d8fc83a 	sub	r7,r19,r22
   87730:	85c00415 	stw	r23,16(r16)
   87734:	84c00515 	stw	r19,20(r16)
   87738:	81000015 	stw	r4,0(r16)
   8773c:	9027883a 	mov	r19,r18
   87740:	81c00215 	stw	r7,8(r16)
   87744:	902f883a 	mov	r23,r18
   87748:	003f3b06 	br	87438 <rx_descriptor_end+0xfff873d8>
   8774c:	800b883a 	mov	r5,r16
   87750:	a809883a 	mov	r4,r21
   87754:	0081c700 	call	81c70 <_fflush_r>
   87758:	103fb926 	beq	r2,zero,87640 <rx_descriptor_end+0xfff875e0>
   8775c:	003f6506 	br	874f4 <rx_descriptor_end+0xfff87494>
   87760:	a809883a 	mov	r4,r21
   87764:	0088ea00 	call	88ea0 <_realloc_r>
   87768:	102f883a 	mov	r23,r2
   8776c:	103fee1e 	bne	r2,zero,87728 <rx_descriptor_end+0xfff876c8>
   87770:	81400417 	ldw	r5,16(r16)
   87774:	a809883a 	mov	r4,r21
   87778:	00821c00 	call	821c0 <_free_r>
   8777c:	8080030b 	ldhu	r2,12(r16)
   87780:	00ffdfc4 	movi	r3,-129
   87784:	1884703a 	and	r2,r3,r2
   87788:	00c00304 	movi	r3,12
   8778c:	a8c00015 	stw	r3,0(r21)
   87790:	003f5906 	br	874f8 <rx_descriptor_end+0xfff87498>
   87794:	94c00044 	addi	r19,r18,1
   87798:	02000044 	movi	r8,1
   8779c:	003f6006 	br	87520 <rx_descriptor_end+0xfff874c0>
   877a0:	00bfffc4 	movi	r2,-1
   877a4:	003f0306 	br	873b4 <rx_descriptor_end+0xfff87354>
   877a8:	00800304 	movi	r2,12
   877ac:	a8800015 	stw	r2,0(r21)
   877b0:	8080030b 	ldhu	r2,12(r16)
   877b4:	003f5006 	br	874f8 <rx_descriptor_end+0xfff87498>

000877b8 <_setlocale_r>:
   877b8:	30001b26 	beq	r6,zero,87828 <_setlocale_r+0x70>
   877bc:	01400274 	movhi	r5,9
   877c0:	defffe04 	addi	sp,sp,-8
   877c4:	2948d104 	addi	r5,r5,9028
   877c8:	3009883a 	mov	r4,r6
   877cc:	dc000015 	stw	r16,0(sp)
   877d0:	dfc00115 	stw	ra,4(sp)
   877d4:	3021883a 	mov	r16,r6
   877d8:	00894780 	call	89478 <strcmp>
   877dc:	1000061e 	bne	r2,zero,877f8 <_setlocale_r+0x40>
   877e0:	00800274 	movhi	r2,9
   877e4:	1088b204 	addi	r2,r2,8904
   877e8:	dfc00117 	ldw	ra,4(sp)
   877ec:	dc000017 	ldw	r16,0(sp)
   877f0:	dec00204 	addi	sp,sp,8
   877f4:	f800283a 	ret
   877f8:	01400274 	movhi	r5,9
   877fc:	2948b204 	addi	r5,r5,8904
   87800:	8009883a 	mov	r4,r16
   87804:	00894780 	call	89478 <strcmp>
   87808:	103ff526 	beq	r2,zero,877e0 <rx_descriptor_end+0xfff87780>
   8780c:	01400274 	movhi	r5,9
   87810:	2948bc04 	addi	r5,r5,8944
   87814:	8009883a 	mov	r4,r16
   87818:	00894780 	call	89478 <strcmp>
   8781c:	103ff026 	beq	r2,zero,877e0 <rx_descriptor_end+0xfff87780>
   87820:	0005883a 	mov	r2,zero
   87824:	003ff006 	br	877e8 <rx_descriptor_end+0xfff87788>
   87828:	00800274 	movhi	r2,9
   8782c:	1088b204 	addi	r2,r2,8904
   87830:	f800283a 	ret

00087834 <__locale_charset>:
   87834:	00800274 	movhi	r2,9
   87838:	108c8b04 	addi	r2,r2,12844
   8783c:	f800283a 	ret

00087840 <__locale_mb_cur_max>:
   87840:	00800274 	movhi	r2,9
   87844:	10914004 	addi	r2,r2,17664
   87848:	10800017 	ldw	r2,0(r2)
   8784c:	f800283a 	ret

00087850 <__locale_msgcharset>:
   87850:	00800274 	movhi	r2,9
   87854:	108c8304 	addi	r2,r2,12812
   87858:	f800283a 	ret

0008785c <__locale_cjk_lang>:
   8785c:	0005883a 	mov	r2,zero
   87860:	f800283a 	ret

00087864 <_localeconv_r>:
   87864:	00800274 	movhi	r2,9
   87868:	108c9304 	addi	r2,r2,12876
   8786c:	f800283a 	ret

00087870 <setlocale>:
   87870:	00800274 	movhi	r2,9
   87874:	10913d04 	addi	r2,r2,17652
   87878:	280d883a 	mov	r6,r5
   8787c:	200b883a 	mov	r5,r4
   87880:	11000017 	ldw	r4,0(r2)
   87884:	00877b81 	jmpi	877b8 <_setlocale_r>

00087888 <localeconv>:
   87888:	00800274 	movhi	r2,9
   8788c:	108c9304 	addi	r2,r2,12876
   87890:	f800283a 	ret

00087894 <_lseek_r>:
   87894:	defffd04 	addi	sp,sp,-12
   87898:	2805883a 	mov	r2,r5
   8789c:	dc000015 	stw	r16,0(sp)
   878a0:	04000274 	movhi	r16,9
   878a4:	dc400115 	stw	r17,4(sp)
   878a8:	300b883a 	mov	r5,r6
   878ac:	84193504 	addi	r16,r16,25812
   878b0:	2023883a 	mov	r17,r4
   878b4:	380d883a 	mov	r6,r7
   878b8:	1009883a 	mov	r4,r2
   878bc:	dfc00215 	stw	ra,8(sp)
   878c0:	80000015 	stw	zero,0(r16)
   878c4:	008e9980 	call	8e998 <lseek>
   878c8:	00ffffc4 	movi	r3,-1
   878cc:	10c00526 	beq	r2,r3,878e4 <_lseek_r+0x50>
   878d0:	dfc00217 	ldw	ra,8(sp)
   878d4:	dc400117 	ldw	r17,4(sp)
   878d8:	dc000017 	ldw	r16,0(sp)
   878dc:	dec00304 	addi	sp,sp,12
   878e0:	f800283a 	ret
   878e4:	80c00017 	ldw	r3,0(r16)
   878e8:	183ff926 	beq	r3,zero,878d0 <rx_descriptor_end+0xfff87870>
   878ec:	88c00015 	stw	r3,0(r17)
   878f0:	003ff706 	br	878d0 <rx_descriptor_end+0xfff87870>

000878f4 <__smakebuf_r>:
   878f4:	2880030b 	ldhu	r2,12(r5)
   878f8:	10c0008c 	andi	r3,r2,2
   878fc:	1800411e 	bne	r3,zero,87a04 <__smakebuf_r+0x110>
   87900:	deffec04 	addi	sp,sp,-80
   87904:	dc000f15 	stw	r16,60(sp)
   87908:	2821883a 	mov	r16,r5
   8790c:	2940038f 	ldh	r5,14(r5)
   87910:	dc401015 	stw	r17,64(sp)
   87914:	dfc01315 	stw	ra,76(sp)
   87918:	dcc01215 	stw	r19,72(sp)
   8791c:	dc801115 	stw	r18,68(sp)
   87920:	2023883a 	mov	r17,r4
   87924:	28001c16 	blt	r5,zero,87998 <__smakebuf_r+0xa4>
   87928:	d80d883a 	mov	r6,sp
   8792c:	008afc00 	call	8afc0 <_fstat_r>
   87930:	10001816 	blt	r2,zero,87994 <__smakebuf_r+0xa0>
   87934:	d8800117 	ldw	r2,4(sp)
   87938:	00e00014 	movui	r3,32768
   8793c:	10bc000c 	andi	r2,r2,61440
   87940:	14c80020 	cmpeqi	r19,r2,8192
   87944:	10c03726 	beq	r2,r3,87a24 <__smakebuf_r+0x130>
   87948:	80c0030b 	ldhu	r3,12(r16)
   8794c:	18c20014 	ori	r3,r3,2048
   87950:	80c0030d 	sth	r3,12(r16)
   87954:	00c80004 	movi	r3,8192
   87958:	10c0521e 	bne	r2,r3,87aa4 <__smakebuf_r+0x1b0>
   8795c:	8140038f 	ldh	r5,14(r16)
   87960:	8809883a 	mov	r4,r17
   87964:	008b01c0 	call	8b01c <_isatty_r>
   87968:	10004c26 	beq	r2,zero,87a9c <__smakebuf_r+0x1a8>
   8796c:	8080030b 	ldhu	r2,12(r16)
   87970:	80c010c4 	addi	r3,r16,67
   87974:	80c00015 	stw	r3,0(r16)
   87978:	10800054 	ori	r2,r2,1
   8797c:	8080030d 	sth	r2,12(r16)
   87980:	00800044 	movi	r2,1
   87984:	80c00415 	stw	r3,16(r16)
   87988:	80800515 	stw	r2,20(r16)
   8798c:	04810004 	movi	r18,1024
   87990:	00000706 	br	879b0 <__smakebuf_r+0xbc>
   87994:	8080030b 	ldhu	r2,12(r16)
   87998:	10c0200c 	andi	r3,r2,128
   8799c:	18001f1e 	bne	r3,zero,87a1c <__smakebuf_r+0x128>
   879a0:	04810004 	movi	r18,1024
   879a4:	10820014 	ori	r2,r2,2048
   879a8:	8080030d 	sth	r2,12(r16)
   879ac:	0027883a 	mov	r19,zero
   879b0:	900b883a 	mov	r5,r18
   879b4:	8809883a 	mov	r4,r17
   879b8:	00826800 	call	82680 <_malloc_r>
   879bc:	10002c26 	beq	r2,zero,87a70 <__smakebuf_r+0x17c>
   879c0:	80c0030b 	ldhu	r3,12(r16)
   879c4:	01000234 	movhi	r4,8
   879c8:	21074104 	addi	r4,r4,7428
   879cc:	89000f15 	stw	r4,60(r17)
   879d0:	18c02014 	ori	r3,r3,128
   879d4:	80c0030d 	sth	r3,12(r16)
   879d8:	80800015 	stw	r2,0(r16)
   879dc:	80800415 	stw	r2,16(r16)
   879e0:	84800515 	stw	r18,20(r16)
   879e4:	98001a1e 	bne	r19,zero,87a50 <__smakebuf_r+0x15c>
   879e8:	dfc01317 	ldw	ra,76(sp)
   879ec:	dcc01217 	ldw	r19,72(sp)
   879f0:	dc801117 	ldw	r18,68(sp)
   879f4:	dc401017 	ldw	r17,64(sp)
   879f8:	dc000f17 	ldw	r16,60(sp)
   879fc:	dec01404 	addi	sp,sp,80
   87a00:	f800283a 	ret
   87a04:	288010c4 	addi	r2,r5,67
   87a08:	28800015 	stw	r2,0(r5)
   87a0c:	28800415 	stw	r2,16(r5)
   87a10:	00800044 	movi	r2,1
   87a14:	28800515 	stw	r2,20(r5)
   87a18:	f800283a 	ret
   87a1c:	04801004 	movi	r18,64
   87a20:	003fe006 	br	879a4 <rx_descriptor_end+0xfff87944>
   87a24:	81000a17 	ldw	r4,40(r16)
   87a28:	00c00234 	movhi	r3,8
   87a2c:	18cce704 	addi	r3,r3,13212
   87a30:	20ffc51e 	bne	r4,r3,87948 <rx_descriptor_end+0xfff878e8>
   87a34:	8080030b 	ldhu	r2,12(r16)
   87a38:	04810004 	movi	r18,1024
   87a3c:	84801315 	stw	r18,76(r16)
   87a40:	1484b03a 	or	r2,r2,r18
   87a44:	8080030d 	sth	r2,12(r16)
   87a48:	0027883a 	mov	r19,zero
   87a4c:	003fd806 	br	879b0 <rx_descriptor_end+0xfff87950>
   87a50:	8140038f 	ldh	r5,14(r16)
   87a54:	8809883a 	mov	r4,r17
   87a58:	008b01c0 	call	8b01c <_isatty_r>
   87a5c:	103fe226 	beq	r2,zero,879e8 <rx_descriptor_end+0xfff87988>
   87a60:	8080030b 	ldhu	r2,12(r16)
   87a64:	10800054 	ori	r2,r2,1
   87a68:	8080030d 	sth	r2,12(r16)
   87a6c:	003fde06 	br	879e8 <rx_descriptor_end+0xfff87988>
   87a70:	8080030b 	ldhu	r2,12(r16)
   87a74:	10c0800c 	andi	r3,r2,512
   87a78:	183fdb1e 	bne	r3,zero,879e8 <rx_descriptor_end+0xfff87988>
   87a7c:	10800094 	ori	r2,r2,2
   87a80:	80c010c4 	addi	r3,r16,67
   87a84:	8080030d 	sth	r2,12(r16)
   87a88:	00800044 	movi	r2,1
   87a8c:	80c00015 	stw	r3,0(r16)
   87a90:	80c00415 	stw	r3,16(r16)
   87a94:	80800515 	stw	r2,20(r16)
   87a98:	003fd306 	br	879e8 <rx_descriptor_end+0xfff87988>
   87a9c:	04810004 	movi	r18,1024
   87aa0:	003fc306 	br	879b0 <rx_descriptor_end+0xfff87950>
   87aa4:	0027883a 	mov	r19,zero
   87aa8:	04810004 	movi	r18,1024
   87aac:	003fc006 	br	879b0 <rx_descriptor_end+0xfff87950>

00087ab0 <memchr>:
   87ab0:	208000cc 	andi	r2,r4,3
   87ab4:	280f883a 	mov	r7,r5
   87ab8:	10003426 	beq	r2,zero,87b8c <memchr+0xdc>
   87abc:	30bfffc4 	addi	r2,r6,-1
   87ac0:	30001a26 	beq	r6,zero,87b2c <memchr+0x7c>
   87ac4:	20c00003 	ldbu	r3,0(r4)
   87ac8:	29803fcc 	andi	r6,r5,255
   87acc:	30c0051e 	bne	r6,r3,87ae4 <memchr+0x34>
   87ad0:	00001806 	br	87b34 <memchr+0x84>
   87ad4:	10001526 	beq	r2,zero,87b2c <memchr+0x7c>
   87ad8:	20c00003 	ldbu	r3,0(r4)
   87adc:	10bfffc4 	addi	r2,r2,-1
   87ae0:	30c01426 	beq	r6,r3,87b34 <memchr+0x84>
   87ae4:	21000044 	addi	r4,r4,1
   87ae8:	20c000cc 	andi	r3,r4,3
   87aec:	183ff91e 	bne	r3,zero,87ad4 <rx_descriptor_end+0xfff87a74>
   87af0:	020000c4 	movi	r8,3
   87af4:	40801136 	bltu	r8,r2,87b3c <memchr+0x8c>
   87af8:	10000c26 	beq	r2,zero,87b2c <memchr+0x7c>
   87afc:	20c00003 	ldbu	r3,0(r4)
   87b00:	29403fcc 	andi	r5,r5,255
   87b04:	28c00b26 	beq	r5,r3,87b34 <memchr+0x84>
   87b08:	20c00044 	addi	r3,r4,1
   87b0c:	39803fcc 	andi	r6,r7,255
   87b10:	2089883a 	add	r4,r4,r2
   87b14:	00000306 	br	87b24 <memchr+0x74>
   87b18:	18c00044 	addi	r3,r3,1
   87b1c:	197fffc3 	ldbu	r5,-1(r3)
   87b20:	31400526 	beq	r6,r5,87b38 <memchr+0x88>
   87b24:	1805883a 	mov	r2,r3
   87b28:	20fffb1e 	bne	r4,r3,87b18 <rx_descriptor_end+0xfff87ab8>
   87b2c:	0005883a 	mov	r2,zero
   87b30:	f800283a 	ret
   87b34:	2005883a 	mov	r2,r4
   87b38:	f800283a 	ret
   87b3c:	28c03fcc 	andi	r3,r5,255
   87b40:	1812923a 	slli	r9,r3,8
   87b44:	02ffbff4 	movhi	r11,65279
   87b48:	02a02074 	movhi	r10,32897
   87b4c:	48d2b03a 	or	r9,r9,r3
   87b50:	4806943a 	slli	r3,r9,16
   87b54:	5affbfc4 	addi	r11,r11,-257
   87b58:	52a02004 	addi	r10,r10,-32640
   87b5c:	48d2b03a 	or	r9,r9,r3
   87b60:	20c00017 	ldw	r3,0(r4)
   87b64:	48c6f03a 	xor	r3,r9,r3
   87b68:	1acd883a 	add	r6,r3,r11
   87b6c:	00c6303a 	nor	r3,zero,r3
   87b70:	30c6703a 	and	r3,r6,r3
   87b74:	1a86703a 	and	r3,r3,r10
   87b78:	183fe01e 	bne	r3,zero,87afc <rx_descriptor_end+0xfff87a9c>
   87b7c:	10bfff04 	addi	r2,r2,-4
   87b80:	21000104 	addi	r4,r4,4
   87b84:	40bff636 	bltu	r8,r2,87b60 <rx_descriptor_end+0xfff87b00>
   87b88:	003fdb06 	br	87af8 <rx_descriptor_end+0xfff87a98>
   87b8c:	3005883a 	mov	r2,r6
   87b90:	003fd706 	br	87af0 <rx_descriptor_end+0xfff87a90>

00087b94 <memcpy>:
   87b94:	defffd04 	addi	sp,sp,-12
   87b98:	dfc00215 	stw	ra,8(sp)
   87b9c:	dc400115 	stw	r17,4(sp)
   87ba0:	dc000015 	stw	r16,0(sp)
   87ba4:	00c003c4 	movi	r3,15
   87ba8:	2005883a 	mov	r2,r4
   87bac:	1980452e 	bgeu	r3,r6,87cc4 <memcpy+0x130>
   87bb0:	2906b03a 	or	r3,r5,r4
   87bb4:	18c000cc 	andi	r3,r3,3
   87bb8:	1800441e 	bne	r3,zero,87ccc <memcpy+0x138>
   87bbc:	347ffc04 	addi	r17,r6,-16
   87bc0:	8822d13a 	srli	r17,r17,4
   87bc4:	28c00104 	addi	r3,r5,4
   87bc8:	23400104 	addi	r13,r4,4
   87bcc:	8820913a 	slli	r16,r17,4
   87bd0:	2b000204 	addi	r12,r5,8
   87bd4:	22c00204 	addi	r11,r4,8
   87bd8:	84000504 	addi	r16,r16,20
   87bdc:	2a800304 	addi	r10,r5,12
   87be0:	22400304 	addi	r9,r4,12
   87be4:	2c21883a 	add	r16,r5,r16
   87be8:	2811883a 	mov	r8,r5
   87bec:	200f883a 	mov	r7,r4
   87bf0:	41000017 	ldw	r4,0(r8)
   87bf4:	1fc00017 	ldw	ra,0(r3)
   87bf8:	63c00017 	ldw	r15,0(r12)
   87bfc:	39000015 	stw	r4,0(r7)
   87c00:	53800017 	ldw	r14,0(r10)
   87c04:	6fc00015 	stw	ra,0(r13)
   87c08:	5bc00015 	stw	r15,0(r11)
   87c0c:	4b800015 	stw	r14,0(r9)
   87c10:	18c00404 	addi	r3,r3,16
   87c14:	39c00404 	addi	r7,r7,16
   87c18:	42000404 	addi	r8,r8,16
   87c1c:	6b400404 	addi	r13,r13,16
   87c20:	63000404 	addi	r12,r12,16
   87c24:	5ac00404 	addi	r11,r11,16
   87c28:	52800404 	addi	r10,r10,16
   87c2c:	4a400404 	addi	r9,r9,16
   87c30:	1c3fef1e 	bne	r3,r16,87bf0 <rx_descriptor_end+0xfff87b90>
   87c34:	89c00044 	addi	r7,r17,1
   87c38:	380e913a 	slli	r7,r7,4
   87c3c:	310003cc 	andi	r4,r6,15
   87c40:	02c000c4 	movi	r11,3
   87c44:	11c7883a 	add	r3,r2,r7
   87c48:	29cb883a 	add	r5,r5,r7
   87c4c:	5900212e 	bgeu	r11,r4,87cd4 <memcpy+0x140>
   87c50:	1813883a 	mov	r9,r3
   87c54:	2811883a 	mov	r8,r5
   87c58:	200f883a 	mov	r7,r4
   87c5c:	42800017 	ldw	r10,0(r8)
   87c60:	4a400104 	addi	r9,r9,4
   87c64:	39ffff04 	addi	r7,r7,-4
   87c68:	4abfff15 	stw	r10,-4(r9)
   87c6c:	42000104 	addi	r8,r8,4
   87c70:	59fffa36 	bltu	r11,r7,87c5c <rx_descriptor_end+0xfff87bfc>
   87c74:	213fff04 	addi	r4,r4,-4
   87c78:	2008d0ba 	srli	r4,r4,2
   87c7c:	318000cc 	andi	r6,r6,3
   87c80:	21000044 	addi	r4,r4,1
   87c84:	2109883a 	add	r4,r4,r4
   87c88:	2109883a 	add	r4,r4,r4
   87c8c:	1907883a 	add	r3,r3,r4
   87c90:	290b883a 	add	r5,r5,r4
   87c94:	30000626 	beq	r6,zero,87cb0 <memcpy+0x11c>
   87c98:	198d883a 	add	r6,r3,r6
   87c9c:	29c00003 	ldbu	r7,0(r5)
   87ca0:	18c00044 	addi	r3,r3,1
   87ca4:	29400044 	addi	r5,r5,1
   87ca8:	19ffffc5 	stb	r7,-1(r3)
   87cac:	19bffb1e 	bne	r3,r6,87c9c <rx_descriptor_end+0xfff87c3c>
   87cb0:	dfc00217 	ldw	ra,8(sp)
   87cb4:	dc400117 	ldw	r17,4(sp)
   87cb8:	dc000017 	ldw	r16,0(sp)
   87cbc:	dec00304 	addi	sp,sp,12
   87cc0:	f800283a 	ret
   87cc4:	2007883a 	mov	r3,r4
   87cc8:	003ff206 	br	87c94 <rx_descriptor_end+0xfff87c34>
   87ccc:	2007883a 	mov	r3,r4
   87cd0:	003ff106 	br	87c98 <rx_descriptor_end+0xfff87c38>
   87cd4:	200d883a 	mov	r6,r4
   87cd8:	003fee06 	br	87c94 <rx_descriptor_end+0xfff87c34>

00087cdc <_Balloc>:
   87cdc:	20801317 	ldw	r2,76(r4)
   87ce0:	defffc04 	addi	sp,sp,-16
   87ce4:	dc400115 	stw	r17,4(sp)
   87ce8:	dc000015 	stw	r16,0(sp)
   87cec:	dfc00315 	stw	ra,12(sp)
   87cf0:	dc800215 	stw	r18,8(sp)
   87cf4:	2023883a 	mov	r17,r4
   87cf8:	2821883a 	mov	r16,r5
   87cfc:	10000f26 	beq	r2,zero,87d3c <_Balloc+0x60>
   87d00:	8407883a 	add	r3,r16,r16
   87d04:	18c7883a 	add	r3,r3,r3
   87d08:	10c7883a 	add	r3,r2,r3
   87d0c:	18800017 	ldw	r2,0(r3)
   87d10:	10001126 	beq	r2,zero,87d58 <_Balloc+0x7c>
   87d14:	11000017 	ldw	r4,0(r2)
   87d18:	19000015 	stw	r4,0(r3)
   87d1c:	10000415 	stw	zero,16(r2)
   87d20:	10000315 	stw	zero,12(r2)
   87d24:	dfc00317 	ldw	ra,12(sp)
   87d28:	dc800217 	ldw	r18,8(sp)
   87d2c:	dc400117 	ldw	r17,4(sp)
   87d30:	dc000017 	ldw	r16,0(sp)
   87d34:	dec00404 	addi	sp,sp,16
   87d38:	f800283a 	ret
   87d3c:	01800844 	movi	r6,33
   87d40:	01400104 	movi	r5,4
   87d44:	008acf40 	call	8acf4 <_calloc_r>
   87d48:	88801315 	stw	r2,76(r17)
   87d4c:	103fec1e 	bne	r2,zero,87d00 <rx_descriptor_end+0xfff87ca0>
   87d50:	0005883a 	mov	r2,zero
   87d54:	003ff306 	br	87d24 <rx_descriptor_end+0xfff87cc4>
   87d58:	01400044 	movi	r5,1
   87d5c:	2c24983a 	sll	r18,r5,r16
   87d60:	8809883a 	mov	r4,r17
   87d64:	91800144 	addi	r6,r18,5
   87d68:	318d883a 	add	r6,r6,r6
   87d6c:	318d883a 	add	r6,r6,r6
   87d70:	008acf40 	call	8acf4 <_calloc_r>
   87d74:	103ff626 	beq	r2,zero,87d50 <rx_descriptor_end+0xfff87cf0>
   87d78:	14000115 	stw	r16,4(r2)
   87d7c:	14800215 	stw	r18,8(r2)
   87d80:	003fe606 	br	87d1c <rx_descriptor_end+0xfff87cbc>

00087d84 <_Bfree>:
   87d84:	28000826 	beq	r5,zero,87da8 <_Bfree+0x24>
   87d88:	28c00117 	ldw	r3,4(r5)
   87d8c:	20801317 	ldw	r2,76(r4)
   87d90:	18c7883a 	add	r3,r3,r3
   87d94:	18c7883a 	add	r3,r3,r3
   87d98:	10c5883a 	add	r2,r2,r3
   87d9c:	10c00017 	ldw	r3,0(r2)
   87da0:	28c00015 	stw	r3,0(r5)
   87da4:	11400015 	stw	r5,0(r2)
   87da8:	f800283a 	ret

00087dac <__multadd>:
   87dac:	defffa04 	addi	sp,sp,-24
   87db0:	dc800315 	stw	r18,12(sp)
   87db4:	dc400215 	stw	r17,8(sp)
   87db8:	dc000115 	stw	r16,4(sp)
   87dbc:	2823883a 	mov	r17,r5
   87dc0:	2c000417 	ldw	r16,16(r5)
   87dc4:	dfc00515 	stw	ra,20(sp)
   87dc8:	dcc00415 	stw	r19,16(sp)
   87dcc:	2025883a 	mov	r18,r4
   87dd0:	29400504 	addi	r5,r5,20
   87dd4:	0011883a 	mov	r8,zero
   87dd8:	28c00017 	ldw	r3,0(r5)
   87ddc:	29400104 	addi	r5,r5,4
   87de0:	42000044 	addi	r8,r8,1
   87de4:	18bfffcc 	andi	r2,r3,65535
   87de8:	1185383a 	mul	r2,r2,r6
   87dec:	1806d43a 	srli	r3,r3,16
   87df0:	11cf883a 	add	r7,r2,r7
   87df4:	3808d43a 	srli	r4,r7,16
   87df8:	1987383a 	mul	r3,r3,r6
   87dfc:	38bfffcc 	andi	r2,r7,65535
   87e00:	1907883a 	add	r3,r3,r4
   87e04:	1808943a 	slli	r4,r3,16
   87e08:	180ed43a 	srli	r7,r3,16
   87e0c:	2085883a 	add	r2,r4,r2
   87e10:	28bfff15 	stw	r2,-4(r5)
   87e14:	443ff016 	blt	r8,r16,87dd8 <rx_descriptor_end+0xfff87d78>
   87e18:	38000926 	beq	r7,zero,87e40 <__multadd+0x94>
   87e1c:	88800217 	ldw	r2,8(r17)
   87e20:	80800f0e 	bge	r16,r2,87e60 <__multadd+0xb4>
   87e24:	80800144 	addi	r2,r16,5
   87e28:	1085883a 	add	r2,r2,r2
   87e2c:	1085883a 	add	r2,r2,r2
   87e30:	8885883a 	add	r2,r17,r2
   87e34:	11c00015 	stw	r7,0(r2)
   87e38:	84000044 	addi	r16,r16,1
   87e3c:	8c000415 	stw	r16,16(r17)
   87e40:	8805883a 	mov	r2,r17
   87e44:	dfc00517 	ldw	ra,20(sp)
   87e48:	dcc00417 	ldw	r19,16(sp)
   87e4c:	dc800317 	ldw	r18,12(sp)
   87e50:	dc400217 	ldw	r17,8(sp)
   87e54:	dc000117 	ldw	r16,4(sp)
   87e58:	dec00604 	addi	sp,sp,24
   87e5c:	f800283a 	ret
   87e60:	89400117 	ldw	r5,4(r17)
   87e64:	9009883a 	mov	r4,r18
   87e68:	d9c00015 	stw	r7,0(sp)
   87e6c:	29400044 	addi	r5,r5,1
   87e70:	0087cdc0 	call	87cdc <_Balloc>
   87e74:	89800417 	ldw	r6,16(r17)
   87e78:	89400304 	addi	r5,r17,12
   87e7c:	11000304 	addi	r4,r2,12
   87e80:	31800084 	addi	r6,r6,2
   87e84:	318d883a 	add	r6,r6,r6
   87e88:	318d883a 	add	r6,r6,r6
   87e8c:	1027883a 	mov	r19,r2
   87e90:	0087b940 	call	87b94 <memcpy>
   87e94:	d9c00017 	ldw	r7,0(sp)
   87e98:	88000a26 	beq	r17,zero,87ec4 <__multadd+0x118>
   87e9c:	88c00117 	ldw	r3,4(r17)
   87ea0:	90801317 	ldw	r2,76(r18)
   87ea4:	18c7883a 	add	r3,r3,r3
   87ea8:	18c7883a 	add	r3,r3,r3
   87eac:	10c5883a 	add	r2,r2,r3
   87eb0:	10c00017 	ldw	r3,0(r2)
   87eb4:	88c00015 	stw	r3,0(r17)
   87eb8:	14400015 	stw	r17,0(r2)
   87ebc:	9823883a 	mov	r17,r19
   87ec0:	003fd806 	br	87e24 <rx_descriptor_end+0xfff87dc4>
   87ec4:	9823883a 	mov	r17,r19
   87ec8:	003fd606 	br	87e24 <rx_descriptor_end+0xfff87dc4>

00087ecc <__s2b>:
   87ecc:	defff904 	addi	sp,sp,-28
   87ed0:	dc400115 	stw	r17,4(sp)
   87ed4:	dc000015 	stw	r16,0(sp)
   87ed8:	2023883a 	mov	r17,r4
   87edc:	2821883a 	mov	r16,r5
   87ee0:	39000204 	addi	r4,r7,8
   87ee4:	01400244 	movi	r5,9
   87ee8:	dcc00315 	stw	r19,12(sp)
   87eec:	dc800215 	stw	r18,8(sp)
   87ef0:	dfc00615 	stw	ra,24(sp)
   87ef4:	dd400515 	stw	r21,20(sp)
   87ef8:	dd000415 	stw	r20,16(sp)
   87efc:	3825883a 	mov	r18,r7
   87f00:	3027883a 	mov	r19,r6
   87f04:	008bd080 	call	8bd08 <__divsi3>
   87f08:	00c00044 	movi	r3,1
   87f0c:	000b883a 	mov	r5,zero
   87f10:	1880030e 	bge	r3,r2,87f20 <__s2b+0x54>
   87f14:	18c7883a 	add	r3,r3,r3
   87f18:	29400044 	addi	r5,r5,1
   87f1c:	18bffd16 	blt	r3,r2,87f14 <rx_descriptor_end+0xfff87eb4>
   87f20:	8809883a 	mov	r4,r17
   87f24:	0087cdc0 	call	87cdc <_Balloc>
   87f28:	d8c00717 	ldw	r3,28(sp)
   87f2c:	10c00515 	stw	r3,20(r2)
   87f30:	00c00044 	movi	r3,1
   87f34:	10c00415 	stw	r3,16(r2)
   87f38:	00c00244 	movi	r3,9
   87f3c:	1cc0210e 	bge	r3,r19,87fc4 <__s2b+0xf8>
   87f40:	80eb883a 	add	r21,r16,r3
   87f44:	a829883a 	mov	r20,r21
   87f48:	84e1883a 	add	r16,r16,r19
   87f4c:	a1c00007 	ldb	r7,0(r20)
   87f50:	01800284 	movi	r6,10
   87f54:	a5000044 	addi	r20,r20,1
   87f58:	100b883a 	mov	r5,r2
   87f5c:	39fff404 	addi	r7,r7,-48
   87f60:	8809883a 	mov	r4,r17
   87f64:	0087dac0 	call	87dac <__multadd>
   87f68:	a43ff81e 	bne	r20,r16,87f4c <rx_descriptor_end+0xfff87eec>
   87f6c:	ace1883a 	add	r16,r21,r19
   87f70:	843ffe04 	addi	r16,r16,-8
   87f74:	9c800a0e 	bge	r19,r18,87fa0 <__s2b+0xd4>
   87f78:	94e5c83a 	sub	r18,r18,r19
   87f7c:	84a5883a 	add	r18,r16,r18
   87f80:	81c00007 	ldb	r7,0(r16)
   87f84:	01800284 	movi	r6,10
   87f88:	84000044 	addi	r16,r16,1
   87f8c:	100b883a 	mov	r5,r2
   87f90:	39fff404 	addi	r7,r7,-48
   87f94:	8809883a 	mov	r4,r17
   87f98:	0087dac0 	call	87dac <__multadd>
   87f9c:	84bff81e 	bne	r16,r18,87f80 <rx_descriptor_end+0xfff87f20>
   87fa0:	dfc00617 	ldw	ra,24(sp)
   87fa4:	dd400517 	ldw	r21,20(sp)
   87fa8:	dd000417 	ldw	r20,16(sp)
   87fac:	dcc00317 	ldw	r19,12(sp)
   87fb0:	dc800217 	ldw	r18,8(sp)
   87fb4:	dc400117 	ldw	r17,4(sp)
   87fb8:	dc000017 	ldw	r16,0(sp)
   87fbc:	dec00704 	addi	sp,sp,28
   87fc0:	f800283a 	ret
   87fc4:	84000284 	addi	r16,r16,10
   87fc8:	1827883a 	mov	r19,r3
   87fcc:	003fe906 	br	87f74 <rx_descriptor_end+0xfff87f14>

00087fd0 <__hi0bits>:
   87fd0:	20bfffec 	andhi	r2,r4,65535
   87fd4:	1000141e 	bne	r2,zero,88028 <__hi0bits+0x58>
   87fd8:	2008943a 	slli	r4,r4,16
   87fdc:	00800404 	movi	r2,16
   87fe0:	20ffc02c 	andhi	r3,r4,65280
   87fe4:	1800021e 	bne	r3,zero,87ff0 <__hi0bits+0x20>
   87fe8:	2008923a 	slli	r4,r4,8
   87fec:	10800204 	addi	r2,r2,8
   87ff0:	20fc002c 	andhi	r3,r4,61440
   87ff4:	1800021e 	bne	r3,zero,88000 <__hi0bits+0x30>
   87ff8:	2008913a 	slli	r4,r4,4
   87ffc:	10800104 	addi	r2,r2,4
   88000:	20f0002c 	andhi	r3,r4,49152
   88004:	1800031e 	bne	r3,zero,88014 <__hi0bits+0x44>
   88008:	2109883a 	add	r4,r4,r4
   8800c:	10800084 	addi	r2,r2,2
   88010:	2109883a 	add	r4,r4,r4
   88014:	20000316 	blt	r4,zero,88024 <__hi0bits+0x54>
   88018:	2110002c 	andhi	r4,r4,16384
   8801c:	2000041e 	bne	r4,zero,88030 <__hi0bits+0x60>
   88020:	00800804 	movi	r2,32
   88024:	f800283a 	ret
   88028:	0005883a 	mov	r2,zero
   8802c:	003fec06 	br	87fe0 <rx_descriptor_end+0xfff87f80>
   88030:	10800044 	addi	r2,r2,1
   88034:	f800283a 	ret

00088038 <__lo0bits>:
   88038:	20c00017 	ldw	r3,0(r4)
   8803c:	188001cc 	andi	r2,r3,7
   88040:	10000826 	beq	r2,zero,88064 <__lo0bits+0x2c>
   88044:	1880004c 	andi	r2,r3,1
   88048:	1000211e 	bne	r2,zero,880d0 <__lo0bits+0x98>
   8804c:	1880008c 	andi	r2,r3,2
   88050:	1000211e 	bne	r2,zero,880d8 <__lo0bits+0xa0>
   88054:	1806d0ba 	srli	r3,r3,2
   88058:	00800084 	movi	r2,2
   8805c:	20c00015 	stw	r3,0(r4)
   88060:	f800283a 	ret
   88064:	18bfffcc 	andi	r2,r3,65535
   88068:	10001326 	beq	r2,zero,880b8 <__lo0bits+0x80>
   8806c:	0005883a 	mov	r2,zero
   88070:	19403fcc 	andi	r5,r3,255
   88074:	2800021e 	bne	r5,zero,88080 <__lo0bits+0x48>
   88078:	1806d23a 	srli	r3,r3,8
   8807c:	10800204 	addi	r2,r2,8
   88080:	194003cc 	andi	r5,r3,15
   88084:	2800021e 	bne	r5,zero,88090 <__lo0bits+0x58>
   88088:	1806d13a 	srli	r3,r3,4
   8808c:	10800104 	addi	r2,r2,4
   88090:	194000cc 	andi	r5,r3,3
   88094:	2800021e 	bne	r5,zero,880a0 <__lo0bits+0x68>
   88098:	1806d0ba 	srli	r3,r3,2
   8809c:	10800084 	addi	r2,r2,2
   880a0:	1940004c 	andi	r5,r3,1
   880a4:	2800081e 	bne	r5,zero,880c8 <__lo0bits+0x90>
   880a8:	1806d07a 	srli	r3,r3,1
   880ac:	1800051e 	bne	r3,zero,880c4 <__lo0bits+0x8c>
   880b0:	00800804 	movi	r2,32
   880b4:	f800283a 	ret
   880b8:	1806d43a 	srli	r3,r3,16
   880bc:	00800404 	movi	r2,16
   880c0:	003feb06 	br	88070 <rx_descriptor_end+0xfff88010>
   880c4:	10800044 	addi	r2,r2,1
   880c8:	20c00015 	stw	r3,0(r4)
   880cc:	f800283a 	ret
   880d0:	0005883a 	mov	r2,zero
   880d4:	f800283a 	ret
   880d8:	1806d07a 	srli	r3,r3,1
   880dc:	00800044 	movi	r2,1
   880e0:	20c00015 	stw	r3,0(r4)
   880e4:	f800283a 	ret

000880e8 <__i2b>:
   880e8:	defffd04 	addi	sp,sp,-12
   880ec:	dc000015 	stw	r16,0(sp)
   880f0:	04000044 	movi	r16,1
   880f4:	dc400115 	stw	r17,4(sp)
   880f8:	2823883a 	mov	r17,r5
   880fc:	800b883a 	mov	r5,r16
   88100:	dfc00215 	stw	ra,8(sp)
   88104:	0087cdc0 	call	87cdc <_Balloc>
   88108:	14400515 	stw	r17,20(r2)
   8810c:	14000415 	stw	r16,16(r2)
   88110:	dfc00217 	ldw	ra,8(sp)
   88114:	dc400117 	ldw	r17,4(sp)
   88118:	dc000017 	ldw	r16,0(sp)
   8811c:	dec00304 	addi	sp,sp,12
   88120:	f800283a 	ret

00088124 <__multiply>:
   88124:	defffa04 	addi	sp,sp,-24
   88128:	dcc00315 	stw	r19,12(sp)
   8812c:	dc800215 	stw	r18,8(sp)
   88130:	34c00417 	ldw	r19,16(r6)
   88134:	2c800417 	ldw	r18,16(r5)
   88138:	dd000415 	stw	r20,16(sp)
   8813c:	dc400115 	stw	r17,4(sp)
   88140:	dfc00515 	stw	ra,20(sp)
   88144:	dc000015 	stw	r16,0(sp)
   88148:	2829883a 	mov	r20,r5
   8814c:	3023883a 	mov	r17,r6
   88150:	94c0050e 	bge	r18,r19,88168 <__multiply+0x44>
   88154:	9007883a 	mov	r3,r18
   88158:	3029883a 	mov	r20,r6
   8815c:	9825883a 	mov	r18,r19
   88160:	2823883a 	mov	r17,r5
   88164:	1827883a 	mov	r19,r3
   88168:	a0800217 	ldw	r2,8(r20)
   8816c:	94e1883a 	add	r16,r18,r19
   88170:	a1400117 	ldw	r5,4(r20)
   88174:	1400010e 	bge	r2,r16,8817c <__multiply+0x58>
   88178:	29400044 	addi	r5,r5,1
   8817c:	0087cdc0 	call	87cdc <_Balloc>
   88180:	8415883a 	add	r10,r16,r16
   88184:	12c00504 	addi	r11,r2,20
   88188:	5295883a 	add	r10,r10,r10
   8818c:	5a95883a 	add	r10,r11,r10
   88190:	5807883a 	mov	r3,r11
   88194:	5a80032e 	bgeu	r11,r10,881a4 <__multiply+0x80>
   88198:	18000015 	stw	zero,0(r3)
   8819c:	18c00104 	addi	r3,r3,4
   881a0:	1abffd36 	bltu	r3,r10,88198 <rx_descriptor_end+0xfff88138>
   881a4:	9ce7883a 	add	r19,r19,r19
   881a8:	94a5883a 	add	r18,r18,r18
   881ac:	89800504 	addi	r6,r17,20
   881b0:	9ce7883a 	add	r19,r19,r19
   881b4:	a3400504 	addi	r13,r20,20
   881b8:	94a5883a 	add	r18,r18,r18
   881bc:	34d9883a 	add	r12,r6,r19
   881c0:	6c93883a 	add	r9,r13,r18
   881c4:	3300422e 	bgeu	r6,r12,882d0 <__multiply+0x1ac>
   881c8:	37c00017 	ldw	ra,0(r6)
   881cc:	fbffffcc 	andi	r15,ra,65535
   881d0:	78001b26 	beq	r15,zero,88240 <__multiply+0x11c>
   881d4:	5811883a 	mov	r8,r11
   881d8:	681d883a 	mov	r14,r13
   881dc:	000f883a 	mov	r7,zero
   881e0:	71000017 	ldw	r4,0(r14)
   881e4:	40c00017 	ldw	r3,0(r8)
   881e8:	73800104 	addi	r14,r14,4
   881ec:	217fffcc 	andi	r5,r4,65535
   881f0:	2bcb383a 	mul	r5,r5,r15
   881f4:	2008d43a 	srli	r4,r4,16
   881f8:	1c7fffcc 	andi	r17,r3,65535
   881fc:	2c4b883a 	add	r5,r5,r17
   88200:	29cb883a 	add	r5,r5,r7
   88204:	23c9383a 	mul	r4,r4,r15
   88208:	1806d43a 	srli	r3,r3,16
   8820c:	280ed43a 	srli	r7,r5,16
   88210:	297fffcc 	andi	r5,r5,65535
   88214:	20c7883a 	add	r3,r4,r3
   88218:	19c7883a 	add	r3,r3,r7
   8821c:	1808943a 	slli	r4,r3,16
   88220:	4023883a 	mov	r17,r8
   88224:	180ed43a 	srli	r7,r3,16
   88228:	214ab03a 	or	r5,r4,r5
   8822c:	41400015 	stw	r5,0(r8)
   88230:	42000104 	addi	r8,r8,4
   88234:	727fea36 	bltu	r14,r9,881e0 <rx_descriptor_end+0xfff88180>
   88238:	89c00115 	stw	r7,4(r17)
   8823c:	37c00017 	ldw	ra,0(r6)
   88240:	f83ed43a 	srli	ra,ra,16
   88244:	f8001f26 	beq	ra,zero,882c4 <__multiply+0x1a0>
   88248:	58c00017 	ldw	r3,0(r11)
   8824c:	681d883a 	mov	r14,r13
   88250:	581f883a 	mov	r15,r11
   88254:	1811883a 	mov	r8,r3
   88258:	5825883a 	mov	r18,r11
   8825c:	000f883a 	mov	r7,zero
   88260:	00000106 	br	88268 <__multiply+0x144>
   88264:	8825883a 	mov	r18,r17
   88268:	7140000b 	ldhu	r5,0(r14)
   8826c:	4010d43a 	srli	r8,r8,16
   88270:	193fffcc 	andi	r4,r3,65535
   88274:	2fcb383a 	mul	r5,r5,ra
   88278:	7bc00104 	addi	r15,r15,4
   8827c:	73800104 	addi	r14,r14,4
   88280:	2a0b883a 	add	r5,r5,r8
   88284:	29cb883a 	add	r5,r5,r7
   88288:	2806943a 	slli	r3,r5,16
   8828c:	94400104 	addi	r17,r18,4
   88290:	280ad43a 	srli	r5,r5,16
   88294:	1908b03a 	or	r4,r3,r4
   88298:	793fff15 	stw	r4,-4(r15)
   8829c:	70ffff17 	ldw	r3,-4(r14)
   882a0:	8a000017 	ldw	r8,0(r17)
   882a4:	1806d43a 	srli	r3,r3,16
   882a8:	413fffcc 	andi	r4,r8,65535
   882ac:	1fc7383a 	mul	r3,r3,ra
   882b0:	1907883a 	add	r3,r3,r4
   882b4:	1947883a 	add	r3,r3,r5
   882b8:	180ed43a 	srli	r7,r3,16
   882bc:	727fe936 	bltu	r14,r9,88264 <rx_descriptor_end+0xfff88204>
   882c0:	90c00115 	stw	r3,4(r18)
   882c4:	31800104 	addi	r6,r6,4
   882c8:	5ac00104 	addi	r11,r11,4
   882cc:	333fbe36 	bltu	r6,r12,881c8 <rx_descriptor_end+0xfff88168>
   882d0:	0400090e 	bge	zero,r16,882f8 <__multiply+0x1d4>
   882d4:	50ffff17 	ldw	r3,-4(r10)
   882d8:	52bfff04 	addi	r10,r10,-4
   882dc:	18000326 	beq	r3,zero,882ec <__multiply+0x1c8>
   882e0:	00000506 	br	882f8 <__multiply+0x1d4>
   882e4:	50c00017 	ldw	r3,0(r10)
   882e8:	1800031e 	bne	r3,zero,882f8 <__multiply+0x1d4>
   882ec:	843fffc4 	addi	r16,r16,-1
   882f0:	52bfff04 	addi	r10,r10,-4
   882f4:	803ffb1e 	bne	r16,zero,882e4 <rx_descriptor_end+0xfff88284>
   882f8:	14000415 	stw	r16,16(r2)
   882fc:	dfc00517 	ldw	ra,20(sp)
   88300:	dd000417 	ldw	r20,16(sp)
   88304:	dcc00317 	ldw	r19,12(sp)
   88308:	dc800217 	ldw	r18,8(sp)
   8830c:	dc400117 	ldw	r17,4(sp)
   88310:	dc000017 	ldw	r16,0(sp)
   88314:	dec00604 	addi	sp,sp,24
   88318:	f800283a 	ret

0008831c <__pow5mult>:
   8831c:	defffa04 	addi	sp,sp,-24
   88320:	dcc00315 	stw	r19,12(sp)
   88324:	dc000015 	stw	r16,0(sp)
   88328:	dfc00515 	stw	ra,20(sp)
   8832c:	dd000415 	stw	r20,16(sp)
   88330:	dc800215 	stw	r18,8(sp)
   88334:	dc400115 	stw	r17,4(sp)
   88338:	308000cc 	andi	r2,r6,3
   8833c:	3021883a 	mov	r16,r6
   88340:	2027883a 	mov	r19,r4
   88344:	10002f1e 	bne	r2,zero,88404 <__pow5mult+0xe8>
   88348:	2825883a 	mov	r18,r5
   8834c:	8021d0ba 	srai	r16,r16,2
   88350:	80001a26 	beq	r16,zero,883bc <__pow5mult+0xa0>
   88354:	9c401217 	ldw	r17,72(r19)
   88358:	8800061e 	bne	r17,zero,88374 <__pow5mult+0x58>
   8835c:	00003406 	br	88430 <__pow5mult+0x114>
   88360:	8021d07a 	srai	r16,r16,1
   88364:	80001526 	beq	r16,zero,883bc <__pow5mult+0xa0>
   88368:	88800017 	ldw	r2,0(r17)
   8836c:	10001c26 	beq	r2,zero,883e0 <__pow5mult+0xc4>
   88370:	1023883a 	mov	r17,r2
   88374:	8080004c 	andi	r2,r16,1
   88378:	103ff926 	beq	r2,zero,88360 <rx_descriptor_end+0xfff88300>
   8837c:	880d883a 	mov	r6,r17
   88380:	900b883a 	mov	r5,r18
   88384:	9809883a 	mov	r4,r19
   88388:	00881240 	call	88124 <__multiply>
   8838c:	90001b26 	beq	r18,zero,883fc <__pow5mult+0xe0>
   88390:	91000117 	ldw	r4,4(r18)
   88394:	98c01317 	ldw	r3,76(r19)
   88398:	8021d07a 	srai	r16,r16,1
   8839c:	2109883a 	add	r4,r4,r4
   883a0:	2109883a 	add	r4,r4,r4
   883a4:	1907883a 	add	r3,r3,r4
   883a8:	19000017 	ldw	r4,0(r3)
   883ac:	91000015 	stw	r4,0(r18)
   883b0:	1c800015 	stw	r18,0(r3)
   883b4:	1025883a 	mov	r18,r2
   883b8:	803feb1e 	bne	r16,zero,88368 <rx_descriptor_end+0xfff88308>
   883bc:	9005883a 	mov	r2,r18
   883c0:	dfc00517 	ldw	ra,20(sp)
   883c4:	dd000417 	ldw	r20,16(sp)
   883c8:	dcc00317 	ldw	r19,12(sp)
   883cc:	dc800217 	ldw	r18,8(sp)
   883d0:	dc400117 	ldw	r17,4(sp)
   883d4:	dc000017 	ldw	r16,0(sp)
   883d8:	dec00604 	addi	sp,sp,24
   883dc:	f800283a 	ret
   883e0:	880d883a 	mov	r6,r17
   883e4:	880b883a 	mov	r5,r17
   883e8:	9809883a 	mov	r4,r19
   883ec:	00881240 	call	88124 <__multiply>
   883f0:	88800015 	stw	r2,0(r17)
   883f4:	10000015 	stw	zero,0(r2)
   883f8:	003fdd06 	br	88370 <rx_descriptor_end+0xfff88310>
   883fc:	1025883a 	mov	r18,r2
   88400:	003fd706 	br	88360 <rx_descriptor_end+0xfff88300>
   88404:	10bfffc4 	addi	r2,r2,-1
   88408:	1085883a 	add	r2,r2,r2
   8840c:	00c00274 	movhi	r3,9
   88410:	18c8d404 	addi	r3,r3,9040
   88414:	1085883a 	add	r2,r2,r2
   88418:	1885883a 	add	r2,r3,r2
   8841c:	11800017 	ldw	r6,0(r2)
   88420:	000f883a 	mov	r7,zero
   88424:	0087dac0 	call	87dac <__multadd>
   88428:	1025883a 	mov	r18,r2
   8842c:	003fc706 	br	8834c <rx_descriptor_end+0xfff882ec>
   88430:	05000044 	movi	r20,1
   88434:	a00b883a 	mov	r5,r20
   88438:	9809883a 	mov	r4,r19
   8843c:	0087cdc0 	call	87cdc <_Balloc>
   88440:	1023883a 	mov	r17,r2
   88444:	00809c44 	movi	r2,625
   88448:	88800515 	stw	r2,20(r17)
   8844c:	8d000415 	stw	r20,16(r17)
   88450:	9c401215 	stw	r17,72(r19)
   88454:	88000015 	stw	zero,0(r17)
   88458:	003fc606 	br	88374 <rx_descriptor_end+0xfff88314>

0008845c <__lshift>:
   8845c:	defff904 	addi	sp,sp,-28
   88460:	dd400515 	stw	r21,20(sp)
   88464:	dcc00315 	stw	r19,12(sp)
   88468:	302bd17a 	srai	r21,r6,5
   8846c:	2cc00417 	ldw	r19,16(r5)
   88470:	28800217 	ldw	r2,8(r5)
   88474:	dd000415 	stw	r20,16(sp)
   88478:	ace7883a 	add	r19,r21,r19
   8847c:	dc800215 	stw	r18,8(sp)
   88480:	dc400115 	stw	r17,4(sp)
   88484:	dc000015 	stw	r16,0(sp)
   88488:	dfc00615 	stw	ra,24(sp)
   8848c:	9c000044 	addi	r16,r19,1
   88490:	2823883a 	mov	r17,r5
   88494:	3029883a 	mov	r20,r6
   88498:	2025883a 	mov	r18,r4
   8849c:	29400117 	ldw	r5,4(r5)
   884a0:	1400030e 	bge	r2,r16,884b0 <__lshift+0x54>
   884a4:	1085883a 	add	r2,r2,r2
   884a8:	29400044 	addi	r5,r5,1
   884ac:	143ffd16 	blt	r2,r16,884a4 <rx_descriptor_end+0xfff88444>
   884b0:	9009883a 	mov	r4,r18
   884b4:	0087cdc0 	call	87cdc <_Balloc>
   884b8:	10c00504 	addi	r3,r2,20
   884bc:	0540070e 	bge	zero,r21,884dc <__lshift+0x80>
   884c0:	ad6b883a 	add	r21,r21,r21
   884c4:	ad6b883a 	add	r21,r21,r21
   884c8:	1809883a 	mov	r4,r3
   884cc:	1d47883a 	add	r3,r3,r21
   884d0:	20000015 	stw	zero,0(r4)
   884d4:	21000104 	addi	r4,r4,4
   884d8:	193ffd1e 	bne	r3,r4,884d0 <rx_descriptor_end+0xfff88470>
   884dc:	8a000417 	ldw	r8,16(r17)
   884e0:	89000504 	addi	r4,r17,20
   884e4:	a18007cc 	andi	r6,r20,31
   884e8:	4211883a 	add	r8,r8,r8
   884ec:	4211883a 	add	r8,r8,r8
   884f0:	2211883a 	add	r8,r4,r8
   884f4:	30002326 	beq	r6,zero,88584 <__lshift+0x128>
   884f8:	02400804 	movi	r9,32
   884fc:	4993c83a 	sub	r9,r9,r6
   88500:	000b883a 	mov	r5,zero
   88504:	21c00017 	ldw	r7,0(r4)
   88508:	1815883a 	mov	r10,r3
   8850c:	18c00104 	addi	r3,r3,4
   88510:	398e983a 	sll	r7,r7,r6
   88514:	21000104 	addi	r4,r4,4
   88518:	394ab03a 	or	r5,r7,r5
   8851c:	197fff15 	stw	r5,-4(r3)
   88520:	217fff17 	ldw	r5,-4(r4)
   88524:	2a4ad83a 	srl	r5,r5,r9
   88528:	223ff636 	bltu	r4,r8,88504 <rx_descriptor_end+0xfff884a4>
   8852c:	51400115 	stw	r5,4(r10)
   88530:	28001a1e 	bne	r5,zero,8859c <__lshift+0x140>
   88534:	843fffc4 	addi	r16,r16,-1
   88538:	14000415 	stw	r16,16(r2)
   8853c:	88000826 	beq	r17,zero,88560 <__lshift+0x104>
   88540:	89000117 	ldw	r4,4(r17)
   88544:	90c01317 	ldw	r3,76(r18)
   88548:	2109883a 	add	r4,r4,r4
   8854c:	2109883a 	add	r4,r4,r4
   88550:	1907883a 	add	r3,r3,r4
   88554:	19000017 	ldw	r4,0(r3)
   88558:	89000015 	stw	r4,0(r17)
   8855c:	1c400015 	stw	r17,0(r3)
   88560:	dfc00617 	ldw	ra,24(sp)
   88564:	dd400517 	ldw	r21,20(sp)
   88568:	dd000417 	ldw	r20,16(sp)
   8856c:	dcc00317 	ldw	r19,12(sp)
   88570:	dc800217 	ldw	r18,8(sp)
   88574:	dc400117 	ldw	r17,4(sp)
   88578:	dc000017 	ldw	r16,0(sp)
   8857c:	dec00704 	addi	sp,sp,28
   88580:	f800283a 	ret
   88584:	21400017 	ldw	r5,0(r4)
   88588:	18c00104 	addi	r3,r3,4
   8858c:	21000104 	addi	r4,r4,4
   88590:	197fff15 	stw	r5,-4(r3)
   88594:	223ffb36 	bltu	r4,r8,88584 <rx_descriptor_end+0xfff88524>
   88598:	003fe606 	br	88534 <rx_descriptor_end+0xfff884d4>
   8859c:	9c000084 	addi	r16,r19,2
   885a0:	003fe406 	br	88534 <rx_descriptor_end+0xfff884d4>

000885a4 <__mcmp>:
   885a4:	20800417 	ldw	r2,16(r4)
   885a8:	28c00417 	ldw	r3,16(r5)
   885ac:	10c5c83a 	sub	r2,r2,r3
   885b0:	1000111e 	bne	r2,zero,885f8 <__mcmp+0x54>
   885b4:	18c7883a 	add	r3,r3,r3
   885b8:	18c7883a 	add	r3,r3,r3
   885bc:	21000504 	addi	r4,r4,20
   885c0:	29400504 	addi	r5,r5,20
   885c4:	20c5883a 	add	r2,r4,r3
   885c8:	28cb883a 	add	r5,r5,r3
   885cc:	00000106 	br	885d4 <__mcmp+0x30>
   885d0:	20800a2e 	bgeu	r4,r2,885fc <__mcmp+0x58>
   885d4:	10bfff04 	addi	r2,r2,-4
   885d8:	297fff04 	addi	r5,r5,-4
   885dc:	11800017 	ldw	r6,0(r2)
   885e0:	28c00017 	ldw	r3,0(r5)
   885e4:	30fffa26 	beq	r6,r3,885d0 <rx_descriptor_end+0xfff88570>
   885e8:	30c00236 	bltu	r6,r3,885f4 <__mcmp+0x50>
   885ec:	00800044 	movi	r2,1
   885f0:	f800283a 	ret
   885f4:	00bfffc4 	movi	r2,-1
   885f8:	f800283a 	ret
   885fc:	0005883a 	mov	r2,zero
   88600:	f800283a 	ret

00088604 <__mdiff>:
   88604:	28c00417 	ldw	r3,16(r5)
   88608:	30800417 	ldw	r2,16(r6)
   8860c:	defffa04 	addi	sp,sp,-24
   88610:	dcc00315 	stw	r19,12(sp)
   88614:	dc800215 	stw	r18,8(sp)
   88618:	dfc00515 	stw	ra,20(sp)
   8861c:	dd000415 	stw	r20,16(sp)
   88620:	dc400115 	stw	r17,4(sp)
   88624:	dc000015 	stw	r16,0(sp)
   88628:	1887c83a 	sub	r3,r3,r2
   8862c:	2825883a 	mov	r18,r5
   88630:	3027883a 	mov	r19,r6
   88634:	1800141e 	bne	r3,zero,88688 <__mdiff+0x84>
   88638:	1085883a 	add	r2,r2,r2
   8863c:	1085883a 	add	r2,r2,r2
   88640:	2a000504 	addi	r8,r5,20
   88644:	34000504 	addi	r16,r6,20
   88648:	4087883a 	add	r3,r8,r2
   8864c:	8085883a 	add	r2,r16,r2
   88650:	00000106 	br	88658 <__mdiff+0x54>
   88654:	40c0592e 	bgeu	r8,r3,887bc <__mdiff+0x1b8>
   88658:	18ffff04 	addi	r3,r3,-4
   8865c:	10bfff04 	addi	r2,r2,-4
   88660:	19c00017 	ldw	r7,0(r3)
   88664:	11400017 	ldw	r5,0(r2)
   88668:	397ffa26 	beq	r7,r5,88654 <rx_descriptor_end+0xfff885f4>
   8866c:	3940592e 	bgeu	r7,r5,887d4 <__mdiff+0x1d0>
   88670:	9005883a 	mov	r2,r18
   88674:	4023883a 	mov	r17,r8
   88678:	9825883a 	mov	r18,r19
   8867c:	05000044 	movi	r20,1
   88680:	1027883a 	mov	r19,r2
   88684:	00000406 	br	88698 <__mdiff+0x94>
   88688:	18005616 	blt	r3,zero,887e4 <__mdiff+0x1e0>
   8868c:	34400504 	addi	r17,r6,20
   88690:	2c000504 	addi	r16,r5,20
   88694:	0029883a 	mov	r20,zero
   88698:	91400117 	ldw	r5,4(r18)
   8869c:	0087cdc0 	call	87cdc <_Balloc>
   886a0:	92400417 	ldw	r9,16(r18)
   886a4:	9b000417 	ldw	r12,16(r19)
   886a8:	12c00504 	addi	r11,r2,20
   886ac:	4a51883a 	add	r8,r9,r9
   886b0:	6319883a 	add	r12,r12,r12
   886b4:	4211883a 	add	r8,r8,r8
   886b8:	6319883a 	add	r12,r12,r12
   886bc:	15000315 	stw	r20,12(r2)
   886c0:	8211883a 	add	r8,r16,r8
   886c4:	8b19883a 	add	r12,r17,r12
   886c8:	0007883a 	mov	r3,zero
   886cc:	81400017 	ldw	r5,0(r16)
   886d0:	89c00017 	ldw	r7,0(r17)
   886d4:	59800104 	addi	r6,r11,4
   886d8:	293fffcc 	andi	r4,r5,65535
   886dc:	20c7883a 	add	r3,r4,r3
   886e0:	393fffcc 	andi	r4,r7,65535
   886e4:	1909c83a 	sub	r4,r3,r4
   886e8:	280ad43a 	srli	r5,r5,16
   886ec:	380ed43a 	srli	r7,r7,16
   886f0:	2007d43a 	srai	r3,r4,16
   886f4:	213fffcc 	andi	r4,r4,65535
   886f8:	29cbc83a 	sub	r5,r5,r7
   886fc:	28c7883a 	add	r3,r5,r3
   88700:	180a943a 	slli	r5,r3,16
   88704:	8c400104 	addi	r17,r17,4
   88708:	84000104 	addi	r16,r16,4
   8870c:	2908b03a 	or	r4,r5,r4
   88710:	59000015 	stw	r4,0(r11)
   88714:	1807d43a 	srai	r3,r3,16
   88718:	3015883a 	mov	r10,r6
   8871c:	3017883a 	mov	r11,r6
   88720:	8b3fea36 	bltu	r17,r12,886cc <rx_descriptor_end+0xfff8866c>
   88724:	8200162e 	bgeu	r16,r8,88780 <__mdiff+0x17c>
   88728:	8017883a 	mov	r11,r16
   8872c:	59400017 	ldw	r5,0(r11)
   88730:	31800104 	addi	r6,r6,4
   88734:	5ac00104 	addi	r11,r11,4
   88738:	293fffcc 	andi	r4,r5,65535
   8873c:	20c7883a 	add	r3,r4,r3
   88740:	280ed43a 	srli	r7,r5,16
   88744:	180bd43a 	srai	r5,r3,16
   88748:	193fffcc 	andi	r4,r3,65535
   8874c:	3947883a 	add	r3,r7,r5
   88750:	180a943a 	slli	r5,r3,16
   88754:	1807d43a 	srai	r3,r3,16
   88758:	2908b03a 	or	r4,r5,r4
   8875c:	313fff15 	stw	r4,-4(r6)
   88760:	5a3ff236 	bltu	r11,r8,8872c <rx_descriptor_end+0xfff886cc>
   88764:	0406303a 	nor	r3,zero,r16
   88768:	1a07883a 	add	r3,r3,r8
   8876c:	1806d0ba 	srli	r3,r3,2
   88770:	18c00044 	addi	r3,r3,1
   88774:	18c7883a 	add	r3,r3,r3
   88778:	18c7883a 	add	r3,r3,r3
   8877c:	50d5883a 	add	r10,r10,r3
   88780:	50ffff04 	addi	r3,r10,-4
   88784:	2000041e 	bne	r4,zero,88798 <__mdiff+0x194>
   88788:	18ffff04 	addi	r3,r3,-4
   8878c:	19000017 	ldw	r4,0(r3)
   88790:	4a7fffc4 	addi	r9,r9,-1
   88794:	203ffc26 	beq	r4,zero,88788 <rx_descriptor_end+0xfff88728>
   88798:	12400415 	stw	r9,16(r2)
   8879c:	dfc00517 	ldw	ra,20(sp)
   887a0:	dd000417 	ldw	r20,16(sp)
   887a4:	dcc00317 	ldw	r19,12(sp)
   887a8:	dc800217 	ldw	r18,8(sp)
   887ac:	dc400117 	ldw	r17,4(sp)
   887b0:	dc000017 	ldw	r16,0(sp)
   887b4:	dec00604 	addi	sp,sp,24
   887b8:	f800283a 	ret
   887bc:	000b883a 	mov	r5,zero
   887c0:	0087cdc0 	call	87cdc <_Balloc>
   887c4:	00c00044 	movi	r3,1
   887c8:	10c00415 	stw	r3,16(r2)
   887cc:	10000515 	stw	zero,20(r2)
   887d0:	003ff206 	br	8879c <rx_descriptor_end+0xfff8873c>
   887d4:	8023883a 	mov	r17,r16
   887d8:	0029883a 	mov	r20,zero
   887dc:	4021883a 	mov	r16,r8
   887e0:	003fad06 	br	88698 <rx_descriptor_end+0xfff88638>
   887e4:	9005883a 	mov	r2,r18
   887e8:	94400504 	addi	r17,r18,20
   887ec:	9c000504 	addi	r16,r19,20
   887f0:	9825883a 	mov	r18,r19
   887f4:	05000044 	movi	r20,1
   887f8:	1027883a 	mov	r19,r2
   887fc:	003fa606 	br	88698 <rx_descriptor_end+0xfff88638>

00088800 <__ulp>:
   88800:	295ffc2c 	andhi	r5,r5,32752
   88804:	00bf3034 	movhi	r2,64704
   88808:	2887883a 	add	r3,r5,r2
   8880c:	00c0020e 	bge	zero,r3,88818 <__ulp+0x18>
   88810:	0005883a 	mov	r2,zero
   88814:	f800283a 	ret
   88818:	00c7c83a 	sub	r3,zero,r3
   8881c:	1807d53a 	srai	r3,r3,20
   88820:	008004c4 	movi	r2,19
   88824:	10c00b0e 	bge	r2,r3,88854 <__ulp+0x54>
   88828:	18bffb04 	addi	r2,r3,-20
   8882c:	01000784 	movi	r4,30
   88830:	0007883a 	mov	r3,zero
   88834:	20800516 	blt	r4,r2,8884c <__ulp+0x4c>
   88838:	010007c4 	movi	r4,31
   8883c:	2089c83a 	sub	r4,r4,r2
   88840:	00800044 	movi	r2,1
   88844:	1104983a 	sll	r2,r2,r4
   88848:	f800283a 	ret
   8884c:	00800044 	movi	r2,1
   88850:	f800283a 	ret
   88854:	01400234 	movhi	r5,8
   88858:	28c7d83a 	sra	r3,r5,r3
   8885c:	0005883a 	mov	r2,zero
   88860:	f800283a 	ret

00088864 <__b2d>:
   88864:	defffa04 	addi	sp,sp,-24
   88868:	dc000015 	stw	r16,0(sp)
   8886c:	24000417 	ldw	r16,16(r4)
   88870:	dc400115 	stw	r17,4(sp)
   88874:	24400504 	addi	r17,r4,20
   88878:	8421883a 	add	r16,r16,r16
   8887c:	8421883a 	add	r16,r16,r16
   88880:	8c21883a 	add	r16,r17,r16
   88884:	dc800215 	stw	r18,8(sp)
   88888:	84bfff17 	ldw	r18,-4(r16)
   8888c:	dd000415 	stw	r20,16(sp)
   88890:	dcc00315 	stw	r19,12(sp)
   88894:	9009883a 	mov	r4,r18
   88898:	2829883a 	mov	r20,r5
   8889c:	dfc00515 	stw	ra,20(sp)
   888a0:	0087fd00 	call	87fd0 <__hi0bits>
   888a4:	00c00804 	movi	r3,32
   888a8:	1889c83a 	sub	r4,r3,r2
   888ac:	a1000015 	stw	r4,0(r20)
   888b0:	01000284 	movi	r4,10
   888b4:	84ffff04 	addi	r19,r16,-4
   888b8:	20801216 	blt	r4,r2,88904 <__b2d+0xa0>
   888bc:	018002c4 	movi	r6,11
   888c0:	308dc83a 	sub	r6,r6,r2
   888c4:	9186d83a 	srl	r3,r18,r6
   888c8:	18cffc34 	orhi	r3,r3,16368
   888cc:	8cc0212e 	bgeu	r17,r19,88954 <__b2d+0xf0>
   888d0:	813ffe17 	ldw	r4,-8(r16)
   888d4:	218cd83a 	srl	r6,r4,r6
   888d8:	10800544 	addi	r2,r2,21
   888dc:	9084983a 	sll	r2,r18,r2
   888e0:	1184b03a 	or	r2,r2,r6
   888e4:	dfc00517 	ldw	ra,20(sp)
   888e8:	dd000417 	ldw	r20,16(sp)
   888ec:	dcc00317 	ldw	r19,12(sp)
   888f0:	dc800217 	ldw	r18,8(sp)
   888f4:	dc400117 	ldw	r17,4(sp)
   888f8:	dc000017 	ldw	r16,0(sp)
   888fc:	dec00604 	addi	sp,sp,24
   88900:	f800283a 	ret
   88904:	8cc00f2e 	bgeu	r17,r19,88944 <__b2d+0xe0>
   88908:	117ffd44 	addi	r5,r2,-11
   8890c:	80bffe17 	ldw	r2,-8(r16)
   88910:	28000e26 	beq	r5,zero,8894c <__b2d+0xe8>
   88914:	1949c83a 	sub	r4,r3,r5
   88918:	9164983a 	sll	r18,r18,r5
   8891c:	1106d83a 	srl	r3,r2,r4
   88920:	81bffe04 	addi	r6,r16,-8
   88924:	948ffc34 	orhi	r18,r18,16368
   88928:	90c6b03a 	or	r3,r18,r3
   8892c:	89800e2e 	bgeu	r17,r6,88968 <__b2d+0x104>
   88930:	81bffd17 	ldw	r6,-12(r16)
   88934:	1144983a 	sll	r2,r2,r5
   88938:	310ad83a 	srl	r5,r6,r4
   8893c:	2884b03a 	or	r2,r5,r2
   88940:	003fe806 	br	888e4 <rx_descriptor_end+0xfff88884>
   88944:	10bffd44 	addi	r2,r2,-11
   88948:	1000041e 	bne	r2,zero,8895c <__b2d+0xf8>
   8894c:	90cffc34 	orhi	r3,r18,16368
   88950:	003fe406 	br	888e4 <rx_descriptor_end+0xfff88884>
   88954:	000d883a 	mov	r6,zero
   88958:	003fdf06 	br	888d8 <rx_descriptor_end+0xfff88878>
   8895c:	90a4983a 	sll	r18,r18,r2
   88960:	0005883a 	mov	r2,zero
   88964:	003ff906 	br	8894c <rx_descriptor_end+0xfff888ec>
   88968:	1144983a 	sll	r2,r2,r5
   8896c:	003fdd06 	br	888e4 <rx_descriptor_end+0xfff88884>

00088970 <__d2b>:
   88970:	defff804 	addi	sp,sp,-32
   88974:	dc000215 	stw	r16,8(sp)
   88978:	3021883a 	mov	r16,r6
   8897c:	dc400315 	stw	r17,12(sp)
   88980:	8022907a 	slli	r17,r16,1
   88984:	dd000615 	stw	r20,24(sp)
   88988:	2829883a 	mov	r20,r5
   8898c:	01400044 	movi	r5,1
   88990:	dcc00515 	stw	r19,20(sp)
   88994:	dc800415 	stw	r18,16(sp)
   88998:	dfc00715 	stw	ra,28(sp)
   8899c:	3825883a 	mov	r18,r7
   889a0:	8822d57a 	srli	r17,r17,21
   889a4:	0087cdc0 	call	87cdc <_Balloc>
   889a8:	1027883a 	mov	r19,r2
   889ac:	00800434 	movhi	r2,16
   889b0:	10bfffc4 	addi	r2,r2,-1
   889b4:	808c703a 	and	r6,r16,r2
   889b8:	88000126 	beq	r17,zero,889c0 <__d2b+0x50>
   889bc:	31800434 	orhi	r6,r6,16
   889c0:	d9800015 	stw	r6,0(sp)
   889c4:	a0002426 	beq	r20,zero,88a58 <__d2b+0xe8>
   889c8:	d9000104 	addi	r4,sp,4
   889cc:	dd000115 	stw	r20,4(sp)
   889d0:	00880380 	call	88038 <__lo0bits>
   889d4:	d8c00017 	ldw	r3,0(sp)
   889d8:	10002f1e 	bne	r2,zero,88a98 <__d2b+0x128>
   889dc:	d9000117 	ldw	r4,4(sp)
   889e0:	99000515 	stw	r4,20(r19)
   889e4:	1821003a 	cmpeq	r16,r3,zero
   889e8:	01000084 	movi	r4,2
   889ec:	2421c83a 	sub	r16,r4,r16
   889f0:	98c00615 	stw	r3,24(r19)
   889f4:	9c000415 	stw	r16,16(r19)
   889f8:	88001f1e 	bne	r17,zero,88a78 <__d2b+0x108>
   889fc:	10bef384 	addi	r2,r2,-1074
   88a00:	90800015 	stw	r2,0(r18)
   88a04:	00900034 	movhi	r2,16384
   88a08:	10bfffc4 	addi	r2,r2,-1
   88a0c:	8085883a 	add	r2,r16,r2
   88a10:	1085883a 	add	r2,r2,r2
   88a14:	1085883a 	add	r2,r2,r2
   88a18:	9885883a 	add	r2,r19,r2
   88a1c:	11000517 	ldw	r4,20(r2)
   88a20:	8020917a 	slli	r16,r16,5
   88a24:	0087fd00 	call	87fd0 <__hi0bits>
   88a28:	d8c00817 	ldw	r3,32(sp)
   88a2c:	8085c83a 	sub	r2,r16,r2
   88a30:	18800015 	stw	r2,0(r3)
   88a34:	9805883a 	mov	r2,r19
   88a38:	dfc00717 	ldw	ra,28(sp)
   88a3c:	dd000617 	ldw	r20,24(sp)
   88a40:	dcc00517 	ldw	r19,20(sp)
   88a44:	dc800417 	ldw	r18,16(sp)
   88a48:	dc400317 	ldw	r17,12(sp)
   88a4c:	dc000217 	ldw	r16,8(sp)
   88a50:	dec00804 	addi	sp,sp,32
   88a54:	f800283a 	ret
   88a58:	d809883a 	mov	r4,sp
   88a5c:	00880380 	call	88038 <__lo0bits>
   88a60:	d8c00017 	ldw	r3,0(sp)
   88a64:	04000044 	movi	r16,1
   88a68:	9c000415 	stw	r16,16(r19)
   88a6c:	98c00515 	stw	r3,20(r19)
   88a70:	10800804 	addi	r2,r2,32
   88a74:	883fe126 	beq	r17,zero,889fc <rx_descriptor_end+0xfff8899c>
   88a78:	00c00d44 	movi	r3,53
   88a7c:	8c7ef344 	addi	r17,r17,-1075
   88a80:	88a3883a 	add	r17,r17,r2
   88a84:	1885c83a 	sub	r2,r3,r2
   88a88:	d8c00817 	ldw	r3,32(sp)
   88a8c:	94400015 	stw	r17,0(r18)
   88a90:	18800015 	stw	r2,0(r3)
   88a94:	003fe706 	br	88a34 <rx_descriptor_end+0xfff889d4>
   88a98:	01000804 	movi	r4,32
   88a9c:	2089c83a 	sub	r4,r4,r2
   88aa0:	1908983a 	sll	r4,r3,r4
   88aa4:	d9400117 	ldw	r5,4(sp)
   88aa8:	1886d83a 	srl	r3,r3,r2
   88aac:	2148b03a 	or	r4,r4,r5
   88ab0:	99000515 	stw	r4,20(r19)
   88ab4:	d8c00015 	stw	r3,0(sp)
   88ab8:	003fca06 	br	889e4 <rx_descriptor_end+0xfff88984>

00088abc <__ratio>:
   88abc:	defff904 	addi	sp,sp,-28
   88ac0:	dc400315 	stw	r17,12(sp)
   88ac4:	2823883a 	mov	r17,r5
   88ac8:	d9400104 	addi	r5,sp,4
   88acc:	dfc00615 	stw	ra,24(sp)
   88ad0:	dcc00515 	stw	r19,20(sp)
   88ad4:	dc800415 	stw	r18,16(sp)
   88ad8:	2027883a 	mov	r19,r4
   88adc:	dc000215 	stw	r16,8(sp)
   88ae0:	00888640 	call	88864 <__b2d>
   88ae4:	d80b883a 	mov	r5,sp
   88ae8:	8809883a 	mov	r4,r17
   88aec:	1025883a 	mov	r18,r2
   88af0:	1821883a 	mov	r16,r3
   88af4:	00888640 	call	88864 <__b2d>
   88af8:	8a000417 	ldw	r8,16(r17)
   88afc:	99000417 	ldw	r4,16(r19)
   88b00:	d9400117 	ldw	r5,4(sp)
   88b04:	2209c83a 	sub	r4,r4,r8
   88b08:	2010917a 	slli	r8,r4,5
   88b0c:	d9000017 	ldw	r4,0(sp)
   88b10:	2909c83a 	sub	r4,r5,r4
   88b14:	4109883a 	add	r4,r8,r4
   88b18:	01000e0e 	bge	zero,r4,88b54 <__ratio+0x98>
   88b1c:	2008953a 	slli	r4,r4,20
   88b20:	2421883a 	add	r16,r4,r16
   88b24:	100d883a 	mov	r6,r2
   88b28:	180f883a 	mov	r7,r3
   88b2c:	9009883a 	mov	r4,r18
   88b30:	800b883a 	mov	r5,r16
   88b34:	008c7680 	call	8c768 <__divdf3>
   88b38:	dfc00617 	ldw	ra,24(sp)
   88b3c:	dcc00517 	ldw	r19,20(sp)
   88b40:	dc800417 	ldw	r18,16(sp)
   88b44:	dc400317 	ldw	r17,12(sp)
   88b48:	dc000217 	ldw	r16,8(sp)
   88b4c:	dec00704 	addi	sp,sp,28
   88b50:	f800283a 	ret
   88b54:	2008953a 	slli	r4,r4,20
   88b58:	1907c83a 	sub	r3,r3,r4
   88b5c:	003ff106 	br	88b24 <rx_descriptor_end+0xfff88ac4>

00088b60 <_mprec_log10>:
   88b60:	defffe04 	addi	sp,sp,-8
   88b64:	dc000015 	stw	r16,0(sp)
   88b68:	dfc00115 	stw	ra,4(sp)
   88b6c:	008005c4 	movi	r2,23
   88b70:	2021883a 	mov	r16,r4
   88b74:	11000d0e 	bge	r2,r4,88bac <_mprec_log10+0x4c>
   88b78:	0005883a 	mov	r2,zero
   88b7c:	00cffc34 	movhi	r3,16368
   88b80:	843fffc4 	addi	r16,r16,-1
   88b84:	000d883a 	mov	r6,zero
   88b88:	01d00934 	movhi	r7,16420
   88b8c:	1009883a 	mov	r4,r2
   88b90:	180b883a 	mov	r5,r3
   88b94:	008d2a80 	call	8d2a8 <__muldf3>
   88b98:	803ff91e 	bne	r16,zero,88b80 <rx_descriptor_end+0xfff88b20>
   88b9c:	dfc00117 	ldw	ra,4(sp)
   88ba0:	dc000017 	ldw	r16,0(sp)
   88ba4:	dec00204 	addi	sp,sp,8
   88ba8:	f800283a 	ret
   88bac:	202090fa 	slli	r16,r4,3
   88bb0:	00800274 	movhi	r2,9
   88bb4:	1088eb04 	addi	r2,r2,9132
   88bb8:	1421883a 	add	r16,r2,r16
   88bbc:	80800017 	ldw	r2,0(r16)
   88bc0:	80c00117 	ldw	r3,4(r16)
   88bc4:	dfc00117 	ldw	ra,4(sp)
   88bc8:	dc000017 	ldw	r16,0(sp)
   88bcc:	dec00204 	addi	sp,sp,8
   88bd0:	f800283a 	ret

00088bd4 <__copybits>:
   88bd4:	297fffc4 	addi	r5,r5,-1
   88bd8:	280fd17a 	srai	r7,r5,5
   88bdc:	30c00417 	ldw	r3,16(r6)
   88be0:	30800504 	addi	r2,r6,20
   88be4:	39c00044 	addi	r7,r7,1
   88be8:	18c7883a 	add	r3,r3,r3
   88bec:	39cf883a 	add	r7,r7,r7
   88bf0:	18c7883a 	add	r3,r3,r3
   88bf4:	39cf883a 	add	r7,r7,r7
   88bf8:	10c7883a 	add	r3,r2,r3
   88bfc:	21cf883a 	add	r7,r4,r7
   88c00:	10c00d2e 	bgeu	r2,r3,88c38 <__copybits+0x64>
   88c04:	200b883a 	mov	r5,r4
   88c08:	12000017 	ldw	r8,0(r2)
   88c0c:	29400104 	addi	r5,r5,4
   88c10:	10800104 	addi	r2,r2,4
   88c14:	2a3fff15 	stw	r8,-4(r5)
   88c18:	10fffb36 	bltu	r2,r3,88c08 <rx_descriptor_end+0xfff88ba8>
   88c1c:	1985c83a 	sub	r2,r3,r6
   88c20:	10bffac4 	addi	r2,r2,-21
   88c24:	1004d0ba 	srli	r2,r2,2
   88c28:	10800044 	addi	r2,r2,1
   88c2c:	1085883a 	add	r2,r2,r2
   88c30:	1085883a 	add	r2,r2,r2
   88c34:	2089883a 	add	r4,r4,r2
   88c38:	21c0032e 	bgeu	r4,r7,88c48 <__copybits+0x74>
   88c3c:	20000015 	stw	zero,0(r4)
   88c40:	21000104 	addi	r4,r4,4
   88c44:	21fffd36 	bltu	r4,r7,88c3c <rx_descriptor_end+0xfff88bdc>
   88c48:	f800283a 	ret

00088c4c <__any_on>:
   88c4c:	20c00417 	ldw	r3,16(r4)
   88c50:	2805d17a 	srai	r2,r5,5
   88c54:	21000504 	addi	r4,r4,20
   88c58:	18800d0e 	bge	r3,r2,88c90 <__any_on+0x44>
   88c5c:	18c7883a 	add	r3,r3,r3
   88c60:	18c7883a 	add	r3,r3,r3
   88c64:	20c7883a 	add	r3,r4,r3
   88c68:	20c0192e 	bgeu	r4,r3,88cd0 <__any_on+0x84>
   88c6c:	18bfff17 	ldw	r2,-4(r3)
   88c70:	18ffff04 	addi	r3,r3,-4
   88c74:	1000041e 	bne	r2,zero,88c88 <__any_on+0x3c>
   88c78:	20c0142e 	bgeu	r4,r3,88ccc <__any_on+0x80>
   88c7c:	18ffff04 	addi	r3,r3,-4
   88c80:	19400017 	ldw	r5,0(r3)
   88c84:	283ffc26 	beq	r5,zero,88c78 <rx_descriptor_end+0xfff88c18>
   88c88:	00800044 	movi	r2,1
   88c8c:	f800283a 	ret
   88c90:	10c00a0e 	bge	r2,r3,88cbc <__any_on+0x70>
   88c94:	1085883a 	add	r2,r2,r2
   88c98:	1085883a 	add	r2,r2,r2
   88c9c:	294007cc 	andi	r5,r5,31
   88ca0:	2087883a 	add	r3,r4,r2
   88ca4:	283ff026 	beq	r5,zero,88c68 <rx_descriptor_end+0xfff88c08>
   88ca8:	19800017 	ldw	r6,0(r3)
   88cac:	3144d83a 	srl	r2,r6,r5
   88cb0:	114a983a 	sll	r5,r2,r5
   88cb4:	317ff41e 	bne	r6,r5,88c88 <rx_descriptor_end+0xfff88c28>
   88cb8:	003feb06 	br	88c68 <rx_descriptor_end+0xfff88c08>
   88cbc:	1085883a 	add	r2,r2,r2
   88cc0:	1085883a 	add	r2,r2,r2
   88cc4:	2087883a 	add	r3,r4,r2
   88cc8:	003fe706 	br	88c68 <rx_descriptor_end+0xfff88c08>
   88ccc:	f800283a 	ret
   88cd0:	0005883a 	mov	r2,zero
   88cd4:	f800283a 	ret

00088cd8 <_putc_r>:
   88cd8:	defffc04 	addi	sp,sp,-16
   88cdc:	dc000215 	stw	r16,8(sp)
   88ce0:	dfc00315 	stw	ra,12(sp)
   88ce4:	2021883a 	mov	r16,r4
   88ce8:	20000226 	beq	r4,zero,88cf4 <_putc_r+0x1c>
   88cec:	20800e17 	ldw	r2,56(r4)
   88cf0:	10001b26 	beq	r2,zero,88d60 <_putc_r+0x88>
   88cf4:	30800217 	ldw	r2,8(r6)
   88cf8:	10bfffc4 	addi	r2,r2,-1
   88cfc:	30800215 	stw	r2,8(r6)
   88d00:	10000a16 	blt	r2,zero,88d2c <_putc_r+0x54>
   88d04:	30800017 	ldw	r2,0(r6)
   88d08:	11400005 	stb	r5,0(r2)
   88d0c:	30800017 	ldw	r2,0(r6)
   88d10:	10c00044 	addi	r3,r2,1
   88d14:	30c00015 	stw	r3,0(r6)
   88d18:	10800003 	ldbu	r2,0(r2)
   88d1c:	dfc00317 	ldw	ra,12(sp)
   88d20:	dc000217 	ldw	r16,8(sp)
   88d24:	dec00404 	addi	sp,sp,16
   88d28:	f800283a 	ret
   88d2c:	30c00617 	ldw	r3,24(r6)
   88d30:	10c00616 	blt	r2,r3,88d4c <_putc_r+0x74>
   88d34:	30800017 	ldw	r2,0(r6)
   88d38:	00c00284 	movi	r3,10
   88d3c:	11400005 	stb	r5,0(r2)
   88d40:	30800017 	ldw	r2,0(r6)
   88d44:	11400003 	ldbu	r5,0(r2)
   88d48:	28fff11e 	bne	r5,r3,88d10 <rx_descriptor_end+0xfff88cb0>
   88d4c:	8009883a 	mov	r4,r16
   88d50:	dfc00317 	ldw	ra,12(sp)
   88d54:	dc000217 	ldw	r16,8(sp)
   88d58:	dec00404 	addi	sp,sp,16
   88d5c:	008ab9c1 	jmpi	8ab9c <__swbuf_r>
   88d60:	d9400015 	stw	r5,0(sp)
   88d64:	d9800115 	stw	r6,4(sp)
   88d68:	008204c0 	call	8204c <__sinit>
   88d6c:	d9800117 	ldw	r6,4(sp)
   88d70:	d9400017 	ldw	r5,0(sp)
   88d74:	003fdf06 	br	88cf4 <rx_descriptor_end+0xfff88c94>

00088d78 <putc>:
   88d78:	00800274 	movhi	r2,9
   88d7c:	defffc04 	addi	sp,sp,-16
   88d80:	10913d04 	addi	r2,r2,17652
   88d84:	dc000115 	stw	r16,4(sp)
   88d88:	14000017 	ldw	r16,0(r2)
   88d8c:	dc400215 	stw	r17,8(sp)
   88d90:	dfc00315 	stw	ra,12(sp)
   88d94:	2023883a 	mov	r17,r4
   88d98:	80000226 	beq	r16,zero,88da4 <putc+0x2c>
   88d9c:	80800e17 	ldw	r2,56(r16)
   88da0:	10001a26 	beq	r2,zero,88e0c <putc+0x94>
   88da4:	28800217 	ldw	r2,8(r5)
   88da8:	10bfffc4 	addi	r2,r2,-1
   88dac:	28800215 	stw	r2,8(r5)
   88db0:	10000b16 	blt	r2,zero,88de0 <putc+0x68>
   88db4:	28800017 	ldw	r2,0(r5)
   88db8:	14400005 	stb	r17,0(r2)
   88dbc:	28800017 	ldw	r2,0(r5)
   88dc0:	10c00044 	addi	r3,r2,1
   88dc4:	28c00015 	stw	r3,0(r5)
   88dc8:	10800003 	ldbu	r2,0(r2)
   88dcc:	dfc00317 	ldw	ra,12(sp)
   88dd0:	dc400217 	ldw	r17,8(sp)
   88dd4:	dc000117 	ldw	r16,4(sp)
   88dd8:	dec00404 	addi	sp,sp,16
   88ddc:	f800283a 	ret
   88de0:	28c00617 	ldw	r3,24(r5)
   88de4:	10c00e16 	blt	r2,r3,88e20 <putc+0xa8>
   88de8:	28800017 	ldw	r2,0(r5)
   88dec:	01000284 	movi	r4,10
   88df0:	14400005 	stb	r17,0(r2)
   88df4:	28800017 	ldw	r2,0(r5)
   88df8:	10c00003 	ldbu	r3,0(r2)
   88dfc:	193ff01e 	bne	r3,r4,88dc0 <rx_descriptor_end+0xfff88d60>
   88e00:	280d883a 	mov	r6,r5
   88e04:	180b883a 	mov	r5,r3
   88e08:	00000706 	br	88e28 <putc+0xb0>
   88e0c:	8009883a 	mov	r4,r16
   88e10:	d9400015 	stw	r5,0(sp)
   88e14:	008204c0 	call	8204c <__sinit>
   88e18:	d9400017 	ldw	r5,0(sp)
   88e1c:	003fe106 	br	88da4 <rx_descriptor_end+0xfff88d44>
   88e20:	280d883a 	mov	r6,r5
   88e24:	880b883a 	mov	r5,r17
   88e28:	8009883a 	mov	r4,r16
   88e2c:	dfc00317 	ldw	ra,12(sp)
   88e30:	dc400217 	ldw	r17,8(sp)
   88e34:	dc000117 	ldw	r16,4(sp)
   88e38:	dec00404 	addi	sp,sp,16
   88e3c:	008ab9c1 	jmpi	8ab9c <__swbuf_r>

00088e40 <_read_r>:
   88e40:	defffd04 	addi	sp,sp,-12
   88e44:	2805883a 	mov	r2,r5
   88e48:	dc000015 	stw	r16,0(sp)
   88e4c:	04000274 	movhi	r16,9
   88e50:	dc400115 	stw	r17,4(sp)
   88e54:	300b883a 	mov	r5,r6
   88e58:	84193504 	addi	r16,r16,25812
   88e5c:	2023883a 	mov	r17,r4
   88e60:	380d883a 	mov	r6,r7
   88e64:	1009883a 	mov	r4,r2
   88e68:	dfc00215 	stw	ra,8(sp)
   88e6c:	80000015 	stw	zero,0(r16)
   88e70:	008edd40 	call	8edd4 <read>
   88e74:	00ffffc4 	movi	r3,-1
   88e78:	10c00526 	beq	r2,r3,88e90 <_read_r+0x50>
   88e7c:	dfc00217 	ldw	ra,8(sp)
   88e80:	dc400117 	ldw	r17,4(sp)
   88e84:	dc000017 	ldw	r16,0(sp)
   88e88:	dec00304 	addi	sp,sp,12
   88e8c:	f800283a 	ret
   88e90:	80c00017 	ldw	r3,0(r16)
   88e94:	183ff926 	beq	r3,zero,88e7c <rx_descriptor_end+0xfff88e1c>
   88e98:	88c00015 	stw	r3,0(r17)
   88e9c:	003ff706 	br	88e7c <rx_descriptor_end+0xfff88e1c>

00088ea0 <_realloc_r>:
   88ea0:	defff604 	addi	sp,sp,-40
   88ea4:	dc800215 	stw	r18,8(sp)
   88ea8:	dfc00915 	stw	ra,36(sp)
   88eac:	df000815 	stw	fp,32(sp)
   88eb0:	ddc00715 	stw	r23,28(sp)
   88eb4:	dd800615 	stw	r22,24(sp)
   88eb8:	dd400515 	stw	r21,20(sp)
   88ebc:	dd000415 	stw	r20,16(sp)
   88ec0:	dcc00315 	stw	r19,12(sp)
   88ec4:	dc400115 	stw	r17,4(sp)
   88ec8:	dc000015 	stw	r16,0(sp)
   88ecc:	3025883a 	mov	r18,r6
   88ed0:	2800b726 	beq	r5,zero,891b0 <_realloc_r+0x310>
   88ed4:	282b883a 	mov	r21,r5
   88ed8:	2029883a 	mov	r20,r4
   88edc:	008eae80 	call	8eae8 <__malloc_lock>
   88ee0:	a8bfff17 	ldw	r2,-4(r21)
   88ee4:	043fff04 	movi	r16,-4
   88ee8:	90c002c4 	addi	r3,r18,11
   88eec:	01000584 	movi	r4,22
   88ef0:	acfffe04 	addi	r19,r21,-8
   88ef4:	1420703a 	and	r16,r2,r16
   88ef8:	20c0332e 	bgeu	r4,r3,88fc8 <_realloc_r+0x128>
   88efc:	047ffe04 	movi	r17,-8
   88f00:	1c62703a 	and	r17,r3,r17
   88f04:	8807883a 	mov	r3,r17
   88f08:	88005816 	blt	r17,zero,8906c <_realloc_r+0x1cc>
   88f0c:	8c805736 	bltu	r17,r18,8906c <_realloc_r+0x1cc>
   88f10:	80c0300e 	bge	r16,r3,88fd4 <_realloc_r+0x134>
   88f14:	07000274 	movhi	fp,9
   88f18:	e70b8104 	addi	fp,fp,11780
   88f1c:	e1c00217 	ldw	r7,8(fp)
   88f20:	9c09883a 	add	r4,r19,r16
   88f24:	22000117 	ldw	r8,4(r4)
   88f28:	21c06326 	beq	r4,r7,890b8 <_realloc_r+0x218>
   88f2c:	017fff84 	movi	r5,-2
   88f30:	414a703a 	and	r5,r8,r5
   88f34:	214b883a 	add	r5,r4,r5
   88f38:	29800117 	ldw	r6,4(r5)
   88f3c:	3180004c 	andi	r6,r6,1
   88f40:	30003f26 	beq	r6,zero,89040 <_realloc_r+0x1a0>
   88f44:	1080004c 	andi	r2,r2,1
   88f48:	10008326 	beq	r2,zero,89158 <_realloc_r+0x2b8>
   88f4c:	900b883a 	mov	r5,r18
   88f50:	a009883a 	mov	r4,r20
   88f54:	00826800 	call	82680 <_malloc_r>
   88f58:	1025883a 	mov	r18,r2
   88f5c:	10011e26 	beq	r2,zero,893d8 <_realloc_r+0x538>
   88f60:	a93fff17 	ldw	r4,-4(r21)
   88f64:	10fffe04 	addi	r3,r2,-8
   88f68:	00bfff84 	movi	r2,-2
   88f6c:	2084703a 	and	r2,r4,r2
   88f70:	9885883a 	add	r2,r19,r2
   88f74:	1880ee26 	beq	r3,r2,89330 <_realloc_r+0x490>
   88f78:	81bfff04 	addi	r6,r16,-4
   88f7c:	00800904 	movi	r2,36
   88f80:	1180b836 	bltu	r2,r6,89264 <_realloc_r+0x3c4>
   88f84:	00c004c4 	movi	r3,19
   88f88:	19809636 	bltu	r3,r6,891e4 <_realloc_r+0x344>
   88f8c:	9005883a 	mov	r2,r18
   88f90:	a807883a 	mov	r3,r21
   88f94:	19000017 	ldw	r4,0(r3)
   88f98:	11000015 	stw	r4,0(r2)
   88f9c:	19000117 	ldw	r4,4(r3)
   88fa0:	11000115 	stw	r4,4(r2)
   88fa4:	18c00217 	ldw	r3,8(r3)
   88fa8:	10c00215 	stw	r3,8(r2)
   88fac:	a80b883a 	mov	r5,r21
   88fb0:	a009883a 	mov	r4,r20
   88fb4:	00821c00 	call	821c0 <_free_r>
   88fb8:	a009883a 	mov	r4,r20
   88fbc:	008eb0c0 	call	8eb0c <__malloc_unlock>
   88fc0:	9005883a 	mov	r2,r18
   88fc4:	00001206 	br	89010 <_realloc_r+0x170>
   88fc8:	00c00404 	movi	r3,16
   88fcc:	1823883a 	mov	r17,r3
   88fd0:	003fce06 	br	88f0c <rx_descriptor_end+0xfff88eac>
   88fd4:	a825883a 	mov	r18,r21
   88fd8:	8445c83a 	sub	r2,r16,r17
   88fdc:	00c003c4 	movi	r3,15
   88fe0:	18802636 	bltu	r3,r2,8907c <_realloc_r+0x1dc>
   88fe4:	99800117 	ldw	r6,4(r19)
   88fe8:	9c07883a 	add	r3,r19,r16
   88fec:	3180004c 	andi	r6,r6,1
   88ff0:	3420b03a 	or	r16,r6,r16
   88ff4:	9c000115 	stw	r16,4(r19)
   88ff8:	18800117 	ldw	r2,4(r3)
   88ffc:	10800054 	ori	r2,r2,1
   89000:	18800115 	stw	r2,4(r3)
   89004:	a009883a 	mov	r4,r20
   89008:	008eb0c0 	call	8eb0c <__malloc_unlock>
   8900c:	9005883a 	mov	r2,r18
   89010:	dfc00917 	ldw	ra,36(sp)
   89014:	df000817 	ldw	fp,32(sp)
   89018:	ddc00717 	ldw	r23,28(sp)
   8901c:	dd800617 	ldw	r22,24(sp)
   89020:	dd400517 	ldw	r21,20(sp)
   89024:	dd000417 	ldw	r20,16(sp)
   89028:	dcc00317 	ldw	r19,12(sp)
   8902c:	dc800217 	ldw	r18,8(sp)
   89030:	dc400117 	ldw	r17,4(sp)
   89034:	dc000017 	ldw	r16,0(sp)
   89038:	dec00a04 	addi	sp,sp,40
   8903c:	f800283a 	ret
   89040:	017fff04 	movi	r5,-4
   89044:	414a703a 	and	r5,r8,r5
   89048:	814d883a 	add	r6,r16,r5
   8904c:	30c01f16 	blt	r6,r3,890cc <_realloc_r+0x22c>
   89050:	20800317 	ldw	r2,12(r4)
   89054:	20c00217 	ldw	r3,8(r4)
   89058:	a825883a 	mov	r18,r21
   8905c:	3021883a 	mov	r16,r6
   89060:	18800315 	stw	r2,12(r3)
   89064:	10c00215 	stw	r3,8(r2)
   89068:	003fdb06 	br	88fd8 <rx_descriptor_end+0xfff88f78>
   8906c:	00800304 	movi	r2,12
   89070:	a0800015 	stw	r2,0(r20)
   89074:	0005883a 	mov	r2,zero
   89078:	003fe506 	br	89010 <rx_descriptor_end+0xfff88fb0>
   8907c:	98c00117 	ldw	r3,4(r19)
   89080:	9c4b883a 	add	r5,r19,r17
   89084:	11000054 	ori	r4,r2,1
   89088:	18c0004c 	andi	r3,r3,1
   8908c:	1c62b03a 	or	r17,r3,r17
   89090:	9c400115 	stw	r17,4(r19)
   89094:	29000115 	stw	r4,4(r5)
   89098:	2885883a 	add	r2,r5,r2
   8909c:	10c00117 	ldw	r3,4(r2)
   890a0:	29400204 	addi	r5,r5,8
   890a4:	a009883a 	mov	r4,r20
   890a8:	18c00054 	ori	r3,r3,1
   890ac:	10c00115 	stw	r3,4(r2)
   890b0:	00821c00 	call	821c0 <_free_r>
   890b4:	003fd306 	br	89004 <rx_descriptor_end+0xfff88fa4>
   890b8:	017fff04 	movi	r5,-4
   890bc:	414a703a 	and	r5,r8,r5
   890c0:	89800404 	addi	r6,r17,16
   890c4:	8151883a 	add	r8,r16,r5
   890c8:	4180590e 	bge	r8,r6,89230 <_realloc_r+0x390>
   890cc:	1080004c 	andi	r2,r2,1
   890d0:	103f9e1e 	bne	r2,zero,88f4c <rx_descriptor_end+0xfff88eec>
   890d4:	adbffe17 	ldw	r22,-8(r21)
   890d8:	00bfff04 	movi	r2,-4
   890dc:	9dadc83a 	sub	r22,r19,r22
   890e0:	b1800117 	ldw	r6,4(r22)
   890e4:	3084703a 	and	r2,r6,r2
   890e8:	20002026 	beq	r4,zero,8916c <_realloc_r+0x2cc>
   890ec:	80af883a 	add	r23,r16,r2
   890f0:	b96f883a 	add	r23,r23,r5
   890f4:	21c05f26 	beq	r4,r7,89274 <_realloc_r+0x3d4>
   890f8:	b8c01c16 	blt	r23,r3,8916c <_realloc_r+0x2cc>
   890fc:	20800317 	ldw	r2,12(r4)
   89100:	20c00217 	ldw	r3,8(r4)
   89104:	81bfff04 	addi	r6,r16,-4
   89108:	01000904 	movi	r4,36
   8910c:	18800315 	stw	r2,12(r3)
   89110:	10c00215 	stw	r3,8(r2)
   89114:	b0c00217 	ldw	r3,8(r22)
   89118:	b0800317 	ldw	r2,12(r22)
   8911c:	b4800204 	addi	r18,r22,8
   89120:	18800315 	stw	r2,12(r3)
   89124:	10c00215 	stw	r3,8(r2)
   89128:	21801b36 	bltu	r4,r6,89198 <_realloc_r+0x2f8>
   8912c:	008004c4 	movi	r2,19
   89130:	1180352e 	bgeu	r2,r6,89208 <_realloc_r+0x368>
   89134:	a8800017 	ldw	r2,0(r21)
   89138:	b0800215 	stw	r2,8(r22)
   8913c:	a8800117 	ldw	r2,4(r21)
   89140:	b0800315 	stw	r2,12(r22)
   89144:	008006c4 	movi	r2,27
   89148:	11807f36 	bltu	r2,r6,89348 <_realloc_r+0x4a8>
   8914c:	b0800404 	addi	r2,r22,16
   89150:	ad400204 	addi	r21,r21,8
   89154:	00002d06 	br	8920c <_realloc_r+0x36c>
   89158:	adbffe17 	ldw	r22,-8(r21)
   8915c:	00bfff04 	movi	r2,-4
   89160:	9dadc83a 	sub	r22,r19,r22
   89164:	b1000117 	ldw	r4,4(r22)
   89168:	2084703a 	and	r2,r4,r2
   8916c:	b03f7726 	beq	r22,zero,88f4c <rx_descriptor_end+0xfff88eec>
   89170:	80af883a 	add	r23,r16,r2
   89174:	b8ff7516 	blt	r23,r3,88f4c <rx_descriptor_end+0xfff88eec>
   89178:	b0800317 	ldw	r2,12(r22)
   8917c:	b0c00217 	ldw	r3,8(r22)
   89180:	81bfff04 	addi	r6,r16,-4
   89184:	01000904 	movi	r4,36
   89188:	18800315 	stw	r2,12(r3)
   8918c:	10c00215 	stw	r3,8(r2)
   89190:	b4800204 	addi	r18,r22,8
   89194:	21bfe52e 	bgeu	r4,r6,8912c <rx_descriptor_end+0xfff890cc>
   89198:	a80b883a 	mov	r5,r21
   8919c:	9009883a 	mov	r4,r18
   891a0:	0082e8c0 	call	82e8c <memmove>
   891a4:	b821883a 	mov	r16,r23
   891a8:	b027883a 	mov	r19,r22
   891ac:	003f8a06 	br	88fd8 <rx_descriptor_end+0xfff88f78>
   891b0:	300b883a 	mov	r5,r6
   891b4:	dfc00917 	ldw	ra,36(sp)
   891b8:	df000817 	ldw	fp,32(sp)
   891bc:	ddc00717 	ldw	r23,28(sp)
   891c0:	dd800617 	ldw	r22,24(sp)
   891c4:	dd400517 	ldw	r21,20(sp)
   891c8:	dd000417 	ldw	r20,16(sp)
   891cc:	dcc00317 	ldw	r19,12(sp)
   891d0:	dc800217 	ldw	r18,8(sp)
   891d4:	dc400117 	ldw	r17,4(sp)
   891d8:	dc000017 	ldw	r16,0(sp)
   891dc:	dec00a04 	addi	sp,sp,40
   891e0:	00826801 	jmpi	82680 <_malloc_r>
   891e4:	a8c00017 	ldw	r3,0(r21)
   891e8:	90c00015 	stw	r3,0(r18)
   891ec:	a8c00117 	ldw	r3,4(r21)
   891f0:	90c00115 	stw	r3,4(r18)
   891f4:	00c006c4 	movi	r3,27
   891f8:	19804536 	bltu	r3,r6,89310 <_realloc_r+0x470>
   891fc:	90800204 	addi	r2,r18,8
   89200:	a8c00204 	addi	r3,r21,8
   89204:	003f6306 	br	88f94 <rx_descriptor_end+0xfff88f34>
   89208:	9005883a 	mov	r2,r18
   8920c:	a8c00017 	ldw	r3,0(r21)
   89210:	b821883a 	mov	r16,r23
   89214:	b027883a 	mov	r19,r22
   89218:	10c00015 	stw	r3,0(r2)
   8921c:	a8c00117 	ldw	r3,4(r21)
   89220:	10c00115 	stw	r3,4(r2)
   89224:	a8c00217 	ldw	r3,8(r21)
   89228:	10c00215 	stw	r3,8(r2)
   8922c:	003f6a06 	br	88fd8 <rx_descriptor_end+0xfff88f78>
   89230:	9c67883a 	add	r19,r19,r17
   89234:	4445c83a 	sub	r2,r8,r17
   89238:	e4c00215 	stw	r19,8(fp)
   8923c:	10800054 	ori	r2,r2,1
   89240:	98800115 	stw	r2,4(r19)
   89244:	a8bfff17 	ldw	r2,-4(r21)
   89248:	a009883a 	mov	r4,r20
   8924c:	1080004c 	andi	r2,r2,1
   89250:	1462b03a 	or	r17,r2,r17
   89254:	ac7fff15 	stw	r17,-4(r21)
   89258:	008eb0c0 	call	8eb0c <__malloc_unlock>
   8925c:	a805883a 	mov	r2,r21
   89260:	003f6b06 	br	89010 <rx_descriptor_end+0xfff88fb0>
   89264:	a80b883a 	mov	r5,r21
   89268:	9009883a 	mov	r4,r18
   8926c:	0082e8c0 	call	82e8c <memmove>
   89270:	003f4e06 	br	88fac <rx_descriptor_end+0xfff88f4c>
   89274:	89000404 	addi	r4,r17,16
   89278:	b93fbc16 	blt	r23,r4,8916c <rx_descriptor_end+0xfff8910c>
   8927c:	b0800317 	ldw	r2,12(r22)
   89280:	b0c00217 	ldw	r3,8(r22)
   89284:	81bfff04 	addi	r6,r16,-4
   89288:	01000904 	movi	r4,36
   8928c:	18800315 	stw	r2,12(r3)
   89290:	10c00215 	stw	r3,8(r2)
   89294:	b4800204 	addi	r18,r22,8
   89298:	21804336 	bltu	r4,r6,893a8 <_realloc_r+0x508>
   8929c:	008004c4 	movi	r2,19
   892a0:	11803f2e 	bgeu	r2,r6,893a0 <_realloc_r+0x500>
   892a4:	a8800017 	ldw	r2,0(r21)
   892a8:	b0800215 	stw	r2,8(r22)
   892ac:	a8800117 	ldw	r2,4(r21)
   892b0:	b0800315 	stw	r2,12(r22)
   892b4:	008006c4 	movi	r2,27
   892b8:	11803f36 	bltu	r2,r6,893b8 <_realloc_r+0x518>
   892bc:	b0800404 	addi	r2,r22,16
   892c0:	ad400204 	addi	r21,r21,8
   892c4:	a8c00017 	ldw	r3,0(r21)
   892c8:	10c00015 	stw	r3,0(r2)
   892cc:	a8c00117 	ldw	r3,4(r21)
   892d0:	10c00115 	stw	r3,4(r2)
   892d4:	a8c00217 	ldw	r3,8(r21)
   892d8:	10c00215 	stw	r3,8(r2)
   892dc:	b447883a 	add	r3,r22,r17
   892e0:	bc45c83a 	sub	r2,r23,r17
   892e4:	e0c00215 	stw	r3,8(fp)
   892e8:	10800054 	ori	r2,r2,1
   892ec:	18800115 	stw	r2,4(r3)
   892f0:	b0800117 	ldw	r2,4(r22)
   892f4:	a009883a 	mov	r4,r20
   892f8:	1080004c 	andi	r2,r2,1
   892fc:	1462b03a 	or	r17,r2,r17
   89300:	b4400115 	stw	r17,4(r22)
   89304:	008eb0c0 	call	8eb0c <__malloc_unlock>
   89308:	9005883a 	mov	r2,r18
   8930c:	003f4006 	br	89010 <rx_descriptor_end+0xfff88fb0>
   89310:	a8c00217 	ldw	r3,8(r21)
   89314:	90c00215 	stw	r3,8(r18)
   89318:	a8c00317 	ldw	r3,12(r21)
   8931c:	90c00315 	stw	r3,12(r18)
   89320:	30801126 	beq	r6,r2,89368 <_realloc_r+0x4c8>
   89324:	90800404 	addi	r2,r18,16
   89328:	a8c00404 	addi	r3,r21,16
   8932c:	003f1906 	br	88f94 <rx_descriptor_end+0xfff88f34>
   89330:	90ffff17 	ldw	r3,-4(r18)
   89334:	00bfff04 	movi	r2,-4
   89338:	a825883a 	mov	r18,r21
   8933c:	1884703a 	and	r2,r3,r2
   89340:	80a1883a 	add	r16,r16,r2
   89344:	003f2406 	br	88fd8 <rx_descriptor_end+0xfff88f78>
   89348:	a8800217 	ldw	r2,8(r21)
   8934c:	b0800415 	stw	r2,16(r22)
   89350:	a8800317 	ldw	r2,12(r21)
   89354:	b0800515 	stw	r2,20(r22)
   89358:	31000a26 	beq	r6,r4,89384 <_realloc_r+0x4e4>
   8935c:	b0800604 	addi	r2,r22,24
   89360:	ad400404 	addi	r21,r21,16
   89364:	003fa906 	br	8920c <rx_descriptor_end+0xfff891ac>
   89368:	a9000417 	ldw	r4,16(r21)
   8936c:	90800604 	addi	r2,r18,24
   89370:	a8c00604 	addi	r3,r21,24
   89374:	91000415 	stw	r4,16(r18)
   89378:	a9000517 	ldw	r4,20(r21)
   8937c:	91000515 	stw	r4,20(r18)
   89380:	003f0406 	br	88f94 <rx_descriptor_end+0xfff88f34>
   89384:	a8c00417 	ldw	r3,16(r21)
   89388:	ad400604 	addi	r21,r21,24
   8938c:	b0800804 	addi	r2,r22,32
   89390:	b0c00615 	stw	r3,24(r22)
   89394:	a8ffff17 	ldw	r3,-4(r21)
   89398:	b0c00715 	stw	r3,28(r22)
   8939c:	003f9b06 	br	8920c <rx_descriptor_end+0xfff891ac>
   893a0:	9005883a 	mov	r2,r18
   893a4:	003fc706 	br	892c4 <rx_descriptor_end+0xfff89264>
   893a8:	a80b883a 	mov	r5,r21
   893ac:	9009883a 	mov	r4,r18
   893b0:	0082e8c0 	call	82e8c <memmove>
   893b4:	003fc906 	br	892dc <rx_descriptor_end+0xfff8927c>
   893b8:	a8800217 	ldw	r2,8(r21)
   893bc:	b0800415 	stw	r2,16(r22)
   893c0:	a8800317 	ldw	r2,12(r21)
   893c4:	b0800515 	stw	r2,20(r22)
   893c8:	31000726 	beq	r6,r4,893e8 <_realloc_r+0x548>
   893cc:	b0800604 	addi	r2,r22,24
   893d0:	ad400404 	addi	r21,r21,16
   893d4:	003fbb06 	br	892c4 <rx_descriptor_end+0xfff89264>
   893d8:	a009883a 	mov	r4,r20
   893dc:	008eb0c0 	call	8eb0c <__malloc_unlock>
   893e0:	0005883a 	mov	r2,zero
   893e4:	003f0a06 	br	89010 <rx_descriptor_end+0xfff88fb0>
   893e8:	a8c00417 	ldw	r3,16(r21)
   893ec:	ad400604 	addi	r21,r21,24
   893f0:	b0800804 	addi	r2,r22,32
   893f4:	b0c00615 	stw	r3,24(r22)
   893f8:	a8ffff17 	ldw	r3,-4(r21)
   893fc:	b0c00715 	stw	r3,28(r22)
   89400:	003fb006 	br	892c4 <rx_descriptor_end+0xfff89264>

00089404 <__fpclassifyd>:
   89404:	00a00034 	movhi	r2,32768
   89408:	10bfffc4 	addi	r2,r2,-1
   8940c:	2884703a 	and	r2,r5,r2
   89410:	10000726 	beq	r2,zero,89430 <__fpclassifyd+0x2c>
   89414:	00fffc34 	movhi	r3,65520
   89418:	019ff834 	movhi	r6,32736
   8941c:	28c7883a 	add	r3,r5,r3
   89420:	31bfffc4 	addi	r6,r6,-1
   89424:	30c00536 	bltu	r6,r3,8943c <__fpclassifyd+0x38>
   89428:	00800104 	movi	r2,4
   8942c:	f800283a 	ret
   89430:	2000021e 	bne	r4,zero,8943c <__fpclassifyd+0x38>
   89434:	00800084 	movi	r2,2
   89438:	f800283a 	ret
   8943c:	00dffc34 	movhi	r3,32752
   89440:	019ff834 	movhi	r6,32736
   89444:	28cb883a 	add	r5,r5,r3
   89448:	31bfffc4 	addi	r6,r6,-1
   8944c:	317ff62e 	bgeu	r6,r5,89428 <rx_descriptor_end+0xfff893c8>
   89450:	01400434 	movhi	r5,16
   89454:	297fffc4 	addi	r5,r5,-1
   89458:	28800236 	bltu	r5,r2,89464 <__fpclassifyd+0x60>
   8945c:	008000c4 	movi	r2,3
   89460:	f800283a 	ret
   89464:	10c00226 	beq	r2,r3,89470 <__fpclassifyd+0x6c>
   89468:	0005883a 	mov	r2,zero
   8946c:	f800283a 	ret
   89470:	2005003a 	cmpeq	r2,r4,zero
   89474:	f800283a 	ret

00089478 <strcmp>:
   89478:	2144b03a 	or	r2,r4,r5
   8947c:	108000cc 	andi	r2,r2,3
   89480:	1000171e 	bne	r2,zero,894e0 <strcmp+0x68>
   89484:	20800017 	ldw	r2,0(r4)
   89488:	28c00017 	ldw	r3,0(r5)
   8948c:	10c0141e 	bne	r2,r3,894e0 <strcmp+0x68>
   89490:	027fbff4 	movhi	r9,65279
   89494:	4a7fbfc4 	addi	r9,r9,-257
   89498:	0086303a 	nor	r3,zero,r2
   8949c:	02202074 	movhi	r8,32897
   894a0:	1245883a 	add	r2,r2,r9
   894a4:	42202004 	addi	r8,r8,-32640
   894a8:	10c4703a 	and	r2,r2,r3
   894ac:	1204703a 	and	r2,r2,r8
   894b0:	10000226 	beq	r2,zero,894bc <strcmp+0x44>
   894b4:	00002306 	br	89544 <strcmp+0xcc>
   894b8:	1000221e 	bne	r2,zero,89544 <strcmp+0xcc>
   894bc:	21000104 	addi	r4,r4,4
   894c0:	20c00017 	ldw	r3,0(r4)
   894c4:	29400104 	addi	r5,r5,4
   894c8:	29800017 	ldw	r6,0(r5)
   894cc:	1a4f883a 	add	r7,r3,r9
   894d0:	00c4303a 	nor	r2,zero,r3
   894d4:	3884703a 	and	r2,r7,r2
   894d8:	1204703a 	and	r2,r2,r8
   894dc:	19bff626 	beq	r3,r6,894b8 <rx_descriptor_end+0xfff89458>
   894e0:	20800003 	ldbu	r2,0(r4)
   894e4:	10c03fcc 	andi	r3,r2,255
   894e8:	18c0201c 	xori	r3,r3,128
   894ec:	18ffe004 	addi	r3,r3,-128
   894f0:	18000c26 	beq	r3,zero,89524 <strcmp+0xac>
   894f4:	29800007 	ldb	r6,0(r5)
   894f8:	19800326 	beq	r3,r6,89508 <strcmp+0x90>
   894fc:	00001306 	br	8954c <strcmp+0xd4>
   89500:	29800007 	ldb	r6,0(r5)
   89504:	11800b1e 	bne	r2,r6,89534 <strcmp+0xbc>
   89508:	21000044 	addi	r4,r4,1
   8950c:	20c00003 	ldbu	r3,0(r4)
   89510:	29400044 	addi	r5,r5,1
   89514:	18803fcc 	andi	r2,r3,255
   89518:	1080201c 	xori	r2,r2,128
   8951c:	10bfe004 	addi	r2,r2,-128
   89520:	103ff71e 	bne	r2,zero,89500 <rx_descriptor_end+0xfff894a0>
   89524:	0007883a 	mov	r3,zero
   89528:	28800003 	ldbu	r2,0(r5)
   8952c:	1885c83a 	sub	r2,r3,r2
   89530:	f800283a 	ret
   89534:	28800003 	ldbu	r2,0(r5)
   89538:	18c03fcc 	andi	r3,r3,255
   8953c:	1885c83a 	sub	r2,r3,r2
   89540:	f800283a 	ret
   89544:	0005883a 	mov	r2,zero
   89548:	f800283a 	ret
   8954c:	10c03fcc 	andi	r3,r2,255
   89550:	003ff506 	br	89528 <rx_descriptor_end+0xfff894c8>

00089554 <__sprint_r.part.0>:
   89554:	28801917 	ldw	r2,100(r5)
   89558:	defff604 	addi	sp,sp,-40
   8955c:	dd400515 	stw	r21,20(sp)
   89560:	dfc00915 	stw	ra,36(sp)
   89564:	df000815 	stw	fp,32(sp)
   89568:	ddc00715 	stw	r23,28(sp)
   8956c:	dd800615 	stw	r22,24(sp)
   89570:	dd000415 	stw	r20,16(sp)
   89574:	dcc00315 	stw	r19,12(sp)
   89578:	dc800215 	stw	r18,8(sp)
   8957c:	dc400115 	stw	r17,4(sp)
   89580:	dc000015 	stw	r16,0(sp)
   89584:	1088000c 	andi	r2,r2,8192
   89588:	302b883a 	mov	r21,r6
   8958c:	10002e26 	beq	r2,zero,89648 <__sprint_r.part.0+0xf4>
   89590:	30800217 	ldw	r2,8(r6)
   89594:	35800017 	ldw	r22,0(r6)
   89598:	10002926 	beq	r2,zero,89640 <__sprint_r.part.0+0xec>
   8959c:	2827883a 	mov	r19,r5
   895a0:	2029883a 	mov	r20,r4
   895a4:	b5c00104 	addi	r23,r22,4
   895a8:	04bfffc4 	movi	r18,-1
   895ac:	bc400017 	ldw	r17,0(r23)
   895b0:	b4000017 	ldw	r16,0(r22)
   895b4:	0039883a 	mov	fp,zero
   895b8:	8822d0ba 	srli	r17,r17,2
   895bc:	8800031e 	bne	r17,zero,895cc <__sprint_r.part.0+0x78>
   895c0:	00001806 	br	89624 <__sprint_r.part.0+0xd0>
   895c4:	84000104 	addi	r16,r16,4
   895c8:	8f001526 	beq	r17,fp,89620 <__sprint_r.part.0+0xcc>
   895cc:	81400017 	ldw	r5,0(r16)
   895d0:	980d883a 	mov	r6,r19
   895d4:	a009883a 	mov	r4,r20
   895d8:	008af1c0 	call	8af1c <_fputwc_r>
   895dc:	e7000044 	addi	fp,fp,1
   895e0:	14bff81e 	bne	r2,r18,895c4 <rx_descriptor_end+0xfff89564>
   895e4:	9005883a 	mov	r2,r18
   895e8:	a8000215 	stw	zero,8(r21)
   895ec:	a8000115 	stw	zero,4(r21)
   895f0:	dfc00917 	ldw	ra,36(sp)
   895f4:	df000817 	ldw	fp,32(sp)
   895f8:	ddc00717 	ldw	r23,28(sp)
   895fc:	dd800617 	ldw	r22,24(sp)
   89600:	dd400517 	ldw	r21,20(sp)
   89604:	dd000417 	ldw	r20,16(sp)
   89608:	dcc00317 	ldw	r19,12(sp)
   8960c:	dc800217 	ldw	r18,8(sp)
   89610:	dc400117 	ldw	r17,4(sp)
   89614:	dc000017 	ldw	r16,0(sp)
   89618:	dec00a04 	addi	sp,sp,40
   8961c:	f800283a 	ret
   89620:	a8800217 	ldw	r2,8(r21)
   89624:	8c63883a 	add	r17,r17,r17
   89628:	8c63883a 	add	r17,r17,r17
   8962c:	1445c83a 	sub	r2,r2,r17
   89630:	a8800215 	stw	r2,8(r21)
   89634:	b5800204 	addi	r22,r22,8
   89638:	bdc00204 	addi	r23,r23,8
   8963c:	103fdb1e 	bne	r2,zero,895ac <rx_descriptor_end+0xfff8954c>
   89640:	0005883a 	mov	r2,zero
   89644:	003fe806 	br	895e8 <rx_descriptor_end+0xfff89588>
   89648:	00872fc0 	call	872fc <__sfvwrite_r>
   8964c:	003fe606 	br	895e8 <rx_descriptor_end+0xfff89588>

00089650 <__sprint_r>:
   89650:	30c00217 	ldw	r3,8(r6)
   89654:	18000126 	beq	r3,zero,8965c <__sprint_r+0xc>
   89658:	00895541 	jmpi	89554 <__sprint_r.part.0>
   8965c:	30000115 	stw	zero,4(r6)
   89660:	0005883a 	mov	r2,zero
   89664:	f800283a 	ret

00089668 <___vfiprintf_internal_r>:
   89668:	deffc904 	addi	sp,sp,-220
   8966c:	df003515 	stw	fp,212(sp)
   89670:	dd003115 	stw	r20,196(sp)
   89674:	dfc03615 	stw	ra,216(sp)
   89678:	ddc03415 	stw	r23,208(sp)
   8967c:	dd803315 	stw	r22,204(sp)
   89680:	dd403215 	stw	r21,200(sp)
   89684:	dcc03015 	stw	r19,192(sp)
   89688:	dc802f15 	stw	r18,188(sp)
   8968c:	dc402e15 	stw	r17,184(sp)
   89690:	dc002d15 	stw	r16,180(sp)
   89694:	d9002015 	stw	r4,128(sp)
   89698:	d9c02215 	stw	r7,136(sp)
   8969c:	2829883a 	mov	r20,r5
   896a0:	3039883a 	mov	fp,r6
   896a4:	20000226 	beq	r4,zero,896b0 <___vfiprintf_internal_r+0x48>
   896a8:	20800e17 	ldw	r2,56(r4)
   896ac:	1000cf26 	beq	r2,zero,899ec <___vfiprintf_internal_r+0x384>
   896b0:	a080030b 	ldhu	r2,12(r20)
   896b4:	10c8000c 	andi	r3,r2,8192
   896b8:	1800061e 	bne	r3,zero,896d4 <___vfiprintf_internal_r+0x6c>
   896bc:	a1001917 	ldw	r4,100(r20)
   896c0:	00f7ffc4 	movi	r3,-8193
   896c4:	10880014 	ori	r2,r2,8192
   896c8:	20c6703a 	and	r3,r4,r3
   896cc:	a080030d 	sth	r2,12(r20)
   896d0:	a0c01915 	stw	r3,100(r20)
   896d4:	10c0020c 	andi	r3,r2,8
   896d8:	1800a926 	beq	r3,zero,89980 <___vfiprintf_internal_r+0x318>
   896dc:	a0c00417 	ldw	r3,16(r20)
   896e0:	1800a726 	beq	r3,zero,89980 <___vfiprintf_internal_r+0x318>
   896e4:	1080068c 	andi	r2,r2,26
   896e8:	00c00284 	movi	r3,10
   896ec:	10c0ac26 	beq	r2,r3,899a0 <___vfiprintf_internal_r+0x338>
   896f0:	da801a04 	addi	r10,sp,104
   896f4:	da801e15 	stw	r10,120(sp)
   896f8:	d8801e17 	ldw	r2,120(sp)
   896fc:	da8019c4 	addi	r10,sp,103
   89700:	05800274 	movhi	r22,9
   89704:	05c00274 	movhi	r23,9
   89708:	da801f15 	stw	r10,124(sp)
   8970c:	1295c83a 	sub	r10,r2,r10
   89710:	b5892104 	addi	r22,r22,9348
   89714:	bdc91d04 	addi	r23,r23,9332
   89718:	dec01a15 	stw	sp,104(sp)
   8971c:	d8001c15 	stw	zero,112(sp)
   89720:	d8001b15 	stw	zero,108(sp)
   89724:	d8002615 	stw	zero,152(sp)
   89728:	d8002315 	stw	zero,140(sp)
   8972c:	da802715 	stw	r10,156(sp)
   89730:	d811883a 	mov	r8,sp
   89734:	dd002115 	stw	r20,132(sp)
   89738:	e021883a 	mov	r16,fp
   8973c:	80800007 	ldb	r2,0(r16)
   89740:	1003ea26 	beq	r2,zero,8a6ec <___vfiprintf_internal_r+0x1084>
   89744:	00c00944 	movi	r3,37
   89748:	8025883a 	mov	r18,r16
   8974c:	10c0021e 	bne	r2,r3,89758 <___vfiprintf_internal_r+0xf0>
   89750:	00001606 	br	897ac <___vfiprintf_internal_r+0x144>
   89754:	10c00326 	beq	r2,r3,89764 <___vfiprintf_internal_r+0xfc>
   89758:	94800044 	addi	r18,r18,1
   8975c:	90800007 	ldb	r2,0(r18)
   89760:	103ffc1e 	bne	r2,zero,89754 <rx_descriptor_end+0xfff896f4>
   89764:	9423c83a 	sub	r17,r18,r16
   89768:	88001026 	beq	r17,zero,897ac <___vfiprintf_internal_r+0x144>
   8976c:	d8c01c17 	ldw	r3,112(sp)
   89770:	d8801b17 	ldw	r2,108(sp)
   89774:	44000015 	stw	r16,0(r8)
   89778:	88c7883a 	add	r3,r17,r3
   8977c:	10800044 	addi	r2,r2,1
   89780:	44400115 	stw	r17,4(r8)
   89784:	d8c01c15 	stw	r3,112(sp)
   89788:	d8801b15 	stw	r2,108(sp)
   8978c:	010001c4 	movi	r4,7
   89790:	2080760e 	bge	r4,r2,8996c <___vfiprintf_internal_r+0x304>
   89794:	1803821e 	bne	r3,zero,8a5a0 <___vfiprintf_internal_r+0xf38>
   89798:	da802317 	ldw	r10,140(sp)
   8979c:	d8001b15 	stw	zero,108(sp)
   897a0:	d811883a 	mov	r8,sp
   897a4:	5455883a 	add	r10,r10,r17
   897a8:	da802315 	stw	r10,140(sp)
   897ac:	90800007 	ldb	r2,0(r18)
   897b0:	10044626 	beq	r2,zero,8a8cc <___vfiprintf_internal_r+0x1264>
   897b4:	90c00047 	ldb	r3,1(r18)
   897b8:	94000044 	addi	r16,r18,1
   897bc:	d8001d85 	stb	zero,118(sp)
   897c0:	0009883a 	mov	r4,zero
   897c4:	000f883a 	mov	r7,zero
   897c8:	027fffc4 	movi	r9,-1
   897cc:	0023883a 	mov	r17,zero
   897d0:	0029883a 	mov	r20,zero
   897d4:	01401604 	movi	r5,88
   897d8:	01800244 	movi	r6,9
   897dc:	03400a84 	movi	r13,42
   897e0:	03001b04 	movi	r12,108
   897e4:	84000044 	addi	r16,r16,1
   897e8:	18bff804 	addi	r2,r3,-32
   897ec:	28827336 	bltu	r5,r2,8a1bc <___vfiprintf_internal_r+0xb54>
   897f0:	100490ba 	slli	r2,r2,2
   897f4:	02800274 	movhi	r10,9
   897f8:	52a60204 	addi	r10,r10,-26616
   897fc:	1285883a 	add	r2,r2,r10
   89800:	10800017 	ldw	r2,0(r2)
   89804:	1000683a 	jmp	r2
   89808:	00089ef0 	cmpltui	zero,zero,8827
   8980c:	0008a1bc 	xorhi	zero,zero,8838
   89810:	0008a1bc 	xorhi	zero,zero,8838
   89814:	00089f10 	cmplti	zero,zero,8828
   89818:	0008a1bc 	xorhi	zero,zero,8838
   8981c:	0008a1bc 	xorhi	zero,zero,8838
   89820:	0008a1bc 	xorhi	zero,zero,8838
   89824:	0008a1bc 	xorhi	zero,zero,8838
   89828:	0008a1bc 	xorhi	zero,zero,8838
   8982c:	0008a1bc 	xorhi	zero,zero,8838
   89830:	0008a0f8 	rdprs	zero,zero,8835
   89834:	0008a114 	movui	zero,8836
   89838:	0008a1bc 	xorhi	zero,zero,8838
   8983c:	000899fc 	xorhi	zero,zero,8807
   89840:	0008a124 	muli	zero,zero,8836
   89844:	0008a1bc 	xorhi	zero,zero,8838
   89848:	00089f1c 	xori	zero,zero,8828
   8984c:	00089f28 	cmpgeui	zero,zero,8828
   89850:	00089f28 	cmpgeui	zero,zero,8828
   89854:	00089f28 	cmpgeui	zero,zero,8828
   89858:	00089f28 	cmpgeui	zero,zero,8828
   8985c:	00089f28 	cmpgeui	zero,zero,8828
   89860:	00089f28 	cmpgeui	zero,zero,8828
   89864:	00089f28 	cmpgeui	zero,zero,8828
   89868:	00089f28 	cmpgeui	zero,zero,8828
   8986c:	00089f28 	cmpgeui	zero,zero,8828
   89870:	0008a1bc 	xorhi	zero,zero,8838
   89874:	0008a1bc 	xorhi	zero,zero,8838
   89878:	0008a1bc 	xorhi	zero,zero,8838
   8987c:	0008a1bc 	xorhi	zero,zero,8838
   89880:	0008a1bc 	xorhi	zero,zero,8838
   89884:	0008a1bc 	xorhi	zero,zero,8838
   89888:	0008a1bc 	xorhi	zero,zero,8838
   8988c:	0008a1bc 	xorhi	zero,zero,8838
   89890:	0008a1bc 	xorhi	zero,zero,8838
   89894:	0008a1bc 	xorhi	zero,zero,8838
   89898:	00089f54 	movui	zero,8829
   8989c:	0008a1bc 	xorhi	zero,zero,8838
   898a0:	0008a1bc 	xorhi	zero,zero,8838
   898a4:	0008a1bc 	xorhi	zero,zero,8838
   898a8:	0008a1bc 	xorhi	zero,zero,8838
   898ac:	0008a1bc 	xorhi	zero,zero,8838
   898b0:	0008a1bc 	xorhi	zero,zero,8838
   898b4:	0008a1bc 	xorhi	zero,zero,8838
   898b8:	0008a1bc 	xorhi	zero,zero,8838
   898bc:	0008a1bc 	xorhi	zero,zero,8838
   898c0:	0008a1bc 	xorhi	zero,zero,8838
   898c4:	00089f8c 	andi	zero,zero,8830
   898c8:	0008a1bc 	xorhi	zero,zero,8838
   898cc:	0008a1bc 	xorhi	zero,zero,8838
   898d0:	0008a1bc 	xorhi	zero,zero,8838
   898d4:	0008a1bc 	xorhi	zero,zero,8838
   898d8:	0008a1bc 	xorhi	zero,zero,8838
   898dc:	00089fe4 	muli	zero,zero,8831
   898e0:	0008a1bc 	xorhi	zero,zero,8838
   898e4:	0008a1bc 	xorhi	zero,zero,8838
   898e8:	0008a054 	movui	zero,8833
   898ec:	0008a1bc 	xorhi	zero,zero,8838
   898f0:	0008a1bc 	xorhi	zero,zero,8838
   898f4:	0008a1bc 	xorhi	zero,zero,8838
   898f8:	0008a1bc 	xorhi	zero,zero,8838
   898fc:	0008a1bc 	xorhi	zero,zero,8838
   89900:	0008a1bc 	xorhi	zero,zero,8838
   89904:	0008a1bc 	xorhi	zero,zero,8838
   89908:	0008a1bc 	xorhi	zero,zero,8838
   8990c:	0008a1bc 	xorhi	zero,zero,8838
   89910:	0008a1bc 	xorhi	zero,zero,8838
   89914:	00089e00 	call	89e0 <__alt_mem_main_memory-0x77620>
   89918:	00089e2c 	andhi	zero,zero,8824
   8991c:	0008a1bc 	xorhi	zero,zero,8838
   89920:	0008a1bc 	xorhi	zero,zero,8838
   89924:	0008a1bc 	xorhi	zero,zero,8838
   89928:	0008a164 	muli	zero,zero,8837
   8992c:	00089e2c 	andhi	zero,zero,8824
   89930:	0008a1bc 	xorhi	zero,zero,8838
   89934:	0008a1bc 	xorhi	zero,zero,8838
   89938:	00089cc0 	call	89cc <__alt_mem_main_memory-0x77634>
   8993c:	0008a1bc 	xorhi	zero,zero,8838
   89940:	00089cd0 	cmplti	zero,zero,8819
   89944:	00089d0c 	andi	zero,zero,8820
   89948:	00089a08 	cmpgei	zero,zero,8808
   8994c:	00089cb4 	movhi	zero,8818
   89950:	0008a1bc 	xorhi	zero,zero,8838
   89954:	0008a090 	cmplti	zero,zero,8834
   89958:	0008a1bc 	xorhi	zero,zero,8838
   8995c:	0008a0e8 	cmpgeui	zero,zero,8835
   89960:	0008a1bc 	xorhi	zero,zero,8838
   89964:	0008a1bc 	xorhi	zero,zero,8838
   89968:	00089dac 	andhi	zero,zero,8822
   8996c:	42000204 	addi	r8,r8,8
   89970:	da802317 	ldw	r10,140(sp)
   89974:	5455883a 	add	r10,r10,r17
   89978:	da802315 	stw	r10,140(sp)
   8997c:	003f8b06 	br	897ac <rx_descriptor_end+0xfff8974c>
   89980:	d9002017 	ldw	r4,128(sp)
   89984:	a00b883a 	mov	r5,r20
   89988:	00857c80 	call	857c8 <__swsetup_r>
   8998c:	1003b11e 	bne	r2,zero,8a854 <___vfiprintf_internal_r+0x11ec>
   89990:	a080030b 	ldhu	r2,12(r20)
   89994:	00c00284 	movi	r3,10
   89998:	1080068c 	andi	r2,r2,26
   8999c:	10ff541e 	bne	r2,r3,896f0 <rx_descriptor_end+0xfff89690>
   899a0:	a080038f 	ldh	r2,14(r20)
   899a4:	103f5216 	blt	r2,zero,896f0 <rx_descriptor_end+0xfff89690>
   899a8:	d9c02217 	ldw	r7,136(sp)
   899ac:	d9002017 	ldw	r4,128(sp)
   899b0:	e00d883a 	mov	r6,fp
   899b4:	a00b883a 	mov	r5,r20
   899b8:	008aae00 	call	8aae0 <__sbprintf>
   899bc:	dfc03617 	ldw	ra,216(sp)
   899c0:	df003517 	ldw	fp,212(sp)
   899c4:	ddc03417 	ldw	r23,208(sp)
   899c8:	dd803317 	ldw	r22,204(sp)
   899cc:	dd403217 	ldw	r21,200(sp)
   899d0:	dd003117 	ldw	r20,196(sp)
   899d4:	dcc03017 	ldw	r19,192(sp)
   899d8:	dc802f17 	ldw	r18,188(sp)
   899dc:	dc402e17 	ldw	r17,184(sp)
   899e0:	dc002d17 	ldw	r16,180(sp)
   899e4:	dec03704 	addi	sp,sp,220
   899e8:	f800283a 	ret
   899ec:	008204c0 	call	8204c <__sinit>
   899f0:	003f2f06 	br	896b0 <rx_descriptor_end+0xfff89650>
   899f4:	0463c83a 	sub	r17,zero,r17
   899f8:	d8802215 	stw	r2,136(sp)
   899fc:	a5000114 	ori	r20,r20,4
   89a00:	80c00007 	ldb	r3,0(r16)
   89a04:	003f7706 	br	897e4 <rx_descriptor_end+0xfff89784>
   89a08:	00800c04 	movi	r2,48
   89a0c:	da802217 	ldw	r10,136(sp)
   89a10:	d8801d05 	stb	r2,116(sp)
   89a14:	00801e04 	movi	r2,120
   89a18:	d8801d45 	stb	r2,117(sp)
   89a1c:	d8001d85 	stb	zero,118(sp)
   89a20:	50c00104 	addi	r3,r10,4
   89a24:	54800017 	ldw	r18,0(r10)
   89a28:	0027883a 	mov	r19,zero
   89a2c:	a0800094 	ori	r2,r20,2
   89a30:	48030b16 	blt	r9,zero,8a660 <___vfiprintf_internal_r+0xff8>
   89a34:	00bfdfc4 	movi	r2,-129
   89a38:	a096703a 	and	r11,r20,r2
   89a3c:	d8c02215 	stw	r3,136(sp)
   89a40:	5d000094 	ori	r20,r11,2
   89a44:	90032b1e 	bne	r18,zero,8a6f4 <___vfiprintf_internal_r+0x108c>
   89a48:	00800274 	movhi	r2,9
   89a4c:	1088bd04 	addi	r2,r2,8948
   89a50:	d8802615 	stw	r2,152(sp)
   89a54:	0039883a 	mov	fp,zero
   89a58:	48017b1e 	bne	r9,zero,8a048 <___vfiprintf_internal_r+0x9e0>
   89a5c:	0013883a 	mov	r9,zero
   89a60:	0027883a 	mov	r19,zero
   89a64:	dd401a04 	addi	r21,sp,104
   89a68:	4825883a 	mov	r18,r9
   89a6c:	4cc0010e 	bge	r9,r19,89a74 <___vfiprintf_internal_r+0x40c>
   89a70:	9825883a 	mov	r18,r19
   89a74:	e7003fcc 	andi	fp,fp,255
   89a78:	e700201c 	xori	fp,fp,128
   89a7c:	e73fe004 	addi	fp,fp,-128
   89a80:	e0000126 	beq	fp,zero,89a88 <___vfiprintf_internal_r+0x420>
   89a84:	94800044 	addi	r18,r18,1
   89a88:	a380008c 	andi	r14,r20,2
   89a8c:	70000126 	beq	r14,zero,89a94 <___vfiprintf_internal_r+0x42c>
   89a90:	94800084 	addi	r18,r18,2
   89a94:	a700210c 	andi	fp,r20,132
   89a98:	e001df1e 	bne	fp,zero,8a218 <___vfiprintf_internal_r+0xbb0>
   89a9c:	8c87c83a 	sub	r3,r17,r18
   89aa0:	00c1dd0e 	bge	zero,r3,8a218 <___vfiprintf_internal_r+0xbb0>
   89aa4:	01c00404 	movi	r7,16
   89aa8:	d8801c17 	ldw	r2,112(sp)
   89aac:	38c3ad0e 	bge	r7,r3,8a964 <___vfiprintf_internal_r+0x12fc>
   89ab0:	02800274 	movhi	r10,9
   89ab4:	52892104 	addi	r10,r10,9348
   89ab8:	dc002915 	stw	r16,164(sp)
   89abc:	d9801b17 	ldw	r6,108(sp)
   89ac0:	da802415 	stw	r10,144(sp)
   89ac4:	03c001c4 	movi	r15,7
   89ac8:	da402515 	stw	r9,148(sp)
   89acc:	db802815 	stw	r14,160(sp)
   89ad0:	1821883a 	mov	r16,r3
   89ad4:	00000506 	br	89aec <___vfiprintf_internal_r+0x484>
   89ad8:	31400084 	addi	r5,r6,2
   89adc:	42000204 	addi	r8,r8,8
   89ae0:	200d883a 	mov	r6,r4
   89ae4:	843ffc04 	addi	r16,r16,-16
   89ae8:	3c000d0e 	bge	r7,r16,89b20 <___vfiprintf_internal_r+0x4b8>
   89aec:	10800404 	addi	r2,r2,16
   89af0:	31000044 	addi	r4,r6,1
   89af4:	45800015 	stw	r22,0(r8)
   89af8:	41c00115 	stw	r7,4(r8)
   89afc:	d8801c15 	stw	r2,112(sp)
   89b00:	d9001b15 	stw	r4,108(sp)
   89b04:	793ff40e 	bge	r15,r4,89ad8 <rx_descriptor_end+0xfff89a78>
   89b08:	1001b51e 	bne	r2,zero,8a1e0 <___vfiprintf_internal_r+0xb78>
   89b0c:	843ffc04 	addi	r16,r16,-16
   89b10:	000d883a 	mov	r6,zero
   89b14:	01400044 	movi	r5,1
   89b18:	d811883a 	mov	r8,sp
   89b1c:	3c3ff316 	blt	r7,r16,89aec <rx_descriptor_end+0xfff89a8c>
   89b20:	8007883a 	mov	r3,r16
   89b24:	da402517 	ldw	r9,148(sp)
   89b28:	db802817 	ldw	r14,160(sp)
   89b2c:	dc002917 	ldw	r16,164(sp)
   89b30:	da802417 	ldw	r10,144(sp)
   89b34:	1885883a 	add	r2,r3,r2
   89b38:	40c00115 	stw	r3,4(r8)
   89b3c:	42800015 	stw	r10,0(r8)
   89b40:	d8801c15 	stw	r2,112(sp)
   89b44:	d9401b15 	stw	r5,108(sp)
   89b48:	00c001c4 	movi	r3,7
   89b4c:	19426016 	blt	r3,r5,8a4d0 <___vfiprintf_internal_r+0xe68>
   89b50:	d8c01d87 	ldb	r3,118(sp)
   89b54:	42000204 	addi	r8,r8,8
   89b58:	29000044 	addi	r4,r5,1
   89b5c:	1801b31e 	bne	r3,zero,8a22c <___vfiprintf_internal_r+0xbc4>
   89b60:	7001c026 	beq	r14,zero,8a264 <___vfiprintf_internal_r+0xbfc>
   89b64:	d8c01d04 	addi	r3,sp,116
   89b68:	10800084 	addi	r2,r2,2
   89b6c:	40c00015 	stw	r3,0(r8)
   89b70:	00c00084 	movi	r3,2
   89b74:	40c00115 	stw	r3,4(r8)
   89b78:	d8801c15 	stw	r2,112(sp)
   89b7c:	d9001b15 	stw	r4,108(sp)
   89b80:	00c001c4 	movi	r3,7
   89b84:	1902650e 	bge	r3,r4,8a51c <___vfiprintf_internal_r+0xeb4>
   89b88:	10029a1e 	bne	r2,zero,8a5f4 <___vfiprintf_internal_r+0xf8c>
   89b8c:	00c02004 	movi	r3,128
   89b90:	01000044 	movi	r4,1
   89b94:	000b883a 	mov	r5,zero
   89b98:	d811883a 	mov	r8,sp
   89b9c:	e0c1b31e 	bne	fp,r3,8a26c <___vfiprintf_internal_r+0xc04>
   89ba0:	8cb9c83a 	sub	fp,r17,r18
   89ba4:	0701b10e 	bge	zero,fp,8a26c <___vfiprintf_internal_r+0xc04>
   89ba8:	01c00404 	movi	r7,16
   89bac:	3f03890e 	bge	r7,fp,8a9d4 <___vfiprintf_internal_r+0x136c>
   89bb0:	00c00274 	movhi	r3,9
   89bb4:	18c91d04 	addi	r3,r3,9332
   89bb8:	d8c02415 	stw	r3,144(sp)
   89bbc:	8007883a 	mov	r3,r16
   89bc0:	034001c4 	movi	r13,7
   89bc4:	e021883a 	mov	r16,fp
   89bc8:	da402515 	stw	r9,148(sp)
   89bcc:	1839883a 	mov	fp,r3
   89bd0:	00000506 	br	89be8 <___vfiprintf_internal_r+0x580>
   89bd4:	29800084 	addi	r6,r5,2
   89bd8:	42000204 	addi	r8,r8,8
   89bdc:	180b883a 	mov	r5,r3
   89be0:	843ffc04 	addi	r16,r16,-16
   89be4:	3c000d0e 	bge	r7,r16,89c1c <___vfiprintf_internal_r+0x5b4>
   89be8:	10800404 	addi	r2,r2,16
   89bec:	28c00044 	addi	r3,r5,1
   89bf0:	45c00015 	stw	r23,0(r8)
   89bf4:	41c00115 	stw	r7,4(r8)
   89bf8:	d8801c15 	stw	r2,112(sp)
   89bfc:	d8c01b15 	stw	r3,108(sp)
   89c00:	68fff40e 	bge	r13,r3,89bd4 <rx_descriptor_end+0xfff89b74>
   89c04:	1002241e 	bne	r2,zero,8a498 <___vfiprintf_internal_r+0xe30>
   89c08:	843ffc04 	addi	r16,r16,-16
   89c0c:	01800044 	movi	r6,1
   89c10:	000b883a 	mov	r5,zero
   89c14:	d811883a 	mov	r8,sp
   89c18:	3c3ff316 	blt	r7,r16,89be8 <rx_descriptor_end+0xfff89b88>
   89c1c:	da402517 	ldw	r9,148(sp)
   89c20:	e007883a 	mov	r3,fp
   89c24:	8039883a 	mov	fp,r16
   89c28:	1821883a 	mov	r16,r3
   89c2c:	d8c02417 	ldw	r3,144(sp)
   89c30:	1705883a 	add	r2,r2,fp
   89c34:	47000115 	stw	fp,4(r8)
   89c38:	40c00015 	stw	r3,0(r8)
   89c3c:	d8801c15 	stw	r2,112(sp)
   89c40:	d9801b15 	stw	r6,108(sp)
   89c44:	00c001c4 	movi	r3,7
   89c48:	19827616 	blt	r3,r6,8a624 <___vfiprintf_internal_r+0xfbc>
   89c4c:	4cf9c83a 	sub	fp,r9,r19
   89c50:	42000204 	addi	r8,r8,8
   89c54:	31000044 	addi	r4,r6,1
   89c58:	300b883a 	mov	r5,r6
   89c5c:	07018516 	blt	zero,fp,8a274 <___vfiprintf_internal_r+0xc0c>
   89c60:	9885883a 	add	r2,r19,r2
   89c64:	45400015 	stw	r21,0(r8)
   89c68:	44c00115 	stw	r19,4(r8)
   89c6c:	d8801c15 	stw	r2,112(sp)
   89c70:	d9001b15 	stw	r4,108(sp)
   89c74:	00c001c4 	movi	r3,7
   89c78:	1901dd0e 	bge	r3,r4,8a3f0 <___vfiprintf_internal_r+0xd88>
   89c7c:	1002401e 	bne	r2,zero,8a580 <___vfiprintf_internal_r+0xf18>
   89c80:	d8001b15 	stw	zero,108(sp)
   89c84:	a2c0010c 	andi	r11,r20,4
   89c88:	58000226 	beq	r11,zero,89c94 <___vfiprintf_internal_r+0x62c>
   89c8c:	8ca7c83a 	sub	r19,r17,r18
   89c90:	04c2f216 	blt	zero,r19,8a85c <___vfiprintf_internal_r+0x11f4>
   89c94:	8c80010e 	bge	r17,r18,89c9c <___vfiprintf_internal_r+0x634>
   89c98:	9023883a 	mov	r17,r18
   89c9c:	da802317 	ldw	r10,140(sp)
   89ca0:	5455883a 	add	r10,r10,r17
   89ca4:	da802315 	stw	r10,140(sp)
   89ca8:	d8001b15 	stw	zero,108(sp)
   89cac:	d811883a 	mov	r8,sp
   89cb0:	003ea206 	br	8973c <rx_descriptor_end+0xfff896dc>
   89cb4:	a5000814 	ori	r20,r20,32
   89cb8:	80c00007 	ldb	r3,0(r16)
   89cbc:	003ec906 	br	897e4 <rx_descriptor_end+0xfff89784>
   89cc0:	80c00007 	ldb	r3,0(r16)
   89cc4:	1b030926 	beq	r3,r12,8a8ec <___vfiprintf_internal_r+0x1284>
   89cc8:	a5000414 	ori	r20,r20,16
   89ccc:	003ec506 	br	897e4 <rx_descriptor_end+0xfff89784>
   89cd0:	21003fcc 	andi	r4,r4,255
   89cd4:	20035e1e 	bne	r4,zero,8aa50 <___vfiprintf_internal_r+0x13e8>
   89cd8:	a080080c 	andi	r2,r20,32
   89cdc:	1002a526 	beq	r2,zero,8a774 <___vfiprintf_internal_r+0x110c>
   89ce0:	da802217 	ldw	r10,136(sp)
   89ce4:	50800017 	ldw	r2,0(r10)
   89ce8:	da802317 	ldw	r10,140(sp)
   89cec:	5007d7fa 	srai	r3,r10,31
   89cf0:	da802217 	ldw	r10,136(sp)
   89cf4:	10c00115 	stw	r3,4(r2)
   89cf8:	52800104 	addi	r10,r10,4
   89cfc:	da802215 	stw	r10,136(sp)
   89d00:	da802317 	ldw	r10,140(sp)
   89d04:	12800015 	stw	r10,0(r2)
   89d08:	003e8c06 	br	8973c <rx_descriptor_end+0xfff896dc>
   89d0c:	21003fcc 	andi	r4,r4,255
   89d10:	2003511e 	bne	r4,zero,8aa58 <___vfiprintf_internal_r+0x13f0>
   89d14:	a080080c 	andi	r2,r20,32
   89d18:	1000a126 	beq	r2,zero,89fa0 <___vfiprintf_internal_r+0x938>
   89d1c:	da802217 	ldw	r10,136(sp)
   89d20:	d8001d85 	stb	zero,118(sp)
   89d24:	50800204 	addi	r2,r10,8
   89d28:	54800017 	ldw	r18,0(r10)
   89d2c:	54c00117 	ldw	r19,4(r10)
   89d30:	4802b416 	blt	r9,zero,8a804 <___vfiprintf_internal_r+0x119c>
   89d34:	013fdfc4 	movi	r4,-129
   89d38:	94c6b03a 	or	r3,r18,r19
   89d3c:	d8802215 	stw	r2,136(sp)
   89d40:	a128703a 	and	r20,r20,r4
   89d44:	1800a226 	beq	r3,zero,89fd0 <___vfiprintf_internal_r+0x968>
   89d48:	0039883a 	mov	fp,zero
   89d4c:	dd401a04 	addi	r21,sp,104
   89d50:	9006d0fa 	srli	r3,r18,3
   89d54:	9808977a 	slli	r4,r19,29
   89d58:	9826d0fa 	srli	r19,r19,3
   89d5c:	948001cc 	andi	r18,r18,7
   89d60:	90800c04 	addi	r2,r18,48
   89d64:	ad7fffc4 	addi	r21,r21,-1
   89d68:	20e4b03a 	or	r18,r4,r3
   89d6c:	a8800005 	stb	r2,0(r21)
   89d70:	94c6b03a 	or	r3,r18,r19
   89d74:	183ff61e 	bne	r3,zero,89d50 <rx_descriptor_end+0xfff89cf0>
   89d78:	a0c0004c 	andi	r3,r20,1
   89d7c:	18005926 	beq	r3,zero,89ee4 <___vfiprintf_internal_r+0x87c>
   89d80:	10803fcc 	andi	r2,r2,255
   89d84:	1080201c 	xori	r2,r2,128
   89d88:	10bfe004 	addi	r2,r2,-128
   89d8c:	00c00c04 	movi	r3,48
   89d90:	10c05426 	beq	r2,r3,89ee4 <___vfiprintf_internal_r+0x87c>
   89d94:	da801e17 	ldw	r10,120(sp)
   89d98:	a8bfffc4 	addi	r2,r21,-1
   89d9c:	a8ffffc5 	stb	r3,-1(r21)
   89da0:	50a7c83a 	sub	r19,r10,r2
   89da4:	102b883a 	mov	r21,r2
   89da8:	003f2f06 	br	89a68 <rx_descriptor_end+0xfff89a08>
   89dac:	21003fcc 	andi	r4,r4,255
   89db0:	2003421e 	bne	r4,zero,8aabc <___vfiprintf_internal_r+0x1454>
   89db4:	00800274 	movhi	r2,9
   89db8:	1088bd04 	addi	r2,r2,8948
   89dbc:	d8802615 	stw	r2,152(sp)
   89dc0:	a080080c 	andi	r2,r20,32
   89dc4:	1000aa26 	beq	r2,zero,8a070 <___vfiprintf_internal_r+0xa08>
   89dc8:	da802217 	ldw	r10,136(sp)
   89dcc:	54800017 	ldw	r18,0(r10)
   89dd0:	54c00117 	ldw	r19,4(r10)
   89dd4:	52800204 	addi	r10,r10,8
   89dd8:	da802215 	stw	r10,136(sp)
   89ddc:	a080004c 	andi	r2,r20,1
   89de0:	1001d226 	beq	r2,zero,8a52c <___vfiprintf_internal_r+0xec4>
   89de4:	94c4b03a 	or	r2,r18,r19
   89de8:	1002351e 	bne	r2,zero,8a6c0 <___vfiprintf_internal_r+0x1058>
   89dec:	d8001d85 	stb	zero,118(sp)
   89df0:	48022216 	blt	r9,zero,8a67c <___vfiprintf_internal_r+0x1014>
   89df4:	00bfdfc4 	movi	r2,-129
   89df8:	a0a8703a 	and	r20,r20,r2
   89dfc:	003f1506 	br	89a54 <rx_descriptor_end+0xfff899f4>
   89e00:	da802217 	ldw	r10,136(sp)
   89e04:	04800044 	movi	r18,1
   89e08:	d8001d85 	stb	zero,118(sp)
   89e0c:	50800017 	ldw	r2,0(r10)
   89e10:	52800104 	addi	r10,r10,4
   89e14:	da802215 	stw	r10,136(sp)
   89e18:	d8801005 	stb	r2,64(sp)
   89e1c:	9027883a 	mov	r19,r18
   89e20:	dd401004 	addi	r21,sp,64
   89e24:	0013883a 	mov	r9,zero
   89e28:	003f1706 	br	89a88 <rx_descriptor_end+0xfff89a28>
   89e2c:	21003fcc 	andi	r4,r4,255
   89e30:	2003201e 	bne	r4,zero,8aab4 <___vfiprintf_internal_r+0x144c>
   89e34:	a080080c 	andi	r2,r20,32
   89e38:	10004b26 	beq	r2,zero,89f68 <___vfiprintf_internal_r+0x900>
   89e3c:	da802217 	ldw	r10,136(sp)
   89e40:	50800117 	ldw	r2,4(r10)
   89e44:	54800017 	ldw	r18,0(r10)
   89e48:	52800204 	addi	r10,r10,8
   89e4c:	da802215 	stw	r10,136(sp)
   89e50:	1027883a 	mov	r19,r2
   89e54:	10022c16 	blt	r2,zero,8a708 <___vfiprintf_internal_r+0x10a0>
   89e58:	df001d83 	ldbu	fp,118(sp)
   89e5c:	48007216 	blt	r9,zero,8a028 <___vfiprintf_internal_r+0x9c0>
   89e60:	00ffdfc4 	movi	r3,-129
   89e64:	94c4b03a 	or	r2,r18,r19
   89e68:	a0e8703a 	and	r20,r20,r3
   89e6c:	1000cc26 	beq	r2,zero,8a1a0 <___vfiprintf_internal_r+0xb38>
   89e70:	98021026 	beq	r19,zero,8a6b4 <___vfiprintf_internal_r+0x104c>
   89e74:	dc402415 	stw	r17,144(sp)
   89e78:	dc002515 	stw	r16,148(sp)
   89e7c:	9823883a 	mov	r17,r19
   89e80:	9021883a 	mov	r16,r18
   89e84:	dd401a04 	addi	r21,sp,104
   89e88:	4825883a 	mov	r18,r9
   89e8c:	4027883a 	mov	r19,r8
   89e90:	8009883a 	mov	r4,r16
   89e94:	880b883a 	mov	r5,r17
   89e98:	01800284 	movi	r6,10
   89e9c:	000f883a 	mov	r7,zero
   89ea0:	008b7d00 	call	8b7d0 <__umoddi3>
   89ea4:	10800c04 	addi	r2,r2,48
   89ea8:	ad7fffc4 	addi	r21,r21,-1
   89eac:	8009883a 	mov	r4,r16
   89eb0:	880b883a 	mov	r5,r17
   89eb4:	a8800005 	stb	r2,0(r21)
   89eb8:	01800284 	movi	r6,10
   89ebc:	000f883a 	mov	r7,zero
   89ec0:	008b2580 	call	8b258 <__udivdi3>
   89ec4:	1021883a 	mov	r16,r2
   89ec8:	10c4b03a 	or	r2,r2,r3
   89ecc:	1823883a 	mov	r17,r3
   89ed0:	103fef1e 	bne	r2,zero,89e90 <rx_descriptor_end+0xfff89e30>
   89ed4:	dc402417 	ldw	r17,144(sp)
   89ed8:	dc002517 	ldw	r16,148(sp)
   89edc:	9013883a 	mov	r9,r18
   89ee0:	9811883a 	mov	r8,r19
   89ee4:	da801e17 	ldw	r10,120(sp)
   89ee8:	5567c83a 	sub	r19,r10,r21
   89eec:	003ede06 	br	89a68 <rx_descriptor_end+0xfff89a08>
   89ef0:	38803fcc 	andi	r2,r7,255
   89ef4:	1080201c 	xori	r2,r2,128
   89ef8:	10bfe004 	addi	r2,r2,-128
   89efc:	1002371e 	bne	r2,zero,8a7dc <___vfiprintf_internal_r+0x1174>
   89f00:	01000044 	movi	r4,1
   89f04:	01c00804 	movi	r7,32
   89f08:	80c00007 	ldb	r3,0(r16)
   89f0c:	003e3506 	br	897e4 <rx_descriptor_end+0xfff89784>
   89f10:	a5000054 	ori	r20,r20,1
   89f14:	80c00007 	ldb	r3,0(r16)
   89f18:	003e3206 	br	897e4 <rx_descriptor_end+0xfff89784>
   89f1c:	a5002014 	ori	r20,r20,128
   89f20:	80c00007 	ldb	r3,0(r16)
   89f24:	003e2f06 	br	897e4 <rx_descriptor_end+0xfff89784>
   89f28:	8015883a 	mov	r10,r16
   89f2c:	0023883a 	mov	r17,zero
   89f30:	18bff404 	addi	r2,r3,-48
   89f34:	50c00007 	ldb	r3,0(r10)
   89f38:	8c4002a4 	muli	r17,r17,10
   89f3c:	84000044 	addi	r16,r16,1
   89f40:	8015883a 	mov	r10,r16
   89f44:	1463883a 	add	r17,r2,r17
   89f48:	18bff404 	addi	r2,r3,-48
   89f4c:	30bff92e 	bgeu	r6,r2,89f34 <rx_descriptor_end+0xfff89ed4>
   89f50:	003e2506 	br	897e8 <rx_descriptor_end+0xfff89788>
   89f54:	21003fcc 	andi	r4,r4,255
   89f58:	2002d41e 	bne	r4,zero,8aaac <___vfiprintf_internal_r+0x1444>
   89f5c:	a5000414 	ori	r20,r20,16
   89f60:	a080080c 	andi	r2,r20,32
   89f64:	103fb51e 	bne	r2,zero,89e3c <rx_descriptor_end+0xfff89ddc>
   89f68:	a080040c 	andi	r2,r20,16
   89f6c:	1001f826 	beq	r2,zero,8a750 <___vfiprintf_internal_r+0x10e8>
   89f70:	da802217 	ldw	r10,136(sp)
   89f74:	54800017 	ldw	r18,0(r10)
   89f78:	52800104 	addi	r10,r10,4
   89f7c:	da802215 	stw	r10,136(sp)
   89f80:	9027d7fa 	srai	r19,r18,31
   89f84:	9805883a 	mov	r2,r19
   89f88:	003fb206 	br	89e54 <rx_descriptor_end+0xfff89df4>
   89f8c:	21003fcc 	andi	r4,r4,255
   89f90:	2002c41e 	bne	r4,zero,8aaa4 <___vfiprintf_internal_r+0x143c>
   89f94:	a5000414 	ori	r20,r20,16
   89f98:	a080080c 	andi	r2,r20,32
   89f9c:	103f5f1e 	bne	r2,zero,89d1c <rx_descriptor_end+0xfff89cbc>
   89fa0:	a080040c 	andi	r2,r20,16
   89fa4:	10020f26 	beq	r2,zero,8a7e4 <___vfiprintf_internal_r+0x117c>
   89fa8:	da802217 	ldw	r10,136(sp)
   89fac:	d8001d85 	stb	zero,118(sp)
   89fb0:	0027883a 	mov	r19,zero
   89fb4:	50800104 	addi	r2,r10,4
   89fb8:	54800017 	ldw	r18,0(r10)
   89fbc:	48021116 	blt	r9,zero,8a804 <___vfiprintf_internal_r+0x119c>
   89fc0:	00ffdfc4 	movi	r3,-129
   89fc4:	d8802215 	stw	r2,136(sp)
   89fc8:	a0e8703a 	and	r20,r20,r3
   89fcc:	903f5e1e 	bne	r18,zero,89d48 <rx_descriptor_end+0xfff89ce8>
   89fd0:	0039883a 	mov	fp,zero
   89fd4:	4802a626 	beq	r9,zero,8aa70 <___vfiprintf_internal_r+0x1408>
   89fd8:	0025883a 	mov	r18,zero
   89fdc:	0027883a 	mov	r19,zero
   89fe0:	003f5a06 	br	89d4c <rx_descriptor_end+0xfff89cec>
   89fe4:	21003fcc 	andi	r4,r4,255
   89fe8:	20029f1e 	bne	r4,zero,8aa68 <___vfiprintf_internal_r+0x1400>
   89fec:	a5000414 	ori	r20,r20,16
   89ff0:	a080080c 	andi	r2,r20,32
   89ff4:	10005e1e 	bne	r2,zero,8a170 <___vfiprintf_internal_r+0xb08>
   89ff8:	a080040c 	andi	r2,r20,16
   89ffc:	1001a21e 	bne	r2,zero,8a688 <___vfiprintf_internal_r+0x1020>
   8a000:	a080100c 	andi	r2,r20,64
   8a004:	d8001d85 	stb	zero,118(sp)
   8a008:	da802217 	ldw	r10,136(sp)
   8a00c:	1002231e 	bne	r2,zero,8a89c <___vfiprintf_internal_r+0x1234>
   8a010:	50800104 	addi	r2,r10,4
   8a014:	54800017 	ldw	r18,0(r10)
   8a018:	0027883a 	mov	r19,zero
   8a01c:	4801a00e 	bge	r9,zero,8a6a0 <___vfiprintf_internal_r+0x1038>
   8a020:	d8802215 	stw	r2,136(sp)
   8a024:	0039883a 	mov	fp,zero
   8a028:	94c4b03a 	or	r2,r18,r19
   8a02c:	103f901e 	bne	r2,zero,89e70 <rx_descriptor_end+0xfff89e10>
   8a030:	00800044 	movi	r2,1
   8a034:	10803fcc 	andi	r2,r2,255
   8a038:	00c00044 	movi	r3,1
   8a03c:	10c05926 	beq	r2,r3,8a1a4 <___vfiprintf_internal_r+0xb3c>
   8a040:	00c00084 	movi	r3,2
   8a044:	10ffe41e 	bne	r2,r3,89fd8 <rx_descriptor_end+0xfff89f78>
   8a048:	0025883a 	mov	r18,zero
   8a04c:	0027883a 	mov	r19,zero
   8a050:	00013d06 	br	8a548 <___vfiprintf_internal_r+0xee0>
   8a054:	21003fcc 	andi	r4,r4,255
   8a058:	2002811e 	bne	r4,zero,8aa60 <___vfiprintf_internal_r+0x13f8>
   8a05c:	00800274 	movhi	r2,9
   8a060:	1088b804 	addi	r2,r2,8928
   8a064:	d8802615 	stw	r2,152(sp)
   8a068:	a080080c 	andi	r2,r20,32
   8a06c:	103f561e 	bne	r2,zero,89dc8 <rx_descriptor_end+0xfff89d68>
   8a070:	a080040c 	andi	r2,r20,16
   8a074:	1001d126 	beq	r2,zero,8a7bc <___vfiprintf_internal_r+0x1154>
   8a078:	da802217 	ldw	r10,136(sp)
   8a07c:	0027883a 	mov	r19,zero
   8a080:	54800017 	ldw	r18,0(r10)
   8a084:	52800104 	addi	r10,r10,4
   8a088:	da802215 	stw	r10,136(sp)
   8a08c:	003f5306 	br	89ddc <rx_descriptor_end+0xfff89d7c>
   8a090:	da802217 	ldw	r10,136(sp)
   8a094:	d8001d85 	stb	zero,118(sp)
   8a098:	55400017 	ldw	r21,0(r10)
   8a09c:	50c00104 	addi	r3,r10,4
   8a0a0:	a8024226 	beq	r21,zero,8a9ac <___vfiprintf_internal_r+0x1344>
   8a0a4:	48021816 	blt	r9,zero,8a908 <___vfiprintf_internal_r+0x12a0>
   8a0a8:	480d883a 	mov	r6,r9
   8a0ac:	000b883a 	mov	r5,zero
   8a0b0:	a809883a 	mov	r4,r21
   8a0b4:	d8c02a15 	stw	r3,168(sp)
   8a0b8:	da002b15 	stw	r8,172(sp)
   8a0bc:	da402c15 	stw	r9,176(sp)
   8a0c0:	0087ab00 	call	87ab0 <memchr>
   8a0c4:	d8c02a17 	ldw	r3,168(sp)
   8a0c8:	da002b17 	ldw	r8,172(sp)
   8a0cc:	da402c17 	ldw	r9,176(sp)
   8a0d0:	10024826 	beq	r2,zero,8a9f4 <___vfiprintf_internal_r+0x138c>
   8a0d4:	1567c83a 	sub	r19,r2,r21
   8a0d8:	df001d83 	ldbu	fp,118(sp)
   8a0dc:	d8c02215 	stw	r3,136(sp)
   8a0e0:	0013883a 	mov	r9,zero
   8a0e4:	003e6006 	br	89a68 <rx_descriptor_end+0xfff89a08>
   8a0e8:	21003fcc 	andi	r4,r4,255
   8a0ec:	203fc026 	beq	r4,zero,89ff0 <rx_descriptor_end+0xfff89f90>
   8a0f0:	d9c01d85 	stb	r7,118(sp)
   8a0f4:	003fbe06 	br	89ff0 <rx_descriptor_end+0xfff89f90>
   8a0f8:	da802217 	ldw	r10,136(sp)
   8a0fc:	54400017 	ldw	r17,0(r10)
   8a100:	50800104 	addi	r2,r10,4
   8a104:	883e3b16 	blt	r17,zero,899f4 <rx_descriptor_end+0xfff89994>
   8a108:	d8802215 	stw	r2,136(sp)
   8a10c:	80c00007 	ldb	r3,0(r16)
   8a110:	003db406 	br	897e4 <rx_descriptor_end+0xfff89784>
   8a114:	01000044 	movi	r4,1
   8a118:	01c00ac4 	movi	r7,43
   8a11c:	80c00007 	ldb	r3,0(r16)
   8a120:	003db006 	br	897e4 <rx_descriptor_end+0xfff89784>
   8a124:	80c00007 	ldb	r3,0(r16)
   8a128:	82800044 	addi	r10,r16,1
   8a12c:	1b423c26 	beq	r3,r13,8aa20 <___vfiprintf_internal_r+0x13b8>
   8a130:	18bff404 	addi	r2,r3,-48
   8a134:	0013883a 	mov	r9,zero
   8a138:	30822b36 	bltu	r6,r2,8a9e8 <___vfiprintf_internal_r+0x1380>
   8a13c:	50c00007 	ldb	r3,0(r10)
   8a140:	4a4002a4 	muli	r9,r9,10
   8a144:	54000044 	addi	r16,r10,1
   8a148:	8015883a 	mov	r10,r16
   8a14c:	4893883a 	add	r9,r9,r2
   8a150:	18bff404 	addi	r2,r3,-48
   8a154:	30bff92e 	bgeu	r6,r2,8a13c <rx_descriptor_end+0xfff8a0dc>
   8a158:	483da30e 	bge	r9,zero,897e8 <rx_descriptor_end+0xfff89788>
   8a15c:	027fffc4 	movi	r9,-1
   8a160:	003da106 	br	897e8 <rx_descriptor_end+0xfff89788>
   8a164:	a5001014 	ori	r20,r20,64
   8a168:	80c00007 	ldb	r3,0(r16)
   8a16c:	003d9d06 	br	897e4 <rx_descriptor_end+0xfff89784>
   8a170:	da802217 	ldw	r10,136(sp)
   8a174:	d8001d85 	stb	zero,118(sp)
   8a178:	50c00204 	addi	r3,r10,8
   8a17c:	54800017 	ldw	r18,0(r10)
   8a180:	54c00117 	ldw	r19,4(r10)
   8a184:	4801ca16 	blt	r9,zero,8a8b0 <___vfiprintf_internal_r+0x1248>
   8a188:	013fdfc4 	movi	r4,-129
   8a18c:	94c4b03a 	or	r2,r18,r19
   8a190:	d8c02215 	stw	r3,136(sp)
   8a194:	a128703a 	and	r20,r20,r4
   8a198:	0039883a 	mov	fp,zero
   8a19c:	103f341e 	bne	r2,zero,89e70 <rx_descriptor_end+0xfff89e10>
   8a1a0:	483e2e26 	beq	r9,zero,89a5c <rx_descriptor_end+0xfff899fc>
   8a1a4:	0025883a 	mov	r18,zero
   8a1a8:	94800c04 	addi	r18,r18,48
   8a1ac:	dc8019c5 	stb	r18,103(sp)
   8a1b0:	dcc02717 	ldw	r19,156(sp)
   8a1b4:	dd4019c4 	addi	r21,sp,103
   8a1b8:	003e2b06 	br	89a68 <rx_descriptor_end+0xfff89a08>
   8a1bc:	21003fcc 	andi	r4,r4,255
   8a1c0:	2002361e 	bne	r4,zero,8aa9c <___vfiprintf_internal_r+0x1434>
   8a1c4:	1801c126 	beq	r3,zero,8a8cc <___vfiprintf_internal_r+0x1264>
   8a1c8:	04800044 	movi	r18,1
   8a1cc:	d8c01005 	stb	r3,64(sp)
   8a1d0:	d8001d85 	stb	zero,118(sp)
   8a1d4:	9027883a 	mov	r19,r18
   8a1d8:	dd401004 	addi	r21,sp,64
   8a1dc:	003f1106 	br	89e24 <rx_descriptor_end+0xfff89dc4>
   8a1e0:	d9402117 	ldw	r5,132(sp)
   8a1e4:	d9002017 	ldw	r4,128(sp)
   8a1e8:	d9801a04 	addi	r6,sp,104
   8a1ec:	d9c02b15 	stw	r7,172(sp)
   8a1f0:	dbc02a15 	stw	r15,168(sp)
   8a1f4:	00895540 	call	89554 <__sprint_r.part.0>
   8a1f8:	d9c02b17 	ldw	r7,172(sp)
   8a1fc:	dbc02a17 	ldw	r15,168(sp)
   8a200:	10006d1e 	bne	r2,zero,8a3b8 <___vfiprintf_internal_r+0xd50>
   8a204:	d9801b17 	ldw	r6,108(sp)
   8a208:	d8801c17 	ldw	r2,112(sp)
   8a20c:	d811883a 	mov	r8,sp
   8a210:	31400044 	addi	r5,r6,1
   8a214:	003e3306 	br	89ae4 <rx_descriptor_end+0xfff89a84>
   8a218:	d9401b17 	ldw	r5,108(sp)
   8a21c:	d8801c17 	ldw	r2,112(sp)
   8a220:	29000044 	addi	r4,r5,1
   8a224:	d8c01d87 	ldb	r3,118(sp)
   8a228:	183e4d26 	beq	r3,zero,89b60 <rx_descriptor_end+0xfff89b00>
   8a22c:	00c00044 	movi	r3,1
   8a230:	d9401d84 	addi	r5,sp,118
   8a234:	10c5883a 	add	r2,r2,r3
   8a238:	41400015 	stw	r5,0(r8)
   8a23c:	40c00115 	stw	r3,4(r8)
   8a240:	d8801c15 	stw	r2,112(sp)
   8a244:	d9001b15 	stw	r4,108(sp)
   8a248:	014001c4 	movi	r5,7
   8a24c:	2900a90e 	bge	r5,r4,8a4f4 <___vfiprintf_internal_r+0xe8c>
   8a250:	1000da1e 	bne	r2,zero,8a5bc <___vfiprintf_internal_r+0xf54>
   8a254:	7000ab1e 	bne	r14,zero,8a504 <___vfiprintf_internal_r+0xe9c>
   8a258:	000b883a 	mov	r5,zero
   8a25c:	1809883a 	mov	r4,r3
   8a260:	d811883a 	mov	r8,sp
   8a264:	00c02004 	movi	r3,128
   8a268:	e0fe4d26 	beq	fp,r3,89ba0 <rx_descriptor_end+0xfff89b40>
   8a26c:	4cf9c83a 	sub	fp,r9,r19
   8a270:	073e7b0e 	bge	zero,fp,89c60 <rx_descriptor_end+0xfff89c00>
   8a274:	01c00404 	movi	r7,16
   8a278:	3f01900e 	bge	r7,fp,8a8bc <___vfiprintf_internal_r+0x1254>
   8a27c:	00c00274 	movhi	r3,9
   8a280:	18c91d04 	addi	r3,r3,9332
   8a284:	d8c02415 	stw	r3,144(sp)
   8a288:	034001c4 	movi	r13,7
   8a28c:	00000506 	br	8a2a4 <___vfiprintf_internal_r+0xc3c>
   8a290:	29000084 	addi	r4,r5,2
   8a294:	42000204 	addi	r8,r8,8
   8a298:	180b883a 	mov	r5,r3
   8a29c:	e73ffc04 	addi	fp,fp,-16
   8a2a0:	3f000d0e 	bge	r7,fp,8a2d8 <___vfiprintf_internal_r+0xc70>
   8a2a4:	10800404 	addi	r2,r2,16
   8a2a8:	28c00044 	addi	r3,r5,1
   8a2ac:	45c00015 	stw	r23,0(r8)
   8a2b0:	41c00115 	stw	r7,4(r8)
   8a2b4:	d8801c15 	stw	r2,112(sp)
   8a2b8:	d8c01b15 	stw	r3,108(sp)
   8a2bc:	68fff40e 	bge	r13,r3,8a290 <rx_descriptor_end+0xfff8a230>
   8a2c0:	1000101e 	bne	r2,zero,8a304 <___vfiprintf_internal_r+0xc9c>
   8a2c4:	e73ffc04 	addi	fp,fp,-16
   8a2c8:	01000044 	movi	r4,1
   8a2cc:	000b883a 	mov	r5,zero
   8a2d0:	d811883a 	mov	r8,sp
   8a2d4:	3f3ff316 	blt	r7,fp,8a2a4 <rx_descriptor_end+0xfff8a244>
   8a2d8:	da802417 	ldw	r10,144(sp)
   8a2dc:	1705883a 	add	r2,r2,fp
   8a2e0:	47000115 	stw	fp,4(r8)
   8a2e4:	42800015 	stw	r10,0(r8)
   8a2e8:	d8801c15 	stw	r2,112(sp)
   8a2ec:	d9001b15 	stw	r4,108(sp)
   8a2f0:	00c001c4 	movi	r3,7
   8a2f4:	19003616 	blt	r3,r4,8a3d0 <___vfiprintf_internal_r+0xd68>
   8a2f8:	42000204 	addi	r8,r8,8
   8a2fc:	21000044 	addi	r4,r4,1
   8a300:	003e5706 	br	89c60 <rx_descriptor_end+0xfff89c00>
   8a304:	d9402117 	ldw	r5,132(sp)
   8a308:	d9002017 	ldw	r4,128(sp)
   8a30c:	d9801a04 	addi	r6,sp,104
   8a310:	d9c02b15 	stw	r7,172(sp)
   8a314:	db402a15 	stw	r13,168(sp)
   8a318:	00895540 	call	89554 <__sprint_r.part.0>
   8a31c:	d9c02b17 	ldw	r7,172(sp)
   8a320:	db402a17 	ldw	r13,168(sp)
   8a324:	1000241e 	bne	r2,zero,8a3b8 <___vfiprintf_internal_r+0xd50>
   8a328:	d9401b17 	ldw	r5,108(sp)
   8a32c:	d8801c17 	ldw	r2,112(sp)
   8a330:	d811883a 	mov	r8,sp
   8a334:	29000044 	addi	r4,r5,1
   8a338:	003fd806 	br	8a29c <rx_descriptor_end+0xfff8a23c>
   8a33c:	d9401b17 	ldw	r5,108(sp)
   8a340:	00c00274 	movhi	r3,9
   8a344:	18c92104 	addi	r3,r3,9348
   8a348:	d8c02415 	stw	r3,144(sp)
   8a34c:	29400044 	addi	r5,r5,1
   8a350:	d8c02417 	ldw	r3,144(sp)
   8a354:	14c5883a 	add	r2,r2,r19
   8a358:	44c00115 	stw	r19,4(r8)
   8a35c:	40c00015 	stw	r3,0(r8)
   8a360:	d8801c15 	stw	r2,112(sp)
   8a364:	d9401b15 	stw	r5,108(sp)
   8a368:	00c001c4 	movi	r3,7
   8a36c:	1940070e 	bge	r3,r5,8a38c <___vfiprintf_internal_r+0xd24>
   8a370:	103e4826 	beq	r2,zero,89c94 <rx_descriptor_end+0xfff89c34>
   8a374:	d9402117 	ldw	r5,132(sp)
   8a378:	d9002017 	ldw	r4,128(sp)
   8a37c:	d9801a04 	addi	r6,sp,104
   8a380:	00895540 	call	89554 <__sprint_r.part.0>
   8a384:	10000c1e 	bne	r2,zero,8a3b8 <___vfiprintf_internal_r+0xd50>
   8a388:	d8801c17 	ldw	r2,112(sp)
   8a38c:	8c80010e 	bge	r17,r18,8a394 <___vfiprintf_internal_r+0xd2c>
   8a390:	9023883a 	mov	r17,r18
   8a394:	da802317 	ldw	r10,140(sp)
   8a398:	5455883a 	add	r10,r10,r17
   8a39c:	da802315 	stw	r10,140(sp)
   8a3a0:	103e4126 	beq	r2,zero,89ca8 <rx_descriptor_end+0xfff89c48>
   8a3a4:	d9402117 	ldw	r5,132(sp)
   8a3a8:	d9002017 	ldw	r4,128(sp)
   8a3ac:	d9801a04 	addi	r6,sp,104
   8a3b0:	00895540 	call	89554 <__sprint_r.part.0>
   8a3b4:	103e3c26 	beq	r2,zero,89ca8 <rx_descriptor_end+0xfff89c48>
   8a3b8:	dd002117 	ldw	r20,132(sp)
   8a3bc:	a080030b 	ldhu	r2,12(r20)
   8a3c0:	1080100c 	andi	r2,r2,64
   8a3c4:	1001231e 	bne	r2,zero,8a854 <___vfiprintf_internal_r+0x11ec>
   8a3c8:	d8802317 	ldw	r2,140(sp)
   8a3cc:	003d7b06 	br	899bc <rx_descriptor_end+0xfff8995c>
   8a3d0:	1000991e 	bne	r2,zero,8a638 <___vfiprintf_internal_r+0xfd0>
   8a3d4:	00c00044 	movi	r3,1
   8a3d8:	9805883a 	mov	r2,r19
   8a3dc:	dd400015 	stw	r21,0(sp)
   8a3e0:	dcc00115 	stw	r19,4(sp)
   8a3e4:	dcc01c15 	stw	r19,112(sp)
   8a3e8:	d8c01b15 	stw	r3,108(sp)
   8a3ec:	d811883a 	mov	r8,sp
   8a3f0:	42000204 	addi	r8,r8,8
   8a3f4:	a2c0010c 	andi	r11,r20,4
   8a3f8:	583fe426 	beq	r11,zero,8a38c <rx_descriptor_end+0xfff8a32c>
   8a3fc:	8ca7c83a 	sub	r19,r17,r18
   8a400:	04ffe20e 	bge	zero,r19,8a38c <rx_descriptor_end+0xfff8a32c>
   8a404:	01c00404 	movi	r7,16
   8a408:	3cffcc0e 	bge	r7,r19,8a33c <rx_descriptor_end+0xfff8a2dc>
   8a40c:	02800274 	movhi	r10,9
   8a410:	52892104 	addi	r10,r10,9348
   8a414:	d9001b17 	ldw	r4,108(sp)
   8a418:	da802415 	stw	r10,144(sp)
   8a41c:	382b883a 	mov	r21,r7
   8a420:	050001c4 	movi	r20,7
   8a424:	df002017 	ldw	fp,128(sp)
   8a428:	00000506 	br	8a440 <___vfiprintf_internal_r+0xdd8>
   8a42c:	21400084 	addi	r5,r4,2
   8a430:	42000204 	addi	r8,r8,8
   8a434:	1809883a 	mov	r4,r3
   8a438:	9cfffc04 	addi	r19,r19,-16
   8a43c:	acffc40e 	bge	r21,r19,8a350 <rx_descriptor_end+0xfff8a2f0>
   8a440:	10800404 	addi	r2,r2,16
   8a444:	20c00044 	addi	r3,r4,1
   8a448:	45800015 	stw	r22,0(r8)
   8a44c:	45400115 	stw	r21,4(r8)
   8a450:	d8801c15 	stw	r2,112(sp)
   8a454:	d8c01b15 	stw	r3,108(sp)
   8a458:	a0fff40e 	bge	r20,r3,8a42c <rx_descriptor_end+0xfff8a3cc>
   8a45c:	1000041e 	bne	r2,zero,8a470 <___vfiprintf_internal_r+0xe08>
   8a460:	01400044 	movi	r5,1
   8a464:	0009883a 	mov	r4,zero
   8a468:	d811883a 	mov	r8,sp
   8a46c:	003ff206 	br	8a438 <rx_descriptor_end+0xfff8a3d8>
   8a470:	d9402117 	ldw	r5,132(sp)
   8a474:	d9801a04 	addi	r6,sp,104
   8a478:	e009883a 	mov	r4,fp
   8a47c:	00895540 	call	89554 <__sprint_r.part.0>
   8a480:	103fcd1e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a484:	d9001b17 	ldw	r4,108(sp)
   8a488:	d8801c17 	ldw	r2,112(sp)
   8a48c:	d811883a 	mov	r8,sp
   8a490:	21400044 	addi	r5,r4,1
   8a494:	003fe806 	br	8a438 <rx_descriptor_end+0xfff8a3d8>
   8a498:	d9402117 	ldw	r5,132(sp)
   8a49c:	d9002017 	ldw	r4,128(sp)
   8a4a0:	d9801a04 	addi	r6,sp,104
   8a4a4:	d9c02b15 	stw	r7,172(sp)
   8a4a8:	db402a15 	stw	r13,168(sp)
   8a4ac:	00895540 	call	89554 <__sprint_r.part.0>
   8a4b0:	d9c02b17 	ldw	r7,172(sp)
   8a4b4:	db402a17 	ldw	r13,168(sp)
   8a4b8:	103fbf1e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a4bc:	d9401b17 	ldw	r5,108(sp)
   8a4c0:	d8801c17 	ldw	r2,112(sp)
   8a4c4:	d811883a 	mov	r8,sp
   8a4c8:	29800044 	addi	r6,r5,1
   8a4cc:	003dc406 	br	89be0 <rx_descriptor_end+0xfff89b80>
   8a4d0:	1000d21e 	bne	r2,zero,8a81c <___vfiprintf_internal_r+0x11b4>
   8a4d4:	d8c01d87 	ldb	r3,118(sp)
   8a4d8:	18009526 	beq	r3,zero,8a730 <___vfiprintf_internal_r+0x10c8>
   8a4dc:	00800044 	movi	r2,1
   8a4e0:	d8c01d84 	addi	r3,sp,118
   8a4e4:	1009883a 	mov	r4,r2
   8a4e8:	d8c00015 	stw	r3,0(sp)
   8a4ec:	d8800115 	stw	r2,4(sp)
   8a4f0:	d811883a 	mov	r8,sp
   8a4f4:	200b883a 	mov	r5,r4
   8a4f8:	42000204 	addi	r8,r8,8
   8a4fc:	21000044 	addi	r4,r4,1
   8a500:	003d9706 	br	89b60 <rx_descriptor_end+0xfff89b00>
   8a504:	d9001d04 	addi	r4,sp,116
   8a508:	00800084 	movi	r2,2
   8a50c:	d9000015 	stw	r4,0(sp)
   8a510:	d8800115 	stw	r2,4(sp)
   8a514:	1809883a 	mov	r4,r3
   8a518:	d811883a 	mov	r8,sp
   8a51c:	200b883a 	mov	r5,r4
   8a520:	42000204 	addi	r8,r8,8
   8a524:	21000044 	addi	r4,r4,1
   8a528:	003f4e06 	br	8a264 <rx_descriptor_end+0xfff8a204>
   8a52c:	d8001d85 	stb	zero,118(sp)
   8a530:	48005016 	blt	r9,zero,8a674 <___vfiprintf_internal_r+0x100c>
   8a534:	00ffdfc4 	movi	r3,-129
   8a538:	94c4b03a 	or	r2,r18,r19
   8a53c:	a0e8703a 	and	r20,r20,r3
   8a540:	103d4426 	beq	r2,zero,89a54 <rx_descriptor_end+0xfff899f4>
   8a544:	0039883a 	mov	fp,zero
   8a548:	d9002617 	ldw	r4,152(sp)
   8a54c:	dd401a04 	addi	r21,sp,104
   8a550:	908003cc 	andi	r2,r18,15
   8a554:	9806973a 	slli	r3,r19,28
   8a558:	2085883a 	add	r2,r4,r2
   8a55c:	9024d13a 	srli	r18,r18,4
   8a560:	10800003 	ldbu	r2,0(r2)
   8a564:	9826d13a 	srli	r19,r19,4
   8a568:	ad7fffc4 	addi	r21,r21,-1
   8a56c:	1ca4b03a 	or	r18,r3,r18
   8a570:	a8800005 	stb	r2,0(r21)
   8a574:	94c4b03a 	or	r2,r18,r19
   8a578:	103ff51e 	bne	r2,zero,8a550 <rx_descriptor_end+0xfff8a4f0>
   8a57c:	003e5906 	br	89ee4 <rx_descriptor_end+0xfff89e84>
   8a580:	d9402117 	ldw	r5,132(sp)
   8a584:	d9002017 	ldw	r4,128(sp)
   8a588:	d9801a04 	addi	r6,sp,104
   8a58c:	00895540 	call	89554 <__sprint_r.part.0>
   8a590:	103f891e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a594:	d8801c17 	ldw	r2,112(sp)
   8a598:	d811883a 	mov	r8,sp
   8a59c:	003f9506 	br	8a3f4 <rx_descriptor_end+0xfff8a394>
   8a5a0:	d9402117 	ldw	r5,132(sp)
   8a5a4:	d9002017 	ldw	r4,128(sp)
   8a5a8:	d9801a04 	addi	r6,sp,104
   8a5ac:	00895540 	call	89554 <__sprint_r.part.0>
   8a5b0:	103f811e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a5b4:	d811883a 	mov	r8,sp
   8a5b8:	003ced06 	br	89970 <rx_descriptor_end+0xfff89910>
   8a5bc:	d9402117 	ldw	r5,132(sp)
   8a5c0:	d9002017 	ldw	r4,128(sp)
   8a5c4:	d9801a04 	addi	r6,sp,104
   8a5c8:	da402c15 	stw	r9,176(sp)
   8a5cc:	db802a15 	stw	r14,168(sp)
   8a5d0:	00895540 	call	89554 <__sprint_r.part.0>
   8a5d4:	da402c17 	ldw	r9,176(sp)
   8a5d8:	db802a17 	ldw	r14,168(sp)
   8a5dc:	103f761e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a5e0:	d9401b17 	ldw	r5,108(sp)
   8a5e4:	d8801c17 	ldw	r2,112(sp)
   8a5e8:	d811883a 	mov	r8,sp
   8a5ec:	29000044 	addi	r4,r5,1
   8a5f0:	003d5b06 	br	89b60 <rx_descriptor_end+0xfff89b00>
   8a5f4:	d9402117 	ldw	r5,132(sp)
   8a5f8:	d9002017 	ldw	r4,128(sp)
   8a5fc:	d9801a04 	addi	r6,sp,104
   8a600:	da402c15 	stw	r9,176(sp)
   8a604:	00895540 	call	89554 <__sprint_r.part.0>
   8a608:	da402c17 	ldw	r9,176(sp)
   8a60c:	103f6a1e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a610:	d9401b17 	ldw	r5,108(sp)
   8a614:	d8801c17 	ldw	r2,112(sp)
   8a618:	d811883a 	mov	r8,sp
   8a61c:	29000044 	addi	r4,r5,1
   8a620:	003f1006 	br	8a264 <rx_descriptor_end+0xfff8a204>
   8a624:	1000c31e 	bne	r2,zero,8a934 <___vfiprintf_internal_r+0x12cc>
   8a628:	01000044 	movi	r4,1
   8a62c:	000b883a 	mov	r5,zero
   8a630:	d811883a 	mov	r8,sp
   8a634:	003f0d06 	br	8a26c <rx_descriptor_end+0xfff8a20c>
   8a638:	d9402117 	ldw	r5,132(sp)
   8a63c:	d9002017 	ldw	r4,128(sp)
   8a640:	d9801a04 	addi	r6,sp,104
   8a644:	00895540 	call	89554 <__sprint_r.part.0>
   8a648:	103f5b1e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a64c:	d9001b17 	ldw	r4,108(sp)
   8a650:	d8801c17 	ldw	r2,112(sp)
   8a654:	d811883a 	mov	r8,sp
   8a658:	21000044 	addi	r4,r4,1
   8a65c:	003d8006 	br	89c60 <rx_descriptor_end+0xfff89c00>
   8a660:	01000274 	movhi	r4,9
   8a664:	2108bd04 	addi	r4,r4,8948
   8a668:	d9002615 	stw	r4,152(sp)
   8a66c:	d8c02215 	stw	r3,136(sp)
   8a670:	1029883a 	mov	r20,r2
   8a674:	94c4b03a 	or	r2,r18,r19
   8a678:	103fb21e 	bne	r2,zero,8a544 <rx_descriptor_end+0xfff8a4e4>
   8a67c:	0039883a 	mov	fp,zero
   8a680:	00800084 	movi	r2,2
   8a684:	003e6b06 	br	8a034 <rx_descriptor_end+0xfff89fd4>
   8a688:	da802217 	ldw	r10,136(sp)
   8a68c:	d8001d85 	stb	zero,118(sp)
   8a690:	0027883a 	mov	r19,zero
   8a694:	50800104 	addi	r2,r10,4
   8a698:	54800017 	ldw	r18,0(r10)
   8a69c:	483e6016 	blt	r9,zero,8a020 <rx_descriptor_end+0xfff89fc0>
   8a6a0:	00ffdfc4 	movi	r3,-129
   8a6a4:	d8802215 	stw	r2,136(sp)
   8a6a8:	a0e8703a 	and	r20,r20,r3
   8a6ac:	0039883a 	mov	fp,zero
   8a6b0:	903ebb26 	beq	r18,zero,8a1a0 <rx_descriptor_end+0xfff8a140>
   8a6b4:	00800244 	movi	r2,9
   8a6b8:	14bdee36 	bltu	r2,r18,89e74 <rx_descriptor_end+0xfff89e14>
   8a6bc:	003eba06 	br	8a1a8 <rx_descriptor_end+0xfff8a148>
   8a6c0:	00800c04 	movi	r2,48
   8a6c4:	d8c01d45 	stb	r3,117(sp)
   8a6c8:	d8801d05 	stb	r2,116(sp)
   8a6cc:	d8001d85 	stb	zero,118(sp)
   8a6d0:	a0c00094 	ori	r3,r20,2
   8a6d4:	4800a916 	blt	r9,zero,8a97c <___vfiprintf_internal_r+0x1314>
   8a6d8:	00bfdfc4 	movi	r2,-129
   8a6dc:	a096703a 	and	r11,r20,r2
   8a6e0:	5d000094 	ori	r20,r11,2
   8a6e4:	0039883a 	mov	fp,zero
   8a6e8:	003f9706 	br	8a548 <rx_descriptor_end+0xfff8a4e8>
   8a6ec:	8025883a 	mov	r18,r16
   8a6f0:	003c2e06 	br	897ac <rx_descriptor_end+0xfff8974c>
   8a6f4:	00800274 	movhi	r2,9
   8a6f8:	1088bd04 	addi	r2,r2,8948
   8a6fc:	0039883a 	mov	fp,zero
   8a700:	d8802615 	stw	r2,152(sp)
   8a704:	003f9006 	br	8a548 <rx_descriptor_end+0xfff8a4e8>
   8a708:	04a5c83a 	sub	r18,zero,r18
   8a70c:	07000b44 	movi	fp,45
   8a710:	9004c03a 	cmpne	r2,r18,zero
   8a714:	04e7c83a 	sub	r19,zero,r19
   8a718:	df001d85 	stb	fp,118(sp)
   8a71c:	98a7c83a 	sub	r19,r19,r2
   8a720:	48009f16 	blt	r9,zero,8a9a0 <___vfiprintf_internal_r+0x1338>
   8a724:	00bfdfc4 	movi	r2,-129
   8a728:	a0a8703a 	and	r20,r20,r2
   8a72c:	003dd006 	br	89e70 <rx_descriptor_end+0xfff89e10>
   8a730:	70004c26 	beq	r14,zero,8a864 <___vfiprintf_internal_r+0x11fc>
   8a734:	00800084 	movi	r2,2
   8a738:	d8c01d04 	addi	r3,sp,116
   8a73c:	d8c00015 	stw	r3,0(sp)
   8a740:	d8800115 	stw	r2,4(sp)
   8a744:	01000044 	movi	r4,1
   8a748:	d811883a 	mov	r8,sp
   8a74c:	003f7306 	br	8a51c <rx_descriptor_end+0xfff8a4bc>
   8a750:	a080100c 	andi	r2,r20,64
   8a754:	da802217 	ldw	r10,136(sp)
   8a758:	103e0626 	beq	r2,zero,89f74 <rx_descriptor_end+0xfff89f14>
   8a75c:	5480000f 	ldh	r18,0(r10)
   8a760:	52800104 	addi	r10,r10,4
   8a764:	da802215 	stw	r10,136(sp)
   8a768:	9027d7fa 	srai	r19,r18,31
   8a76c:	9805883a 	mov	r2,r19
   8a770:	003db806 	br	89e54 <rx_descriptor_end+0xfff89df4>
   8a774:	a080040c 	andi	r2,r20,16
   8a778:	1000091e 	bne	r2,zero,8a7a0 <___vfiprintf_internal_r+0x1138>
   8a77c:	a2c0100c 	andi	r11,r20,64
   8a780:	58000726 	beq	r11,zero,8a7a0 <___vfiprintf_internal_r+0x1138>
   8a784:	da802217 	ldw	r10,136(sp)
   8a788:	50800017 	ldw	r2,0(r10)
   8a78c:	52800104 	addi	r10,r10,4
   8a790:	da802215 	stw	r10,136(sp)
   8a794:	da802317 	ldw	r10,140(sp)
   8a798:	1280000d 	sth	r10,0(r2)
   8a79c:	003be706 	br	8973c <rx_descriptor_end+0xfff896dc>
   8a7a0:	da802217 	ldw	r10,136(sp)
   8a7a4:	50800017 	ldw	r2,0(r10)
   8a7a8:	52800104 	addi	r10,r10,4
   8a7ac:	da802215 	stw	r10,136(sp)
   8a7b0:	da802317 	ldw	r10,140(sp)
   8a7b4:	12800015 	stw	r10,0(r2)
   8a7b8:	003be006 	br	8973c <rx_descriptor_end+0xfff896dc>
   8a7bc:	a080100c 	andi	r2,r20,64
   8a7c0:	da802217 	ldw	r10,136(sp)
   8a7c4:	10003026 	beq	r2,zero,8a888 <___vfiprintf_internal_r+0x1220>
   8a7c8:	5480000b 	ldhu	r18,0(r10)
   8a7cc:	52800104 	addi	r10,r10,4
   8a7d0:	0027883a 	mov	r19,zero
   8a7d4:	da802215 	stw	r10,136(sp)
   8a7d8:	003d8006 	br	89ddc <rx_descriptor_end+0xfff89d7c>
   8a7dc:	80c00007 	ldb	r3,0(r16)
   8a7e0:	003c0006 	br	897e4 <rx_descriptor_end+0xfff89784>
   8a7e4:	a080100c 	andi	r2,r20,64
   8a7e8:	d8001d85 	stb	zero,118(sp)
   8a7ec:	da802217 	ldw	r10,136(sp)
   8a7f0:	1000201e 	bne	r2,zero,8a874 <___vfiprintf_internal_r+0x120c>
   8a7f4:	50800104 	addi	r2,r10,4
   8a7f8:	54800017 	ldw	r18,0(r10)
   8a7fc:	0027883a 	mov	r19,zero
   8a800:	483def0e 	bge	r9,zero,89fc0 <rx_descriptor_end+0xfff89f60>
   8a804:	94c6b03a 	or	r3,r18,r19
   8a808:	d8802215 	stw	r2,136(sp)
   8a80c:	183d4e1e 	bne	r3,zero,89d48 <rx_descriptor_end+0xfff89ce8>
   8a810:	0039883a 	mov	fp,zero
   8a814:	0005883a 	mov	r2,zero
   8a818:	003e0606 	br	8a034 <rx_descriptor_end+0xfff89fd4>
   8a81c:	d9402117 	ldw	r5,132(sp)
   8a820:	d9002017 	ldw	r4,128(sp)
   8a824:	d9801a04 	addi	r6,sp,104
   8a828:	da402c15 	stw	r9,176(sp)
   8a82c:	db802a15 	stw	r14,168(sp)
   8a830:	00895540 	call	89554 <__sprint_r.part.0>
   8a834:	da402c17 	ldw	r9,176(sp)
   8a838:	db802a17 	ldw	r14,168(sp)
   8a83c:	103ede1e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a840:	d9401b17 	ldw	r5,108(sp)
   8a844:	d8801c17 	ldw	r2,112(sp)
   8a848:	d811883a 	mov	r8,sp
   8a84c:	29000044 	addi	r4,r5,1
   8a850:	003e7406 	br	8a224 <rx_descriptor_end+0xfff8a1c4>
   8a854:	00bfffc4 	movi	r2,-1
   8a858:	003c5806 	br	899bc <rx_descriptor_end+0xfff8995c>
   8a85c:	d811883a 	mov	r8,sp
   8a860:	003ee806 	br	8a404 <rx_descriptor_end+0xfff8a3a4>
   8a864:	000b883a 	mov	r5,zero
   8a868:	01000044 	movi	r4,1
   8a86c:	d811883a 	mov	r8,sp
   8a870:	003e7c06 	br	8a264 <rx_descriptor_end+0xfff8a204>
   8a874:	50800104 	addi	r2,r10,4
   8a878:	5480000b 	ldhu	r18,0(r10)
   8a87c:	0027883a 	mov	r19,zero
   8a880:	483dcf0e 	bge	r9,zero,89fc0 <rx_descriptor_end+0xfff89f60>
   8a884:	003fdf06 	br	8a804 <rx_descriptor_end+0xfff8a7a4>
   8a888:	54800017 	ldw	r18,0(r10)
   8a88c:	52800104 	addi	r10,r10,4
   8a890:	0027883a 	mov	r19,zero
   8a894:	da802215 	stw	r10,136(sp)
   8a898:	003d5006 	br	89ddc <rx_descriptor_end+0xfff89d7c>
   8a89c:	50800104 	addi	r2,r10,4
   8a8a0:	5480000b 	ldhu	r18,0(r10)
   8a8a4:	0027883a 	mov	r19,zero
   8a8a8:	483f7d0e 	bge	r9,zero,8a6a0 <rx_descriptor_end+0xfff8a640>
   8a8ac:	003ddc06 	br	8a020 <rx_descriptor_end+0xfff89fc0>
   8a8b0:	d8c02215 	stw	r3,136(sp)
   8a8b4:	0039883a 	mov	fp,zero
   8a8b8:	003ddb06 	br	8a028 <rx_descriptor_end+0xfff89fc8>
   8a8bc:	02800274 	movhi	r10,9
   8a8c0:	52891d04 	addi	r10,r10,9332
   8a8c4:	da802415 	stw	r10,144(sp)
   8a8c8:	003e8306 	br	8a2d8 <rx_descriptor_end+0xfff8a278>
   8a8cc:	d8801c17 	ldw	r2,112(sp)
   8a8d0:	dd002117 	ldw	r20,132(sp)
   8a8d4:	103eb926 	beq	r2,zero,8a3bc <rx_descriptor_end+0xfff8a35c>
   8a8d8:	d9002017 	ldw	r4,128(sp)
   8a8dc:	d9801a04 	addi	r6,sp,104
   8a8e0:	a00b883a 	mov	r5,r20
   8a8e4:	00895540 	call	89554 <__sprint_r.part.0>
   8a8e8:	003eb406 	br	8a3bc <rx_descriptor_end+0xfff8a35c>
   8a8ec:	80c00043 	ldbu	r3,1(r16)
   8a8f0:	a5000814 	ori	r20,r20,32
   8a8f4:	84000044 	addi	r16,r16,1
   8a8f8:	18c03fcc 	andi	r3,r3,255
   8a8fc:	18c0201c 	xori	r3,r3,128
   8a900:	18ffe004 	addi	r3,r3,-128
   8a904:	003bb706 	br	897e4 <rx_descriptor_end+0xfff89784>
   8a908:	a809883a 	mov	r4,r21
   8a90c:	d8c02a15 	stw	r3,168(sp)
   8a910:	da002b15 	stw	r8,172(sp)
   8a914:	00834000 	call	83400 <strlen>
   8a918:	d8c02a17 	ldw	r3,168(sp)
   8a91c:	1027883a 	mov	r19,r2
   8a920:	df001d83 	ldbu	fp,118(sp)
   8a924:	d8c02215 	stw	r3,136(sp)
   8a928:	0013883a 	mov	r9,zero
   8a92c:	da002b17 	ldw	r8,172(sp)
   8a930:	003c4d06 	br	89a68 <rx_descriptor_end+0xfff89a08>
   8a934:	d9402117 	ldw	r5,132(sp)
   8a938:	d9002017 	ldw	r4,128(sp)
   8a93c:	d9801a04 	addi	r6,sp,104
   8a940:	da402c15 	stw	r9,176(sp)
   8a944:	00895540 	call	89554 <__sprint_r.part.0>
   8a948:	da402c17 	ldw	r9,176(sp)
   8a94c:	103e9a1e 	bne	r2,zero,8a3b8 <rx_descriptor_end+0xfff8a358>
   8a950:	d9401b17 	ldw	r5,108(sp)
   8a954:	d8801c17 	ldw	r2,112(sp)
   8a958:	d811883a 	mov	r8,sp
   8a95c:	29000044 	addi	r4,r5,1
   8a960:	003e4206 	br	8a26c <rx_descriptor_end+0xfff8a20c>
   8a964:	d9401b17 	ldw	r5,108(sp)
   8a968:	01000274 	movhi	r4,9
   8a96c:	21092104 	addi	r4,r4,9348
   8a970:	d9002415 	stw	r4,144(sp)
   8a974:	29400044 	addi	r5,r5,1
   8a978:	003c6d06 	br	89b30 <rx_descriptor_end+0xfff89ad0>
   8a97c:	0039883a 	mov	fp,zero
   8a980:	00800084 	movi	r2,2
   8a984:	10803fcc 	andi	r2,r2,255
   8a988:	01000044 	movi	r4,1
   8a98c:	11001e26 	beq	r2,r4,8aa08 <___vfiprintf_internal_r+0x13a0>
   8a990:	01000084 	movi	r4,2
   8a994:	11001e1e 	bne	r2,r4,8aa10 <___vfiprintf_internal_r+0x13a8>
   8a998:	1829883a 	mov	r20,r3
   8a99c:	003eea06 	br	8a548 <rx_descriptor_end+0xfff8a4e8>
   8a9a0:	a007883a 	mov	r3,r20
   8a9a4:	00800044 	movi	r2,1
   8a9a8:	003ff606 	br	8a984 <rx_descriptor_end+0xfff8a924>
   8a9ac:	00800184 	movi	r2,6
   8a9b0:	1240012e 	bgeu	r2,r9,8a9b8 <___vfiprintf_internal_r+0x1350>
   8a9b4:	1013883a 	mov	r9,r2
   8a9b8:	4827883a 	mov	r19,r9
   8a9bc:	4825883a 	mov	r18,r9
   8a9c0:	48001516 	blt	r9,zero,8aa18 <___vfiprintf_internal_r+0x13b0>
   8a9c4:	05400274 	movhi	r21,9
   8a9c8:	d8c02215 	stw	r3,136(sp)
   8a9cc:	ad48c204 	addi	r21,r21,8968
   8a9d0:	003d1406 	br	89e24 <rx_descriptor_end+0xfff89dc4>
   8a9d4:	02800274 	movhi	r10,9
   8a9d8:	52891d04 	addi	r10,r10,9332
   8a9dc:	da802415 	stw	r10,144(sp)
   8a9e0:	200d883a 	mov	r6,r4
   8a9e4:	003c9106 	br	89c2c <rx_descriptor_end+0xfff89bcc>
   8a9e8:	5021883a 	mov	r16,r10
   8a9ec:	0013883a 	mov	r9,zero
   8a9f0:	003b7d06 	br	897e8 <rx_descriptor_end+0xfff89788>
   8a9f4:	4827883a 	mov	r19,r9
   8a9f8:	df001d83 	ldbu	fp,118(sp)
   8a9fc:	d8c02215 	stw	r3,136(sp)
   8aa00:	0013883a 	mov	r9,zero
   8aa04:	003c1806 	br	89a68 <rx_descriptor_end+0xfff89a08>
   8aa08:	1829883a 	mov	r20,r3
   8aa0c:	003d1806 	br	89e70 <rx_descriptor_end+0xfff89e10>
   8aa10:	1829883a 	mov	r20,r3
   8aa14:	003ccd06 	br	89d4c <rx_descriptor_end+0xfff89cec>
   8aa18:	0025883a 	mov	r18,zero
   8aa1c:	003fe906 	br	8a9c4 <rx_descriptor_end+0xfff8a964>
   8aa20:	d8802217 	ldw	r2,136(sp)
   8aa24:	80c00043 	ldbu	r3,1(r16)
   8aa28:	5021883a 	mov	r16,r10
   8aa2c:	12400017 	ldw	r9,0(r2)
   8aa30:	10800104 	addi	r2,r2,4
   8aa34:	d8802215 	stw	r2,136(sp)
   8aa38:	483faf0e 	bge	r9,zero,8a8f8 <rx_descriptor_end+0xfff8a898>
   8aa3c:	18c03fcc 	andi	r3,r3,255
   8aa40:	18c0201c 	xori	r3,r3,128
   8aa44:	027fffc4 	movi	r9,-1
   8aa48:	18ffe004 	addi	r3,r3,-128
   8aa4c:	003b6506 	br	897e4 <rx_descriptor_end+0xfff89784>
   8aa50:	d9c01d85 	stb	r7,118(sp)
   8aa54:	003ca006 	br	89cd8 <rx_descriptor_end+0xfff89c78>
   8aa58:	d9c01d85 	stb	r7,118(sp)
   8aa5c:	003cad06 	br	89d14 <rx_descriptor_end+0xfff89cb4>
   8aa60:	d9c01d85 	stb	r7,118(sp)
   8aa64:	003d7d06 	br	8a05c <rx_descriptor_end+0xfff89ffc>
   8aa68:	d9c01d85 	stb	r7,118(sp)
   8aa6c:	003d5f06 	br	89fec <rx_descriptor_end+0xfff89f8c>
   8aa70:	a080004c 	andi	r2,r20,1
   8aa74:	0039883a 	mov	fp,zero
   8aa78:	10000526 	beq	r2,zero,8aa90 <___vfiprintf_internal_r+0x1428>
   8aa7c:	00800c04 	movi	r2,48
   8aa80:	d88019c5 	stb	r2,103(sp)
   8aa84:	dcc02717 	ldw	r19,156(sp)
   8aa88:	dd4019c4 	addi	r21,sp,103
   8aa8c:	003bf606 	br	89a68 <rx_descriptor_end+0xfff89a08>
   8aa90:	0027883a 	mov	r19,zero
   8aa94:	dd401a04 	addi	r21,sp,104
   8aa98:	003bf306 	br	89a68 <rx_descriptor_end+0xfff89a08>
   8aa9c:	d9c01d85 	stb	r7,118(sp)
   8aaa0:	003dc806 	br	8a1c4 <rx_descriptor_end+0xfff8a164>
   8aaa4:	d9c01d85 	stb	r7,118(sp)
   8aaa8:	003d3a06 	br	89f94 <rx_descriptor_end+0xfff89f34>
   8aaac:	d9c01d85 	stb	r7,118(sp)
   8aab0:	003d2a06 	br	89f5c <rx_descriptor_end+0xfff89efc>
   8aab4:	d9c01d85 	stb	r7,118(sp)
   8aab8:	003cde06 	br	89e34 <rx_descriptor_end+0xfff89dd4>
   8aabc:	d9c01d85 	stb	r7,118(sp)
   8aac0:	003cbc06 	br	89db4 <rx_descriptor_end+0xfff89d54>

0008aac4 <__vfiprintf_internal>:
   8aac4:	00800274 	movhi	r2,9
   8aac8:	10913d04 	addi	r2,r2,17652
   8aacc:	300f883a 	mov	r7,r6
   8aad0:	280d883a 	mov	r6,r5
   8aad4:	200b883a 	mov	r5,r4
   8aad8:	11000017 	ldw	r4,0(r2)
   8aadc:	00896681 	jmpi	89668 <___vfiprintf_internal_r>

0008aae0 <__sbprintf>:
   8aae0:	2880030b 	ldhu	r2,12(r5)
   8aae4:	2ac01917 	ldw	r11,100(r5)
   8aae8:	2a80038b 	ldhu	r10,14(r5)
   8aaec:	2a400717 	ldw	r9,28(r5)
   8aaf0:	2a000917 	ldw	r8,36(r5)
   8aaf4:	defee204 	addi	sp,sp,-1144
   8aaf8:	00c10004 	movi	r3,1024
   8aafc:	dc011a15 	stw	r16,1128(sp)
   8ab00:	10bfff4c 	andi	r2,r2,65533
   8ab04:	2821883a 	mov	r16,r5
   8ab08:	d8cb883a 	add	r5,sp,r3
   8ab0c:	dc811c15 	stw	r18,1136(sp)
   8ab10:	dc411b15 	stw	r17,1132(sp)
   8ab14:	dfc11d15 	stw	ra,1140(sp)
   8ab18:	2025883a 	mov	r18,r4
   8ab1c:	d881030d 	sth	r2,1036(sp)
   8ab20:	dac11915 	stw	r11,1124(sp)
   8ab24:	da81038d 	sth	r10,1038(sp)
   8ab28:	da410715 	stw	r9,1052(sp)
   8ab2c:	da010915 	stw	r8,1060(sp)
   8ab30:	dec10015 	stw	sp,1024(sp)
   8ab34:	dec10415 	stw	sp,1040(sp)
   8ab38:	d8c10215 	stw	r3,1032(sp)
   8ab3c:	d8c10515 	stw	r3,1044(sp)
   8ab40:	d8010615 	stw	zero,1048(sp)
   8ab44:	00896680 	call	89668 <___vfiprintf_internal_r>
   8ab48:	1023883a 	mov	r17,r2
   8ab4c:	10000416 	blt	r2,zero,8ab60 <__sbprintf+0x80>
   8ab50:	d9410004 	addi	r5,sp,1024
   8ab54:	9009883a 	mov	r4,r18
   8ab58:	0081c700 	call	81c70 <_fflush_r>
   8ab5c:	10000d1e 	bne	r2,zero,8ab94 <__sbprintf+0xb4>
   8ab60:	d881030b 	ldhu	r2,1036(sp)
   8ab64:	1080100c 	andi	r2,r2,64
   8ab68:	10000326 	beq	r2,zero,8ab78 <__sbprintf+0x98>
   8ab6c:	8080030b 	ldhu	r2,12(r16)
   8ab70:	10801014 	ori	r2,r2,64
   8ab74:	8080030d 	sth	r2,12(r16)
   8ab78:	8805883a 	mov	r2,r17
   8ab7c:	dfc11d17 	ldw	ra,1140(sp)
   8ab80:	dc811c17 	ldw	r18,1136(sp)
   8ab84:	dc411b17 	ldw	r17,1132(sp)
   8ab88:	dc011a17 	ldw	r16,1128(sp)
   8ab8c:	dec11e04 	addi	sp,sp,1144
   8ab90:	f800283a 	ret
   8ab94:	047fffc4 	movi	r17,-1
   8ab98:	003ff106 	br	8ab60 <rx_descriptor_end+0xfff8ab00>

0008ab9c <__swbuf_r>:
   8ab9c:	defffb04 	addi	sp,sp,-20
   8aba0:	dcc00315 	stw	r19,12(sp)
   8aba4:	dc800215 	stw	r18,8(sp)
   8aba8:	dc000015 	stw	r16,0(sp)
   8abac:	dfc00415 	stw	ra,16(sp)
   8abb0:	dc400115 	stw	r17,4(sp)
   8abb4:	2025883a 	mov	r18,r4
   8abb8:	2827883a 	mov	r19,r5
   8abbc:	3021883a 	mov	r16,r6
   8abc0:	20000226 	beq	r4,zero,8abcc <__swbuf_r+0x30>
   8abc4:	20800e17 	ldw	r2,56(r4)
   8abc8:	10004226 	beq	r2,zero,8acd4 <__swbuf_r+0x138>
   8abcc:	80800617 	ldw	r2,24(r16)
   8abd0:	8100030b 	ldhu	r4,12(r16)
   8abd4:	80800215 	stw	r2,8(r16)
   8abd8:	2080020c 	andi	r2,r4,8
   8abdc:	10003626 	beq	r2,zero,8acb8 <__swbuf_r+0x11c>
   8abe0:	80c00417 	ldw	r3,16(r16)
   8abe4:	18003426 	beq	r3,zero,8acb8 <__swbuf_r+0x11c>
   8abe8:	2088000c 	andi	r2,r4,8192
   8abec:	9c403fcc 	andi	r17,r19,255
   8abf0:	10001a26 	beq	r2,zero,8ac5c <__swbuf_r+0xc0>
   8abf4:	80800017 	ldw	r2,0(r16)
   8abf8:	81000517 	ldw	r4,20(r16)
   8abfc:	10c7c83a 	sub	r3,r2,r3
   8ac00:	1900200e 	bge	r3,r4,8ac84 <__swbuf_r+0xe8>
   8ac04:	18c00044 	addi	r3,r3,1
   8ac08:	81000217 	ldw	r4,8(r16)
   8ac0c:	11400044 	addi	r5,r2,1
   8ac10:	81400015 	stw	r5,0(r16)
   8ac14:	213fffc4 	addi	r4,r4,-1
   8ac18:	81000215 	stw	r4,8(r16)
   8ac1c:	14c00005 	stb	r19,0(r2)
   8ac20:	80800517 	ldw	r2,20(r16)
   8ac24:	10c01e26 	beq	r2,r3,8aca0 <__swbuf_r+0x104>
   8ac28:	8080030b 	ldhu	r2,12(r16)
   8ac2c:	1080004c 	andi	r2,r2,1
   8ac30:	10000226 	beq	r2,zero,8ac3c <__swbuf_r+0xa0>
   8ac34:	00800284 	movi	r2,10
   8ac38:	88801926 	beq	r17,r2,8aca0 <__swbuf_r+0x104>
   8ac3c:	8805883a 	mov	r2,r17
   8ac40:	dfc00417 	ldw	ra,16(sp)
   8ac44:	dcc00317 	ldw	r19,12(sp)
   8ac48:	dc800217 	ldw	r18,8(sp)
   8ac4c:	dc400117 	ldw	r17,4(sp)
   8ac50:	dc000017 	ldw	r16,0(sp)
   8ac54:	dec00504 	addi	sp,sp,20
   8ac58:	f800283a 	ret
   8ac5c:	81401917 	ldw	r5,100(r16)
   8ac60:	00b7ffc4 	movi	r2,-8193
   8ac64:	21080014 	ori	r4,r4,8192
   8ac68:	2884703a 	and	r2,r5,r2
   8ac6c:	80801915 	stw	r2,100(r16)
   8ac70:	80800017 	ldw	r2,0(r16)
   8ac74:	8100030d 	sth	r4,12(r16)
   8ac78:	81000517 	ldw	r4,20(r16)
   8ac7c:	10c7c83a 	sub	r3,r2,r3
   8ac80:	193fe016 	blt	r3,r4,8ac04 <rx_descriptor_end+0xfff8aba4>
   8ac84:	800b883a 	mov	r5,r16
   8ac88:	9009883a 	mov	r4,r18
   8ac8c:	0081c700 	call	81c70 <_fflush_r>
   8ac90:	1000071e 	bne	r2,zero,8acb0 <__swbuf_r+0x114>
   8ac94:	80800017 	ldw	r2,0(r16)
   8ac98:	00c00044 	movi	r3,1
   8ac9c:	003fda06 	br	8ac08 <rx_descriptor_end+0xfff8aba8>
   8aca0:	800b883a 	mov	r5,r16
   8aca4:	9009883a 	mov	r4,r18
   8aca8:	0081c700 	call	81c70 <_fflush_r>
   8acac:	103fe326 	beq	r2,zero,8ac3c <rx_descriptor_end+0xfff8abdc>
   8acb0:	00bfffc4 	movi	r2,-1
   8acb4:	003fe206 	br	8ac40 <rx_descriptor_end+0xfff8abe0>
   8acb8:	800b883a 	mov	r5,r16
   8acbc:	9009883a 	mov	r4,r18
   8acc0:	00857c80 	call	857c8 <__swsetup_r>
   8acc4:	103ffa1e 	bne	r2,zero,8acb0 <rx_descriptor_end+0xfff8ac50>
   8acc8:	8100030b 	ldhu	r4,12(r16)
   8accc:	80c00417 	ldw	r3,16(r16)
   8acd0:	003fc506 	br	8abe8 <rx_descriptor_end+0xfff8ab88>
   8acd4:	008204c0 	call	8204c <__sinit>
   8acd8:	003fbc06 	br	8abcc <rx_descriptor_end+0xfff8ab6c>

0008acdc <__swbuf>:
   8acdc:	00800274 	movhi	r2,9
   8ace0:	10913d04 	addi	r2,r2,17652
   8ace4:	280d883a 	mov	r6,r5
   8ace8:	200b883a 	mov	r5,r4
   8acec:	11000017 	ldw	r4,0(r2)
   8acf0:	008ab9c1 	jmpi	8ab9c <__swbuf_r>

0008acf4 <_calloc_r>:
   8acf4:	298b383a 	mul	r5,r5,r6
   8acf8:	defffe04 	addi	sp,sp,-8
   8acfc:	dfc00115 	stw	ra,4(sp)
   8ad00:	dc000015 	stw	r16,0(sp)
   8ad04:	00826800 	call	82680 <_malloc_r>
   8ad08:	10002926 	beq	r2,zero,8adb0 <_calloc_r+0xbc>
   8ad0c:	11bfff17 	ldw	r6,-4(r2)
   8ad10:	1021883a 	mov	r16,r2
   8ad14:	00bfff04 	movi	r2,-4
   8ad18:	308c703a 	and	r6,r6,r2
   8ad1c:	00c00904 	movi	r3,36
   8ad20:	308d883a 	add	r6,r6,r2
   8ad24:	19801636 	bltu	r3,r6,8ad80 <_calloc_r+0x8c>
   8ad28:	008004c4 	movi	r2,19
   8ad2c:	11800b2e 	bgeu	r2,r6,8ad5c <_calloc_r+0x68>
   8ad30:	80000015 	stw	zero,0(r16)
   8ad34:	80000115 	stw	zero,4(r16)
   8ad38:	008006c4 	movi	r2,27
   8ad3c:	11801a2e 	bgeu	r2,r6,8ada8 <_calloc_r+0xb4>
   8ad40:	80000215 	stw	zero,8(r16)
   8ad44:	80000315 	stw	zero,12(r16)
   8ad48:	30c0151e 	bne	r6,r3,8ada0 <_calloc_r+0xac>
   8ad4c:	80000415 	stw	zero,16(r16)
   8ad50:	80800604 	addi	r2,r16,24
   8ad54:	80000515 	stw	zero,20(r16)
   8ad58:	00000106 	br	8ad60 <_calloc_r+0x6c>
   8ad5c:	8005883a 	mov	r2,r16
   8ad60:	10000015 	stw	zero,0(r2)
   8ad64:	10000115 	stw	zero,4(r2)
   8ad68:	10000215 	stw	zero,8(r2)
   8ad6c:	8005883a 	mov	r2,r16
   8ad70:	dfc00117 	ldw	ra,4(sp)
   8ad74:	dc000017 	ldw	r16,0(sp)
   8ad78:	dec00204 	addi	sp,sp,8
   8ad7c:	f800283a 	ret
   8ad80:	000b883a 	mov	r5,zero
   8ad84:	8009883a 	mov	r4,r16
   8ad88:	0082fe80 	call	82fe8 <memset>
   8ad8c:	8005883a 	mov	r2,r16
   8ad90:	dfc00117 	ldw	ra,4(sp)
   8ad94:	dc000017 	ldw	r16,0(sp)
   8ad98:	dec00204 	addi	sp,sp,8
   8ad9c:	f800283a 	ret
   8ada0:	80800404 	addi	r2,r16,16
   8ada4:	003fee06 	br	8ad60 <rx_descriptor_end+0xfff8ad00>
   8ada8:	80800204 	addi	r2,r16,8
   8adac:	003fec06 	br	8ad60 <rx_descriptor_end+0xfff8ad00>
   8adb0:	0005883a 	mov	r2,zero
   8adb4:	003fee06 	br	8ad70 <rx_descriptor_end+0xfff8ad10>

0008adb8 <__fputwc>:
   8adb8:	defff804 	addi	sp,sp,-32
   8adbc:	dcc00415 	stw	r19,16(sp)
   8adc0:	dc800315 	stw	r18,12(sp)
   8adc4:	dc000115 	stw	r16,4(sp)
   8adc8:	dfc00715 	stw	ra,28(sp)
   8adcc:	dd400615 	stw	r21,24(sp)
   8add0:	dd000515 	stw	r20,20(sp)
   8add4:	dc400215 	stw	r17,8(sp)
   8add8:	2027883a 	mov	r19,r4
   8addc:	2825883a 	mov	r18,r5
   8ade0:	3021883a 	mov	r16,r6
   8ade4:	00878400 	call	87840 <__locale_mb_cur_max>
   8ade8:	00c00044 	movi	r3,1
   8adec:	10c03e26 	beq	r2,r3,8aee8 <__fputwc+0x130>
   8adf0:	81c01704 	addi	r7,r16,92
   8adf4:	900d883a 	mov	r6,r18
   8adf8:	d80b883a 	mov	r5,sp
   8adfc:	9809883a 	mov	r4,r19
   8ae00:	008b0700 	call	8b070 <_wcrtomb_r>
   8ae04:	1029883a 	mov	r20,r2
   8ae08:	00bfffc4 	movi	r2,-1
   8ae0c:	a0802026 	beq	r20,r2,8ae90 <__fputwc+0xd8>
   8ae10:	d9400003 	ldbu	r5,0(sp)
   8ae14:	a0001c26 	beq	r20,zero,8ae88 <__fputwc+0xd0>
   8ae18:	0023883a 	mov	r17,zero
   8ae1c:	05400284 	movi	r21,10
   8ae20:	00000906 	br	8ae48 <__fputwc+0x90>
   8ae24:	80800017 	ldw	r2,0(r16)
   8ae28:	11400005 	stb	r5,0(r2)
   8ae2c:	80c00017 	ldw	r3,0(r16)
   8ae30:	18c00044 	addi	r3,r3,1
   8ae34:	80c00015 	stw	r3,0(r16)
   8ae38:	8c400044 	addi	r17,r17,1
   8ae3c:	dc45883a 	add	r2,sp,r17
   8ae40:	8d00112e 	bgeu	r17,r20,8ae88 <__fputwc+0xd0>
   8ae44:	11400003 	ldbu	r5,0(r2)
   8ae48:	80c00217 	ldw	r3,8(r16)
   8ae4c:	18ffffc4 	addi	r3,r3,-1
   8ae50:	80c00215 	stw	r3,8(r16)
   8ae54:	183ff30e 	bge	r3,zero,8ae24 <rx_descriptor_end+0xfff8adc4>
   8ae58:	80800617 	ldw	r2,24(r16)
   8ae5c:	18801916 	blt	r3,r2,8aec4 <__fputwc+0x10c>
   8ae60:	80800017 	ldw	r2,0(r16)
   8ae64:	11400005 	stb	r5,0(r2)
   8ae68:	80800017 	ldw	r2,0(r16)
   8ae6c:	10c00003 	ldbu	r3,0(r2)
   8ae70:	10800044 	addi	r2,r2,1
   8ae74:	1d402326 	beq	r3,r21,8af04 <__fputwc+0x14c>
   8ae78:	80800015 	stw	r2,0(r16)
   8ae7c:	8c400044 	addi	r17,r17,1
   8ae80:	dc45883a 	add	r2,sp,r17
   8ae84:	8d3fef36 	bltu	r17,r20,8ae44 <rx_descriptor_end+0xfff8ade4>
   8ae88:	9005883a 	mov	r2,r18
   8ae8c:	00000406 	br	8aea0 <__fputwc+0xe8>
   8ae90:	80c0030b 	ldhu	r3,12(r16)
   8ae94:	a005883a 	mov	r2,r20
   8ae98:	18c01014 	ori	r3,r3,64
   8ae9c:	80c0030d 	sth	r3,12(r16)
   8aea0:	dfc00717 	ldw	ra,28(sp)
   8aea4:	dd400617 	ldw	r21,24(sp)
   8aea8:	dd000517 	ldw	r20,20(sp)
   8aeac:	dcc00417 	ldw	r19,16(sp)
   8aeb0:	dc800317 	ldw	r18,12(sp)
   8aeb4:	dc400217 	ldw	r17,8(sp)
   8aeb8:	dc000117 	ldw	r16,4(sp)
   8aebc:	dec00804 	addi	sp,sp,32
   8aec0:	f800283a 	ret
   8aec4:	800d883a 	mov	r6,r16
   8aec8:	29403fcc 	andi	r5,r5,255
   8aecc:	9809883a 	mov	r4,r19
   8aed0:	008ab9c0 	call	8ab9c <__swbuf_r>
   8aed4:	10bfffe0 	cmpeqi	r2,r2,-1
   8aed8:	10803fcc 	andi	r2,r2,255
   8aedc:	103fd626 	beq	r2,zero,8ae38 <rx_descriptor_end+0xfff8add8>
   8aee0:	00bfffc4 	movi	r2,-1
   8aee4:	003fee06 	br	8aea0 <rx_descriptor_end+0xfff8ae40>
   8aee8:	90ffffc4 	addi	r3,r18,-1
   8aeec:	01003f84 	movi	r4,254
   8aef0:	20ffbf36 	bltu	r4,r3,8adf0 <rx_descriptor_end+0xfff8ad90>
   8aef4:	900b883a 	mov	r5,r18
   8aef8:	dc800005 	stb	r18,0(sp)
   8aefc:	1029883a 	mov	r20,r2
   8af00:	003fc506 	br	8ae18 <rx_descriptor_end+0xfff8adb8>
   8af04:	800d883a 	mov	r6,r16
   8af08:	a80b883a 	mov	r5,r21
   8af0c:	9809883a 	mov	r4,r19
   8af10:	008ab9c0 	call	8ab9c <__swbuf_r>
   8af14:	10bfffe0 	cmpeqi	r2,r2,-1
   8af18:	003fef06 	br	8aed8 <rx_descriptor_end+0xfff8ae78>

0008af1c <_fputwc_r>:
   8af1c:	3080030b 	ldhu	r2,12(r6)
   8af20:	10c8000c 	andi	r3,r2,8192
   8af24:	1800051e 	bne	r3,zero,8af3c <_fputwc_r+0x20>
   8af28:	30c01917 	ldw	r3,100(r6)
   8af2c:	10880014 	ori	r2,r2,8192
   8af30:	3080030d 	sth	r2,12(r6)
   8af34:	18880014 	ori	r2,r3,8192
   8af38:	30801915 	stw	r2,100(r6)
   8af3c:	008adb81 	jmpi	8adb8 <__fputwc>

0008af40 <fputwc>:
   8af40:	00800274 	movhi	r2,9
   8af44:	defffc04 	addi	sp,sp,-16
   8af48:	10913d04 	addi	r2,r2,17652
   8af4c:	dc000115 	stw	r16,4(sp)
   8af50:	14000017 	ldw	r16,0(r2)
   8af54:	dc400215 	stw	r17,8(sp)
   8af58:	dfc00315 	stw	ra,12(sp)
   8af5c:	2023883a 	mov	r17,r4
   8af60:	80000226 	beq	r16,zero,8af6c <fputwc+0x2c>
   8af64:	80800e17 	ldw	r2,56(r16)
   8af68:	10001026 	beq	r2,zero,8afac <fputwc+0x6c>
   8af6c:	2880030b 	ldhu	r2,12(r5)
   8af70:	10c8000c 	andi	r3,r2,8192
   8af74:	1800051e 	bne	r3,zero,8af8c <fputwc+0x4c>
   8af78:	28c01917 	ldw	r3,100(r5)
   8af7c:	10880014 	ori	r2,r2,8192
   8af80:	2880030d 	sth	r2,12(r5)
   8af84:	18880014 	ori	r2,r3,8192
   8af88:	28801915 	stw	r2,100(r5)
   8af8c:	280d883a 	mov	r6,r5
   8af90:	8009883a 	mov	r4,r16
   8af94:	880b883a 	mov	r5,r17
   8af98:	dfc00317 	ldw	ra,12(sp)
   8af9c:	dc400217 	ldw	r17,8(sp)
   8afa0:	dc000117 	ldw	r16,4(sp)
   8afa4:	dec00404 	addi	sp,sp,16
   8afa8:	008adb81 	jmpi	8adb8 <__fputwc>
   8afac:	8009883a 	mov	r4,r16
   8afb0:	d9400015 	stw	r5,0(sp)
   8afb4:	008204c0 	call	8204c <__sinit>
   8afb8:	d9400017 	ldw	r5,0(sp)
   8afbc:	003feb06 	br	8af6c <rx_descriptor_end+0xfff8af0c>

0008afc0 <_fstat_r>:
   8afc0:	defffd04 	addi	sp,sp,-12
   8afc4:	2805883a 	mov	r2,r5
   8afc8:	dc000015 	stw	r16,0(sp)
   8afcc:	04000274 	movhi	r16,9
   8afd0:	dc400115 	stw	r17,4(sp)
   8afd4:	84193504 	addi	r16,r16,25812
   8afd8:	2023883a 	mov	r17,r4
   8afdc:	300b883a 	mov	r5,r6
   8afe0:	1009883a 	mov	r4,r2
   8afe4:	dfc00215 	stw	ra,8(sp)
   8afe8:	80000015 	stw	zero,0(r16)
   8afec:	008e6e00 	call	8e6e0 <fstat>
   8aff0:	00ffffc4 	movi	r3,-1
   8aff4:	10c00526 	beq	r2,r3,8b00c <_fstat_r+0x4c>
   8aff8:	dfc00217 	ldw	ra,8(sp)
   8affc:	dc400117 	ldw	r17,4(sp)
   8b000:	dc000017 	ldw	r16,0(sp)
   8b004:	dec00304 	addi	sp,sp,12
   8b008:	f800283a 	ret
   8b00c:	80c00017 	ldw	r3,0(r16)
   8b010:	183ff926 	beq	r3,zero,8aff8 <rx_descriptor_end+0xfff8af98>
   8b014:	88c00015 	stw	r3,0(r17)
   8b018:	003ff706 	br	8aff8 <rx_descriptor_end+0xfff8af98>

0008b01c <_isatty_r>:
   8b01c:	defffd04 	addi	sp,sp,-12
   8b020:	dc000015 	stw	r16,0(sp)
   8b024:	04000274 	movhi	r16,9
   8b028:	dc400115 	stw	r17,4(sp)
   8b02c:	84193504 	addi	r16,r16,25812
   8b030:	2023883a 	mov	r17,r4
   8b034:	2809883a 	mov	r4,r5
   8b038:	dfc00215 	stw	ra,8(sp)
   8b03c:	80000015 	stw	zero,0(r16)
   8b040:	008e7cc0 	call	8e7cc <isatty>
   8b044:	00ffffc4 	movi	r3,-1
   8b048:	10c00526 	beq	r2,r3,8b060 <_isatty_r+0x44>
   8b04c:	dfc00217 	ldw	ra,8(sp)
   8b050:	dc400117 	ldw	r17,4(sp)
   8b054:	dc000017 	ldw	r16,0(sp)
   8b058:	dec00304 	addi	sp,sp,12
   8b05c:	f800283a 	ret
   8b060:	80c00017 	ldw	r3,0(r16)
   8b064:	183ff926 	beq	r3,zero,8b04c <rx_descriptor_end+0xfff8afec>
   8b068:	88c00015 	stw	r3,0(r17)
   8b06c:	003ff706 	br	8b04c <rx_descriptor_end+0xfff8afec>

0008b070 <_wcrtomb_r>:
   8b070:	defff604 	addi	sp,sp,-40
   8b074:	00800274 	movhi	r2,9
   8b078:	dc800815 	stw	r18,32(sp)
   8b07c:	dc400715 	stw	r17,28(sp)
   8b080:	dc000615 	stw	r16,24(sp)
   8b084:	10914104 	addi	r2,r2,17668
   8b088:	dfc00915 	stw	ra,36(sp)
   8b08c:	2021883a 	mov	r16,r4
   8b090:	3823883a 	mov	r17,r7
   8b094:	14800017 	ldw	r18,0(r2)
   8b098:	28001426 	beq	r5,zero,8b0ec <_wcrtomb_r+0x7c>
   8b09c:	d9400415 	stw	r5,16(sp)
   8b0a0:	d9800515 	stw	r6,20(sp)
   8b0a4:	00878340 	call	87834 <__locale_charset>
   8b0a8:	d9800517 	ldw	r6,20(sp)
   8b0ac:	d9400417 	ldw	r5,16(sp)
   8b0b0:	100f883a 	mov	r7,r2
   8b0b4:	dc400015 	stw	r17,0(sp)
   8b0b8:	8009883a 	mov	r4,r16
   8b0bc:	903ee83a 	callr	r18
   8b0c0:	00ffffc4 	movi	r3,-1
   8b0c4:	10c0031e 	bne	r2,r3,8b0d4 <_wcrtomb_r+0x64>
   8b0c8:	88000015 	stw	zero,0(r17)
   8b0cc:	00c02284 	movi	r3,138
   8b0d0:	80c00015 	stw	r3,0(r16)
   8b0d4:	dfc00917 	ldw	ra,36(sp)
   8b0d8:	dc800817 	ldw	r18,32(sp)
   8b0dc:	dc400717 	ldw	r17,28(sp)
   8b0e0:	dc000617 	ldw	r16,24(sp)
   8b0e4:	dec00a04 	addi	sp,sp,40
   8b0e8:	f800283a 	ret
   8b0ec:	00878340 	call	87834 <__locale_charset>
   8b0f0:	100f883a 	mov	r7,r2
   8b0f4:	dc400015 	stw	r17,0(sp)
   8b0f8:	000d883a 	mov	r6,zero
   8b0fc:	d9400104 	addi	r5,sp,4
   8b100:	8009883a 	mov	r4,r16
   8b104:	903ee83a 	callr	r18
   8b108:	003fed06 	br	8b0c0 <rx_descriptor_end+0xfff8b060>

0008b10c <wcrtomb>:
   8b10c:	defff604 	addi	sp,sp,-40
   8b110:	00800274 	movhi	r2,9
   8b114:	dc800615 	stw	r18,24(sp)
   8b118:	dc400515 	stw	r17,20(sp)
   8b11c:	10913d04 	addi	r2,r2,17652
   8b120:	dfc00915 	stw	ra,36(sp)
   8b124:	dd000815 	stw	r20,32(sp)
   8b128:	dcc00715 	stw	r19,28(sp)
   8b12c:	dc000415 	stw	r16,16(sp)
   8b130:	3025883a 	mov	r18,r6
   8b134:	14400017 	ldw	r17,0(r2)
   8b138:	20001926 	beq	r4,zero,8b1a0 <wcrtomb+0x94>
   8b13c:	00800274 	movhi	r2,9
   8b140:	10914104 	addi	r2,r2,17668
   8b144:	15000017 	ldw	r20,0(r2)
   8b148:	2021883a 	mov	r16,r4
   8b14c:	2827883a 	mov	r19,r5
   8b150:	00878340 	call	87834 <__locale_charset>
   8b154:	100f883a 	mov	r7,r2
   8b158:	dc800015 	stw	r18,0(sp)
   8b15c:	980d883a 	mov	r6,r19
   8b160:	800b883a 	mov	r5,r16
   8b164:	8809883a 	mov	r4,r17
   8b168:	a03ee83a 	callr	r20
   8b16c:	00ffffc4 	movi	r3,-1
   8b170:	10c0031e 	bne	r2,r3,8b180 <wcrtomb+0x74>
   8b174:	90000015 	stw	zero,0(r18)
   8b178:	00c02284 	movi	r3,138
   8b17c:	88c00015 	stw	r3,0(r17)
   8b180:	dfc00917 	ldw	ra,36(sp)
   8b184:	dd000817 	ldw	r20,32(sp)
   8b188:	dcc00717 	ldw	r19,28(sp)
   8b18c:	dc800617 	ldw	r18,24(sp)
   8b190:	dc400517 	ldw	r17,20(sp)
   8b194:	dc000417 	ldw	r16,16(sp)
   8b198:	dec00a04 	addi	sp,sp,40
   8b19c:	f800283a 	ret
   8b1a0:	00800274 	movhi	r2,9
   8b1a4:	10914104 	addi	r2,r2,17668
   8b1a8:	14000017 	ldw	r16,0(r2)
   8b1ac:	00878340 	call	87834 <__locale_charset>
   8b1b0:	100f883a 	mov	r7,r2
   8b1b4:	dc800015 	stw	r18,0(sp)
   8b1b8:	000d883a 	mov	r6,zero
   8b1bc:	d9400104 	addi	r5,sp,4
   8b1c0:	8809883a 	mov	r4,r17
   8b1c4:	803ee83a 	callr	r16
   8b1c8:	003fe806 	br	8b16c <rx_descriptor_end+0xfff8b10c>

0008b1cc <__ascii_wctomb>:
   8b1cc:	28000526 	beq	r5,zero,8b1e4 <__ascii_wctomb+0x18>
   8b1d0:	00803fc4 	movi	r2,255
   8b1d4:	11800536 	bltu	r2,r6,8b1ec <__ascii_wctomb+0x20>
   8b1d8:	29800005 	stb	r6,0(r5)
   8b1dc:	00800044 	movi	r2,1
   8b1e0:	f800283a 	ret
   8b1e4:	0005883a 	mov	r2,zero
   8b1e8:	f800283a 	ret
   8b1ec:	00802284 	movi	r2,138
   8b1f0:	20800015 	stw	r2,0(r4)
   8b1f4:	00bfffc4 	movi	r2,-1
   8b1f8:	f800283a 	ret

0008b1fc <_wctomb_r>:
   8b1fc:	00800274 	movhi	r2,9
   8b200:	defff904 	addi	sp,sp,-28
   8b204:	10914104 	addi	r2,r2,17668
   8b208:	dfc00615 	stw	ra,24(sp)
   8b20c:	dc400515 	stw	r17,20(sp)
   8b210:	dc000415 	stw	r16,16(sp)
   8b214:	3823883a 	mov	r17,r7
   8b218:	14000017 	ldw	r16,0(r2)
   8b21c:	d9000115 	stw	r4,4(sp)
   8b220:	d9400215 	stw	r5,8(sp)
   8b224:	d9800315 	stw	r6,12(sp)
   8b228:	00878340 	call	87834 <__locale_charset>
   8b22c:	d9800317 	ldw	r6,12(sp)
   8b230:	d9400217 	ldw	r5,8(sp)
   8b234:	d9000117 	ldw	r4,4(sp)
   8b238:	100f883a 	mov	r7,r2
   8b23c:	dc400015 	stw	r17,0(sp)
   8b240:	803ee83a 	callr	r16
   8b244:	dfc00617 	ldw	ra,24(sp)
   8b248:	dc400517 	ldw	r17,20(sp)
   8b24c:	dc000417 	ldw	r16,16(sp)
   8b250:	dec00704 	addi	sp,sp,28
   8b254:	f800283a 	ret

0008b258 <__udivdi3>:
   8b258:	defff504 	addi	sp,sp,-44
   8b25c:	dcc00415 	stw	r19,16(sp)
   8b260:	dc000115 	stw	r16,4(sp)
   8b264:	dfc00a15 	stw	ra,40(sp)
   8b268:	df000915 	stw	fp,36(sp)
   8b26c:	ddc00815 	stw	r23,32(sp)
   8b270:	dd800715 	stw	r22,28(sp)
   8b274:	dd400615 	stw	r21,24(sp)
   8b278:	dd000515 	stw	r20,20(sp)
   8b27c:	dc800315 	stw	r18,12(sp)
   8b280:	dc400215 	stw	r17,8(sp)
   8b284:	2027883a 	mov	r19,r4
   8b288:	2821883a 	mov	r16,r5
   8b28c:	3800411e 	bne	r7,zero,8b394 <__udivdi3+0x13c>
   8b290:	3023883a 	mov	r17,r6
   8b294:	2025883a 	mov	r18,r4
   8b298:	2980522e 	bgeu	r5,r6,8b3e4 <__udivdi3+0x18c>
   8b29c:	00bfffd4 	movui	r2,65535
   8b2a0:	282d883a 	mov	r22,r5
   8b2a4:	1180a836 	bltu	r2,r6,8b548 <__udivdi3+0x2f0>
   8b2a8:	00803fc4 	movi	r2,255
   8b2ac:	1185803a 	cmpltu	r2,r2,r6
   8b2b0:	100490fa 	slli	r2,r2,3
   8b2b4:	3086d83a 	srl	r3,r6,r2
   8b2b8:	01000274 	movhi	r4,9
   8b2bc:	21092504 	addi	r4,r4,9364
   8b2c0:	20c7883a 	add	r3,r4,r3
   8b2c4:	18c00003 	ldbu	r3,0(r3)
   8b2c8:	1885883a 	add	r2,r3,r2
   8b2cc:	00c00804 	movi	r3,32
   8b2d0:	1887c83a 	sub	r3,r3,r2
   8b2d4:	18000526 	beq	r3,zero,8b2ec <__udivdi3+0x94>
   8b2d8:	80e0983a 	sll	r16,r16,r3
   8b2dc:	9884d83a 	srl	r2,r19,r2
   8b2e0:	30e2983a 	sll	r17,r6,r3
   8b2e4:	98e4983a 	sll	r18,r19,r3
   8b2e8:	142cb03a 	or	r22,r2,r16
   8b2ec:	882ad43a 	srli	r21,r17,16
   8b2f0:	b009883a 	mov	r4,r22
   8b2f4:	8d3fffcc 	andi	r20,r17,65535
   8b2f8:	a80b883a 	mov	r5,r21
   8b2fc:	008be640 	call	8be64 <__umodsi3>
   8b300:	b009883a 	mov	r4,r22
   8b304:	a80b883a 	mov	r5,r21
   8b308:	1027883a 	mov	r19,r2
   8b30c:	008be000 	call	8be00 <__udivsi3>
   8b310:	102d883a 	mov	r22,r2
   8b314:	9826943a 	slli	r19,r19,16
   8b318:	9004d43a 	srli	r2,r18,16
   8b31c:	a5a1383a 	mul	r16,r20,r22
   8b320:	14c4b03a 	or	r2,r2,r19
   8b324:	1400052e 	bgeu	r2,r16,8b33c <__udivdi3+0xe4>
   8b328:	1445883a 	add	r2,r2,r17
   8b32c:	b0ffffc4 	addi	r3,r22,-1
   8b330:	14400136 	bltu	r2,r17,8b338 <__udivdi3+0xe0>
   8b334:	14012336 	bltu	r2,r16,8b7c4 <__udivdi3+0x56c>
   8b338:	182d883a 	mov	r22,r3
   8b33c:	1421c83a 	sub	r16,r2,r16
   8b340:	a80b883a 	mov	r5,r21
   8b344:	8009883a 	mov	r4,r16
   8b348:	008be640 	call	8be64 <__umodsi3>
   8b34c:	1027883a 	mov	r19,r2
   8b350:	a80b883a 	mov	r5,r21
   8b354:	8009883a 	mov	r4,r16
   8b358:	008be000 	call	8be00 <__udivsi3>
   8b35c:	9826943a 	slli	r19,r19,16
   8b360:	a0a9383a 	mul	r20,r20,r2
   8b364:	94bfffcc 	andi	r18,r18,65535
   8b368:	94e4b03a 	or	r18,r18,r19
   8b36c:	9500052e 	bgeu	r18,r20,8b384 <__udivdi3+0x12c>
   8b370:	8ca5883a 	add	r18,r17,r18
   8b374:	10ffffc4 	addi	r3,r2,-1
   8b378:	9440f136 	bltu	r18,r17,8b740 <__udivdi3+0x4e8>
   8b37c:	9500f02e 	bgeu	r18,r20,8b740 <__udivdi3+0x4e8>
   8b380:	10bfff84 	addi	r2,r2,-2
   8b384:	b00c943a 	slli	r6,r22,16
   8b388:	0007883a 	mov	r3,zero
   8b38c:	3084b03a 	or	r2,r6,r2
   8b390:	00005906 	br	8b4f8 <__udivdi3+0x2a0>
   8b394:	29c05636 	bltu	r5,r7,8b4f0 <__udivdi3+0x298>
   8b398:	00bfffd4 	movui	r2,65535
   8b39c:	11c0622e 	bgeu	r2,r7,8b528 <__udivdi3+0x2d0>
   8b3a0:	00804034 	movhi	r2,256
   8b3a4:	10bfffc4 	addi	r2,r2,-1
   8b3a8:	11c0ee36 	bltu	r2,r7,8b764 <__udivdi3+0x50c>
   8b3ac:	00800404 	movi	r2,16
   8b3b0:	3886d83a 	srl	r3,r7,r2
   8b3b4:	01000274 	movhi	r4,9
   8b3b8:	21092504 	addi	r4,r4,9364
   8b3bc:	20c7883a 	add	r3,r4,r3
   8b3c0:	18c00003 	ldbu	r3,0(r3)
   8b3c4:	05400804 	movi	r21,32
   8b3c8:	1885883a 	add	r2,r3,r2
   8b3cc:	a8abc83a 	sub	r21,r21,r2
   8b3d0:	a800621e 	bne	r21,zero,8b55c <__udivdi3+0x304>
   8b3d4:	3c00e936 	bltu	r7,r16,8b77c <__udivdi3+0x524>
   8b3d8:	9985403a 	cmpgeu	r2,r19,r6
   8b3dc:	0007883a 	mov	r3,zero
   8b3e0:	00004506 	br	8b4f8 <__udivdi3+0x2a0>
   8b3e4:	3000041e 	bne	r6,zero,8b3f8 <__udivdi3+0x1a0>
   8b3e8:	000b883a 	mov	r5,zero
   8b3ec:	01000044 	movi	r4,1
   8b3f0:	008be000 	call	8be00 <__udivsi3>
   8b3f4:	1023883a 	mov	r17,r2
   8b3f8:	00bfffd4 	movui	r2,65535
   8b3fc:	14404e2e 	bgeu	r2,r17,8b538 <__udivdi3+0x2e0>
   8b400:	00804034 	movhi	r2,256
   8b404:	10bfffc4 	addi	r2,r2,-1
   8b408:	1440d836 	bltu	r2,r17,8b76c <__udivdi3+0x514>
   8b40c:	00800404 	movi	r2,16
   8b410:	8886d83a 	srl	r3,r17,r2
   8b414:	01000274 	movhi	r4,9
   8b418:	21092504 	addi	r4,r4,9364
   8b41c:	20c7883a 	add	r3,r4,r3
   8b420:	18c00003 	ldbu	r3,0(r3)
   8b424:	1885883a 	add	r2,r3,r2
   8b428:	00c00804 	movi	r3,32
   8b42c:	1887c83a 	sub	r3,r3,r2
   8b430:	18008f1e 	bne	r3,zero,8b670 <__udivdi3+0x418>
   8b434:	882ad43a 	srli	r21,r17,16
   8b438:	8461c83a 	sub	r16,r16,r17
   8b43c:	8d3fffcc 	andi	r20,r17,65535
   8b440:	00c00044 	movi	r3,1
   8b444:	8009883a 	mov	r4,r16
   8b448:	a80b883a 	mov	r5,r21
   8b44c:	d8c00015 	stw	r3,0(sp)
   8b450:	008be640 	call	8be64 <__umodsi3>
   8b454:	8009883a 	mov	r4,r16
   8b458:	a80b883a 	mov	r5,r21
   8b45c:	1027883a 	mov	r19,r2
   8b460:	008be000 	call	8be00 <__udivsi3>
   8b464:	9826943a 	slli	r19,r19,16
   8b468:	9008d43a 	srli	r4,r18,16
   8b46c:	1521383a 	mul	r16,r2,r20
   8b470:	102d883a 	mov	r22,r2
   8b474:	24c8b03a 	or	r4,r4,r19
   8b478:	d8c00017 	ldw	r3,0(sp)
   8b47c:	2400052e 	bgeu	r4,r16,8b494 <__udivdi3+0x23c>
   8b480:	2449883a 	add	r4,r4,r17
   8b484:	b0bfffc4 	addi	r2,r22,-1
   8b488:	24400136 	bltu	r4,r17,8b490 <__udivdi3+0x238>
   8b48c:	2400ca36 	bltu	r4,r16,8b7b8 <__udivdi3+0x560>
   8b490:	102d883a 	mov	r22,r2
   8b494:	2421c83a 	sub	r16,r4,r16
   8b498:	a80b883a 	mov	r5,r21
   8b49c:	8009883a 	mov	r4,r16
   8b4a0:	d8c00015 	stw	r3,0(sp)
   8b4a4:	008be640 	call	8be64 <__umodsi3>
   8b4a8:	1027883a 	mov	r19,r2
   8b4ac:	a80b883a 	mov	r5,r21
   8b4b0:	8009883a 	mov	r4,r16
   8b4b4:	008be000 	call	8be00 <__udivsi3>
   8b4b8:	9826943a 	slli	r19,r19,16
   8b4bc:	1529383a 	mul	r20,r2,r20
   8b4c0:	94bfffcc 	andi	r18,r18,65535
   8b4c4:	94e4b03a 	or	r18,r18,r19
   8b4c8:	d8c00017 	ldw	r3,0(sp)
   8b4cc:	9500052e 	bgeu	r18,r20,8b4e4 <__udivdi3+0x28c>
   8b4d0:	8ca5883a 	add	r18,r17,r18
   8b4d4:	113fffc4 	addi	r4,r2,-1
   8b4d8:	94409736 	bltu	r18,r17,8b738 <__udivdi3+0x4e0>
   8b4dc:	9500962e 	bgeu	r18,r20,8b738 <__udivdi3+0x4e0>
   8b4e0:	10bfff84 	addi	r2,r2,-2
   8b4e4:	b00c943a 	slli	r6,r22,16
   8b4e8:	3084b03a 	or	r2,r6,r2
   8b4ec:	00000206 	br	8b4f8 <__udivdi3+0x2a0>
   8b4f0:	0007883a 	mov	r3,zero
   8b4f4:	0005883a 	mov	r2,zero
   8b4f8:	dfc00a17 	ldw	ra,40(sp)
   8b4fc:	df000917 	ldw	fp,36(sp)
   8b500:	ddc00817 	ldw	r23,32(sp)
   8b504:	dd800717 	ldw	r22,28(sp)
   8b508:	dd400617 	ldw	r21,24(sp)
   8b50c:	dd000517 	ldw	r20,20(sp)
   8b510:	dcc00417 	ldw	r19,16(sp)
   8b514:	dc800317 	ldw	r18,12(sp)
   8b518:	dc400217 	ldw	r17,8(sp)
   8b51c:	dc000117 	ldw	r16,4(sp)
   8b520:	dec00b04 	addi	sp,sp,44
   8b524:	f800283a 	ret
   8b528:	00803fc4 	movi	r2,255
   8b52c:	11c5803a 	cmpltu	r2,r2,r7
   8b530:	100490fa 	slli	r2,r2,3
   8b534:	003f9e06 	br	8b3b0 <rx_descriptor_end+0xfff8b350>
   8b538:	00803fc4 	movi	r2,255
   8b53c:	1445803a 	cmpltu	r2,r2,r17
   8b540:	100490fa 	slli	r2,r2,3
   8b544:	003fb206 	br	8b410 <rx_descriptor_end+0xfff8b3b0>
   8b548:	00804034 	movhi	r2,256
   8b54c:	10bfffc4 	addi	r2,r2,-1
   8b550:	11808836 	bltu	r2,r6,8b774 <__udivdi3+0x51c>
   8b554:	00800404 	movi	r2,16
   8b558:	003f5606 	br	8b2b4 <rx_descriptor_end+0xfff8b254>
   8b55c:	30aed83a 	srl	r23,r6,r2
   8b560:	3d4e983a 	sll	r7,r7,r21
   8b564:	80acd83a 	srl	r22,r16,r2
   8b568:	9884d83a 	srl	r2,r19,r2
   8b56c:	3deeb03a 	or	r23,r7,r23
   8b570:	b824d43a 	srli	r18,r23,16
   8b574:	8560983a 	sll	r16,r16,r21
   8b578:	b009883a 	mov	r4,r22
   8b57c:	900b883a 	mov	r5,r18
   8b580:	3568983a 	sll	r20,r6,r21
   8b584:	1420b03a 	or	r16,r2,r16
   8b588:	008be640 	call	8be64 <__umodsi3>
   8b58c:	b009883a 	mov	r4,r22
   8b590:	900b883a 	mov	r5,r18
   8b594:	1023883a 	mov	r17,r2
   8b598:	008be000 	call	8be00 <__udivsi3>
   8b59c:	8808943a 	slli	r4,r17,16
   8b5a0:	bf3fffcc 	andi	fp,r23,65535
   8b5a4:	8006d43a 	srli	r3,r16,16
   8b5a8:	e0a3383a 	mul	r17,fp,r2
   8b5ac:	100d883a 	mov	r6,r2
   8b5b0:	1906b03a 	or	r3,r3,r4
   8b5b4:	1c40042e 	bgeu	r3,r17,8b5c8 <__udivdi3+0x370>
   8b5b8:	1dc7883a 	add	r3,r3,r23
   8b5bc:	10bfffc4 	addi	r2,r2,-1
   8b5c0:	1dc0752e 	bgeu	r3,r23,8b798 <__udivdi3+0x540>
   8b5c4:	100d883a 	mov	r6,r2
   8b5c8:	1c63c83a 	sub	r17,r3,r17
   8b5cc:	900b883a 	mov	r5,r18
   8b5d0:	8809883a 	mov	r4,r17
   8b5d4:	d9800015 	stw	r6,0(sp)
   8b5d8:	008be640 	call	8be64 <__umodsi3>
   8b5dc:	102d883a 	mov	r22,r2
   8b5e0:	8809883a 	mov	r4,r17
   8b5e4:	900b883a 	mov	r5,r18
   8b5e8:	008be000 	call	8be00 <__udivsi3>
   8b5ec:	b02c943a 	slli	r22,r22,16
   8b5f0:	e089383a 	mul	r4,fp,r2
   8b5f4:	843fffcc 	andi	r16,r16,65535
   8b5f8:	85a0b03a 	or	r16,r16,r22
   8b5fc:	d9800017 	ldw	r6,0(sp)
   8b600:	8100042e 	bgeu	r16,r4,8b614 <__udivdi3+0x3bc>
   8b604:	85e1883a 	add	r16,r16,r23
   8b608:	10ffffc4 	addi	r3,r2,-1
   8b60c:	85c05e2e 	bgeu	r16,r23,8b788 <__udivdi3+0x530>
   8b610:	1805883a 	mov	r2,r3
   8b614:	300c943a 	slli	r6,r6,16
   8b618:	a17fffcc 	andi	r5,r20,65535
   8b61c:	a028d43a 	srli	r20,r20,16
   8b620:	3084b03a 	or	r2,r6,r2
   8b624:	10ffffcc 	andi	r3,r2,65535
   8b628:	100cd43a 	srli	r6,r2,16
   8b62c:	194f383a 	mul	r7,r3,r5
   8b630:	1d07383a 	mul	r3,r3,r20
   8b634:	314b383a 	mul	r5,r6,r5
   8b638:	3810d43a 	srli	r8,r7,16
   8b63c:	8121c83a 	sub	r16,r16,r4
   8b640:	1947883a 	add	r3,r3,r5
   8b644:	40c7883a 	add	r3,r8,r3
   8b648:	350d383a 	mul	r6,r6,r20
   8b64c:	1940022e 	bgeu	r3,r5,8b658 <__udivdi3+0x400>
   8b650:	01000074 	movhi	r4,1
   8b654:	310d883a 	add	r6,r6,r4
   8b658:	1828d43a 	srli	r20,r3,16
   8b65c:	a18d883a 	add	r6,r20,r6
   8b660:	81803e36 	bltu	r16,r6,8b75c <__udivdi3+0x504>
   8b664:	81803826 	beq	r16,r6,8b748 <__udivdi3+0x4f0>
   8b668:	0007883a 	mov	r3,zero
   8b66c:	003fa206 	br	8b4f8 <rx_descriptor_end+0xfff8b498>
   8b670:	88e2983a 	sll	r17,r17,r3
   8b674:	80a8d83a 	srl	r20,r16,r2
   8b678:	80e0983a 	sll	r16,r16,r3
   8b67c:	882ad43a 	srli	r21,r17,16
   8b680:	9884d83a 	srl	r2,r19,r2
   8b684:	a009883a 	mov	r4,r20
   8b688:	a80b883a 	mov	r5,r21
   8b68c:	142eb03a 	or	r23,r2,r16
   8b690:	98e4983a 	sll	r18,r19,r3
   8b694:	008be640 	call	8be64 <__umodsi3>
   8b698:	a009883a 	mov	r4,r20
   8b69c:	a80b883a 	mov	r5,r21
   8b6a0:	1021883a 	mov	r16,r2
   8b6a4:	008be000 	call	8be00 <__udivsi3>
   8b6a8:	1039883a 	mov	fp,r2
   8b6ac:	8d3fffcc 	andi	r20,r17,65535
   8b6b0:	8020943a 	slli	r16,r16,16
   8b6b4:	b804d43a 	srli	r2,r23,16
   8b6b8:	a72d383a 	mul	r22,r20,fp
   8b6bc:	1404b03a 	or	r2,r2,r16
   8b6c0:	1580062e 	bgeu	r2,r22,8b6dc <__udivdi3+0x484>
   8b6c4:	1445883a 	add	r2,r2,r17
   8b6c8:	e0ffffc4 	addi	r3,fp,-1
   8b6cc:	14403836 	bltu	r2,r17,8b7b0 <__udivdi3+0x558>
   8b6d0:	1580372e 	bgeu	r2,r22,8b7b0 <__udivdi3+0x558>
   8b6d4:	e73fff84 	addi	fp,fp,-2
   8b6d8:	1445883a 	add	r2,r2,r17
   8b6dc:	15adc83a 	sub	r22,r2,r22
   8b6e0:	a80b883a 	mov	r5,r21
   8b6e4:	b009883a 	mov	r4,r22
   8b6e8:	008be640 	call	8be64 <__umodsi3>
   8b6ec:	1027883a 	mov	r19,r2
   8b6f0:	b009883a 	mov	r4,r22
   8b6f4:	a80b883a 	mov	r5,r21
   8b6f8:	008be000 	call	8be00 <__udivsi3>
   8b6fc:	9826943a 	slli	r19,r19,16
   8b700:	a0a1383a 	mul	r16,r20,r2
   8b704:	b93fffcc 	andi	r4,r23,65535
   8b708:	24c8b03a 	or	r4,r4,r19
   8b70c:	2400062e 	bgeu	r4,r16,8b728 <__udivdi3+0x4d0>
   8b710:	2449883a 	add	r4,r4,r17
   8b714:	10ffffc4 	addi	r3,r2,-1
   8b718:	24402336 	bltu	r4,r17,8b7a8 <__udivdi3+0x550>
   8b71c:	2400222e 	bgeu	r4,r16,8b7a8 <__udivdi3+0x550>
   8b720:	10bfff84 	addi	r2,r2,-2
   8b724:	2449883a 	add	r4,r4,r17
   8b728:	e038943a 	slli	fp,fp,16
   8b72c:	2421c83a 	sub	r16,r4,r16
   8b730:	e086b03a 	or	r3,fp,r2
   8b734:	003f4306 	br	8b444 <rx_descriptor_end+0xfff8b3e4>
   8b738:	2005883a 	mov	r2,r4
   8b73c:	003f6906 	br	8b4e4 <rx_descriptor_end+0xfff8b484>
   8b740:	1805883a 	mov	r2,r3
   8b744:	003f0f06 	br	8b384 <rx_descriptor_end+0xfff8b324>
   8b748:	1806943a 	slli	r3,r3,16
   8b74c:	9d66983a 	sll	r19,r19,r21
   8b750:	39ffffcc 	andi	r7,r7,65535
   8b754:	19c7883a 	add	r3,r3,r7
   8b758:	98ffc32e 	bgeu	r19,r3,8b668 <rx_descriptor_end+0xfff8b608>
   8b75c:	10bfffc4 	addi	r2,r2,-1
   8b760:	003fc106 	br	8b668 <rx_descriptor_end+0xfff8b608>
   8b764:	00800604 	movi	r2,24
   8b768:	003f1106 	br	8b3b0 <rx_descriptor_end+0xfff8b350>
   8b76c:	00800604 	movi	r2,24
   8b770:	003f2706 	br	8b410 <rx_descriptor_end+0xfff8b3b0>
   8b774:	00800604 	movi	r2,24
   8b778:	003ece06 	br	8b2b4 <rx_descriptor_end+0xfff8b254>
   8b77c:	0007883a 	mov	r3,zero
   8b780:	00800044 	movi	r2,1
   8b784:	003f5c06 	br	8b4f8 <rx_descriptor_end+0xfff8b498>
   8b788:	813fa12e 	bgeu	r16,r4,8b610 <rx_descriptor_end+0xfff8b5b0>
   8b78c:	10bfff84 	addi	r2,r2,-2
   8b790:	85e1883a 	add	r16,r16,r23
   8b794:	003f9f06 	br	8b614 <rx_descriptor_end+0xfff8b5b4>
   8b798:	1c7f8a2e 	bgeu	r3,r17,8b5c4 <rx_descriptor_end+0xfff8b564>
   8b79c:	31bfff84 	addi	r6,r6,-2
   8b7a0:	1dc7883a 	add	r3,r3,r23
   8b7a4:	003f8806 	br	8b5c8 <rx_descriptor_end+0xfff8b568>
   8b7a8:	1805883a 	mov	r2,r3
   8b7ac:	003fde06 	br	8b728 <rx_descriptor_end+0xfff8b6c8>
   8b7b0:	1839883a 	mov	fp,r3
   8b7b4:	003fc906 	br	8b6dc <rx_descriptor_end+0xfff8b67c>
   8b7b8:	b5bfff84 	addi	r22,r22,-2
   8b7bc:	2449883a 	add	r4,r4,r17
   8b7c0:	003f3406 	br	8b494 <rx_descriptor_end+0xfff8b434>
   8b7c4:	b5bfff84 	addi	r22,r22,-2
   8b7c8:	1445883a 	add	r2,r2,r17
   8b7cc:	003edb06 	br	8b33c <rx_descriptor_end+0xfff8b2dc>

0008b7d0 <__umoddi3>:
   8b7d0:	defff404 	addi	sp,sp,-48
   8b7d4:	df000a15 	stw	fp,40(sp)
   8b7d8:	dc400315 	stw	r17,12(sp)
   8b7dc:	dc000215 	stw	r16,8(sp)
   8b7e0:	dfc00b15 	stw	ra,44(sp)
   8b7e4:	ddc00915 	stw	r23,36(sp)
   8b7e8:	dd800815 	stw	r22,32(sp)
   8b7ec:	dd400715 	stw	r21,28(sp)
   8b7f0:	dd000615 	stw	r20,24(sp)
   8b7f4:	dcc00515 	stw	r19,20(sp)
   8b7f8:	dc800415 	stw	r18,16(sp)
   8b7fc:	2021883a 	mov	r16,r4
   8b800:	2823883a 	mov	r17,r5
   8b804:	2839883a 	mov	fp,r5
   8b808:	38003c1e 	bne	r7,zero,8b8fc <__umoddi3+0x12c>
   8b80c:	3027883a 	mov	r19,r6
   8b810:	2029883a 	mov	r20,r4
   8b814:	2980512e 	bgeu	r5,r6,8b95c <__umoddi3+0x18c>
   8b818:	00bfffd4 	movui	r2,65535
   8b81c:	11809a36 	bltu	r2,r6,8ba88 <__umoddi3+0x2b8>
   8b820:	01003fc4 	movi	r4,255
   8b824:	2189803a 	cmpltu	r4,r4,r6
   8b828:	200890fa 	slli	r4,r4,3
   8b82c:	3104d83a 	srl	r2,r6,r4
   8b830:	00c00274 	movhi	r3,9
   8b834:	18c92504 	addi	r3,r3,9364
   8b838:	1885883a 	add	r2,r3,r2
   8b83c:	10c00003 	ldbu	r3,0(r2)
   8b840:	00800804 	movi	r2,32
   8b844:	1909883a 	add	r4,r3,r4
   8b848:	1125c83a 	sub	r18,r2,r4
   8b84c:	90000526 	beq	r18,zero,8b864 <__umoddi3+0x94>
   8b850:	8ca2983a 	sll	r17,r17,r18
   8b854:	8108d83a 	srl	r4,r16,r4
   8b858:	34a6983a 	sll	r19,r6,r18
   8b85c:	84a8983a 	sll	r20,r16,r18
   8b860:	2478b03a 	or	fp,r4,r17
   8b864:	982ed43a 	srli	r23,r19,16
   8b868:	e009883a 	mov	r4,fp
   8b86c:	9dbfffcc 	andi	r22,r19,65535
   8b870:	b80b883a 	mov	r5,r23
   8b874:	008be640 	call	8be64 <__umodsi3>
   8b878:	e009883a 	mov	r4,fp
   8b87c:	b80b883a 	mov	r5,r23
   8b880:	102b883a 	mov	r21,r2
   8b884:	008be000 	call	8be00 <__udivsi3>
   8b888:	a806943a 	slli	r3,r21,16
   8b88c:	a008d43a 	srli	r4,r20,16
   8b890:	b085383a 	mul	r2,r22,r2
   8b894:	20c8b03a 	or	r4,r4,r3
   8b898:	2080032e 	bgeu	r4,r2,8b8a8 <__umoddi3+0xd8>
   8b89c:	24c9883a 	add	r4,r4,r19
   8b8a0:	24c00136 	bltu	r4,r19,8b8a8 <__umoddi3+0xd8>
   8b8a4:	20811036 	bltu	r4,r2,8bce8 <__umoddi3+0x518>
   8b8a8:	20abc83a 	sub	r21,r4,r2
   8b8ac:	b80b883a 	mov	r5,r23
   8b8b0:	a809883a 	mov	r4,r21
   8b8b4:	008be640 	call	8be64 <__umodsi3>
   8b8b8:	1023883a 	mov	r17,r2
   8b8bc:	b80b883a 	mov	r5,r23
   8b8c0:	a809883a 	mov	r4,r21
   8b8c4:	008be000 	call	8be00 <__udivsi3>
   8b8c8:	8822943a 	slli	r17,r17,16
   8b8cc:	b085383a 	mul	r2,r22,r2
   8b8d0:	a0ffffcc 	andi	r3,r20,65535
   8b8d4:	1c46b03a 	or	r3,r3,r17
   8b8d8:	1880042e 	bgeu	r3,r2,8b8ec <__umoddi3+0x11c>
   8b8dc:	1cc7883a 	add	r3,r3,r19
   8b8e0:	1cc00236 	bltu	r3,r19,8b8ec <__umoddi3+0x11c>
   8b8e4:	1880012e 	bgeu	r3,r2,8b8ec <__umoddi3+0x11c>
   8b8e8:	1cc7883a 	add	r3,r3,r19
   8b8ec:	1885c83a 	sub	r2,r3,r2
   8b8f0:	1484d83a 	srl	r2,r2,r18
   8b8f4:	0007883a 	mov	r3,zero
   8b8f8:	00004f06 	br	8ba38 <__umoddi3+0x268>
   8b8fc:	29c04c36 	bltu	r5,r7,8ba30 <__umoddi3+0x260>
   8b900:	00bfffd4 	movui	r2,65535
   8b904:	11c0582e 	bgeu	r2,r7,8ba68 <__umoddi3+0x298>
   8b908:	00804034 	movhi	r2,256
   8b90c:	10bfffc4 	addi	r2,r2,-1
   8b910:	11c0e736 	bltu	r2,r7,8bcb0 <__umoddi3+0x4e0>
   8b914:	01000404 	movi	r4,16
   8b918:	3904d83a 	srl	r2,r7,r4
   8b91c:	00c00274 	movhi	r3,9
   8b920:	18c92504 	addi	r3,r3,9364
   8b924:	1885883a 	add	r2,r3,r2
   8b928:	14c00003 	ldbu	r19,0(r2)
   8b92c:	00c00804 	movi	r3,32
   8b930:	9927883a 	add	r19,r19,r4
   8b934:	1ce9c83a 	sub	r20,r3,r19
   8b938:	a000581e 	bne	r20,zero,8ba9c <__umoddi3+0x2cc>
   8b93c:	3c400136 	bltu	r7,r17,8b944 <__umoddi3+0x174>
   8b940:	8180eb36 	bltu	r16,r6,8bcf0 <__umoddi3+0x520>
   8b944:	8185c83a 	sub	r2,r16,r6
   8b948:	89e3c83a 	sub	r17,r17,r7
   8b94c:	8089803a 	cmpltu	r4,r16,r2
   8b950:	8939c83a 	sub	fp,r17,r4
   8b954:	e007883a 	mov	r3,fp
   8b958:	00003706 	br	8ba38 <__umoddi3+0x268>
   8b95c:	3000041e 	bne	r6,zero,8b970 <__umoddi3+0x1a0>
   8b960:	000b883a 	mov	r5,zero
   8b964:	01000044 	movi	r4,1
   8b968:	008be000 	call	8be00 <__udivsi3>
   8b96c:	1027883a 	mov	r19,r2
   8b970:	00bfffd4 	movui	r2,65535
   8b974:	14c0402e 	bgeu	r2,r19,8ba78 <__umoddi3+0x2a8>
   8b978:	00804034 	movhi	r2,256
   8b97c:	10bfffc4 	addi	r2,r2,-1
   8b980:	14c0cd36 	bltu	r2,r19,8bcb8 <__umoddi3+0x4e8>
   8b984:	00800404 	movi	r2,16
   8b988:	9886d83a 	srl	r3,r19,r2
   8b98c:	01000274 	movhi	r4,9
   8b990:	21092504 	addi	r4,r4,9364
   8b994:	20c7883a 	add	r3,r4,r3
   8b998:	18c00003 	ldbu	r3,0(r3)
   8b99c:	1887883a 	add	r3,r3,r2
   8b9a0:	00800804 	movi	r2,32
   8b9a4:	10e5c83a 	sub	r18,r2,r3
   8b9a8:	9000901e 	bne	r18,zero,8bbec <__umoddi3+0x41c>
   8b9ac:	982cd43a 	srli	r22,r19,16
   8b9b0:	8ce3c83a 	sub	r17,r17,r19
   8b9b4:	9d7fffcc 	andi	r21,r19,65535
   8b9b8:	b00b883a 	mov	r5,r22
   8b9bc:	8809883a 	mov	r4,r17
   8b9c0:	008be640 	call	8be64 <__umodsi3>
   8b9c4:	8809883a 	mov	r4,r17
   8b9c8:	b00b883a 	mov	r5,r22
   8b9cc:	1021883a 	mov	r16,r2
   8b9d0:	008be000 	call	8be00 <__udivsi3>
   8b9d4:	8006943a 	slli	r3,r16,16
   8b9d8:	a008d43a 	srli	r4,r20,16
   8b9dc:	1545383a 	mul	r2,r2,r21
   8b9e0:	20c8b03a 	or	r4,r4,r3
   8b9e4:	2080042e 	bgeu	r4,r2,8b9f8 <__umoddi3+0x228>
   8b9e8:	24c9883a 	add	r4,r4,r19
   8b9ec:	24c00236 	bltu	r4,r19,8b9f8 <__umoddi3+0x228>
   8b9f0:	2080012e 	bgeu	r4,r2,8b9f8 <__umoddi3+0x228>
   8b9f4:	24c9883a 	add	r4,r4,r19
   8b9f8:	20a1c83a 	sub	r16,r4,r2
   8b9fc:	b00b883a 	mov	r5,r22
   8ba00:	8009883a 	mov	r4,r16
   8ba04:	008be640 	call	8be64 <__umodsi3>
   8ba08:	1023883a 	mov	r17,r2
   8ba0c:	b00b883a 	mov	r5,r22
   8ba10:	8009883a 	mov	r4,r16
   8ba14:	008be000 	call	8be00 <__udivsi3>
   8ba18:	8822943a 	slli	r17,r17,16
   8ba1c:	1545383a 	mul	r2,r2,r21
   8ba20:	a53fffcc 	andi	r20,r20,65535
   8ba24:	a446b03a 	or	r3,r20,r17
   8ba28:	18bfb02e 	bgeu	r3,r2,8b8ec <rx_descriptor_end+0xfff8b88c>
   8ba2c:	003fab06 	br	8b8dc <rx_descriptor_end+0xfff8b87c>
   8ba30:	2005883a 	mov	r2,r4
   8ba34:	2807883a 	mov	r3,r5
   8ba38:	dfc00b17 	ldw	ra,44(sp)
   8ba3c:	df000a17 	ldw	fp,40(sp)
   8ba40:	ddc00917 	ldw	r23,36(sp)
   8ba44:	dd800817 	ldw	r22,32(sp)
   8ba48:	dd400717 	ldw	r21,28(sp)
   8ba4c:	dd000617 	ldw	r20,24(sp)
   8ba50:	dcc00517 	ldw	r19,20(sp)
   8ba54:	dc800417 	ldw	r18,16(sp)
   8ba58:	dc400317 	ldw	r17,12(sp)
   8ba5c:	dc000217 	ldw	r16,8(sp)
   8ba60:	dec00c04 	addi	sp,sp,48
   8ba64:	f800283a 	ret
   8ba68:	04c03fc4 	movi	r19,255
   8ba6c:	99c9803a 	cmpltu	r4,r19,r7
   8ba70:	200890fa 	slli	r4,r4,3
   8ba74:	003fa806 	br	8b918 <rx_descriptor_end+0xfff8b8b8>
   8ba78:	00803fc4 	movi	r2,255
   8ba7c:	14c5803a 	cmpltu	r2,r2,r19
   8ba80:	100490fa 	slli	r2,r2,3
   8ba84:	003fc006 	br	8b988 <rx_descriptor_end+0xfff8b928>
   8ba88:	00804034 	movhi	r2,256
   8ba8c:	10bfffc4 	addi	r2,r2,-1
   8ba90:	11808b36 	bltu	r2,r6,8bcc0 <__umoddi3+0x4f0>
   8ba94:	01000404 	movi	r4,16
   8ba98:	003f6406 	br	8b82c <rx_descriptor_end+0xfff8b7cc>
   8ba9c:	34c4d83a 	srl	r2,r6,r19
   8baa0:	3d0e983a 	sll	r7,r7,r20
   8baa4:	8cf8d83a 	srl	fp,r17,r19
   8baa8:	8d10983a 	sll	r8,r17,r20
   8baac:	38aab03a 	or	r21,r7,r2
   8bab0:	a82cd43a 	srli	r22,r21,16
   8bab4:	84e2d83a 	srl	r17,r16,r19
   8bab8:	e009883a 	mov	r4,fp
   8babc:	b00b883a 	mov	r5,r22
   8bac0:	8a22b03a 	or	r17,r17,r8
   8bac4:	3524983a 	sll	r18,r6,r20
   8bac8:	008be640 	call	8be64 <__umodsi3>
   8bacc:	e009883a 	mov	r4,fp
   8bad0:	b00b883a 	mov	r5,r22
   8bad4:	102f883a 	mov	r23,r2
   8bad8:	008be000 	call	8be00 <__udivsi3>
   8badc:	100d883a 	mov	r6,r2
   8bae0:	b808943a 	slli	r4,r23,16
   8bae4:	aa3fffcc 	andi	r8,r21,65535
   8bae8:	8804d43a 	srli	r2,r17,16
   8baec:	41af383a 	mul	r23,r8,r6
   8baf0:	8520983a 	sll	r16,r16,r20
   8baf4:	1104b03a 	or	r2,r2,r4
   8baf8:	15c0042e 	bgeu	r2,r23,8bb0c <__umoddi3+0x33c>
   8bafc:	1545883a 	add	r2,r2,r21
   8bb00:	30ffffc4 	addi	r3,r6,-1
   8bb04:	1540742e 	bgeu	r2,r21,8bcd8 <__umoddi3+0x508>
   8bb08:	180d883a 	mov	r6,r3
   8bb0c:	15efc83a 	sub	r23,r2,r23
   8bb10:	b00b883a 	mov	r5,r22
   8bb14:	b809883a 	mov	r4,r23
   8bb18:	d9800115 	stw	r6,4(sp)
   8bb1c:	da000015 	stw	r8,0(sp)
   8bb20:	008be640 	call	8be64 <__umodsi3>
   8bb24:	b00b883a 	mov	r5,r22
   8bb28:	b809883a 	mov	r4,r23
   8bb2c:	1039883a 	mov	fp,r2
   8bb30:	008be000 	call	8be00 <__udivsi3>
   8bb34:	da000017 	ldw	r8,0(sp)
   8bb38:	e038943a 	slli	fp,fp,16
   8bb3c:	100b883a 	mov	r5,r2
   8bb40:	4089383a 	mul	r4,r8,r2
   8bb44:	8a3fffcc 	andi	r8,r17,65535
   8bb48:	4710b03a 	or	r8,r8,fp
   8bb4c:	d9800117 	ldw	r6,4(sp)
   8bb50:	4100042e 	bgeu	r8,r4,8bb64 <__umoddi3+0x394>
   8bb54:	4551883a 	add	r8,r8,r21
   8bb58:	10bfffc4 	addi	r2,r2,-1
   8bb5c:	45405a2e 	bgeu	r8,r21,8bcc8 <__umoddi3+0x4f8>
   8bb60:	100b883a 	mov	r5,r2
   8bb64:	300c943a 	slli	r6,r6,16
   8bb68:	91ffffcc 	andi	r7,r18,65535
   8bb6c:	9004d43a 	srli	r2,r18,16
   8bb70:	314cb03a 	or	r6,r6,r5
   8bb74:	317fffcc 	andi	r5,r6,65535
   8bb78:	300cd43a 	srli	r6,r6,16
   8bb7c:	29d3383a 	mul	r9,r5,r7
   8bb80:	288b383a 	mul	r5,r5,r2
   8bb84:	31cf383a 	mul	r7,r6,r7
   8bb88:	4806d43a 	srli	r3,r9,16
   8bb8c:	4111c83a 	sub	r8,r8,r4
   8bb90:	29cb883a 	add	r5,r5,r7
   8bb94:	194b883a 	add	r5,r3,r5
   8bb98:	3085383a 	mul	r2,r6,r2
   8bb9c:	29c0022e 	bgeu	r5,r7,8bba8 <__umoddi3+0x3d8>
   8bba0:	00c00074 	movhi	r3,1
   8bba4:	10c5883a 	add	r2,r2,r3
   8bba8:	2808d43a 	srli	r4,r5,16
   8bbac:	280a943a 	slli	r5,r5,16
   8bbb0:	4a7fffcc 	andi	r9,r9,65535
   8bbb4:	2085883a 	add	r2,r4,r2
   8bbb8:	2a4b883a 	add	r5,r5,r9
   8bbbc:	40803636 	bltu	r8,r2,8bc98 <__umoddi3+0x4c8>
   8bbc0:	40804d26 	beq	r8,r2,8bcf8 <__umoddi3+0x528>
   8bbc4:	4089c83a 	sub	r4,r8,r2
   8bbc8:	280f883a 	mov	r7,r5
   8bbcc:	81cfc83a 	sub	r7,r16,r7
   8bbd0:	81c7803a 	cmpltu	r3,r16,r7
   8bbd4:	20c7c83a 	sub	r3,r4,r3
   8bbd8:	1cc4983a 	sll	r2,r3,r19
   8bbdc:	3d0ed83a 	srl	r7,r7,r20
   8bbe0:	1d06d83a 	srl	r3,r3,r20
   8bbe4:	11c4b03a 	or	r2,r2,r7
   8bbe8:	003f9306 	br	8ba38 <rx_descriptor_end+0xfff8b9d8>
   8bbec:	9ca6983a 	sll	r19,r19,r18
   8bbf0:	88e8d83a 	srl	r20,r17,r3
   8bbf4:	80c4d83a 	srl	r2,r16,r3
   8bbf8:	982cd43a 	srli	r22,r19,16
   8bbfc:	8ca2983a 	sll	r17,r17,r18
   8bc00:	a009883a 	mov	r4,r20
   8bc04:	b00b883a 	mov	r5,r22
   8bc08:	1478b03a 	or	fp,r2,r17
   8bc0c:	008be640 	call	8be64 <__umodsi3>
   8bc10:	a009883a 	mov	r4,r20
   8bc14:	b00b883a 	mov	r5,r22
   8bc18:	1023883a 	mov	r17,r2
   8bc1c:	008be000 	call	8be00 <__udivsi3>
   8bc20:	9d7fffcc 	andi	r21,r19,65535
   8bc24:	880a943a 	slli	r5,r17,16
   8bc28:	e008d43a 	srli	r4,fp,16
   8bc2c:	a885383a 	mul	r2,r21,r2
   8bc30:	84a8983a 	sll	r20,r16,r18
   8bc34:	2148b03a 	or	r4,r4,r5
   8bc38:	2080042e 	bgeu	r4,r2,8bc4c <__umoddi3+0x47c>
   8bc3c:	24c9883a 	add	r4,r4,r19
   8bc40:	24c00236 	bltu	r4,r19,8bc4c <__umoddi3+0x47c>
   8bc44:	2080012e 	bgeu	r4,r2,8bc4c <__umoddi3+0x47c>
   8bc48:	24c9883a 	add	r4,r4,r19
   8bc4c:	20a3c83a 	sub	r17,r4,r2
   8bc50:	b00b883a 	mov	r5,r22
   8bc54:	8809883a 	mov	r4,r17
   8bc58:	008be640 	call	8be64 <__umodsi3>
   8bc5c:	102f883a 	mov	r23,r2
   8bc60:	8809883a 	mov	r4,r17
   8bc64:	b00b883a 	mov	r5,r22
   8bc68:	008be000 	call	8be00 <__udivsi3>
   8bc6c:	b82e943a 	slli	r23,r23,16
   8bc70:	a885383a 	mul	r2,r21,r2
   8bc74:	e13fffcc 	andi	r4,fp,65535
   8bc78:	25c8b03a 	or	r4,r4,r23
   8bc7c:	2080042e 	bgeu	r4,r2,8bc90 <__umoddi3+0x4c0>
   8bc80:	24c9883a 	add	r4,r4,r19
   8bc84:	24c00236 	bltu	r4,r19,8bc90 <__umoddi3+0x4c0>
   8bc88:	2080012e 	bgeu	r4,r2,8bc90 <__umoddi3+0x4c0>
   8bc8c:	24c9883a 	add	r4,r4,r19
   8bc90:	20a3c83a 	sub	r17,r4,r2
   8bc94:	003f4806 	br	8b9b8 <rx_descriptor_end+0xfff8b958>
   8bc98:	2c8fc83a 	sub	r7,r5,r18
   8bc9c:	1545c83a 	sub	r2,r2,r21
   8bca0:	29cb803a 	cmpltu	r5,r5,r7
   8bca4:	1145c83a 	sub	r2,r2,r5
   8bca8:	4089c83a 	sub	r4,r8,r2
   8bcac:	003fc706 	br	8bbcc <rx_descriptor_end+0xfff8bb6c>
   8bcb0:	01000604 	movi	r4,24
   8bcb4:	003f1806 	br	8b918 <rx_descriptor_end+0xfff8b8b8>
   8bcb8:	00800604 	movi	r2,24
   8bcbc:	003f3206 	br	8b988 <rx_descriptor_end+0xfff8b928>
   8bcc0:	01000604 	movi	r4,24
   8bcc4:	003ed906 	br	8b82c <rx_descriptor_end+0xfff8b7cc>
   8bcc8:	413fa52e 	bgeu	r8,r4,8bb60 <rx_descriptor_end+0xfff8bb00>
   8bccc:	297fff84 	addi	r5,r5,-2
   8bcd0:	4551883a 	add	r8,r8,r21
   8bcd4:	003fa306 	br	8bb64 <rx_descriptor_end+0xfff8bb04>
   8bcd8:	15ff8b2e 	bgeu	r2,r23,8bb08 <rx_descriptor_end+0xfff8baa8>
   8bcdc:	31bfff84 	addi	r6,r6,-2
   8bce0:	1545883a 	add	r2,r2,r21
   8bce4:	003f8906 	br	8bb0c <rx_descriptor_end+0xfff8baac>
   8bce8:	24c9883a 	add	r4,r4,r19
   8bcec:	003eee06 	br	8b8a8 <rx_descriptor_end+0xfff8b848>
   8bcf0:	8005883a 	mov	r2,r16
   8bcf4:	003f1706 	br	8b954 <rx_descriptor_end+0xfff8b8f4>
   8bcf8:	817fe736 	bltu	r16,r5,8bc98 <rx_descriptor_end+0xfff8bc38>
   8bcfc:	280f883a 	mov	r7,r5
   8bd00:	0009883a 	mov	r4,zero
   8bd04:	003fb106 	br	8bbcc <rx_descriptor_end+0xfff8bb6c>

0008bd08 <__divsi3>:
   8bd08:	20001b16 	blt	r4,zero,8bd78 <__divsi3+0x70>
   8bd0c:	000f883a 	mov	r7,zero
   8bd10:	28001616 	blt	r5,zero,8bd6c <__divsi3+0x64>
   8bd14:	200d883a 	mov	r6,r4
   8bd18:	29001a2e 	bgeu	r5,r4,8bd84 <__divsi3+0x7c>
   8bd1c:	00800804 	movi	r2,32
   8bd20:	00c00044 	movi	r3,1
   8bd24:	00000106 	br	8bd2c <__divsi3+0x24>
   8bd28:	10000d26 	beq	r2,zero,8bd60 <__divsi3+0x58>
   8bd2c:	294b883a 	add	r5,r5,r5
   8bd30:	10bfffc4 	addi	r2,r2,-1
   8bd34:	18c7883a 	add	r3,r3,r3
   8bd38:	293ffb36 	bltu	r5,r4,8bd28 <rx_descriptor_end+0xfff8bcc8>
   8bd3c:	0005883a 	mov	r2,zero
   8bd40:	18000726 	beq	r3,zero,8bd60 <__divsi3+0x58>
   8bd44:	0005883a 	mov	r2,zero
   8bd48:	31400236 	bltu	r6,r5,8bd54 <__divsi3+0x4c>
   8bd4c:	314dc83a 	sub	r6,r6,r5
   8bd50:	10c4b03a 	or	r2,r2,r3
   8bd54:	1806d07a 	srli	r3,r3,1
   8bd58:	280ad07a 	srli	r5,r5,1
   8bd5c:	183ffa1e 	bne	r3,zero,8bd48 <rx_descriptor_end+0xfff8bce8>
   8bd60:	38000126 	beq	r7,zero,8bd68 <__divsi3+0x60>
   8bd64:	0085c83a 	sub	r2,zero,r2
   8bd68:	f800283a 	ret
   8bd6c:	014bc83a 	sub	r5,zero,r5
   8bd70:	39c0005c 	xori	r7,r7,1
   8bd74:	003fe706 	br	8bd14 <rx_descriptor_end+0xfff8bcb4>
   8bd78:	0109c83a 	sub	r4,zero,r4
   8bd7c:	01c00044 	movi	r7,1
   8bd80:	003fe306 	br	8bd10 <rx_descriptor_end+0xfff8bcb0>
   8bd84:	00c00044 	movi	r3,1
   8bd88:	003fee06 	br	8bd44 <rx_descriptor_end+0xfff8bce4>

0008bd8c <__modsi3>:
   8bd8c:	20001716 	blt	r4,zero,8bdec <__modsi3+0x60>
   8bd90:	000f883a 	mov	r7,zero
   8bd94:	2005883a 	mov	r2,r4
   8bd98:	28001216 	blt	r5,zero,8bde4 <__modsi3+0x58>
   8bd9c:	2900162e 	bgeu	r5,r4,8bdf8 <__modsi3+0x6c>
   8bda0:	01800804 	movi	r6,32
   8bda4:	00c00044 	movi	r3,1
   8bda8:	00000106 	br	8bdb0 <__modsi3+0x24>
   8bdac:	30000a26 	beq	r6,zero,8bdd8 <__modsi3+0x4c>
   8bdb0:	294b883a 	add	r5,r5,r5
   8bdb4:	31bfffc4 	addi	r6,r6,-1
   8bdb8:	18c7883a 	add	r3,r3,r3
   8bdbc:	293ffb36 	bltu	r5,r4,8bdac <rx_descriptor_end+0xfff8bd4c>
   8bdc0:	18000526 	beq	r3,zero,8bdd8 <__modsi3+0x4c>
   8bdc4:	1806d07a 	srli	r3,r3,1
   8bdc8:	11400136 	bltu	r2,r5,8bdd0 <__modsi3+0x44>
   8bdcc:	1145c83a 	sub	r2,r2,r5
   8bdd0:	280ad07a 	srli	r5,r5,1
   8bdd4:	183ffb1e 	bne	r3,zero,8bdc4 <rx_descriptor_end+0xfff8bd64>
   8bdd8:	38000126 	beq	r7,zero,8bde0 <__modsi3+0x54>
   8bddc:	0085c83a 	sub	r2,zero,r2
   8bde0:	f800283a 	ret
   8bde4:	014bc83a 	sub	r5,zero,r5
   8bde8:	003fec06 	br	8bd9c <rx_descriptor_end+0xfff8bd3c>
   8bdec:	0109c83a 	sub	r4,zero,r4
   8bdf0:	01c00044 	movi	r7,1
   8bdf4:	003fe706 	br	8bd94 <rx_descriptor_end+0xfff8bd34>
   8bdf8:	00c00044 	movi	r3,1
   8bdfc:	003ff106 	br	8bdc4 <rx_descriptor_end+0xfff8bd64>

0008be00 <__udivsi3>:
   8be00:	200d883a 	mov	r6,r4
   8be04:	2900152e 	bgeu	r5,r4,8be5c <__udivsi3+0x5c>
   8be08:	28001416 	blt	r5,zero,8be5c <__udivsi3+0x5c>
   8be0c:	00800804 	movi	r2,32
   8be10:	00c00044 	movi	r3,1
   8be14:	00000206 	br	8be20 <__udivsi3+0x20>
   8be18:	10000e26 	beq	r2,zero,8be54 <__udivsi3+0x54>
   8be1c:	28000516 	blt	r5,zero,8be34 <__udivsi3+0x34>
   8be20:	294b883a 	add	r5,r5,r5
   8be24:	10bfffc4 	addi	r2,r2,-1
   8be28:	18c7883a 	add	r3,r3,r3
   8be2c:	293ffa36 	bltu	r5,r4,8be18 <rx_descriptor_end+0xfff8bdb8>
   8be30:	18000826 	beq	r3,zero,8be54 <__udivsi3+0x54>
   8be34:	0005883a 	mov	r2,zero
   8be38:	31400236 	bltu	r6,r5,8be44 <__udivsi3+0x44>
   8be3c:	314dc83a 	sub	r6,r6,r5
   8be40:	10c4b03a 	or	r2,r2,r3
   8be44:	1806d07a 	srli	r3,r3,1
   8be48:	280ad07a 	srli	r5,r5,1
   8be4c:	183ffa1e 	bne	r3,zero,8be38 <rx_descriptor_end+0xfff8bdd8>
   8be50:	f800283a 	ret
   8be54:	0005883a 	mov	r2,zero
   8be58:	f800283a 	ret
   8be5c:	00c00044 	movi	r3,1
   8be60:	003ff406 	br	8be34 <rx_descriptor_end+0xfff8bdd4>

0008be64 <__umodsi3>:
   8be64:	2005883a 	mov	r2,r4
   8be68:	2900122e 	bgeu	r5,r4,8beb4 <__umodsi3+0x50>
   8be6c:	28001116 	blt	r5,zero,8beb4 <__umodsi3+0x50>
   8be70:	01800804 	movi	r6,32
   8be74:	00c00044 	movi	r3,1
   8be78:	00000206 	br	8be84 <__umodsi3+0x20>
   8be7c:	30000c26 	beq	r6,zero,8beb0 <__umodsi3+0x4c>
   8be80:	28000516 	blt	r5,zero,8be98 <__umodsi3+0x34>
   8be84:	294b883a 	add	r5,r5,r5
   8be88:	31bfffc4 	addi	r6,r6,-1
   8be8c:	18c7883a 	add	r3,r3,r3
   8be90:	293ffa36 	bltu	r5,r4,8be7c <rx_descriptor_end+0xfff8be1c>
   8be94:	18000626 	beq	r3,zero,8beb0 <__umodsi3+0x4c>
   8be98:	1806d07a 	srli	r3,r3,1
   8be9c:	11400136 	bltu	r2,r5,8bea4 <__umodsi3+0x40>
   8bea0:	1145c83a 	sub	r2,r2,r5
   8bea4:	280ad07a 	srli	r5,r5,1
   8bea8:	183ffb1e 	bne	r3,zero,8be98 <rx_descriptor_end+0xfff8be38>
   8beac:	f800283a 	ret
   8beb0:	f800283a 	ret
   8beb4:	00c00044 	movi	r3,1
   8beb8:	003ff706 	br	8be98 <rx_descriptor_end+0xfff8be38>

0008bebc <__adddf3>:
   8bebc:	02c00434 	movhi	r11,16
   8bec0:	5affffc4 	addi	r11,r11,-1
   8bec4:	2806d7fa 	srli	r3,r5,31
   8bec8:	2ad4703a 	and	r10,r5,r11
   8becc:	3ad2703a 	and	r9,r7,r11
   8bed0:	3804d53a 	srli	r2,r7,20
   8bed4:	3018d77a 	srli	r12,r6,29
   8bed8:	280ad53a 	srli	r5,r5,20
   8bedc:	501490fa 	slli	r10,r10,3
   8bee0:	2010d77a 	srli	r8,r4,29
   8bee4:	481290fa 	slli	r9,r9,3
   8bee8:	380ed7fa 	srli	r7,r7,31
   8beec:	defffb04 	addi	sp,sp,-20
   8bef0:	dc800215 	stw	r18,8(sp)
   8bef4:	dc400115 	stw	r17,4(sp)
   8bef8:	dc000015 	stw	r16,0(sp)
   8befc:	dfc00415 	stw	ra,16(sp)
   8bf00:	dcc00315 	stw	r19,12(sp)
   8bf04:	1c803fcc 	andi	r18,r3,255
   8bf08:	2c01ffcc 	andi	r16,r5,2047
   8bf0c:	5210b03a 	or	r8,r10,r8
   8bf10:	202290fa 	slli	r17,r4,3
   8bf14:	1081ffcc 	andi	r2,r2,2047
   8bf18:	4b12b03a 	or	r9,r9,r12
   8bf1c:	300c90fa 	slli	r6,r6,3
   8bf20:	91c07526 	beq	r18,r7,8c0f8 <__adddf3+0x23c>
   8bf24:	8087c83a 	sub	r3,r16,r2
   8bf28:	00c0ab0e 	bge	zero,r3,8c1d8 <__adddf3+0x31c>
   8bf2c:	10002a1e 	bne	r2,zero,8bfd8 <__adddf3+0x11c>
   8bf30:	4984b03a 	or	r2,r9,r6
   8bf34:	1000961e 	bne	r2,zero,8c190 <__adddf3+0x2d4>
   8bf38:	888001cc 	andi	r2,r17,7
   8bf3c:	10000726 	beq	r2,zero,8bf5c <__adddf3+0xa0>
   8bf40:	888003cc 	andi	r2,r17,15
   8bf44:	00c00104 	movi	r3,4
   8bf48:	10c00426 	beq	r2,r3,8bf5c <__adddf3+0xa0>
   8bf4c:	88c7883a 	add	r3,r17,r3
   8bf50:	1c63803a 	cmpltu	r17,r3,r17
   8bf54:	4451883a 	add	r8,r8,r17
   8bf58:	1823883a 	mov	r17,r3
   8bf5c:	4080202c 	andhi	r2,r8,128
   8bf60:	10005926 	beq	r2,zero,8c0c8 <__adddf3+0x20c>
   8bf64:	84000044 	addi	r16,r16,1
   8bf68:	0081ffc4 	movi	r2,2047
   8bf6c:	8080ba26 	beq	r16,r2,8c258 <__adddf3+0x39c>
   8bf70:	00bfe034 	movhi	r2,65408
   8bf74:	10bfffc4 	addi	r2,r2,-1
   8bf78:	4090703a 	and	r8,r8,r2
   8bf7c:	4004977a 	slli	r2,r8,29
   8bf80:	4010927a 	slli	r8,r8,9
   8bf84:	8822d0fa 	srli	r17,r17,3
   8bf88:	8401ffcc 	andi	r16,r16,2047
   8bf8c:	4010d33a 	srli	r8,r8,12
   8bf90:	9007883a 	mov	r3,r18
   8bf94:	1444b03a 	or	r2,r2,r17
   8bf98:	8401ffcc 	andi	r16,r16,2047
   8bf9c:	8020953a 	slli	r16,r16,20
   8bfa0:	18c03fcc 	andi	r3,r3,255
   8bfa4:	01000434 	movhi	r4,16
   8bfa8:	213fffc4 	addi	r4,r4,-1
   8bfac:	180697fa 	slli	r3,r3,31
   8bfb0:	4110703a 	and	r8,r8,r4
   8bfb4:	4410b03a 	or	r8,r8,r16
   8bfb8:	40c6b03a 	or	r3,r8,r3
   8bfbc:	dfc00417 	ldw	ra,16(sp)
   8bfc0:	dcc00317 	ldw	r19,12(sp)
   8bfc4:	dc800217 	ldw	r18,8(sp)
   8bfc8:	dc400117 	ldw	r17,4(sp)
   8bfcc:	dc000017 	ldw	r16,0(sp)
   8bfd0:	dec00504 	addi	sp,sp,20
   8bfd4:	f800283a 	ret
   8bfd8:	0081ffc4 	movi	r2,2047
   8bfdc:	80bfd626 	beq	r16,r2,8bf38 <rx_descriptor_end+0xfff8bed8>
   8bfe0:	4a402034 	orhi	r9,r9,128
   8bfe4:	00800e04 	movi	r2,56
   8bfe8:	10c09f16 	blt	r2,r3,8c268 <__adddf3+0x3ac>
   8bfec:	008007c4 	movi	r2,31
   8bff0:	10c0c216 	blt	r2,r3,8c2fc <__adddf3+0x440>
   8bff4:	00800804 	movi	r2,32
   8bff8:	10c5c83a 	sub	r2,r2,r3
   8bffc:	488a983a 	sll	r5,r9,r2
   8c000:	30c8d83a 	srl	r4,r6,r3
   8c004:	3084983a 	sll	r2,r6,r2
   8c008:	48c6d83a 	srl	r3,r9,r3
   8c00c:	290cb03a 	or	r6,r5,r4
   8c010:	1004c03a 	cmpne	r2,r2,zero
   8c014:	308cb03a 	or	r6,r6,r2
   8c018:	898dc83a 	sub	r6,r17,r6
   8c01c:	89a3803a 	cmpltu	r17,r17,r6
   8c020:	40d1c83a 	sub	r8,r8,r3
   8c024:	4451c83a 	sub	r8,r8,r17
   8c028:	3023883a 	mov	r17,r6
   8c02c:	4080202c 	andhi	r2,r8,128
   8c030:	10002326 	beq	r2,zero,8c0c0 <__adddf3+0x204>
   8c034:	04c02034 	movhi	r19,128
   8c038:	9cffffc4 	addi	r19,r19,-1
   8c03c:	44e6703a 	and	r19,r8,r19
   8c040:	98007626 	beq	r19,zero,8c21c <__adddf3+0x360>
   8c044:	9809883a 	mov	r4,r19
   8c048:	008e4c00 	call	8e4c0 <__clzsi2>
   8c04c:	10fffe04 	addi	r3,r2,-8
   8c050:	010007c4 	movi	r4,31
   8c054:	20c07716 	blt	r4,r3,8c234 <__adddf3+0x378>
   8c058:	00800804 	movi	r2,32
   8c05c:	10c5c83a 	sub	r2,r2,r3
   8c060:	8884d83a 	srl	r2,r17,r2
   8c064:	98d0983a 	sll	r8,r19,r3
   8c068:	88e2983a 	sll	r17,r17,r3
   8c06c:	1204b03a 	or	r2,r2,r8
   8c070:	1c007416 	blt	r3,r16,8c244 <__adddf3+0x388>
   8c074:	1c21c83a 	sub	r16,r3,r16
   8c078:	82000044 	addi	r8,r16,1
   8c07c:	00c007c4 	movi	r3,31
   8c080:	1a009116 	blt	r3,r8,8c2c8 <__adddf3+0x40c>
   8c084:	00c00804 	movi	r3,32
   8c088:	1a07c83a 	sub	r3,r3,r8
   8c08c:	8a08d83a 	srl	r4,r17,r8
   8c090:	88e2983a 	sll	r17,r17,r3
   8c094:	10c6983a 	sll	r3,r2,r3
   8c098:	1210d83a 	srl	r8,r2,r8
   8c09c:	8804c03a 	cmpne	r2,r17,zero
   8c0a0:	1906b03a 	or	r3,r3,r4
   8c0a4:	18a2b03a 	or	r17,r3,r2
   8c0a8:	0021883a 	mov	r16,zero
   8c0ac:	003fa206 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c0b0:	1890b03a 	or	r8,r3,r2
   8c0b4:	40017d26 	beq	r8,zero,8c6ac <__adddf3+0x7f0>
   8c0b8:	1011883a 	mov	r8,r2
   8c0bc:	1823883a 	mov	r17,r3
   8c0c0:	888001cc 	andi	r2,r17,7
   8c0c4:	103f9e1e 	bne	r2,zero,8bf40 <rx_descriptor_end+0xfff8bee0>
   8c0c8:	4004977a 	slli	r2,r8,29
   8c0cc:	8822d0fa 	srli	r17,r17,3
   8c0d0:	4010d0fa 	srli	r8,r8,3
   8c0d4:	9007883a 	mov	r3,r18
   8c0d8:	1444b03a 	or	r2,r2,r17
   8c0dc:	0101ffc4 	movi	r4,2047
   8c0e0:	81002426 	beq	r16,r4,8c174 <__adddf3+0x2b8>
   8c0e4:	8120703a 	and	r16,r16,r4
   8c0e8:	01000434 	movhi	r4,16
   8c0ec:	213fffc4 	addi	r4,r4,-1
   8c0f0:	4110703a 	and	r8,r8,r4
   8c0f4:	003fa806 	br	8bf98 <rx_descriptor_end+0xfff8bf38>
   8c0f8:	8089c83a 	sub	r4,r16,r2
   8c0fc:	01005e0e 	bge	zero,r4,8c278 <__adddf3+0x3bc>
   8c100:	10002b26 	beq	r2,zero,8c1b0 <__adddf3+0x2f4>
   8c104:	0081ffc4 	movi	r2,2047
   8c108:	80bf8b26 	beq	r16,r2,8bf38 <rx_descriptor_end+0xfff8bed8>
   8c10c:	4a402034 	orhi	r9,r9,128
   8c110:	00800e04 	movi	r2,56
   8c114:	1100a40e 	bge	r2,r4,8c3a8 <__adddf3+0x4ec>
   8c118:	498cb03a 	or	r6,r9,r6
   8c11c:	300ac03a 	cmpne	r5,r6,zero
   8c120:	0013883a 	mov	r9,zero
   8c124:	2c4b883a 	add	r5,r5,r17
   8c128:	2c63803a 	cmpltu	r17,r5,r17
   8c12c:	4a11883a 	add	r8,r9,r8
   8c130:	8a11883a 	add	r8,r17,r8
   8c134:	2823883a 	mov	r17,r5
   8c138:	4080202c 	andhi	r2,r8,128
   8c13c:	103fe026 	beq	r2,zero,8c0c0 <rx_descriptor_end+0xfff8c060>
   8c140:	84000044 	addi	r16,r16,1
   8c144:	0081ffc4 	movi	r2,2047
   8c148:	8080d226 	beq	r16,r2,8c494 <__adddf3+0x5d8>
   8c14c:	00bfe034 	movhi	r2,65408
   8c150:	10bfffc4 	addi	r2,r2,-1
   8c154:	4090703a 	and	r8,r8,r2
   8c158:	880ad07a 	srli	r5,r17,1
   8c15c:	400897fa 	slli	r4,r8,31
   8c160:	88c0004c 	andi	r3,r17,1
   8c164:	28e2b03a 	or	r17,r5,r3
   8c168:	4010d07a 	srli	r8,r8,1
   8c16c:	2462b03a 	or	r17,r4,r17
   8c170:	003f7106 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c174:	4088b03a 	or	r4,r8,r2
   8c178:	20014526 	beq	r4,zero,8c690 <__adddf3+0x7d4>
   8c17c:	01000434 	movhi	r4,16
   8c180:	42000234 	orhi	r8,r8,8
   8c184:	213fffc4 	addi	r4,r4,-1
   8c188:	4110703a 	and	r8,r8,r4
   8c18c:	003f8206 	br	8bf98 <rx_descriptor_end+0xfff8bf38>
   8c190:	18ffffc4 	addi	r3,r3,-1
   8c194:	1800491e 	bne	r3,zero,8c2bc <__adddf3+0x400>
   8c198:	898bc83a 	sub	r5,r17,r6
   8c19c:	8963803a 	cmpltu	r17,r17,r5
   8c1a0:	4251c83a 	sub	r8,r8,r9
   8c1a4:	4451c83a 	sub	r8,r8,r17
   8c1a8:	2823883a 	mov	r17,r5
   8c1ac:	003f9f06 	br	8c02c <rx_descriptor_end+0xfff8bfcc>
   8c1b0:	4984b03a 	or	r2,r9,r6
   8c1b4:	103f6026 	beq	r2,zero,8bf38 <rx_descriptor_end+0xfff8bed8>
   8c1b8:	213fffc4 	addi	r4,r4,-1
   8c1bc:	2000931e 	bne	r4,zero,8c40c <__adddf3+0x550>
   8c1c0:	898d883a 	add	r6,r17,r6
   8c1c4:	3463803a 	cmpltu	r17,r6,r17
   8c1c8:	4251883a 	add	r8,r8,r9
   8c1cc:	8a11883a 	add	r8,r17,r8
   8c1d0:	3023883a 	mov	r17,r6
   8c1d4:	003fd806 	br	8c138 <rx_descriptor_end+0xfff8c0d8>
   8c1d8:	1800541e 	bne	r3,zero,8c32c <__adddf3+0x470>
   8c1dc:	80800044 	addi	r2,r16,1
   8c1e0:	1081ffcc 	andi	r2,r2,2047
   8c1e4:	00c00044 	movi	r3,1
   8c1e8:	1880a00e 	bge	r3,r2,8c46c <__adddf3+0x5b0>
   8c1ec:	8989c83a 	sub	r4,r17,r6
   8c1f0:	8905803a 	cmpltu	r2,r17,r4
   8c1f4:	4267c83a 	sub	r19,r8,r9
   8c1f8:	98a7c83a 	sub	r19,r19,r2
   8c1fc:	9880202c 	andhi	r2,r19,128
   8c200:	10006326 	beq	r2,zero,8c390 <__adddf3+0x4d4>
   8c204:	3463c83a 	sub	r17,r6,r17
   8c208:	4a07c83a 	sub	r3,r9,r8
   8c20c:	344d803a 	cmpltu	r6,r6,r17
   8c210:	19a7c83a 	sub	r19,r3,r6
   8c214:	3825883a 	mov	r18,r7
   8c218:	983f8a1e 	bne	r19,zero,8c044 <rx_descriptor_end+0xfff8bfe4>
   8c21c:	8809883a 	mov	r4,r17
   8c220:	008e4c00 	call	8e4c0 <__clzsi2>
   8c224:	10800804 	addi	r2,r2,32
   8c228:	10fffe04 	addi	r3,r2,-8
   8c22c:	010007c4 	movi	r4,31
   8c230:	20ff890e 	bge	r4,r3,8c058 <rx_descriptor_end+0xfff8bff8>
   8c234:	10bff604 	addi	r2,r2,-40
   8c238:	8884983a 	sll	r2,r17,r2
   8c23c:	0023883a 	mov	r17,zero
   8c240:	1c3f8c0e 	bge	r3,r16,8c074 <rx_descriptor_end+0xfff8c014>
   8c244:	023fe034 	movhi	r8,65408
   8c248:	423fffc4 	addi	r8,r8,-1
   8c24c:	80e1c83a 	sub	r16,r16,r3
   8c250:	1210703a 	and	r8,r2,r8
   8c254:	003f3806 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c258:	9007883a 	mov	r3,r18
   8c25c:	0011883a 	mov	r8,zero
   8c260:	0005883a 	mov	r2,zero
   8c264:	003f4c06 	br	8bf98 <rx_descriptor_end+0xfff8bf38>
   8c268:	498cb03a 	or	r6,r9,r6
   8c26c:	300cc03a 	cmpne	r6,r6,zero
   8c270:	0007883a 	mov	r3,zero
   8c274:	003f6806 	br	8c018 <rx_descriptor_end+0xfff8bfb8>
   8c278:	20009c1e 	bne	r4,zero,8c4ec <__adddf3+0x630>
   8c27c:	80800044 	addi	r2,r16,1
   8c280:	1141ffcc 	andi	r5,r2,2047
   8c284:	01000044 	movi	r4,1
   8c288:	2140670e 	bge	r4,r5,8c428 <__adddf3+0x56c>
   8c28c:	0101ffc4 	movi	r4,2047
   8c290:	11007f26 	beq	r2,r4,8c490 <__adddf3+0x5d4>
   8c294:	898d883a 	add	r6,r17,r6
   8c298:	4247883a 	add	r3,r8,r9
   8c29c:	3451803a 	cmpltu	r8,r6,r17
   8c2a0:	40d1883a 	add	r8,r8,r3
   8c2a4:	402297fa 	slli	r17,r8,31
   8c2a8:	300cd07a 	srli	r6,r6,1
   8c2ac:	4010d07a 	srli	r8,r8,1
   8c2b0:	1021883a 	mov	r16,r2
   8c2b4:	89a2b03a 	or	r17,r17,r6
   8c2b8:	003f1f06 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c2bc:	0081ffc4 	movi	r2,2047
   8c2c0:	80bf481e 	bne	r16,r2,8bfe4 <rx_descriptor_end+0xfff8bf84>
   8c2c4:	003f1c06 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c2c8:	843ff844 	addi	r16,r16,-31
   8c2cc:	01000804 	movi	r4,32
   8c2d0:	1406d83a 	srl	r3,r2,r16
   8c2d4:	41005026 	beq	r8,r4,8c418 <__adddf3+0x55c>
   8c2d8:	01001004 	movi	r4,64
   8c2dc:	2211c83a 	sub	r8,r4,r8
   8c2e0:	1204983a 	sll	r2,r2,r8
   8c2e4:	88a2b03a 	or	r17,r17,r2
   8c2e8:	8822c03a 	cmpne	r17,r17,zero
   8c2ec:	1c62b03a 	or	r17,r3,r17
   8c2f0:	0011883a 	mov	r8,zero
   8c2f4:	0021883a 	mov	r16,zero
   8c2f8:	003f7106 	br	8c0c0 <rx_descriptor_end+0xfff8c060>
   8c2fc:	193ff804 	addi	r4,r3,-32
   8c300:	00800804 	movi	r2,32
   8c304:	4908d83a 	srl	r4,r9,r4
   8c308:	18804526 	beq	r3,r2,8c420 <__adddf3+0x564>
   8c30c:	00801004 	movi	r2,64
   8c310:	10c5c83a 	sub	r2,r2,r3
   8c314:	4886983a 	sll	r3,r9,r2
   8c318:	198cb03a 	or	r6,r3,r6
   8c31c:	300cc03a 	cmpne	r6,r6,zero
   8c320:	218cb03a 	or	r6,r4,r6
   8c324:	0007883a 	mov	r3,zero
   8c328:	003f3b06 	br	8c018 <rx_descriptor_end+0xfff8bfb8>
   8c32c:	80002a26 	beq	r16,zero,8c3d8 <__adddf3+0x51c>
   8c330:	0101ffc4 	movi	r4,2047
   8c334:	11006826 	beq	r2,r4,8c4d8 <__adddf3+0x61c>
   8c338:	00c7c83a 	sub	r3,zero,r3
   8c33c:	42002034 	orhi	r8,r8,128
   8c340:	01000e04 	movi	r4,56
   8c344:	20c07c16 	blt	r4,r3,8c538 <__adddf3+0x67c>
   8c348:	010007c4 	movi	r4,31
   8c34c:	20c0da16 	blt	r4,r3,8c6b8 <__adddf3+0x7fc>
   8c350:	01000804 	movi	r4,32
   8c354:	20c9c83a 	sub	r4,r4,r3
   8c358:	4114983a 	sll	r10,r8,r4
   8c35c:	88cad83a 	srl	r5,r17,r3
   8c360:	8908983a 	sll	r4,r17,r4
   8c364:	40c6d83a 	srl	r3,r8,r3
   8c368:	5162b03a 	or	r17,r10,r5
   8c36c:	2008c03a 	cmpne	r4,r4,zero
   8c370:	8922b03a 	or	r17,r17,r4
   8c374:	3463c83a 	sub	r17,r6,r17
   8c378:	48c7c83a 	sub	r3,r9,r3
   8c37c:	344d803a 	cmpltu	r6,r6,r17
   8c380:	1991c83a 	sub	r8,r3,r6
   8c384:	1021883a 	mov	r16,r2
   8c388:	3825883a 	mov	r18,r7
   8c38c:	003f2706 	br	8c02c <rx_descriptor_end+0xfff8bfcc>
   8c390:	24d0b03a 	or	r8,r4,r19
   8c394:	40001b1e 	bne	r8,zero,8c404 <__adddf3+0x548>
   8c398:	0005883a 	mov	r2,zero
   8c39c:	0007883a 	mov	r3,zero
   8c3a0:	0021883a 	mov	r16,zero
   8c3a4:	003f4d06 	br	8c0dc <rx_descriptor_end+0xfff8c07c>
   8c3a8:	008007c4 	movi	r2,31
   8c3ac:	11003c16 	blt	r2,r4,8c4a0 <__adddf3+0x5e4>
   8c3b0:	00800804 	movi	r2,32
   8c3b4:	1105c83a 	sub	r2,r2,r4
   8c3b8:	488e983a 	sll	r7,r9,r2
   8c3bc:	310ad83a 	srl	r5,r6,r4
   8c3c0:	3084983a 	sll	r2,r6,r2
   8c3c4:	4912d83a 	srl	r9,r9,r4
   8c3c8:	394ab03a 	or	r5,r7,r5
   8c3cc:	1004c03a 	cmpne	r2,r2,zero
   8c3d0:	288ab03a 	or	r5,r5,r2
   8c3d4:	003f5306 	br	8c124 <rx_descriptor_end+0xfff8c0c4>
   8c3d8:	4448b03a 	or	r4,r8,r17
   8c3dc:	20003e26 	beq	r4,zero,8c4d8 <__adddf3+0x61c>
   8c3e0:	00c6303a 	nor	r3,zero,r3
   8c3e4:	18003a1e 	bne	r3,zero,8c4d0 <__adddf3+0x614>
   8c3e8:	3463c83a 	sub	r17,r6,r17
   8c3ec:	4a07c83a 	sub	r3,r9,r8
   8c3f0:	344d803a 	cmpltu	r6,r6,r17
   8c3f4:	1991c83a 	sub	r8,r3,r6
   8c3f8:	1021883a 	mov	r16,r2
   8c3fc:	3825883a 	mov	r18,r7
   8c400:	003f0a06 	br	8c02c <rx_descriptor_end+0xfff8bfcc>
   8c404:	2023883a 	mov	r17,r4
   8c408:	003f0d06 	br	8c040 <rx_descriptor_end+0xfff8bfe0>
   8c40c:	0081ffc4 	movi	r2,2047
   8c410:	80bf3f1e 	bne	r16,r2,8c110 <rx_descriptor_end+0xfff8c0b0>
   8c414:	003ec806 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c418:	0005883a 	mov	r2,zero
   8c41c:	003fb106 	br	8c2e4 <rx_descriptor_end+0xfff8c284>
   8c420:	0007883a 	mov	r3,zero
   8c424:	003fbc06 	br	8c318 <rx_descriptor_end+0xfff8c2b8>
   8c428:	4444b03a 	or	r2,r8,r17
   8c42c:	8000871e 	bne	r16,zero,8c64c <__adddf3+0x790>
   8c430:	1000ba26 	beq	r2,zero,8c71c <__adddf3+0x860>
   8c434:	4984b03a 	or	r2,r9,r6
   8c438:	103ebf26 	beq	r2,zero,8bf38 <rx_descriptor_end+0xfff8bed8>
   8c43c:	8985883a 	add	r2,r17,r6
   8c440:	4247883a 	add	r3,r8,r9
   8c444:	1451803a 	cmpltu	r8,r2,r17
   8c448:	40d1883a 	add	r8,r8,r3
   8c44c:	40c0202c 	andhi	r3,r8,128
   8c450:	1023883a 	mov	r17,r2
   8c454:	183f1a26 	beq	r3,zero,8c0c0 <rx_descriptor_end+0xfff8c060>
   8c458:	00bfe034 	movhi	r2,65408
   8c45c:	10bfffc4 	addi	r2,r2,-1
   8c460:	2021883a 	mov	r16,r4
   8c464:	4090703a 	and	r8,r8,r2
   8c468:	003eb306 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c46c:	4444b03a 	or	r2,r8,r17
   8c470:	8000291e 	bne	r16,zero,8c518 <__adddf3+0x65c>
   8c474:	10004b1e 	bne	r2,zero,8c5a4 <__adddf3+0x6e8>
   8c478:	4990b03a 	or	r8,r9,r6
   8c47c:	40008b26 	beq	r8,zero,8c6ac <__adddf3+0x7f0>
   8c480:	4811883a 	mov	r8,r9
   8c484:	3023883a 	mov	r17,r6
   8c488:	3825883a 	mov	r18,r7
   8c48c:	003eaa06 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c490:	1021883a 	mov	r16,r2
   8c494:	0011883a 	mov	r8,zero
   8c498:	0005883a 	mov	r2,zero
   8c49c:	003f0f06 	br	8c0dc <rx_descriptor_end+0xfff8c07c>
   8c4a0:	217ff804 	addi	r5,r4,-32
   8c4a4:	00800804 	movi	r2,32
   8c4a8:	494ad83a 	srl	r5,r9,r5
   8c4ac:	20807d26 	beq	r4,r2,8c6a4 <__adddf3+0x7e8>
   8c4b0:	00801004 	movi	r2,64
   8c4b4:	1109c83a 	sub	r4,r2,r4
   8c4b8:	4912983a 	sll	r9,r9,r4
   8c4bc:	498cb03a 	or	r6,r9,r6
   8c4c0:	300cc03a 	cmpne	r6,r6,zero
   8c4c4:	298ab03a 	or	r5,r5,r6
   8c4c8:	0013883a 	mov	r9,zero
   8c4cc:	003f1506 	br	8c124 <rx_descriptor_end+0xfff8c0c4>
   8c4d0:	0101ffc4 	movi	r4,2047
   8c4d4:	113f9a1e 	bne	r2,r4,8c340 <rx_descriptor_end+0xfff8c2e0>
   8c4d8:	4811883a 	mov	r8,r9
   8c4dc:	3023883a 	mov	r17,r6
   8c4e0:	1021883a 	mov	r16,r2
   8c4e4:	3825883a 	mov	r18,r7
   8c4e8:	003e9306 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c4ec:	8000161e 	bne	r16,zero,8c548 <__adddf3+0x68c>
   8c4f0:	444ab03a 	or	r5,r8,r17
   8c4f4:	28005126 	beq	r5,zero,8c63c <__adddf3+0x780>
   8c4f8:	0108303a 	nor	r4,zero,r4
   8c4fc:	20004d1e 	bne	r4,zero,8c634 <__adddf3+0x778>
   8c500:	89a3883a 	add	r17,r17,r6
   8c504:	4253883a 	add	r9,r8,r9
   8c508:	898d803a 	cmpltu	r6,r17,r6
   8c50c:	3251883a 	add	r8,r6,r9
   8c510:	1021883a 	mov	r16,r2
   8c514:	003f0806 	br	8c138 <rx_descriptor_end+0xfff8c0d8>
   8c518:	1000301e 	bne	r2,zero,8c5dc <__adddf3+0x720>
   8c51c:	4984b03a 	or	r2,r9,r6
   8c520:	10007126 	beq	r2,zero,8c6e8 <__adddf3+0x82c>
   8c524:	4811883a 	mov	r8,r9
   8c528:	3023883a 	mov	r17,r6
   8c52c:	3825883a 	mov	r18,r7
   8c530:	0401ffc4 	movi	r16,2047
   8c534:	003e8006 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c538:	4462b03a 	or	r17,r8,r17
   8c53c:	8822c03a 	cmpne	r17,r17,zero
   8c540:	0007883a 	mov	r3,zero
   8c544:	003f8b06 	br	8c374 <rx_descriptor_end+0xfff8c314>
   8c548:	0141ffc4 	movi	r5,2047
   8c54c:	11403b26 	beq	r2,r5,8c63c <__adddf3+0x780>
   8c550:	0109c83a 	sub	r4,zero,r4
   8c554:	42002034 	orhi	r8,r8,128
   8c558:	01400e04 	movi	r5,56
   8c55c:	29006716 	blt	r5,r4,8c6fc <__adddf3+0x840>
   8c560:	014007c4 	movi	r5,31
   8c564:	29007016 	blt	r5,r4,8c728 <__adddf3+0x86c>
   8c568:	01400804 	movi	r5,32
   8c56c:	290bc83a 	sub	r5,r5,r4
   8c570:	4154983a 	sll	r10,r8,r5
   8c574:	890ed83a 	srl	r7,r17,r4
   8c578:	894a983a 	sll	r5,r17,r5
   8c57c:	4108d83a 	srl	r4,r8,r4
   8c580:	51e2b03a 	or	r17,r10,r7
   8c584:	280ac03a 	cmpne	r5,r5,zero
   8c588:	8962b03a 	or	r17,r17,r5
   8c58c:	89a3883a 	add	r17,r17,r6
   8c590:	2253883a 	add	r9,r4,r9
   8c594:	898d803a 	cmpltu	r6,r17,r6
   8c598:	3251883a 	add	r8,r6,r9
   8c59c:	1021883a 	mov	r16,r2
   8c5a0:	003ee506 	br	8c138 <rx_descriptor_end+0xfff8c0d8>
   8c5a4:	4984b03a 	or	r2,r9,r6
   8c5a8:	103e6326 	beq	r2,zero,8bf38 <rx_descriptor_end+0xfff8bed8>
   8c5ac:	8987c83a 	sub	r3,r17,r6
   8c5b0:	88c9803a 	cmpltu	r4,r17,r3
   8c5b4:	4245c83a 	sub	r2,r8,r9
   8c5b8:	1105c83a 	sub	r2,r2,r4
   8c5bc:	1100202c 	andhi	r4,r2,128
   8c5c0:	203ebb26 	beq	r4,zero,8c0b0 <rx_descriptor_end+0xfff8c050>
   8c5c4:	3463c83a 	sub	r17,r6,r17
   8c5c8:	4a07c83a 	sub	r3,r9,r8
   8c5cc:	344d803a 	cmpltu	r6,r6,r17
   8c5d0:	1991c83a 	sub	r8,r3,r6
   8c5d4:	3825883a 	mov	r18,r7
   8c5d8:	003e5706 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c5dc:	4984b03a 	or	r2,r9,r6
   8c5e0:	10002e26 	beq	r2,zero,8c69c <__adddf3+0x7e0>
   8c5e4:	4004d0fa 	srli	r2,r8,3
   8c5e8:	8822d0fa 	srli	r17,r17,3
   8c5ec:	4010977a 	slli	r8,r8,29
   8c5f0:	10c0022c 	andhi	r3,r2,8
   8c5f4:	4462b03a 	or	r17,r8,r17
   8c5f8:	18000826 	beq	r3,zero,8c61c <__adddf3+0x760>
   8c5fc:	4808d0fa 	srli	r4,r9,3
   8c600:	20c0022c 	andhi	r3,r4,8
   8c604:	1800051e 	bne	r3,zero,8c61c <__adddf3+0x760>
   8c608:	300cd0fa 	srli	r6,r6,3
   8c60c:	4806977a 	slli	r3,r9,29
   8c610:	2005883a 	mov	r2,r4
   8c614:	3825883a 	mov	r18,r7
   8c618:	19a2b03a 	or	r17,r3,r6
   8c61c:	8810d77a 	srli	r8,r17,29
   8c620:	100490fa 	slli	r2,r2,3
   8c624:	882290fa 	slli	r17,r17,3
   8c628:	0401ffc4 	movi	r16,2047
   8c62c:	4090b03a 	or	r8,r8,r2
   8c630:	003e4106 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c634:	0141ffc4 	movi	r5,2047
   8c638:	117fc71e 	bne	r2,r5,8c558 <rx_descriptor_end+0xfff8c4f8>
   8c63c:	4811883a 	mov	r8,r9
   8c640:	3023883a 	mov	r17,r6
   8c644:	1021883a 	mov	r16,r2
   8c648:	003e3b06 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c64c:	10002f26 	beq	r2,zero,8c70c <__adddf3+0x850>
   8c650:	4984b03a 	or	r2,r9,r6
   8c654:	10001126 	beq	r2,zero,8c69c <__adddf3+0x7e0>
   8c658:	4004d0fa 	srli	r2,r8,3
   8c65c:	8822d0fa 	srli	r17,r17,3
   8c660:	4010977a 	slli	r8,r8,29
   8c664:	10c0022c 	andhi	r3,r2,8
   8c668:	4462b03a 	or	r17,r8,r17
   8c66c:	183feb26 	beq	r3,zero,8c61c <rx_descriptor_end+0xfff8c5bc>
   8c670:	4808d0fa 	srli	r4,r9,3
   8c674:	20c0022c 	andhi	r3,r4,8
   8c678:	183fe81e 	bne	r3,zero,8c61c <rx_descriptor_end+0xfff8c5bc>
   8c67c:	300cd0fa 	srli	r6,r6,3
   8c680:	4806977a 	slli	r3,r9,29
   8c684:	2005883a 	mov	r2,r4
   8c688:	19a2b03a 	or	r17,r3,r6
   8c68c:	003fe306 	br	8c61c <rx_descriptor_end+0xfff8c5bc>
   8c690:	0011883a 	mov	r8,zero
   8c694:	0005883a 	mov	r2,zero
   8c698:	003e3f06 	br	8bf98 <rx_descriptor_end+0xfff8bf38>
   8c69c:	0401ffc4 	movi	r16,2047
   8c6a0:	003e2506 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c6a4:	0013883a 	mov	r9,zero
   8c6a8:	003f8406 	br	8c4bc <rx_descriptor_end+0xfff8c45c>
   8c6ac:	0005883a 	mov	r2,zero
   8c6b0:	0007883a 	mov	r3,zero
   8c6b4:	003e8906 	br	8c0dc <rx_descriptor_end+0xfff8c07c>
   8c6b8:	197ff804 	addi	r5,r3,-32
   8c6bc:	01000804 	movi	r4,32
   8c6c0:	414ad83a 	srl	r5,r8,r5
   8c6c4:	19002426 	beq	r3,r4,8c758 <__adddf3+0x89c>
   8c6c8:	01001004 	movi	r4,64
   8c6cc:	20c7c83a 	sub	r3,r4,r3
   8c6d0:	40c6983a 	sll	r3,r8,r3
   8c6d4:	1c46b03a 	or	r3,r3,r17
   8c6d8:	1806c03a 	cmpne	r3,r3,zero
   8c6dc:	28e2b03a 	or	r17,r5,r3
   8c6e0:	0007883a 	mov	r3,zero
   8c6e4:	003f2306 	br	8c374 <rx_descriptor_end+0xfff8c314>
   8c6e8:	0007883a 	mov	r3,zero
   8c6ec:	5811883a 	mov	r8,r11
   8c6f0:	00bfffc4 	movi	r2,-1
   8c6f4:	0401ffc4 	movi	r16,2047
   8c6f8:	003e7806 	br	8c0dc <rx_descriptor_end+0xfff8c07c>
   8c6fc:	4462b03a 	or	r17,r8,r17
   8c700:	8822c03a 	cmpne	r17,r17,zero
   8c704:	0009883a 	mov	r4,zero
   8c708:	003fa006 	br	8c58c <rx_descriptor_end+0xfff8c52c>
   8c70c:	4811883a 	mov	r8,r9
   8c710:	3023883a 	mov	r17,r6
   8c714:	0401ffc4 	movi	r16,2047
   8c718:	003e0706 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c71c:	4811883a 	mov	r8,r9
   8c720:	3023883a 	mov	r17,r6
   8c724:	003e0406 	br	8bf38 <rx_descriptor_end+0xfff8bed8>
   8c728:	21fff804 	addi	r7,r4,-32
   8c72c:	01400804 	movi	r5,32
   8c730:	41ced83a 	srl	r7,r8,r7
   8c734:	21400a26 	beq	r4,r5,8c760 <__adddf3+0x8a4>
   8c738:	01401004 	movi	r5,64
   8c73c:	2909c83a 	sub	r4,r5,r4
   8c740:	4108983a 	sll	r4,r8,r4
   8c744:	2448b03a 	or	r4,r4,r17
   8c748:	2008c03a 	cmpne	r4,r4,zero
   8c74c:	3922b03a 	or	r17,r7,r4
   8c750:	0009883a 	mov	r4,zero
   8c754:	003f8d06 	br	8c58c <rx_descriptor_end+0xfff8c52c>
   8c758:	0007883a 	mov	r3,zero
   8c75c:	003fdd06 	br	8c6d4 <rx_descriptor_end+0xfff8c674>
   8c760:	0009883a 	mov	r4,zero
   8c764:	003ff706 	br	8c744 <rx_descriptor_end+0xfff8c6e4>

0008c768 <__divdf3>:
   8c768:	defff204 	addi	sp,sp,-56
   8c76c:	dd400915 	stw	r21,36(sp)
   8c770:	282ad53a 	srli	r21,r5,20
   8c774:	dd000815 	stw	r20,32(sp)
   8c778:	2828d7fa 	srli	r20,r5,31
   8c77c:	dc000415 	stw	r16,16(sp)
   8c780:	04000434 	movhi	r16,16
   8c784:	df000c15 	stw	fp,48(sp)
   8c788:	843fffc4 	addi	r16,r16,-1
   8c78c:	dfc00d15 	stw	ra,52(sp)
   8c790:	ddc00b15 	stw	r23,44(sp)
   8c794:	dd800a15 	stw	r22,40(sp)
   8c798:	dcc00715 	stw	r19,28(sp)
   8c79c:	dc800615 	stw	r18,24(sp)
   8c7a0:	dc400515 	stw	r17,20(sp)
   8c7a4:	ad41ffcc 	andi	r21,r21,2047
   8c7a8:	2c20703a 	and	r16,r5,r16
   8c7ac:	a7003fcc 	andi	fp,r20,255
   8c7b0:	a8006126 	beq	r21,zero,8c938 <__divdf3+0x1d0>
   8c7b4:	0081ffc4 	movi	r2,2047
   8c7b8:	2025883a 	mov	r18,r4
   8c7bc:	a8803726 	beq	r21,r2,8c89c <__divdf3+0x134>
   8c7c0:	80800434 	orhi	r2,r16,16
   8c7c4:	100490fa 	slli	r2,r2,3
   8c7c8:	2020d77a 	srli	r16,r4,29
   8c7cc:	202490fa 	slli	r18,r4,3
   8c7d0:	ad7f0044 	addi	r21,r21,-1023
   8c7d4:	80a0b03a 	or	r16,r16,r2
   8c7d8:	0027883a 	mov	r19,zero
   8c7dc:	0013883a 	mov	r9,zero
   8c7e0:	3804d53a 	srli	r2,r7,20
   8c7e4:	382cd7fa 	srli	r22,r7,31
   8c7e8:	04400434 	movhi	r17,16
   8c7ec:	8c7fffc4 	addi	r17,r17,-1
   8c7f0:	1081ffcc 	andi	r2,r2,2047
   8c7f4:	3011883a 	mov	r8,r6
   8c7f8:	3c62703a 	and	r17,r7,r17
   8c7fc:	b5c03fcc 	andi	r23,r22,255
   8c800:	10006c26 	beq	r2,zero,8c9b4 <__divdf3+0x24c>
   8c804:	00c1ffc4 	movi	r3,2047
   8c808:	10c06426 	beq	r2,r3,8c99c <__divdf3+0x234>
   8c80c:	88c00434 	orhi	r3,r17,16
   8c810:	180690fa 	slli	r3,r3,3
   8c814:	3022d77a 	srli	r17,r6,29
   8c818:	301090fa 	slli	r8,r6,3
   8c81c:	10bf0044 	addi	r2,r2,-1023
   8c820:	88e2b03a 	or	r17,r17,r3
   8c824:	000f883a 	mov	r7,zero
   8c828:	a58cf03a 	xor	r6,r20,r22
   8c82c:	3cc8b03a 	or	r4,r7,r19
   8c830:	a8abc83a 	sub	r21,r21,r2
   8c834:	008003c4 	movi	r2,15
   8c838:	3007883a 	mov	r3,r6
   8c83c:	34c03fcc 	andi	r19,r6,255
   8c840:	11009036 	bltu	r2,r4,8ca84 <__divdf3+0x31c>
   8c844:	200890ba 	slli	r4,r4,2
   8c848:	00800274 	movhi	r2,9
   8c84c:	10b21704 	addi	r2,r2,-14244
   8c850:	2089883a 	add	r4,r4,r2
   8c854:	20800017 	ldw	r2,0(r4)
   8c858:	1000683a 	jmp	r2
   8c85c:	0008ca84 	movi	zero,9002
   8c860:	0008c8d4 	movui	zero,8995
   8c864:	0008ca74 	movhi	zero,9001
   8c868:	0008c8c8 	cmpgei	zero,zero,8995
   8c86c:	0008ca74 	movhi	zero,9001
   8c870:	0008ca48 	cmpgei	zero,zero,9001
   8c874:	0008ca74 	movhi	zero,9001
   8c878:	0008c8c8 	cmpgei	zero,zero,8995
   8c87c:	0008c8d4 	movui	zero,8995
   8c880:	0008c8d4 	movui	zero,8995
   8c884:	0008ca48 	cmpgei	zero,zero,9001
   8c888:	0008c8c8 	cmpgei	zero,zero,8995
   8c88c:	0008c8b8 	rdprs	zero,zero,8994
   8c890:	0008c8b8 	rdprs	zero,zero,8994
   8c894:	0008c8b8 	rdprs	zero,zero,8994
   8c898:	0008cd68 	cmpgeui	zero,zero,9013
   8c89c:	2404b03a 	or	r2,r4,r16
   8c8a0:	1000661e 	bne	r2,zero,8ca3c <__divdf3+0x2d4>
   8c8a4:	04c00204 	movi	r19,8
   8c8a8:	0021883a 	mov	r16,zero
   8c8ac:	0025883a 	mov	r18,zero
   8c8b0:	02400084 	movi	r9,2
   8c8b4:	003fca06 	br	8c7e0 <rx_descriptor_end+0xfff8c780>
   8c8b8:	8023883a 	mov	r17,r16
   8c8bc:	9011883a 	mov	r8,r18
   8c8c0:	e02f883a 	mov	r23,fp
   8c8c4:	480f883a 	mov	r7,r9
   8c8c8:	00800084 	movi	r2,2
   8c8cc:	3881311e 	bne	r7,r2,8cd94 <__divdf3+0x62c>
   8c8d0:	b827883a 	mov	r19,r23
   8c8d4:	98c0004c 	andi	r3,r19,1
   8c8d8:	0081ffc4 	movi	r2,2047
   8c8dc:	000b883a 	mov	r5,zero
   8c8e0:	0025883a 	mov	r18,zero
   8c8e4:	1004953a 	slli	r2,r2,20
   8c8e8:	18c03fcc 	andi	r3,r3,255
   8c8ec:	04400434 	movhi	r17,16
   8c8f0:	8c7fffc4 	addi	r17,r17,-1
   8c8f4:	180697fa 	slli	r3,r3,31
   8c8f8:	2c4a703a 	and	r5,r5,r17
   8c8fc:	288ab03a 	or	r5,r5,r2
   8c900:	28c6b03a 	or	r3,r5,r3
   8c904:	9005883a 	mov	r2,r18
   8c908:	dfc00d17 	ldw	ra,52(sp)
   8c90c:	df000c17 	ldw	fp,48(sp)
   8c910:	ddc00b17 	ldw	r23,44(sp)
   8c914:	dd800a17 	ldw	r22,40(sp)
   8c918:	dd400917 	ldw	r21,36(sp)
   8c91c:	dd000817 	ldw	r20,32(sp)
   8c920:	dcc00717 	ldw	r19,28(sp)
   8c924:	dc800617 	ldw	r18,24(sp)
   8c928:	dc400517 	ldw	r17,20(sp)
   8c92c:	dc000417 	ldw	r16,16(sp)
   8c930:	dec00e04 	addi	sp,sp,56
   8c934:	f800283a 	ret
   8c938:	2404b03a 	or	r2,r4,r16
   8c93c:	2027883a 	mov	r19,r4
   8c940:	10003926 	beq	r2,zero,8ca28 <__divdf3+0x2c0>
   8c944:	80012e26 	beq	r16,zero,8ce00 <__divdf3+0x698>
   8c948:	8009883a 	mov	r4,r16
   8c94c:	d9800315 	stw	r6,12(sp)
   8c950:	d9c00215 	stw	r7,8(sp)
   8c954:	008e4c00 	call	8e4c0 <__clzsi2>
   8c958:	d9800317 	ldw	r6,12(sp)
   8c95c:	d9c00217 	ldw	r7,8(sp)
   8c960:	113ffd44 	addi	r4,r2,-11
   8c964:	00c00704 	movi	r3,28
   8c968:	19012116 	blt	r3,r4,8cdf0 <__divdf3+0x688>
   8c96c:	00c00744 	movi	r3,29
   8c970:	147ffe04 	addi	r17,r2,-8
   8c974:	1907c83a 	sub	r3,r3,r4
   8c978:	8460983a 	sll	r16,r16,r17
   8c97c:	98c6d83a 	srl	r3,r19,r3
   8c980:	9c64983a 	sll	r18,r19,r17
   8c984:	1c20b03a 	or	r16,r3,r16
   8c988:	1080fcc4 	addi	r2,r2,1011
   8c98c:	00abc83a 	sub	r21,zero,r2
   8c990:	0027883a 	mov	r19,zero
   8c994:	0013883a 	mov	r9,zero
   8c998:	003f9106 	br	8c7e0 <rx_descriptor_end+0xfff8c780>
   8c99c:	3446b03a 	or	r3,r6,r17
   8c9a0:	18001f1e 	bne	r3,zero,8ca20 <__divdf3+0x2b8>
   8c9a4:	0023883a 	mov	r17,zero
   8c9a8:	0011883a 	mov	r8,zero
   8c9ac:	01c00084 	movi	r7,2
   8c9b0:	003f9d06 	br	8c828 <rx_descriptor_end+0xfff8c7c8>
   8c9b4:	3446b03a 	or	r3,r6,r17
   8c9b8:	18001526 	beq	r3,zero,8ca10 <__divdf3+0x2a8>
   8c9bc:	88011b26 	beq	r17,zero,8ce2c <__divdf3+0x6c4>
   8c9c0:	8809883a 	mov	r4,r17
   8c9c4:	d9800315 	stw	r6,12(sp)
   8c9c8:	da400115 	stw	r9,4(sp)
   8c9cc:	008e4c00 	call	8e4c0 <__clzsi2>
   8c9d0:	d9800317 	ldw	r6,12(sp)
   8c9d4:	da400117 	ldw	r9,4(sp)
   8c9d8:	113ffd44 	addi	r4,r2,-11
   8c9dc:	00c00704 	movi	r3,28
   8c9e0:	19010e16 	blt	r3,r4,8ce1c <__divdf3+0x6b4>
   8c9e4:	00c00744 	movi	r3,29
   8c9e8:	123ffe04 	addi	r8,r2,-8
   8c9ec:	1907c83a 	sub	r3,r3,r4
   8c9f0:	8a22983a 	sll	r17,r17,r8
   8c9f4:	30c6d83a 	srl	r3,r6,r3
   8c9f8:	3210983a 	sll	r8,r6,r8
   8c9fc:	1c62b03a 	or	r17,r3,r17
   8ca00:	1080fcc4 	addi	r2,r2,1011
   8ca04:	0085c83a 	sub	r2,zero,r2
   8ca08:	000f883a 	mov	r7,zero
   8ca0c:	003f8606 	br	8c828 <rx_descriptor_end+0xfff8c7c8>
   8ca10:	0023883a 	mov	r17,zero
   8ca14:	0011883a 	mov	r8,zero
   8ca18:	01c00044 	movi	r7,1
   8ca1c:	003f8206 	br	8c828 <rx_descriptor_end+0xfff8c7c8>
   8ca20:	01c000c4 	movi	r7,3
   8ca24:	003f8006 	br	8c828 <rx_descriptor_end+0xfff8c7c8>
   8ca28:	04c00104 	movi	r19,4
   8ca2c:	0021883a 	mov	r16,zero
   8ca30:	0025883a 	mov	r18,zero
   8ca34:	02400044 	movi	r9,1
   8ca38:	003f6906 	br	8c7e0 <rx_descriptor_end+0xfff8c780>
   8ca3c:	04c00304 	movi	r19,12
   8ca40:	024000c4 	movi	r9,3
   8ca44:	003f6606 	br	8c7e0 <rx_descriptor_end+0xfff8c780>
   8ca48:	01400434 	movhi	r5,16
   8ca4c:	0007883a 	mov	r3,zero
   8ca50:	297fffc4 	addi	r5,r5,-1
   8ca54:	04bfffc4 	movi	r18,-1
   8ca58:	0081ffc4 	movi	r2,2047
   8ca5c:	003fa106 	br	8c8e4 <rx_descriptor_end+0xfff8c884>
   8ca60:	00c00044 	movi	r3,1
   8ca64:	1887c83a 	sub	r3,r3,r2
   8ca68:	01000e04 	movi	r4,56
   8ca6c:	20c1210e 	bge	r4,r3,8cef4 <__divdf3+0x78c>
   8ca70:	98c0004c 	andi	r3,r19,1
   8ca74:	0005883a 	mov	r2,zero
   8ca78:	000b883a 	mov	r5,zero
   8ca7c:	0025883a 	mov	r18,zero
   8ca80:	003f9806 	br	8c8e4 <rx_descriptor_end+0xfff8c884>
   8ca84:	8c00fd36 	bltu	r17,r16,8ce7c <__divdf3+0x714>
   8ca88:	8440fb26 	beq	r16,r17,8ce78 <__divdf3+0x710>
   8ca8c:	8007883a 	mov	r3,r16
   8ca90:	ad7fffc4 	addi	r21,r21,-1
   8ca94:	0021883a 	mov	r16,zero
   8ca98:	4004d63a 	srli	r2,r8,24
   8ca9c:	8822923a 	slli	r17,r17,8
   8caa0:	1809883a 	mov	r4,r3
   8caa4:	402c923a 	slli	r22,r8,8
   8caa8:	88b8b03a 	or	fp,r17,r2
   8caac:	e028d43a 	srli	r20,fp,16
   8cab0:	d8c00015 	stw	r3,0(sp)
   8cab4:	e5ffffcc 	andi	r23,fp,65535
   8cab8:	a00b883a 	mov	r5,r20
   8cabc:	008be000 	call	8be00 <__udivsi3>
   8cac0:	d8c00017 	ldw	r3,0(sp)
   8cac4:	a00b883a 	mov	r5,r20
   8cac8:	d8800315 	stw	r2,12(sp)
   8cacc:	1809883a 	mov	r4,r3
   8cad0:	008be640 	call	8be64 <__umodsi3>
   8cad4:	d9800317 	ldw	r6,12(sp)
   8cad8:	1006943a 	slli	r3,r2,16
   8cadc:	9004d43a 	srli	r2,r18,16
   8cae0:	b9a3383a 	mul	r17,r23,r6
   8cae4:	10c4b03a 	or	r2,r2,r3
   8cae8:	1440062e 	bgeu	r2,r17,8cb04 <__divdf3+0x39c>
   8caec:	1705883a 	add	r2,r2,fp
   8caf0:	30ffffc4 	addi	r3,r6,-1
   8caf4:	1700ee36 	bltu	r2,fp,8ceb0 <__divdf3+0x748>
   8caf8:	1440ed2e 	bgeu	r2,r17,8ceb0 <__divdf3+0x748>
   8cafc:	31bfff84 	addi	r6,r6,-2
   8cb00:	1705883a 	add	r2,r2,fp
   8cb04:	1463c83a 	sub	r17,r2,r17
   8cb08:	a00b883a 	mov	r5,r20
   8cb0c:	8809883a 	mov	r4,r17
   8cb10:	d9800315 	stw	r6,12(sp)
   8cb14:	008be000 	call	8be00 <__udivsi3>
   8cb18:	a00b883a 	mov	r5,r20
   8cb1c:	8809883a 	mov	r4,r17
   8cb20:	d8800215 	stw	r2,8(sp)
   8cb24:	008be640 	call	8be64 <__umodsi3>
   8cb28:	d9c00217 	ldw	r7,8(sp)
   8cb2c:	1004943a 	slli	r2,r2,16
   8cb30:	94bfffcc 	andi	r18,r18,65535
   8cb34:	b9d1383a 	mul	r8,r23,r7
   8cb38:	90a4b03a 	or	r18,r18,r2
   8cb3c:	d9800317 	ldw	r6,12(sp)
   8cb40:	9200062e 	bgeu	r18,r8,8cb5c <__divdf3+0x3f4>
   8cb44:	9725883a 	add	r18,r18,fp
   8cb48:	38bfffc4 	addi	r2,r7,-1
   8cb4c:	9700d636 	bltu	r18,fp,8cea8 <__divdf3+0x740>
   8cb50:	9200d52e 	bgeu	r18,r8,8cea8 <__divdf3+0x740>
   8cb54:	39ffff84 	addi	r7,r7,-2
   8cb58:	9725883a 	add	r18,r18,fp
   8cb5c:	3004943a 	slli	r2,r6,16
   8cb60:	b012d43a 	srli	r9,r22,16
   8cb64:	b1bfffcc 	andi	r6,r22,65535
   8cb68:	11e2b03a 	or	r17,r2,r7
   8cb6c:	8806d43a 	srli	r3,r17,16
   8cb70:	893fffcc 	andi	r4,r17,65535
   8cb74:	218b383a 	mul	r5,r4,r6
   8cb78:	30c5383a 	mul	r2,r6,r3
   8cb7c:	2249383a 	mul	r4,r4,r9
   8cb80:	280ed43a 	srli	r7,r5,16
   8cb84:	9225c83a 	sub	r18,r18,r8
   8cb88:	2089883a 	add	r4,r4,r2
   8cb8c:	3909883a 	add	r4,r7,r4
   8cb90:	1a47383a 	mul	r3,r3,r9
   8cb94:	2080022e 	bgeu	r4,r2,8cba0 <__divdf3+0x438>
   8cb98:	00800074 	movhi	r2,1
   8cb9c:	1887883a 	add	r3,r3,r2
   8cba0:	2004d43a 	srli	r2,r4,16
   8cba4:	2008943a 	slli	r4,r4,16
   8cba8:	297fffcc 	andi	r5,r5,65535
   8cbac:	10c7883a 	add	r3,r2,r3
   8cbb0:	2149883a 	add	r4,r4,r5
   8cbb4:	90c0a536 	bltu	r18,r3,8ce4c <__divdf3+0x6e4>
   8cbb8:	90c0bf26 	beq	r18,r3,8ceb8 <__divdf3+0x750>
   8cbbc:	90c7c83a 	sub	r3,r18,r3
   8cbc0:	810fc83a 	sub	r7,r16,r4
   8cbc4:	81e5803a 	cmpltu	r18,r16,r7
   8cbc8:	1ca5c83a 	sub	r18,r3,r18
   8cbcc:	e480c126 	beq	fp,r18,8ced4 <__divdf3+0x76c>
   8cbd0:	a00b883a 	mov	r5,r20
   8cbd4:	9009883a 	mov	r4,r18
   8cbd8:	d9800315 	stw	r6,12(sp)
   8cbdc:	d9c00215 	stw	r7,8(sp)
   8cbe0:	da400115 	stw	r9,4(sp)
   8cbe4:	008be000 	call	8be00 <__udivsi3>
   8cbe8:	a00b883a 	mov	r5,r20
   8cbec:	9009883a 	mov	r4,r18
   8cbf0:	d8800015 	stw	r2,0(sp)
   8cbf4:	008be640 	call	8be64 <__umodsi3>
   8cbf8:	d9c00217 	ldw	r7,8(sp)
   8cbfc:	da000017 	ldw	r8,0(sp)
   8cc00:	1006943a 	slli	r3,r2,16
   8cc04:	3804d43a 	srli	r2,r7,16
   8cc08:	ba21383a 	mul	r16,r23,r8
   8cc0c:	d9800317 	ldw	r6,12(sp)
   8cc10:	10c4b03a 	or	r2,r2,r3
   8cc14:	da400117 	ldw	r9,4(sp)
   8cc18:	1400062e 	bgeu	r2,r16,8cc34 <__divdf3+0x4cc>
   8cc1c:	1705883a 	add	r2,r2,fp
   8cc20:	40ffffc4 	addi	r3,r8,-1
   8cc24:	1700ad36 	bltu	r2,fp,8cedc <__divdf3+0x774>
   8cc28:	1400ac2e 	bgeu	r2,r16,8cedc <__divdf3+0x774>
   8cc2c:	423fff84 	addi	r8,r8,-2
   8cc30:	1705883a 	add	r2,r2,fp
   8cc34:	1421c83a 	sub	r16,r2,r16
   8cc38:	a00b883a 	mov	r5,r20
   8cc3c:	8009883a 	mov	r4,r16
   8cc40:	d9800315 	stw	r6,12(sp)
   8cc44:	d9c00215 	stw	r7,8(sp)
   8cc48:	da000015 	stw	r8,0(sp)
   8cc4c:	da400115 	stw	r9,4(sp)
   8cc50:	008be000 	call	8be00 <__udivsi3>
   8cc54:	8009883a 	mov	r4,r16
   8cc58:	a00b883a 	mov	r5,r20
   8cc5c:	1025883a 	mov	r18,r2
   8cc60:	008be640 	call	8be64 <__umodsi3>
   8cc64:	d9c00217 	ldw	r7,8(sp)
   8cc68:	1004943a 	slli	r2,r2,16
   8cc6c:	bcaf383a 	mul	r23,r23,r18
   8cc70:	393fffcc 	andi	r4,r7,65535
   8cc74:	2088b03a 	or	r4,r4,r2
   8cc78:	d9800317 	ldw	r6,12(sp)
   8cc7c:	da000017 	ldw	r8,0(sp)
   8cc80:	da400117 	ldw	r9,4(sp)
   8cc84:	25c0062e 	bgeu	r4,r23,8cca0 <__divdf3+0x538>
   8cc88:	2709883a 	add	r4,r4,fp
   8cc8c:	90bfffc4 	addi	r2,r18,-1
   8cc90:	27009436 	bltu	r4,fp,8cee4 <__divdf3+0x77c>
   8cc94:	25c0932e 	bgeu	r4,r23,8cee4 <__divdf3+0x77c>
   8cc98:	94bfff84 	addi	r18,r18,-2
   8cc9c:	2709883a 	add	r4,r4,fp
   8cca0:	4004943a 	slli	r2,r8,16
   8cca4:	25efc83a 	sub	r23,r4,r23
   8cca8:	1490b03a 	or	r8,r2,r18
   8ccac:	4008d43a 	srli	r4,r8,16
   8ccb0:	40ffffcc 	andi	r3,r8,65535
   8ccb4:	30c5383a 	mul	r2,r6,r3
   8ccb8:	1a47383a 	mul	r3,r3,r9
   8ccbc:	310d383a 	mul	r6,r6,r4
   8ccc0:	100ad43a 	srli	r5,r2,16
   8ccc4:	4913383a 	mul	r9,r9,r4
   8ccc8:	1987883a 	add	r3,r3,r6
   8cccc:	28c7883a 	add	r3,r5,r3
   8ccd0:	1980022e 	bgeu	r3,r6,8ccdc <__divdf3+0x574>
   8ccd4:	01000074 	movhi	r4,1
   8ccd8:	4913883a 	add	r9,r9,r4
   8ccdc:	1808d43a 	srli	r4,r3,16
   8cce0:	1806943a 	slli	r3,r3,16
   8cce4:	10bfffcc 	andi	r2,r2,65535
   8cce8:	2253883a 	add	r9,r4,r9
   8ccec:	1887883a 	add	r3,r3,r2
   8ccf0:	ba403836 	bltu	r23,r9,8cdd4 <__divdf3+0x66c>
   8ccf4:	ba403626 	beq	r23,r9,8cdd0 <__divdf3+0x668>
   8ccf8:	42000054 	ori	r8,r8,1
   8ccfc:	a880ffc4 	addi	r2,r21,1023
   8cd00:	00bf570e 	bge	zero,r2,8ca60 <rx_descriptor_end+0xfff8ca00>
   8cd04:	40c001cc 	andi	r3,r8,7
   8cd08:	18000726 	beq	r3,zero,8cd28 <__divdf3+0x5c0>
   8cd0c:	40c003cc 	andi	r3,r8,15
   8cd10:	01000104 	movi	r4,4
   8cd14:	19000426 	beq	r3,r4,8cd28 <__divdf3+0x5c0>
   8cd18:	4107883a 	add	r3,r8,r4
   8cd1c:	1a11803a 	cmpltu	r8,r3,r8
   8cd20:	8a23883a 	add	r17,r17,r8
   8cd24:	1811883a 	mov	r8,r3
   8cd28:	88c0402c 	andhi	r3,r17,256
   8cd2c:	18000426 	beq	r3,zero,8cd40 <__divdf3+0x5d8>
   8cd30:	00ffc034 	movhi	r3,65280
   8cd34:	18ffffc4 	addi	r3,r3,-1
   8cd38:	a8810004 	addi	r2,r21,1024
   8cd3c:	88e2703a 	and	r17,r17,r3
   8cd40:	00c1ff84 	movi	r3,2046
   8cd44:	18bee316 	blt	r3,r2,8c8d4 <rx_descriptor_end+0xfff8c874>
   8cd48:	8824977a 	slli	r18,r17,29
   8cd4c:	4010d0fa 	srli	r8,r8,3
   8cd50:	8822927a 	slli	r17,r17,9
   8cd54:	1081ffcc 	andi	r2,r2,2047
   8cd58:	9224b03a 	or	r18,r18,r8
   8cd5c:	880ad33a 	srli	r5,r17,12
   8cd60:	98c0004c 	andi	r3,r19,1
   8cd64:	003edf06 	br	8c8e4 <rx_descriptor_end+0xfff8c884>
   8cd68:	8080022c 	andhi	r2,r16,8
   8cd6c:	10001226 	beq	r2,zero,8cdb8 <__divdf3+0x650>
   8cd70:	8880022c 	andhi	r2,r17,8
   8cd74:	1000101e 	bne	r2,zero,8cdb8 <__divdf3+0x650>
   8cd78:	00800434 	movhi	r2,16
   8cd7c:	89400234 	orhi	r5,r17,8
   8cd80:	10bfffc4 	addi	r2,r2,-1
   8cd84:	b007883a 	mov	r3,r22
   8cd88:	288a703a 	and	r5,r5,r2
   8cd8c:	4025883a 	mov	r18,r8
   8cd90:	003f3106 	br	8ca58 <rx_descriptor_end+0xfff8c9f8>
   8cd94:	008000c4 	movi	r2,3
   8cd98:	3880a626 	beq	r7,r2,8d034 <__divdf3+0x8cc>
   8cd9c:	00800044 	movi	r2,1
   8cda0:	3880521e 	bne	r7,r2,8ceec <__divdf3+0x784>
   8cda4:	b807883a 	mov	r3,r23
   8cda8:	0005883a 	mov	r2,zero
   8cdac:	000b883a 	mov	r5,zero
   8cdb0:	0025883a 	mov	r18,zero
   8cdb4:	003ecb06 	br	8c8e4 <rx_descriptor_end+0xfff8c884>
   8cdb8:	00800434 	movhi	r2,16
   8cdbc:	81400234 	orhi	r5,r16,8
   8cdc0:	10bfffc4 	addi	r2,r2,-1
   8cdc4:	a007883a 	mov	r3,r20
   8cdc8:	288a703a 	and	r5,r5,r2
   8cdcc:	003f2206 	br	8ca58 <rx_descriptor_end+0xfff8c9f8>
   8cdd0:	183fca26 	beq	r3,zero,8ccfc <rx_descriptor_end+0xfff8cc9c>
   8cdd4:	e5ef883a 	add	r23,fp,r23
   8cdd8:	40bfffc4 	addi	r2,r8,-1
   8cddc:	bf00392e 	bgeu	r23,fp,8cec4 <__divdf3+0x75c>
   8cde0:	1011883a 	mov	r8,r2
   8cde4:	ba7fc41e 	bne	r23,r9,8ccf8 <rx_descriptor_end+0xfff8cc98>
   8cde8:	b0ffc31e 	bne	r22,r3,8ccf8 <rx_descriptor_end+0xfff8cc98>
   8cdec:	003fc306 	br	8ccfc <rx_descriptor_end+0xfff8cc9c>
   8cdf0:	143ff604 	addi	r16,r2,-40
   8cdf4:	9c20983a 	sll	r16,r19,r16
   8cdf8:	0025883a 	mov	r18,zero
   8cdfc:	003ee206 	br	8c988 <rx_descriptor_end+0xfff8c928>
   8ce00:	d9800315 	stw	r6,12(sp)
   8ce04:	d9c00215 	stw	r7,8(sp)
   8ce08:	008e4c00 	call	8e4c0 <__clzsi2>
   8ce0c:	10800804 	addi	r2,r2,32
   8ce10:	d9c00217 	ldw	r7,8(sp)
   8ce14:	d9800317 	ldw	r6,12(sp)
   8ce18:	003ed106 	br	8c960 <rx_descriptor_end+0xfff8c900>
   8ce1c:	147ff604 	addi	r17,r2,-40
   8ce20:	3462983a 	sll	r17,r6,r17
   8ce24:	0011883a 	mov	r8,zero
   8ce28:	003ef506 	br	8ca00 <rx_descriptor_end+0xfff8c9a0>
   8ce2c:	3009883a 	mov	r4,r6
   8ce30:	d9800315 	stw	r6,12(sp)
   8ce34:	da400115 	stw	r9,4(sp)
   8ce38:	008e4c00 	call	8e4c0 <__clzsi2>
   8ce3c:	10800804 	addi	r2,r2,32
   8ce40:	da400117 	ldw	r9,4(sp)
   8ce44:	d9800317 	ldw	r6,12(sp)
   8ce48:	003ee306 	br	8c9d8 <rx_descriptor_end+0xfff8c978>
   8ce4c:	85a1883a 	add	r16,r16,r22
   8ce50:	8585803a 	cmpltu	r2,r16,r22
   8ce54:	1705883a 	add	r2,r2,fp
   8ce58:	14a5883a 	add	r18,r2,r18
   8ce5c:	88bfffc4 	addi	r2,r17,-1
   8ce60:	e4800c2e 	bgeu	fp,r18,8ce94 <__divdf3+0x72c>
   8ce64:	90c03e36 	bltu	r18,r3,8cf60 <__divdf3+0x7f8>
   8ce68:	1c806926 	beq	r3,r18,8d010 <__divdf3+0x8a8>
   8ce6c:	90c7c83a 	sub	r3,r18,r3
   8ce70:	1023883a 	mov	r17,r2
   8ce74:	003f5206 	br	8cbc0 <rx_descriptor_end+0xfff8cb60>
   8ce78:	923f0436 	bltu	r18,r8,8ca8c <rx_descriptor_end+0xfff8ca2c>
   8ce7c:	800897fa 	slli	r4,r16,31
   8ce80:	9004d07a 	srli	r2,r18,1
   8ce84:	8006d07a 	srli	r3,r16,1
   8ce88:	902097fa 	slli	r16,r18,31
   8ce8c:	20a4b03a 	or	r18,r4,r2
   8ce90:	003f0106 	br	8ca98 <rx_descriptor_end+0xfff8ca38>
   8ce94:	e4bff51e 	bne	fp,r18,8ce6c <rx_descriptor_end+0xfff8ce0c>
   8ce98:	85bff22e 	bgeu	r16,r22,8ce64 <rx_descriptor_end+0xfff8ce04>
   8ce9c:	e0c7c83a 	sub	r3,fp,r3
   8cea0:	1023883a 	mov	r17,r2
   8cea4:	003f4606 	br	8cbc0 <rx_descriptor_end+0xfff8cb60>
   8cea8:	100f883a 	mov	r7,r2
   8ceac:	003f2b06 	br	8cb5c <rx_descriptor_end+0xfff8cafc>
   8ceb0:	180d883a 	mov	r6,r3
   8ceb4:	003f1306 	br	8cb04 <rx_descriptor_end+0xfff8caa4>
   8ceb8:	813fe436 	bltu	r16,r4,8ce4c <rx_descriptor_end+0xfff8cdec>
   8cebc:	0007883a 	mov	r3,zero
   8cec0:	003f3f06 	br	8cbc0 <rx_descriptor_end+0xfff8cb60>
   8cec4:	ba402c36 	bltu	r23,r9,8cf78 <__divdf3+0x810>
   8cec8:	4dc05426 	beq	r9,r23,8d01c <__divdf3+0x8b4>
   8cecc:	1011883a 	mov	r8,r2
   8ced0:	003f8906 	br	8ccf8 <rx_descriptor_end+0xfff8cc98>
   8ced4:	023fffc4 	movi	r8,-1
   8ced8:	003f8806 	br	8ccfc <rx_descriptor_end+0xfff8cc9c>
   8cedc:	1811883a 	mov	r8,r3
   8cee0:	003f5406 	br	8cc34 <rx_descriptor_end+0xfff8cbd4>
   8cee4:	1025883a 	mov	r18,r2
   8cee8:	003f6d06 	br	8cca0 <rx_descriptor_end+0xfff8cc40>
   8ceec:	b827883a 	mov	r19,r23
   8cef0:	003f8206 	br	8ccfc <rx_descriptor_end+0xfff8cc9c>
   8cef4:	010007c4 	movi	r4,31
   8cef8:	20c02616 	blt	r4,r3,8cf94 <__divdf3+0x82c>
   8cefc:	00800804 	movi	r2,32
   8cf00:	10c5c83a 	sub	r2,r2,r3
   8cf04:	888a983a 	sll	r5,r17,r2
   8cf08:	40c8d83a 	srl	r4,r8,r3
   8cf0c:	4084983a 	sll	r2,r8,r2
   8cf10:	88e2d83a 	srl	r17,r17,r3
   8cf14:	2906b03a 	or	r3,r5,r4
   8cf18:	1004c03a 	cmpne	r2,r2,zero
   8cf1c:	1886b03a 	or	r3,r3,r2
   8cf20:	188001cc 	andi	r2,r3,7
   8cf24:	10000726 	beq	r2,zero,8cf44 <__divdf3+0x7dc>
   8cf28:	188003cc 	andi	r2,r3,15
   8cf2c:	01000104 	movi	r4,4
   8cf30:	11000426 	beq	r2,r4,8cf44 <__divdf3+0x7dc>
   8cf34:	1805883a 	mov	r2,r3
   8cf38:	10c00104 	addi	r3,r2,4
   8cf3c:	1885803a 	cmpltu	r2,r3,r2
   8cf40:	88a3883a 	add	r17,r17,r2
   8cf44:	8880202c 	andhi	r2,r17,128
   8cf48:	10002726 	beq	r2,zero,8cfe8 <__divdf3+0x880>
   8cf4c:	98c0004c 	andi	r3,r19,1
   8cf50:	00800044 	movi	r2,1
   8cf54:	000b883a 	mov	r5,zero
   8cf58:	0025883a 	mov	r18,zero
   8cf5c:	003e6106 	br	8c8e4 <rx_descriptor_end+0xfff8c884>
   8cf60:	85a1883a 	add	r16,r16,r22
   8cf64:	8585803a 	cmpltu	r2,r16,r22
   8cf68:	1705883a 	add	r2,r2,fp
   8cf6c:	14a5883a 	add	r18,r2,r18
   8cf70:	8c7fff84 	addi	r17,r17,-2
   8cf74:	003f1106 	br	8cbbc <rx_descriptor_end+0xfff8cb5c>
   8cf78:	b589883a 	add	r4,r22,r22
   8cf7c:	25ad803a 	cmpltu	r22,r4,r22
   8cf80:	b739883a 	add	fp,r22,fp
   8cf84:	40bfff84 	addi	r2,r8,-2
   8cf88:	bf2f883a 	add	r23,r23,fp
   8cf8c:	202d883a 	mov	r22,r4
   8cf90:	003f9306 	br	8cde0 <rx_descriptor_end+0xfff8cd80>
   8cf94:	013ff844 	movi	r4,-31
   8cf98:	2085c83a 	sub	r2,r4,r2
   8cf9c:	8888d83a 	srl	r4,r17,r2
   8cfa0:	00800804 	movi	r2,32
   8cfa4:	18802126 	beq	r3,r2,8d02c <__divdf3+0x8c4>
   8cfa8:	00801004 	movi	r2,64
   8cfac:	10c5c83a 	sub	r2,r2,r3
   8cfb0:	8884983a 	sll	r2,r17,r2
   8cfb4:	1204b03a 	or	r2,r2,r8
   8cfb8:	1004c03a 	cmpne	r2,r2,zero
   8cfbc:	2084b03a 	or	r2,r4,r2
   8cfc0:	144001cc 	andi	r17,r2,7
   8cfc4:	88000d1e 	bne	r17,zero,8cffc <__divdf3+0x894>
   8cfc8:	000b883a 	mov	r5,zero
   8cfcc:	1024d0fa 	srli	r18,r2,3
   8cfd0:	98c0004c 	andi	r3,r19,1
   8cfd4:	0005883a 	mov	r2,zero
   8cfd8:	9464b03a 	or	r18,r18,r17
   8cfdc:	003e4106 	br	8c8e4 <rx_descriptor_end+0xfff8c884>
   8cfe0:	1007883a 	mov	r3,r2
   8cfe4:	0023883a 	mov	r17,zero
   8cfe8:	880a927a 	slli	r5,r17,9
   8cfec:	1805883a 	mov	r2,r3
   8cff0:	8822977a 	slli	r17,r17,29
   8cff4:	280ad33a 	srli	r5,r5,12
   8cff8:	003ff406 	br	8cfcc <rx_descriptor_end+0xfff8cf6c>
   8cffc:	10c003cc 	andi	r3,r2,15
   8d000:	01000104 	movi	r4,4
   8d004:	193ff626 	beq	r3,r4,8cfe0 <rx_descriptor_end+0xfff8cf80>
   8d008:	0023883a 	mov	r17,zero
   8d00c:	003fca06 	br	8cf38 <rx_descriptor_end+0xfff8ced8>
   8d010:	813fd336 	bltu	r16,r4,8cf60 <rx_descriptor_end+0xfff8cf00>
   8d014:	1023883a 	mov	r17,r2
   8d018:	003fa806 	br	8cebc <rx_descriptor_end+0xfff8ce5c>
   8d01c:	b0ffd636 	bltu	r22,r3,8cf78 <rx_descriptor_end+0xfff8cf18>
   8d020:	1011883a 	mov	r8,r2
   8d024:	b0ff341e 	bne	r22,r3,8ccf8 <rx_descriptor_end+0xfff8cc98>
   8d028:	003f3406 	br	8ccfc <rx_descriptor_end+0xfff8cc9c>
   8d02c:	0005883a 	mov	r2,zero
   8d030:	003fe006 	br	8cfb4 <rx_descriptor_end+0xfff8cf54>
   8d034:	00800434 	movhi	r2,16
   8d038:	89400234 	orhi	r5,r17,8
   8d03c:	10bfffc4 	addi	r2,r2,-1
   8d040:	b807883a 	mov	r3,r23
   8d044:	288a703a 	and	r5,r5,r2
   8d048:	4025883a 	mov	r18,r8
   8d04c:	003e8206 	br	8ca58 <rx_descriptor_end+0xfff8c9f8>

0008d050 <__eqdf2>:
   8d050:	2804d53a 	srli	r2,r5,20
   8d054:	3806d53a 	srli	r3,r7,20
   8d058:	02000434 	movhi	r8,16
   8d05c:	423fffc4 	addi	r8,r8,-1
   8d060:	1081ffcc 	andi	r2,r2,2047
   8d064:	0281ffc4 	movi	r10,2047
   8d068:	2a12703a 	and	r9,r5,r8
   8d06c:	18c1ffcc 	andi	r3,r3,2047
   8d070:	3a10703a 	and	r8,r7,r8
   8d074:	280ad7fa 	srli	r5,r5,31
   8d078:	380ed7fa 	srli	r7,r7,31
   8d07c:	12801026 	beq	r2,r10,8d0c0 <__eqdf2+0x70>
   8d080:	0281ffc4 	movi	r10,2047
   8d084:	1a800a26 	beq	r3,r10,8d0b0 <__eqdf2+0x60>
   8d088:	10c00226 	beq	r2,r3,8d094 <__eqdf2+0x44>
   8d08c:	00800044 	movi	r2,1
   8d090:	f800283a 	ret
   8d094:	4a3ffd1e 	bne	r9,r8,8d08c <rx_descriptor_end+0xfff8d02c>
   8d098:	21bffc1e 	bne	r4,r6,8d08c <rx_descriptor_end+0xfff8d02c>
   8d09c:	29c00c26 	beq	r5,r7,8d0d0 <__eqdf2+0x80>
   8d0a0:	103ffa1e 	bne	r2,zero,8d08c <rx_descriptor_end+0xfff8d02c>
   8d0a4:	2244b03a 	or	r2,r4,r9
   8d0a8:	1004c03a 	cmpne	r2,r2,zero
   8d0ac:	f800283a 	ret
   8d0b0:	3214b03a 	or	r10,r6,r8
   8d0b4:	503ff426 	beq	r10,zero,8d088 <rx_descriptor_end+0xfff8d028>
   8d0b8:	00800044 	movi	r2,1
   8d0bc:	f800283a 	ret
   8d0c0:	2254b03a 	or	r10,r4,r9
   8d0c4:	503fee26 	beq	r10,zero,8d080 <rx_descriptor_end+0xfff8d020>
   8d0c8:	00800044 	movi	r2,1
   8d0cc:	f800283a 	ret
   8d0d0:	0005883a 	mov	r2,zero
   8d0d4:	f800283a 	ret

0008d0d8 <__gedf2>:
   8d0d8:	2804d53a 	srli	r2,r5,20
   8d0dc:	3806d53a 	srli	r3,r7,20
   8d0e0:	02000434 	movhi	r8,16
   8d0e4:	423fffc4 	addi	r8,r8,-1
   8d0e8:	1081ffcc 	andi	r2,r2,2047
   8d0ec:	0241ffc4 	movi	r9,2047
   8d0f0:	2a14703a 	and	r10,r5,r8
   8d0f4:	18c1ffcc 	andi	r3,r3,2047
   8d0f8:	3a10703a 	and	r8,r7,r8
   8d0fc:	280ad7fa 	srli	r5,r5,31
   8d100:	380ed7fa 	srli	r7,r7,31
   8d104:	12401d26 	beq	r2,r9,8d17c <__gedf2+0xa4>
   8d108:	0241ffc4 	movi	r9,2047
   8d10c:	1a401226 	beq	r3,r9,8d158 <__gedf2+0x80>
   8d110:	1000081e 	bne	r2,zero,8d134 <__gedf2+0x5c>
   8d114:	2296b03a 	or	r11,r4,r10
   8d118:	5813003a 	cmpeq	r9,r11,zero
   8d11c:	1800091e 	bne	r3,zero,8d144 <__gedf2+0x6c>
   8d120:	3218b03a 	or	r12,r6,r8
   8d124:	6000071e 	bne	r12,zero,8d144 <__gedf2+0x6c>
   8d128:	0005883a 	mov	r2,zero
   8d12c:	5800101e 	bne	r11,zero,8d170 <__gedf2+0x98>
   8d130:	f800283a 	ret
   8d134:	18000c1e 	bne	r3,zero,8d168 <__gedf2+0x90>
   8d138:	3212b03a 	or	r9,r6,r8
   8d13c:	48000c26 	beq	r9,zero,8d170 <__gedf2+0x98>
   8d140:	0013883a 	mov	r9,zero
   8d144:	39c03fcc 	andi	r7,r7,255
   8d148:	48000826 	beq	r9,zero,8d16c <__gedf2+0x94>
   8d14c:	38000926 	beq	r7,zero,8d174 <__gedf2+0x9c>
   8d150:	00800044 	movi	r2,1
   8d154:	f800283a 	ret
   8d158:	3212b03a 	or	r9,r6,r8
   8d15c:	483fec26 	beq	r9,zero,8d110 <rx_descriptor_end+0xfff8d0b0>
   8d160:	00bfff84 	movi	r2,-2
   8d164:	f800283a 	ret
   8d168:	39c03fcc 	andi	r7,r7,255
   8d16c:	29c00626 	beq	r5,r7,8d188 <__gedf2+0xb0>
   8d170:	283ff726 	beq	r5,zero,8d150 <rx_descriptor_end+0xfff8d0f0>
   8d174:	00bfffc4 	movi	r2,-1
   8d178:	f800283a 	ret
   8d17c:	2292b03a 	or	r9,r4,r10
   8d180:	483fe126 	beq	r9,zero,8d108 <rx_descriptor_end+0xfff8d0a8>
   8d184:	003ff606 	br	8d160 <rx_descriptor_end+0xfff8d100>
   8d188:	18bff916 	blt	r3,r2,8d170 <rx_descriptor_end+0xfff8d110>
   8d18c:	10c00316 	blt	r2,r3,8d19c <__gedf2+0xc4>
   8d190:	42bff736 	bltu	r8,r10,8d170 <rx_descriptor_end+0xfff8d110>
   8d194:	52000326 	beq	r10,r8,8d1a4 <__gedf2+0xcc>
   8d198:	5200042e 	bgeu	r10,r8,8d1ac <__gedf2+0xd4>
   8d19c:	283fec1e 	bne	r5,zero,8d150 <rx_descriptor_end+0xfff8d0f0>
   8d1a0:	003ff406 	br	8d174 <rx_descriptor_end+0xfff8d114>
   8d1a4:	313ff236 	bltu	r6,r4,8d170 <rx_descriptor_end+0xfff8d110>
   8d1a8:	21bffc36 	bltu	r4,r6,8d19c <rx_descriptor_end+0xfff8d13c>
   8d1ac:	0005883a 	mov	r2,zero
   8d1b0:	f800283a 	ret

0008d1b4 <__ledf2>:
   8d1b4:	2804d53a 	srli	r2,r5,20
   8d1b8:	3810d53a 	srli	r8,r7,20
   8d1bc:	00c00434 	movhi	r3,16
   8d1c0:	18ffffc4 	addi	r3,r3,-1
   8d1c4:	1081ffcc 	andi	r2,r2,2047
   8d1c8:	0241ffc4 	movi	r9,2047
   8d1cc:	28d4703a 	and	r10,r5,r3
   8d1d0:	4201ffcc 	andi	r8,r8,2047
   8d1d4:	38c6703a 	and	r3,r7,r3
   8d1d8:	280ad7fa 	srli	r5,r5,31
   8d1dc:	380ed7fa 	srli	r7,r7,31
   8d1e0:	12401f26 	beq	r2,r9,8d260 <__ledf2+0xac>
   8d1e4:	0241ffc4 	movi	r9,2047
   8d1e8:	42401426 	beq	r8,r9,8d23c <__ledf2+0x88>
   8d1ec:	1000091e 	bne	r2,zero,8d214 <__ledf2+0x60>
   8d1f0:	2296b03a 	or	r11,r4,r10
   8d1f4:	5813003a 	cmpeq	r9,r11,zero
   8d1f8:	29403fcc 	andi	r5,r5,255
   8d1fc:	40000a1e 	bne	r8,zero,8d228 <__ledf2+0x74>
   8d200:	30d8b03a 	or	r12,r6,r3
   8d204:	6000081e 	bne	r12,zero,8d228 <__ledf2+0x74>
   8d208:	0005883a 	mov	r2,zero
   8d20c:	5800111e 	bne	r11,zero,8d254 <__ledf2+0xa0>
   8d210:	f800283a 	ret
   8d214:	29403fcc 	andi	r5,r5,255
   8d218:	40000c1e 	bne	r8,zero,8d24c <__ledf2+0x98>
   8d21c:	30d2b03a 	or	r9,r6,r3
   8d220:	48000c26 	beq	r9,zero,8d254 <__ledf2+0xa0>
   8d224:	0013883a 	mov	r9,zero
   8d228:	39c03fcc 	andi	r7,r7,255
   8d22c:	48000826 	beq	r9,zero,8d250 <__ledf2+0x9c>
   8d230:	38001126 	beq	r7,zero,8d278 <__ledf2+0xc4>
   8d234:	00800044 	movi	r2,1
   8d238:	f800283a 	ret
   8d23c:	30d2b03a 	or	r9,r6,r3
   8d240:	483fea26 	beq	r9,zero,8d1ec <rx_descriptor_end+0xfff8d18c>
   8d244:	00800084 	movi	r2,2
   8d248:	f800283a 	ret
   8d24c:	39c03fcc 	andi	r7,r7,255
   8d250:	39400726 	beq	r7,r5,8d270 <__ledf2+0xbc>
   8d254:	2800081e 	bne	r5,zero,8d278 <__ledf2+0xc4>
   8d258:	00800044 	movi	r2,1
   8d25c:	f800283a 	ret
   8d260:	2292b03a 	or	r9,r4,r10
   8d264:	483fdf26 	beq	r9,zero,8d1e4 <rx_descriptor_end+0xfff8d184>
   8d268:	00800084 	movi	r2,2
   8d26c:	f800283a 	ret
   8d270:	4080030e 	bge	r8,r2,8d280 <__ledf2+0xcc>
   8d274:	383fef26 	beq	r7,zero,8d234 <rx_descriptor_end+0xfff8d1d4>
   8d278:	00bfffc4 	movi	r2,-1
   8d27c:	f800283a 	ret
   8d280:	123feb16 	blt	r2,r8,8d230 <rx_descriptor_end+0xfff8d1d0>
   8d284:	1abff336 	bltu	r3,r10,8d254 <rx_descriptor_end+0xfff8d1f4>
   8d288:	50c00326 	beq	r10,r3,8d298 <__ledf2+0xe4>
   8d28c:	50c0042e 	bgeu	r10,r3,8d2a0 <__ledf2+0xec>
   8d290:	283fe81e 	bne	r5,zero,8d234 <rx_descriptor_end+0xfff8d1d4>
   8d294:	003ff806 	br	8d278 <rx_descriptor_end+0xfff8d218>
   8d298:	313fee36 	bltu	r6,r4,8d254 <rx_descriptor_end+0xfff8d1f4>
   8d29c:	21bffc36 	bltu	r4,r6,8d290 <rx_descriptor_end+0xfff8d230>
   8d2a0:	0005883a 	mov	r2,zero
   8d2a4:	f800283a 	ret

0008d2a8 <__muldf3>:
   8d2a8:	defff304 	addi	sp,sp,-52
   8d2ac:	2804d53a 	srli	r2,r5,20
   8d2b0:	dd800915 	stw	r22,36(sp)
   8d2b4:	282cd7fa 	srli	r22,r5,31
   8d2b8:	dc000315 	stw	r16,12(sp)
   8d2bc:	04000434 	movhi	r16,16
   8d2c0:	dd400815 	stw	r21,32(sp)
   8d2c4:	dc800515 	stw	r18,20(sp)
   8d2c8:	843fffc4 	addi	r16,r16,-1
   8d2cc:	dfc00c15 	stw	ra,48(sp)
   8d2d0:	df000b15 	stw	fp,44(sp)
   8d2d4:	ddc00a15 	stw	r23,40(sp)
   8d2d8:	dd000715 	stw	r20,28(sp)
   8d2dc:	dcc00615 	stw	r19,24(sp)
   8d2e0:	dc400415 	stw	r17,16(sp)
   8d2e4:	1481ffcc 	andi	r18,r2,2047
   8d2e8:	2c20703a 	and	r16,r5,r16
   8d2ec:	b02b883a 	mov	r21,r22
   8d2f0:	b2403fcc 	andi	r9,r22,255
   8d2f4:	90006026 	beq	r18,zero,8d478 <__muldf3+0x1d0>
   8d2f8:	0081ffc4 	movi	r2,2047
   8d2fc:	2029883a 	mov	r20,r4
   8d300:	90803626 	beq	r18,r2,8d3dc <__muldf3+0x134>
   8d304:	80800434 	orhi	r2,r16,16
   8d308:	100490fa 	slli	r2,r2,3
   8d30c:	2020d77a 	srli	r16,r4,29
   8d310:	202890fa 	slli	r20,r4,3
   8d314:	94bf0044 	addi	r18,r18,-1023
   8d318:	80a0b03a 	or	r16,r16,r2
   8d31c:	0027883a 	mov	r19,zero
   8d320:	0039883a 	mov	fp,zero
   8d324:	3804d53a 	srli	r2,r7,20
   8d328:	382ed7fa 	srli	r23,r7,31
   8d32c:	04400434 	movhi	r17,16
   8d330:	8c7fffc4 	addi	r17,r17,-1
   8d334:	1081ffcc 	andi	r2,r2,2047
   8d338:	3011883a 	mov	r8,r6
   8d33c:	3c62703a 	and	r17,r7,r17
   8d340:	ba803fcc 	andi	r10,r23,255
   8d344:	10006d26 	beq	r2,zero,8d4fc <__muldf3+0x254>
   8d348:	00c1ffc4 	movi	r3,2047
   8d34c:	10c06526 	beq	r2,r3,8d4e4 <__muldf3+0x23c>
   8d350:	88c00434 	orhi	r3,r17,16
   8d354:	180690fa 	slli	r3,r3,3
   8d358:	3022d77a 	srli	r17,r6,29
   8d35c:	301090fa 	slli	r8,r6,3
   8d360:	10bf0044 	addi	r2,r2,-1023
   8d364:	88e2b03a 	or	r17,r17,r3
   8d368:	000b883a 	mov	r5,zero
   8d36c:	9085883a 	add	r2,r18,r2
   8d370:	2cc8b03a 	or	r4,r5,r19
   8d374:	00c003c4 	movi	r3,15
   8d378:	bdacf03a 	xor	r22,r23,r22
   8d37c:	12c00044 	addi	r11,r2,1
   8d380:	19009936 	bltu	r3,r4,8d5e8 <__muldf3+0x340>
   8d384:	200890ba 	slli	r4,r4,2
   8d388:	00c00274 	movhi	r3,9
   8d38c:	18f4e704 	addi	r3,r3,-11364
   8d390:	20c9883a 	add	r4,r4,r3
   8d394:	20c00017 	ldw	r3,0(r4)
   8d398:	1800683a 	jmp	r3
   8d39c:	0008d5e8 	cmpgeui	zero,zero,9047
   8d3a0:	0008d3fc 	xorhi	zero,zero,9039
   8d3a4:	0008d3fc 	xorhi	zero,zero,9039
   8d3a8:	0008d3f8 	rdprs	zero,zero,9039
   8d3ac:	0008d5c4 	movi	zero,9047
   8d3b0:	0008d5c4 	movi	zero,9047
   8d3b4:	0008d5ac 	andhi	zero,zero,9046
   8d3b8:	0008d3f8 	rdprs	zero,zero,9039
   8d3bc:	0008d5c4 	movi	zero,9047
   8d3c0:	0008d5ac 	andhi	zero,zero,9046
   8d3c4:	0008d5c4 	movi	zero,9047
   8d3c8:	0008d3f8 	rdprs	zero,zero,9039
   8d3cc:	0008d5d4 	movui	zero,9047
   8d3d0:	0008d5d4 	movui	zero,9047
   8d3d4:	0008d5d4 	movui	zero,9047
   8d3d8:	0008d7f0 	cmpltui	zero,zero,9055
   8d3dc:	2404b03a 	or	r2,r4,r16
   8d3e0:	10006f1e 	bne	r2,zero,8d5a0 <__muldf3+0x2f8>
   8d3e4:	04c00204 	movi	r19,8
   8d3e8:	0021883a 	mov	r16,zero
   8d3ec:	0029883a 	mov	r20,zero
   8d3f0:	07000084 	movi	fp,2
   8d3f4:	003fcb06 	br	8d324 <rx_descriptor_end+0xfff8d2c4>
   8d3f8:	502d883a 	mov	r22,r10
   8d3fc:	00800084 	movi	r2,2
   8d400:	28805726 	beq	r5,r2,8d560 <__muldf3+0x2b8>
   8d404:	008000c4 	movi	r2,3
   8d408:	28816626 	beq	r5,r2,8d9a4 <__muldf3+0x6fc>
   8d40c:	00800044 	movi	r2,1
   8d410:	2881411e 	bne	r5,r2,8d918 <__muldf3+0x670>
   8d414:	b02b883a 	mov	r21,r22
   8d418:	0005883a 	mov	r2,zero
   8d41c:	000b883a 	mov	r5,zero
   8d420:	0029883a 	mov	r20,zero
   8d424:	1004953a 	slli	r2,r2,20
   8d428:	a8c03fcc 	andi	r3,r21,255
   8d42c:	04400434 	movhi	r17,16
   8d430:	8c7fffc4 	addi	r17,r17,-1
   8d434:	180697fa 	slli	r3,r3,31
   8d438:	2c4a703a 	and	r5,r5,r17
   8d43c:	288ab03a 	or	r5,r5,r2
   8d440:	28c6b03a 	or	r3,r5,r3
   8d444:	a005883a 	mov	r2,r20
   8d448:	dfc00c17 	ldw	ra,48(sp)
   8d44c:	df000b17 	ldw	fp,44(sp)
   8d450:	ddc00a17 	ldw	r23,40(sp)
   8d454:	dd800917 	ldw	r22,36(sp)
   8d458:	dd400817 	ldw	r21,32(sp)
   8d45c:	dd000717 	ldw	r20,28(sp)
   8d460:	dcc00617 	ldw	r19,24(sp)
   8d464:	dc800517 	ldw	r18,20(sp)
   8d468:	dc400417 	ldw	r17,16(sp)
   8d46c:	dc000317 	ldw	r16,12(sp)
   8d470:	dec00d04 	addi	sp,sp,52
   8d474:	f800283a 	ret
   8d478:	2404b03a 	or	r2,r4,r16
   8d47c:	2027883a 	mov	r19,r4
   8d480:	10004226 	beq	r2,zero,8d58c <__muldf3+0x2e4>
   8d484:	8000fc26 	beq	r16,zero,8d878 <__muldf3+0x5d0>
   8d488:	8009883a 	mov	r4,r16
   8d48c:	d9800215 	stw	r6,8(sp)
   8d490:	d9c00015 	stw	r7,0(sp)
   8d494:	da400115 	stw	r9,4(sp)
   8d498:	008e4c00 	call	8e4c0 <__clzsi2>
   8d49c:	d9800217 	ldw	r6,8(sp)
   8d4a0:	d9c00017 	ldw	r7,0(sp)
   8d4a4:	da400117 	ldw	r9,4(sp)
   8d4a8:	113ffd44 	addi	r4,r2,-11
   8d4ac:	00c00704 	movi	r3,28
   8d4b0:	1900ed16 	blt	r3,r4,8d868 <__muldf3+0x5c0>
   8d4b4:	00c00744 	movi	r3,29
   8d4b8:	147ffe04 	addi	r17,r2,-8
   8d4bc:	1907c83a 	sub	r3,r3,r4
   8d4c0:	8460983a 	sll	r16,r16,r17
   8d4c4:	98c6d83a 	srl	r3,r19,r3
   8d4c8:	9c68983a 	sll	r20,r19,r17
   8d4cc:	1c20b03a 	or	r16,r3,r16
   8d4d0:	1080fcc4 	addi	r2,r2,1011
   8d4d4:	00a5c83a 	sub	r18,zero,r2
   8d4d8:	0027883a 	mov	r19,zero
   8d4dc:	0039883a 	mov	fp,zero
   8d4e0:	003f9006 	br	8d324 <rx_descriptor_end+0xfff8d2c4>
   8d4e4:	3446b03a 	or	r3,r6,r17
   8d4e8:	1800261e 	bne	r3,zero,8d584 <__muldf3+0x2dc>
   8d4ec:	0023883a 	mov	r17,zero
   8d4f0:	0011883a 	mov	r8,zero
   8d4f4:	01400084 	movi	r5,2
   8d4f8:	003f9c06 	br	8d36c <rx_descriptor_end+0xfff8d30c>
   8d4fc:	3446b03a 	or	r3,r6,r17
   8d500:	18001c26 	beq	r3,zero,8d574 <__muldf3+0x2cc>
   8d504:	8800ce26 	beq	r17,zero,8d840 <__muldf3+0x598>
   8d508:	8809883a 	mov	r4,r17
   8d50c:	d9800215 	stw	r6,8(sp)
   8d510:	da400115 	stw	r9,4(sp)
   8d514:	da800015 	stw	r10,0(sp)
   8d518:	008e4c00 	call	8e4c0 <__clzsi2>
   8d51c:	d9800217 	ldw	r6,8(sp)
   8d520:	da400117 	ldw	r9,4(sp)
   8d524:	da800017 	ldw	r10,0(sp)
   8d528:	113ffd44 	addi	r4,r2,-11
   8d52c:	00c00704 	movi	r3,28
   8d530:	1900bf16 	blt	r3,r4,8d830 <__muldf3+0x588>
   8d534:	00c00744 	movi	r3,29
   8d538:	123ffe04 	addi	r8,r2,-8
   8d53c:	1907c83a 	sub	r3,r3,r4
   8d540:	8a22983a 	sll	r17,r17,r8
   8d544:	30c6d83a 	srl	r3,r6,r3
   8d548:	3210983a 	sll	r8,r6,r8
   8d54c:	1c62b03a 	or	r17,r3,r17
   8d550:	1080fcc4 	addi	r2,r2,1011
   8d554:	0085c83a 	sub	r2,zero,r2
   8d558:	000b883a 	mov	r5,zero
   8d55c:	003f8306 	br	8d36c <rx_descriptor_end+0xfff8d30c>
   8d560:	b02b883a 	mov	r21,r22
   8d564:	0081ffc4 	movi	r2,2047
   8d568:	000b883a 	mov	r5,zero
   8d56c:	0029883a 	mov	r20,zero
   8d570:	003fac06 	br	8d424 <rx_descriptor_end+0xfff8d3c4>
   8d574:	0023883a 	mov	r17,zero
   8d578:	0011883a 	mov	r8,zero
   8d57c:	01400044 	movi	r5,1
   8d580:	003f7a06 	br	8d36c <rx_descriptor_end+0xfff8d30c>
   8d584:	014000c4 	movi	r5,3
   8d588:	003f7806 	br	8d36c <rx_descriptor_end+0xfff8d30c>
   8d58c:	04c00104 	movi	r19,4
   8d590:	0021883a 	mov	r16,zero
   8d594:	0029883a 	mov	r20,zero
   8d598:	07000044 	movi	fp,1
   8d59c:	003f6106 	br	8d324 <rx_descriptor_end+0xfff8d2c4>
   8d5a0:	04c00304 	movi	r19,12
   8d5a4:	070000c4 	movi	fp,3
   8d5a8:	003f5e06 	br	8d324 <rx_descriptor_end+0xfff8d2c4>
   8d5ac:	01400434 	movhi	r5,16
   8d5b0:	002b883a 	mov	r21,zero
   8d5b4:	297fffc4 	addi	r5,r5,-1
   8d5b8:	053fffc4 	movi	r20,-1
   8d5bc:	0081ffc4 	movi	r2,2047
   8d5c0:	003f9806 	br	8d424 <rx_descriptor_end+0xfff8d3c4>
   8d5c4:	8023883a 	mov	r17,r16
   8d5c8:	a011883a 	mov	r8,r20
   8d5cc:	e00b883a 	mov	r5,fp
   8d5d0:	003f8a06 	br	8d3fc <rx_descriptor_end+0xfff8d39c>
   8d5d4:	8023883a 	mov	r17,r16
   8d5d8:	a011883a 	mov	r8,r20
   8d5dc:	482d883a 	mov	r22,r9
   8d5e0:	e00b883a 	mov	r5,fp
   8d5e4:	003f8506 	br	8d3fc <rx_descriptor_end+0xfff8d39c>
   8d5e8:	a00ad43a 	srli	r5,r20,16
   8d5ec:	401ad43a 	srli	r13,r8,16
   8d5f0:	a53fffcc 	andi	r20,r20,65535
   8d5f4:	423fffcc 	andi	r8,r8,65535
   8d5f8:	4519383a 	mul	r12,r8,r20
   8d5fc:	4147383a 	mul	r3,r8,r5
   8d600:	6d09383a 	mul	r4,r13,r20
   8d604:	600cd43a 	srli	r6,r12,16
   8d608:	2b5d383a 	mul	r14,r5,r13
   8d60c:	20c9883a 	add	r4,r4,r3
   8d610:	310d883a 	add	r6,r6,r4
   8d614:	30c0022e 	bgeu	r6,r3,8d620 <__muldf3+0x378>
   8d618:	00c00074 	movhi	r3,1
   8d61c:	70dd883a 	add	r14,r14,r3
   8d620:	8826d43a 	srli	r19,r17,16
   8d624:	8bffffcc 	andi	r15,r17,65535
   8d628:	7d23383a 	mul	r17,r15,r20
   8d62c:	7949383a 	mul	r4,r15,r5
   8d630:	9d29383a 	mul	r20,r19,r20
   8d634:	8814d43a 	srli	r10,r17,16
   8d638:	3012943a 	slli	r9,r6,16
   8d63c:	a129883a 	add	r20,r20,r4
   8d640:	633fffcc 	andi	r12,r12,65535
   8d644:	5515883a 	add	r10,r10,r20
   8d648:	3006d43a 	srli	r3,r6,16
   8d64c:	4b13883a 	add	r9,r9,r12
   8d650:	2ccb383a 	mul	r5,r5,r19
   8d654:	5100022e 	bgeu	r10,r4,8d660 <__muldf3+0x3b8>
   8d658:	01000074 	movhi	r4,1
   8d65c:	290b883a 	add	r5,r5,r4
   8d660:	802ad43a 	srli	r21,r16,16
   8d664:	843fffcc 	andi	r16,r16,65535
   8d668:	440d383a 	mul	r6,r8,r16
   8d66c:	4565383a 	mul	r18,r8,r21
   8d670:	8349383a 	mul	r4,r16,r13
   8d674:	500e943a 	slli	r7,r10,16
   8d678:	3010d43a 	srli	r8,r6,16
   8d67c:	5028d43a 	srli	r20,r10,16
   8d680:	2489883a 	add	r4,r4,r18
   8d684:	8abfffcc 	andi	r10,r17,65535
   8d688:	3a95883a 	add	r10,r7,r10
   8d68c:	4119883a 	add	r12,r8,r4
   8d690:	a169883a 	add	r20,r20,r5
   8d694:	1a87883a 	add	r3,r3,r10
   8d698:	6d5b383a 	mul	r13,r13,r21
   8d69c:	6480022e 	bgeu	r12,r18,8d6a8 <__muldf3+0x400>
   8d6a0:	01000074 	movhi	r4,1
   8d6a4:	691b883a 	add	r13,r13,r4
   8d6a8:	7c25383a 	mul	r18,r15,r16
   8d6ac:	7d4b383a 	mul	r5,r15,r21
   8d6b0:	84cf383a 	mul	r7,r16,r19
   8d6b4:	901ed43a 	srli	r15,r18,16
   8d6b8:	6008d43a 	srli	r4,r12,16
   8d6bc:	6010943a 	slli	r8,r12,16
   8d6c0:	394f883a 	add	r7,r7,r5
   8d6c4:	333fffcc 	andi	r12,r6,65535
   8d6c8:	79df883a 	add	r15,r15,r7
   8d6cc:	235b883a 	add	r13,r4,r13
   8d6d0:	9d63383a 	mul	r17,r19,r21
   8d6d4:	4309883a 	add	r4,r8,r12
   8d6d8:	7940022e 	bgeu	r15,r5,8d6e4 <__muldf3+0x43c>
   8d6dc:	01400074 	movhi	r5,1
   8d6e0:	8963883a 	add	r17,r17,r5
   8d6e4:	780a943a 	slli	r5,r15,16
   8d6e8:	91bfffcc 	andi	r6,r18,65535
   8d6ec:	70c7883a 	add	r3,r14,r3
   8d6f0:	298d883a 	add	r6,r5,r6
   8d6f4:	1a8f803a 	cmpltu	r7,r3,r10
   8d6f8:	350b883a 	add	r5,r6,r20
   8d6fc:	20c7883a 	add	r3,r4,r3
   8d700:	3955883a 	add	r10,r7,r5
   8d704:	1909803a 	cmpltu	r4,r3,r4
   8d708:	6a91883a 	add	r8,r13,r10
   8d70c:	780cd43a 	srli	r6,r15,16
   8d710:	2219883a 	add	r12,r4,r8
   8d714:	2d0b803a 	cmpltu	r5,r5,r20
   8d718:	51cf803a 	cmpltu	r7,r10,r7
   8d71c:	29ceb03a 	or	r7,r5,r7
   8d720:	4351803a 	cmpltu	r8,r8,r13
   8d724:	610b803a 	cmpltu	r5,r12,r4
   8d728:	4148b03a 	or	r4,r8,r5
   8d72c:	398f883a 	add	r7,r7,r6
   8d730:	3909883a 	add	r4,r7,r4
   8d734:	1810927a 	slli	r8,r3,9
   8d738:	2449883a 	add	r4,r4,r17
   8d73c:	2008927a 	slli	r4,r4,9
   8d740:	6022d5fa 	srli	r17,r12,23
   8d744:	1806d5fa 	srli	r3,r3,23
   8d748:	4252b03a 	or	r9,r8,r9
   8d74c:	600a927a 	slli	r5,r12,9
   8d750:	4810c03a 	cmpne	r8,r9,zero
   8d754:	2462b03a 	or	r17,r4,r17
   8d758:	40c6b03a 	or	r3,r8,r3
   8d75c:	8900402c 	andhi	r4,r17,256
   8d760:	1950b03a 	or	r8,r3,r5
   8d764:	20000726 	beq	r4,zero,8d784 <__muldf3+0x4dc>
   8d768:	4006d07a 	srli	r3,r8,1
   8d76c:	880497fa 	slli	r2,r17,31
   8d770:	4200004c 	andi	r8,r8,1
   8d774:	8822d07a 	srli	r17,r17,1
   8d778:	1a10b03a 	or	r8,r3,r8
   8d77c:	1210b03a 	or	r8,r2,r8
   8d780:	5805883a 	mov	r2,r11
   8d784:	1140ffc4 	addi	r5,r2,1023
   8d788:	0140440e 	bge	zero,r5,8d89c <__muldf3+0x5f4>
   8d78c:	40c001cc 	andi	r3,r8,7
   8d790:	18000726 	beq	r3,zero,8d7b0 <__muldf3+0x508>
   8d794:	40c003cc 	andi	r3,r8,15
   8d798:	01000104 	movi	r4,4
   8d79c:	19000426 	beq	r3,r4,8d7b0 <__muldf3+0x508>
   8d7a0:	4107883a 	add	r3,r8,r4
   8d7a4:	1a11803a 	cmpltu	r8,r3,r8
   8d7a8:	8a23883a 	add	r17,r17,r8
   8d7ac:	1811883a 	mov	r8,r3
   8d7b0:	88c0402c 	andhi	r3,r17,256
   8d7b4:	18000426 	beq	r3,zero,8d7c8 <__muldf3+0x520>
   8d7b8:	11410004 	addi	r5,r2,1024
   8d7bc:	00bfc034 	movhi	r2,65280
   8d7c0:	10bfffc4 	addi	r2,r2,-1
   8d7c4:	88a2703a 	and	r17,r17,r2
   8d7c8:	0081ff84 	movi	r2,2046
   8d7cc:	117f6416 	blt	r2,r5,8d560 <rx_descriptor_end+0xfff8d500>
   8d7d0:	8828977a 	slli	r20,r17,29
   8d7d4:	4010d0fa 	srli	r8,r8,3
   8d7d8:	8822927a 	slli	r17,r17,9
   8d7dc:	2881ffcc 	andi	r2,r5,2047
   8d7e0:	a228b03a 	or	r20,r20,r8
   8d7e4:	880ad33a 	srli	r5,r17,12
   8d7e8:	b02b883a 	mov	r21,r22
   8d7ec:	003f0d06 	br	8d424 <rx_descriptor_end+0xfff8d3c4>
   8d7f0:	8080022c 	andhi	r2,r16,8
   8d7f4:	10000926 	beq	r2,zero,8d81c <__muldf3+0x574>
   8d7f8:	8880022c 	andhi	r2,r17,8
   8d7fc:	1000071e 	bne	r2,zero,8d81c <__muldf3+0x574>
   8d800:	00800434 	movhi	r2,16
   8d804:	89400234 	orhi	r5,r17,8
   8d808:	10bfffc4 	addi	r2,r2,-1
   8d80c:	b82b883a 	mov	r21,r23
   8d810:	288a703a 	and	r5,r5,r2
   8d814:	4029883a 	mov	r20,r8
   8d818:	003f6806 	br	8d5bc <rx_descriptor_end+0xfff8d55c>
   8d81c:	00800434 	movhi	r2,16
   8d820:	81400234 	orhi	r5,r16,8
   8d824:	10bfffc4 	addi	r2,r2,-1
   8d828:	288a703a 	and	r5,r5,r2
   8d82c:	003f6306 	br	8d5bc <rx_descriptor_end+0xfff8d55c>
   8d830:	147ff604 	addi	r17,r2,-40
   8d834:	3462983a 	sll	r17,r6,r17
   8d838:	0011883a 	mov	r8,zero
   8d83c:	003f4406 	br	8d550 <rx_descriptor_end+0xfff8d4f0>
   8d840:	3009883a 	mov	r4,r6
   8d844:	d9800215 	stw	r6,8(sp)
   8d848:	da400115 	stw	r9,4(sp)
   8d84c:	da800015 	stw	r10,0(sp)
   8d850:	008e4c00 	call	8e4c0 <__clzsi2>
   8d854:	10800804 	addi	r2,r2,32
   8d858:	da800017 	ldw	r10,0(sp)
   8d85c:	da400117 	ldw	r9,4(sp)
   8d860:	d9800217 	ldw	r6,8(sp)
   8d864:	003f3006 	br	8d528 <rx_descriptor_end+0xfff8d4c8>
   8d868:	143ff604 	addi	r16,r2,-40
   8d86c:	9c20983a 	sll	r16,r19,r16
   8d870:	0029883a 	mov	r20,zero
   8d874:	003f1606 	br	8d4d0 <rx_descriptor_end+0xfff8d470>
   8d878:	d9800215 	stw	r6,8(sp)
   8d87c:	d9c00015 	stw	r7,0(sp)
   8d880:	da400115 	stw	r9,4(sp)
   8d884:	008e4c00 	call	8e4c0 <__clzsi2>
   8d888:	10800804 	addi	r2,r2,32
   8d88c:	da400117 	ldw	r9,4(sp)
   8d890:	d9c00017 	ldw	r7,0(sp)
   8d894:	d9800217 	ldw	r6,8(sp)
   8d898:	003f0306 	br	8d4a8 <rx_descriptor_end+0xfff8d448>
   8d89c:	00c00044 	movi	r3,1
   8d8a0:	1947c83a 	sub	r3,r3,r5
   8d8a4:	00800e04 	movi	r2,56
   8d8a8:	10feda16 	blt	r2,r3,8d414 <rx_descriptor_end+0xfff8d3b4>
   8d8ac:	008007c4 	movi	r2,31
   8d8b0:	10c01b16 	blt	r2,r3,8d920 <__muldf3+0x678>
   8d8b4:	00800804 	movi	r2,32
   8d8b8:	10c5c83a 	sub	r2,r2,r3
   8d8bc:	888a983a 	sll	r5,r17,r2
   8d8c0:	40c8d83a 	srl	r4,r8,r3
   8d8c4:	4084983a 	sll	r2,r8,r2
   8d8c8:	88e2d83a 	srl	r17,r17,r3
   8d8cc:	2906b03a 	or	r3,r5,r4
   8d8d0:	1004c03a 	cmpne	r2,r2,zero
   8d8d4:	1886b03a 	or	r3,r3,r2
   8d8d8:	188001cc 	andi	r2,r3,7
   8d8dc:	10000726 	beq	r2,zero,8d8fc <__muldf3+0x654>
   8d8e0:	188003cc 	andi	r2,r3,15
   8d8e4:	01000104 	movi	r4,4
   8d8e8:	11000426 	beq	r2,r4,8d8fc <__muldf3+0x654>
   8d8ec:	1805883a 	mov	r2,r3
   8d8f0:	10c00104 	addi	r3,r2,4
   8d8f4:	1885803a 	cmpltu	r2,r3,r2
   8d8f8:	88a3883a 	add	r17,r17,r2
   8d8fc:	8880202c 	andhi	r2,r17,128
   8d900:	10001c26 	beq	r2,zero,8d974 <__muldf3+0x6cc>
   8d904:	b02b883a 	mov	r21,r22
   8d908:	00800044 	movi	r2,1
   8d90c:	000b883a 	mov	r5,zero
   8d910:	0029883a 	mov	r20,zero
   8d914:	003ec306 	br	8d424 <rx_descriptor_end+0xfff8d3c4>
   8d918:	5805883a 	mov	r2,r11
   8d91c:	003f9906 	br	8d784 <rx_descriptor_end+0xfff8d724>
   8d920:	00bff844 	movi	r2,-31
   8d924:	1145c83a 	sub	r2,r2,r5
   8d928:	8888d83a 	srl	r4,r17,r2
   8d92c:	00800804 	movi	r2,32
   8d930:	18801a26 	beq	r3,r2,8d99c <__muldf3+0x6f4>
   8d934:	00801004 	movi	r2,64
   8d938:	10c5c83a 	sub	r2,r2,r3
   8d93c:	8884983a 	sll	r2,r17,r2
   8d940:	1204b03a 	or	r2,r2,r8
   8d944:	1004c03a 	cmpne	r2,r2,zero
   8d948:	2084b03a 	or	r2,r4,r2
   8d94c:	144001cc 	andi	r17,r2,7
   8d950:	88000d1e 	bne	r17,zero,8d988 <__muldf3+0x6e0>
   8d954:	000b883a 	mov	r5,zero
   8d958:	1028d0fa 	srli	r20,r2,3
   8d95c:	b02b883a 	mov	r21,r22
   8d960:	0005883a 	mov	r2,zero
   8d964:	a468b03a 	or	r20,r20,r17
   8d968:	003eae06 	br	8d424 <rx_descriptor_end+0xfff8d3c4>
   8d96c:	1007883a 	mov	r3,r2
   8d970:	0023883a 	mov	r17,zero
   8d974:	880a927a 	slli	r5,r17,9
   8d978:	1805883a 	mov	r2,r3
   8d97c:	8822977a 	slli	r17,r17,29
   8d980:	280ad33a 	srli	r5,r5,12
   8d984:	003ff406 	br	8d958 <rx_descriptor_end+0xfff8d8f8>
   8d988:	10c003cc 	andi	r3,r2,15
   8d98c:	01000104 	movi	r4,4
   8d990:	193ff626 	beq	r3,r4,8d96c <rx_descriptor_end+0xfff8d90c>
   8d994:	0023883a 	mov	r17,zero
   8d998:	003fd506 	br	8d8f0 <rx_descriptor_end+0xfff8d890>
   8d99c:	0005883a 	mov	r2,zero
   8d9a0:	003fe706 	br	8d940 <rx_descriptor_end+0xfff8d8e0>
   8d9a4:	00800434 	movhi	r2,16
   8d9a8:	89400234 	orhi	r5,r17,8
   8d9ac:	10bfffc4 	addi	r2,r2,-1
   8d9b0:	b02b883a 	mov	r21,r22
   8d9b4:	288a703a 	and	r5,r5,r2
   8d9b8:	4029883a 	mov	r20,r8
   8d9bc:	003eff06 	br	8d5bc <rx_descriptor_end+0xfff8d55c>

0008d9c0 <__subdf3>:
   8d9c0:	02000434 	movhi	r8,16
   8d9c4:	423fffc4 	addi	r8,r8,-1
   8d9c8:	defffb04 	addi	sp,sp,-20
   8d9cc:	2a14703a 	and	r10,r5,r8
   8d9d0:	3812d53a 	srli	r9,r7,20
   8d9d4:	3a10703a 	and	r8,r7,r8
   8d9d8:	2006d77a 	srli	r3,r4,29
   8d9dc:	3004d77a 	srli	r2,r6,29
   8d9e0:	dc000015 	stw	r16,0(sp)
   8d9e4:	501490fa 	slli	r10,r10,3
   8d9e8:	2820d53a 	srli	r16,r5,20
   8d9ec:	401090fa 	slli	r8,r8,3
   8d9f0:	dc800215 	stw	r18,8(sp)
   8d9f4:	dc400115 	stw	r17,4(sp)
   8d9f8:	dfc00415 	stw	ra,16(sp)
   8d9fc:	202290fa 	slli	r17,r4,3
   8da00:	dcc00315 	stw	r19,12(sp)
   8da04:	4a41ffcc 	andi	r9,r9,2047
   8da08:	0101ffc4 	movi	r4,2047
   8da0c:	2824d7fa 	srli	r18,r5,31
   8da10:	8401ffcc 	andi	r16,r16,2047
   8da14:	50c6b03a 	or	r3,r10,r3
   8da18:	380ed7fa 	srli	r7,r7,31
   8da1c:	408ab03a 	or	r5,r8,r2
   8da20:	300c90fa 	slli	r6,r6,3
   8da24:	49009626 	beq	r9,r4,8dc80 <__subdf3+0x2c0>
   8da28:	39c0005c 	xori	r7,r7,1
   8da2c:	8245c83a 	sub	r2,r16,r9
   8da30:	3c807426 	beq	r7,r18,8dc04 <__subdf3+0x244>
   8da34:	0080af0e 	bge	zero,r2,8dcf4 <__subdf3+0x334>
   8da38:	48002a1e 	bne	r9,zero,8dae4 <__subdf3+0x124>
   8da3c:	2988b03a 	or	r4,r5,r6
   8da40:	20009a1e 	bne	r4,zero,8dcac <__subdf3+0x2ec>
   8da44:	888001cc 	andi	r2,r17,7
   8da48:	10000726 	beq	r2,zero,8da68 <__subdf3+0xa8>
   8da4c:	888003cc 	andi	r2,r17,15
   8da50:	01000104 	movi	r4,4
   8da54:	11000426 	beq	r2,r4,8da68 <__subdf3+0xa8>
   8da58:	890b883a 	add	r5,r17,r4
   8da5c:	2c63803a 	cmpltu	r17,r5,r17
   8da60:	1c47883a 	add	r3,r3,r17
   8da64:	2823883a 	mov	r17,r5
   8da68:	1880202c 	andhi	r2,r3,128
   8da6c:	10005926 	beq	r2,zero,8dbd4 <__subdf3+0x214>
   8da70:	84000044 	addi	r16,r16,1
   8da74:	0081ffc4 	movi	r2,2047
   8da78:	8080be26 	beq	r16,r2,8dd74 <__subdf3+0x3b4>
   8da7c:	017fe034 	movhi	r5,65408
   8da80:	297fffc4 	addi	r5,r5,-1
   8da84:	1946703a 	and	r3,r3,r5
   8da88:	1804977a 	slli	r2,r3,29
   8da8c:	1806927a 	slli	r3,r3,9
   8da90:	8822d0fa 	srli	r17,r17,3
   8da94:	8401ffcc 	andi	r16,r16,2047
   8da98:	180ad33a 	srli	r5,r3,12
   8da9c:	9100004c 	andi	r4,r18,1
   8daa0:	1444b03a 	or	r2,r2,r17
   8daa4:	80c1ffcc 	andi	r3,r16,2047
   8daa8:	1820953a 	slli	r16,r3,20
   8daac:	20c03fcc 	andi	r3,r4,255
   8dab0:	180897fa 	slli	r4,r3,31
   8dab4:	00c00434 	movhi	r3,16
   8dab8:	18ffffc4 	addi	r3,r3,-1
   8dabc:	28c6703a 	and	r3,r5,r3
   8dac0:	1c06b03a 	or	r3,r3,r16
   8dac4:	1906b03a 	or	r3,r3,r4
   8dac8:	dfc00417 	ldw	ra,16(sp)
   8dacc:	dcc00317 	ldw	r19,12(sp)
   8dad0:	dc800217 	ldw	r18,8(sp)
   8dad4:	dc400117 	ldw	r17,4(sp)
   8dad8:	dc000017 	ldw	r16,0(sp)
   8dadc:	dec00504 	addi	sp,sp,20
   8dae0:	f800283a 	ret
   8dae4:	0101ffc4 	movi	r4,2047
   8dae8:	813fd626 	beq	r16,r4,8da44 <rx_descriptor_end+0xfff8d9e4>
   8daec:	29402034 	orhi	r5,r5,128
   8daf0:	01000e04 	movi	r4,56
   8daf4:	2080a316 	blt	r4,r2,8dd84 <__subdf3+0x3c4>
   8daf8:	010007c4 	movi	r4,31
   8dafc:	2080c616 	blt	r4,r2,8de18 <__subdf3+0x458>
   8db00:	01000804 	movi	r4,32
   8db04:	2089c83a 	sub	r4,r4,r2
   8db08:	2910983a 	sll	r8,r5,r4
   8db0c:	308ed83a 	srl	r7,r6,r2
   8db10:	3108983a 	sll	r4,r6,r4
   8db14:	2884d83a 	srl	r2,r5,r2
   8db18:	41ccb03a 	or	r6,r8,r7
   8db1c:	2008c03a 	cmpne	r4,r4,zero
   8db20:	310cb03a 	or	r6,r6,r4
   8db24:	898dc83a 	sub	r6,r17,r6
   8db28:	89a3803a 	cmpltu	r17,r17,r6
   8db2c:	1887c83a 	sub	r3,r3,r2
   8db30:	1c47c83a 	sub	r3,r3,r17
   8db34:	3023883a 	mov	r17,r6
   8db38:	1880202c 	andhi	r2,r3,128
   8db3c:	10002326 	beq	r2,zero,8dbcc <__subdf3+0x20c>
   8db40:	04c02034 	movhi	r19,128
   8db44:	9cffffc4 	addi	r19,r19,-1
   8db48:	1ce6703a 	and	r19,r3,r19
   8db4c:	98007a26 	beq	r19,zero,8dd38 <__subdf3+0x378>
   8db50:	9809883a 	mov	r4,r19
   8db54:	008e4c00 	call	8e4c0 <__clzsi2>
   8db58:	113ffe04 	addi	r4,r2,-8
   8db5c:	00c007c4 	movi	r3,31
   8db60:	19007b16 	blt	r3,r4,8dd50 <__subdf3+0x390>
   8db64:	00800804 	movi	r2,32
   8db68:	1105c83a 	sub	r2,r2,r4
   8db6c:	8884d83a 	srl	r2,r17,r2
   8db70:	9906983a 	sll	r3,r19,r4
   8db74:	8922983a 	sll	r17,r17,r4
   8db78:	10c4b03a 	or	r2,r2,r3
   8db7c:	24007816 	blt	r4,r16,8dd60 <__subdf3+0x3a0>
   8db80:	2421c83a 	sub	r16,r4,r16
   8db84:	80c00044 	addi	r3,r16,1
   8db88:	010007c4 	movi	r4,31
   8db8c:	20c09516 	blt	r4,r3,8dde4 <__subdf3+0x424>
   8db90:	01400804 	movi	r5,32
   8db94:	28cbc83a 	sub	r5,r5,r3
   8db98:	88c8d83a 	srl	r4,r17,r3
   8db9c:	8962983a 	sll	r17,r17,r5
   8dba0:	114a983a 	sll	r5,r2,r5
   8dba4:	10c6d83a 	srl	r3,r2,r3
   8dba8:	8804c03a 	cmpne	r2,r17,zero
   8dbac:	290ab03a 	or	r5,r5,r4
   8dbb0:	28a2b03a 	or	r17,r5,r2
   8dbb4:	0021883a 	mov	r16,zero
   8dbb8:	003fa206 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8dbbc:	2090b03a 	or	r8,r4,r2
   8dbc0:	40018e26 	beq	r8,zero,8e1fc <__subdf3+0x83c>
   8dbc4:	1007883a 	mov	r3,r2
   8dbc8:	2023883a 	mov	r17,r4
   8dbcc:	888001cc 	andi	r2,r17,7
   8dbd0:	103f9e1e 	bne	r2,zero,8da4c <rx_descriptor_end+0xfff8d9ec>
   8dbd4:	1804977a 	slli	r2,r3,29
   8dbd8:	8822d0fa 	srli	r17,r17,3
   8dbdc:	1810d0fa 	srli	r8,r3,3
   8dbe0:	9100004c 	andi	r4,r18,1
   8dbe4:	1444b03a 	or	r2,r2,r17
   8dbe8:	00c1ffc4 	movi	r3,2047
   8dbec:	80c02826 	beq	r16,r3,8dc90 <__subdf3+0x2d0>
   8dbf0:	01400434 	movhi	r5,16
   8dbf4:	297fffc4 	addi	r5,r5,-1
   8dbf8:	80e0703a 	and	r16,r16,r3
   8dbfc:	414a703a 	and	r5,r8,r5
   8dc00:	003fa806 	br	8daa4 <rx_descriptor_end+0xfff8da44>
   8dc04:	0080630e 	bge	zero,r2,8dd94 <__subdf3+0x3d4>
   8dc08:	48003026 	beq	r9,zero,8dccc <__subdf3+0x30c>
   8dc0c:	0101ffc4 	movi	r4,2047
   8dc10:	813f8c26 	beq	r16,r4,8da44 <rx_descriptor_end+0xfff8d9e4>
   8dc14:	29402034 	orhi	r5,r5,128
   8dc18:	01000e04 	movi	r4,56
   8dc1c:	2080a90e 	bge	r4,r2,8dec4 <__subdf3+0x504>
   8dc20:	298cb03a 	or	r6,r5,r6
   8dc24:	3012c03a 	cmpne	r9,r6,zero
   8dc28:	0005883a 	mov	r2,zero
   8dc2c:	4c53883a 	add	r9,r9,r17
   8dc30:	4c63803a 	cmpltu	r17,r9,r17
   8dc34:	10c7883a 	add	r3,r2,r3
   8dc38:	88c7883a 	add	r3,r17,r3
   8dc3c:	4823883a 	mov	r17,r9
   8dc40:	1880202c 	andhi	r2,r3,128
   8dc44:	1000d026 	beq	r2,zero,8df88 <__subdf3+0x5c8>
   8dc48:	84000044 	addi	r16,r16,1
   8dc4c:	0081ffc4 	movi	r2,2047
   8dc50:	8080fe26 	beq	r16,r2,8e04c <__subdf3+0x68c>
   8dc54:	00bfe034 	movhi	r2,65408
   8dc58:	10bfffc4 	addi	r2,r2,-1
   8dc5c:	1886703a 	and	r3,r3,r2
   8dc60:	880ad07a 	srli	r5,r17,1
   8dc64:	180497fa 	slli	r2,r3,31
   8dc68:	8900004c 	andi	r4,r17,1
   8dc6c:	2922b03a 	or	r17,r5,r4
   8dc70:	1806d07a 	srli	r3,r3,1
   8dc74:	1462b03a 	or	r17,r2,r17
   8dc78:	3825883a 	mov	r18,r7
   8dc7c:	003f7106 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8dc80:	2984b03a 	or	r2,r5,r6
   8dc84:	103f6826 	beq	r2,zero,8da28 <rx_descriptor_end+0xfff8d9c8>
   8dc88:	39c03fcc 	andi	r7,r7,255
   8dc8c:	003f6706 	br	8da2c <rx_descriptor_end+0xfff8d9cc>
   8dc90:	4086b03a 	or	r3,r8,r2
   8dc94:	18015226 	beq	r3,zero,8e1e0 <__subdf3+0x820>
   8dc98:	00c00434 	movhi	r3,16
   8dc9c:	41400234 	orhi	r5,r8,8
   8dca0:	18ffffc4 	addi	r3,r3,-1
   8dca4:	28ca703a 	and	r5,r5,r3
   8dca8:	003f7e06 	br	8daa4 <rx_descriptor_end+0xfff8da44>
   8dcac:	10bfffc4 	addi	r2,r2,-1
   8dcb0:	1000491e 	bne	r2,zero,8ddd8 <__subdf3+0x418>
   8dcb4:	898fc83a 	sub	r7,r17,r6
   8dcb8:	89e3803a 	cmpltu	r17,r17,r7
   8dcbc:	1947c83a 	sub	r3,r3,r5
   8dcc0:	1c47c83a 	sub	r3,r3,r17
   8dcc4:	3823883a 	mov	r17,r7
   8dcc8:	003f9b06 	br	8db38 <rx_descriptor_end+0xfff8dad8>
   8dccc:	2988b03a 	or	r4,r5,r6
   8dcd0:	203f5c26 	beq	r4,zero,8da44 <rx_descriptor_end+0xfff8d9e4>
   8dcd4:	10bfffc4 	addi	r2,r2,-1
   8dcd8:	1000931e 	bne	r2,zero,8df28 <__subdf3+0x568>
   8dcdc:	898d883a 	add	r6,r17,r6
   8dce0:	3463803a 	cmpltu	r17,r6,r17
   8dce4:	1947883a 	add	r3,r3,r5
   8dce8:	88c7883a 	add	r3,r17,r3
   8dcec:	3023883a 	mov	r17,r6
   8dcf0:	003fd306 	br	8dc40 <rx_descriptor_end+0xfff8dbe0>
   8dcf4:	1000541e 	bne	r2,zero,8de48 <__subdf3+0x488>
   8dcf8:	80800044 	addi	r2,r16,1
   8dcfc:	1081ffcc 	andi	r2,r2,2047
   8dd00:	01000044 	movi	r4,1
   8dd04:	2080a20e 	bge	r4,r2,8df90 <__subdf3+0x5d0>
   8dd08:	8989c83a 	sub	r4,r17,r6
   8dd0c:	8905803a 	cmpltu	r2,r17,r4
   8dd10:	1967c83a 	sub	r19,r3,r5
   8dd14:	98a7c83a 	sub	r19,r19,r2
   8dd18:	9880202c 	andhi	r2,r19,128
   8dd1c:	10006326 	beq	r2,zero,8deac <__subdf3+0x4ec>
   8dd20:	3463c83a 	sub	r17,r6,r17
   8dd24:	28c7c83a 	sub	r3,r5,r3
   8dd28:	344d803a 	cmpltu	r6,r6,r17
   8dd2c:	19a7c83a 	sub	r19,r3,r6
   8dd30:	3825883a 	mov	r18,r7
   8dd34:	983f861e 	bne	r19,zero,8db50 <rx_descriptor_end+0xfff8daf0>
   8dd38:	8809883a 	mov	r4,r17
   8dd3c:	008e4c00 	call	8e4c0 <__clzsi2>
   8dd40:	10800804 	addi	r2,r2,32
   8dd44:	113ffe04 	addi	r4,r2,-8
   8dd48:	00c007c4 	movi	r3,31
   8dd4c:	193f850e 	bge	r3,r4,8db64 <rx_descriptor_end+0xfff8db04>
   8dd50:	10bff604 	addi	r2,r2,-40
   8dd54:	8884983a 	sll	r2,r17,r2
   8dd58:	0023883a 	mov	r17,zero
   8dd5c:	243f880e 	bge	r4,r16,8db80 <rx_descriptor_end+0xfff8db20>
   8dd60:	00ffe034 	movhi	r3,65408
   8dd64:	18ffffc4 	addi	r3,r3,-1
   8dd68:	8121c83a 	sub	r16,r16,r4
   8dd6c:	10c6703a 	and	r3,r2,r3
   8dd70:	003f3406 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8dd74:	9100004c 	andi	r4,r18,1
   8dd78:	000b883a 	mov	r5,zero
   8dd7c:	0005883a 	mov	r2,zero
   8dd80:	003f4806 	br	8daa4 <rx_descriptor_end+0xfff8da44>
   8dd84:	298cb03a 	or	r6,r5,r6
   8dd88:	300cc03a 	cmpne	r6,r6,zero
   8dd8c:	0005883a 	mov	r2,zero
   8dd90:	003f6406 	br	8db24 <rx_descriptor_end+0xfff8dac4>
   8dd94:	10009a1e 	bne	r2,zero,8e000 <__subdf3+0x640>
   8dd98:	82400044 	addi	r9,r16,1
   8dd9c:	4881ffcc 	andi	r2,r9,2047
   8dda0:	02800044 	movi	r10,1
   8dda4:	5080670e 	bge	r10,r2,8df44 <__subdf3+0x584>
   8dda8:	0081ffc4 	movi	r2,2047
   8ddac:	4880af26 	beq	r9,r2,8e06c <__subdf3+0x6ac>
   8ddb0:	898d883a 	add	r6,r17,r6
   8ddb4:	1945883a 	add	r2,r3,r5
   8ddb8:	3447803a 	cmpltu	r3,r6,r17
   8ddbc:	1887883a 	add	r3,r3,r2
   8ddc0:	182297fa 	slli	r17,r3,31
   8ddc4:	300cd07a 	srli	r6,r6,1
   8ddc8:	1806d07a 	srli	r3,r3,1
   8ddcc:	4821883a 	mov	r16,r9
   8ddd0:	89a2b03a 	or	r17,r17,r6
   8ddd4:	003f1b06 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8ddd8:	0101ffc4 	movi	r4,2047
   8dddc:	813f441e 	bne	r16,r4,8daf0 <rx_descriptor_end+0xfff8da90>
   8dde0:	003f1806 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8dde4:	843ff844 	addi	r16,r16,-31
   8dde8:	01400804 	movi	r5,32
   8ddec:	1408d83a 	srl	r4,r2,r16
   8ddf0:	19405026 	beq	r3,r5,8df34 <__subdf3+0x574>
   8ddf4:	01401004 	movi	r5,64
   8ddf8:	28c7c83a 	sub	r3,r5,r3
   8ddfc:	10c4983a 	sll	r2,r2,r3
   8de00:	88a2b03a 	or	r17,r17,r2
   8de04:	8822c03a 	cmpne	r17,r17,zero
   8de08:	2462b03a 	or	r17,r4,r17
   8de0c:	0007883a 	mov	r3,zero
   8de10:	0021883a 	mov	r16,zero
   8de14:	003f6d06 	br	8dbcc <rx_descriptor_end+0xfff8db6c>
   8de18:	11fff804 	addi	r7,r2,-32
   8de1c:	01000804 	movi	r4,32
   8de20:	29ced83a 	srl	r7,r5,r7
   8de24:	11004526 	beq	r2,r4,8df3c <__subdf3+0x57c>
   8de28:	01001004 	movi	r4,64
   8de2c:	2089c83a 	sub	r4,r4,r2
   8de30:	2904983a 	sll	r2,r5,r4
   8de34:	118cb03a 	or	r6,r2,r6
   8de38:	300cc03a 	cmpne	r6,r6,zero
   8de3c:	398cb03a 	or	r6,r7,r6
   8de40:	0005883a 	mov	r2,zero
   8de44:	003f3706 	br	8db24 <rx_descriptor_end+0xfff8dac4>
   8de48:	80002a26 	beq	r16,zero,8def4 <__subdf3+0x534>
   8de4c:	0101ffc4 	movi	r4,2047
   8de50:	49006626 	beq	r9,r4,8dfec <__subdf3+0x62c>
   8de54:	0085c83a 	sub	r2,zero,r2
   8de58:	18c02034 	orhi	r3,r3,128
   8de5c:	01000e04 	movi	r4,56
   8de60:	20807e16 	blt	r4,r2,8e05c <__subdf3+0x69c>
   8de64:	010007c4 	movi	r4,31
   8de68:	2080e716 	blt	r4,r2,8e208 <__subdf3+0x848>
   8de6c:	01000804 	movi	r4,32
   8de70:	2089c83a 	sub	r4,r4,r2
   8de74:	1914983a 	sll	r10,r3,r4
   8de78:	8890d83a 	srl	r8,r17,r2
   8de7c:	8908983a 	sll	r4,r17,r4
   8de80:	1884d83a 	srl	r2,r3,r2
   8de84:	5222b03a 	or	r17,r10,r8
   8de88:	2006c03a 	cmpne	r3,r4,zero
   8de8c:	88e2b03a 	or	r17,r17,r3
   8de90:	3463c83a 	sub	r17,r6,r17
   8de94:	2885c83a 	sub	r2,r5,r2
   8de98:	344d803a 	cmpltu	r6,r6,r17
   8de9c:	1187c83a 	sub	r3,r2,r6
   8dea0:	4821883a 	mov	r16,r9
   8dea4:	3825883a 	mov	r18,r7
   8dea8:	003f2306 	br	8db38 <rx_descriptor_end+0xfff8dad8>
   8deac:	24d0b03a 	or	r8,r4,r19
   8deb0:	40001b1e 	bne	r8,zero,8df20 <__subdf3+0x560>
   8deb4:	0005883a 	mov	r2,zero
   8deb8:	0009883a 	mov	r4,zero
   8debc:	0021883a 	mov	r16,zero
   8dec0:	003f4906 	br	8dbe8 <rx_descriptor_end+0xfff8db88>
   8dec4:	010007c4 	movi	r4,31
   8dec8:	20803a16 	blt	r4,r2,8dfb4 <__subdf3+0x5f4>
   8decc:	01000804 	movi	r4,32
   8ded0:	2089c83a 	sub	r4,r4,r2
   8ded4:	2912983a 	sll	r9,r5,r4
   8ded8:	3090d83a 	srl	r8,r6,r2
   8dedc:	3108983a 	sll	r4,r6,r4
   8dee0:	2884d83a 	srl	r2,r5,r2
   8dee4:	4a12b03a 	or	r9,r9,r8
   8dee8:	2008c03a 	cmpne	r4,r4,zero
   8deec:	4912b03a 	or	r9,r9,r4
   8def0:	003f4e06 	br	8dc2c <rx_descriptor_end+0xfff8dbcc>
   8def4:	1c48b03a 	or	r4,r3,r17
   8def8:	20003c26 	beq	r4,zero,8dfec <__subdf3+0x62c>
   8defc:	0084303a 	nor	r2,zero,r2
   8df00:	1000381e 	bne	r2,zero,8dfe4 <__subdf3+0x624>
   8df04:	3463c83a 	sub	r17,r6,r17
   8df08:	28c5c83a 	sub	r2,r5,r3
   8df0c:	344d803a 	cmpltu	r6,r6,r17
   8df10:	1187c83a 	sub	r3,r2,r6
   8df14:	4821883a 	mov	r16,r9
   8df18:	3825883a 	mov	r18,r7
   8df1c:	003f0606 	br	8db38 <rx_descriptor_end+0xfff8dad8>
   8df20:	2023883a 	mov	r17,r4
   8df24:	003f0906 	br	8db4c <rx_descriptor_end+0xfff8daec>
   8df28:	0101ffc4 	movi	r4,2047
   8df2c:	813f3a1e 	bne	r16,r4,8dc18 <rx_descriptor_end+0xfff8dbb8>
   8df30:	003ec406 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8df34:	0005883a 	mov	r2,zero
   8df38:	003fb106 	br	8de00 <rx_descriptor_end+0xfff8dda0>
   8df3c:	0005883a 	mov	r2,zero
   8df40:	003fbc06 	br	8de34 <rx_descriptor_end+0xfff8ddd4>
   8df44:	1c44b03a 	or	r2,r3,r17
   8df48:	80008e1e 	bne	r16,zero,8e184 <__subdf3+0x7c4>
   8df4c:	1000c826 	beq	r2,zero,8e270 <__subdf3+0x8b0>
   8df50:	2984b03a 	or	r2,r5,r6
   8df54:	103ebb26 	beq	r2,zero,8da44 <rx_descriptor_end+0xfff8d9e4>
   8df58:	8989883a 	add	r4,r17,r6
   8df5c:	1945883a 	add	r2,r3,r5
   8df60:	2447803a 	cmpltu	r3,r4,r17
   8df64:	1887883a 	add	r3,r3,r2
   8df68:	1880202c 	andhi	r2,r3,128
   8df6c:	2023883a 	mov	r17,r4
   8df70:	103f1626 	beq	r2,zero,8dbcc <rx_descriptor_end+0xfff8db6c>
   8df74:	00bfe034 	movhi	r2,65408
   8df78:	10bfffc4 	addi	r2,r2,-1
   8df7c:	5021883a 	mov	r16,r10
   8df80:	1886703a 	and	r3,r3,r2
   8df84:	003eaf06 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8df88:	3825883a 	mov	r18,r7
   8df8c:	003f0f06 	br	8dbcc <rx_descriptor_end+0xfff8db6c>
   8df90:	1c44b03a 	or	r2,r3,r17
   8df94:	8000251e 	bne	r16,zero,8e02c <__subdf3+0x66c>
   8df98:	1000661e 	bne	r2,zero,8e134 <__subdf3+0x774>
   8df9c:	2990b03a 	or	r8,r5,r6
   8dfa0:	40009626 	beq	r8,zero,8e1fc <__subdf3+0x83c>
   8dfa4:	2807883a 	mov	r3,r5
   8dfa8:	3023883a 	mov	r17,r6
   8dfac:	3825883a 	mov	r18,r7
   8dfb0:	003ea406 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8dfb4:	127ff804 	addi	r9,r2,-32
   8dfb8:	01000804 	movi	r4,32
   8dfbc:	2a52d83a 	srl	r9,r5,r9
   8dfc0:	11008c26 	beq	r2,r4,8e1f4 <__subdf3+0x834>
   8dfc4:	01001004 	movi	r4,64
   8dfc8:	2085c83a 	sub	r2,r4,r2
   8dfcc:	2884983a 	sll	r2,r5,r2
   8dfd0:	118cb03a 	or	r6,r2,r6
   8dfd4:	300cc03a 	cmpne	r6,r6,zero
   8dfd8:	4992b03a 	or	r9,r9,r6
   8dfdc:	0005883a 	mov	r2,zero
   8dfe0:	003f1206 	br	8dc2c <rx_descriptor_end+0xfff8dbcc>
   8dfe4:	0101ffc4 	movi	r4,2047
   8dfe8:	493f9c1e 	bne	r9,r4,8de5c <rx_descriptor_end+0xfff8ddfc>
   8dfec:	2807883a 	mov	r3,r5
   8dff0:	3023883a 	mov	r17,r6
   8dff4:	4821883a 	mov	r16,r9
   8dff8:	3825883a 	mov	r18,r7
   8dffc:	003e9106 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e000:	80001f1e 	bne	r16,zero,8e080 <__subdf3+0x6c0>
   8e004:	1c48b03a 	or	r4,r3,r17
   8e008:	20005a26 	beq	r4,zero,8e174 <__subdf3+0x7b4>
   8e00c:	0084303a 	nor	r2,zero,r2
   8e010:	1000561e 	bne	r2,zero,8e16c <__subdf3+0x7ac>
   8e014:	89a3883a 	add	r17,r17,r6
   8e018:	1945883a 	add	r2,r3,r5
   8e01c:	898d803a 	cmpltu	r6,r17,r6
   8e020:	3087883a 	add	r3,r6,r2
   8e024:	4821883a 	mov	r16,r9
   8e028:	003f0506 	br	8dc40 <rx_descriptor_end+0xfff8dbe0>
   8e02c:	10002b1e 	bne	r2,zero,8e0dc <__subdf3+0x71c>
   8e030:	2984b03a 	or	r2,r5,r6
   8e034:	10008026 	beq	r2,zero,8e238 <__subdf3+0x878>
   8e038:	2807883a 	mov	r3,r5
   8e03c:	3023883a 	mov	r17,r6
   8e040:	3825883a 	mov	r18,r7
   8e044:	0401ffc4 	movi	r16,2047
   8e048:	003e7e06 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e04c:	3809883a 	mov	r4,r7
   8e050:	0011883a 	mov	r8,zero
   8e054:	0005883a 	mov	r2,zero
   8e058:	003ee306 	br	8dbe8 <rx_descriptor_end+0xfff8db88>
   8e05c:	1c62b03a 	or	r17,r3,r17
   8e060:	8822c03a 	cmpne	r17,r17,zero
   8e064:	0005883a 	mov	r2,zero
   8e068:	003f8906 	br	8de90 <rx_descriptor_end+0xfff8de30>
   8e06c:	3809883a 	mov	r4,r7
   8e070:	4821883a 	mov	r16,r9
   8e074:	0011883a 	mov	r8,zero
   8e078:	0005883a 	mov	r2,zero
   8e07c:	003eda06 	br	8dbe8 <rx_descriptor_end+0xfff8db88>
   8e080:	0101ffc4 	movi	r4,2047
   8e084:	49003b26 	beq	r9,r4,8e174 <__subdf3+0x7b4>
   8e088:	0085c83a 	sub	r2,zero,r2
   8e08c:	18c02034 	orhi	r3,r3,128
   8e090:	01000e04 	movi	r4,56
   8e094:	20806e16 	blt	r4,r2,8e250 <__subdf3+0x890>
   8e098:	010007c4 	movi	r4,31
   8e09c:	20807716 	blt	r4,r2,8e27c <__subdf3+0x8bc>
   8e0a0:	01000804 	movi	r4,32
   8e0a4:	2089c83a 	sub	r4,r4,r2
   8e0a8:	1914983a 	sll	r10,r3,r4
   8e0ac:	8890d83a 	srl	r8,r17,r2
   8e0b0:	8908983a 	sll	r4,r17,r4
   8e0b4:	1884d83a 	srl	r2,r3,r2
   8e0b8:	5222b03a 	or	r17,r10,r8
   8e0bc:	2006c03a 	cmpne	r3,r4,zero
   8e0c0:	88e2b03a 	or	r17,r17,r3
   8e0c4:	89a3883a 	add	r17,r17,r6
   8e0c8:	1145883a 	add	r2,r2,r5
   8e0cc:	898d803a 	cmpltu	r6,r17,r6
   8e0d0:	3087883a 	add	r3,r6,r2
   8e0d4:	4821883a 	mov	r16,r9
   8e0d8:	003ed906 	br	8dc40 <rx_descriptor_end+0xfff8dbe0>
   8e0dc:	2984b03a 	or	r2,r5,r6
   8e0e0:	10004226 	beq	r2,zero,8e1ec <__subdf3+0x82c>
   8e0e4:	1808d0fa 	srli	r4,r3,3
   8e0e8:	8822d0fa 	srli	r17,r17,3
   8e0ec:	1806977a 	slli	r3,r3,29
   8e0f0:	2080022c 	andhi	r2,r4,8
   8e0f4:	1c62b03a 	or	r17,r3,r17
   8e0f8:	10000826 	beq	r2,zero,8e11c <__subdf3+0x75c>
   8e0fc:	2812d0fa 	srli	r9,r5,3
   8e100:	4880022c 	andhi	r2,r9,8
   8e104:	1000051e 	bne	r2,zero,8e11c <__subdf3+0x75c>
   8e108:	300cd0fa 	srli	r6,r6,3
   8e10c:	2804977a 	slli	r2,r5,29
   8e110:	4809883a 	mov	r4,r9
   8e114:	3825883a 	mov	r18,r7
   8e118:	11a2b03a 	or	r17,r2,r6
   8e11c:	8806d77a 	srli	r3,r17,29
   8e120:	200890fa 	slli	r4,r4,3
   8e124:	882290fa 	slli	r17,r17,3
   8e128:	0401ffc4 	movi	r16,2047
   8e12c:	1906b03a 	or	r3,r3,r4
   8e130:	003e4406 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e134:	2984b03a 	or	r2,r5,r6
   8e138:	103e4226 	beq	r2,zero,8da44 <rx_descriptor_end+0xfff8d9e4>
   8e13c:	8989c83a 	sub	r4,r17,r6
   8e140:	8911803a 	cmpltu	r8,r17,r4
   8e144:	1945c83a 	sub	r2,r3,r5
   8e148:	1205c83a 	sub	r2,r2,r8
   8e14c:	1200202c 	andhi	r8,r2,128
   8e150:	403e9a26 	beq	r8,zero,8dbbc <rx_descriptor_end+0xfff8db5c>
   8e154:	3463c83a 	sub	r17,r6,r17
   8e158:	28c5c83a 	sub	r2,r5,r3
   8e15c:	344d803a 	cmpltu	r6,r6,r17
   8e160:	1187c83a 	sub	r3,r2,r6
   8e164:	3825883a 	mov	r18,r7
   8e168:	003e3606 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e16c:	0101ffc4 	movi	r4,2047
   8e170:	493fc71e 	bne	r9,r4,8e090 <rx_descriptor_end+0xfff8e030>
   8e174:	2807883a 	mov	r3,r5
   8e178:	3023883a 	mov	r17,r6
   8e17c:	4821883a 	mov	r16,r9
   8e180:	003e3006 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e184:	10003626 	beq	r2,zero,8e260 <__subdf3+0x8a0>
   8e188:	2984b03a 	or	r2,r5,r6
   8e18c:	10001726 	beq	r2,zero,8e1ec <__subdf3+0x82c>
   8e190:	1808d0fa 	srli	r4,r3,3
   8e194:	8822d0fa 	srli	r17,r17,3
   8e198:	1806977a 	slli	r3,r3,29
   8e19c:	2080022c 	andhi	r2,r4,8
   8e1a0:	1c62b03a 	or	r17,r3,r17
   8e1a4:	10000726 	beq	r2,zero,8e1c4 <__subdf3+0x804>
   8e1a8:	2812d0fa 	srli	r9,r5,3
   8e1ac:	4880022c 	andhi	r2,r9,8
   8e1b0:	1000041e 	bne	r2,zero,8e1c4 <__subdf3+0x804>
   8e1b4:	300cd0fa 	srli	r6,r6,3
   8e1b8:	2804977a 	slli	r2,r5,29
   8e1bc:	4809883a 	mov	r4,r9
   8e1c0:	11a2b03a 	or	r17,r2,r6
   8e1c4:	8806d77a 	srli	r3,r17,29
   8e1c8:	200890fa 	slli	r4,r4,3
   8e1cc:	882290fa 	slli	r17,r17,3
   8e1d0:	3825883a 	mov	r18,r7
   8e1d4:	1906b03a 	or	r3,r3,r4
   8e1d8:	0401ffc4 	movi	r16,2047
   8e1dc:	003e1906 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e1e0:	000b883a 	mov	r5,zero
   8e1e4:	0005883a 	mov	r2,zero
   8e1e8:	003e2e06 	br	8daa4 <rx_descriptor_end+0xfff8da44>
   8e1ec:	0401ffc4 	movi	r16,2047
   8e1f0:	003e1406 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e1f4:	0005883a 	mov	r2,zero
   8e1f8:	003f7506 	br	8dfd0 <rx_descriptor_end+0xfff8df70>
   8e1fc:	0005883a 	mov	r2,zero
   8e200:	0009883a 	mov	r4,zero
   8e204:	003e7806 	br	8dbe8 <rx_descriptor_end+0xfff8db88>
   8e208:	123ff804 	addi	r8,r2,-32
   8e20c:	01000804 	movi	r4,32
   8e210:	1a10d83a 	srl	r8,r3,r8
   8e214:	11002526 	beq	r2,r4,8e2ac <__subdf3+0x8ec>
   8e218:	01001004 	movi	r4,64
   8e21c:	2085c83a 	sub	r2,r4,r2
   8e220:	1884983a 	sll	r2,r3,r2
   8e224:	1444b03a 	or	r2,r2,r17
   8e228:	1004c03a 	cmpne	r2,r2,zero
   8e22c:	40a2b03a 	or	r17,r8,r2
   8e230:	0005883a 	mov	r2,zero
   8e234:	003f1606 	br	8de90 <rx_descriptor_end+0xfff8de30>
   8e238:	02000434 	movhi	r8,16
   8e23c:	0009883a 	mov	r4,zero
   8e240:	423fffc4 	addi	r8,r8,-1
   8e244:	00bfffc4 	movi	r2,-1
   8e248:	0401ffc4 	movi	r16,2047
   8e24c:	003e6606 	br	8dbe8 <rx_descriptor_end+0xfff8db88>
   8e250:	1c62b03a 	or	r17,r3,r17
   8e254:	8822c03a 	cmpne	r17,r17,zero
   8e258:	0005883a 	mov	r2,zero
   8e25c:	003f9906 	br	8e0c4 <rx_descriptor_end+0xfff8e064>
   8e260:	2807883a 	mov	r3,r5
   8e264:	3023883a 	mov	r17,r6
   8e268:	0401ffc4 	movi	r16,2047
   8e26c:	003df506 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e270:	2807883a 	mov	r3,r5
   8e274:	3023883a 	mov	r17,r6
   8e278:	003df206 	br	8da44 <rx_descriptor_end+0xfff8d9e4>
   8e27c:	123ff804 	addi	r8,r2,-32
   8e280:	01000804 	movi	r4,32
   8e284:	1a10d83a 	srl	r8,r3,r8
   8e288:	11000a26 	beq	r2,r4,8e2b4 <__subdf3+0x8f4>
   8e28c:	01001004 	movi	r4,64
   8e290:	2085c83a 	sub	r2,r4,r2
   8e294:	1884983a 	sll	r2,r3,r2
   8e298:	1444b03a 	or	r2,r2,r17
   8e29c:	1004c03a 	cmpne	r2,r2,zero
   8e2a0:	40a2b03a 	or	r17,r8,r2
   8e2a4:	0005883a 	mov	r2,zero
   8e2a8:	003f8606 	br	8e0c4 <rx_descriptor_end+0xfff8e064>
   8e2ac:	0005883a 	mov	r2,zero
   8e2b0:	003fdc06 	br	8e224 <rx_descriptor_end+0xfff8e1c4>
   8e2b4:	0005883a 	mov	r2,zero
   8e2b8:	003ff706 	br	8e298 <rx_descriptor_end+0xfff8e238>

0008e2bc <__fixdfsi>:
   8e2bc:	280cd53a 	srli	r6,r5,20
   8e2c0:	00c00434 	movhi	r3,16
   8e2c4:	18ffffc4 	addi	r3,r3,-1
   8e2c8:	3181ffcc 	andi	r6,r6,2047
   8e2cc:	01c0ff84 	movi	r7,1022
   8e2d0:	28c6703a 	and	r3,r5,r3
   8e2d4:	280ad7fa 	srli	r5,r5,31
   8e2d8:	3980120e 	bge	r7,r6,8e324 <__fixdfsi+0x68>
   8e2dc:	00810744 	movi	r2,1053
   8e2e0:	11800c16 	blt	r2,r6,8e314 <__fixdfsi+0x58>
   8e2e4:	00810cc4 	movi	r2,1075
   8e2e8:	1185c83a 	sub	r2,r2,r6
   8e2ec:	01c007c4 	movi	r7,31
   8e2f0:	18c00434 	orhi	r3,r3,16
   8e2f4:	38800d16 	blt	r7,r2,8e32c <__fixdfsi+0x70>
   8e2f8:	31befb44 	addi	r6,r6,-1043
   8e2fc:	2084d83a 	srl	r2,r4,r2
   8e300:	1986983a 	sll	r3,r3,r6
   8e304:	1884b03a 	or	r2,r3,r2
   8e308:	28000726 	beq	r5,zero,8e328 <__fixdfsi+0x6c>
   8e30c:	0085c83a 	sub	r2,zero,r2
   8e310:	f800283a 	ret
   8e314:	00a00034 	movhi	r2,32768
   8e318:	10bfffc4 	addi	r2,r2,-1
   8e31c:	2885883a 	add	r2,r5,r2
   8e320:	f800283a 	ret
   8e324:	0005883a 	mov	r2,zero
   8e328:	f800283a 	ret
   8e32c:	008104c4 	movi	r2,1043
   8e330:	1185c83a 	sub	r2,r2,r6
   8e334:	1884d83a 	srl	r2,r3,r2
   8e338:	003ff306 	br	8e308 <rx_descriptor_end+0xfff8e2a8>

0008e33c <__floatsidf>:
   8e33c:	defffd04 	addi	sp,sp,-12
   8e340:	dfc00215 	stw	ra,8(sp)
   8e344:	dc400115 	stw	r17,4(sp)
   8e348:	dc000015 	stw	r16,0(sp)
   8e34c:	20002b26 	beq	r4,zero,8e3fc <__floatsidf+0xc0>
   8e350:	2023883a 	mov	r17,r4
   8e354:	2020d7fa 	srli	r16,r4,31
   8e358:	20002d16 	blt	r4,zero,8e410 <__floatsidf+0xd4>
   8e35c:	8809883a 	mov	r4,r17
   8e360:	008e4c00 	call	8e4c0 <__clzsi2>
   8e364:	01410784 	movi	r5,1054
   8e368:	288bc83a 	sub	r5,r5,r2
   8e36c:	01010cc4 	movi	r4,1075
   8e370:	2149c83a 	sub	r4,r4,r5
   8e374:	00c007c4 	movi	r3,31
   8e378:	1900160e 	bge	r3,r4,8e3d4 <__floatsidf+0x98>
   8e37c:	00c104c4 	movi	r3,1043
   8e380:	1947c83a 	sub	r3,r3,r5
   8e384:	88c6983a 	sll	r3,r17,r3
   8e388:	00800434 	movhi	r2,16
   8e38c:	10bfffc4 	addi	r2,r2,-1
   8e390:	1886703a 	and	r3,r3,r2
   8e394:	2941ffcc 	andi	r5,r5,2047
   8e398:	800d883a 	mov	r6,r16
   8e39c:	0005883a 	mov	r2,zero
   8e3a0:	280a953a 	slli	r5,r5,20
   8e3a4:	31803fcc 	andi	r6,r6,255
   8e3a8:	01000434 	movhi	r4,16
   8e3ac:	300c97fa 	slli	r6,r6,31
   8e3b0:	213fffc4 	addi	r4,r4,-1
   8e3b4:	1906703a 	and	r3,r3,r4
   8e3b8:	1946b03a 	or	r3,r3,r5
   8e3bc:	1986b03a 	or	r3,r3,r6
   8e3c0:	dfc00217 	ldw	ra,8(sp)
   8e3c4:	dc400117 	ldw	r17,4(sp)
   8e3c8:	dc000017 	ldw	r16,0(sp)
   8e3cc:	dec00304 	addi	sp,sp,12
   8e3d0:	f800283a 	ret
   8e3d4:	00c002c4 	movi	r3,11
   8e3d8:	1887c83a 	sub	r3,r3,r2
   8e3dc:	88c6d83a 	srl	r3,r17,r3
   8e3e0:	8904983a 	sll	r2,r17,r4
   8e3e4:	01000434 	movhi	r4,16
   8e3e8:	213fffc4 	addi	r4,r4,-1
   8e3ec:	2941ffcc 	andi	r5,r5,2047
   8e3f0:	1906703a 	and	r3,r3,r4
   8e3f4:	800d883a 	mov	r6,r16
   8e3f8:	003fe906 	br	8e3a0 <rx_descriptor_end+0xfff8e340>
   8e3fc:	000d883a 	mov	r6,zero
   8e400:	000b883a 	mov	r5,zero
   8e404:	0007883a 	mov	r3,zero
   8e408:	0005883a 	mov	r2,zero
   8e40c:	003fe406 	br	8e3a0 <rx_descriptor_end+0xfff8e340>
   8e410:	0123c83a 	sub	r17,zero,r4
   8e414:	003fd106 	br	8e35c <rx_descriptor_end+0xfff8e2fc>

0008e418 <__floatunsidf>:
   8e418:	defffe04 	addi	sp,sp,-8
   8e41c:	dc000015 	stw	r16,0(sp)
   8e420:	dfc00115 	stw	ra,4(sp)
   8e424:	2021883a 	mov	r16,r4
   8e428:	20002226 	beq	r4,zero,8e4b4 <__floatunsidf+0x9c>
   8e42c:	008e4c00 	call	8e4c0 <__clzsi2>
   8e430:	01010784 	movi	r4,1054
   8e434:	2089c83a 	sub	r4,r4,r2
   8e438:	01810cc4 	movi	r6,1075
   8e43c:	310dc83a 	sub	r6,r6,r4
   8e440:	00c007c4 	movi	r3,31
   8e444:	1980120e 	bge	r3,r6,8e490 <__floatunsidf+0x78>
   8e448:	00c104c4 	movi	r3,1043
   8e44c:	1907c83a 	sub	r3,r3,r4
   8e450:	80ca983a 	sll	r5,r16,r3
   8e454:	00800434 	movhi	r2,16
   8e458:	10bfffc4 	addi	r2,r2,-1
   8e45c:	2101ffcc 	andi	r4,r4,2047
   8e460:	0021883a 	mov	r16,zero
   8e464:	288a703a 	and	r5,r5,r2
   8e468:	2008953a 	slli	r4,r4,20
   8e46c:	00c00434 	movhi	r3,16
   8e470:	18ffffc4 	addi	r3,r3,-1
   8e474:	28c6703a 	and	r3,r5,r3
   8e478:	8005883a 	mov	r2,r16
   8e47c:	1906b03a 	or	r3,r3,r4
   8e480:	dfc00117 	ldw	ra,4(sp)
   8e484:	dc000017 	ldw	r16,0(sp)
   8e488:	dec00204 	addi	sp,sp,8
   8e48c:	f800283a 	ret
   8e490:	00c002c4 	movi	r3,11
   8e494:	188bc83a 	sub	r5,r3,r2
   8e498:	814ad83a 	srl	r5,r16,r5
   8e49c:	00c00434 	movhi	r3,16
   8e4a0:	18ffffc4 	addi	r3,r3,-1
   8e4a4:	81a0983a 	sll	r16,r16,r6
   8e4a8:	2101ffcc 	andi	r4,r4,2047
   8e4ac:	28ca703a 	and	r5,r5,r3
   8e4b0:	003fed06 	br	8e468 <rx_descriptor_end+0xfff8e408>
   8e4b4:	0009883a 	mov	r4,zero
   8e4b8:	000b883a 	mov	r5,zero
   8e4bc:	003fea06 	br	8e468 <rx_descriptor_end+0xfff8e408>

0008e4c0 <__clzsi2>:
   8e4c0:	00bfffd4 	movui	r2,65535
   8e4c4:	11000536 	bltu	r2,r4,8e4dc <__clzsi2+0x1c>
   8e4c8:	00803fc4 	movi	r2,255
   8e4cc:	11000f36 	bltu	r2,r4,8e50c <__clzsi2+0x4c>
   8e4d0:	00800804 	movi	r2,32
   8e4d4:	0007883a 	mov	r3,zero
   8e4d8:	00000506 	br	8e4f0 <__clzsi2+0x30>
   8e4dc:	00804034 	movhi	r2,256
   8e4e0:	10bfffc4 	addi	r2,r2,-1
   8e4e4:	11000c2e 	bgeu	r2,r4,8e518 <__clzsi2+0x58>
   8e4e8:	00800204 	movi	r2,8
   8e4ec:	00c00604 	movi	r3,24
   8e4f0:	20c8d83a 	srl	r4,r4,r3
   8e4f4:	00c00274 	movhi	r3,9
   8e4f8:	18c92504 	addi	r3,r3,9364
   8e4fc:	1909883a 	add	r4,r3,r4
   8e500:	20c00003 	ldbu	r3,0(r4)
   8e504:	10c5c83a 	sub	r2,r2,r3
   8e508:	f800283a 	ret
   8e50c:	00800604 	movi	r2,24
   8e510:	00c00204 	movi	r3,8
   8e514:	003ff606 	br	8e4f0 <rx_descriptor_end+0xfff8e490>
   8e518:	00800404 	movi	r2,16
   8e51c:	1007883a 	mov	r3,r2
   8e520:	003ff306 	br	8e4f0 <rx_descriptor_end+0xfff8e490>

0008e524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e524:	defffe04 	addi	sp,sp,-8
   8e528:	dfc00115 	stw	ra,4(sp)
   8e52c:	df000015 	stw	fp,0(sp)
   8e530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e534:	d0a00c17 	ldw	r2,-32720(gp)
   8e538:	10000326 	beq	r2,zero,8e548 <alt_get_errno+0x24>
   8e53c:	d0a00c17 	ldw	r2,-32720(gp)
   8e540:	103ee83a 	callr	r2
   8e544:	00000106 	br	8e54c <alt_get_errno+0x28>
   8e548:	d0a7fa04 	addi	r2,gp,-24600
}
   8e54c:	e037883a 	mov	sp,fp
   8e550:	dfc00117 	ldw	ra,4(sp)
   8e554:	df000017 	ldw	fp,0(sp)
   8e558:	dec00204 	addi	sp,sp,8
   8e55c:	f800283a 	ret

0008e560 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e560:	defffb04 	addi	sp,sp,-20
   8e564:	dfc00415 	stw	ra,16(sp)
   8e568:	df000315 	stw	fp,12(sp)
   8e56c:	df000304 	addi	fp,sp,12
   8e570:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e574:	e0bfff17 	ldw	r2,-4(fp)
   8e578:	10000616 	blt	r2,zero,8e594 <close+0x34>
   8e57c:	e0bfff17 	ldw	r2,-4(fp)
   8e580:	10c00324 	muli	r3,r2,12
   8e584:	00800274 	movhi	r2,9
   8e588:	108cab04 	addi	r2,r2,12972
   8e58c:	1885883a 	add	r2,r3,r2
   8e590:	00000106 	br	8e598 <close+0x38>
   8e594:	0005883a 	mov	r2,zero
   8e598:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8e59c:	e0bffd17 	ldw	r2,-12(fp)
   8e5a0:	10001926 	beq	r2,zero,8e608 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e5a4:	e0bffd17 	ldw	r2,-12(fp)
   8e5a8:	10800017 	ldw	r2,0(r2)
   8e5ac:	10800417 	ldw	r2,16(r2)
   8e5b0:	10000626 	beq	r2,zero,8e5cc <close+0x6c>
   8e5b4:	e0bffd17 	ldw	r2,-12(fp)
   8e5b8:	10800017 	ldw	r2,0(r2)
   8e5bc:	10800417 	ldw	r2,16(r2)
   8e5c0:	e13ffd17 	ldw	r4,-12(fp)
   8e5c4:	103ee83a 	callr	r2
   8e5c8:	00000106 	br	8e5d0 <close+0x70>
   8e5cc:	0005883a 	mov	r2,zero
   8e5d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e5d4:	e13fff17 	ldw	r4,-4(fp)
   8e5d8:	008eed00 	call	8eed0 <alt_release_fd>
    if (rval < 0)
   8e5dc:	e0bffe17 	ldw	r2,-8(fp)
   8e5e0:	1000070e 	bge	r2,zero,8e600 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8e5e4:	008e5240 	call	8e524 <alt_get_errno>
   8e5e8:	1007883a 	mov	r3,r2
   8e5ec:	e0bffe17 	ldw	r2,-8(fp)
   8e5f0:	0085c83a 	sub	r2,zero,r2
   8e5f4:	18800015 	stw	r2,0(r3)
      return -1;
   8e5f8:	00bfffc4 	movi	r2,-1
   8e5fc:	00000706 	br	8e61c <close+0xbc>
    }
    return 0;
   8e600:	0005883a 	mov	r2,zero
   8e604:	00000506 	br	8e61c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e608:	008e5240 	call	8e524 <alt_get_errno>
   8e60c:	1007883a 	mov	r3,r2
   8e610:	00801444 	movi	r2,81
   8e614:	18800015 	stw	r2,0(r3)
    return -1;
   8e618:	00bfffc4 	movi	r2,-1
  }
}
   8e61c:	e037883a 	mov	sp,fp
   8e620:	dfc00117 	ldw	ra,4(sp)
   8e624:	df000017 	ldw	fp,0(sp)
   8e628:	dec00204 	addi	sp,sp,8
   8e62c:	f800283a 	ret

0008e630 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8e630:	defffe04 	addi	sp,sp,-8
   8e634:	df000115 	stw	fp,4(sp)
   8e638:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8e63c:	e03fff15 	stw	zero,-4(fp)
   8e640:	00000506 	br	8e658 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8e644:	e0bfff17 	ldw	r2,-4(fp)
   8e648:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8e64c:	e0bfff17 	ldw	r2,-4(fp)
   8e650:	10800804 	addi	r2,r2,32
   8e654:	e0bfff15 	stw	r2,-4(fp)
   8e658:	e0bfff17 	ldw	r2,-4(fp)
   8e65c:	10820030 	cmpltui	r2,r2,2048
   8e660:	103ff81e 	bne	r2,zero,8e644 <rx_descriptor_end+0xfff8e5e4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8e664:	0001883a 	nop
   8e668:	e037883a 	mov	sp,fp
   8e66c:	df000017 	ldw	fp,0(sp)
   8e670:	dec00104 	addi	sp,sp,4
   8e674:	f800283a 	ret

0008e678 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8e678:	defffc04 	addi	sp,sp,-16
   8e67c:	df000315 	stw	fp,12(sp)
   8e680:	df000304 	addi	fp,sp,12
   8e684:	e13ffd15 	stw	r4,-12(fp)
   8e688:	e17ffe15 	stw	r5,-8(fp)
   8e68c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8e690:	e0bfff17 	ldw	r2,-4(fp)
}
   8e694:	e037883a 	mov	sp,fp
   8e698:	df000017 	ldw	fp,0(sp)
   8e69c:	dec00104 	addi	sp,sp,4
   8e6a0:	f800283a 	ret

0008e6a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e6a4:	defffe04 	addi	sp,sp,-8
   8e6a8:	dfc00115 	stw	ra,4(sp)
   8e6ac:	df000015 	stw	fp,0(sp)
   8e6b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e6b4:	d0a00c17 	ldw	r2,-32720(gp)
   8e6b8:	10000326 	beq	r2,zero,8e6c8 <alt_get_errno+0x24>
   8e6bc:	d0a00c17 	ldw	r2,-32720(gp)
   8e6c0:	103ee83a 	callr	r2
   8e6c4:	00000106 	br	8e6cc <alt_get_errno+0x28>
   8e6c8:	d0a7fa04 	addi	r2,gp,-24600
}
   8e6cc:	e037883a 	mov	sp,fp
   8e6d0:	dfc00117 	ldw	ra,4(sp)
   8e6d4:	df000017 	ldw	fp,0(sp)
   8e6d8:	dec00204 	addi	sp,sp,8
   8e6dc:	f800283a 	ret

0008e6e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e6e0:	defffb04 	addi	sp,sp,-20
   8e6e4:	dfc00415 	stw	ra,16(sp)
   8e6e8:	df000315 	stw	fp,12(sp)
   8e6ec:	df000304 	addi	fp,sp,12
   8e6f0:	e13ffe15 	stw	r4,-8(fp)
   8e6f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e6f8:	e0bffe17 	ldw	r2,-8(fp)
   8e6fc:	10000616 	blt	r2,zero,8e718 <fstat+0x38>
   8e700:	e0bffe17 	ldw	r2,-8(fp)
   8e704:	10c00324 	muli	r3,r2,12
   8e708:	00800274 	movhi	r2,9
   8e70c:	108cab04 	addi	r2,r2,12972
   8e710:	1885883a 	add	r2,r3,r2
   8e714:	00000106 	br	8e71c <fstat+0x3c>
   8e718:	0005883a 	mov	r2,zero
   8e71c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8e720:	e0bffd17 	ldw	r2,-12(fp)
   8e724:	10001026 	beq	r2,zero,8e768 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e728:	e0bffd17 	ldw	r2,-12(fp)
   8e72c:	10800017 	ldw	r2,0(r2)
   8e730:	10800817 	ldw	r2,32(r2)
   8e734:	10000726 	beq	r2,zero,8e754 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8e738:	e0bffd17 	ldw	r2,-12(fp)
   8e73c:	10800017 	ldw	r2,0(r2)
   8e740:	10800817 	ldw	r2,32(r2)
   8e744:	e17fff17 	ldw	r5,-4(fp)
   8e748:	e13ffd17 	ldw	r4,-12(fp)
   8e74c:	103ee83a 	callr	r2
   8e750:	00000a06 	br	8e77c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e754:	e0bfff17 	ldw	r2,-4(fp)
   8e758:	00c80004 	movi	r3,8192
   8e75c:	10c00115 	stw	r3,4(r2)
      return 0;
   8e760:	0005883a 	mov	r2,zero
   8e764:	00000506 	br	8e77c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e768:	008e6a40 	call	8e6a4 <alt_get_errno>
   8e76c:	1007883a 	mov	r3,r2
   8e770:	00801444 	movi	r2,81
   8e774:	18800015 	stw	r2,0(r3)
    return -1;
   8e778:	00bfffc4 	movi	r2,-1
  }
}
   8e77c:	e037883a 	mov	sp,fp
   8e780:	dfc00117 	ldw	ra,4(sp)
   8e784:	df000017 	ldw	fp,0(sp)
   8e788:	dec00204 	addi	sp,sp,8
   8e78c:	f800283a 	ret

0008e790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e790:	defffe04 	addi	sp,sp,-8
   8e794:	dfc00115 	stw	ra,4(sp)
   8e798:	df000015 	stw	fp,0(sp)
   8e79c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e7a0:	d0a00c17 	ldw	r2,-32720(gp)
   8e7a4:	10000326 	beq	r2,zero,8e7b4 <alt_get_errno+0x24>
   8e7a8:	d0a00c17 	ldw	r2,-32720(gp)
   8e7ac:	103ee83a 	callr	r2
   8e7b0:	00000106 	br	8e7b8 <alt_get_errno+0x28>
   8e7b4:	d0a7fa04 	addi	r2,gp,-24600
}
   8e7b8:	e037883a 	mov	sp,fp
   8e7bc:	dfc00117 	ldw	ra,4(sp)
   8e7c0:	df000017 	ldw	fp,0(sp)
   8e7c4:	dec00204 	addi	sp,sp,8
   8e7c8:	f800283a 	ret

0008e7cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e7cc:	deffed04 	addi	sp,sp,-76
   8e7d0:	dfc01215 	stw	ra,72(sp)
   8e7d4:	df001115 	stw	fp,68(sp)
   8e7d8:	df001104 	addi	fp,sp,68
   8e7dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e7e0:	e0bfff17 	ldw	r2,-4(fp)
   8e7e4:	10000616 	blt	r2,zero,8e800 <isatty+0x34>
   8e7e8:	e0bfff17 	ldw	r2,-4(fp)
   8e7ec:	10c00324 	muli	r3,r2,12
   8e7f0:	00800274 	movhi	r2,9
   8e7f4:	108cab04 	addi	r2,r2,12972
   8e7f8:	1885883a 	add	r2,r3,r2
   8e7fc:	00000106 	br	8e804 <isatty+0x38>
   8e800:	0005883a 	mov	r2,zero
   8e804:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8e808:	e0bfef17 	ldw	r2,-68(fp)
   8e80c:	10000e26 	beq	r2,zero,8e848 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e810:	e0bfef17 	ldw	r2,-68(fp)
   8e814:	10800017 	ldw	r2,0(r2)
   8e818:	10800817 	ldw	r2,32(r2)
   8e81c:	1000021e 	bne	r2,zero,8e828 <isatty+0x5c>
    {
      return 1;
   8e820:	00800044 	movi	r2,1
   8e824:	00000d06 	br	8e85c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e828:	e0bff004 	addi	r2,fp,-64
   8e82c:	100b883a 	mov	r5,r2
   8e830:	e13fff17 	ldw	r4,-4(fp)
   8e834:	008e6e00 	call	8e6e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e838:	e0bff117 	ldw	r2,-60(fp)
   8e83c:	10880020 	cmpeqi	r2,r2,8192
   8e840:	10803fcc 	andi	r2,r2,255
   8e844:	00000506 	br	8e85c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e848:	008e7900 	call	8e790 <alt_get_errno>
   8e84c:	1007883a 	mov	r3,r2
   8e850:	00801444 	movi	r2,81
   8e854:	18800015 	stw	r2,0(r3)
    return 0;
   8e858:	0005883a 	mov	r2,zero
  }
}
   8e85c:	e037883a 	mov	sp,fp
   8e860:	dfc00117 	ldw	ra,4(sp)
   8e864:	df000017 	ldw	fp,0(sp)
   8e868:	dec00204 	addi	sp,sp,8
   8e86c:	f800283a 	ret

0008e870 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e870:	defffc04 	addi	sp,sp,-16
   8e874:	df000315 	stw	fp,12(sp)
   8e878:	df000304 	addi	fp,sp,12
   8e87c:	e13ffd15 	stw	r4,-12(fp)
   8e880:	e17ffe15 	stw	r5,-8(fp)
   8e884:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e888:	e0fffe17 	ldw	r3,-8(fp)
   8e88c:	e0bffd17 	ldw	r2,-12(fp)
   8e890:	18800c26 	beq	r3,r2,8e8c4 <alt_load_section+0x54>
  {
    while( to != end )
   8e894:	00000806 	br	8e8b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e898:	e0bffe17 	ldw	r2,-8(fp)
   8e89c:	10c00104 	addi	r3,r2,4
   8e8a0:	e0fffe15 	stw	r3,-8(fp)
   8e8a4:	e0fffd17 	ldw	r3,-12(fp)
   8e8a8:	19000104 	addi	r4,r3,4
   8e8ac:	e13ffd15 	stw	r4,-12(fp)
   8e8b0:	18c00017 	ldw	r3,0(r3)
   8e8b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e8b8:	e0fffe17 	ldw	r3,-8(fp)
   8e8bc:	e0bfff17 	ldw	r2,-4(fp)
   8e8c0:	18bff51e 	bne	r3,r2,8e898 <rx_descriptor_end+0xfff8e838>
    {
      *to++ = *from++;
    }
  }
}
   8e8c4:	0001883a 	nop
   8e8c8:	e037883a 	mov	sp,fp
   8e8cc:	df000017 	ldw	fp,0(sp)
   8e8d0:	dec00104 	addi	sp,sp,4
   8e8d4:	f800283a 	ret

0008e8d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e8d8:	defffe04 	addi	sp,sp,-8
   8e8dc:	dfc00115 	stw	ra,4(sp)
   8e8e0:	df000015 	stw	fp,0(sp)
   8e8e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e8e8:	01800274 	movhi	r6,9
   8e8ec:	31914e04 	addi	r6,r6,17720
   8e8f0:	01400274 	movhi	r5,9
   8e8f4:	29497804 	addi	r5,r5,9696
   8e8f8:	01000274 	movhi	r4,9
   8e8fc:	21114e04 	addi	r4,r4,17720
   8e900:	008e8700 	call	8e870 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e904:	01800234 	movhi	r6,8
   8e908:	31809104 	addi	r6,r6,580
   8e90c:	01400234 	movhi	r5,8
   8e910:	29400804 	addi	r5,r5,32
   8e914:	01000234 	movhi	r4,8
   8e918:	21000804 	addi	r4,r4,32
   8e91c:	008e8700 	call	8e870 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e920:	01800274 	movhi	r6,9
   8e924:	31897804 	addi	r6,r6,9696
   8e928:	01400274 	movhi	r5,9
   8e92c:	29475d04 	addi	r5,r5,7540
   8e930:	01000274 	movhi	r4,9
   8e934:	21075d04 	addi	r4,r4,7540
   8e938:	008e8700 	call	8e870 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e93c:	008e6300 	call	8e630 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e940:	0090ed80 	call	90ed8 <alt_icache_flush_all>
}
   8e944:	0001883a 	nop
   8e948:	e037883a 	mov	sp,fp
   8e94c:	dfc00117 	ldw	ra,4(sp)
   8e950:	df000017 	ldw	fp,0(sp)
   8e954:	dec00204 	addi	sp,sp,8
   8e958:	f800283a 	ret

0008e95c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e95c:	defffe04 	addi	sp,sp,-8
   8e960:	dfc00115 	stw	ra,4(sp)
   8e964:	df000015 	stw	fp,0(sp)
   8e968:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e96c:	d0a00c17 	ldw	r2,-32720(gp)
   8e970:	10000326 	beq	r2,zero,8e980 <alt_get_errno+0x24>
   8e974:	d0a00c17 	ldw	r2,-32720(gp)
   8e978:	103ee83a 	callr	r2
   8e97c:	00000106 	br	8e984 <alt_get_errno+0x28>
   8e980:	d0a7fa04 	addi	r2,gp,-24600
}
   8e984:	e037883a 	mov	sp,fp
   8e988:	dfc00117 	ldw	ra,4(sp)
   8e98c:	df000017 	ldw	fp,0(sp)
   8e990:	dec00204 	addi	sp,sp,8
   8e994:	f800283a 	ret

0008e998 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e998:	defff904 	addi	sp,sp,-28
   8e99c:	dfc00615 	stw	ra,24(sp)
   8e9a0:	df000515 	stw	fp,20(sp)
   8e9a4:	df000504 	addi	fp,sp,20
   8e9a8:	e13ffd15 	stw	r4,-12(fp)
   8e9ac:	e17ffe15 	stw	r5,-8(fp)
   8e9b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e9b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e9b8:	e0bffd17 	ldw	r2,-12(fp)
   8e9bc:	10000616 	blt	r2,zero,8e9d8 <lseek+0x40>
   8e9c0:	e0bffd17 	ldw	r2,-12(fp)
   8e9c4:	10c00324 	muli	r3,r2,12
   8e9c8:	00800274 	movhi	r2,9
   8e9cc:	108cab04 	addi	r2,r2,12972
   8e9d0:	1885883a 	add	r2,r3,r2
   8e9d4:	00000106 	br	8e9dc <lseek+0x44>
   8e9d8:	0005883a 	mov	r2,zero
   8e9dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e9e0:	e0bffc17 	ldw	r2,-16(fp)
   8e9e4:	10001026 	beq	r2,zero,8ea28 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e9e8:	e0bffc17 	ldw	r2,-16(fp)
   8e9ec:	10800017 	ldw	r2,0(r2)
   8e9f0:	10800717 	ldw	r2,28(r2)
   8e9f4:	10000926 	beq	r2,zero,8ea1c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e9f8:	e0bffc17 	ldw	r2,-16(fp)
   8e9fc:	10800017 	ldw	r2,0(r2)
   8ea00:	10800717 	ldw	r2,28(r2)
   8ea04:	e1bfff17 	ldw	r6,-4(fp)
   8ea08:	e17ffe17 	ldw	r5,-8(fp)
   8ea0c:	e13ffc17 	ldw	r4,-16(fp)
   8ea10:	103ee83a 	callr	r2
   8ea14:	e0bffb15 	stw	r2,-20(fp)
   8ea18:	00000506 	br	8ea30 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8ea1c:	00bfde84 	movi	r2,-134
   8ea20:	e0bffb15 	stw	r2,-20(fp)
   8ea24:	00000206 	br	8ea30 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8ea28:	00bfebc4 	movi	r2,-81
   8ea2c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8ea30:	e0bffb17 	ldw	r2,-20(fp)
   8ea34:	1000070e 	bge	r2,zero,8ea54 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8ea38:	008e95c0 	call	8e95c <alt_get_errno>
   8ea3c:	1007883a 	mov	r3,r2
   8ea40:	e0bffb17 	ldw	r2,-20(fp)
   8ea44:	0085c83a 	sub	r2,zero,r2
   8ea48:	18800015 	stw	r2,0(r3)
    rc = -1;
   8ea4c:	00bfffc4 	movi	r2,-1
   8ea50:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8ea54:	e0bffb17 	ldw	r2,-20(fp)
}
   8ea58:	e037883a 	mov	sp,fp
   8ea5c:	dfc00117 	ldw	ra,4(sp)
   8ea60:	df000017 	ldw	fp,0(sp)
   8ea64:	dec00204 	addi	sp,sp,8
   8ea68:	f800283a 	ret

0008ea6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8ea6c:	defffd04 	addi	sp,sp,-12
   8ea70:	dfc00215 	stw	ra,8(sp)
   8ea74:	df000115 	stw	fp,4(sp)
   8ea78:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8ea7c:	0009883a 	mov	r4,zero
   8ea80:	008f14c0 	call	8f14c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8ea84:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8ea88:	008f1840 	call	8f184 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8ea8c:	01800274 	movhi	r6,9
   8ea90:	31896804 	addi	r6,r6,9632
   8ea94:	01400274 	movhi	r5,9
   8ea98:	29496804 	addi	r5,r5,9632
   8ea9c:	01000274 	movhi	r4,9
   8eaa0:	21096804 	addi	r4,r4,9632
   8eaa4:	00912700 	call	91270 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8eaa8:	0090d880 	call	90d88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8eaac:	01000274 	movhi	r4,9
   8eab0:	21037a04 	addi	r4,r4,3560
   8eab4:	00919e00 	call	919e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8eab8:	d0a7fe17 	ldw	r2,-24584(gp)
   8eabc:	d0e7ff17 	ldw	r3,-24580(gp)
   8eac0:	d1280017 	ldw	r4,-24576(gp)
   8eac4:	200d883a 	mov	r6,r4
   8eac8:	180b883a 	mov	r5,r3
   8eacc:	1009883a 	mov	r4,r2
   8ead0:	00817780 	call	81778 <main>
   8ead4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8ead8:	01000044 	movi	r4,1
   8eadc:	008e5600 	call	8e560 <close>
  exit (result);
   8eae0:	e13fff17 	ldw	r4,-4(fp)
   8eae4:	00919f40 	call	919f4 <exit>

0008eae8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8eae8:	defffe04 	addi	sp,sp,-8
   8eaec:	df000115 	stw	fp,4(sp)
   8eaf0:	df000104 	addi	fp,sp,4
   8eaf4:	e13fff15 	stw	r4,-4(fp)
}
   8eaf8:	0001883a 	nop
   8eafc:	e037883a 	mov	sp,fp
   8eb00:	df000017 	ldw	fp,0(sp)
   8eb04:	dec00104 	addi	sp,sp,4
   8eb08:	f800283a 	ret

0008eb0c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8eb0c:	defffe04 	addi	sp,sp,-8
   8eb10:	df000115 	stw	fp,4(sp)
   8eb14:	df000104 	addi	fp,sp,4
   8eb18:	e13fff15 	stw	r4,-4(fp)
}
   8eb1c:	0001883a 	nop
   8eb20:	e037883a 	mov	sp,fp
   8eb24:	df000017 	ldw	fp,0(sp)
   8eb28:	dec00104 	addi	sp,sp,4
   8eb2c:	f800283a 	ret

0008eb30 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8eb30:	defff204 	addi	sp,sp,-56
   8eb34:	dfc00a15 	stw	ra,40(sp)
   8eb38:	df000915 	stw	fp,36(sp)
   8eb3c:	df000904 	addi	fp,sp,36
   8eb40:	e13fff15 	stw	r4,-4(fp)
   8eb44:	e1400215 	stw	r5,8(fp)
   8eb48:	e1800315 	stw	r6,12(fp)
   8eb4c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   8eb50:	e0800204 	addi	r2,fp,8
   8eb54:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8eb58:	e0bfff17 	ldw	r2,-4(fp)
   8eb5c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   8eb60:	00006f06 	br	8ed20 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8eb64:	e0bff807 	ldb	r2,-32(fp)
   8eb68:	10800960 	cmpeqi	r2,r2,37
   8eb6c:	1000041e 	bne	r2,zero,8eb80 <alt_printf+0x50>
        {
            alt_putchar(c);
   8eb70:	e0bff807 	ldb	r2,-32(fp)
   8eb74:	1009883a 	mov	r4,r2
   8eb78:	008ed5c0 	call	8ed5c <alt_putchar>
   8eb7c:	00006806 	br	8ed20 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8eb80:	e0bff717 	ldw	r2,-36(fp)
   8eb84:	10c00044 	addi	r3,r2,1
   8eb88:	e0fff715 	stw	r3,-36(fp)
   8eb8c:	10800003 	ldbu	r2,0(r2)
   8eb90:	e0bff805 	stb	r2,-32(fp)
   8eb94:	e0bff807 	ldb	r2,-32(fp)
   8eb98:	10006926 	beq	r2,zero,8ed40 <alt_printf+0x210>
            {
                if (c == '%')
   8eb9c:	e0bff807 	ldb	r2,-32(fp)
   8eba0:	10800958 	cmpnei	r2,r2,37
   8eba4:	1000041e 	bne	r2,zero,8ebb8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8eba8:	e0bff807 	ldb	r2,-32(fp)
   8ebac:	1009883a 	mov	r4,r2
   8ebb0:	008ed5c0 	call	8ed5c <alt_putchar>
   8ebb4:	00005a06 	br	8ed20 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   8ebb8:	e0bff807 	ldb	r2,-32(fp)
   8ebbc:	108018d8 	cmpnei	r2,r2,99
   8ebc0:	1000081e 	bne	r2,zero,8ebe4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   8ebc4:	e0bffe17 	ldw	r2,-8(fp)
   8ebc8:	10c00104 	addi	r3,r2,4
   8ebcc:	e0fffe15 	stw	r3,-8(fp)
   8ebd0:	10800017 	ldw	r2,0(r2)
   8ebd4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   8ebd8:	e13ffd17 	ldw	r4,-12(fp)
   8ebdc:	008ed5c0 	call	8ed5c <alt_putchar>
   8ebe0:	00004f06 	br	8ed20 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   8ebe4:	e0bff807 	ldb	r2,-32(fp)
   8ebe8:	10801e18 	cmpnei	r2,r2,120
   8ebec:	1000341e 	bne	r2,zero,8ecc0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8ebf0:	e0bffe17 	ldw	r2,-8(fp)
   8ebf4:	10c00104 	addi	r3,r2,4
   8ebf8:	e0fffe15 	stw	r3,-8(fp)
   8ebfc:	10800017 	ldw	r2,0(r2)
   8ec00:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8ec04:	e0bffb17 	ldw	r2,-20(fp)
   8ec08:	1000031e 	bne	r2,zero,8ec18 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   8ec0c:	01000c04 	movi	r4,48
   8ec10:	008ed5c0 	call	8ed5c <alt_putchar>
                        continue;
   8ec14:	00004206 	br	8ed20 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   8ec18:	00800704 	movi	r2,28
   8ec1c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   8ec20:	00000306 	br	8ec30 <alt_printf+0x100>
                        digit_shift -= 4;
   8ec24:	e0bff917 	ldw	r2,-28(fp)
   8ec28:	10bfff04 	addi	r2,r2,-4
   8ec2c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8ec30:	00c003c4 	movi	r3,15
   8ec34:	e0bff917 	ldw	r2,-28(fp)
   8ec38:	1884983a 	sll	r2,r3,r2
   8ec3c:	1007883a 	mov	r3,r2
   8ec40:	e0bffb17 	ldw	r2,-20(fp)
   8ec44:	1884703a 	and	r2,r3,r2
   8ec48:	103ff626 	beq	r2,zero,8ec24 <rx_descriptor_end+0xfff8ebc4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8ec4c:	00001906 	br	8ecb4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8ec50:	00c003c4 	movi	r3,15
   8ec54:	e0bff917 	ldw	r2,-28(fp)
   8ec58:	1884983a 	sll	r2,r3,r2
   8ec5c:	1007883a 	mov	r3,r2
   8ec60:	e0bffb17 	ldw	r2,-20(fp)
   8ec64:	1886703a 	and	r3,r3,r2
   8ec68:	e0bff917 	ldw	r2,-28(fp)
   8ec6c:	1884d83a 	srl	r2,r3,r2
   8ec70:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   8ec74:	e0bffc17 	ldw	r2,-16(fp)
   8ec78:	108002a8 	cmpgeui	r2,r2,10
   8ec7c:	1000041e 	bne	r2,zero,8ec90 <alt_printf+0x160>
                            c = '0' + digit;
   8ec80:	e0bffc17 	ldw	r2,-16(fp)
   8ec84:	10800c04 	addi	r2,r2,48
   8ec88:	e0bff805 	stb	r2,-32(fp)
   8ec8c:	00000306 	br	8ec9c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   8ec90:	e0bffc17 	ldw	r2,-16(fp)
   8ec94:	108015c4 	addi	r2,r2,87
   8ec98:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   8ec9c:	e0bff807 	ldb	r2,-32(fp)
   8eca0:	1009883a 	mov	r4,r2
   8eca4:	008ed5c0 	call	8ed5c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8eca8:	e0bff917 	ldw	r2,-28(fp)
   8ecac:	10bfff04 	addi	r2,r2,-4
   8ecb0:	e0bff915 	stw	r2,-28(fp)
   8ecb4:	e0bff917 	ldw	r2,-28(fp)
   8ecb8:	103fe50e 	bge	r2,zero,8ec50 <rx_descriptor_end+0xfff8ebf0>
   8ecbc:	00001806 	br	8ed20 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8ecc0:	e0bff807 	ldb	r2,-32(fp)
   8ecc4:	10801cd8 	cmpnei	r2,r2,115
   8ecc8:	1000151e 	bne	r2,zero,8ed20 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8eccc:	e0bffe17 	ldw	r2,-8(fp)
   8ecd0:	10c00104 	addi	r3,r2,4
   8ecd4:	e0fffe15 	stw	r3,-8(fp)
   8ecd8:	10800017 	ldw	r2,0(r2)
   8ecdc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   8ece0:	00000906 	br	8ed08 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   8ece4:	e0bffa17 	ldw	r2,-24(fp)
   8ece8:	10c00044 	addi	r3,r2,1
   8ecec:	e0fffa15 	stw	r3,-24(fp)
   8ecf0:	10800003 	ldbu	r2,0(r2)
   8ecf4:	10803fcc 	andi	r2,r2,255
   8ecf8:	1080201c 	xori	r2,r2,128
   8ecfc:	10bfe004 	addi	r2,r2,-128
   8ed00:	1009883a 	mov	r4,r2
   8ed04:	008ed5c0 	call	8ed5c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8ed08:	e0bffa17 	ldw	r2,-24(fp)
   8ed0c:	10800003 	ldbu	r2,0(r2)
   8ed10:	10803fcc 	andi	r2,r2,255
   8ed14:	1080201c 	xori	r2,r2,128
   8ed18:	10bfe004 	addi	r2,r2,-128
   8ed1c:	103ff11e 	bne	r2,zero,8ece4 <rx_descriptor_end+0xfff8ec84>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8ed20:	e0bff717 	ldw	r2,-36(fp)
   8ed24:	10c00044 	addi	r3,r2,1
   8ed28:	e0fff715 	stw	r3,-36(fp)
   8ed2c:	10800003 	ldbu	r2,0(r2)
   8ed30:	e0bff805 	stb	r2,-32(fp)
   8ed34:	e0bff807 	ldb	r2,-32(fp)
   8ed38:	103f8a1e 	bne	r2,zero,8eb64 <rx_descriptor_end+0xfff8eb04>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8ed3c:	00000106 	br	8ed44 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   8ed40:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8ed44:	0001883a 	nop
   8ed48:	e037883a 	mov	sp,fp
   8ed4c:	dfc00117 	ldw	ra,4(sp)
   8ed50:	df000017 	ldw	fp,0(sp)
   8ed54:	dec00504 	addi	sp,sp,20
   8ed58:	f800283a 	ret

0008ed5c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8ed5c:	defffd04 	addi	sp,sp,-12
   8ed60:	dfc00215 	stw	ra,8(sp)
   8ed64:	df000115 	stw	fp,4(sp)
   8ed68:	df000104 	addi	fp,sp,4
   8ed6c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   8ed70:	d0a00217 	ldw	r2,-32760(gp)
   8ed74:	10800217 	ldw	r2,8(r2)
   8ed78:	100b883a 	mov	r5,r2
   8ed7c:	e13fff17 	ldw	r4,-4(fp)
   8ed80:	0088d780 	call	88d78 <putc>
#endif
#endif
}
   8ed84:	e037883a 	mov	sp,fp
   8ed88:	dfc00117 	ldw	ra,4(sp)
   8ed8c:	df000017 	ldw	fp,0(sp)
   8ed90:	dec00204 	addi	sp,sp,8
   8ed94:	f800283a 	ret

0008ed98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ed98:	defffe04 	addi	sp,sp,-8
   8ed9c:	dfc00115 	stw	ra,4(sp)
   8eda0:	df000015 	stw	fp,0(sp)
   8eda4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8eda8:	d0a00c17 	ldw	r2,-32720(gp)
   8edac:	10000326 	beq	r2,zero,8edbc <alt_get_errno+0x24>
   8edb0:	d0a00c17 	ldw	r2,-32720(gp)
   8edb4:	103ee83a 	callr	r2
   8edb8:	00000106 	br	8edc0 <alt_get_errno+0x28>
   8edbc:	d0a7fa04 	addi	r2,gp,-24600
}
   8edc0:	e037883a 	mov	sp,fp
   8edc4:	dfc00117 	ldw	ra,4(sp)
   8edc8:	df000017 	ldw	fp,0(sp)
   8edcc:	dec00204 	addi	sp,sp,8
   8edd0:	f800283a 	ret

0008edd4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8edd4:	defff904 	addi	sp,sp,-28
   8edd8:	dfc00615 	stw	ra,24(sp)
   8eddc:	df000515 	stw	fp,20(sp)
   8ede0:	df000504 	addi	fp,sp,20
   8ede4:	e13ffd15 	stw	r4,-12(fp)
   8ede8:	e17ffe15 	stw	r5,-8(fp)
   8edec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8edf0:	e0bffd17 	ldw	r2,-12(fp)
   8edf4:	10000616 	blt	r2,zero,8ee10 <read+0x3c>
   8edf8:	e0bffd17 	ldw	r2,-12(fp)
   8edfc:	10c00324 	muli	r3,r2,12
   8ee00:	00800274 	movhi	r2,9
   8ee04:	108cab04 	addi	r2,r2,12972
   8ee08:	1885883a 	add	r2,r3,r2
   8ee0c:	00000106 	br	8ee14 <read+0x40>
   8ee10:	0005883a 	mov	r2,zero
   8ee14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ee18:	e0bffb17 	ldw	r2,-20(fp)
   8ee1c:	10002226 	beq	r2,zero,8eea8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ee20:	e0bffb17 	ldw	r2,-20(fp)
   8ee24:	10800217 	ldw	r2,8(r2)
   8ee28:	108000cc 	andi	r2,r2,3
   8ee2c:	10800060 	cmpeqi	r2,r2,1
   8ee30:	1000181e 	bne	r2,zero,8ee94 <read+0xc0>
        (fd->dev->read))
   8ee34:	e0bffb17 	ldw	r2,-20(fp)
   8ee38:	10800017 	ldw	r2,0(r2)
   8ee3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ee40:	10001426 	beq	r2,zero,8ee94 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8ee44:	e0bffb17 	ldw	r2,-20(fp)
   8ee48:	10800017 	ldw	r2,0(r2)
   8ee4c:	10800517 	ldw	r2,20(r2)
   8ee50:	e0ffff17 	ldw	r3,-4(fp)
   8ee54:	180d883a 	mov	r6,r3
   8ee58:	e17ffe17 	ldw	r5,-8(fp)
   8ee5c:	e13ffb17 	ldw	r4,-20(fp)
   8ee60:	103ee83a 	callr	r2
   8ee64:	e0bffc15 	stw	r2,-16(fp)
   8ee68:	e0bffc17 	ldw	r2,-16(fp)
   8ee6c:	1000070e 	bge	r2,zero,8ee8c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8ee70:	008ed980 	call	8ed98 <alt_get_errno>
   8ee74:	1007883a 	mov	r3,r2
   8ee78:	e0bffc17 	ldw	r2,-16(fp)
   8ee7c:	0085c83a 	sub	r2,zero,r2
   8ee80:	18800015 	stw	r2,0(r3)
          return -1;
   8ee84:	00bfffc4 	movi	r2,-1
   8ee88:	00000c06 	br	8eebc <read+0xe8>
        }
        return rval;
   8ee8c:	e0bffc17 	ldw	r2,-16(fp)
   8ee90:	00000a06 	br	8eebc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8ee94:	008ed980 	call	8ed98 <alt_get_errno>
   8ee98:	1007883a 	mov	r3,r2
   8ee9c:	00800344 	movi	r2,13
   8eea0:	18800015 	stw	r2,0(r3)
   8eea4:	00000406 	br	8eeb8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8eea8:	008ed980 	call	8ed98 <alt_get_errno>
   8eeac:	1007883a 	mov	r3,r2
   8eeb0:	00801444 	movi	r2,81
   8eeb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8eeb8:	00bfffc4 	movi	r2,-1
}
   8eebc:	e037883a 	mov	sp,fp
   8eec0:	dfc00117 	ldw	ra,4(sp)
   8eec4:	df000017 	ldw	fp,0(sp)
   8eec8:	dec00204 	addi	sp,sp,8
   8eecc:	f800283a 	ret

0008eed0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8eed0:	defffe04 	addi	sp,sp,-8
   8eed4:	df000115 	stw	fp,4(sp)
   8eed8:	df000104 	addi	fp,sp,4
   8eedc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8eee0:	e0bfff17 	ldw	r2,-4(fp)
   8eee4:	108000d0 	cmplti	r2,r2,3
   8eee8:	10000d1e 	bne	r2,zero,8ef20 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8eeec:	00800274 	movhi	r2,9
   8eef0:	108cab04 	addi	r2,r2,12972
   8eef4:	e0ffff17 	ldw	r3,-4(fp)
   8eef8:	18c00324 	muli	r3,r3,12
   8eefc:	10c5883a 	add	r2,r2,r3
   8ef00:	10800204 	addi	r2,r2,8
   8ef04:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ef08:	00800274 	movhi	r2,9
   8ef0c:	108cab04 	addi	r2,r2,12972
   8ef10:	e0ffff17 	ldw	r3,-4(fp)
   8ef14:	18c00324 	muli	r3,r3,12
   8ef18:	10c5883a 	add	r2,r2,r3
   8ef1c:	10000015 	stw	zero,0(r2)
  }
}
   8ef20:	0001883a 	nop
   8ef24:	e037883a 	mov	sp,fp
   8ef28:	df000017 	ldw	fp,0(sp)
   8ef2c:	dec00104 	addi	sp,sp,4
   8ef30:	f800283a 	ret

0008ef34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ef34:	defff904 	addi	sp,sp,-28
   8ef38:	df000615 	stw	fp,24(sp)
   8ef3c:	df000604 	addi	fp,sp,24
   8ef40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ef44:	0005303a 	rdctl	r2,status
   8ef48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ef4c:	e0fffe17 	ldw	r3,-8(fp)
   8ef50:	00bfff84 	movi	r2,-2
   8ef54:	1884703a 	and	r2,r3,r2
   8ef58:	1001703a 	wrctl	status,r2
  
  return context;
   8ef5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ef60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ef64:	d0a00d17 	ldw	r2,-32716(gp)
   8ef68:	10c000c4 	addi	r3,r2,3
   8ef6c:	00bfff04 	movi	r2,-4
   8ef70:	1884703a 	and	r2,r3,r2
   8ef74:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ef78:	d0e00d17 	ldw	r3,-32716(gp)
   8ef7c:	e0bfff17 	ldw	r2,-4(fp)
   8ef80:	1887883a 	add	r3,r3,r2
   8ef84:	00800374 	movhi	r2,13
   8ef88:	10ac0004 	addi	r2,r2,-20480
   8ef8c:	10c0062e 	bgeu	r2,r3,8efa8 <sbrk+0x74>
   8ef90:	e0bffb17 	ldw	r2,-20(fp)
   8ef94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ef98:	e0bffa17 	ldw	r2,-24(fp)
   8ef9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8efa0:	00bfffc4 	movi	r2,-1
   8efa4:	00000b06 	br	8efd4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8efa8:	d0a00d17 	ldw	r2,-32716(gp)
   8efac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8efb0:	d0e00d17 	ldw	r3,-32716(gp)
   8efb4:	e0bfff17 	ldw	r2,-4(fp)
   8efb8:	1885883a 	add	r2,r3,r2
   8efbc:	d0a00d15 	stw	r2,-32716(gp)
   8efc0:	e0bffb17 	ldw	r2,-20(fp)
   8efc4:	e0bffc15 	stw	r2,-16(fp)
   8efc8:	e0bffc17 	ldw	r2,-16(fp)
   8efcc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8efd0:	e0bffd17 	ldw	r2,-12(fp)
} 
   8efd4:	e037883a 	mov	sp,fp
   8efd8:	df000017 	ldw	fp,0(sp)
   8efdc:	dec00104 	addi	sp,sp,4
   8efe0:	f800283a 	ret

0008efe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8efe4:	defffe04 	addi	sp,sp,-8
   8efe8:	dfc00115 	stw	ra,4(sp)
   8efec:	df000015 	stw	fp,0(sp)
   8eff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8eff4:	d0a00c17 	ldw	r2,-32720(gp)
   8eff8:	10000326 	beq	r2,zero,8f008 <alt_get_errno+0x24>
   8effc:	d0a00c17 	ldw	r2,-32720(gp)
   8f000:	103ee83a 	callr	r2
   8f004:	00000106 	br	8f00c <alt_get_errno+0x28>
   8f008:	d0a7fa04 	addi	r2,gp,-24600
}
   8f00c:	e037883a 	mov	sp,fp
   8f010:	dfc00117 	ldw	ra,4(sp)
   8f014:	df000017 	ldw	fp,0(sp)
   8f018:	dec00204 	addi	sp,sp,8
   8f01c:	f800283a 	ret

0008f020 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8f020:	defff904 	addi	sp,sp,-28
   8f024:	dfc00615 	stw	ra,24(sp)
   8f028:	df000515 	stw	fp,20(sp)
   8f02c:	df000504 	addi	fp,sp,20
   8f030:	e13ffd15 	stw	r4,-12(fp)
   8f034:	e17ffe15 	stw	r5,-8(fp)
   8f038:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f03c:	e0bffd17 	ldw	r2,-12(fp)
   8f040:	10000616 	blt	r2,zero,8f05c <write+0x3c>
   8f044:	e0bffd17 	ldw	r2,-12(fp)
   8f048:	10c00324 	muli	r3,r2,12
   8f04c:	00800274 	movhi	r2,9
   8f050:	108cab04 	addi	r2,r2,12972
   8f054:	1885883a 	add	r2,r3,r2
   8f058:	00000106 	br	8f060 <write+0x40>
   8f05c:	0005883a 	mov	r2,zero
   8f060:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8f064:	e0bffb17 	ldw	r2,-20(fp)
   8f068:	10002126 	beq	r2,zero,8f0f0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8f06c:	e0bffb17 	ldw	r2,-20(fp)
   8f070:	10800217 	ldw	r2,8(r2)
   8f074:	108000cc 	andi	r2,r2,3
   8f078:	10001826 	beq	r2,zero,8f0dc <write+0xbc>
   8f07c:	e0bffb17 	ldw	r2,-20(fp)
   8f080:	10800017 	ldw	r2,0(r2)
   8f084:	10800617 	ldw	r2,24(r2)
   8f088:	10001426 	beq	r2,zero,8f0dc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8f08c:	e0bffb17 	ldw	r2,-20(fp)
   8f090:	10800017 	ldw	r2,0(r2)
   8f094:	10800617 	ldw	r2,24(r2)
   8f098:	e0ffff17 	ldw	r3,-4(fp)
   8f09c:	180d883a 	mov	r6,r3
   8f0a0:	e17ffe17 	ldw	r5,-8(fp)
   8f0a4:	e13ffb17 	ldw	r4,-20(fp)
   8f0a8:	103ee83a 	callr	r2
   8f0ac:	e0bffc15 	stw	r2,-16(fp)
   8f0b0:	e0bffc17 	ldw	r2,-16(fp)
   8f0b4:	1000070e 	bge	r2,zero,8f0d4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8f0b8:	008efe40 	call	8efe4 <alt_get_errno>
   8f0bc:	1007883a 	mov	r3,r2
   8f0c0:	e0bffc17 	ldw	r2,-16(fp)
   8f0c4:	0085c83a 	sub	r2,zero,r2
   8f0c8:	18800015 	stw	r2,0(r3)
        return -1;
   8f0cc:	00bfffc4 	movi	r2,-1
   8f0d0:	00000c06 	br	8f104 <write+0xe4>
      }
      return rval;
   8f0d4:	e0bffc17 	ldw	r2,-16(fp)
   8f0d8:	00000a06 	br	8f104 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8f0dc:	008efe40 	call	8efe4 <alt_get_errno>
   8f0e0:	1007883a 	mov	r3,r2
   8f0e4:	00800344 	movi	r2,13
   8f0e8:	18800015 	stw	r2,0(r3)
   8f0ec:	00000406 	br	8f100 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8f0f0:	008efe40 	call	8efe4 <alt_get_errno>
   8f0f4:	1007883a 	mov	r3,r2
   8f0f8:	00801444 	movi	r2,81
   8f0fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8f100:	00bfffc4 	movi	r2,-1
}
   8f104:	e037883a 	mov	sp,fp
   8f108:	dfc00117 	ldw	ra,4(sp)
   8f10c:	df000017 	ldw	fp,0(sp)
   8f110:	dec00204 	addi	sp,sp,8
   8f114:	f800283a 	ret

0008f118 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8f118:	defffd04 	addi	sp,sp,-12
   8f11c:	dfc00215 	stw	ra,8(sp)
   8f120:	df000115 	stw	fp,4(sp)
   8f124:	df000104 	addi	fp,sp,4
   8f128:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8f12c:	d1600904 	addi	r5,gp,-32732
   8f130:	e13fff17 	ldw	r4,-4(fp)
   8f134:	0090ce40 	call	90ce4 <alt_dev_llist_insert>
}
   8f138:	e037883a 	mov	sp,fp
   8f13c:	dfc00117 	ldw	ra,4(sp)
   8f140:	df000017 	ldw	fp,0(sp)
   8f144:	dec00204 	addi	sp,sp,8
   8f148:	f800283a 	ret

0008f14c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8f14c:	defffd04 	addi	sp,sp,-12
   8f150:	dfc00215 	stw	ra,8(sp)
   8f154:	df000115 	stw	fp,4(sp)
   8f158:	df000104 	addi	fp,sp,4
   8f15c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   8f160:	00916e40 	call	916e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8f164:	00800044 	movi	r2,1
   8f168:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8f16c:	0001883a 	nop
   8f170:	e037883a 	mov	sp,fp
   8f174:	dfc00117 	ldw	ra,4(sp)
   8f178:	df000017 	ldw	fp,0(sp)
   8f17c:	dec00204 	addi	sp,sp,8
   8f180:	f800283a 	ret

0008f184 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8f184:	defffe04 	addi	sp,sp,-8
   8f188:	dfc00115 	stw	ra,4(sp)
   8f18c:	df000015 	stw	fp,0(sp)
   8f190:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8f194:	01c000b4 	movhi	r7,2
   8f198:	39e1a804 	addi	r7,r7,-31072
   8f19c:	018000c4 	movi	r6,3
   8f1a0:	000b883a 	mov	r5,zero
   8f1a4:	01000434 	movhi	r4,16
   8f1a8:	21092004 	addi	r4,r4,9344
   8f1ac:	0090a880 	call	90a88 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8f1b0:	000d883a 	mov	r6,zero
   8f1b4:	000b883a 	mov	r5,zero
   8f1b8:	01000274 	movhi	r4,9
   8f1bc:	210d1504 	addi	r4,r4,13396
   8f1c0:	008f3780 	call	8f378 <altera_avalon_jtag_uart_init>
   8f1c4:	01000274 	movhi	r4,9
   8f1c8:	210d0b04 	addi	r4,r4,13356
   8f1cc:	008f1180 	call	8f118 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   8f1d0:	01800044 	movi	r6,1
   8f1d4:	000b883a 	mov	r5,zero
   8f1d8:	01000274 	movhi	r4,9
   8f1dc:	21112304 	addi	r4,r4,17548
   8f1e0:	00909680 	call	90968 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   8f1e4:	01800084 	movi	r6,2
   8f1e8:	000b883a 	mov	r5,zero
   8f1ec:	01000274 	movhi	r4,9
   8f1f0:	21112f04 	addi	r4,r4,17596
   8f1f4:	00909680 	call	90968 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   8f1f8:	0001883a 	nop
}
   8f1fc:	0001883a 	nop
   8f200:	e037883a 	mov	sp,fp
   8f204:	dfc00117 	ldw	ra,4(sp)
   8f208:	df000017 	ldw	fp,0(sp)
   8f20c:	dec00204 	addi	sp,sp,8
   8f210:	f800283a 	ret

0008f214 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8f214:	defffa04 	addi	sp,sp,-24
   8f218:	dfc00515 	stw	ra,20(sp)
   8f21c:	df000415 	stw	fp,16(sp)
   8f220:	df000404 	addi	fp,sp,16
   8f224:	e13ffd15 	stw	r4,-12(fp)
   8f228:	e17ffe15 	stw	r5,-8(fp)
   8f22c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f230:	e0bffd17 	ldw	r2,-12(fp)
   8f234:	10800017 	ldw	r2,0(r2)
   8f238:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8f23c:	e0bffc17 	ldw	r2,-16(fp)
   8f240:	10c00a04 	addi	r3,r2,40
   8f244:	e0bffd17 	ldw	r2,-12(fp)
   8f248:	10800217 	ldw	r2,8(r2)
   8f24c:	100f883a 	mov	r7,r2
   8f250:	e1bfff17 	ldw	r6,-4(fp)
   8f254:	e17ffe17 	ldw	r5,-8(fp)
   8f258:	1809883a 	mov	r4,r3
   8f25c:	008f83c0 	call	8f83c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8f260:	e037883a 	mov	sp,fp
   8f264:	dfc00117 	ldw	ra,4(sp)
   8f268:	df000017 	ldw	fp,0(sp)
   8f26c:	dec00204 	addi	sp,sp,8
   8f270:	f800283a 	ret

0008f274 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8f274:	defffa04 	addi	sp,sp,-24
   8f278:	dfc00515 	stw	ra,20(sp)
   8f27c:	df000415 	stw	fp,16(sp)
   8f280:	df000404 	addi	fp,sp,16
   8f284:	e13ffd15 	stw	r4,-12(fp)
   8f288:	e17ffe15 	stw	r5,-8(fp)
   8f28c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f290:	e0bffd17 	ldw	r2,-12(fp)
   8f294:	10800017 	ldw	r2,0(r2)
   8f298:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8f29c:	e0bffc17 	ldw	r2,-16(fp)
   8f2a0:	10c00a04 	addi	r3,r2,40
   8f2a4:	e0bffd17 	ldw	r2,-12(fp)
   8f2a8:	10800217 	ldw	r2,8(r2)
   8f2ac:	100f883a 	mov	r7,r2
   8f2b0:	e1bfff17 	ldw	r6,-4(fp)
   8f2b4:	e17ffe17 	ldw	r5,-8(fp)
   8f2b8:	1809883a 	mov	r4,r3
   8f2bc:	008fa580 	call	8fa58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8f2c0:	e037883a 	mov	sp,fp
   8f2c4:	dfc00117 	ldw	ra,4(sp)
   8f2c8:	df000017 	ldw	fp,0(sp)
   8f2cc:	dec00204 	addi	sp,sp,8
   8f2d0:	f800283a 	ret

0008f2d4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8f2d4:	defffc04 	addi	sp,sp,-16
   8f2d8:	dfc00315 	stw	ra,12(sp)
   8f2dc:	df000215 	stw	fp,8(sp)
   8f2e0:	df000204 	addi	fp,sp,8
   8f2e4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f2e8:	e0bfff17 	ldw	r2,-4(fp)
   8f2ec:	10800017 	ldw	r2,0(r2)
   8f2f0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8f2f4:	e0bffe17 	ldw	r2,-8(fp)
   8f2f8:	10c00a04 	addi	r3,r2,40
   8f2fc:	e0bfff17 	ldw	r2,-4(fp)
   8f300:	10800217 	ldw	r2,8(r2)
   8f304:	100b883a 	mov	r5,r2
   8f308:	1809883a 	mov	r4,r3
   8f30c:	008f6e40 	call	8f6e4 <altera_avalon_jtag_uart_close>
}
   8f310:	e037883a 	mov	sp,fp
   8f314:	dfc00117 	ldw	ra,4(sp)
   8f318:	df000017 	ldw	fp,0(sp)
   8f31c:	dec00204 	addi	sp,sp,8
   8f320:	f800283a 	ret

0008f324 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8f324:	defffa04 	addi	sp,sp,-24
   8f328:	dfc00515 	stw	ra,20(sp)
   8f32c:	df000415 	stw	fp,16(sp)
   8f330:	df000404 	addi	fp,sp,16
   8f334:	e13ffd15 	stw	r4,-12(fp)
   8f338:	e17ffe15 	stw	r5,-8(fp)
   8f33c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f340:	e0bffd17 	ldw	r2,-12(fp)
   8f344:	10800017 	ldw	r2,0(r2)
   8f348:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f34c:	e0bffc17 	ldw	r2,-16(fp)
   8f350:	10800a04 	addi	r2,r2,40
   8f354:	e1bfff17 	ldw	r6,-4(fp)
   8f358:	e17ffe17 	ldw	r5,-8(fp)
   8f35c:	1009883a 	mov	r4,r2
   8f360:	008f74c0 	call	8f74c <altera_avalon_jtag_uart_ioctl>
}
   8f364:	e037883a 	mov	sp,fp
   8f368:	dfc00117 	ldw	ra,4(sp)
   8f36c:	df000017 	ldw	fp,0(sp)
   8f370:	dec00204 	addi	sp,sp,8
   8f374:	f800283a 	ret

0008f378 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f378:	defffa04 	addi	sp,sp,-24
   8f37c:	dfc00515 	stw	ra,20(sp)
   8f380:	df000415 	stw	fp,16(sp)
   8f384:	df000404 	addi	fp,sp,16
   8f388:	e13ffd15 	stw	r4,-12(fp)
   8f38c:	e17ffe15 	stw	r5,-8(fp)
   8f390:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f394:	e0bffd17 	ldw	r2,-12(fp)
   8f398:	00c00044 	movi	r3,1
   8f39c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f3a0:	e0bffd17 	ldw	r2,-12(fp)
   8f3a4:	10800017 	ldw	r2,0(r2)
   8f3a8:	10800104 	addi	r2,r2,4
   8f3ac:	1007883a 	mov	r3,r2
   8f3b0:	e0bffd17 	ldw	r2,-12(fp)
   8f3b4:	10800817 	ldw	r2,32(r2)
   8f3b8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f3bc:	e0bffe17 	ldw	r2,-8(fp)
   8f3c0:	e0ffff17 	ldw	r3,-4(fp)
   8f3c4:	d8000015 	stw	zero,0(sp)
   8f3c8:	e1fffd17 	ldw	r7,-12(fp)
   8f3cc:	01800274 	movhi	r6,9
   8f3d0:	31bd0e04 	addi	r6,r6,-3016
   8f3d4:	180b883a 	mov	r5,r3
   8f3d8:	1009883a 	mov	r4,r2
   8f3dc:	0090f0c0 	call	90f0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f3e0:	e0bffd17 	ldw	r2,-12(fp)
   8f3e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f3e8:	e0bffd17 	ldw	r2,-12(fp)
   8f3ec:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f3f0:	d0e80217 	ldw	r3,-24568(gp)
   8f3f4:	e1fffd17 	ldw	r7,-12(fp)
   8f3f8:	01800274 	movhi	r6,9
   8f3fc:	31bd9104 	addi	r6,r6,-2492
   8f400:	180b883a 	mov	r5,r3
   8f404:	1009883a 	mov	r4,r2
   8f408:	0090b040 	call	90b04 <alt_alarm_start>
   8f40c:	1000040e 	bge	r2,zero,8f420 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f410:	e0fffd17 	ldw	r3,-12(fp)
   8f414:	00a00034 	movhi	r2,32768
   8f418:	10bfffc4 	addi	r2,r2,-1
   8f41c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f420:	0001883a 	nop
   8f424:	e037883a 	mov	sp,fp
   8f428:	dfc00117 	ldw	ra,4(sp)
   8f42c:	df000017 	ldw	fp,0(sp)
   8f430:	dec00204 	addi	sp,sp,8
   8f434:	f800283a 	ret

0008f438 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f438:	defff804 	addi	sp,sp,-32
   8f43c:	df000715 	stw	fp,28(sp)
   8f440:	df000704 	addi	fp,sp,28
   8f444:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f448:	e0bfff17 	ldw	r2,-4(fp)
   8f44c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f450:	e0bffb17 	ldw	r2,-20(fp)
   8f454:	10800017 	ldw	r2,0(r2)
   8f458:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f45c:	e0bffc17 	ldw	r2,-16(fp)
   8f460:	10800104 	addi	r2,r2,4
   8f464:	10800037 	ldwio	r2,0(r2)
   8f468:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f46c:	e0bffd17 	ldw	r2,-12(fp)
   8f470:	1080c00c 	andi	r2,r2,768
   8f474:	10006d26 	beq	r2,zero,8f62c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f478:	e0bffd17 	ldw	r2,-12(fp)
   8f47c:	1080400c 	andi	r2,r2,256
   8f480:	10003526 	beq	r2,zero,8f558 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f484:	00800074 	movhi	r2,1
   8f488:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f48c:	e0bffb17 	ldw	r2,-20(fp)
   8f490:	10800a17 	ldw	r2,40(r2)
   8f494:	10800044 	addi	r2,r2,1
   8f498:	1081ffcc 	andi	r2,r2,2047
   8f49c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f4a0:	e0bffb17 	ldw	r2,-20(fp)
   8f4a4:	10c00b17 	ldw	r3,44(r2)
   8f4a8:	e0bffe17 	ldw	r2,-8(fp)
   8f4ac:	18801526 	beq	r3,r2,8f504 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f4b0:	e0bffc17 	ldw	r2,-16(fp)
   8f4b4:	10800037 	ldwio	r2,0(r2)
   8f4b8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f4bc:	e0bff917 	ldw	r2,-28(fp)
   8f4c0:	10a0000c 	andi	r2,r2,32768
   8f4c4:	10001126 	beq	r2,zero,8f50c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f4c8:	e0bffb17 	ldw	r2,-20(fp)
   8f4cc:	10800a17 	ldw	r2,40(r2)
   8f4d0:	e0fff917 	ldw	r3,-28(fp)
   8f4d4:	1809883a 	mov	r4,r3
   8f4d8:	e0fffb17 	ldw	r3,-20(fp)
   8f4dc:	1885883a 	add	r2,r3,r2
   8f4e0:	10800e04 	addi	r2,r2,56
   8f4e4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f4e8:	e0bffb17 	ldw	r2,-20(fp)
   8f4ec:	10800a17 	ldw	r2,40(r2)
   8f4f0:	10800044 	addi	r2,r2,1
   8f4f4:	10c1ffcc 	andi	r3,r2,2047
   8f4f8:	e0bffb17 	ldw	r2,-20(fp)
   8f4fc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f500:	003fe206 	br	8f48c <rx_descriptor_end+0xfff8f42c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f504:	0001883a 	nop
   8f508:	00000106 	br	8f510 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f50c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f510:	e0bff917 	ldw	r2,-28(fp)
   8f514:	10bfffec 	andhi	r2,r2,65535
   8f518:	10000f26 	beq	r2,zero,8f558 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f51c:	e0bffb17 	ldw	r2,-20(fp)
   8f520:	10c00817 	ldw	r3,32(r2)
   8f524:	00bfff84 	movi	r2,-2
   8f528:	1886703a 	and	r3,r3,r2
   8f52c:	e0bffb17 	ldw	r2,-20(fp)
   8f530:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f534:	e0bffc17 	ldw	r2,-16(fp)
   8f538:	10800104 	addi	r2,r2,4
   8f53c:	1007883a 	mov	r3,r2
   8f540:	e0bffb17 	ldw	r2,-20(fp)
   8f544:	10800817 	ldw	r2,32(r2)
   8f548:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f54c:	e0bffc17 	ldw	r2,-16(fp)
   8f550:	10800104 	addi	r2,r2,4
   8f554:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f558:	e0bffd17 	ldw	r2,-12(fp)
   8f55c:	1080800c 	andi	r2,r2,512
   8f560:	103fbe26 	beq	r2,zero,8f45c <rx_descriptor_end+0xfff8f3fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f564:	e0bffd17 	ldw	r2,-12(fp)
   8f568:	1004d43a 	srli	r2,r2,16
   8f56c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f570:	00001406 	br	8f5c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f574:	e0bffc17 	ldw	r2,-16(fp)
   8f578:	e0fffb17 	ldw	r3,-20(fp)
   8f57c:	18c00d17 	ldw	r3,52(r3)
   8f580:	e13ffb17 	ldw	r4,-20(fp)
   8f584:	20c7883a 	add	r3,r4,r3
   8f588:	18c20e04 	addi	r3,r3,2104
   8f58c:	18c00003 	ldbu	r3,0(r3)
   8f590:	18c03fcc 	andi	r3,r3,255
   8f594:	18c0201c 	xori	r3,r3,128
   8f598:	18ffe004 	addi	r3,r3,-128
   8f59c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f5a0:	e0bffb17 	ldw	r2,-20(fp)
   8f5a4:	10800d17 	ldw	r2,52(r2)
   8f5a8:	10800044 	addi	r2,r2,1
   8f5ac:	10c1ffcc 	andi	r3,r2,2047
   8f5b0:	e0bffb17 	ldw	r2,-20(fp)
   8f5b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f5b8:	e0bffa17 	ldw	r2,-24(fp)
   8f5bc:	10bfffc4 	addi	r2,r2,-1
   8f5c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f5c4:	e0bffa17 	ldw	r2,-24(fp)
   8f5c8:	10000526 	beq	r2,zero,8f5e0 <altera_avalon_jtag_uart_irq+0x1a8>
   8f5cc:	e0bffb17 	ldw	r2,-20(fp)
   8f5d0:	10c00d17 	ldw	r3,52(r2)
   8f5d4:	e0bffb17 	ldw	r2,-20(fp)
   8f5d8:	10800c17 	ldw	r2,48(r2)
   8f5dc:	18bfe51e 	bne	r3,r2,8f574 <rx_descriptor_end+0xfff8f514>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f5e0:	e0bffa17 	ldw	r2,-24(fp)
   8f5e4:	103f9d26 	beq	r2,zero,8f45c <rx_descriptor_end+0xfff8f3fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f5e8:	e0bffb17 	ldw	r2,-20(fp)
   8f5ec:	10c00817 	ldw	r3,32(r2)
   8f5f0:	00bfff44 	movi	r2,-3
   8f5f4:	1886703a 	and	r3,r3,r2
   8f5f8:	e0bffb17 	ldw	r2,-20(fp)
   8f5fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f600:	e0bffb17 	ldw	r2,-20(fp)
   8f604:	10800017 	ldw	r2,0(r2)
   8f608:	10800104 	addi	r2,r2,4
   8f60c:	1007883a 	mov	r3,r2
   8f610:	e0bffb17 	ldw	r2,-20(fp)
   8f614:	10800817 	ldw	r2,32(r2)
   8f618:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f61c:	e0bffc17 	ldw	r2,-16(fp)
   8f620:	10800104 	addi	r2,r2,4
   8f624:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f628:	003f8c06 	br	8f45c <rx_descriptor_end+0xfff8f3fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f62c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f630:	0001883a 	nop
   8f634:	e037883a 	mov	sp,fp
   8f638:	df000017 	ldw	fp,0(sp)
   8f63c:	dec00104 	addi	sp,sp,4
   8f640:	f800283a 	ret

0008f644 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f644:	defff804 	addi	sp,sp,-32
   8f648:	df000715 	stw	fp,28(sp)
   8f64c:	df000704 	addi	fp,sp,28
   8f650:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f654:	e0bffb17 	ldw	r2,-20(fp)
   8f658:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f65c:	e0bff917 	ldw	r2,-28(fp)
   8f660:	10800017 	ldw	r2,0(r2)
   8f664:	10800104 	addi	r2,r2,4
   8f668:	10800037 	ldwio	r2,0(r2)
   8f66c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f670:	e0bffa17 	ldw	r2,-24(fp)
   8f674:	1081000c 	andi	r2,r2,1024
   8f678:	10000b26 	beq	r2,zero,8f6a8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f67c:	e0bff917 	ldw	r2,-28(fp)
   8f680:	10800017 	ldw	r2,0(r2)
   8f684:	10800104 	addi	r2,r2,4
   8f688:	1007883a 	mov	r3,r2
   8f68c:	e0bff917 	ldw	r2,-28(fp)
   8f690:	10800817 	ldw	r2,32(r2)
   8f694:	10810014 	ori	r2,r2,1024
   8f698:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f69c:	e0bff917 	ldw	r2,-28(fp)
   8f6a0:	10000915 	stw	zero,36(r2)
   8f6a4:	00000a06 	br	8f6d0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f6a8:	e0bff917 	ldw	r2,-28(fp)
   8f6ac:	10c00917 	ldw	r3,36(r2)
   8f6b0:	00a00034 	movhi	r2,32768
   8f6b4:	10bfff04 	addi	r2,r2,-4
   8f6b8:	10c00536 	bltu	r2,r3,8f6d0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f6bc:	e0bff917 	ldw	r2,-28(fp)
   8f6c0:	10800917 	ldw	r2,36(r2)
   8f6c4:	10c00044 	addi	r3,r2,1
   8f6c8:	e0bff917 	ldw	r2,-28(fp)
   8f6cc:	10c00915 	stw	r3,36(r2)
   8f6d0:	d0a80217 	ldw	r2,-24568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f6d4:	e037883a 	mov	sp,fp
   8f6d8:	df000017 	ldw	fp,0(sp)
   8f6dc:	dec00104 	addi	sp,sp,4
   8f6e0:	f800283a 	ret

0008f6e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f6e4:	defffd04 	addi	sp,sp,-12
   8f6e8:	df000215 	stw	fp,8(sp)
   8f6ec:	df000204 	addi	fp,sp,8
   8f6f0:	e13ffe15 	stw	r4,-8(fp)
   8f6f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f6f8:	00000506 	br	8f710 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f6fc:	e0bfff17 	ldw	r2,-4(fp)
   8f700:	1090000c 	andi	r2,r2,16384
   8f704:	10000226 	beq	r2,zero,8f710 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f708:	00bffd44 	movi	r2,-11
   8f70c:	00000b06 	br	8f73c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f710:	e0bffe17 	ldw	r2,-8(fp)
   8f714:	10c00d17 	ldw	r3,52(r2)
   8f718:	e0bffe17 	ldw	r2,-8(fp)
   8f71c:	10800c17 	ldw	r2,48(r2)
   8f720:	18800526 	beq	r3,r2,8f738 <altera_avalon_jtag_uart_close+0x54>
   8f724:	e0bffe17 	ldw	r2,-8(fp)
   8f728:	10c00917 	ldw	r3,36(r2)
   8f72c:	e0bffe17 	ldw	r2,-8(fp)
   8f730:	10800117 	ldw	r2,4(r2)
   8f734:	18bff136 	bltu	r3,r2,8f6fc <rx_descriptor_end+0xfff8f69c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f738:	0005883a 	mov	r2,zero
}
   8f73c:	e037883a 	mov	sp,fp
   8f740:	df000017 	ldw	fp,0(sp)
   8f744:	dec00104 	addi	sp,sp,4
   8f748:	f800283a 	ret

0008f74c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f74c:	defffa04 	addi	sp,sp,-24
   8f750:	df000515 	stw	fp,20(sp)
   8f754:	df000504 	addi	fp,sp,20
   8f758:	e13ffd15 	stw	r4,-12(fp)
   8f75c:	e17ffe15 	stw	r5,-8(fp)
   8f760:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f764:	00bff9c4 	movi	r2,-25
   8f768:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f76c:	e0bffe17 	ldw	r2,-8(fp)
   8f770:	10da8060 	cmpeqi	r3,r2,27137
   8f774:	1800031e 	bne	r3,zero,8f784 <altera_avalon_jtag_uart_ioctl+0x38>
   8f778:	109a80a0 	cmpeqi	r2,r2,27138
   8f77c:	1000181e 	bne	r2,zero,8f7e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f780:	00002906 	br	8f828 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f784:	e0bffd17 	ldw	r2,-12(fp)
   8f788:	10c00117 	ldw	r3,4(r2)
   8f78c:	00a00034 	movhi	r2,32768
   8f790:	10bfffc4 	addi	r2,r2,-1
   8f794:	18802126 	beq	r3,r2,8f81c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f798:	e0bfff17 	ldw	r2,-4(fp)
   8f79c:	10800017 	ldw	r2,0(r2)
   8f7a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f7a4:	e0bffc17 	ldw	r2,-16(fp)
   8f7a8:	10800090 	cmplti	r2,r2,2
   8f7ac:	1000061e 	bne	r2,zero,8f7c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f7b0:	e0fffc17 	ldw	r3,-16(fp)
   8f7b4:	00a00034 	movhi	r2,32768
   8f7b8:	10bfffc4 	addi	r2,r2,-1
   8f7bc:	18800226 	beq	r3,r2,8f7c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f7c0:	e0bffc17 	ldw	r2,-16(fp)
   8f7c4:	00000206 	br	8f7d0 <altera_avalon_jtag_uart_ioctl+0x84>
   8f7c8:	00a00034 	movhi	r2,32768
   8f7cc:	10bfff84 	addi	r2,r2,-2
   8f7d0:	e0fffd17 	ldw	r3,-12(fp)
   8f7d4:	18800115 	stw	r2,4(r3)
      rc = 0;
   8f7d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f7dc:	00000f06 	br	8f81c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8f7e0:	e0bffd17 	ldw	r2,-12(fp)
   8f7e4:	10c00117 	ldw	r3,4(r2)
   8f7e8:	00a00034 	movhi	r2,32768
   8f7ec:	10bfffc4 	addi	r2,r2,-1
   8f7f0:	18800c26 	beq	r3,r2,8f824 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8f7f4:	e0bffd17 	ldw	r2,-12(fp)
   8f7f8:	10c00917 	ldw	r3,36(r2)
   8f7fc:	e0bffd17 	ldw	r2,-12(fp)
   8f800:	10800117 	ldw	r2,4(r2)
   8f804:	1885803a 	cmpltu	r2,r3,r2
   8f808:	10c03fcc 	andi	r3,r2,255
   8f80c:	e0bfff17 	ldw	r2,-4(fp)
   8f810:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8f814:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f818:	00000206 	br	8f824 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8f81c:	0001883a 	nop
   8f820:	00000106 	br	8f828 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8f824:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8f828:	e0bffb17 	ldw	r2,-20(fp)
}
   8f82c:	e037883a 	mov	sp,fp
   8f830:	df000017 	ldw	fp,0(sp)
   8f834:	dec00104 	addi	sp,sp,4
   8f838:	f800283a 	ret

0008f83c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f83c:	defff304 	addi	sp,sp,-52
   8f840:	dfc00c15 	stw	ra,48(sp)
   8f844:	df000b15 	stw	fp,44(sp)
   8f848:	df000b04 	addi	fp,sp,44
   8f84c:	e13ffc15 	stw	r4,-16(fp)
   8f850:	e17ffd15 	stw	r5,-12(fp)
   8f854:	e1bffe15 	stw	r6,-8(fp)
   8f858:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8f85c:	e0bffd17 	ldw	r2,-12(fp)
   8f860:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f864:	00004706 	br	8f984 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f868:	e0bffc17 	ldw	r2,-16(fp)
   8f86c:	10800a17 	ldw	r2,40(r2)
   8f870:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f874:	e0bffc17 	ldw	r2,-16(fp)
   8f878:	10800b17 	ldw	r2,44(r2)
   8f87c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8f880:	e0fff717 	ldw	r3,-36(fp)
   8f884:	e0bff817 	ldw	r2,-32(fp)
   8f888:	18800536 	bltu	r3,r2,8f8a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f88c:	e0fff717 	ldw	r3,-36(fp)
   8f890:	e0bff817 	ldw	r2,-32(fp)
   8f894:	1885c83a 	sub	r2,r3,r2
   8f898:	e0bff615 	stw	r2,-40(fp)
   8f89c:	00000406 	br	8f8b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8f8a0:	00c20004 	movi	r3,2048
   8f8a4:	e0bff817 	ldw	r2,-32(fp)
   8f8a8:	1885c83a 	sub	r2,r3,r2
   8f8ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f8b0:	e0bff617 	ldw	r2,-40(fp)
   8f8b4:	10001e26 	beq	r2,zero,8f930 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8f8b8:	e0fffe17 	ldw	r3,-8(fp)
   8f8bc:	e0bff617 	ldw	r2,-40(fp)
   8f8c0:	1880022e 	bgeu	r3,r2,8f8cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8f8c4:	e0bffe17 	ldw	r2,-8(fp)
   8f8c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8f8cc:	e0bffc17 	ldw	r2,-16(fp)
   8f8d0:	10c00e04 	addi	r3,r2,56
   8f8d4:	e0bff817 	ldw	r2,-32(fp)
   8f8d8:	1885883a 	add	r2,r3,r2
   8f8dc:	e1bff617 	ldw	r6,-40(fp)
   8f8e0:	100b883a 	mov	r5,r2
   8f8e4:	e13ff517 	ldw	r4,-44(fp)
   8f8e8:	0087b940 	call	87b94 <memcpy>
      ptr   += n;
   8f8ec:	e0fff517 	ldw	r3,-44(fp)
   8f8f0:	e0bff617 	ldw	r2,-40(fp)
   8f8f4:	1885883a 	add	r2,r3,r2
   8f8f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8f8fc:	e0fffe17 	ldw	r3,-8(fp)
   8f900:	e0bff617 	ldw	r2,-40(fp)
   8f904:	1885c83a 	sub	r2,r3,r2
   8f908:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f90c:	e0fff817 	ldw	r3,-32(fp)
   8f910:	e0bff617 	ldw	r2,-40(fp)
   8f914:	1885883a 	add	r2,r3,r2
   8f918:	10c1ffcc 	andi	r3,r2,2047
   8f91c:	e0bffc17 	ldw	r2,-16(fp)
   8f920:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8f924:	e0bffe17 	ldw	r2,-8(fp)
   8f928:	00bfcf16 	blt	zero,r2,8f868 <rx_descriptor_end+0xfff8f808>
   8f92c:	00000106 	br	8f934 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8f930:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8f934:	e0fff517 	ldw	r3,-44(fp)
   8f938:	e0bffd17 	ldw	r2,-12(fp)
   8f93c:	1880141e 	bne	r3,r2,8f990 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8f940:	e0bfff17 	ldw	r2,-4(fp)
   8f944:	1090000c 	andi	r2,r2,16384
   8f948:	1000131e 	bne	r2,zero,8f998 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8f94c:	0001883a 	nop
   8f950:	e0bffc17 	ldw	r2,-16(fp)
   8f954:	10c00a17 	ldw	r3,40(r2)
   8f958:	e0bff717 	ldw	r2,-36(fp)
   8f95c:	1880051e 	bne	r3,r2,8f974 <altera_avalon_jtag_uart_read+0x138>
   8f960:	e0bffc17 	ldw	r2,-16(fp)
   8f964:	10c00917 	ldw	r3,36(r2)
   8f968:	e0bffc17 	ldw	r2,-16(fp)
   8f96c:	10800117 	ldw	r2,4(r2)
   8f970:	18bff736 	bltu	r3,r2,8f950 <rx_descriptor_end+0xfff8f8f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8f974:	e0bffc17 	ldw	r2,-16(fp)
   8f978:	10c00a17 	ldw	r3,40(r2)
   8f97c:	e0bff717 	ldw	r2,-36(fp)
   8f980:	18800726 	beq	r3,r2,8f9a0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f984:	e0bffe17 	ldw	r2,-8(fp)
   8f988:	00bfb716 	blt	zero,r2,8f868 <rx_descriptor_end+0xfff8f808>
   8f98c:	00000506 	br	8f9a4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8f990:	0001883a 	nop
   8f994:	00000306 	br	8f9a4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8f998:	0001883a 	nop
   8f99c:	00000106 	br	8f9a4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8f9a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8f9a4:	e0fff517 	ldw	r3,-44(fp)
   8f9a8:	e0bffd17 	ldw	r2,-12(fp)
   8f9ac:	18801826 	beq	r3,r2,8fa10 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f9b0:	0005303a 	rdctl	r2,status
   8f9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f9b8:	e0fffb17 	ldw	r3,-20(fp)
   8f9bc:	00bfff84 	movi	r2,-2
   8f9c0:	1884703a 	and	r2,r3,r2
   8f9c4:	1001703a 	wrctl	status,r2
  
  return context;
   8f9c8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8f9cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f9d0:	e0bffc17 	ldw	r2,-16(fp)
   8f9d4:	10800817 	ldw	r2,32(r2)
   8f9d8:	10c00054 	ori	r3,r2,1
   8f9dc:	e0bffc17 	ldw	r2,-16(fp)
   8f9e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f9e4:	e0bffc17 	ldw	r2,-16(fp)
   8f9e8:	10800017 	ldw	r2,0(r2)
   8f9ec:	10800104 	addi	r2,r2,4
   8f9f0:	1007883a 	mov	r3,r2
   8f9f4:	e0bffc17 	ldw	r2,-16(fp)
   8f9f8:	10800817 	ldw	r2,32(r2)
   8f9fc:	18800035 	stwio	r2,0(r3)
   8fa00:	e0bffa17 	ldw	r2,-24(fp)
   8fa04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fa08:	e0bff917 	ldw	r2,-28(fp)
   8fa0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8fa10:	e0fff517 	ldw	r3,-44(fp)
   8fa14:	e0bffd17 	ldw	r2,-12(fp)
   8fa18:	18800426 	beq	r3,r2,8fa2c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8fa1c:	e0fff517 	ldw	r3,-44(fp)
   8fa20:	e0bffd17 	ldw	r2,-12(fp)
   8fa24:	1885c83a 	sub	r2,r3,r2
   8fa28:	00000606 	br	8fa44 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8fa2c:	e0bfff17 	ldw	r2,-4(fp)
   8fa30:	1090000c 	andi	r2,r2,16384
   8fa34:	10000226 	beq	r2,zero,8fa40 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8fa38:	00bffd44 	movi	r2,-11
   8fa3c:	00000106 	br	8fa44 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8fa40:	00bffec4 	movi	r2,-5
}
   8fa44:	e037883a 	mov	sp,fp
   8fa48:	dfc00117 	ldw	ra,4(sp)
   8fa4c:	df000017 	ldw	fp,0(sp)
   8fa50:	dec00204 	addi	sp,sp,8
   8fa54:	f800283a 	ret

0008fa58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8fa58:	defff304 	addi	sp,sp,-52
   8fa5c:	dfc00c15 	stw	ra,48(sp)
   8fa60:	df000b15 	stw	fp,44(sp)
   8fa64:	df000b04 	addi	fp,sp,44
   8fa68:	e13ffc15 	stw	r4,-16(fp)
   8fa6c:	e17ffd15 	stw	r5,-12(fp)
   8fa70:	e1bffe15 	stw	r6,-8(fp)
   8fa74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8fa78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8fa7c:	e0bffd17 	ldw	r2,-12(fp)
   8fa80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fa84:	00003706 	br	8fb64 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8fa88:	e0bffc17 	ldw	r2,-16(fp)
   8fa8c:	10800c17 	ldw	r2,48(r2)
   8fa90:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8fa94:	e0bffc17 	ldw	r2,-16(fp)
   8fa98:	10800d17 	ldw	r2,52(r2)
   8fa9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8faa0:	e0fff917 	ldw	r3,-28(fp)
   8faa4:	e0bff517 	ldw	r2,-44(fp)
   8faa8:	1880062e 	bgeu	r3,r2,8fac4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8faac:	e0fff517 	ldw	r3,-44(fp)
   8fab0:	e0bff917 	ldw	r2,-28(fp)
   8fab4:	1885c83a 	sub	r2,r3,r2
   8fab8:	10bfffc4 	addi	r2,r2,-1
   8fabc:	e0bff615 	stw	r2,-40(fp)
   8fac0:	00000b06 	br	8faf0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8fac4:	e0bff517 	ldw	r2,-44(fp)
   8fac8:	10000526 	beq	r2,zero,8fae0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8facc:	00c20004 	movi	r3,2048
   8fad0:	e0bff917 	ldw	r2,-28(fp)
   8fad4:	1885c83a 	sub	r2,r3,r2
   8fad8:	e0bff615 	stw	r2,-40(fp)
   8fadc:	00000406 	br	8faf0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8fae0:	00c1ffc4 	movi	r3,2047
   8fae4:	e0bff917 	ldw	r2,-28(fp)
   8fae8:	1885c83a 	sub	r2,r3,r2
   8faec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8faf0:	e0bff617 	ldw	r2,-40(fp)
   8faf4:	10001e26 	beq	r2,zero,8fb70 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8faf8:	e0fffe17 	ldw	r3,-8(fp)
   8fafc:	e0bff617 	ldw	r2,-40(fp)
   8fb00:	1880022e 	bgeu	r3,r2,8fb0c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8fb04:	e0bffe17 	ldw	r2,-8(fp)
   8fb08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8fb0c:	e0bffc17 	ldw	r2,-16(fp)
   8fb10:	10c20e04 	addi	r3,r2,2104
   8fb14:	e0bff917 	ldw	r2,-28(fp)
   8fb18:	1885883a 	add	r2,r3,r2
   8fb1c:	e1bff617 	ldw	r6,-40(fp)
   8fb20:	e17ffd17 	ldw	r5,-12(fp)
   8fb24:	1009883a 	mov	r4,r2
   8fb28:	0087b940 	call	87b94 <memcpy>
      ptr   += n;
   8fb2c:	e0fffd17 	ldw	r3,-12(fp)
   8fb30:	e0bff617 	ldw	r2,-40(fp)
   8fb34:	1885883a 	add	r2,r3,r2
   8fb38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8fb3c:	e0fffe17 	ldw	r3,-8(fp)
   8fb40:	e0bff617 	ldw	r2,-40(fp)
   8fb44:	1885c83a 	sub	r2,r3,r2
   8fb48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8fb4c:	e0fff917 	ldw	r3,-28(fp)
   8fb50:	e0bff617 	ldw	r2,-40(fp)
   8fb54:	1885883a 	add	r2,r3,r2
   8fb58:	10c1ffcc 	andi	r3,r2,2047
   8fb5c:	e0bffc17 	ldw	r2,-16(fp)
   8fb60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fb64:	e0bffe17 	ldw	r2,-8(fp)
   8fb68:	00bfc716 	blt	zero,r2,8fa88 <rx_descriptor_end+0xfff8fa28>
   8fb6c:	00000106 	br	8fb74 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8fb70:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fb74:	0005303a 	rdctl	r2,status
   8fb78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fb7c:	e0fffb17 	ldw	r3,-20(fp)
   8fb80:	00bfff84 	movi	r2,-2
   8fb84:	1884703a 	and	r2,r3,r2
   8fb88:	1001703a 	wrctl	status,r2
  
  return context;
   8fb8c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8fb90:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8fb94:	e0bffc17 	ldw	r2,-16(fp)
   8fb98:	10800817 	ldw	r2,32(r2)
   8fb9c:	10c00094 	ori	r3,r2,2
   8fba0:	e0bffc17 	ldw	r2,-16(fp)
   8fba4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fba8:	e0bffc17 	ldw	r2,-16(fp)
   8fbac:	10800017 	ldw	r2,0(r2)
   8fbb0:	10800104 	addi	r2,r2,4
   8fbb4:	1007883a 	mov	r3,r2
   8fbb8:	e0bffc17 	ldw	r2,-16(fp)
   8fbbc:	10800817 	ldw	r2,32(r2)
   8fbc0:	18800035 	stwio	r2,0(r3)
   8fbc4:	e0bffa17 	ldw	r2,-24(fp)
   8fbc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fbcc:	e0bff817 	ldw	r2,-32(fp)
   8fbd0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8fbd4:	e0bffe17 	ldw	r2,-8(fp)
   8fbd8:	0080100e 	bge	zero,r2,8fc1c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8fbdc:	e0bfff17 	ldw	r2,-4(fp)
   8fbe0:	1090000c 	andi	r2,r2,16384
   8fbe4:	1000101e 	bne	r2,zero,8fc28 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8fbe8:	0001883a 	nop
   8fbec:	e0bffc17 	ldw	r2,-16(fp)
   8fbf0:	10c00d17 	ldw	r3,52(r2)
   8fbf4:	e0bff517 	ldw	r2,-44(fp)
   8fbf8:	1880051e 	bne	r3,r2,8fc10 <altera_avalon_jtag_uart_write+0x1b8>
   8fbfc:	e0bffc17 	ldw	r2,-16(fp)
   8fc00:	10c00917 	ldw	r3,36(r2)
   8fc04:	e0bffc17 	ldw	r2,-16(fp)
   8fc08:	10800117 	ldw	r2,4(r2)
   8fc0c:	18bff736 	bltu	r3,r2,8fbec <rx_descriptor_end+0xfff8fb8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8fc10:	e0bffc17 	ldw	r2,-16(fp)
   8fc14:	10800917 	ldw	r2,36(r2)
   8fc18:	1000051e 	bne	r2,zero,8fc30 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8fc1c:	e0bffe17 	ldw	r2,-8(fp)
   8fc20:	00bfd016 	blt	zero,r2,8fb64 <rx_descriptor_end+0xfff8fb04>
   8fc24:	00000306 	br	8fc34 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8fc28:	0001883a 	nop
   8fc2c:	00000106 	br	8fc34 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8fc30:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8fc34:	e0fffd17 	ldw	r3,-12(fp)
   8fc38:	e0bff717 	ldw	r2,-36(fp)
   8fc3c:	18800426 	beq	r3,r2,8fc50 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8fc40:	e0fffd17 	ldw	r3,-12(fp)
   8fc44:	e0bff717 	ldw	r2,-36(fp)
   8fc48:	1885c83a 	sub	r2,r3,r2
   8fc4c:	00000606 	br	8fc68 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8fc50:	e0bfff17 	ldw	r2,-4(fp)
   8fc54:	1090000c 	andi	r2,r2,16384
   8fc58:	10000226 	beq	r2,zero,8fc64 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8fc5c:	00bffd44 	movi	r2,-11
   8fc60:	00000106 	br	8fc68 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8fc64:	00bffec4 	movi	r2,-5
}
   8fc68:	e037883a 	mov	sp,fp
   8fc6c:	dfc00117 	ldw	ra,4(sp)
   8fc70:	df000017 	ldw	fp,0(sp)
   8fc74:	dec00204 	addi	sp,sp,8
   8fc78:	f800283a 	ret

0008fc7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fc7c:	defffe04 	addi	sp,sp,-8
   8fc80:	dfc00115 	stw	ra,4(sp)
   8fc84:	df000015 	stw	fp,0(sp)
   8fc88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8fc8c:	d0a00c17 	ldw	r2,-32720(gp)
   8fc90:	10000326 	beq	r2,zero,8fca0 <alt_get_errno+0x24>
   8fc94:	d0a00c17 	ldw	r2,-32720(gp)
   8fc98:	103ee83a 	callr	r2
   8fc9c:	00000106 	br	8fca4 <alt_get_errno+0x28>
   8fca0:	d0a7fa04 	addi	r2,gp,-24600
}
   8fca4:	e037883a 	mov	sp,fp
   8fca8:	dfc00117 	ldw	ra,4(sp)
   8fcac:	df000017 	ldw	fp,0(sp)
   8fcb0:	dec00204 	addi	sp,sp,8
   8fcb4:	f800283a 	ret

0008fcb8 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   8fcb8:	defffc04 	addi	sp,sp,-16
   8fcbc:	df000315 	stw	fp,12(sp)
   8fcc0:	df000304 	addi	fp,sp,12
   8fcc4:	e13ffe15 	stw	r4,-8(fp)
   8fcc8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fccc:	e0bffe17 	ldw	r2,-8(fp)
   8fcd0:	10800317 	ldw	r2,12(r2)
   8fcd4:	10800037 	ldwio	r2,0(r2)
   8fcd8:	1080040c 	andi	r2,r2,16
   8fcdc:	10000226 	beq	r2,zero,8fce8 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   8fce0:	00bffc04 	movi	r2,-16
   8fce4:	00003906 	br	8fdcc <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fce8:	e0bffe17 	ldw	r2,-8(fp)
   8fcec:	10800317 	ldw	r2,12(r2)
   8fcf0:	10800404 	addi	r2,r2,16
   8fcf4:	e0fffe17 	ldw	r3,-8(fp)
   8fcf8:	18c00317 	ldw	r3,12(r3)
   8fcfc:	18c00404 	addi	r3,r3,16
   8fd00:	19000037 	ldwio	r4,0(r3)
   8fd04:	00fff7c4 	movi	r3,-33
   8fd08:	20c6703a 	and	r3,r4,r3
   8fd0c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8fd10:	e0bffe17 	ldw	r2,-8(fp)
   8fd14:	10800317 	ldw	r2,12(r2)
   8fd18:	00c03fc4 	movi	r3,255
   8fd1c:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8fd20:	e0bffe17 	ldw	r2,-8(fp)
   8fd24:	10800317 	ldw	r2,12(r2)
   8fd28:	10800804 	addi	r2,r2,32
   8fd2c:	e0ffff17 	ldw	r3,-4(fp)
   8fd30:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   8fd34:	e0bffe17 	ldw	r2,-8(fp)
   8fd38:	10800917 	ldw	r2,36(r2)
   8fd3c:	10001126 	beq	r2,zero,8fd84 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8fd40:	e0bffe17 	ldw	r2,-8(fp)
   8fd44:	10800317 	ldw	r2,12(r2)
   8fd48:	10800404 	addi	r2,r2,16
   8fd4c:	10800037 	ldwio	r2,0(r2)
   8fd50:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   8fd54:	e0bffe17 	ldw	r2,-8(fp)
   8fd58:	10c00b17 	ldw	r3,44(r2)
   8fd5c:	e0bffd17 	ldw	r2,-12(fp)
   8fd60:	1884b03a 	or	r2,r3,r2
   8fd64:	10801814 	ori	r2,r2,96
   8fd68:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8fd6c:	e0bffe17 	ldw	r2,-8(fp)
   8fd70:	10800317 	ldw	r2,12(r2)
   8fd74:	10800404 	addi	r2,r2,16
   8fd78:	e0fffd17 	ldw	r3,-12(fp)
   8fd7c:	10c00035 	stwio	r3,0(r2)
   8fd80:	00001106 	br	8fdc8 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8fd84:	e0bffe17 	ldw	r2,-8(fp)
   8fd88:	10800317 	ldw	r2,12(r2)
   8fd8c:	10800404 	addi	r2,r2,16
   8fd90:	10800037 	ldwio	r2,0(r2)
   8fd94:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   8fd98:	e0bffd17 	ldw	r2,-12(fp)
   8fd9c:	10801814 	ori	r2,r2,96
   8fda0:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   8fda4:	e0fffd17 	ldw	r3,-12(fp)
   8fda8:	00bffbc4 	movi	r2,-17
   8fdac:	1884703a 	and	r2,r3,r2
   8fdb0:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8fdb4:	e0bffe17 	ldw	r2,-8(fp)
   8fdb8:	10800317 	ldw	r2,12(r2)
   8fdbc:	10800404 	addi	r2,r2,16
   8fdc0:	e0fffd17 	ldw	r3,-12(fp)
   8fdc4:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   8fdc8:	0005883a 	mov	r2,zero
}
   8fdcc:	e037883a 	mov	sp,fp
   8fdd0:	df000017 	ldw	fp,0(sp)
   8fdd4:	dec00104 	addi	sp,sp,4
   8fdd8:	f800283a 	ret

0008fddc <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   8fddc:	defffc04 	addi	sp,sp,-16
   8fde0:	df000315 	stw	fp,12(sp)
   8fde4:	df000304 	addi	fp,sp,12
   8fde8:	e13ffe15 	stw	r4,-8(fp)
   8fdec:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fdf0:	0001883a 	nop
   8fdf4:	e0bffe17 	ldw	r2,-8(fp)
   8fdf8:	10800317 	ldw	r2,12(r2)
   8fdfc:	10800037 	ldwio	r2,0(r2)
   8fe00:	1080040c 	andi	r2,r2,16
   8fe04:	103ffb1e 	bne	r2,zero,8fdf4 <rx_descriptor_end+0xfff8fd94>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fe08:	e0bffe17 	ldw	r2,-8(fp)
   8fe0c:	10800317 	ldw	r2,12(r2)
   8fe10:	10800404 	addi	r2,r2,16
   8fe14:	e0fffe17 	ldw	r3,-8(fp)
   8fe18:	18c00317 	ldw	r3,12(r3)
   8fe1c:	18c00404 	addi	r3,r3,16
   8fe20:	19000037 	ldwio	r4,0(r3)
   8fe24:	00fff7c4 	movi	r3,-33
   8fe28:	20c6703a 	and	r3,r4,r3
   8fe2c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8fe30:	e0bffe17 	ldw	r2,-8(fp)
   8fe34:	10800317 	ldw	r2,12(r2)
   8fe38:	00c03fc4 	movi	r3,255
   8fe3c:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   8fe40:	e0bffe17 	ldw	r2,-8(fp)
   8fe44:	10800317 	ldw	r2,12(r2)
   8fe48:	10800804 	addi	r2,r2,32
   8fe4c:	e0ffff17 	ldw	r3,-4(fp)
   8fe50:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8fe54:	e0bffe17 	ldw	r2,-8(fp)
   8fe58:	10800317 	ldw	r2,12(r2)
   8fe5c:	10800404 	addi	r2,r2,16
   8fe60:	e0fffe17 	ldw	r3,-8(fp)
   8fe64:	18c00317 	ldw	r3,12(r3)
   8fe68:	18c00404 	addi	r3,r3,16
   8fe6c:	18c00037 	ldwio	r3,0(r3)
   8fe70:	18c01814 	ori	r3,r3,96
   8fe74:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   8fe78:	0001883a 	nop
   8fe7c:	e0bffe17 	ldw	r2,-8(fp)
   8fe80:	10800317 	ldw	r2,12(r2)
   8fe84:	10800037 	ldwio	r2,0(r2)
   8fe88:	1080040c 	andi	r2,r2,16
   8fe8c:	103ffb1e 	bne	r2,zero,8fe7c <rx_descriptor_end+0xfff8fe1c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   8fe90:	e0bffe17 	ldw	r2,-8(fp)
   8fe94:	10800317 	ldw	r2,12(r2)
   8fe98:	10800404 	addi	r2,r2,16
   8fe9c:	e0fffe17 	ldw	r3,-8(fp)
   8fea0:	18c00317 	ldw	r3,12(r3)
   8fea4:	18c00404 	addi	r3,r3,16
   8fea8:	19000037 	ldwio	r4,0(r3)
   8feac:	00fff7c4 	movi	r3,-33
   8feb0:	20c6703a 	and	r3,r4,r3
   8feb4:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   8feb8:	e0bffe17 	ldw	r2,-8(fp)
   8febc:	10800317 	ldw	r2,12(r2)
   8fec0:	10800037 	ldwio	r2,0(r2)
   8fec4:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   8fec8:	e0bffe17 	ldw	r2,-8(fp)
   8fecc:	10800317 	ldw	r2,12(r2)
   8fed0:	00c03fc4 	movi	r3,255
   8fed4:	10c00035 	stwio	r3,0(r2)

  return status;
   8fed8:	e0bffd03 	ldbu	r2,-12(fp)
}
   8fedc:	e037883a 	mov	sp,fp
   8fee0:	df000017 	ldw	fp,0(sp)
   8fee4:	dec00104 	addi	sp,sp,4
   8fee8:	f800283a 	ret

0008feec <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   8feec:	defff404 	addi	sp,sp,-48
   8fef0:	dfc00b15 	stw	ra,44(sp)
   8fef4:	df000a15 	stw	fp,40(sp)
   8fef8:	df000a04 	addi	fp,sp,40
   8fefc:	e13ffb15 	stw	r4,-20(fp)
   8ff00:	e17ffc15 	stw	r5,-16(fp)
   8ff04:	e1bffd15 	stw	r6,-12(fp)
   8ff08:	e1fffe15 	stw	r7,-8(fp)
   8ff0c:	e0800217 	ldw	r2,8(fp)
   8ff10:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   8ff14:	e0bfff0b 	ldhu	r2,-4(fp)
   8ff18:	d8000415 	stw	zero,16(sp)
   8ff1c:	d8000315 	stw	zero,12(sp)
   8ff20:	e0c00417 	ldw	r3,16(fp)
   8ff24:	d8c00215 	stw	r3,8(sp)
   8ff28:	e0c00317 	ldw	r3,12(fp)
   8ff2c:	d8c00115 	stw	r3,4(sp)
   8ff30:	d8800015 	stw	r2,0(sp)
   8ff34:	e1fffe17 	ldw	r7,-8(fp)
   8ff38:	e1bffd17 	ldw	r6,-12(fp)
   8ff3c:	e17ffc17 	ldw	r5,-16(fp)
   8ff40:	e13ffb17 	ldw	r4,-20(fp)
   8ff44:	008ff600 	call	8ff60 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   8ff48:	0001883a 	nop
   8ff4c:	e037883a 	mov	sp,fp
   8ff50:	dfc00117 	ldw	ra,4(sp)
   8ff54:	df000017 	ldw	fp,0(sp)
   8ff58:	dec00204 	addi	sp,sp,8
   8ff5c:	f800283a 	ret

0008ff60 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   8ff60:	defff204 	addi	sp,sp,-56
   8ff64:	dfc00d15 	stw	ra,52(sp)
   8ff68:	df000c15 	stw	fp,48(sp)
   8ff6c:	df000c04 	addi	fp,sp,48
   8ff70:	e13ffb15 	stw	r4,-20(fp)
   8ff74:	e17ffc15 	stw	r5,-16(fp)
   8ff78:	e1bffd15 	stw	r6,-12(fp)
   8ff7c:	e1fffe15 	stw	r7,-8(fp)
   8ff80:	e0800217 	ldw	r2,8(fp)
   8ff84:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8ff88:	e0bfff0b 	ldhu	r2,-4(fp)
   8ff8c:	d8000615 	stw	zero,24(sp)
   8ff90:	e0c00617 	ldw	r3,24(fp)
   8ff94:	d8c00515 	stw	r3,20(sp)
   8ff98:	e0c00517 	ldw	r3,20(fp)
   8ff9c:	d8c00415 	stw	r3,16(sp)
   8ffa0:	e0c00417 	ldw	r3,16(fp)
   8ffa4:	d8c00315 	stw	r3,12(sp)
   8ffa8:	e0c00317 	ldw	r3,12(fp)
   8ffac:	d8c00215 	stw	r3,8(sp)
   8ffb0:	d8000115 	stw	zero,4(sp)
   8ffb4:	d8800015 	stw	r2,0(sp)
   8ffb8:	e1fffe17 	ldw	r7,-8(fp)
   8ffbc:	e1bffd17 	ldw	r6,-12(fp)
   8ffc0:	e17ffc17 	ldw	r5,-16(fp)
   8ffc4:	e13ffb17 	ldw	r4,-20(fp)
   8ffc8:	00904f40 	call	904f4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   8ffcc:	0001883a 	nop
   8ffd0:	e037883a 	mov	sp,fp
   8ffd4:	dfc00117 	ldw	ra,4(sp)
   8ffd8:	df000017 	ldw	fp,0(sp)
   8ffdc:	dec00204 	addi	sp,sp,8
   8ffe0:	f800283a 	ret

0008ffe4 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   8ffe4:	defff804 	addi	sp,sp,-32
   8ffe8:	dfc00715 	stw	ra,28(sp)
   8ffec:	df000615 	stw	fp,24(sp)
   8fff0:	df000604 	addi	fp,sp,24
   8fff4:	e13ffc15 	stw	r4,-16(fp)
   8fff8:	e17ffd15 	stw	r5,-12(fp)
   8fffc:	e1bffe15 	stw	r6,-8(fp)
   90000:	3805883a 	mov	r2,r7
   90004:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   90008:	e0ffff0b 	ldhu	r3,-4(fp)
   9000c:	d8000115 	stw	zero,4(sp)
   90010:	e0800217 	ldw	r2,8(fp)
   90014:	d8800015 	stw	r2,0(sp)
   90018:	180f883a 	mov	r7,r3
   9001c:	e1bffe17 	ldw	r6,-8(fp)
   90020:	e17ffd17 	ldw	r5,-12(fp)
   90024:	e13ffc17 	ldw	r4,-16(fp)
   90028:	00900440 	call	90044 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   9002c:	0001883a 	nop
   90030:	e037883a 	mov	sp,fp
   90034:	dfc00117 	ldw	ra,4(sp)
   90038:	df000017 	ldw	fp,0(sp)
   9003c:	dec00204 	addi	sp,sp,8
   90040:	f800283a 	ret

00090044 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   90044:	defff304 	addi	sp,sp,-52
   90048:	dfc00c15 	stw	ra,48(sp)
   9004c:	df000b15 	stw	fp,44(sp)
   90050:	df000b04 	addi	fp,sp,44
   90054:	e13ffc15 	stw	r4,-16(fp)
   90058:	e17ffd15 	stw	r5,-12(fp)
   9005c:	e1bffe15 	stw	r6,-8(fp)
   90060:	3805883a 	mov	r2,r7
   90064:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   90068:	e0bfff0b 	ldhu	r2,-4(fp)
   9006c:	d8000615 	stw	zero,24(sp)
   90070:	e0c00317 	ldw	r3,12(fp)
   90074:	d8c00515 	stw	r3,20(sp)
   90078:	d8000415 	stw	zero,16(sp)
   9007c:	e0c00217 	ldw	r3,8(fp)
   90080:	d8c00315 	stw	r3,12(sp)
   90084:	d8000215 	stw	zero,8(sp)
   90088:	d8000115 	stw	zero,4(sp)
   9008c:	d8800015 	stw	r2,0(sp)
   90090:	e1fffe17 	ldw	r7,-8(fp)
   90094:	000d883a 	mov	r6,zero
   90098:	e17ffd17 	ldw	r5,-12(fp)
   9009c:	e13ffc17 	ldw	r4,-16(fp)
   900a0:	00904f40 	call	904f4 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   900a4:	0001883a 	nop
   900a8:	e037883a 	mov	sp,fp
   900ac:	dfc00117 	ldw	ra,4(sp)
   900b0:	df000017 	ldw	fp,0(sp)
   900b4:	dec00204 	addi	sp,sp,8
   900b8:	f800283a 	ret

000900bc <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   900bc:	defff404 	addi	sp,sp,-48
   900c0:	dfc00b15 	stw	ra,44(sp)
   900c4:	df000a15 	stw	fp,40(sp)
   900c8:	df000a04 	addi	fp,sp,40
   900cc:	e13ffb15 	stw	r4,-20(fp)
   900d0:	e17ffc15 	stw	r5,-16(fp)
   900d4:	e1bffd15 	stw	r6,-12(fp)
   900d8:	3807883a 	mov	r3,r7
   900dc:	e0800517 	ldw	r2,20(fp)
   900e0:	e0fffe0d 	sth	r3,-8(fp)
   900e4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   900e8:	e0fffe0b 	ldhu	r3,-8(fp)
   900ec:	e0bfff03 	ldbu	r2,-4(fp)
   900f0:	d8800415 	stw	r2,16(sp)
   900f4:	d8000315 	stw	zero,12(sp)
   900f8:	e0800417 	ldw	r2,16(fp)
   900fc:	d8800215 	stw	r2,8(sp)
   90100:	e0800317 	ldw	r2,12(fp)
   90104:	d8800115 	stw	r2,4(sp)
   90108:	e0800217 	ldw	r2,8(fp)
   9010c:	d8800015 	stw	r2,0(sp)
   90110:	180f883a 	mov	r7,r3
   90114:	e1bffd17 	ldw	r6,-12(fp)
   90118:	e17ffc17 	ldw	r5,-16(fp)
   9011c:	e13ffb17 	ldw	r4,-20(fp)
   90120:	009013c0 	call	9013c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   90124:	0001883a 	nop
   90128:	e037883a 	mov	sp,fp
   9012c:	dfc00117 	ldw	ra,4(sp)
   90130:	df000017 	ldw	fp,0(sp)
   90134:	dec00204 	addi	sp,sp,8
   90138:	f800283a 	ret

0009013c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   9013c:	defff204 	addi	sp,sp,-56
   90140:	dfc00d15 	stw	ra,52(sp)
   90144:	df000c15 	stw	fp,48(sp)
   90148:	df000c04 	addi	fp,sp,48
   9014c:	e13ffb15 	stw	r4,-20(fp)
   90150:	e17ffc15 	stw	r5,-16(fp)
   90154:	e1bffd15 	stw	r6,-12(fp)
   90158:	3807883a 	mov	r3,r7
   9015c:	e0800617 	ldw	r2,24(fp)
   90160:	e0fffe0d 	sth	r3,-8(fp)
   90164:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   90168:	e0bffe0b 	ldhu	r2,-8(fp)
   9016c:	e0ffff03 	ldbu	r3,-4(fp)
   90170:	d8c00615 	stw	r3,24(sp)
   90174:	d8000515 	stw	zero,20(sp)
   90178:	e0c00517 	ldw	r3,20(fp)
   9017c:	d8c00415 	stw	r3,16(sp)
   90180:	e0c00317 	ldw	r3,12(fp)
   90184:	d8c00315 	stw	r3,12(sp)
   90188:	e0c00217 	ldw	r3,8(fp)
   9018c:	d8c00215 	stw	r3,8(sp)
   90190:	e0c00417 	ldw	r3,16(fp)
   90194:	d8c00115 	stw	r3,4(sp)
   90198:	d8800015 	stw	r2,0(sp)
   9019c:	000f883a 	mov	r7,zero
   901a0:	e1bffd17 	ldw	r6,-12(fp)
   901a4:	e17ffc17 	ldw	r5,-16(fp)
   901a8:	e13ffb17 	ldw	r4,-20(fp)
   901ac:	00904f40 	call	904f4 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   901b0:	0001883a 	nop
   901b4:	e037883a 	mov	sp,fp
   901b8:	dfc00117 	ldw	ra,4(sp)
   901bc:	df000017 	ldw	fp,0(sp)
   901c0:	dec00204 	addi	sp,sp,8
   901c4:	f800283a 	ret

000901c8 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   901c8:	defffb04 	addi	sp,sp,-20
   901cc:	df000415 	stw	fp,16(sp)
   901d0:	df000404 	addi	fp,sp,16
   901d4:	e13ffc15 	stw	r4,-16(fp)
   901d8:	e17ffd15 	stw	r5,-12(fp)
   901dc:	e1bffe15 	stw	r6,-8(fp)
   901e0:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   901e4:	e0bffc17 	ldw	r2,-16(fp)
   901e8:	e0fffd17 	ldw	r3,-12(fp)
   901ec:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   901f0:	e0bffc17 	ldw	r2,-16(fp)
   901f4:	e0ffff17 	ldw	r3,-4(fp)
   901f8:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   901fc:	e0bffc17 	ldw	r2,-16(fp)
   90200:	e0fffe17 	ldw	r3,-8(fp)
   90204:	10c00b15 	stw	r3,44(r2)
}
   90208:	0001883a 	nop
   9020c:	e037883a 	mov	sp,fp
   90210:	df000017 	ldw	fp,0(sp)
   90214:	dec00104 	addi	sp,sp,4
   90218:	f800283a 	ret

0009021c <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   9021c:	defffd04 	addi	sp,sp,-12
   90220:	df000215 	stw	fp,8(sp)
   90224:	df000204 	addi	fp,sp,8
   90228:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   9022c:	e0bfff17 	ldw	r2,-4(fp)
   90230:	10800317 	ldw	r2,12(r2)
   90234:	10800404 	addi	r2,r2,16
   90238:	10800037 	ldwio	r2,0(r2)
   9023c:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   90240:	e0bffe17 	ldw	r2,-8(fp)
   90244:	10800814 	ori	r2,r2,32
   90248:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   9024c:	e0bfff17 	ldw	r2,-4(fp)
   90250:	10800317 	ldw	r2,12(r2)
   90254:	10800404 	addi	r2,r2,16
   90258:	e0fffe17 	ldw	r3,-8(fp)
   9025c:	10c00035 	stwio	r3,0(r2)
}
   90260:	0001883a 	nop
   90264:	e037883a 	mov	sp,fp
   90268:	df000017 	ldw	fp,0(sp)
   9026c:	dec00104 	addi	sp,sp,4
   90270:	f800283a 	ret

00090274 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   90274:	defffd04 	addi	sp,sp,-12
   90278:	df000215 	stw	fp,8(sp)
   9027c:	df000204 	addi	fp,sp,8
   90280:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   90284:	e0bfff17 	ldw	r2,-4(fp)
   90288:	10800317 	ldw	r2,12(r2)
   9028c:	10800404 	addi	r2,r2,16
   90290:	10800037 	ldwio	r2,0(r2)
   90294:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   90298:	e0fffe17 	ldw	r3,-8(fp)
   9029c:	00bff7c4 	movi	r2,-33
   902a0:	1884703a 	and	r2,r3,r2
   902a4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   902a8:	e0bfff17 	ldw	r2,-4(fp)
   902ac:	10800317 	ldw	r2,12(r2)
   902b0:	10800404 	addi	r2,r2,16
   902b4:	e0fffe17 	ldw	r3,-8(fp)
   902b8:	10c00035 	stwio	r3,0(r2)
}
   902bc:	0001883a 	nop
   902c0:	e037883a 	mov	sp,fp
   902c4:	df000017 	ldw	fp,0(sp)
   902c8:	dec00104 	addi	sp,sp,4
   902cc:	f800283a 	ret

000902d0 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   902d0:	defffe04 	addi	sp,sp,-8
   902d4:	df000115 	stw	fp,4(sp)
   902d8:	df000104 	addi	fp,sp,4
   902dc:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   902e0:	e0bfff17 	ldw	r2,-4(fp)
   902e4:	10800784 	addi	r2,r2,30
   902e8:	10800023 	ldbuio	r2,0(r2)
   902ec:	10803fcc 	andi	r2,r2,255
   902f0:	10801fcc 	andi	r2,r2,127
   902f4:	10000226 	beq	r2,zero,90300 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   902f8:	00bffec4 	movi	r2,-5
   902fc:	00000906 	br	90324 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   90300:	e0bfff17 	ldw	r2,-4(fp)
   90304:	108007c4 	addi	r2,r2,31
   90308:	10800023 	ldbuio	r2,0(r2)
   9030c:	10803fcc 	andi	r2,r2,255
   90310:	1080200c 	andi	r2,r2,128
   90314:	10000226 	beq	r2,zero,90320 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   90318:	00bfe244 	movi	r2,-119
   9031c:	00000106 	br	90324 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   90320:	0005883a 	mov	r2,zero
}
   90324:	e037883a 	mov	sp,fp
   90328:	df000017 	ldw	fp,0(sp)
   9032c:	dec00104 	addi	sp,sp,4
   90330:	f800283a 	ret

00090334 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   90334:	defffc04 	addi	sp,sp,-16
   90338:	dfc00315 	stw	ra,12(sp)
   9033c:	df000215 	stw	fp,8(sp)
   90340:	df000204 	addi	fp,sp,8
   90344:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   90348:	d1600e04 	addi	r5,gp,-32712
   9034c:	e13fff17 	ldw	r4,-4(fp)
   90350:	0090e480 	call	90e48 <alt_find_dev>
   90354:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   90358:	e0bffe17 	ldw	r2,-8(fp)
   9035c:	1000041e 	bne	r2,zero,90370 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   90360:	008fc7c0 	call	8fc7c <alt_get_errno>
   90364:	1007883a 	mov	r3,r2
   90368:	008004c4 	movi	r2,19
   9036c:	18800015 	stw	r2,0(r3)
  }

  return dev;
   90370:	e0bffe17 	ldw	r2,-8(fp)
}
   90374:	e037883a 	mov	sp,fp
   90378:	dfc00117 	ldw	ra,4(sp)
   9037c:	df000017 	ldw	fp,0(sp)
   90380:	dec00204 	addi	sp,sp,8
   90384:	f800283a 	ret

00090388 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   90388:	defff104 	addi	sp,sp,-60
   9038c:	dfc00e15 	stw	ra,56(sp)
   90390:	df000d15 	stw	fp,52(sp)
   90394:	df000d04 	addi	fp,sp,52
   90398:	e13ffa15 	stw	r4,-24(fp)
   9039c:	e17ffb15 	stw	r5,-20(fp)
   903a0:	e1bffc15 	stw	r6,-16(fp)
   903a4:	e1fffd15 	stw	r7,-12(fp)
   903a8:	e0c00217 	ldw	r3,8(fp)
   903ac:	e0800617 	ldw	r2,24(fp)
   903b0:	e0fffe0d 	sth	r3,-8(fp)
   903b4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   903b8:	e0bffe0b 	ldhu	r2,-8(fp)
   903bc:	e0ffff03 	ldbu	r3,-4(fp)
   903c0:	d8c00615 	stw	r3,24(sp)
   903c4:	d8000515 	stw	zero,20(sp)
   903c8:	d8000415 	stw	zero,16(sp)
   903cc:	e0c00517 	ldw	r3,20(fp)
   903d0:	d8c00315 	stw	r3,12(sp)
   903d4:	e0c00417 	ldw	r3,16(fp)
   903d8:	d8c00215 	stw	r3,8(sp)
   903dc:	e0c00317 	ldw	r3,12(fp)
   903e0:	d8c00115 	stw	r3,4(sp)
   903e4:	d8800015 	stw	r2,0(sp)
   903e8:	e1fffd17 	ldw	r7,-12(fp)
   903ec:	e1bffc17 	ldw	r6,-16(fp)
   903f0:	e17ffb17 	ldw	r5,-20(fp)
   903f4:	e13ffa17 	ldw	r4,-24(fp)
   903f8:	00904f40 	call	904f4 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   903fc:	0001883a 	nop
   90400:	e037883a 	mov	sp,fp
   90404:	dfc00117 	ldw	ra,4(sp)
   90408:	df000017 	ldw	fp,0(sp)
   9040c:	dec00204 	addi	sp,sp,8
   90410:	f800283a 	ret

00090414 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   90414:	defffc04 	addi	sp,sp,-16
   90418:	df000315 	stw	fp,12(sp)
   9041c:	df000304 	addi	fp,sp,12
   90420:	e13ffe15 	stw	r4,-8(fp)
   90424:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   90428:	e0bffe17 	ldw	r2,-8(fp)
   9042c:	10800317 	ldw	r2,12(r2)
   90430:	10800404 	addi	r2,r2,16
   90434:	10800037 	ldwio	r2,0(r2)
   90438:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   9043c:	e0fffd17 	ldw	r3,-12(fp)
   90440:	00a00434 	movhi	r2,32784
   90444:	10bfffc4 	addi	r2,r2,-1
   90448:	1884703a 	and	r2,r3,r2
   9044c:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   90450:	e0bfff17 	ldw	r2,-4(fp)
   90454:	1004953a 	slli	r2,r2,20
   90458:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   9045c:	e0bffd17 	ldw	r2,-12(fp)
   90460:	1884b03a 	or	r2,r3,r2
   90464:	10800134 	orhi	r2,r2,4
   90468:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   9046c:	e0bffe17 	ldw	r2,-8(fp)
   90470:	10800317 	ldw	r2,12(r2)
   90474:	10800404 	addi	r2,r2,16
   90478:	e0fffd17 	ldw	r3,-12(fp)
   9047c:	10c00035 	stwio	r3,0(r2)
  
  return;
   90480:	0001883a 	nop
}
   90484:	e037883a 	mov	sp,fp
   90488:	df000017 	ldw	fp,0(sp)
   9048c:	dec00104 	addi	sp,sp,4
   90490:	f800283a 	ret

00090494 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   90494:	defffd04 	addi	sp,sp,-12
   90498:	df000215 	stw	fp,8(sp)
   9049c:	df000204 	addi	fp,sp,8
   904a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   904a4:	e0bfff17 	ldw	r2,-4(fp)
   904a8:	10800317 	ldw	r2,12(r2)
   904ac:	10800404 	addi	r2,r2,16
   904b0:	10800037 	ldwio	r2,0(r2)
   904b4:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   904b8:	e0fffe17 	ldw	r3,-8(fp)
   904bc:	00bfff34 	movhi	r2,65532
   904c0:	10bfffc4 	addi	r2,r2,-1
   904c4:	1884703a 	and	r2,r3,r2
   904c8:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   904cc:	e0bfff17 	ldw	r2,-4(fp)
   904d0:	10800317 	ldw	r2,12(r2)
   904d4:	10800404 	addi	r2,r2,16
   904d8:	e0fffe17 	ldw	r3,-8(fp)
   904dc:	10c00035 	stwio	r3,0(r2)
  
  return;
   904e0:	0001883a 	nop
}
   904e4:	e037883a 	mov	sp,fp
   904e8:	df000017 	ldw	fp,0(sp)
   904ec:	dec00104 	addi	sp,sp,4
   904f0:	f800283a 	ret

000904f4 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   904f4:	defff804 	addi	sp,sp,-32
   904f8:	dfc00715 	stw	ra,28(sp)
   904fc:	df000615 	stw	fp,24(sp)
   90500:	df000604 	addi	fp,sp,24
   90504:	e13ffa15 	stw	r4,-24(fp)
   90508:	e17ffb15 	stw	r5,-20(fp)
   9050c:	e1bffc15 	stw	r6,-16(fp)
   90510:	e1fffd15 	stw	r7,-12(fp)
   90514:	e0c00217 	ldw	r3,8(fp)
   90518:	e0800817 	ldw	r2,32(fp)
   9051c:	e0fffe0d 	sth	r3,-8(fp)
   90520:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   90524:	e0bffb17 	ldw	r2,-20(fp)
   90528:	108007c4 	addi	r2,r2,31
   9052c:	e0fffb17 	ldw	r3,-20(fp)
   90530:	18c007c3 	ldbu	r3,31(r3)
   90534:	19003fcc 	andi	r4,r3,255
   90538:	00ffdfc4 	movi	r3,-129
   9053c:	20c6703a 	and	r3,r4,r3
   90540:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   90544:	e0bffa17 	ldw	r2,-24(fp)
   90548:	e0fffc17 	ldw	r3,-16(fp)
   9054c:	19403fcc 	andi	r5,r3,255
   90550:	10c00003 	ldbu	r3,0(r2)
   90554:	1806703a 	and	r3,r3,zero
   90558:	1809883a 	mov	r4,r3
   9055c:	2807883a 	mov	r3,r5
   90560:	20c6b03a 	or	r3,r4,r3
   90564:	10c00005 	stb	r3,0(r2)
   90568:	e0fffc17 	ldw	r3,-16(fp)
   9056c:	1806d23a 	srli	r3,r3,8
   90570:	19403fcc 	andi	r5,r3,255
   90574:	10c00043 	ldbu	r3,1(r2)
   90578:	1806703a 	and	r3,r3,zero
   9057c:	1809883a 	mov	r4,r3
   90580:	2807883a 	mov	r3,r5
   90584:	20c6b03a 	or	r3,r4,r3
   90588:	10c00045 	stb	r3,1(r2)
   9058c:	e0fffc17 	ldw	r3,-16(fp)
   90590:	1806d43a 	srli	r3,r3,16
   90594:	19403fcc 	andi	r5,r3,255
   90598:	10c00083 	ldbu	r3,2(r2)
   9059c:	1806703a 	and	r3,r3,zero
   905a0:	1809883a 	mov	r4,r3
   905a4:	2807883a 	mov	r3,r5
   905a8:	20c6b03a 	or	r3,r4,r3
   905ac:	10c00085 	stb	r3,2(r2)
   905b0:	e0fffc17 	ldw	r3,-16(fp)
   905b4:	180ad63a 	srli	r5,r3,24
   905b8:	10c000c3 	ldbu	r3,3(r2)
   905bc:	1806703a 	and	r3,r3,zero
   905c0:	1809883a 	mov	r4,r3
   905c4:	2807883a 	mov	r3,r5
   905c8:	20c6b03a 	or	r3,r4,r3
   905cc:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   905d0:	e0bffa17 	ldw	r2,-24(fp)
   905d4:	e0fffd17 	ldw	r3,-12(fp)
   905d8:	19403fcc 	andi	r5,r3,255
   905dc:	10c00203 	ldbu	r3,8(r2)
   905e0:	1806703a 	and	r3,r3,zero
   905e4:	1809883a 	mov	r4,r3
   905e8:	2807883a 	mov	r3,r5
   905ec:	20c6b03a 	or	r3,r4,r3
   905f0:	10c00205 	stb	r3,8(r2)
   905f4:	e0fffd17 	ldw	r3,-12(fp)
   905f8:	1806d23a 	srli	r3,r3,8
   905fc:	19403fcc 	andi	r5,r3,255
   90600:	10c00243 	ldbu	r3,9(r2)
   90604:	1806703a 	and	r3,r3,zero
   90608:	1809883a 	mov	r4,r3
   9060c:	2807883a 	mov	r3,r5
   90610:	20c6b03a 	or	r3,r4,r3
   90614:	10c00245 	stb	r3,9(r2)
   90618:	e0fffd17 	ldw	r3,-12(fp)
   9061c:	1806d43a 	srli	r3,r3,16
   90620:	19403fcc 	andi	r5,r3,255
   90624:	10c00283 	ldbu	r3,10(r2)
   90628:	1806703a 	and	r3,r3,zero
   9062c:	1809883a 	mov	r4,r3
   90630:	2807883a 	mov	r3,r5
   90634:	20c6b03a 	or	r3,r4,r3
   90638:	10c00285 	stb	r3,10(r2)
   9063c:	e0fffd17 	ldw	r3,-12(fp)
   90640:	180ad63a 	srli	r5,r3,24
   90644:	10c002c3 	ldbu	r3,11(r2)
   90648:	1806703a 	and	r3,r3,zero
   9064c:	1809883a 	mov	r4,r3
   90650:	2807883a 	mov	r3,r5
   90654:	20c6b03a 	or	r3,r4,r3
   90658:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   9065c:	e0bffa17 	ldw	r2,-24(fp)
   90660:	e0fffb17 	ldw	r3,-20(fp)
   90664:	19403fcc 	andi	r5,r3,255
   90668:	10c00403 	ldbu	r3,16(r2)
   9066c:	1806703a 	and	r3,r3,zero
   90670:	1809883a 	mov	r4,r3
   90674:	2807883a 	mov	r3,r5
   90678:	20c6b03a 	or	r3,r4,r3
   9067c:	10c00405 	stb	r3,16(r2)
   90680:	e0fffb17 	ldw	r3,-20(fp)
   90684:	1806d23a 	srli	r3,r3,8
   90688:	19403fcc 	andi	r5,r3,255
   9068c:	10c00443 	ldbu	r3,17(r2)
   90690:	1806703a 	and	r3,r3,zero
   90694:	1809883a 	mov	r4,r3
   90698:	2807883a 	mov	r3,r5
   9069c:	20c6b03a 	or	r3,r4,r3
   906a0:	10c00445 	stb	r3,17(r2)
   906a4:	e0fffb17 	ldw	r3,-20(fp)
   906a8:	1806d43a 	srli	r3,r3,16
   906ac:	19403fcc 	andi	r5,r3,255
   906b0:	10c00483 	ldbu	r3,18(r2)
   906b4:	1806703a 	and	r3,r3,zero
   906b8:	1809883a 	mov	r4,r3
   906bc:	2807883a 	mov	r3,r5
   906c0:	20c6b03a 	or	r3,r4,r3
   906c4:	10c00485 	stb	r3,18(r2)
   906c8:	e0fffb17 	ldw	r3,-20(fp)
   906cc:	180ad63a 	srli	r5,r3,24
   906d0:	10c004c3 	ldbu	r3,19(r2)
   906d4:	1806703a 	and	r3,r3,zero
   906d8:	1809883a 	mov	r4,r3
   906dc:	2807883a 	mov	r3,r5
   906e0:	20c6b03a 	or	r3,r4,r3
   906e4:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   906e8:	e0bffa17 	ldw	r2,-24(fp)
   906ec:	10c00103 	ldbu	r3,4(r2)
   906f0:	1806703a 	and	r3,r3,zero
   906f4:	10c00105 	stb	r3,4(r2)
   906f8:	10c00143 	ldbu	r3,5(r2)
   906fc:	1806703a 	and	r3,r3,zero
   90700:	10c00145 	stb	r3,5(r2)
   90704:	10c00183 	ldbu	r3,6(r2)
   90708:	1806703a 	and	r3,r3,zero
   9070c:	10c00185 	stb	r3,6(r2)
   90710:	10c001c3 	ldbu	r3,7(r2)
   90714:	1806703a 	and	r3,r3,zero
   90718:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   9071c:	e0bffa17 	ldw	r2,-24(fp)
   90720:	10c00303 	ldbu	r3,12(r2)
   90724:	1806703a 	and	r3,r3,zero
   90728:	10c00305 	stb	r3,12(r2)
   9072c:	10c00343 	ldbu	r3,13(r2)
   90730:	1806703a 	and	r3,r3,zero
   90734:	10c00345 	stb	r3,13(r2)
   90738:	10c00383 	ldbu	r3,14(r2)
   9073c:	1806703a 	and	r3,r3,zero
   90740:	10c00385 	stb	r3,14(r2)
   90744:	10c003c3 	ldbu	r3,15(r2)
   90748:	1806703a 	and	r3,r3,zero
   9074c:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   90750:	e0bffa17 	ldw	r2,-24(fp)
   90754:	10c00503 	ldbu	r3,20(r2)
   90758:	1806703a 	and	r3,r3,zero
   9075c:	10c00505 	stb	r3,20(r2)
   90760:	10c00543 	ldbu	r3,21(r2)
   90764:	1806703a 	and	r3,r3,zero
   90768:	10c00545 	stb	r3,21(r2)
   9076c:	10c00583 	ldbu	r3,22(r2)
   90770:	1806703a 	and	r3,r3,zero
   90774:	10c00585 	stb	r3,22(r2)
   90778:	10c005c3 	ldbu	r3,23(r2)
   9077c:	1806703a 	and	r3,r3,zero
   90780:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   90784:	e0bffa17 	ldw	r2,-24(fp)
   90788:	e0fffe17 	ldw	r3,-8(fp)
   9078c:	19403fcc 	andi	r5,r3,255
   90790:	10c00603 	ldbu	r3,24(r2)
   90794:	1806703a 	and	r3,r3,zero
   90798:	1809883a 	mov	r4,r3
   9079c:	2807883a 	mov	r3,r5
   907a0:	20c6b03a 	or	r3,r4,r3
   907a4:	10c00605 	stb	r3,24(r2)
   907a8:	e0fffe17 	ldw	r3,-8(fp)
   907ac:	1806d23a 	srli	r3,r3,8
   907b0:	19403fcc 	andi	r5,r3,255
   907b4:	10c00643 	ldbu	r3,25(r2)
   907b8:	1806703a 	and	r3,r3,zero
   907bc:	1809883a 	mov	r4,r3
   907c0:	2807883a 	mov	r3,r5
   907c4:	20c6b03a 	or	r3,r4,r3
   907c8:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   907cc:	e0bffa17 	ldw	r2,-24(fp)
   907d0:	10c00703 	ldbu	r3,28(r2)
   907d4:	1806703a 	and	r3,r3,zero
   907d8:	10c00705 	stb	r3,28(r2)
   907dc:	10c00743 	ldbu	r3,29(r2)
   907e0:	1806703a 	and	r3,r3,zero
   907e4:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   907e8:	e0bffa17 	ldw	r2,-24(fp)
   907ec:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   907f0:	e0800617 	ldw	r2,24(fp)
   907f4:	1007883a 	mov	r3,r2
   907f8:	e0bffa17 	ldw	r2,-24(fp)
   907fc:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   90800:	e0800717 	ldw	r2,28(fp)
   90804:	1007883a 	mov	r3,r2
   90808:	e0bffa17 	ldw	r2,-24(fp)
   9080c:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   90810:	e0800317 	ldw	r2,12(fp)
   90814:	10000226 	beq	r2,zero,90820 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   90818:	00bfe044 	movi	r2,-127
   9081c:	00000106 	br	90824 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   90820:	00bfe004 	movi	r2,-128
   90824:	e0c00417 	ldw	r3,16(fp)
   90828:	18000226 	beq	r3,zero,90834 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   9082c:	00c00084 	movi	r3,2
   90830:	00000106 	br	90838 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   90834:	0007883a 	mov	r3,zero
   90838:	10c4b03a 	or	r2,r2,r3
   9083c:	1007883a 	mov	r3,r2
   90840:	e0800517 	ldw	r2,20(fp)
   90844:	10000226 	beq	r2,zero,90850 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   90848:	00800104 	movi	r2,4
   9084c:	00000106 	br	90854 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   90850:	0005883a 	mov	r2,zero
   90854:	1884b03a 	or	r2,r3,r2
   90858:	1007883a 	mov	r3,r2
   9085c:	e0bfff03 	ldbu	r2,-4(fp)
   90860:	10000426 	beq	r2,zero,90874 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   90864:	e0bfff03 	ldbu	r2,-4(fp)
   90868:	108003cc 	andi	r2,r2,15
   9086c:	100490fa 	slli	r2,r2,3
   90870:	00000106 	br	90878 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   90874:	0005883a 	mov	r2,zero
   90878:	1884b03a 	or	r2,r3,r2
   9087c:	1007883a 	mov	r3,r2
   90880:	e0bffa17 	ldw	r2,-24(fp)
   90884:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   90888:	01400804 	movi	r5,32
   9088c:	e13ffa17 	ldw	r4,-24(fp)
   90890:	0090c300 	call	90c30 <alt_dcache_flush>
}
   90894:	0001883a 	nop
   90898:	e037883a 	mov	sp,fp
   9089c:	dfc00117 	ldw	ra,4(sp)
   908a0:	df000017 	ldw	fp,0(sp)
   908a4:	dec00204 	addi	sp,sp,8
   908a8:	f800283a 	ret

000908ac <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   908ac:	defff904 	addi	sp,sp,-28
   908b0:	dfc00615 	stw	ra,24(sp)
   908b4:	df000515 	stw	fp,20(sp)
   908b8:	df000504 	addi	fp,sp,20
   908bc:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   908c0:	e0bfff17 	ldw	r2,-4(fp)
   908c4:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   908c8:	e0bffb17 	ldw	r2,-20(fp)
   908cc:	10800317 	ldw	r2,12(r2)
   908d0:	10800404 	addi	r2,r2,16
   908d4:	e0fffb17 	ldw	r3,-20(fp)
   908d8:	18c00317 	ldw	r3,12(r3)
   908dc:	18c00404 	addi	r3,r3,16
   908e0:	18c00037 	ldwio	r3,0(r3)
   908e4:	18e00034 	orhi	r3,r3,32768
   908e8:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   908ec:	e0bffb17 	ldw	r2,-20(fp)
   908f0:	10800317 	ldw	r2,12(r2)
   908f4:	10800404 	addi	r2,r2,16
   908f8:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   908fc:	e0bffb17 	ldw	r2,-20(fp)
   90900:	10800917 	ldw	r2,36(r2)
   90904:	10001226 	beq	r2,zero,90950 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90908:	0005303a 	rdctl	r2,status
   9090c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90910:	e0fffd17 	ldw	r3,-12(fp)
   90914:	00bfff84 	movi	r2,-2
   90918:	1884703a 	and	r2,r3,r2
   9091c:	1001703a 	wrctl	status,r2
  
  return context;
   90920:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   90924:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   90928:	e0bffb17 	ldw	r2,-20(fp)
   9092c:	10800917 	ldw	r2,36(r2)
   90930:	e0fffb17 	ldw	r3,-20(fp)
   90934:	18c00a17 	ldw	r3,40(r3)
   90938:	1809883a 	mov	r4,r3
   9093c:	103ee83a 	callr	r2
   90940:	e0bffc17 	ldw	r2,-16(fp)
   90944:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90948:	e0bffe17 	ldw	r2,-8(fp)
   9094c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   90950:	0001883a 	nop
   90954:	e037883a 	mov	sp,fp
   90958:	dfc00117 	ldw	ra,4(sp)
   9095c:	df000017 	ldw	fp,0(sp)
   90960:	dec00204 	addi	sp,sp,8
   90964:	f800283a 	ret

00090968 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   90968:	defffa04 	addi	sp,sp,-24
   9096c:	dfc00515 	stw	ra,20(sp)
   90970:	df000415 	stw	fp,16(sp)
   90974:	df000404 	addi	fp,sp,16
   90978:	e13ffd15 	stw	r4,-12(fp)
   9097c:	e17ffe15 	stw	r5,-8(fp)
   90980:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   90984:	e0bffd17 	ldw	r2,-12(fp)
   90988:	10800317 	ldw	r2,12(r2)
   9098c:	10800404 	addi	r2,r2,16
   90990:	00c00074 	movhi	r3,1
   90994:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   90998:	e0bffd17 	ldw	r2,-12(fp)
   9099c:	10800317 	ldw	r2,12(r2)
   909a0:	10800404 	addi	r2,r2,16
   909a4:	00c00074 	movhi	r3,1
   909a8:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   909ac:	e0bffd17 	ldw	r2,-12(fp)
   909b0:	10800317 	ldw	r2,12(r2)
   909b4:	10800404 	addi	r2,r2,16
   909b8:	0007883a 	mov	r3,zero
   909bc:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   909c0:	e0bffd17 	ldw	r2,-12(fp)
   909c4:	10800317 	ldw	r2,12(r2)
   909c8:	00c03fc4 	movi	r3,255
   909cc:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   909d0:	d1600e04 	addi	r5,gp,-32712
   909d4:	e13ffd17 	ldw	r4,-12(fp)
   909d8:	0090ce40 	call	90ce4 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   909dc:	d8000015 	stw	zero,0(sp)
   909e0:	e1fffd17 	ldw	r7,-12(fp)
   909e4:	01800274 	movhi	r6,9
   909e8:	31822b04 	addi	r6,r6,2220
   909ec:	e17fff17 	ldw	r5,-4(fp)
   909f0:	e13ffe17 	ldw	r4,-8(fp)
   909f4:	0090f0c0 	call	90f0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   909f8:	0001883a 	nop
   909fc:	e037883a 	mov	sp,fp
   90a00:	dfc00117 	ldw	ra,4(sp)
   90a04:	df000017 	ldw	fp,0(sp)
   90a08:	dec00204 	addi	sp,sp,8
   90a0c:	f800283a 	ret

00090a10 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   90a10:	defffa04 	addi	sp,sp,-24
   90a14:	dfc00515 	stw	ra,20(sp)
   90a18:	df000415 	stw	fp,16(sp)
   90a1c:	df000404 	addi	fp,sp,16
   90a20:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   90a24:	0007883a 	mov	r3,zero
   90a28:	e0bfff17 	ldw	r2,-4(fp)
   90a2c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   90a30:	e0bfff17 	ldw	r2,-4(fp)
   90a34:	10800104 	addi	r2,r2,4
   90a38:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90a3c:	0005303a 	rdctl	r2,status
   90a40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90a44:	e0fffd17 	ldw	r3,-12(fp)
   90a48:	00bfff84 	movi	r2,-2
   90a4c:	1884703a 	and	r2,r3,r2
   90a50:	1001703a 	wrctl	status,r2
  
  return context;
   90a54:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   90a58:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   90a5c:	00915dc0 	call	915dc <alt_tick>
   90a60:	e0bffc17 	ldw	r2,-16(fp)
   90a64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90a68:	e0bffe17 	ldw	r2,-8(fp)
   90a6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   90a70:	0001883a 	nop
   90a74:	e037883a 	mov	sp,fp
   90a78:	dfc00117 	ldw	ra,4(sp)
   90a7c:	df000017 	ldw	fp,0(sp)
   90a80:	dec00204 	addi	sp,sp,8
   90a84:	f800283a 	ret

00090a88 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   90a88:	defff804 	addi	sp,sp,-32
   90a8c:	dfc00715 	stw	ra,28(sp)
   90a90:	df000615 	stw	fp,24(sp)
   90a94:	df000604 	addi	fp,sp,24
   90a98:	e13ffc15 	stw	r4,-16(fp)
   90a9c:	e17ffd15 	stw	r5,-12(fp)
   90aa0:	e1bffe15 	stw	r6,-8(fp)
   90aa4:	e1ffff15 	stw	r7,-4(fp)
   90aa8:	e0bfff17 	ldw	r2,-4(fp)
   90aac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   90ab0:	d0a80217 	ldw	r2,-24568(gp)
   90ab4:	1000021e 	bne	r2,zero,90ac0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   90ab8:	e0bffb17 	ldw	r2,-20(fp)
   90abc:	d0a80215 	stw	r2,-24568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   90ac0:	e0bffc17 	ldw	r2,-16(fp)
   90ac4:	10800104 	addi	r2,r2,4
   90ac8:	00c001c4 	movi	r3,7
   90acc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   90ad0:	d8000015 	stw	zero,0(sp)
   90ad4:	e1fffc17 	ldw	r7,-16(fp)
   90ad8:	01800274 	movhi	r6,9
   90adc:	31828404 	addi	r6,r6,2576
   90ae0:	e17ffe17 	ldw	r5,-8(fp)
   90ae4:	e13ffd17 	ldw	r4,-12(fp)
   90ae8:	0090f0c0 	call	90f0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   90aec:	0001883a 	nop
   90af0:	e037883a 	mov	sp,fp
   90af4:	dfc00117 	ldw	ra,4(sp)
   90af8:	df000017 	ldw	fp,0(sp)
   90afc:	dec00204 	addi	sp,sp,8
   90b00:	f800283a 	ret

00090b04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   90b04:	defff504 	addi	sp,sp,-44
   90b08:	df000a15 	stw	fp,40(sp)
   90b0c:	df000a04 	addi	fp,sp,40
   90b10:	e13ffc15 	stw	r4,-16(fp)
   90b14:	e17ffd15 	stw	r5,-12(fp)
   90b18:	e1bffe15 	stw	r6,-8(fp)
   90b1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   90b20:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   90b24:	d0a80217 	ldw	r2,-24568(gp)
  
  if (alt_ticks_per_second ())
   90b28:	10003c26 	beq	r2,zero,90c1c <alt_alarm_start+0x118>
  {
    if (alarm)
   90b2c:	e0bffc17 	ldw	r2,-16(fp)
   90b30:	10003826 	beq	r2,zero,90c14 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   90b34:	e0bffc17 	ldw	r2,-16(fp)
   90b38:	e0fffe17 	ldw	r3,-8(fp)
   90b3c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   90b40:	e0bffc17 	ldw	r2,-16(fp)
   90b44:	e0ffff17 	ldw	r3,-4(fp)
   90b48:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90b4c:	0005303a 	rdctl	r2,status
   90b50:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90b54:	e0fff917 	ldw	r3,-28(fp)
   90b58:	00bfff84 	movi	r2,-2
   90b5c:	1884703a 	and	r2,r3,r2
   90b60:	1001703a 	wrctl	status,r2
  
  return context;
   90b64:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   90b68:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   90b6c:	d0a80317 	ldw	r2,-24564(gp)
      
      current_nticks = alt_nticks();
   90b70:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   90b74:	e0fffd17 	ldw	r3,-12(fp)
   90b78:	e0bff617 	ldw	r2,-40(fp)
   90b7c:	1885883a 	add	r2,r3,r2
   90b80:	10c00044 	addi	r3,r2,1
   90b84:	e0bffc17 	ldw	r2,-16(fp)
   90b88:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   90b8c:	e0bffc17 	ldw	r2,-16(fp)
   90b90:	10c00217 	ldw	r3,8(r2)
   90b94:	e0bff617 	ldw	r2,-40(fp)
   90b98:	1880042e 	bgeu	r3,r2,90bac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   90b9c:	e0bffc17 	ldw	r2,-16(fp)
   90ba0:	00c00044 	movi	r3,1
   90ba4:	10c00405 	stb	r3,16(r2)
   90ba8:	00000206 	br	90bb4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   90bac:	e0bffc17 	ldw	r2,-16(fp)
   90bb0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   90bb4:	e0bffc17 	ldw	r2,-16(fp)
   90bb8:	d0e01104 	addi	r3,gp,-32700
   90bbc:	e0fffa15 	stw	r3,-24(fp)
   90bc0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90bc4:	e0bffb17 	ldw	r2,-20(fp)
   90bc8:	e0fffa17 	ldw	r3,-24(fp)
   90bcc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90bd0:	e0bffa17 	ldw	r2,-24(fp)
   90bd4:	10c00017 	ldw	r3,0(r2)
   90bd8:	e0bffb17 	ldw	r2,-20(fp)
   90bdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90be0:	e0bffa17 	ldw	r2,-24(fp)
   90be4:	10800017 	ldw	r2,0(r2)
   90be8:	e0fffb17 	ldw	r3,-20(fp)
   90bec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90bf0:	e0bffa17 	ldw	r2,-24(fp)
   90bf4:	e0fffb17 	ldw	r3,-20(fp)
   90bf8:	10c00015 	stw	r3,0(r2)
   90bfc:	e0bff817 	ldw	r2,-32(fp)
   90c00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90c04:	e0bff717 	ldw	r2,-36(fp)
   90c08:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   90c0c:	0005883a 	mov	r2,zero
   90c10:	00000306 	br	90c20 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   90c14:	00bffa84 	movi	r2,-22
   90c18:	00000106 	br	90c20 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   90c1c:	00bfde84 	movi	r2,-134
  }
}
   90c20:	e037883a 	mov	sp,fp
   90c24:	df000017 	ldw	fp,0(sp)
   90c28:	dec00104 	addi	sp,sp,4
   90c2c:	f800283a 	ret

00090c30 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   90c30:	defffb04 	addi	sp,sp,-20
   90c34:	df000415 	stw	fp,16(sp)
   90c38:	df000404 	addi	fp,sp,16
   90c3c:	e13ffe15 	stw	r4,-8(fp)
   90c40:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   90c44:	e0fffe17 	ldw	r3,-8(fp)
   90c48:	e0bfff17 	ldw	r2,-4(fp)
   90c4c:	1885883a 	add	r2,r3,r2
   90c50:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   90c54:	e0bffe17 	ldw	r2,-8(fp)
   90c58:	e0bffc15 	stw	r2,-16(fp)
   90c5c:	00000506 	br	90c74 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   90c60:	e0bffc17 	ldw	r2,-16(fp)
   90c64:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   90c68:	e0bffc17 	ldw	r2,-16(fp)
   90c6c:	10800804 	addi	r2,r2,32
   90c70:	e0bffc15 	stw	r2,-16(fp)
   90c74:	e0fffc17 	ldw	r3,-16(fp)
   90c78:	e0bffd17 	ldw	r2,-12(fp)
   90c7c:	18bff836 	bltu	r3,r2,90c60 <rx_descriptor_end+0xfff90c00>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   90c80:	e0bffe17 	ldw	r2,-8(fp)
   90c84:	108007cc 	andi	r2,r2,31
   90c88:	10000226 	beq	r2,zero,90c94 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   90c8c:	e0bffc17 	ldw	r2,-16(fp)
   90c90:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   90c94:	0001883a 	nop
   90c98:	e037883a 	mov	sp,fp
   90c9c:	df000017 	ldw	fp,0(sp)
   90ca0:	dec00104 	addi	sp,sp,4
   90ca4:	f800283a 	ret

00090ca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90ca8:	defffe04 	addi	sp,sp,-8
   90cac:	dfc00115 	stw	ra,4(sp)
   90cb0:	df000015 	stw	fp,0(sp)
   90cb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90cb8:	d0a00c17 	ldw	r2,-32720(gp)
   90cbc:	10000326 	beq	r2,zero,90ccc <alt_get_errno+0x24>
   90cc0:	d0a00c17 	ldw	r2,-32720(gp)
   90cc4:	103ee83a 	callr	r2
   90cc8:	00000106 	br	90cd0 <alt_get_errno+0x28>
   90ccc:	d0a7fa04 	addi	r2,gp,-24600
}
   90cd0:	e037883a 	mov	sp,fp
   90cd4:	dfc00117 	ldw	ra,4(sp)
   90cd8:	df000017 	ldw	fp,0(sp)
   90cdc:	dec00204 	addi	sp,sp,8
   90ce0:	f800283a 	ret

00090ce4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   90ce4:	defffa04 	addi	sp,sp,-24
   90ce8:	dfc00515 	stw	ra,20(sp)
   90cec:	df000415 	stw	fp,16(sp)
   90cf0:	df000404 	addi	fp,sp,16
   90cf4:	e13ffe15 	stw	r4,-8(fp)
   90cf8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   90cfc:	e0bffe17 	ldw	r2,-8(fp)
   90d00:	10000326 	beq	r2,zero,90d10 <alt_dev_llist_insert+0x2c>
   90d04:	e0bffe17 	ldw	r2,-8(fp)
   90d08:	10800217 	ldw	r2,8(r2)
   90d0c:	1000061e 	bne	r2,zero,90d28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   90d10:	0090ca80 	call	90ca8 <alt_get_errno>
   90d14:	1007883a 	mov	r3,r2
   90d18:	00800584 	movi	r2,22
   90d1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   90d20:	00bffa84 	movi	r2,-22
   90d24:	00001306 	br	90d74 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   90d28:	e0bffe17 	ldw	r2,-8(fp)
   90d2c:	e0ffff17 	ldw	r3,-4(fp)
   90d30:	e0fffc15 	stw	r3,-16(fp)
   90d34:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90d38:	e0bffd17 	ldw	r2,-12(fp)
   90d3c:	e0fffc17 	ldw	r3,-16(fp)
   90d40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90d44:	e0bffc17 	ldw	r2,-16(fp)
   90d48:	10c00017 	ldw	r3,0(r2)
   90d4c:	e0bffd17 	ldw	r2,-12(fp)
   90d50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90d54:	e0bffc17 	ldw	r2,-16(fp)
   90d58:	10800017 	ldw	r2,0(r2)
   90d5c:	e0fffd17 	ldw	r3,-12(fp)
   90d60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90d64:	e0bffc17 	ldw	r2,-16(fp)
   90d68:	e0fffd17 	ldw	r3,-12(fp)
   90d6c:	10c00015 	stw	r3,0(r2)

  return 0;  
   90d70:	0005883a 	mov	r2,zero
}
   90d74:	e037883a 	mov	sp,fp
   90d78:	dfc00117 	ldw	ra,4(sp)
   90d7c:	df000017 	ldw	fp,0(sp)
   90d80:	dec00204 	addi	sp,sp,8
   90d84:	f800283a 	ret

00090d88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   90d88:	defffd04 	addi	sp,sp,-12
   90d8c:	dfc00215 	stw	ra,8(sp)
   90d90:	df000115 	stw	fp,4(sp)
   90d94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90d98:	00800274 	movhi	r2,9
   90d9c:	10875c04 	addi	r2,r2,7536
   90da0:	e0bfff15 	stw	r2,-4(fp)
   90da4:	00000606 	br	90dc0 <_do_ctors+0x38>
        (*ctor) (); 
   90da8:	e0bfff17 	ldw	r2,-4(fp)
   90dac:	10800017 	ldw	r2,0(r2)
   90db0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90db4:	e0bfff17 	ldw	r2,-4(fp)
   90db8:	10bfff04 	addi	r2,r2,-4
   90dbc:	e0bfff15 	stw	r2,-4(fp)
   90dc0:	e0ffff17 	ldw	r3,-4(fp)
   90dc4:	00800274 	movhi	r2,9
   90dc8:	10875d04 	addi	r2,r2,7540
   90dcc:	18bff62e 	bgeu	r3,r2,90da8 <rx_descriptor_end+0xfff90d48>
        (*ctor) (); 
}
   90dd0:	0001883a 	nop
   90dd4:	e037883a 	mov	sp,fp
   90dd8:	dfc00117 	ldw	ra,4(sp)
   90ddc:	df000017 	ldw	fp,0(sp)
   90de0:	dec00204 	addi	sp,sp,8
   90de4:	f800283a 	ret

00090de8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   90de8:	defffd04 	addi	sp,sp,-12
   90dec:	dfc00215 	stw	ra,8(sp)
   90df0:	df000115 	stw	fp,4(sp)
   90df4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90df8:	00800274 	movhi	r2,9
   90dfc:	10875c04 	addi	r2,r2,7536
   90e00:	e0bfff15 	stw	r2,-4(fp)
   90e04:	00000606 	br	90e20 <_do_dtors+0x38>
        (*dtor) (); 
   90e08:	e0bfff17 	ldw	r2,-4(fp)
   90e0c:	10800017 	ldw	r2,0(r2)
   90e10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90e14:	e0bfff17 	ldw	r2,-4(fp)
   90e18:	10bfff04 	addi	r2,r2,-4
   90e1c:	e0bfff15 	stw	r2,-4(fp)
   90e20:	e0ffff17 	ldw	r3,-4(fp)
   90e24:	00800274 	movhi	r2,9
   90e28:	10875d04 	addi	r2,r2,7540
   90e2c:	18bff62e 	bgeu	r3,r2,90e08 <rx_descriptor_end+0xfff90da8>
        (*dtor) (); 
}
   90e30:	0001883a 	nop
   90e34:	e037883a 	mov	sp,fp
   90e38:	dfc00117 	ldw	ra,4(sp)
   90e3c:	df000017 	ldw	fp,0(sp)
   90e40:	dec00204 	addi	sp,sp,8
   90e44:	f800283a 	ret

00090e48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   90e48:	defffa04 	addi	sp,sp,-24
   90e4c:	dfc00515 	stw	ra,20(sp)
   90e50:	df000415 	stw	fp,16(sp)
   90e54:	df000404 	addi	fp,sp,16
   90e58:	e13ffe15 	stw	r4,-8(fp)
   90e5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   90e60:	e0bfff17 	ldw	r2,-4(fp)
   90e64:	10800017 	ldw	r2,0(r2)
   90e68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   90e6c:	e13ffe17 	ldw	r4,-8(fp)
   90e70:	00834000 	call	83400 <strlen>
   90e74:	10800044 	addi	r2,r2,1
   90e78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90e7c:	00000d06 	br	90eb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   90e80:	e0bffc17 	ldw	r2,-16(fp)
   90e84:	10800217 	ldw	r2,8(r2)
   90e88:	e0fffd17 	ldw	r3,-12(fp)
   90e8c:	180d883a 	mov	r6,r3
   90e90:	e17ffe17 	ldw	r5,-8(fp)
   90e94:	1009883a 	mov	r4,r2
   90e98:	0091a2c0 	call	91a2c <memcmp>
   90e9c:	1000021e 	bne	r2,zero,90ea8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   90ea0:	e0bffc17 	ldw	r2,-16(fp)
   90ea4:	00000706 	br	90ec4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90ea8:	e0bffc17 	ldw	r2,-16(fp)
   90eac:	10800017 	ldw	r2,0(r2)
   90eb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90eb4:	e0fffc17 	ldw	r3,-16(fp)
   90eb8:	e0bfff17 	ldw	r2,-4(fp)
   90ebc:	18bff01e 	bne	r3,r2,90e80 <rx_descriptor_end+0xfff90e20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   90ec0:	0005883a 	mov	r2,zero
}
   90ec4:	e037883a 	mov	sp,fp
   90ec8:	dfc00117 	ldw	ra,4(sp)
   90ecc:	df000017 	ldw	fp,0(sp)
   90ed0:	dec00204 	addi	sp,sp,8
   90ed4:	f800283a 	ret

00090ed8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   90ed8:	defffe04 	addi	sp,sp,-8
   90edc:	dfc00115 	stw	ra,4(sp)
   90ee0:	df000015 	stw	fp,0(sp)
   90ee4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   90ee8:	01440004 	movi	r5,4096
   90eec:	0009883a 	mov	r4,zero
   90ef0:	00918b40 	call	918b4 <alt_icache_flush>
#endif
}
   90ef4:	0001883a 	nop
   90ef8:	e037883a 	mov	sp,fp
   90efc:	dfc00117 	ldw	ra,4(sp)
   90f00:	df000017 	ldw	fp,0(sp)
   90f04:	dec00204 	addi	sp,sp,8
   90f08:	f800283a 	ret

00090f0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   90f0c:	defff904 	addi	sp,sp,-28
   90f10:	dfc00615 	stw	ra,24(sp)
   90f14:	df000515 	stw	fp,20(sp)
   90f18:	df000504 	addi	fp,sp,20
   90f1c:	e13ffc15 	stw	r4,-16(fp)
   90f20:	e17ffd15 	stw	r5,-12(fp)
   90f24:	e1bffe15 	stw	r6,-8(fp)
   90f28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   90f2c:	e0800217 	ldw	r2,8(fp)
   90f30:	d8800015 	stw	r2,0(sp)
   90f34:	e1ffff17 	ldw	r7,-4(fp)
   90f38:	e1bffe17 	ldw	r6,-8(fp)
   90f3c:	e17ffd17 	ldw	r5,-12(fp)
   90f40:	e13ffc17 	ldw	r4,-16(fp)
   90f44:	00910bc0 	call	910bc <alt_iic_isr_register>
}  
   90f48:	e037883a 	mov	sp,fp
   90f4c:	dfc00117 	ldw	ra,4(sp)
   90f50:	df000017 	ldw	fp,0(sp)
   90f54:	dec00204 	addi	sp,sp,8
   90f58:	f800283a 	ret

00090f5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   90f5c:	defff904 	addi	sp,sp,-28
   90f60:	df000615 	stw	fp,24(sp)
   90f64:	df000604 	addi	fp,sp,24
   90f68:	e13ffe15 	stw	r4,-8(fp)
   90f6c:	e17fff15 	stw	r5,-4(fp)
   90f70:	e0bfff17 	ldw	r2,-4(fp)
   90f74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90f78:	0005303a 	rdctl	r2,status
   90f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90f80:	e0fffb17 	ldw	r3,-20(fp)
   90f84:	00bfff84 	movi	r2,-2
   90f88:	1884703a 	and	r2,r3,r2
   90f8c:	1001703a 	wrctl	status,r2
  
  return context;
   90f90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90f94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   90f98:	00c00044 	movi	r3,1
   90f9c:	e0bffa17 	ldw	r2,-24(fp)
   90fa0:	1884983a 	sll	r2,r3,r2
   90fa4:	1007883a 	mov	r3,r2
   90fa8:	d0a80117 	ldw	r2,-24572(gp)
   90fac:	1884b03a 	or	r2,r3,r2
   90fb0:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90fb4:	d0a80117 	ldw	r2,-24572(gp)
   90fb8:	100170fa 	wrctl	ienable,r2
   90fbc:	e0bffc17 	ldw	r2,-16(fp)
   90fc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90fc4:	e0bffd17 	ldw	r2,-12(fp)
   90fc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90fcc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   90fd0:	0001883a 	nop
}
   90fd4:	e037883a 	mov	sp,fp
   90fd8:	df000017 	ldw	fp,0(sp)
   90fdc:	dec00104 	addi	sp,sp,4
   90fe0:	f800283a 	ret

00090fe4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   90fe4:	defff904 	addi	sp,sp,-28
   90fe8:	df000615 	stw	fp,24(sp)
   90fec:	df000604 	addi	fp,sp,24
   90ff0:	e13ffe15 	stw	r4,-8(fp)
   90ff4:	e17fff15 	stw	r5,-4(fp)
   90ff8:	e0bfff17 	ldw	r2,-4(fp)
   90ffc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91000:	0005303a 	rdctl	r2,status
   91004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91008:	e0fffb17 	ldw	r3,-20(fp)
   9100c:	00bfff84 	movi	r2,-2
   91010:	1884703a 	and	r2,r3,r2
   91014:	1001703a 	wrctl	status,r2
  
  return context;
   91018:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9101c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   91020:	00c00044 	movi	r3,1
   91024:	e0bffa17 	ldw	r2,-24(fp)
   91028:	1884983a 	sll	r2,r3,r2
   9102c:	0084303a 	nor	r2,zero,r2
   91030:	1007883a 	mov	r3,r2
   91034:	d0a80117 	ldw	r2,-24572(gp)
   91038:	1884703a 	and	r2,r3,r2
   9103c:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91040:	d0a80117 	ldw	r2,-24572(gp)
   91044:	100170fa 	wrctl	ienable,r2
   91048:	e0bffc17 	ldw	r2,-16(fp)
   9104c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91050:	e0bffd17 	ldw	r2,-12(fp)
   91054:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91058:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   9105c:	0001883a 	nop
}
   91060:	e037883a 	mov	sp,fp
   91064:	df000017 	ldw	fp,0(sp)
   91068:	dec00104 	addi	sp,sp,4
   9106c:	f800283a 	ret

00091070 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   91070:	defffc04 	addi	sp,sp,-16
   91074:	df000315 	stw	fp,12(sp)
   91078:	df000304 	addi	fp,sp,12
   9107c:	e13ffe15 	stw	r4,-8(fp)
   91080:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   91084:	000530fa 	rdctl	r2,ienable
   91088:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   9108c:	00c00044 	movi	r3,1
   91090:	e0bfff17 	ldw	r2,-4(fp)
   91094:	1884983a 	sll	r2,r3,r2
   91098:	1007883a 	mov	r3,r2
   9109c:	e0bffd17 	ldw	r2,-12(fp)
   910a0:	1884703a 	and	r2,r3,r2
   910a4:	1004c03a 	cmpne	r2,r2,zero
   910a8:	10803fcc 	andi	r2,r2,255
}
   910ac:	e037883a 	mov	sp,fp
   910b0:	df000017 	ldw	fp,0(sp)
   910b4:	dec00104 	addi	sp,sp,4
   910b8:	f800283a 	ret

000910bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   910bc:	defff504 	addi	sp,sp,-44
   910c0:	dfc00a15 	stw	ra,40(sp)
   910c4:	df000915 	stw	fp,36(sp)
   910c8:	df000904 	addi	fp,sp,36
   910cc:	e13ffc15 	stw	r4,-16(fp)
   910d0:	e17ffd15 	stw	r5,-12(fp)
   910d4:	e1bffe15 	stw	r6,-8(fp)
   910d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   910dc:	00bffa84 	movi	r2,-22
   910e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   910e4:	e0bffd17 	ldw	r2,-12(fp)
   910e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   910ec:	e0bff817 	ldw	r2,-32(fp)
   910f0:	10800808 	cmpgei	r2,r2,32
   910f4:	1000271e 	bne	r2,zero,91194 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   910f8:	0005303a 	rdctl	r2,status
   910fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91100:	e0fffb17 	ldw	r3,-20(fp)
   91104:	00bfff84 	movi	r2,-2
   91108:	1884703a 	and	r2,r3,r2
   9110c:	1001703a 	wrctl	status,r2
  
  return context;
   91110:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   91114:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   91118:	00800274 	movhi	r2,9
   9111c:	109a4a04 	addi	r2,r2,26920
   91120:	e0fff817 	ldw	r3,-32(fp)
   91124:	180690fa 	slli	r3,r3,3
   91128:	10c5883a 	add	r2,r2,r3
   9112c:	e0fffe17 	ldw	r3,-8(fp)
   91130:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   91134:	00800274 	movhi	r2,9
   91138:	109a4a04 	addi	r2,r2,26920
   9113c:	e0fff817 	ldw	r3,-32(fp)
   91140:	180690fa 	slli	r3,r3,3
   91144:	10c5883a 	add	r2,r2,r3
   91148:	10800104 	addi	r2,r2,4
   9114c:	e0ffff17 	ldw	r3,-4(fp)
   91150:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   91154:	e0bffe17 	ldw	r2,-8(fp)
   91158:	10000526 	beq	r2,zero,91170 <alt_iic_isr_register+0xb4>
   9115c:	e0bff817 	ldw	r2,-32(fp)
   91160:	100b883a 	mov	r5,r2
   91164:	e13ffc17 	ldw	r4,-16(fp)
   91168:	0090f5c0 	call	90f5c <alt_ic_irq_enable>
   9116c:	00000406 	br	91180 <alt_iic_isr_register+0xc4>
   91170:	e0bff817 	ldw	r2,-32(fp)
   91174:	100b883a 	mov	r5,r2
   91178:	e13ffc17 	ldw	r4,-16(fp)
   9117c:	0090fe40 	call	90fe4 <alt_ic_irq_disable>
   91180:	e0bff715 	stw	r2,-36(fp)
   91184:	e0bffa17 	ldw	r2,-24(fp)
   91188:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9118c:	e0bff917 	ldw	r2,-28(fp)
   91190:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   91194:	e0bff717 	ldw	r2,-36(fp)
}
   91198:	e037883a 	mov	sp,fp
   9119c:	dfc00117 	ldw	ra,4(sp)
   911a0:	df000017 	ldw	fp,0(sp)
   911a4:	dec00204 	addi	sp,sp,8
   911a8:	f800283a 	ret

000911ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   911ac:	defff904 	addi	sp,sp,-28
   911b0:	dfc00615 	stw	ra,24(sp)
   911b4:	df000515 	stw	fp,20(sp)
   911b8:	df000504 	addi	fp,sp,20
   911bc:	e13ffc15 	stw	r4,-16(fp)
   911c0:	e17ffd15 	stw	r5,-12(fp)
   911c4:	e1bffe15 	stw	r6,-8(fp)
   911c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   911cc:	e1bfff17 	ldw	r6,-4(fp)
   911d0:	e17ffe17 	ldw	r5,-8(fp)
   911d4:	e13ffd17 	ldw	r4,-12(fp)
   911d8:	00913ec0 	call	913ec <open>
   911dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   911e0:	e0bffb17 	ldw	r2,-20(fp)
   911e4:	10001c16 	blt	r2,zero,91258 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   911e8:	00800274 	movhi	r2,9
   911ec:	108cab04 	addi	r2,r2,12972
   911f0:	e0fffb17 	ldw	r3,-20(fp)
   911f4:	18c00324 	muli	r3,r3,12
   911f8:	10c5883a 	add	r2,r2,r3
   911fc:	10c00017 	ldw	r3,0(r2)
   91200:	e0bffc17 	ldw	r2,-16(fp)
   91204:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   91208:	00800274 	movhi	r2,9
   9120c:	108cab04 	addi	r2,r2,12972
   91210:	e0fffb17 	ldw	r3,-20(fp)
   91214:	18c00324 	muli	r3,r3,12
   91218:	10c5883a 	add	r2,r2,r3
   9121c:	10800104 	addi	r2,r2,4
   91220:	10c00017 	ldw	r3,0(r2)
   91224:	e0bffc17 	ldw	r2,-16(fp)
   91228:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   9122c:	00800274 	movhi	r2,9
   91230:	108cab04 	addi	r2,r2,12972
   91234:	e0fffb17 	ldw	r3,-20(fp)
   91238:	18c00324 	muli	r3,r3,12
   9123c:	10c5883a 	add	r2,r2,r3
   91240:	10800204 	addi	r2,r2,8
   91244:	10c00017 	ldw	r3,0(r2)
   91248:	e0bffc17 	ldw	r2,-16(fp)
   9124c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   91250:	e13ffb17 	ldw	r4,-20(fp)
   91254:	008eed00 	call	8eed0 <alt_release_fd>
  }
} 
   91258:	0001883a 	nop
   9125c:	e037883a 	mov	sp,fp
   91260:	dfc00117 	ldw	ra,4(sp)
   91264:	df000017 	ldw	fp,0(sp)
   91268:	dec00204 	addi	sp,sp,8
   9126c:	f800283a 	ret

00091270 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   91270:	defffb04 	addi	sp,sp,-20
   91274:	dfc00415 	stw	ra,16(sp)
   91278:	df000315 	stw	fp,12(sp)
   9127c:	df000304 	addi	fp,sp,12
   91280:	e13ffd15 	stw	r4,-12(fp)
   91284:	e17ffe15 	stw	r5,-8(fp)
   91288:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9128c:	01c07fc4 	movi	r7,511
   91290:	01800044 	movi	r6,1
   91294:	e17ffd17 	ldw	r5,-12(fp)
   91298:	01000274 	movhi	r4,9
   9129c:	210cae04 	addi	r4,r4,12984
   912a0:	00911ac0 	call	911ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   912a4:	01c07fc4 	movi	r7,511
   912a8:	000d883a 	mov	r6,zero
   912ac:	e17ffe17 	ldw	r5,-8(fp)
   912b0:	01000274 	movhi	r4,9
   912b4:	210cab04 	addi	r4,r4,12972
   912b8:	00911ac0 	call	911ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   912bc:	01c07fc4 	movi	r7,511
   912c0:	01800044 	movi	r6,1
   912c4:	e17fff17 	ldw	r5,-4(fp)
   912c8:	01000274 	movhi	r4,9
   912cc:	210cb104 	addi	r4,r4,12996
   912d0:	00911ac0 	call	911ac <alt_open_fd>
}  
   912d4:	0001883a 	nop
   912d8:	e037883a 	mov	sp,fp
   912dc:	dfc00117 	ldw	ra,4(sp)
   912e0:	df000017 	ldw	fp,0(sp)
   912e4:	dec00204 	addi	sp,sp,8
   912e8:	f800283a 	ret

000912ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   912ec:	defffe04 	addi	sp,sp,-8
   912f0:	dfc00115 	stw	ra,4(sp)
   912f4:	df000015 	stw	fp,0(sp)
   912f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   912fc:	d0a00c17 	ldw	r2,-32720(gp)
   91300:	10000326 	beq	r2,zero,91310 <alt_get_errno+0x24>
   91304:	d0a00c17 	ldw	r2,-32720(gp)
   91308:	103ee83a 	callr	r2
   9130c:	00000106 	br	91314 <alt_get_errno+0x28>
   91310:	d0a7fa04 	addi	r2,gp,-24600
}
   91314:	e037883a 	mov	sp,fp
   91318:	dfc00117 	ldw	ra,4(sp)
   9131c:	df000017 	ldw	fp,0(sp)
   91320:	dec00204 	addi	sp,sp,8
   91324:	f800283a 	ret

00091328 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   91328:	defffd04 	addi	sp,sp,-12
   9132c:	df000215 	stw	fp,8(sp)
   91330:	df000204 	addi	fp,sp,8
   91334:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   91338:	e0bfff17 	ldw	r2,-4(fp)
   9133c:	10800217 	ldw	r2,8(r2)
   91340:	10d00034 	orhi	r3,r2,16384
   91344:	e0bfff17 	ldw	r2,-4(fp)
   91348:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9134c:	e03ffe15 	stw	zero,-8(fp)
   91350:	00001d06 	br	913c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91354:	00800274 	movhi	r2,9
   91358:	108cab04 	addi	r2,r2,12972
   9135c:	e0fffe17 	ldw	r3,-8(fp)
   91360:	18c00324 	muli	r3,r3,12
   91364:	10c5883a 	add	r2,r2,r3
   91368:	10c00017 	ldw	r3,0(r2)
   9136c:	e0bfff17 	ldw	r2,-4(fp)
   91370:	10800017 	ldw	r2,0(r2)
   91374:	1880111e 	bne	r3,r2,913bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   91378:	00800274 	movhi	r2,9
   9137c:	108cab04 	addi	r2,r2,12972
   91380:	e0fffe17 	ldw	r3,-8(fp)
   91384:	18c00324 	muli	r3,r3,12
   91388:	10c5883a 	add	r2,r2,r3
   9138c:	10800204 	addi	r2,r2,8
   91390:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   91394:	1000090e 	bge	r2,zero,913bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   91398:	e0bffe17 	ldw	r2,-8(fp)
   9139c:	10c00324 	muli	r3,r2,12
   913a0:	00800274 	movhi	r2,9
   913a4:	108cab04 	addi	r2,r2,12972
   913a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   913ac:	e0bfff17 	ldw	r2,-4(fp)
   913b0:	18800226 	beq	r3,r2,913bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   913b4:	00bffcc4 	movi	r2,-13
   913b8:	00000806 	br	913dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   913bc:	e0bffe17 	ldw	r2,-8(fp)
   913c0:	10800044 	addi	r2,r2,1
   913c4:	e0bffe15 	stw	r2,-8(fp)
   913c8:	d0a00b17 	ldw	r2,-32724(gp)
   913cc:	1007883a 	mov	r3,r2
   913d0:	e0bffe17 	ldw	r2,-8(fp)
   913d4:	18bfdf2e 	bgeu	r3,r2,91354 <rx_descriptor_end+0xfff912f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   913d8:	0005883a 	mov	r2,zero
}
   913dc:	e037883a 	mov	sp,fp
   913e0:	df000017 	ldw	fp,0(sp)
   913e4:	dec00104 	addi	sp,sp,4
   913e8:	f800283a 	ret

000913ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   913ec:	defff604 	addi	sp,sp,-40
   913f0:	dfc00915 	stw	ra,36(sp)
   913f4:	df000815 	stw	fp,32(sp)
   913f8:	df000804 	addi	fp,sp,32
   913fc:	e13ffd15 	stw	r4,-12(fp)
   91400:	e17ffe15 	stw	r5,-8(fp)
   91404:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   91408:	00bfffc4 	movi	r2,-1
   9140c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   91410:	00bffb44 	movi	r2,-19
   91414:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   91418:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9141c:	d1600904 	addi	r5,gp,-32732
   91420:	e13ffd17 	ldw	r4,-12(fp)
   91424:	0090e480 	call	90e48 <alt_find_dev>
   91428:	e0bff815 	stw	r2,-32(fp)
   9142c:	e0bff817 	ldw	r2,-32(fp)
   91430:	1000051e 	bne	r2,zero,91448 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   91434:	e13ffd17 	ldw	r4,-12(fp)
   91438:	00917080 	call	91708 <alt_find_file>
   9143c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   91440:	00800044 	movi	r2,1
   91444:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   91448:	e0bff817 	ldw	r2,-32(fp)
   9144c:	10002926 	beq	r2,zero,914f4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   91450:	e13ff817 	ldw	r4,-32(fp)
   91454:	00918100 	call	91810 <alt_get_fd>
   91458:	e0bff915 	stw	r2,-28(fp)
   9145c:	e0bff917 	ldw	r2,-28(fp)
   91460:	1000030e 	bge	r2,zero,91470 <open+0x84>
    {
      status = index;
   91464:	e0bff917 	ldw	r2,-28(fp)
   91468:	e0bffa15 	stw	r2,-24(fp)
   9146c:	00002306 	br	914fc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   91470:	e0bff917 	ldw	r2,-28(fp)
   91474:	10c00324 	muli	r3,r2,12
   91478:	00800274 	movhi	r2,9
   9147c:	108cab04 	addi	r2,r2,12972
   91480:	1885883a 	add	r2,r3,r2
   91484:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   91488:	e0fffe17 	ldw	r3,-8(fp)
   9148c:	00900034 	movhi	r2,16384
   91490:	10bfffc4 	addi	r2,r2,-1
   91494:	1886703a 	and	r3,r3,r2
   91498:	e0bffc17 	ldw	r2,-16(fp)
   9149c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   914a0:	e0bffb17 	ldw	r2,-20(fp)
   914a4:	1000051e 	bne	r2,zero,914bc <open+0xd0>
   914a8:	e13ffc17 	ldw	r4,-16(fp)
   914ac:	00913280 	call	91328 <alt_file_locked>
   914b0:	e0bffa15 	stw	r2,-24(fp)
   914b4:	e0bffa17 	ldw	r2,-24(fp)
   914b8:	10001016 	blt	r2,zero,914fc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   914bc:	e0bff817 	ldw	r2,-32(fp)
   914c0:	10800317 	ldw	r2,12(r2)
   914c4:	10000826 	beq	r2,zero,914e8 <open+0xfc>
   914c8:	e0bff817 	ldw	r2,-32(fp)
   914cc:	10800317 	ldw	r2,12(r2)
   914d0:	e1ffff17 	ldw	r7,-4(fp)
   914d4:	e1bffe17 	ldw	r6,-8(fp)
   914d8:	e17ffd17 	ldw	r5,-12(fp)
   914dc:	e13ffc17 	ldw	r4,-16(fp)
   914e0:	103ee83a 	callr	r2
   914e4:	00000106 	br	914ec <open+0x100>
   914e8:	0005883a 	mov	r2,zero
   914ec:	e0bffa15 	stw	r2,-24(fp)
   914f0:	00000206 	br	914fc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   914f4:	00bffb44 	movi	r2,-19
   914f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   914fc:	e0bffa17 	ldw	r2,-24(fp)
   91500:	1000090e 	bge	r2,zero,91528 <open+0x13c>
  {
    alt_release_fd (index);  
   91504:	e13ff917 	ldw	r4,-28(fp)
   91508:	008eed00 	call	8eed0 <alt_release_fd>
    ALT_ERRNO = -status;
   9150c:	00912ec0 	call	912ec <alt_get_errno>
   91510:	1007883a 	mov	r3,r2
   91514:	e0bffa17 	ldw	r2,-24(fp)
   91518:	0085c83a 	sub	r2,zero,r2
   9151c:	18800015 	stw	r2,0(r3)
    return -1;
   91520:	00bfffc4 	movi	r2,-1
   91524:	00000106 	br	9152c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   91528:	e0bff917 	ldw	r2,-28(fp)
}
   9152c:	e037883a 	mov	sp,fp
   91530:	dfc00117 	ldw	ra,4(sp)
   91534:	df000017 	ldw	fp,0(sp)
   91538:	dec00204 	addi	sp,sp,8
   9153c:	f800283a 	ret

00091540 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   91540:	defffa04 	addi	sp,sp,-24
   91544:	df000515 	stw	fp,20(sp)
   91548:	df000504 	addi	fp,sp,20
   9154c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91550:	0005303a 	rdctl	r2,status
   91554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91558:	e0fffc17 	ldw	r3,-16(fp)
   9155c:	00bfff84 	movi	r2,-2
   91560:	1884703a 	and	r2,r3,r2
   91564:	1001703a 	wrctl	status,r2
  
  return context;
   91568:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   9156c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   91570:	e0bfff17 	ldw	r2,-4(fp)
   91574:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   91578:	e0bffd17 	ldw	r2,-12(fp)
   9157c:	10800017 	ldw	r2,0(r2)
   91580:	e0fffd17 	ldw	r3,-12(fp)
   91584:	18c00117 	ldw	r3,4(r3)
   91588:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   9158c:	e0bffd17 	ldw	r2,-12(fp)
   91590:	10800117 	ldw	r2,4(r2)
   91594:	e0fffd17 	ldw	r3,-12(fp)
   91598:	18c00017 	ldw	r3,0(r3)
   9159c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   915a0:	e0bffd17 	ldw	r2,-12(fp)
   915a4:	e0fffd17 	ldw	r3,-12(fp)
   915a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   915ac:	e0bffd17 	ldw	r2,-12(fp)
   915b0:	e0fffd17 	ldw	r3,-12(fp)
   915b4:	10c00015 	stw	r3,0(r2)
   915b8:	e0bffb17 	ldw	r2,-20(fp)
   915bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   915c0:	e0bffe17 	ldw	r2,-8(fp)
   915c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   915c8:	0001883a 	nop
   915cc:	e037883a 	mov	sp,fp
   915d0:	df000017 	ldw	fp,0(sp)
   915d4:	dec00104 	addi	sp,sp,4
   915d8:	f800283a 	ret

000915dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   915dc:	defffb04 	addi	sp,sp,-20
   915e0:	dfc00415 	stw	ra,16(sp)
   915e4:	df000315 	stw	fp,12(sp)
   915e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   915ec:	d0a01117 	ldw	r2,-32700(gp)
   915f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   915f4:	d0a80317 	ldw	r2,-24564(gp)
   915f8:	10800044 	addi	r2,r2,1
   915fc:	d0a80315 	stw	r2,-24564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91600:	00002e06 	br	916bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   91604:	e0bffd17 	ldw	r2,-12(fp)
   91608:	10800017 	ldw	r2,0(r2)
   9160c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   91610:	e0bffd17 	ldw	r2,-12(fp)
   91614:	10800403 	ldbu	r2,16(r2)
   91618:	10803fcc 	andi	r2,r2,255
   9161c:	10000426 	beq	r2,zero,91630 <alt_tick+0x54>
   91620:	d0a80317 	ldw	r2,-24564(gp)
   91624:	1000021e 	bne	r2,zero,91630 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   91628:	e0bffd17 	ldw	r2,-12(fp)
   9162c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   91630:	e0bffd17 	ldw	r2,-12(fp)
   91634:	10800217 	ldw	r2,8(r2)
   91638:	d0e80317 	ldw	r3,-24564(gp)
   9163c:	18801d36 	bltu	r3,r2,916b4 <alt_tick+0xd8>
   91640:	e0bffd17 	ldw	r2,-12(fp)
   91644:	10800403 	ldbu	r2,16(r2)
   91648:	10803fcc 	andi	r2,r2,255
   9164c:	1000191e 	bne	r2,zero,916b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   91650:	e0bffd17 	ldw	r2,-12(fp)
   91654:	10800317 	ldw	r2,12(r2)
   91658:	e0fffd17 	ldw	r3,-12(fp)
   9165c:	18c00517 	ldw	r3,20(r3)
   91660:	1809883a 	mov	r4,r3
   91664:	103ee83a 	callr	r2
   91668:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   9166c:	e0bfff17 	ldw	r2,-4(fp)
   91670:	1000031e 	bne	r2,zero,91680 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   91674:	e13ffd17 	ldw	r4,-12(fp)
   91678:	00915400 	call	91540 <alt_alarm_stop>
   9167c:	00000d06 	br	916b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   91680:	e0bffd17 	ldw	r2,-12(fp)
   91684:	10c00217 	ldw	r3,8(r2)
   91688:	e0bfff17 	ldw	r2,-4(fp)
   9168c:	1887883a 	add	r3,r3,r2
   91690:	e0bffd17 	ldw	r2,-12(fp)
   91694:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   91698:	e0bffd17 	ldw	r2,-12(fp)
   9169c:	10c00217 	ldw	r3,8(r2)
   916a0:	d0a80317 	ldw	r2,-24564(gp)
   916a4:	1880032e 	bgeu	r3,r2,916b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   916a8:	e0bffd17 	ldw	r2,-12(fp)
   916ac:	00c00044 	movi	r3,1
   916b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   916b4:	e0bffe17 	ldw	r2,-8(fp)
   916b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   916bc:	e0fffd17 	ldw	r3,-12(fp)
   916c0:	d0a01104 	addi	r2,gp,-32700
   916c4:	18bfcf1e 	bne	r3,r2,91604 <rx_descriptor_end+0xfff915a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   916c8:	0001883a 	nop
}
   916cc:	0001883a 	nop
   916d0:	e037883a 	mov	sp,fp
   916d4:	dfc00117 	ldw	ra,4(sp)
   916d8:	df000017 	ldw	fp,0(sp)
   916dc:	dec00204 	addi	sp,sp,8
   916e0:	f800283a 	ret

000916e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   916e4:	deffff04 	addi	sp,sp,-4
   916e8:	df000015 	stw	fp,0(sp)
   916ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   916f0:	000170fa 	wrctl	ienable,zero
}
   916f4:	0001883a 	nop
   916f8:	e037883a 	mov	sp,fp
   916fc:	df000017 	ldw	fp,0(sp)
   91700:	dec00104 	addi	sp,sp,4
   91704:	f800283a 	ret

00091708 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   91708:	defffb04 	addi	sp,sp,-20
   9170c:	dfc00415 	stw	ra,16(sp)
   91710:	df000315 	stw	fp,12(sp)
   91714:	df000304 	addi	fp,sp,12
   91718:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9171c:	d0a00717 	ldw	r2,-32740(gp)
   91720:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   91724:	00003106 	br	917ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   91728:	e0bffd17 	ldw	r2,-12(fp)
   9172c:	10800217 	ldw	r2,8(r2)
   91730:	1009883a 	mov	r4,r2
   91734:	00834000 	call	83400 <strlen>
   91738:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   9173c:	e0bffd17 	ldw	r2,-12(fp)
   91740:	10c00217 	ldw	r3,8(r2)
   91744:	e0bffe17 	ldw	r2,-8(fp)
   91748:	10bfffc4 	addi	r2,r2,-1
   9174c:	1885883a 	add	r2,r3,r2
   91750:	10800003 	ldbu	r2,0(r2)
   91754:	10803fcc 	andi	r2,r2,255
   91758:	1080201c 	xori	r2,r2,128
   9175c:	10bfe004 	addi	r2,r2,-128
   91760:	10800bd8 	cmpnei	r2,r2,47
   91764:	1000031e 	bne	r2,zero,91774 <alt_find_file+0x6c>
    {
      len -= 1;
   91768:	e0bffe17 	ldw	r2,-8(fp)
   9176c:	10bfffc4 	addi	r2,r2,-1
   91770:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   91774:	e0bffe17 	ldw	r2,-8(fp)
   91778:	e0ffff17 	ldw	r3,-4(fp)
   9177c:	1885883a 	add	r2,r3,r2
   91780:	10800003 	ldbu	r2,0(r2)
   91784:	10803fcc 	andi	r2,r2,255
   91788:	1080201c 	xori	r2,r2,128
   9178c:	10bfe004 	addi	r2,r2,-128
   91790:	10800be0 	cmpeqi	r2,r2,47
   91794:	1000081e 	bne	r2,zero,917b8 <alt_find_file+0xb0>
   91798:	e0bffe17 	ldw	r2,-8(fp)
   9179c:	e0ffff17 	ldw	r3,-4(fp)
   917a0:	1885883a 	add	r2,r3,r2
   917a4:	10800003 	ldbu	r2,0(r2)
   917a8:	10803fcc 	andi	r2,r2,255
   917ac:	1080201c 	xori	r2,r2,128
   917b0:	10bfe004 	addi	r2,r2,-128
   917b4:	10000a1e 	bne	r2,zero,917e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   917b8:	e0bffd17 	ldw	r2,-12(fp)
   917bc:	10800217 	ldw	r2,8(r2)
   917c0:	e0fffe17 	ldw	r3,-8(fp)
   917c4:	180d883a 	mov	r6,r3
   917c8:	e17fff17 	ldw	r5,-4(fp)
   917cc:	1009883a 	mov	r4,r2
   917d0:	0091a2c0 	call	91a2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   917d4:	1000021e 	bne	r2,zero,917e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   917d8:	e0bffd17 	ldw	r2,-12(fp)
   917dc:	00000706 	br	917fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   917e0:	e0bffd17 	ldw	r2,-12(fp)
   917e4:	10800017 	ldw	r2,0(r2)
   917e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   917ec:	e0fffd17 	ldw	r3,-12(fp)
   917f0:	d0a00704 	addi	r2,gp,-32740
   917f4:	18bfcc1e 	bne	r3,r2,91728 <rx_descriptor_end+0xfff916c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   917f8:	0005883a 	mov	r2,zero
}
   917fc:	e037883a 	mov	sp,fp
   91800:	dfc00117 	ldw	ra,4(sp)
   91804:	df000017 	ldw	fp,0(sp)
   91808:	dec00204 	addi	sp,sp,8
   9180c:	f800283a 	ret

00091810 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   91810:	defffc04 	addi	sp,sp,-16
   91814:	df000315 	stw	fp,12(sp)
   91818:	df000304 	addi	fp,sp,12
   9181c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   91820:	00bffa04 	movi	r2,-24
   91824:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   91828:	e03ffd15 	stw	zero,-12(fp)
   9182c:	00001906 	br	91894 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   91830:	00800274 	movhi	r2,9
   91834:	108cab04 	addi	r2,r2,12972
   91838:	e0fffd17 	ldw	r3,-12(fp)
   9183c:	18c00324 	muli	r3,r3,12
   91840:	10c5883a 	add	r2,r2,r3
   91844:	10800017 	ldw	r2,0(r2)
   91848:	10000f1e 	bne	r2,zero,91888 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   9184c:	00800274 	movhi	r2,9
   91850:	108cab04 	addi	r2,r2,12972
   91854:	e0fffd17 	ldw	r3,-12(fp)
   91858:	18c00324 	muli	r3,r3,12
   9185c:	10c5883a 	add	r2,r2,r3
   91860:	e0ffff17 	ldw	r3,-4(fp)
   91864:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   91868:	d0e00b17 	ldw	r3,-32724(gp)
   9186c:	e0bffd17 	ldw	r2,-12(fp)
   91870:	1880020e 	bge	r3,r2,9187c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   91874:	e0bffd17 	ldw	r2,-12(fp)
   91878:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   9187c:	e0bffd17 	ldw	r2,-12(fp)
   91880:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   91884:	00000606 	br	918a0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   91888:	e0bffd17 	ldw	r2,-12(fp)
   9188c:	10800044 	addi	r2,r2,1
   91890:	e0bffd15 	stw	r2,-12(fp)
   91894:	e0bffd17 	ldw	r2,-12(fp)
   91898:	10800810 	cmplti	r2,r2,32
   9189c:	103fe41e 	bne	r2,zero,91830 <rx_descriptor_end+0xfff917d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   918a0:	e0bffe17 	ldw	r2,-8(fp)
}
   918a4:	e037883a 	mov	sp,fp
   918a8:	df000017 	ldw	fp,0(sp)
   918ac:	dec00104 	addi	sp,sp,4
   918b0:	f800283a 	ret

000918b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   918b4:	defffb04 	addi	sp,sp,-20
   918b8:	df000415 	stw	fp,16(sp)
   918bc:	df000404 	addi	fp,sp,16
   918c0:	e13ffe15 	stw	r4,-8(fp)
   918c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   918c8:	e0bfff17 	ldw	r2,-4(fp)
   918cc:	10840070 	cmpltui	r2,r2,4097
   918d0:	1000021e 	bne	r2,zero,918dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   918d4:	00840004 	movi	r2,4096
   918d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   918dc:	e0fffe17 	ldw	r3,-8(fp)
   918e0:	e0bfff17 	ldw	r2,-4(fp)
   918e4:	1885883a 	add	r2,r3,r2
   918e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   918ec:	e0bffe17 	ldw	r2,-8(fp)
   918f0:	e0bffc15 	stw	r2,-16(fp)
   918f4:	00000506 	br	9190c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   918f8:	e0bffc17 	ldw	r2,-16(fp)
   918fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   91900:	e0bffc17 	ldw	r2,-16(fp)
   91904:	10800804 	addi	r2,r2,32
   91908:	e0bffc15 	stw	r2,-16(fp)
   9190c:	e0fffc17 	ldw	r3,-16(fp)
   91910:	e0bffd17 	ldw	r2,-12(fp)
   91914:	18bff836 	bltu	r3,r2,918f8 <rx_descriptor_end+0xfff91898>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   91918:	e0bffe17 	ldw	r2,-8(fp)
   9191c:	108007cc 	andi	r2,r2,31
   91920:	10000226 	beq	r2,zero,9192c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   91924:	e0bffc17 	ldw	r2,-16(fp)
   91928:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   9192c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   91930:	0001883a 	nop
   91934:	e037883a 	mov	sp,fp
   91938:	df000017 	ldw	fp,0(sp)
   9193c:	dec00104 	addi	sp,sp,4
   91940:	f800283a 	ret

00091944 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   91944:	defffe04 	addi	sp,sp,-8
   91948:	df000115 	stw	fp,4(sp)
   9194c:	df000104 	addi	fp,sp,4
   91950:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   91954:	e0bfff17 	ldw	r2,-4(fp)
   91958:	10bffe84 	addi	r2,r2,-6
   9195c:	10c00428 	cmpgeui	r3,r2,16
   91960:	18001a1e 	bne	r3,zero,919cc <alt_exception_cause_generated_bad_addr+0x88>
   91964:	100690ba 	slli	r3,r2,2
   91968:	00800274 	movhi	r2,9
   9196c:	10865f04 	addi	r2,r2,6524
   91970:	1885883a 	add	r2,r3,r2
   91974:	10800017 	ldw	r2,0(r2)
   91978:	1000683a 	jmp	r2
   9197c:	000919bc 	xorhi	zero,zero,9318
   91980:	000919bc 	xorhi	zero,zero,9318
   91984:	000919cc 	andi	zero,zero,9319
   91988:	000919cc 	andi	zero,zero,9319
   9198c:	000919cc 	andi	zero,zero,9319
   91990:	000919bc 	xorhi	zero,zero,9318
   91994:	000919c4 	movi	zero,9319
   91998:	000919cc 	andi	zero,zero,9319
   9199c:	000919bc 	xorhi	zero,zero,9318
   919a0:	000919bc 	xorhi	zero,zero,9318
   919a4:	000919cc 	andi	zero,zero,9319
   919a8:	000919bc 	xorhi	zero,zero,9318
   919ac:	000919c4 	movi	zero,9319
   919b0:	000919cc 	andi	zero,zero,9319
   919b4:	000919cc 	andi	zero,zero,9319
   919b8:	000919bc 	xorhi	zero,zero,9318
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   919bc:	00800044 	movi	r2,1
   919c0:	00000306 	br	919d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   919c4:	0005883a 	mov	r2,zero
   919c8:	00000106 	br	919d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   919cc:	0005883a 	mov	r2,zero
  }
}
   919d0:	e037883a 	mov	sp,fp
   919d4:	df000017 	ldw	fp,0(sp)
   919d8:	dec00104 	addi	sp,sp,4
   919dc:	f800283a 	ret

000919e0 <atexit>:
   919e0:	200b883a 	mov	r5,r4
   919e4:	000f883a 	mov	r7,zero
   919e8:	000d883a 	mov	r6,zero
   919ec:	0009883a 	mov	r4,zero
   919f0:	0091aa81 	jmpi	91aa8 <__register_exitproc>

000919f4 <exit>:
   919f4:	defffe04 	addi	sp,sp,-8
   919f8:	000b883a 	mov	r5,zero
   919fc:	dc000015 	stw	r16,0(sp)
   91a00:	dfc00115 	stw	ra,4(sp)
   91a04:	2021883a 	mov	r16,r4
   91a08:	0091bc00 	call	91bc0 <__call_exitprocs>
   91a0c:	00800274 	movhi	r2,9
   91a10:	10913c04 	addi	r2,r2,17648
   91a14:	11000017 	ldw	r4,0(r2)
   91a18:	20800f17 	ldw	r2,60(r4)
   91a1c:	10000126 	beq	r2,zero,91a24 <exit+0x30>
   91a20:	103ee83a 	callr	r2
   91a24:	8009883a 	mov	r4,r16
   91a28:	0091d400 	call	91d40 <_exit>

00091a2c <memcmp>:
   91a2c:	01c000c4 	movi	r7,3
   91a30:	3980192e 	bgeu	r7,r6,91a98 <memcmp+0x6c>
   91a34:	2144b03a 	or	r2,r4,r5
   91a38:	11c4703a 	and	r2,r2,r7
   91a3c:	10000f26 	beq	r2,zero,91a7c <memcmp+0x50>
   91a40:	20800003 	ldbu	r2,0(r4)
   91a44:	28c00003 	ldbu	r3,0(r5)
   91a48:	10c0151e 	bne	r2,r3,91aa0 <memcmp+0x74>
   91a4c:	31bfff84 	addi	r6,r6,-2
   91a50:	01ffffc4 	movi	r7,-1
   91a54:	00000406 	br	91a68 <memcmp+0x3c>
   91a58:	20800003 	ldbu	r2,0(r4)
   91a5c:	28c00003 	ldbu	r3,0(r5)
   91a60:	31bfffc4 	addi	r6,r6,-1
   91a64:	10c00e1e 	bne	r2,r3,91aa0 <memcmp+0x74>
   91a68:	21000044 	addi	r4,r4,1
   91a6c:	29400044 	addi	r5,r5,1
   91a70:	31fff91e 	bne	r6,r7,91a58 <rx_descriptor_end+0xfff919f8>
   91a74:	0005883a 	mov	r2,zero
   91a78:	f800283a 	ret
   91a7c:	20c00017 	ldw	r3,0(r4)
   91a80:	28800017 	ldw	r2,0(r5)
   91a84:	18bfee1e 	bne	r3,r2,91a40 <rx_descriptor_end+0xfff919e0>
   91a88:	31bfff04 	addi	r6,r6,-4
   91a8c:	21000104 	addi	r4,r4,4
   91a90:	29400104 	addi	r5,r5,4
   91a94:	39bff936 	bltu	r7,r6,91a7c <rx_descriptor_end+0xfff91a1c>
   91a98:	303fe91e 	bne	r6,zero,91a40 <rx_descriptor_end+0xfff919e0>
   91a9c:	003ff506 	br	91a74 <rx_descriptor_end+0xfff91a14>
   91aa0:	10c5c83a 	sub	r2,r2,r3
   91aa4:	f800283a 	ret

00091aa8 <__register_exitproc>:
   91aa8:	defffa04 	addi	sp,sp,-24
   91aac:	dc000315 	stw	r16,12(sp)
   91ab0:	04000274 	movhi	r16,9
   91ab4:	84113c04 	addi	r16,r16,17648
   91ab8:	80c00017 	ldw	r3,0(r16)
   91abc:	dc400415 	stw	r17,16(sp)
   91ac0:	dfc00515 	stw	ra,20(sp)
   91ac4:	18805217 	ldw	r2,328(r3)
   91ac8:	2023883a 	mov	r17,r4
   91acc:	10003726 	beq	r2,zero,91bac <__register_exitproc+0x104>
   91ad0:	10c00117 	ldw	r3,4(r2)
   91ad4:	010007c4 	movi	r4,31
   91ad8:	20c00e16 	blt	r4,r3,91b14 <__register_exitproc+0x6c>
   91adc:	1a000044 	addi	r8,r3,1
   91ae0:	8800221e 	bne	r17,zero,91b6c <__register_exitproc+0xc4>
   91ae4:	18c00084 	addi	r3,r3,2
   91ae8:	18c7883a 	add	r3,r3,r3
   91aec:	18c7883a 	add	r3,r3,r3
   91af0:	12000115 	stw	r8,4(r2)
   91af4:	10c7883a 	add	r3,r2,r3
   91af8:	19400015 	stw	r5,0(r3)
   91afc:	0005883a 	mov	r2,zero
   91b00:	dfc00517 	ldw	ra,20(sp)
   91b04:	dc400417 	ldw	r17,16(sp)
   91b08:	dc000317 	ldw	r16,12(sp)
   91b0c:	dec00604 	addi	sp,sp,24
   91b10:	f800283a 	ret
   91b14:	00800234 	movhi	r2,8
   91b18:	10899604 	addi	r2,r2,9816
   91b1c:	10002626 	beq	r2,zero,91bb8 <__register_exitproc+0x110>
   91b20:	01006404 	movi	r4,400
   91b24:	d9400015 	stw	r5,0(sp)
   91b28:	d9800115 	stw	r6,4(sp)
   91b2c:	d9c00215 	stw	r7,8(sp)
   91b30:	00826580 	call	82658 <malloc>
   91b34:	d9400017 	ldw	r5,0(sp)
   91b38:	d9800117 	ldw	r6,4(sp)
   91b3c:	d9c00217 	ldw	r7,8(sp)
   91b40:	10001d26 	beq	r2,zero,91bb8 <__register_exitproc+0x110>
   91b44:	81000017 	ldw	r4,0(r16)
   91b48:	10000115 	stw	zero,4(r2)
   91b4c:	02000044 	movi	r8,1
   91b50:	22405217 	ldw	r9,328(r4)
   91b54:	0007883a 	mov	r3,zero
   91b58:	12400015 	stw	r9,0(r2)
   91b5c:	20805215 	stw	r2,328(r4)
   91b60:	10006215 	stw	zero,392(r2)
   91b64:	10006315 	stw	zero,396(r2)
   91b68:	883fde26 	beq	r17,zero,91ae4 <rx_descriptor_end+0xfff91a84>
   91b6c:	18c9883a 	add	r4,r3,r3
   91b70:	2109883a 	add	r4,r4,r4
   91b74:	1109883a 	add	r4,r2,r4
   91b78:	21802215 	stw	r6,136(r4)
   91b7c:	01800044 	movi	r6,1
   91b80:	12406217 	ldw	r9,392(r2)
   91b84:	30cc983a 	sll	r6,r6,r3
   91b88:	4992b03a 	or	r9,r9,r6
   91b8c:	12406215 	stw	r9,392(r2)
   91b90:	21c04215 	stw	r7,264(r4)
   91b94:	01000084 	movi	r4,2
   91b98:	893fd21e 	bne	r17,r4,91ae4 <rx_descriptor_end+0xfff91a84>
   91b9c:	11006317 	ldw	r4,396(r2)
   91ba0:	218cb03a 	or	r6,r4,r6
   91ba4:	11806315 	stw	r6,396(r2)
   91ba8:	003fce06 	br	91ae4 <rx_descriptor_end+0xfff91a84>
   91bac:	18805304 	addi	r2,r3,332
   91bb0:	18805215 	stw	r2,328(r3)
   91bb4:	003fc606 	br	91ad0 <rx_descriptor_end+0xfff91a70>
   91bb8:	00bfffc4 	movi	r2,-1
   91bbc:	003fd006 	br	91b00 <rx_descriptor_end+0xfff91aa0>

00091bc0 <__call_exitprocs>:
   91bc0:	defff504 	addi	sp,sp,-44
   91bc4:	df000915 	stw	fp,36(sp)
   91bc8:	dd400615 	stw	r21,24(sp)
   91bcc:	dc800315 	stw	r18,12(sp)
   91bd0:	dfc00a15 	stw	ra,40(sp)
   91bd4:	ddc00815 	stw	r23,32(sp)
   91bd8:	dd800715 	stw	r22,28(sp)
   91bdc:	dd000515 	stw	r20,20(sp)
   91be0:	dcc00415 	stw	r19,16(sp)
   91be4:	dc400215 	stw	r17,8(sp)
   91be8:	dc000115 	stw	r16,4(sp)
   91bec:	d9000015 	stw	r4,0(sp)
   91bf0:	2839883a 	mov	fp,r5
   91bf4:	04800044 	movi	r18,1
   91bf8:	057fffc4 	movi	r21,-1
   91bfc:	00800274 	movhi	r2,9
   91c00:	10913c04 	addi	r2,r2,17648
   91c04:	12000017 	ldw	r8,0(r2)
   91c08:	45005217 	ldw	r20,328(r8)
   91c0c:	44c05204 	addi	r19,r8,328
   91c10:	a0001c26 	beq	r20,zero,91c84 <__call_exitprocs+0xc4>
   91c14:	a0800117 	ldw	r2,4(r20)
   91c18:	15ffffc4 	addi	r23,r2,-1
   91c1c:	b8000d16 	blt	r23,zero,91c54 <__call_exitprocs+0x94>
   91c20:	14000044 	addi	r16,r2,1
   91c24:	8421883a 	add	r16,r16,r16
   91c28:	8421883a 	add	r16,r16,r16
   91c2c:	84402004 	addi	r17,r16,128
   91c30:	a463883a 	add	r17,r20,r17
   91c34:	a421883a 	add	r16,r20,r16
   91c38:	e0001e26 	beq	fp,zero,91cb4 <__call_exitprocs+0xf4>
   91c3c:	80804017 	ldw	r2,256(r16)
   91c40:	e0801c26 	beq	fp,r2,91cb4 <__call_exitprocs+0xf4>
   91c44:	bdffffc4 	addi	r23,r23,-1
   91c48:	843fff04 	addi	r16,r16,-4
   91c4c:	8c7fff04 	addi	r17,r17,-4
   91c50:	bd7ff91e 	bne	r23,r21,91c38 <rx_descriptor_end+0xfff91bd8>
   91c54:	00800234 	movhi	r2,8
   91c58:	10899b04 	addi	r2,r2,9836
   91c5c:	10000926 	beq	r2,zero,91c84 <__call_exitprocs+0xc4>
   91c60:	a0800117 	ldw	r2,4(r20)
   91c64:	1000301e 	bne	r2,zero,91d28 <__call_exitprocs+0x168>
   91c68:	a0800017 	ldw	r2,0(r20)
   91c6c:	10003226 	beq	r2,zero,91d38 <__call_exitprocs+0x178>
   91c70:	a009883a 	mov	r4,r20
   91c74:	98800015 	stw	r2,0(r19)
   91c78:	008266c0 	call	8266c <free>
   91c7c:	9d000017 	ldw	r20,0(r19)
   91c80:	a03fe41e 	bne	r20,zero,91c14 <rx_descriptor_end+0xfff91bb4>
   91c84:	dfc00a17 	ldw	ra,40(sp)
   91c88:	df000917 	ldw	fp,36(sp)
   91c8c:	ddc00817 	ldw	r23,32(sp)
   91c90:	dd800717 	ldw	r22,28(sp)
   91c94:	dd400617 	ldw	r21,24(sp)
   91c98:	dd000517 	ldw	r20,20(sp)
   91c9c:	dcc00417 	ldw	r19,16(sp)
   91ca0:	dc800317 	ldw	r18,12(sp)
   91ca4:	dc400217 	ldw	r17,8(sp)
   91ca8:	dc000117 	ldw	r16,4(sp)
   91cac:	dec00b04 	addi	sp,sp,44
   91cb0:	f800283a 	ret
   91cb4:	a0800117 	ldw	r2,4(r20)
   91cb8:	80c00017 	ldw	r3,0(r16)
   91cbc:	10bfffc4 	addi	r2,r2,-1
   91cc0:	15c01426 	beq	r2,r23,91d14 <__call_exitprocs+0x154>
   91cc4:	80000015 	stw	zero,0(r16)
   91cc8:	183fde26 	beq	r3,zero,91c44 <rx_descriptor_end+0xfff91be4>
   91ccc:	95c8983a 	sll	r4,r18,r23
   91cd0:	a0806217 	ldw	r2,392(r20)
   91cd4:	a5800117 	ldw	r22,4(r20)
   91cd8:	2084703a 	and	r2,r4,r2
   91cdc:	10000b26 	beq	r2,zero,91d0c <__call_exitprocs+0x14c>
   91ce0:	a0806317 	ldw	r2,396(r20)
   91ce4:	2088703a 	and	r4,r4,r2
   91ce8:	20000c1e 	bne	r4,zero,91d1c <__call_exitprocs+0x15c>
   91cec:	89400017 	ldw	r5,0(r17)
   91cf0:	d9000017 	ldw	r4,0(sp)
   91cf4:	183ee83a 	callr	r3
   91cf8:	a0800117 	ldw	r2,4(r20)
   91cfc:	15bfbf1e 	bne	r2,r22,91bfc <rx_descriptor_end+0xfff91b9c>
   91d00:	98800017 	ldw	r2,0(r19)
   91d04:	153fcf26 	beq	r2,r20,91c44 <rx_descriptor_end+0xfff91be4>
   91d08:	003fbc06 	br	91bfc <rx_descriptor_end+0xfff91b9c>
   91d0c:	183ee83a 	callr	r3
   91d10:	003ff906 	br	91cf8 <rx_descriptor_end+0xfff91c98>
   91d14:	a5c00115 	stw	r23,4(r20)
   91d18:	003feb06 	br	91cc8 <rx_descriptor_end+0xfff91c68>
   91d1c:	89000017 	ldw	r4,0(r17)
   91d20:	183ee83a 	callr	r3
   91d24:	003ff406 	br	91cf8 <rx_descriptor_end+0xfff91c98>
   91d28:	a0800017 	ldw	r2,0(r20)
   91d2c:	a027883a 	mov	r19,r20
   91d30:	1029883a 	mov	r20,r2
   91d34:	003fb606 	br	91c10 <rx_descriptor_end+0xfff91bb0>
   91d38:	0005883a 	mov	r2,zero
   91d3c:	003ffb06 	br	91d2c <rx_descriptor_end+0xfff91ccc>

00091d40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   91d40:	defffd04 	addi	sp,sp,-12
   91d44:	df000215 	stw	fp,8(sp)
   91d48:	df000204 	addi	fp,sp,8
   91d4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   91d50:	0001883a 	nop
   91d54:	e0bfff17 	ldw	r2,-4(fp)
   91d58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   91d5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   91d60:	10000226 	beq	r2,zero,91d6c <_exit+0x2c>
    ALT_SIM_FAIL();
   91d64:	002af070 	cmpltui	zero,zero,43969
   91d68:	00000106 	br	91d70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   91d6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   91d70:	003fff06 	br	91d70 <rx_descriptor_end+0xfff91d10>
