/*
 * stack.c
 *
 *  Created on: Nov 10, 2017
 *      Author: shreytej
 */

#include <altera_avalon_sgdma.h>
#include <altera_avalon_sgdma_descriptor.h>	//include the sgdma descriptor
#include <altera_avalon_sgdma_regs.h>		//include the sgdma registers
#include <altera_avalon_pio_regs.h>
#include <altera_avalon_timer.h>
#include <altera_avalon_timer_regs.h>
#include <string.h>
#include <stdio.h>
#include "../include/layer.h"
#include "sys/alt_stdio.h"
#include "system.h"

#define A 0
#define B 1


struct packet * sentPacket;
struct packet * pack;
struct segment * conn;

int seqNumber = 0x00;
int ackNumber = 0x00;
int timer;
int isConnected;
unsigned char buffer[5];

int connect(int device, unsigned char * sourceIP, unsigned char * sourcePort, unsigned char * destinationIP, unsigned char * destinationPort){
	printf("connect function\n");
	conn->syn[0] = 0x01;
	conn->fin[0] = 0x00;
	memmove(conn->destPort, destinationPort, 2);
	memmove(conn->sourcePort, sourcePort, 2);
	conn->seqNum[0] = seqNumber;
	conn->ackNum[0] = ackNumber;
	conn->data[0] = 0x00;
	memmove(pack->sourceIP, sourceIP, 4);
	memmove(pack->destIP, destinationIP, 4);
	pack->payload = conn;
	sentPacket = pack;
	transmit(device, pack);//Send Connection Request
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xFFFF);
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);
	char * receivedBuffer = {0};
	receivedBuffer = receive(device);//Wait to receive SYNACK
	if(receivedBuffer[32] == 0x01){
		pack->payload->syn[0] = 0x00;
		pack->payload->data[0] = 0x02;
		pack->payload->seqNum[0] = ++seqNumber;
		pack->payload->ackNum[0] = ++ackNumber;
		transmit(device, pack);//send ack
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
		return 1;
	}else{
		alt_printf("Connection Failed");
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
		if(timer == 1){
			transmit(device, sentPacket);
		}
		return 0;
	}
}

int send(int device, unsigned char data){
	printf("send function\n");
	conn->syn[0] = 0x00;
	conn->fin[0] = 0x00;
	conn->seqNum[0] = seqNumber;
	conn->ackNum[0] = ackNumber;
	conn->data[0] = data;
	pack->payload = conn;

	sentPacket = pack;
	transmit(device, pack);

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0x002F);
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);

	unsigned char * receivedBuffer;

	receivedBuffer = receive(device);
	if(receivedBuffer[32] == 0x02){
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
		alt_printf("Ack received");
		seqNumber++;
		ackNumber++;
		return 1;//sent and ack received
	}
	else{
		alt_printf("Timeout Occurred");
		timer = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
		if(timer == 1){
			transmit(device, sentPacket);
		}
	}
}


int accept(int device){
	//TODO: Check if destIP, port is myIP, port
	printf("accept function\n");
	unsigned char * request;
	request = receive(device);

	conn->syn[0] = 0x01;
	conn->fin[0] = 0x00;
	memmove(conn->destPort, request+24, 2);
	memmove(conn->sourcePort, request+26, 2);
	conn->seqNum[0] = seqNumber;
	conn->ackNum[0] = ackNumber;
	conn->data[0] = 0x01;

	memmove(pack->sourceIP, request+20, 4);
	memmove(pack->destIP, request+20, 4);
	pack->payload = conn;

	if(request[28] == 0x01){
		sentPacket = pack;
		transmit(device, pack);
		//return 1;
		//return 1;
	}

	unsigned char * ack;
	ack = receive(device);
	if(ack[32] == 0x02){
		//Received Ack
		printf("Three way handshake complete");
		fflush(stdout);
		return 1;
	}
	else return 0;
}

int recv(int device){
	printf("receive function\n");
	unsigned char * recvData;
	//signed char * recvData;
	recvData = receive(device);
	if(recvData[32]!= 0x02){
		//Store Data
		//Send Ack
		pack->payload->syn[0] = 0x00;
		pack->payload->data[0] = 0x02;
		transmit(device, pack);
		printf("Data Received: %x\n",recvData+32);
		fflush(stdout);
		return 1;
	}
	else{
		printf("Ack received");
	}
}

int disconnect(int device){
	printf("disconnect function\n");
	conn->fin[0] = 0x01;
	sentPacket = pack;
	transmit(device, pack);

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE , 0xAAAA);
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE , 0xFFFF);
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0004);

	unsigned char * discon_temp;

	discon_temp = receive(device);
	if(discon_temp[32]==0x02){
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0008);
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0002);
		printf("Disconnected");
		return 1;
	}
}

int recDisconnect(int device){
	printf("recdisconnect function\n");
	unsigned char * dreq;
	dreq = receive(device);
	if(dreq[29] == 0x01){
		//send ack
		conn->data[0] = 0x02;
		transmit(device, pack);
		return 1;
	}
}


int main(void){
	printf("System Initialize.\n");
	while(1){
		pack = (struct packet*)malloc(sizeof(struct packet));
		conn = (struct segment*)malloc(sizeof(struct segment));
		// IP addressed must be set here
		unsigned char * IP1= malloc(4 * sizeof(unsigned char));
		//new is 169.254.54.102
		IP1[0] = 0xA9;
		IP1[1] = 0xFE;
		IP1[2] = 0x36;
		IP1[3] = 0x66;
		//192.168.1.2
		unsigned char * IP2= malloc(4 * sizeof(unsigned char));
		IP2[0] = 0xA9;
		IP2[1] = 0xFE;
		IP2[2] = 0x6F;
		IP2[3] = 0xEF;

		unsigned char * sPort = malloc(2 * sizeof(unsigned char)); //set aside spot for both port values
		sPort[0] = 99;		//9999
		sPort[1] = 99;

		unsigned char * dPort = malloc(2 * sizeof(unsigned char));
		dPort[0] = 90;	//9090
		dPort[1] = 90;
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0000);
		IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x0000);

		buffer[0] = 0xAA;
		buffer[1] = 0xBB;
		buffer[2] = 0xCC;
		buffer[3] = 0xDD;
		buffer[4] = 0xEE;

		int transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
		int isConnected = 0;

		while(1){
		transmit = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		if(transmit){
			isConnected = connect(A,IP1, sPort, IP2, dPort);
			if(isConnected){
				int j = 0;
				while(j < 5){
					int sent = 0;
					sent = send(A, buffer[j]);
					if(sent){
						j++;
					}
					else {
						printf("ACK NOT RECEIVED");
						fflush(stdout);
					}

				}
				disconnect(A);
			}
		}
		else {
			int conn = accept(B);
			if(conn){
				printf("Connection Successful");
				fflush(stdout);
				printf("Receiving data");
				fflush(stdout);
				int k = 0;
				while(k < 5){
					int rec = 0;
					rec = recv(B);
					if(rec){
						k++;
					}
				}
				recDisconnect(B);
			}
			else{
				printf("Connection Failed at Receiver");
				fflush(stdout);
			}
		}
	}
	}
	return 0;
}
