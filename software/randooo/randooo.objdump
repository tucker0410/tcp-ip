
randooo.elf:     file format elf32-littlenios2
randooo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000060f8 memsz 0x000060f8 flags r-x
    LOAD off    0x00007118 vaddr 0x00086118 paddr 0x000881dc align 2**12
         filesz 0x000020c4 memsz 0x000020c4 flags rw-
    LOAD off    0x000092a0 vaddr 0x0008a2a0 paddr 0x0008a2a0 align 2**12
         filesz 0x00000000 memsz 0x00000750 flags rw-
    LOAD off    0x0000a000 vaddr 0x00100000 paddr 0x0008a9f0 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005d8c  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000148  00085fd0  00085fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000020c4  00086118  000881dc  00007118  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000750  0008a2a0  0008a2a0  000092a0  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  0008a9f0  0008a9f0  0000a080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  0008a9f0  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a38  00000000  00000000  0000a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016a2c  00000000  00000000  0000aae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006230  00000000  00000000  0002150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000067fa  00000000  00000000  0002773c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001878  00000000  00000000  0002df38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000029e5  00000000  00000000  0002f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002fd9  00000000  00000000  00032195  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00035170  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000004d0  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00038106  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00038109  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003810e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003810f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00038110  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00038122  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000c  00000000  00000000  0003812b  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  00038137  2**0
                  CONTENTS, READONLY
 27 .jdi          00004653  00000000  00000000  0003815d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074e2d  00000000  00000000  0003c7b0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00085fd0 l    d  .rodata	00000000 .rodata
00086118 l    d  .rwdata	00000000 .rwdata
0008a2a0 l    d  .bss	00000000 .bss
0008a9f0 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../randooo_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000805e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000809b0 l     F .text	00000034 alt_dev_reg
00086708 l     O .rwdata	00001060 jtag_uart
00087768 l     O .rwdata	00000030 sgdma_rx
00087798 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080cd0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00080edc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00081514 l     F .text	0000003c alt_get_errno
00082144 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000822a8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000824c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00082694 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000826c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00082bc4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00082d04 l     F .text	0000003c alt_get_errno
00082d40 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00087970 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084058 l     F .text	00000008 __fp_unlock
0008406c l     F .text	0000019c __sinit.part.1
00084208 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00085990 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00085a7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00085b5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00085cb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
000881d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00085e9c l     F .text	0000003c alt_get_errno
0008a2c4 g     O .bss	00000004 alt_instruction_exception_handler
00085848 g     F .text	00000054 _isatty_r
000806cc g     F .text	0000007c alt_main
000804a0 g     F .text	00000140 rx_ethernet_isr
0008a8f0 g     O .bss	00000100 alt_irq
0008589c g     F .text	00000060 _lseek_r
000881dc g       *ABS*	00000000 __flash_rwdata_start
0008a9f0 g       *ABS*	00000000 __alt_heap_start
00081674 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
000855d0 g     F .text	0000005c __sseek
000843a8 g     F .text	00000010 __sinit
0008386c g     F .text	00000140 __swbuf_r
00084210 g     F .text	00000068 __sfmoreglue
00085c90 g     F .text	00000024 __malloc_unlock
00081d8c g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
00084390 g     F .text	00000018 _cleanup
00083160 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
000818dc g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
000857ec g     F .text	0000005c _fstat_r
0008a2c8 g     O .bss	00000004 errno
0008554c g     F .text	00000008 __seofread
0008a2b0 g     O .bss	00000004 alt_argv
0009019c g       *ABS*	00000000 _gp
000877f0 g     O .rwdata	00000180 alt_fd_list
00082860 g     F .text	00000090 alt_find_dev
00083524 g     F .text	00000148 memcpy
00084060 g     F .text	0000000c _cleanup_r
00082c88 g     F .text	0000007c alt_io_redirect
00085fd0 g       *ABS*	00000000 __DTOR_END__
000833c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000819d4 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
000810d4 g     F .text	0000021c altera_avalon_jtag_uart_read
00085ab8 g     F .text	000000a4 isatty
00083330 g     F .text	00000090 alt_icache_flush
0008a2d4 g     O .bss	00000004 __malloc_top_pad
00081b0c g     F .text	0000005c alt_avalon_sgdma_stop
000854a4 g     F .text	00000054 _sbrk_r
000858fc g     F .text	00000060 _read_r
000825d4 g     F .text	00000078 alt_dcache_flush
000881b4 g     O .rwdata	00000004 alt_max_fd
000856e8 g     F .text	000000f0 _fclose_r
00084028 g     F .text	00000030 fflush
0008a2d0 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00085b98 g     F .text	000000d4 lseek
000881c8 g     O .rwdata	00000004 _global_impure_ptr
0008a9f0 g       *ABS*	00000000 __bss_end
00082ad4 g     F .text	000000f0 alt_iic_isr_register
00081550 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00083058 g     F .text	00000108 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
000843c8 g     F .text	00000018 __fp_lock_all
00082a88 g     F .text	0000004c alt_ic_irq_enabled
00082fbc g     F .text	0000009c alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0008a2b8 g     O .bss	00000004 alt_irq_active
00086118 g     O .rwdata	000005ee tx_frame
000800fc g     F .exceptions	000000d4 alt_irq_handler
000877c8 g     O .rwdata	00000028 alt_dev_null
00081b68 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
0008264c g     F .text	00000048 alt_dcache_flush_all
00100040 g     O .descriptor_memory	00000020 rx_descriptor
000881dc g       *ABS*	00000000 __ram_rwdata_end
000881ac g     O .rwdata	00000008 alt_dev_list
00085ed8 g     F .text	000000f8 write
00081cac g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
0008366c g     F .text	000000a0 _putc_r
00086118 g       *ABS*	00000000 __ram_rodata_end
000859cc g     F .text	000000b0 fstat
00081954 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
00081a60 g     F .text	00000054 alt_avalon_sgdma_register_callback
0008a9f0 g       *ABS*	00000000 end
00080c10 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008a2a0 g     O .bss	00000004 i
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00085fd0 g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00081d2c g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00082320 g     F .text	0000007c alt_avalon_timer_sc_init
000812f0 g     F .text	00000224 altera_avalon_jtag_uart_write
00081784 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
000843b8 g     F .text	00000004 __sfp_lock_acquire
0008187c g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
0008451c g     F .text	00000310 _free_r
00080748 g     F .text	0000022c alt_printf
00083c30 g     F .text	00000180 __call_exitprocs
000881d0 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
0008a2bc g     O .bss	00000004 _alt_tick_rate
0008a2a4 g     O .bss	00000004 sgdma_tx_dev
00081bcc g     F .text	00000054 alt_avalon_sgdma_open
0008a2c0 g     O .bss	00000004 _alt_nticks
00085cf0 g     F .text	000000fc read
00080a1c g     F .text	00000090 alt_sys_init
00083b18 g     F .text	00000118 __register_exitproc
00080f7c g     F .text	00000068 altera_avalon_jtag_uart_close
00086118 g       *ABS*	00000000 __ram_rwdata_start
00085fd0 g       *ABS*	00000000 __ram_rodata_start
0008a8c8 g     O .bss	00000028 __malloc_current_mallinfo
00080aac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008328c g     F .text	000000a4 alt_get_fd
00085694 g     F .text	00000054 _close_r
000834a8 g     F .text	0000007c memcmp
00080b6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008a9f0 g       *ABS*	00000000 __alt_stack_base
00080bbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000839c4 g     F .text	00000154 __swsetup_r
00084278 g     F .text	00000118 __sfp
00087d94 g     O .rwdata	00000408 __malloc_av_
000843c4 g     F .text	00000004 __sinit_lock_release
000854f8 g     F .text	00000054 __sread
00083184 g     F .text	00000108 alt_find_file
000826fc g     F .text	000000a4 alt_dev_llist_insert
00085c6c g     F .text	00000024 __malloc_lock
00085dec g     F .text	000000b0 sbrk
00081ab4 g     F .text	00000058 alt_avalon_sgdma_start
00083fcc g     F .text	0000005c _fflush_r
0008a2a0 g       *ABS*	00000000 __bss_start
0008537c g     F .text	00000128 memset
00080290 g     F .text	00000210 main
0008a2b4 g     O .bss	00000004 alt_envp
0008a2cc g     O .bss	00000004 __malloc_max_total_mem
00080b0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000839ac g     F .text	00000018 __swbuf
0008819c g     O .rwdata	00000008 alt_sgdma_list
0008562c g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
000857d8 g     F .text	00000014 fclose
00084b70 g     F .text	0000080c _malloc_r
000881b8 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
0008a2d8 g     O .bss	000005ee rx_frame
0008482c g     F .text	000000c4 _fwalk
0008370c g     F .text	000000c8 putc
000843f8 g     F .text	00000124 _malloc_trim_r
00085fd0 g       *ABS*	00000000 __CTOR_END__
00085fd0 g       *ABS*	00000000 __flash_rodata_start
00085fd0 g       *ABS*	00000000 __DTOR_LIST__
000809e4 g     F .text	00000038 alt_irq_init
00082f58 g     F .text	00000064 alt_release_fd
0008345c g     F .text	00000014 atexit
00085634 g     F .text	00000060 _write_r
000881cc g     O .rwdata	00000004 _impure_ptr
0008a2ac g     O .bss	00000004 alt_argc
00083db0 g     F .text	0000021c __sflush_r
00082800 g     F .text	00000060 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000843e0 g     F .text	00000018 __fp_unlock_all
000881a4 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00082924 g     F .text	00000050 alt_ic_isr_register
000881dc g       *ABS*	00000000 _edata
0008a9f0 g       *ABS*	00000000 _end
00080244 g       *ABS*	00000000 __ram_exceptions_end
00080fe4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000829fc g     F .text	0000008c alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
00081c20 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
00085554 g     F .text	0000007c __swrite
000881d4 g     O .rwdata	00000004 __malloc_trim_threshold
00083470 g     F .text	00000038 exit
000848f0 g     F .text	000000c4 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000843bc g     F .text	00000004 __sfp_lock_release
0008a2a8 g     O .bss	00000004 sgdma_rx_dev
0008595c g     F .text	00000034 _exit
0008239c g     F .text	0000012c alt_alarm_start
000849b4 g     F .text	000001bc __smakebuf_r
000837d4 g     F .text	00000098 strlen
00082e04 g     F .text	00000154 open
00080974 g     F .text	0000003c alt_putchar
000828f0 g     F .text	00000034 alt_icache_flush_all
000881bc g     O .rwdata	00000004 alt_priority_mask
00082974 g     F .text	00000088 alt_ic_irq_enable
000817f8 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
000881c0 g     O .rwdata	00000008 alt_alarm_list
000827a0 g     F .text	00000060 _do_ctors
00082504 g     F .text	000000d0 close
00080648 g     F .text	00000084 alt_load
00082200 g     F .text	000000a8 alt_avalon_sgdma_init
000843c0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_main_memory-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10aa3c04 	addi	r2,r2,-22288
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10aa3c04 	addi	r2,r2,-22288
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a84a17 	ldw	r2,-24280(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a84a17 	ldw	r2,-24280(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <rx_descriptor_end+0xfff801e8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6806714 	ori	gp,gp,412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80268:	10a8a814 	ori	r2,r2,41632

    movhi r3, %hi(__bss_end)
   8026c:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80270:	18ea7c14 	ori	r3,r3,43504

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <rx_descriptor_end+0xfff80218>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	00806480 	call	80648 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	00806cc0 	call	806cc <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <rx_descriptor_end+0xfff8022c>

00080290 <main>:
* 1. Records input text and transmits the text via Ethernet after Enter is
* pressed
* 2. Displays text received via Ethernet frame on the JTAG UART
********************************************************************************/
int main(void)
{
   80290:	defff904 	addi	sp,sp,-28
   80294:	dfc00615 	stw	ra,24(sp)
   80298:	df000515 	stw	fp,20(sp)
   8029c:	df000504 	addi	fp,sp,20
// Open the sgdma transmit device
sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   802a0:	01000234 	movhi	r4,8
   802a4:	2117f404 	addi	r4,r4,24528
   802a8:	0081bcc0 	call	81bcc <alt_avalon_sgdma_open>
   802ac:	d0a84215 	stw	r2,-24312(gp)
if (sgdma_tx_dev == NULL) {
   802b0:	d0a84217 	ldw	r2,-24312(gp)
   802b4:	1000051e 	bne	r2,zero,802cc <main+0x3c>
alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   802b8:	01000234 	movhi	r4,8
   802bc:	2117f804 	addi	r4,r4,24544
   802c0:	00807480 	call	80748 <alt_printf>
return -1;
   802c4:	00bfffc4 	movi	r2,-1
   802c8:	00007006 	br	8048c <main+0x1fc>
} else alt_printf ("Opened scatter-gather dma transmit device\n");
   802cc:	01000234 	movhi	r4,8
   802d0:	21180704 	addi	r4,r4,24604
   802d4:	00807480 	call	80748 <alt_printf>

// Open the sgdma receive device
sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   802d8:	01000234 	movhi	r4,8
   802dc:	21181204 	addi	r4,r4,24648
   802e0:	0081bcc0 	call	81bcc <alt_avalon_sgdma_open>
   802e4:	d0a84315 	stw	r2,-24308(gp)
if (sgdma_rx_dev == NULL) {
   802e8:	d0a84317 	ldw	r2,-24308(gp)
   802ec:	1000051e 	bne	r2,zero,80304 <main+0x74>
alt_printf ("Error: could not open scatter-gather dma receive device\n");
   802f0:	01000234 	movhi	r4,8
   802f4:	21181604 	addi	r4,r4,24664
   802f8:	00807480 	call	80748 <alt_printf>
return -1;
   802fc:	00bfffc4 	movi	r2,-1
   80300:	00006206 	br	8048c <main+0x1fc>
} else alt_printf ("Opened scatter-gather dma receive device\n");
   80304:	01000234 	movhi	r4,8
   80308:	21182504 	addi	r4,r4,24724
   8030c:	00807480 	call	80748 <alt_printf>

// Set interrupts for the sgdma receive device
alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80310:	d0a84317 	ldw	r2,-24308(gp)
   80314:	000f883a 	mov	r7,zero
   80318:	01800504 	movi	r6,20
   8031c:	01400234 	movhi	r5,8
   80320:	29412804 	addi	r5,r5,1184
   80324:	1009883a 	mov	r4,r2
   80328:	0081a600 	call	81a60 <alt_avalon_sgdma_register_callback>

// Create sgdma receive descriptor
alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   8032c:	d8000015 	stw	zero,0(sp)
   80330:	000f883a 	mov	r7,zero
   80334:	01800274 	movhi	r6,9
   80338:	31a8b604 	addi	r6,r6,-23848
   8033c:	01400434 	movhi	r5,16
   80340:	29401804 	addi	r5,r5,96
   80344:	01000434 	movhi	r4,16
   80348:	21001004 	addi	r4,r4,64
   8034c:	008187c0 	call	8187c <alt_avalon_sgdma_construct_stream_to_mem_desc>

// Set up non-blocking transfer of sgdma receive descriptor
alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80350:	d0a84317 	ldw	r2,-24308(gp)
   80354:	01400434 	movhi	r5,16
   80358:	29401004 	addi	r5,r5,64
   8035c:	1009883a 	mov	r4,r2
   80360:	00815500 	call	81550 <alt_avalon_sgdma_do_async_transfer>


// Triple-speed Ethernet MegaCore base address
volatile int * tse = (int *) 0x00102000;
   80364:	00800434 	movhi	r2,16
   80368:	10880004 	addi	r2,r2,8192
   8036c:	e0bfff15 	stw	r2,-4(fp)
// Initialize the MAC address
//*(tse + 3) = 0x116E6001;
//*(tse + 4) = 0x00000F02;

// Specify the addresses of the PHY devices to be accessed through MDIO interface
*(tse + 0x0F) = 0x10;
   80370:	e0bfff17 	ldw	r2,-4(fp)
   80374:	10800f04 	addi	r2,r2,60
   80378:	00c00404 	movi	r3,16
   8037c:	10c00015 	stw	r3,0(r2)
*(tse + 0x10) = 0x11;
   80380:	e0bfff17 	ldw	r2,-4(fp)
   80384:	10801004 	addi	r2,r2,64
   80388:	00c00444 	movi	r3,17
   8038c:	10c00015 	stw	r3,0(r2)

// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
*(tse + 0x94) = 0x4000;
   80390:	e0bfff17 	ldw	r2,-4(fp)
   80394:	10809404 	addi	r2,r2,592
   80398:	00d00004 	movi	r3,16384
   8039c:	10c00015 	stw	r3,0(r2)

// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes("| = OR")
*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
   803a0:	e0bfff17 	ldw	r2,-4(fp)
   803a4:	1080b004 	addi	r2,r2,704
   803a8:	e0ffff17 	ldw	r3,-4(fp)
   803ac:	18c0b004 	addi	r3,r3,704
   803b0:	18c00017 	ldw	r3,0(r3)
   803b4:	18c01814 	ori	r3,r3,96
   803b8:	10c00015 	stw	r3,0(r2)

// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
   803bc:	e0bfff17 	ldw	r2,-4(fp)
   803c0:	1080b404 	addi	r2,r2,720
   803c4:	e0ffff17 	ldw	r3,-4(fp)
   803c8:	18c0b404 	addi	r3,r3,720
   803cc:	18c00017 	ldw	r3,0(r3)
   803d0:	18c02094 	ori	r3,r3,130
   803d4:	10c00015 	stw	r3,0(r2)


// Software reset the second PHY chip and wait
*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
   803d8:	e0bfff17 	ldw	r2,-4(fp)
   803dc:	1080a004 	addi	r2,r2,640
   803e0:	e0ffff17 	ldw	r3,-4(fp)
   803e4:	18c0a004 	addi	r3,r3,640
   803e8:	18c00017 	ldw	r3,0(r3)
   803ec:	18e00014 	ori	r3,r3,32768
   803f0:	10c00015 	stw	r3,0(r2)
while ( *(tse + 0xA0) & 0x8000 )
   803f4:	0001883a 	nop
   803f8:	e0bfff17 	ldw	r2,-4(fp)
   803fc:	1080a004 	addi	r2,r2,640
   80400:	10800017 	ldw	r2,0(r2)
   80404:	10a0000c 	andi	r2,r2,32768
   80408:	103ffb1e 	bne	r2,zero,803f8 <rx_descriptor_end+0xfff80398>
;


// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
*(tse + 2) = *(tse + 2) | 0x000000CB;
   8040c:	e0bfff17 	ldw	r2,-4(fp)
   80410:	10800204 	addi	r2,r2,8
   80414:	e0ffff17 	ldw	r3,-4(fp)
   80418:	18c00204 	addi	r3,r3,8
   8041c:	18c00017 	ldw	r3,0(r3)
   80420:	18c032d4 	ori	r3,r3,203
   80424:	10c00015 	stw	r3,0(r2)

alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 60, 0, 1, 1, 0 );
   80428:	d8000315 	stw	zero,12(sp)
   8042c:	00800044 	movi	r2,1
   80430:	d8800215 	stw	r2,8(sp)
   80434:	00800044 	movi	r2,1
   80438:	d8800115 	stw	r2,4(sp)
   8043c:	d8000015 	stw	zero,0(sp)
   80440:	01c00f04 	movi	r7,60
   80444:	01800234 	movhi	r6,8
   80448:	31984604 	addi	r6,r6,24856
   8044c:	01400434 	movhi	r5,16
   80450:	29400804 	addi	r5,r5,32
   80454:	01000434 	movhi	r4,16
   80458:	21000004 	addi	r4,r4,0
   8045c:	00819540 	call	81954 <alt_avalon_sgdma_construct_mem_to_stream_desc>

// Set up non-blocking transfer of sgdma transmit descriptor
alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   80460:	d0a84217 	ldw	r2,-24312(gp)
   80464:	01400434 	movhi	r5,16
   80468:	29400004 	addi	r5,r5,0
   8046c:	1009883a 	mov	r4,r2
   80470:	00815500 	call	81550 <alt_avalon_sgdma_do_async_transfer>

// Wait until transmit descriptor transfer is complete
while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   80474:	0001883a 	nop
   80478:	01000434 	movhi	r4,16
   8047c:	21000004 	addi	r4,r4,0
   80480:	0081b680 	call	81b68 <alt_avalon_sgdma_check_descriptor_status>
   80484:	103ffc1e 	bne	r2,zero,80478 <rx_descriptor_end+0xfff80418>
;


return 0;
   80488:	0005883a 	mov	r2,zero
}
   8048c:	e037883a 	mov	sp,fp
   80490:	dfc00117 	ldw	ra,4(sp)
   80494:	df000017 	ldw	fp,0(sp)
   80498:	dec00204 	addi	sp,sp,8
   8049c:	f800283a 	ret

000804a0 <rx_ethernet_isr>:

/****************************************************************************************
* Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   804a0:	defffc04 	addi	sp,sp,-16
   804a4:	dfc00315 	stw	ra,12(sp)
   804a8:	df000215 	stw	fp,8(sp)
   804ac:	df000204 	addi	fp,sp,8
   804b0:	e13fff15 	stw	r4,-4(fp)


// Wait until receive descriptor transfer is complete
while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
   804b4:	0001883a 	nop
   804b8:	01000434 	movhi	r4,16
   804bc:	21001004 	addi	r4,r4,64
   804c0:	0081b680 	call	81b68 <alt_avalon_sgdma_check_descriptor_status>
   804c4:	103ffc1e 	bne	r2,zero,804b8 <rx_descriptor_end+0xfff80458>

// Create new receive sgdma descriptor
alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   804c8:	d8000015 	stw	zero,0(sp)
   804cc:	000f883a 	mov	r7,zero
   804d0:	01800274 	movhi	r6,9
   804d4:	31a8b604 	addi	r6,r6,-23848
   804d8:	01400434 	movhi	r5,16
   804dc:	29401804 	addi	r5,r5,96
   804e0:	01000434 	movhi	r4,16
   804e4:	21001004 	addi	r4,r4,64
   804e8:	008187c0 	call	8187c <alt_avalon_sgdma_construct_stream_to_mem_desc>

// Set up non-blocking transfer of sgdma receive descriptor
alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   804ec:	d0a84317 	ldw	r2,-24308(gp)
   804f0:	01400434 	movhi	r5,16
   804f4:	29401004 	addi	r5,r5,64
   804f8:	1009883a 	mov	r4,r2
   804fc:	00815500 	call	81550 <alt_avalon_sgdma_do_async_transfer>

for(i=0;i<=1518;i++)
   80500:	d0284115 	stw	zero,-24316(gp)
   80504:	00000d06 	br	8053c <rx_ethernet_isr+0x9c>
tx_frame[i] = rx_frame[i];
   80508:	d1284117 	ldw	r4,-24316(gp)
   8050c:	d0e84117 	ldw	r3,-24316(gp)
   80510:	00800274 	movhi	r2,9
   80514:	10a8b604 	addi	r2,r2,-23848
   80518:	10c5883a 	add	r2,r2,r3
   8051c:	10c00003 	ldbu	r3,0(r2)
   80520:	00800234 	movhi	r2,8
   80524:	10984604 	addi	r2,r2,24856
   80528:	1105883a 	add	r2,r2,r4
   8052c:	10c00005 	stb	r3,0(r2)
alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

// Set up non-blocking transfer of sgdma receive descriptor
alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );

for(i=0;i<=1518;i++)
   80530:	d0a84117 	ldw	r2,-24316(gp)
   80534:	10800044 	addi	r2,r2,1
   80538:	d0a84115 	stw	r2,-24316(gp)
   8053c:	d0a84117 	ldw	r2,-24316(gp)
   80540:	10817bf0 	cmpltui	r2,r2,1519
   80544:	103ff01e 	bne	r2,zero,80508 <rx_descriptor_end+0xfff804a8>
tx_frame[i] = rx_frame[i];


for (i=0;i<=25;i++)
   80548:	d0284115 	stw	zero,-24316(gp)
   8054c:	00000d06 	br	80584 <rx_ethernet_isr+0xe4>
alt_printf("%x",rx_frame[i]);
   80550:	d0e84117 	ldw	r3,-24316(gp)
   80554:	00800274 	movhi	r2,9
   80558:	10a8b604 	addi	r2,r2,-23848
   8055c:	10c5883a 	add	r2,r2,r3
   80560:	10800003 	ldbu	r2,0(r2)
   80564:	10803fcc 	andi	r2,r2,255
   80568:	100b883a 	mov	r5,r2
   8056c:	01000234 	movhi	r4,8
   80570:	21183004 	addi	r4,r4,24768
   80574:	00807480 	call	80748 <alt_printf>

for(i=0;i<=1518;i++)
tx_frame[i] = rx_frame[i];


for (i=0;i<=25;i++)
   80578:	d0a84117 	ldw	r2,-24316(gp)
   8057c:	10800044 	addi	r2,r2,1
   80580:	d0a84115 	stw	r2,-24316(gp)
   80584:	d0a84117 	ldw	r2,-24316(gp)
   80588:	108006b0 	cmpltui	r2,r2,26
   8058c:	103ff01e 	bne	r2,zero,80550 <rx_descriptor_end+0xfff804f0>
alt_printf("%x",rx_frame[i]);
alt_printf("\n");
   80590:	01000234 	movhi	r4,8
   80594:	21183104 	addi	r4,r4,24772
   80598:	00807480 	call	80748 <alt_printf>
alt_printf("%x",rx_frame[25]);
   8059c:	00800274 	movhi	r2,9
   805a0:	10a8b604 	addi	r2,r2,-23848
   805a4:	10800643 	ldbu	r2,25(r2)
   805a8:	10803fcc 	andi	r2,r2,255
   805ac:	100b883a 	mov	r5,r2
   805b0:	01000234 	movhi	r4,8
   805b4:	21183004 	addi	r4,r4,24768
   805b8:	00807480 	call	80748 <alt_printf>
alt_printf("\n");
   805bc:	01000234 	movhi	r4,8
   805c0:	21183104 	addi	r4,r4,24772
   805c4:	00807480 	call	80748 <alt_printf>


}
   805c8:	0001883a 	nop
   805cc:	e037883a 	mov	sp,fp
   805d0:	dfc00117 	ldw	ra,4(sp)
   805d4:	df000017 	ldw	fp,0(sp)
   805d8:	dec00204 	addi	sp,sp,8
   805dc:	f800283a 	ret

000805e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   805e0:	defffc04 	addi	sp,sp,-16
   805e4:	df000315 	stw	fp,12(sp)
   805e8:	df000304 	addi	fp,sp,12
   805ec:	e13ffd15 	stw	r4,-12(fp)
   805f0:	e17ffe15 	stw	r5,-8(fp)
   805f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   805f8:	e0fffe17 	ldw	r3,-8(fp)
   805fc:	e0bffd17 	ldw	r2,-12(fp)
   80600:	18800c26 	beq	r3,r2,80634 <alt_load_section+0x54>
  {
    while( to != end )
   80604:	00000806 	br	80628 <alt_load_section+0x48>
    {
      *to++ = *from++;
   80608:	e0bffe17 	ldw	r2,-8(fp)
   8060c:	10c00104 	addi	r3,r2,4
   80610:	e0fffe15 	stw	r3,-8(fp)
   80614:	e0fffd17 	ldw	r3,-12(fp)
   80618:	19000104 	addi	r4,r3,4
   8061c:	e13ffd15 	stw	r4,-12(fp)
   80620:	18c00017 	ldw	r3,0(r3)
   80624:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80628:	e0fffe17 	ldw	r3,-8(fp)
   8062c:	e0bfff17 	ldw	r2,-4(fp)
   80630:	18bff51e 	bne	r3,r2,80608 <rx_descriptor_end+0xfff805a8>
    {
      *to++ = *from++;
    }
  }
}
   80634:	0001883a 	nop
   80638:	e037883a 	mov	sp,fp
   8063c:	df000017 	ldw	fp,0(sp)
   80640:	dec00104 	addi	sp,sp,4
   80644:	f800283a 	ret

00080648 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80648:	defffe04 	addi	sp,sp,-8
   8064c:	dfc00115 	stw	ra,4(sp)
   80650:	df000015 	stw	fp,0(sp)
   80654:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80658:	01800274 	movhi	r6,9
   8065c:	31a07704 	addi	r6,r6,-32292
   80660:	01400234 	movhi	r5,8
   80664:	29584604 	addi	r5,r5,24856
   80668:	01000274 	movhi	r4,9
   8066c:	21207704 	addi	r4,r4,-32292
   80670:	00805e00 	call	805e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80674:	01800234 	movhi	r6,8
   80678:	31809104 	addi	r6,r6,580
   8067c:	01400234 	movhi	r5,8
   80680:	29400804 	addi	r5,r5,32
   80684:	01000234 	movhi	r4,8
   80688:	21000804 	addi	r4,r4,32
   8068c:	00805e00 	call	805e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80690:	01800234 	movhi	r6,8
   80694:	31984604 	addi	r6,r6,24856
   80698:	01400234 	movhi	r5,8
   8069c:	2957f404 	addi	r5,r5,24528
   806a0:	01000234 	movhi	r4,8
   806a4:	2117f404 	addi	r4,r4,24528
   806a8:	00805e00 	call	805e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   806ac:	008264c0 	call	8264c <alt_dcache_flush_all>
  alt_icache_flush_all();
   806b0:	00828f00 	call	828f0 <alt_icache_flush_all>
}
   806b4:	0001883a 	nop
   806b8:	e037883a 	mov	sp,fp
   806bc:	dfc00117 	ldw	ra,4(sp)
   806c0:	df000017 	ldw	fp,0(sp)
   806c4:	dec00204 	addi	sp,sp,8
   806c8:	f800283a 	ret

000806cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   806cc:	defffd04 	addi	sp,sp,-12
   806d0:	dfc00215 	stw	ra,8(sp)
   806d4:	df000115 	stw	fp,4(sp)
   806d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   806dc:	0009883a 	mov	r4,zero
   806e0:	00809e40 	call	809e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   806e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   806e8:	0080a1c0 	call	80a1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   806ec:	01800234 	movhi	r6,8
   806f0:	31983204 	addi	r6,r6,24776
   806f4:	01400234 	movhi	r5,8
   806f8:	29583204 	addi	r5,r5,24776
   806fc:	01000234 	movhi	r4,8
   80700:	21183204 	addi	r4,r4,24776
   80704:	0082c880 	call	82c88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80708:	00827a00 	call	827a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8070c:	01000234 	movhi	r4,8
   80710:	210a0004 	addi	r4,r4,10240
   80714:	008345c0 	call	8345c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80718:	d0a84417 	ldw	r2,-24304(gp)
   8071c:	d0e84517 	ldw	r3,-24300(gp)
   80720:	d1284617 	ldw	r4,-24296(gp)
   80724:	200d883a 	mov	r6,r4
   80728:	180b883a 	mov	r5,r3
   8072c:	1009883a 	mov	r4,r2
   80730:	00802900 	call	80290 <main>
   80734:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80738:	01000044 	movi	r4,1
   8073c:	00825040 	call	82504 <close>
  exit (result);
   80740:	e13fff17 	ldw	r4,-4(fp)
   80744:	00834700 	call	83470 <exit>

00080748 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80748:	defff204 	addi	sp,sp,-56
   8074c:	dfc00a15 	stw	ra,40(sp)
   80750:	df000915 	stw	fp,36(sp)
   80754:	df000904 	addi	fp,sp,36
   80758:	e13fff15 	stw	r4,-4(fp)
   8075c:	e1400215 	stw	r5,8(fp)
   80760:	e1800315 	stw	r6,12(fp)
   80764:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   80768:	e0800204 	addi	r2,fp,8
   8076c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   80770:	e0bfff17 	ldw	r2,-4(fp)
   80774:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   80778:	00006f06 	br	80938 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8077c:	e0bff807 	ldb	r2,-32(fp)
   80780:	10800960 	cmpeqi	r2,r2,37
   80784:	1000041e 	bne	r2,zero,80798 <alt_printf+0x50>
        {
            alt_putchar(c);
   80788:	e0bff807 	ldb	r2,-32(fp)
   8078c:	1009883a 	mov	r4,r2
   80790:	00809740 	call	80974 <alt_putchar>
   80794:	00006806 	br	80938 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80798:	e0bff717 	ldw	r2,-36(fp)
   8079c:	10c00044 	addi	r3,r2,1
   807a0:	e0fff715 	stw	r3,-36(fp)
   807a4:	10800003 	ldbu	r2,0(r2)
   807a8:	e0bff805 	stb	r2,-32(fp)
   807ac:	e0bff807 	ldb	r2,-32(fp)
   807b0:	10006926 	beq	r2,zero,80958 <alt_printf+0x210>
            {
                if (c == '%')
   807b4:	e0bff807 	ldb	r2,-32(fp)
   807b8:	10800958 	cmpnei	r2,r2,37
   807bc:	1000041e 	bne	r2,zero,807d0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   807c0:	e0bff807 	ldb	r2,-32(fp)
   807c4:	1009883a 	mov	r4,r2
   807c8:	00809740 	call	80974 <alt_putchar>
   807cc:	00005a06 	br	80938 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   807d0:	e0bff807 	ldb	r2,-32(fp)
   807d4:	108018d8 	cmpnei	r2,r2,99
   807d8:	1000081e 	bne	r2,zero,807fc <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   807dc:	e0bffe17 	ldw	r2,-8(fp)
   807e0:	10c00104 	addi	r3,r2,4
   807e4:	e0fffe15 	stw	r3,-8(fp)
   807e8:	10800017 	ldw	r2,0(r2)
   807ec:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   807f0:	e13ffd17 	ldw	r4,-12(fp)
   807f4:	00809740 	call	80974 <alt_putchar>
   807f8:	00004f06 	br	80938 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   807fc:	e0bff807 	ldb	r2,-32(fp)
   80800:	10801e18 	cmpnei	r2,r2,120
   80804:	1000341e 	bne	r2,zero,808d8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   80808:	e0bffe17 	ldw	r2,-8(fp)
   8080c:	10c00104 	addi	r3,r2,4
   80810:	e0fffe15 	stw	r3,-8(fp)
   80814:	10800017 	ldw	r2,0(r2)
   80818:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8081c:	e0bffb17 	ldw	r2,-20(fp)
   80820:	1000031e 	bne	r2,zero,80830 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   80824:	01000c04 	movi	r4,48
   80828:	00809740 	call	80974 <alt_putchar>
                        continue;
   8082c:	00004206 	br	80938 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   80830:	00800704 	movi	r2,28
   80834:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   80838:	00000306 	br	80848 <alt_printf+0x100>
                        digit_shift -= 4;
   8083c:	e0bff917 	ldw	r2,-28(fp)
   80840:	10bfff04 	addi	r2,r2,-4
   80844:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80848:	00c003c4 	movi	r3,15
   8084c:	e0bff917 	ldw	r2,-28(fp)
   80850:	1884983a 	sll	r2,r3,r2
   80854:	1007883a 	mov	r3,r2
   80858:	e0bffb17 	ldw	r2,-20(fp)
   8085c:	1884703a 	and	r2,r3,r2
   80860:	103ff626 	beq	r2,zero,8083c <rx_descriptor_end+0xfff807dc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80864:	00001906 	br	808cc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80868:	00c003c4 	movi	r3,15
   8086c:	e0bff917 	ldw	r2,-28(fp)
   80870:	1884983a 	sll	r2,r3,r2
   80874:	1007883a 	mov	r3,r2
   80878:	e0bffb17 	ldw	r2,-20(fp)
   8087c:	1886703a 	and	r3,r3,r2
   80880:	e0bff917 	ldw	r2,-28(fp)
   80884:	1884d83a 	srl	r2,r3,r2
   80888:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   8088c:	e0bffc17 	ldw	r2,-16(fp)
   80890:	108002a8 	cmpgeui	r2,r2,10
   80894:	1000041e 	bne	r2,zero,808a8 <alt_printf+0x160>
                            c = '0' + digit;
   80898:	e0bffc17 	ldw	r2,-16(fp)
   8089c:	10800c04 	addi	r2,r2,48
   808a0:	e0bff805 	stb	r2,-32(fp)
   808a4:	00000306 	br	808b4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   808a8:	e0bffc17 	ldw	r2,-16(fp)
   808ac:	108015c4 	addi	r2,r2,87
   808b0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   808b4:	e0bff807 	ldb	r2,-32(fp)
   808b8:	1009883a 	mov	r4,r2
   808bc:	00809740 	call	80974 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   808c0:	e0bff917 	ldw	r2,-28(fp)
   808c4:	10bfff04 	addi	r2,r2,-4
   808c8:	e0bff915 	stw	r2,-28(fp)
   808cc:	e0bff917 	ldw	r2,-28(fp)
   808d0:	103fe50e 	bge	r2,zero,80868 <rx_descriptor_end+0xfff80808>
   808d4:	00001806 	br	80938 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   808d8:	e0bff807 	ldb	r2,-32(fp)
   808dc:	10801cd8 	cmpnei	r2,r2,115
   808e0:	1000151e 	bne	r2,zero,80938 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   808e4:	e0bffe17 	ldw	r2,-8(fp)
   808e8:	10c00104 	addi	r3,r2,4
   808ec:	e0fffe15 	stw	r3,-8(fp)
   808f0:	10800017 	ldw	r2,0(r2)
   808f4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   808f8:	00000906 	br	80920 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   808fc:	e0bffa17 	ldw	r2,-24(fp)
   80900:	10c00044 	addi	r3,r2,1
   80904:	e0fffa15 	stw	r3,-24(fp)
   80908:	10800003 	ldbu	r2,0(r2)
   8090c:	10803fcc 	andi	r2,r2,255
   80910:	1080201c 	xori	r2,r2,128
   80914:	10bfe004 	addi	r2,r2,-128
   80918:	1009883a 	mov	r4,r2
   8091c:	00809740 	call	80974 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   80920:	e0bffa17 	ldw	r2,-24(fp)
   80924:	10800003 	ldbu	r2,0(r2)
   80928:	10803fcc 	andi	r2,r2,255
   8092c:	1080201c 	xori	r2,r2,128
   80930:	10bfe004 	addi	r2,r2,-128
   80934:	103ff11e 	bne	r2,zero,808fc <rx_descriptor_end+0xfff8089c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80938:	e0bff717 	ldw	r2,-36(fp)
   8093c:	10c00044 	addi	r3,r2,1
   80940:	e0fff715 	stw	r3,-36(fp)
   80944:	10800003 	ldbu	r2,0(r2)
   80948:	e0bff805 	stb	r2,-32(fp)
   8094c:	e0bff807 	ldb	r2,-32(fp)
   80950:	103f8a1e 	bne	r2,zero,8077c <rx_descriptor_end+0xfff8071c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   80954:	00000106 	br	8095c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   80958:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   8095c:	0001883a 	nop
   80960:	e037883a 	mov	sp,fp
   80964:	dfc00117 	ldw	ra,4(sp)
   80968:	df000017 	ldw	fp,0(sp)
   8096c:	dec00504 	addi	sp,sp,20
   80970:	f800283a 	ret

00080974 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   80974:	defffd04 	addi	sp,sp,-12
   80978:	dfc00215 	stw	ra,8(sp)
   8097c:	df000115 	stw	fp,4(sp)
   80980:	df000104 	addi	fp,sp,4
   80984:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   80988:	d0a00c17 	ldw	r2,-32720(gp)
   8098c:	10800217 	ldw	r2,8(r2)
   80990:	100b883a 	mov	r5,r2
   80994:	e13fff17 	ldw	r4,-4(fp)
   80998:	008370c0 	call	8370c <putc>
#endif
#endif
}
   8099c:	e037883a 	mov	sp,fp
   809a0:	dfc00117 	ldw	ra,4(sp)
   809a4:	df000017 	ldw	fp,0(sp)
   809a8:	dec00204 	addi	sp,sp,8
   809ac:	f800283a 	ret

000809b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   809b0:	defffd04 	addi	sp,sp,-12
   809b4:	dfc00215 	stw	ra,8(sp)
   809b8:	df000115 	stw	fp,4(sp)
   809bc:	df000104 	addi	fp,sp,4
   809c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   809c4:	d1600404 	addi	r5,gp,-32752
   809c8:	e13fff17 	ldw	r4,-4(fp)
   809cc:	00826fc0 	call	826fc <alt_dev_llist_insert>
}
   809d0:	e037883a 	mov	sp,fp
   809d4:	dfc00117 	ldw	ra,4(sp)
   809d8:	df000017 	ldw	fp,0(sp)
   809dc:	dec00204 	addi	sp,sp,8
   809e0:	f800283a 	ret

000809e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   809e4:	defffd04 	addi	sp,sp,-12
   809e8:	dfc00215 	stw	ra,8(sp)
   809ec:	df000115 	stw	fp,4(sp)
   809f0:	df000104 	addi	fp,sp,4
   809f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   809f8:	00831600 	call	83160 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   809fc:	00800044 	movi	r2,1
   80a00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80a04:	0001883a 	nop
   80a08:	e037883a 	mov	sp,fp
   80a0c:	dfc00117 	ldw	ra,4(sp)
   80a10:	df000017 	ldw	fp,0(sp)
   80a14:	dec00204 	addi	sp,sp,8
   80a18:	f800283a 	ret

00080a1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80a1c:	defffe04 	addi	sp,sp,-8
   80a20:	dfc00115 	stw	ra,4(sp)
   80a24:	df000015 	stw	fp,0(sp)
   80a28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   80a2c:	01c000b4 	movhi	r7,2
   80a30:	39e1a804 	addi	r7,r7,-31072
   80a34:	018000c4 	movi	r6,3
   80a38:	000b883a 	mov	r5,zero
   80a3c:	01000434 	movhi	r4,16
   80a40:	21092004 	addi	r4,r4,9344
   80a44:	00823200 	call	82320 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80a48:	000d883a 	mov	r6,zero
   80a4c:	000b883a 	mov	r5,zero
   80a50:	01000234 	movhi	r4,8
   80a54:	2119cc04 	addi	r4,r4,26416
   80a58:	0080c100 	call	80c10 <altera_avalon_jtag_uart_init>
   80a5c:	01000234 	movhi	r4,8
   80a60:	2119c204 	addi	r4,r4,26376
   80a64:	00809b00 	call	809b0 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   80a68:	01800044 	movi	r6,1
   80a6c:	000b883a 	mov	r5,zero
   80a70:	01000234 	movhi	r4,8
   80a74:	211dda04 	addi	r4,r4,30568
   80a78:	00822000 	call	82200 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   80a7c:	01800084 	movi	r6,2
   80a80:	000b883a 	mov	r5,zero
   80a84:	01000234 	movhi	r4,8
   80a88:	211de604 	addi	r4,r4,30616
   80a8c:	00822000 	call	82200 <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   80a90:	0001883a 	nop
}
   80a94:	0001883a 	nop
   80a98:	e037883a 	mov	sp,fp
   80a9c:	dfc00117 	ldw	ra,4(sp)
   80aa0:	df000017 	ldw	fp,0(sp)
   80aa4:	dec00204 	addi	sp,sp,8
   80aa8:	f800283a 	ret

00080aac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80aac:	defffa04 	addi	sp,sp,-24
   80ab0:	dfc00515 	stw	ra,20(sp)
   80ab4:	df000415 	stw	fp,16(sp)
   80ab8:	df000404 	addi	fp,sp,16
   80abc:	e13ffd15 	stw	r4,-12(fp)
   80ac0:	e17ffe15 	stw	r5,-8(fp)
   80ac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80ac8:	e0bffd17 	ldw	r2,-12(fp)
   80acc:	10800017 	ldw	r2,0(r2)
   80ad0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80ad4:	e0bffc17 	ldw	r2,-16(fp)
   80ad8:	10c00a04 	addi	r3,r2,40
   80adc:	e0bffd17 	ldw	r2,-12(fp)
   80ae0:	10800217 	ldw	r2,8(r2)
   80ae4:	100f883a 	mov	r7,r2
   80ae8:	e1bfff17 	ldw	r6,-4(fp)
   80aec:	e17ffe17 	ldw	r5,-8(fp)
   80af0:	1809883a 	mov	r4,r3
   80af4:	00810d40 	call	810d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80af8:	e037883a 	mov	sp,fp
   80afc:	dfc00117 	ldw	ra,4(sp)
   80b00:	df000017 	ldw	fp,0(sp)
   80b04:	dec00204 	addi	sp,sp,8
   80b08:	f800283a 	ret

00080b0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80b0c:	defffa04 	addi	sp,sp,-24
   80b10:	dfc00515 	stw	ra,20(sp)
   80b14:	df000415 	stw	fp,16(sp)
   80b18:	df000404 	addi	fp,sp,16
   80b1c:	e13ffd15 	stw	r4,-12(fp)
   80b20:	e17ffe15 	stw	r5,-8(fp)
   80b24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80b28:	e0bffd17 	ldw	r2,-12(fp)
   80b2c:	10800017 	ldw	r2,0(r2)
   80b30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80b34:	e0bffc17 	ldw	r2,-16(fp)
   80b38:	10c00a04 	addi	r3,r2,40
   80b3c:	e0bffd17 	ldw	r2,-12(fp)
   80b40:	10800217 	ldw	r2,8(r2)
   80b44:	100f883a 	mov	r7,r2
   80b48:	e1bfff17 	ldw	r6,-4(fp)
   80b4c:	e17ffe17 	ldw	r5,-8(fp)
   80b50:	1809883a 	mov	r4,r3
   80b54:	00812f00 	call	812f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80b58:	e037883a 	mov	sp,fp
   80b5c:	dfc00117 	ldw	ra,4(sp)
   80b60:	df000017 	ldw	fp,0(sp)
   80b64:	dec00204 	addi	sp,sp,8
   80b68:	f800283a 	ret

00080b6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80b6c:	defffc04 	addi	sp,sp,-16
   80b70:	dfc00315 	stw	ra,12(sp)
   80b74:	df000215 	stw	fp,8(sp)
   80b78:	df000204 	addi	fp,sp,8
   80b7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80b80:	e0bfff17 	ldw	r2,-4(fp)
   80b84:	10800017 	ldw	r2,0(r2)
   80b88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80b8c:	e0bffe17 	ldw	r2,-8(fp)
   80b90:	10c00a04 	addi	r3,r2,40
   80b94:	e0bfff17 	ldw	r2,-4(fp)
   80b98:	10800217 	ldw	r2,8(r2)
   80b9c:	100b883a 	mov	r5,r2
   80ba0:	1809883a 	mov	r4,r3
   80ba4:	0080f7c0 	call	80f7c <altera_avalon_jtag_uart_close>
}
   80ba8:	e037883a 	mov	sp,fp
   80bac:	dfc00117 	ldw	ra,4(sp)
   80bb0:	df000017 	ldw	fp,0(sp)
   80bb4:	dec00204 	addi	sp,sp,8
   80bb8:	f800283a 	ret

00080bbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80bbc:	defffa04 	addi	sp,sp,-24
   80bc0:	dfc00515 	stw	ra,20(sp)
   80bc4:	df000415 	stw	fp,16(sp)
   80bc8:	df000404 	addi	fp,sp,16
   80bcc:	e13ffd15 	stw	r4,-12(fp)
   80bd0:	e17ffe15 	stw	r5,-8(fp)
   80bd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   80bd8:	e0bffd17 	ldw	r2,-12(fp)
   80bdc:	10800017 	ldw	r2,0(r2)
   80be0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80be4:	e0bffc17 	ldw	r2,-16(fp)
   80be8:	10800a04 	addi	r2,r2,40
   80bec:	e1bfff17 	ldw	r6,-4(fp)
   80bf0:	e17ffe17 	ldw	r5,-8(fp)
   80bf4:	1009883a 	mov	r4,r2
   80bf8:	0080fe40 	call	80fe4 <altera_avalon_jtag_uart_ioctl>
}
   80bfc:	e037883a 	mov	sp,fp
   80c00:	dfc00117 	ldw	ra,4(sp)
   80c04:	df000017 	ldw	fp,0(sp)
   80c08:	dec00204 	addi	sp,sp,8
   80c0c:	f800283a 	ret

00080c10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80c10:	defffa04 	addi	sp,sp,-24
   80c14:	dfc00515 	stw	ra,20(sp)
   80c18:	df000415 	stw	fp,16(sp)
   80c1c:	df000404 	addi	fp,sp,16
   80c20:	e13ffd15 	stw	r4,-12(fp)
   80c24:	e17ffe15 	stw	r5,-8(fp)
   80c28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80c2c:	e0bffd17 	ldw	r2,-12(fp)
   80c30:	00c00044 	movi	r3,1
   80c34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80c38:	e0bffd17 	ldw	r2,-12(fp)
   80c3c:	10800017 	ldw	r2,0(r2)
   80c40:	10800104 	addi	r2,r2,4
   80c44:	1007883a 	mov	r3,r2
   80c48:	e0bffd17 	ldw	r2,-12(fp)
   80c4c:	10800817 	ldw	r2,32(r2)
   80c50:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80c54:	e0bffe17 	ldw	r2,-8(fp)
   80c58:	e0ffff17 	ldw	r3,-4(fp)
   80c5c:	d8000015 	stw	zero,0(sp)
   80c60:	e1fffd17 	ldw	r7,-12(fp)
   80c64:	01800234 	movhi	r6,8
   80c68:	31833404 	addi	r6,r6,3280
   80c6c:	180b883a 	mov	r5,r3
   80c70:	1009883a 	mov	r4,r2
   80c74:	00829240 	call	82924 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80c78:	e0bffd17 	ldw	r2,-12(fp)
   80c7c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80c80:	e0bffd17 	ldw	r2,-12(fp)
   80c84:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   80c88:	d0e84817 	ldw	r3,-24288(gp)
   80c8c:	e1fffd17 	ldw	r7,-12(fp)
   80c90:	01800234 	movhi	r6,8
   80c94:	3183b704 	addi	r6,r6,3804
   80c98:	180b883a 	mov	r5,r3
   80c9c:	1009883a 	mov	r4,r2
   80ca0:	008239c0 	call	8239c <alt_alarm_start>
   80ca4:	1000040e 	bge	r2,zero,80cb8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80ca8:	e0fffd17 	ldw	r3,-12(fp)
   80cac:	00a00034 	movhi	r2,32768
   80cb0:	10bfffc4 	addi	r2,r2,-1
   80cb4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80cb8:	0001883a 	nop
   80cbc:	e037883a 	mov	sp,fp
   80cc0:	dfc00117 	ldw	ra,4(sp)
   80cc4:	df000017 	ldw	fp,0(sp)
   80cc8:	dec00204 	addi	sp,sp,8
   80ccc:	f800283a 	ret

00080cd0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   80cd0:	defff804 	addi	sp,sp,-32
   80cd4:	df000715 	stw	fp,28(sp)
   80cd8:	df000704 	addi	fp,sp,28
   80cdc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   80ce0:	e0bfff17 	ldw	r2,-4(fp)
   80ce4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   80ce8:	e0bffb17 	ldw	r2,-20(fp)
   80cec:	10800017 	ldw	r2,0(r2)
   80cf0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80cf4:	e0bffc17 	ldw	r2,-16(fp)
   80cf8:	10800104 	addi	r2,r2,4
   80cfc:	10800037 	ldwio	r2,0(r2)
   80d00:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80d04:	e0bffd17 	ldw	r2,-12(fp)
   80d08:	1080c00c 	andi	r2,r2,768
   80d0c:	10006d26 	beq	r2,zero,80ec4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80d10:	e0bffd17 	ldw	r2,-12(fp)
   80d14:	1080400c 	andi	r2,r2,256
   80d18:	10003526 	beq	r2,zero,80df0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   80d1c:	00800074 	movhi	r2,1
   80d20:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d24:	e0bffb17 	ldw	r2,-20(fp)
   80d28:	10800a17 	ldw	r2,40(r2)
   80d2c:	10800044 	addi	r2,r2,1
   80d30:	1081ffcc 	andi	r2,r2,2047
   80d34:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   80d38:	e0bffb17 	ldw	r2,-20(fp)
   80d3c:	10c00b17 	ldw	r3,44(r2)
   80d40:	e0bffe17 	ldw	r2,-8(fp)
   80d44:	18801526 	beq	r3,r2,80d9c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80d48:	e0bffc17 	ldw	r2,-16(fp)
   80d4c:	10800037 	ldwio	r2,0(r2)
   80d50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80d54:	e0bff917 	ldw	r2,-28(fp)
   80d58:	10a0000c 	andi	r2,r2,32768
   80d5c:	10001126 	beq	r2,zero,80da4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80d60:	e0bffb17 	ldw	r2,-20(fp)
   80d64:	10800a17 	ldw	r2,40(r2)
   80d68:	e0fff917 	ldw	r3,-28(fp)
   80d6c:	1809883a 	mov	r4,r3
   80d70:	e0fffb17 	ldw	r3,-20(fp)
   80d74:	1885883a 	add	r2,r3,r2
   80d78:	10800e04 	addi	r2,r2,56
   80d7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d80:	e0bffb17 	ldw	r2,-20(fp)
   80d84:	10800a17 	ldw	r2,40(r2)
   80d88:	10800044 	addi	r2,r2,1
   80d8c:	10c1ffcc 	andi	r3,r2,2047
   80d90:	e0bffb17 	ldw	r2,-20(fp)
   80d94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   80d98:	003fe206 	br	80d24 <rx_descriptor_end+0xfff80cc4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   80d9c:	0001883a 	nop
   80da0:	00000106 	br	80da8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   80da4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80da8:	e0bff917 	ldw	r2,-28(fp)
   80dac:	10bfffec 	andhi	r2,r2,65535
   80db0:	10000f26 	beq	r2,zero,80df0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80db4:	e0bffb17 	ldw	r2,-20(fp)
   80db8:	10c00817 	ldw	r3,32(r2)
   80dbc:	00bfff84 	movi	r2,-2
   80dc0:	1886703a 	and	r3,r3,r2
   80dc4:	e0bffb17 	ldw	r2,-20(fp)
   80dc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80dcc:	e0bffc17 	ldw	r2,-16(fp)
   80dd0:	10800104 	addi	r2,r2,4
   80dd4:	1007883a 	mov	r3,r2
   80dd8:	e0bffb17 	ldw	r2,-20(fp)
   80ddc:	10800817 	ldw	r2,32(r2)
   80de0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80de4:	e0bffc17 	ldw	r2,-16(fp)
   80de8:	10800104 	addi	r2,r2,4
   80dec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80df0:	e0bffd17 	ldw	r2,-12(fp)
   80df4:	1080800c 	andi	r2,r2,512
   80df8:	103fbe26 	beq	r2,zero,80cf4 <rx_descriptor_end+0xfff80c94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80dfc:	e0bffd17 	ldw	r2,-12(fp)
   80e00:	1004d43a 	srli	r2,r2,16
   80e04:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   80e08:	00001406 	br	80e5c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80e0c:	e0bffc17 	ldw	r2,-16(fp)
   80e10:	e0fffb17 	ldw	r3,-20(fp)
   80e14:	18c00d17 	ldw	r3,52(r3)
   80e18:	e13ffb17 	ldw	r4,-20(fp)
   80e1c:	20c7883a 	add	r3,r4,r3
   80e20:	18c20e04 	addi	r3,r3,2104
   80e24:	18c00003 	ldbu	r3,0(r3)
   80e28:	18c03fcc 	andi	r3,r3,255
   80e2c:	18c0201c 	xori	r3,r3,128
   80e30:	18ffe004 	addi	r3,r3,-128
   80e34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80e38:	e0bffb17 	ldw	r2,-20(fp)
   80e3c:	10800d17 	ldw	r2,52(r2)
   80e40:	10800044 	addi	r2,r2,1
   80e44:	10c1ffcc 	andi	r3,r2,2047
   80e48:	e0bffb17 	ldw	r2,-20(fp)
   80e4c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80e50:	e0bffa17 	ldw	r2,-24(fp)
   80e54:	10bfffc4 	addi	r2,r2,-1
   80e58:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80e5c:	e0bffa17 	ldw	r2,-24(fp)
   80e60:	10000526 	beq	r2,zero,80e78 <altera_avalon_jtag_uart_irq+0x1a8>
   80e64:	e0bffb17 	ldw	r2,-20(fp)
   80e68:	10c00d17 	ldw	r3,52(r2)
   80e6c:	e0bffb17 	ldw	r2,-20(fp)
   80e70:	10800c17 	ldw	r2,48(r2)
   80e74:	18bfe51e 	bne	r3,r2,80e0c <rx_descriptor_end+0xfff80dac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   80e78:	e0bffa17 	ldw	r2,-24(fp)
   80e7c:	103f9d26 	beq	r2,zero,80cf4 <rx_descriptor_end+0xfff80c94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80e80:	e0bffb17 	ldw	r2,-20(fp)
   80e84:	10c00817 	ldw	r3,32(r2)
   80e88:	00bfff44 	movi	r2,-3
   80e8c:	1886703a 	and	r3,r3,r2
   80e90:	e0bffb17 	ldw	r2,-20(fp)
   80e94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80e98:	e0bffb17 	ldw	r2,-20(fp)
   80e9c:	10800017 	ldw	r2,0(r2)
   80ea0:	10800104 	addi	r2,r2,4
   80ea4:	1007883a 	mov	r3,r2
   80ea8:	e0bffb17 	ldw	r2,-20(fp)
   80eac:	10800817 	ldw	r2,32(r2)
   80eb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80eb4:	e0bffc17 	ldw	r2,-16(fp)
   80eb8:	10800104 	addi	r2,r2,4
   80ebc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   80ec0:	003f8c06 	br	80cf4 <rx_descriptor_end+0xfff80c94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   80ec4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   80ec8:	0001883a 	nop
   80ecc:	e037883a 	mov	sp,fp
   80ed0:	df000017 	ldw	fp,0(sp)
   80ed4:	dec00104 	addi	sp,sp,4
   80ed8:	f800283a 	ret

00080edc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   80edc:	defff804 	addi	sp,sp,-32
   80ee0:	df000715 	stw	fp,28(sp)
   80ee4:	df000704 	addi	fp,sp,28
   80ee8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   80eec:	e0bffb17 	ldw	r2,-20(fp)
   80ef0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80ef4:	e0bff917 	ldw	r2,-28(fp)
   80ef8:	10800017 	ldw	r2,0(r2)
   80efc:	10800104 	addi	r2,r2,4
   80f00:	10800037 	ldwio	r2,0(r2)
   80f04:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   80f08:	e0bffa17 	ldw	r2,-24(fp)
   80f0c:	1081000c 	andi	r2,r2,1024
   80f10:	10000b26 	beq	r2,zero,80f40 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80f14:	e0bff917 	ldw	r2,-28(fp)
   80f18:	10800017 	ldw	r2,0(r2)
   80f1c:	10800104 	addi	r2,r2,4
   80f20:	1007883a 	mov	r3,r2
   80f24:	e0bff917 	ldw	r2,-28(fp)
   80f28:	10800817 	ldw	r2,32(r2)
   80f2c:	10810014 	ori	r2,r2,1024
   80f30:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   80f34:	e0bff917 	ldw	r2,-28(fp)
   80f38:	10000915 	stw	zero,36(r2)
   80f3c:	00000a06 	br	80f68 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   80f40:	e0bff917 	ldw	r2,-28(fp)
   80f44:	10c00917 	ldw	r3,36(r2)
   80f48:	00a00034 	movhi	r2,32768
   80f4c:	10bfff04 	addi	r2,r2,-4
   80f50:	10c00536 	bltu	r2,r3,80f68 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   80f54:	e0bff917 	ldw	r2,-28(fp)
   80f58:	10800917 	ldw	r2,36(r2)
   80f5c:	10c00044 	addi	r3,r2,1
   80f60:	e0bff917 	ldw	r2,-28(fp)
   80f64:	10c00915 	stw	r3,36(r2)
   80f68:	d0a84817 	ldw	r2,-24288(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80f6c:	e037883a 	mov	sp,fp
   80f70:	df000017 	ldw	fp,0(sp)
   80f74:	dec00104 	addi	sp,sp,4
   80f78:	f800283a 	ret

00080f7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   80f7c:	defffd04 	addi	sp,sp,-12
   80f80:	df000215 	stw	fp,8(sp)
   80f84:	df000204 	addi	fp,sp,8
   80f88:	e13ffe15 	stw	r4,-8(fp)
   80f8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80f90:	00000506 	br	80fa8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   80f94:	e0bfff17 	ldw	r2,-4(fp)
   80f98:	1090000c 	andi	r2,r2,16384
   80f9c:	10000226 	beq	r2,zero,80fa8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   80fa0:	00bffd44 	movi	r2,-11
   80fa4:	00000b06 	br	80fd4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80fa8:	e0bffe17 	ldw	r2,-8(fp)
   80fac:	10c00d17 	ldw	r3,52(r2)
   80fb0:	e0bffe17 	ldw	r2,-8(fp)
   80fb4:	10800c17 	ldw	r2,48(r2)
   80fb8:	18800526 	beq	r3,r2,80fd0 <altera_avalon_jtag_uart_close+0x54>
   80fbc:	e0bffe17 	ldw	r2,-8(fp)
   80fc0:	10c00917 	ldw	r3,36(r2)
   80fc4:	e0bffe17 	ldw	r2,-8(fp)
   80fc8:	10800117 	ldw	r2,4(r2)
   80fcc:	18bff136 	bltu	r3,r2,80f94 <rx_descriptor_end+0xfff80f34>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   80fd0:	0005883a 	mov	r2,zero
}
   80fd4:	e037883a 	mov	sp,fp
   80fd8:	df000017 	ldw	fp,0(sp)
   80fdc:	dec00104 	addi	sp,sp,4
   80fe0:	f800283a 	ret

00080fe4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   80fe4:	defffa04 	addi	sp,sp,-24
   80fe8:	df000515 	stw	fp,20(sp)
   80fec:	df000504 	addi	fp,sp,20
   80ff0:	e13ffd15 	stw	r4,-12(fp)
   80ff4:	e17ffe15 	stw	r5,-8(fp)
   80ff8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   80ffc:	00bff9c4 	movi	r2,-25
   81000:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   81004:	e0bffe17 	ldw	r2,-8(fp)
   81008:	10da8060 	cmpeqi	r3,r2,27137
   8100c:	1800031e 	bne	r3,zero,8101c <altera_avalon_jtag_uart_ioctl+0x38>
   81010:	109a80a0 	cmpeqi	r2,r2,27138
   81014:	1000181e 	bne	r2,zero,81078 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   81018:	00002906 	br	810c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8101c:	e0bffd17 	ldw	r2,-12(fp)
   81020:	10c00117 	ldw	r3,4(r2)
   81024:	00a00034 	movhi	r2,32768
   81028:	10bfffc4 	addi	r2,r2,-1
   8102c:	18802126 	beq	r3,r2,810b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   81030:	e0bfff17 	ldw	r2,-4(fp)
   81034:	10800017 	ldw	r2,0(r2)
   81038:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8103c:	e0bffc17 	ldw	r2,-16(fp)
   81040:	10800090 	cmplti	r2,r2,2
   81044:	1000061e 	bne	r2,zero,81060 <altera_avalon_jtag_uart_ioctl+0x7c>
   81048:	e0fffc17 	ldw	r3,-16(fp)
   8104c:	00a00034 	movhi	r2,32768
   81050:	10bfffc4 	addi	r2,r2,-1
   81054:	18800226 	beq	r3,r2,81060 <altera_avalon_jtag_uart_ioctl+0x7c>
   81058:	e0bffc17 	ldw	r2,-16(fp)
   8105c:	00000206 	br	81068 <altera_avalon_jtag_uart_ioctl+0x84>
   81060:	00a00034 	movhi	r2,32768
   81064:	10bfff84 	addi	r2,r2,-2
   81068:	e0fffd17 	ldw	r3,-12(fp)
   8106c:	18800115 	stw	r2,4(r3)
      rc = 0;
   81070:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   81074:	00000f06 	br	810b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   81078:	e0bffd17 	ldw	r2,-12(fp)
   8107c:	10c00117 	ldw	r3,4(r2)
   81080:	00a00034 	movhi	r2,32768
   81084:	10bfffc4 	addi	r2,r2,-1
   81088:	18800c26 	beq	r3,r2,810bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8108c:	e0bffd17 	ldw	r2,-12(fp)
   81090:	10c00917 	ldw	r3,36(r2)
   81094:	e0bffd17 	ldw	r2,-12(fp)
   81098:	10800117 	ldw	r2,4(r2)
   8109c:	1885803a 	cmpltu	r2,r3,r2
   810a0:	10c03fcc 	andi	r3,r2,255
   810a4:	e0bfff17 	ldw	r2,-4(fp)
   810a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   810ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   810b0:	00000206 	br	810bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   810b4:	0001883a 	nop
   810b8:	00000106 	br	810c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   810bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   810c0:	e0bffb17 	ldw	r2,-20(fp)
}
   810c4:	e037883a 	mov	sp,fp
   810c8:	df000017 	ldw	fp,0(sp)
   810cc:	dec00104 	addi	sp,sp,4
   810d0:	f800283a 	ret

000810d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   810d4:	defff304 	addi	sp,sp,-52
   810d8:	dfc00c15 	stw	ra,48(sp)
   810dc:	df000b15 	stw	fp,44(sp)
   810e0:	df000b04 	addi	fp,sp,44
   810e4:	e13ffc15 	stw	r4,-16(fp)
   810e8:	e17ffd15 	stw	r5,-12(fp)
   810ec:	e1bffe15 	stw	r6,-8(fp)
   810f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   810f4:	e0bffd17 	ldw	r2,-12(fp)
   810f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   810fc:	00004706 	br	8121c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   81100:	e0bffc17 	ldw	r2,-16(fp)
   81104:	10800a17 	ldw	r2,40(r2)
   81108:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8110c:	e0bffc17 	ldw	r2,-16(fp)
   81110:	10800b17 	ldw	r2,44(r2)
   81114:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   81118:	e0fff717 	ldw	r3,-36(fp)
   8111c:	e0bff817 	ldw	r2,-32(fp)
   81120:	18800536 	bltu	r3,r2,81138 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   81124:	e0fff717 	ldw	r3,-36(fp)
   81128:	e0bff817 	ldw	r2,-32(fp)
   8112c:	1885c83a 	sub	r2,r3,r2
   81130:	e0bff615 	stw	r2,-40(fp)
   81134:	00000406 	br	81148 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81138:	00c20004 	movi	r3,2048
   8113c:	e0bff817 	ldw	r2,-32(fp)
   81140:	1885c83a 	sub	r2,r3,r2
   81144:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81148:	e0bff617 	ldw	r2,-40(fp)
   8114c:	10001e26 	beq	r2,zero,811c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   81150:	e0fffe17 	ldw	r3,-8(fp)
   81154:	e0bff617 	ldw	r2,-40(fp)
   81158:	1880022e 	bgeu	r3,r2,81164 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8115c:	e0bffe17 	ldw	r2,-8(fp)
   81160:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   81164:	e0bffc17 	ldw	r2,-16(fp)
   81168:	10c00e04 	addi	r3,r2,56
   8116c:	e0bff817 	ldw	r2,-32(fp)
   81170:	1885883a 	add	r2,r3,r2
   81174:	e1bff617 	ldw	r6,-40(fp)
   81178:	100b883a 	mov	r5,r2
   8117c:	e13ff517 	ldw	r4,-44(fp)
   81180:	00835240 	call	83524 <memcpy>
      ptr   += n;
   81184:	e0fff517 	ldw	r3,-44(fp)
   81188:	e0bff617 	ldw	r2,-40(fp)
   8118c:	1885883a 	add	r2,r3,r2
   81190:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   81194:	e0fffe17 	ldw	r3,-8(fp)
   81198:	e0bff617 	ldw	r2,-40(fp)
   8119c:	1885c83a 	sub	r2,r3,r2
   811a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   811a4:	e0fff817 	ldw	r3,-32(fp)
   811a8:	e0bff617 	ldw	r2,-40(fp)
   811ac:	1885883a 	add	r2,r3,r2
   811b0:	10c1ffcc 	andi	r3,r2,2047
   811b4:	e0bffc17 	ldw	r2,-16(fp)
   811b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   811bc:	e0bffe17 	ldw	r2,-8(fp)
   811c0:	00bfcf16 	blt	zero,r2,81100 <rx_descriptor_end+0xfff810a0>
   811c4:	00000106 	br	811cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   811c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   811cc:	e0fff517 	ldw	r3,-44(fp)
   811d0:	e0bffd17 	ldw	r2,-12(fp)
   811d4:	1880141e 	bne	r3,r2,81228 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   811d8:	e0bfff17 	ldw	r2,-4(fp)
   811dc:	1090000c 	andi	r2,r2,16384
   811e0:	1000131e 	bne	r2,zero,81230 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   811e4:	0001883a 	nop
   811e8:	e0bffc17 	ldw	r2,-16(fp)
   811ec:	10c00a17 	ldw	r3,40(r2)
   811f0:	e0bff717 	ldw	r2,-36(fp)
   811f4:	1880051e 	bne	r3,r2,8120c <altera_avalon_jtag_uart_read+0x138>
   811f8:	e0bffc17 	ldw	r2,-16(fp)
   811fc:	10c00917 	ldw	r3,36(r2)
   81200:	e0bffc17 	ldw	r2,-16(fp)
   81204:	10800117 	ldw	r2,4(r2)
   81208:	18bff736 	bltu	r3,r2,811e8 <rx_descriptor_end+0xfff81188>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8120c:	e0bffc17 	ldw	r2,-16(fp)
   81210:	10c00a17 	ldw	r3,40(r2)
   81214:	e0bff717 	ldw	r2,-36(fp)
   81218:	18800726 	beq	r3,r2,81238 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8121c:	e0bffe17 	ldw	r2,-8(fp)
   81220:	00bfb716 	blt	zero,r2,81100 <rx_descriptor_end+0xfff810a0>
   81224:	00000506 	br	8123c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   81228:	0001883a 	nop
   8122c:	00000306 	br	8123c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   81230:	0001883a 	nop
   81234:	00000106 	br	8123c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   81238:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8123c:	e0fff517 	ldw	r3,-44(fp)
   81240:	e0bffd17 	ldw	r2,-12(fp)
   81244:	18801826 	beq	r3,r2,812a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81248:	0005303a 	rdctl	r2,status
   8124c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81250:	e0fffb17 	ldw	r3,-20(fp)
   81254:	00bfff84 	movi	r2,-2
   81258:	1884703a 	and	r2,r3,r2
   8125c:	1001703a 	wrctl	status,r2
  
  return context;
   81260:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   81264:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81268:	e0bffc17 	ldw	r2,-16(fp)
   8126c:	10800817 	ldw	r2,32(r2)
   81270:	10c00054 	ori	r3,r2,1
   81274:	e0bffc17 	ldw	r2,-16(fp)
   81278:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8127c:	e0bffc17 	ldw	r2,-16(fp)
   81280:	10800017 	ldw	r2,0(r2)
   81284:	10800104 	addi	r2,r2,4
   81288:	1007883a 	mov	r3,r2
   8128c:	e0bffc17 	ldw	r2,-16(fp)
   81290:	10800817 	ldw	r2,32(r2)
   81294:	18800035 	stwio	r2,0(r3)
   81298:	e0bffa17 	ldw	r2,-24(fp)
   8129c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   812a0:	e0bff917 	ldw	r2,-28(fp)
   812a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   812a8:	e0fff517 	ldw	r3,-44(fp)
   812ac:	e0bffd17 	ldw	r2,-12(fp)
   812b0:	18800426 	beq	r3,r2,812c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   812b4:	e0fff517 	ldw	r3,-44(fp)
   812b8:	e0bffd17 	ldw	r2,-12(fp)
   812bc:	1885c83a 	sub	r2,r3,r2
   812c0:	00000606 	br	812dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   812c4:	e0bfff17 	ldw	r2,-4(fp)
   812c8:	1090000c 	andi	r2,r2,16384
   812cc:	10000226 	beq	r2,zero,812d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   812d0:	00bffd44 	movi	r2,-11
   812d4:	00000106 	br	812dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   812d8:	00bffec4 	movi	r2,-5
}
   812dc:	e037883a 	mov	sp,fp
   812e0:	dfc00117 	ldw	ra,4(sp)
   812e4:	df000017 	ldw	fp,0(sp)
   812e8:	dec00204 	addi	sp,sp,8
   812ec:	f800283a 	ret

000812f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   812f0:	defff304 	addi	sp,sp,-52
   812f4:	dfc00c15 	stw	ra,48(sp)
   812f8:	df000b15 	stw	fp,44(sp)
   812fc:	df000b04 	addi	fp,sp,44
   81300:	e13ffc15 	stw	r4,-16(fp)
   81304:	e17ffd15 	stw	r5,-12(fp)
   81308:	e1bffe15 	stw	r6,-8(fp)
   8130c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   81310:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   81314:	e0bffd17 	ldw	r2,-12(fp)
   81318:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8131c:	00003706 	br	813fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   81320:	e0bffc17 	ldw	r2,-16(fp)
   81324:	10800c17 	ldw	r2,48(r2)
   81328:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8132c:	e0bffc17 	ldw	r2,-16(fp)
   81330:	10800d17 	ldw	r2,52(r2)
   81334:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   81338:	e0fff917 	ldw	r3,-28(fp)
   8133c:	e0bff517 	ldw	r2,-44(fp)
   81340:	1880062e 	bgeu	r3,r2,8135c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   81344:	e0fff517 	ldw	r3,-44(fp)
   81348:	e0bff917 	ldw	r2,-28(fp)
   8134c:	1885c83a 	sub	r2,r3,r2
   81350:	10bfffc4 	addi	r2,r2,-1
   81354:	e0bff615 	stw	r2,-40(fp)
   81358:	00000b06 	br	81388 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8135c:	e0bff517 	ldw	r2,-44(fp)
   81360:	10000526 	beq	r2,zero,81378 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   81364:	00c20004 	movi	r3,2048
   81368:	e0bff917 	ldw	r2,-28(fp)
   8136c:	1885c83a 	sub	r2,r3,r2
   81370:	e0bff615 	stw	r2,-40(fp)
   81374:	00000406 	br	81388 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   81378:	00c1ffc4 	movi	r3,2047
   8137c:	e0bff917 	ldw	r2,-28(fp)
   81380:	1885c83a 	sub	r2,r3,r2
   81384:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81388:	e0bff617 	ldw	r2,-40(fp)
   8138c:	10001e26 	beq	r2,zero,81408 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   81390:	e0fffe17 	ldw	r3,-8(fp)
   81394:	e0bff617 	ldw	r2,-40(fp)
   81398:	1880022e 	bgeu	r3,r2,813a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8139c:	e0bffe17 	ldw	r2,-8(fp)
   813a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   813a4:	e0bffc17 	ldw	r2,-16(fp)
   813a8:	10c20e04 	addi	r3,r2,2104
   813ac:	e0bff917 	ldw	r2,-28(fp)
   813b0:	1885883a 	add	r2,r3,r2
   813b4:	e1bff617 	ldw	r6,-40(fp)
   813b8:	e17ffd17 	ldw	r5,-12(fp)
   813bc:	1009883a 	mov	r4,r2
   813c0:	00835240 	call	83524 <memcpy>
      ptr   += n;
   813c4:	e0fffd17 	ldw	r3,-12(fp)
   813c8:	e0bff617 	ldw	r2,-40(fp)
   813cc:	1885883a 	add	r2,r3,r2
   813d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   813d4:	e0fffe17 	ldw	r3,-8(fp)
   813d8:	e0bff617 	ldw	r2,-40(fp)
   813dc:	1885c83a 	sub	r2,r3,r2
   813e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   813e4:	e0fff917 	ldw	r3,-28(fp)
   813e8:	e0bff617 	ldw	r2,-40(fp)
   813ec:	1885883a 	add	r2,r3,r2
   813f0:	10c1ffcc 	andi	r3,r2,2047
   813f4:	e0bffc17 	ldw	r2,-16(fp)
   813f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   813fc:	e0bffe17 	ldw	r2,-8(fp)
   81400:	00bfc716 	blt	zero,r2,81320 <rx_descriptor_end+0xfff812c0>
   81404:	00000106 	br	8140c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   81408:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8140c:	0005303a 	rdctl	r2,status
   81410:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81414:	e0fffb17 	ldw	r3,-20(fp)
   81418:	00bfff84 	movi	r2,-2
   8141c:	1884703a 	and	r2,r3,r2
   81420:	1001703a 	wrctl	status,r2
  
  return context;
   81424:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   81428:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8142c:	e0bffc17 	ldw	r2,-16(fp)
   81430:	10800817 	ldw	r2,32(r2)
   81434:	10c00094 	ori	r3,r2,2
   81438:	e0bffc17 	ldw	r2,-16(fp)
   8143c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81440:	e0bffc17 	ldw	r2,-16(fp)
   81444:	10800017 	ldw	r2,0(r2)
   81448:	10800104 	addi	r2,r2,4
   8144c:	1007883a 	mov	r3,r2
   81450:	e0bffc17 	ldw	r2,-16(fp)
   81454:	10800817 	ldw	r2,32(r2)
   81458:	18800035 	stwio	r2,0(r3)
   8145c:	e0bffa17 	ldw	r2,-24(fp)
   81460:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81464:	e0bff817 	ldw	r2,-32(fp)
   81468:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8146c:	e0bffe17 	ldw	r2,-8(fp)
   81470:	0080100e 	bge	zero,r2,814b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   81474:	e0bfff17 	ldw	r2,-4(fp)
   81478:	1090000c 	andi	r2,r2,16384
   8147c:	1000101e 	bne	r2,zero,814c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   81480:	0001883a 	nop
   81484:	e0bffc17 	ldw	r2,-16(fp)
   81488:	10c00d17 	ldw	r3,52(r2)
   8148c:	e0bff517 	ldw	r2,-44(fp)
   81490:	1880051e 	bne	r3,r2,814a8 <altera_avalon_jtag_uart_write+0x1b8>
   81494:	e0bffc17 	ldw	r2,-16(fp)
   81498:	10c00917 	ldw	r3,36(r2)
   8149c:	e0bffc17 	ldw	r2,-16(fp)
   814a0:	10800117 	ldw	r2,4(r2)
   814a4:	18bff736 	bltu	r3,r2,81484 <rx_descriptor_end+0xfff81424>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   814a8:	e0bffc17 	ldw	r2,-16(fp)
   814ac:	10800917 	ldw	r2,36(r2)
   814b0:	1000051e 	bne	r2,zero,814c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   814b4:	e0bffe17 	ldw	r2,-8(fp)
   814b8:	00bfd016 	blt	zero,r2,813fc <rx_descriptor_end+0xfff8139c>
   814bc:	00000306 	br	814cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   814c0:	0001883a 	nop
   814c4:	00000106 	br	814cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   814c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   814cc:	e0fffd17 	ldw	r3,-12(fp)
   814d0:	e0bff717 	ldw	r2,-36(fp)
   814d4:	18800426 	beq	r3,r2,814e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   814d8:	e0fffd17 	ldw	r3,-12(fp)
   814dc:	e0bff717 	ldw	r2,-36(fp)
   814e0:	1885c83a 	sub	r2,r3,r2
   814e4:	00000606 	br	81500 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   814e8:	e0bfff17 	ldw	r2,-4(fp)
   814ec:	1090000c 	andi	r2,r2,16384
   814f0:	10000226 	beq	r2,zero,814fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   814f4:	00bffd44 	movi	r2,-11
   814f8:	00000106 	br	81500 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   814fc:	00bffec4 	movi	r2,-5
}
   81500:	e037883a 	mov	sp,fp
   81504:	dfc00117 	ldw	ra,4(sp)
   81508:	df000017 	ldw	fp,0(sp)
   8150c:	dec00204 	addi	sp,sp,8
   81510:	f800283a 	ret

00081514 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81514:	defffe04 	addi	sp,sp,-8
   81518:	dfc00115 	stw	ra,4(sp)
   8151c:	df000015 	stw	fp,0(sp)
   81520:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81524:	d0a00717 	ldw	r2,-32740(gp)
   81528:	10000326 	beq	r2,zero,81538 <alt_get_errno+0x24>
   8152c:	d0a00717 	ldw	r2,-32740(gp)
   81530:	103ee83a 	callr	r2
   81534:	00000106 	br	8153c <alt_get_errno+0x28>
   81538:	d0a84b04 	addi	r2,gp,-24276
}
   8153c:	e037883a 	mov	sp,fp
   81540:	dfc00117 	ldw	ra,4(sp)
   81544:	df000017 	ldw	fp,0(sp)
   81548:	dec00204 	addi	sp,sp,8
   8154c:	f800283a 	ret

00081550 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81550:	defffc04 	addi	sp,sp,-16
   81554:	df000315 	stw	fp,12(sp)
   81558:	df000304 	addi	fp,sp,12
   8155c:	e13ffe15 	stw	r4,-8(fp)
   81560:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81564:	e0bffe17 	ldw	r2,-8(fp)
   81568:	10800317 	ldw	r2,12(r2)
   8156c:	10800037 	ldwio	r2,0(r2)
   81570:	1080040c 	andi	r2,r2,16
   81574:	10000226 	beq	r2,zero,81580 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   81578:	00bffc04 	movi	r2,-16
   8157c:	00003906 	br	81664 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81580:	e0bffe17 	ldw	r2,-8(fp)
   81584:	10800317 	ldw	r2,12(r2)
   81588:	10800404 	addi	r2,r2,16
   8158c:	e0fffe17 	ldw	r3,-8(fp)
   81590:	18c00317 	ldw	r3,12(r3)
   81594:	18c00404 	addi	r3,r3,16
   81598:	19000037 	ldwio	r4,0(r3)
   8159c:	00fff7c4 	movi	r3,-33
   815a0:	20c6703a 	and	r3,r4,r3
   815a4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   815a8:	e0bffe17 	ldw	r2,-8(fp)
   815ac:	10800317 	ldw	r2,12(r2)
   815b0:	00c03fc4 	movi	r3,255
   815b4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   815b8:	e0bffe17 	ldw	r2,-8(fp)
   815bc:	10800317 	ldw	r2,12(r2)
   815c0:	10800804 	addi	r2,r2,32
   815c4:	e0ffff17 	ldw	r3,-4(fp)
   815c8:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   815cc:	e0bffe17 	ldw	r2,-8(fp)
   815d0:	10800917 	ldw	r2,36(r2)
   815d4:	10001126 	beq	r2,zero,8161c <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   815d8:	e0bffe17 	ldw	r2,-8(fp)
   815dc:	10800317 	ldw	r2,12(r2)
   815e0:	10800404 	addi	r2,r2,16
   815e4:	10800037 	ldwio	r2,0(r2)
   815e8:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   815ec:	e0bffe17 	ldw	r2,-8(fp)
   815f0:	10c00b17 	ldw	r3,44(r2)
   815f4:	e0bffd17 	ldw	r2,-12(fp)
   815f8:	1884b03a 	or	r2,r3,r2
   815fc:	10801814 	ori	r2,r2,96
   81600:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81604:	e0bffe17 	ldw	r2,-8(fp)
   81608:	10800317 	ldw	r2,12(r2)
   8160c:	10800404 	addi	r2,r2,16
   81610:	e0fffd17 	ldw	r3,-12(fp)
   81614:	10c00035 	stwio	r3,0(r2)
   81618:	00001106 	br	81660 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8161c:	e0bffe17 	ldw	r2,-8(fp)
   81620:	10800317 	ldw	r2,12(r2)
   81624:	10800404 	addi	r2,r2,16
   81628:	10800037 	ldwio	r2,0(r2)
   8162c:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   81630:	e0bffd17 	ldw	r2,-12(fp)
   81634:	10801814 	ori	r2,r2,96
   81638:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   8163c:	e0fffd17 	ldw	r3,-12(fp)
   81640:	00bffbc4 	movi	r2,-17
   81644:	1884703a 	and	r2,r3,r2
   81648:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8164c:	e0bffe17 	ldw	r2,-8(fp)
   81650:	10800317 	ldw	r2,12(r2)
   81654:	10800404 	addi	r2,r2,16
   81658:	e0fffd17 	ldw	r3,-12(fp)
   8165c:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   81660:	0005883a 	mov	r2,zero
}
   81664:	e037883a 	mov	sp,fp
   81668:	df000017 	ldw	fp,0(sp)
   8166c:	dec00104 	addi	sp,sp,4
   81670:	f800283a 	ret

00081674 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81674:	defffc04 	addi	sp,sp,-16
   81678:	df000315 	stw	fp,12(sp)
   8167c:	df000304 	addi	fp,sp,12
   81680:	e13ffe15 	stw	r4,-8(fp)
   81684:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81688:	0001883a 	nop
   8168c:	e0bffe17 	ldw	r2,-8(fp)
   81690:	10800317 	ldw	r2,12(r2)
   81694:	10800037 	ldwio	r2,0(r2)
   81698:	1080040c 	andi	r2,r2,16
   8169c:	103ffb1e 	bne	r2,zero,8168c <rx_descriptor_end+0xfff8162c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   816a0:	e0bffe17 	ldw	r2,-8(fp)
   816a4:	10800317 	ldw	r2,12(r2)
   816a8:	10800404 	addi	r2,r2,16
   816ac:	e0fffe17 	ldw	r3,-8(fp)
   816b0:	18c00317 	ldw	r3,12(r3)
   816b4:	18c00404 	addi	r3,r3,16
   816b8:	19000037 	ldwio	r4,0(r3)
   816bc:	00fff7c4 	movi	r3,-33
   816c0:	20c6703a 	and	r3,r4,r3
   816c4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   816c8:	e0bffe17 	ldw	r2,-8(fp)
   816cc:	10800317 	ldw	r2,12(r2)
   816d0:	00c03fc4 	movi	r3,255
   816d4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   816d8:	e0bffe17 	ldw	r2,-8(fp)
   816dc:	10800317 	ldw	r2,12(r2)
   816e0:	10800804 	addi	r2,r2,32
   816e4:	e0ffff17 	ldw	r3,-4(fp)
   816e8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   816ec:	e0bffe17 	ldw	r2,-8(fp)
   816f0:	10800317 	ldw	r2,12(r2)
   816f4:	10800404 	addi	r2,r2,16
   816f8:	e0fffe17 	ldw	r3,-8(fp)
   816fc:	18c00317 	ldw	r3,12(r3)
   81700:	18c00404 	addi	r3,r3,16
   81704:	18c00037 	ldwio	r3,0(r3)
   81708:	18c01814 	ori	r3,r3,96
   8170c:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81710:	0001883a 	nop
   81714:	e0bffe17 	ldw	r2,-8(fp)
   81718:	10800317 	ldw	r2,12(r2)
   8171c:	10800037 	ldwio	r2,0(r2)
   81720:	1080040c 	andi	r2,r2,16
   81724:	103ffb1e 	bne	r2,zero,81714 <rx_descriptor_end+0xfff816b4>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81728:	e0bffe17 	ldw	r2,-8(fp)
   8172c:	10800317 	ldw	r2,12(r2)
   81730:	10800404 	addi	r2,r2,16
   81734:	e0fffe17 	ldw	r3,-8(fp)
   81738:	18c00317 	ldw	r3,12(r3)
   8173c:	18c00404 	addi	r3,r3,16
   81740:	19000037 	ldwio	r4,0(r3)
   81744:	00fff7c4 	movi	r3,-33
   81748:	20c6703a 	and	r3,r4,r3
   8174c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   81750:	e0bffe17 	ldw	r2,-8(fp)
   81754:	10800317 	ldw	r2,12(r2)
   81758:	10800037 	ldwio	r2,0(r2)
   8175c:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81760:	e0bffe17 	ldw	r2,-8(fp)
   81764:	10800317 	ldw	r2,12(r2)
   81768:	00c03fc4 	movi	r3,255
   8176c:	10c00035 	stwio	r3,0(r2)

  return status;
   81770:	e0bffd03 	ldbu	r2,-12(fp)
}
   81774:	e037883a 	mov	sp,fp
   81778:	df000017 	ldw	fp,0(sp)
   8177c:	dec00104 	addi	sp,sp,4
   81780:	f800283a 	ret

00081784 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   81784:	defff404 	addi	sp,sp,-48
   81788:	dfc00b15 	stw	ra,44(sp)
   8178c:	df000a15 	stw	fp,40(sp)
   81790:	df000a04 	addi	fp,sp,40
   81794:	e13ffb15 	stw	r4,-20(fp)
   81798:	e17ffc15 	stw	r5,-16(fp)
   8179c:	e1bffd15 	stw	r6,-12(fp)
   817a0:	e1fffe15 	stw	r7,-8(fp)
   817a4:	e0800217 	ldw	r2,8(fp)
   817a8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   817ac:	e0bfff0b 	ldhu	r2,-4(fp)
   817b0:	d8000415 	stw	zero,16(sp)
   817b4:	d8000315 	stw	zero,12(sp)
   817b8:	e0c00417 	ldw	r3,16(fp)
   817bc:	d8c00215 	stw	r3,8(sp)
   817c0:	e0c00317 	ldw	r3,12(fp)
   817c4:	d8c00115 	stw	r3,4(sp)
   817c8:	d8800015 	stw	r2,0(sp)
   817cc:	e1fffe17 	ldw	r7,-8(fp)
   817d0:	e1bffd17 	ldw	r6,-12(fp)
   817d4:	e17ffc17 	ldw	r5,-16(fp)
   817d8:	e13ffb17 	ldw	r4,-20(fp)
   817dc:	00817f80 	call	817f8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   817e0:	0001883a 	nop
   817e4:	e037883a 	mov	sp,fp
   817e8:	dfc00117 	ldw	ra,4(sp)
   817ec:	df000017 	ldw	fp,0(sp)
   817f0:	dec00204 	addi	sp,sp,8
   817f4:	f800283a 	ret

000817f8 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   817f8:	defff204 	addi	sp,sp,-56
   817fc:	dfc00d15 	stw	ra,52(sp)
   81800:	df000c15 	stw	fp,48(sp)
   81804:	df000c04 	addi	fp,sp,48
   81808:	e13ffb15 	stw	r4,-20(fp)
   8180c:	e17ffc15 	stw	r5,-16(fp)
   81810:	e1bffd15 	stw	r6,-12(fp)
   81814:	e1fffe15 	stw	r7,-8(fp)
   81818:	e0800217 	ldw	r2,8(fp)
   8181c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81820:	e0bfff0b 	ldhu	r2,-4(fp)
   81824:	d8000615 	stw	zero,24(sp)
   81828:	e0c00617 	ldw	r3,24(fp)
   8182c:	d8c00515 	stw	r3,20(sp)
   81830:	e0c00517 	ldw	r3,20(fp)
   81834:	d8c00415 	stw	r3,16(sp)
   81838:	e0c00417 	ldw	r3,16(fp)
   8183c:	d8c00315 	stw	r3,12(sp)
   81840:	e0c00317 	ldw	r3,12(fp)
   81844:	d8c00215 	stw	r3,8(sp)
   81848:	d8000115 	stw	zero,4(sp)
   8184c:	d8800015 	stw	r2,0(sp)
   81850:	e1fffe17 	ldw	r7,-8(fp)
   81854:	e1bffd17 	ldw	r6,-12(fp)
   81858:	e17ffc17 	ldw	r5,-16(fp)
   8185c:	e13ffb17 	ldw	r4,-20(fp)
   81860:	0081d8c0 	call	81d8c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   81864:	0001883a 	nop
   81868:	e037883a 	mov	sp,fp
   8186c:	dfc00117 	ldw	ra,4(sp)
   81870:	df000017 	ldw	fp,0(sp)
   81874:	dec00204 	addi	sp,sp,8
   81878:	f800283a 	ret

0008187c <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   8187c:	defff804 	addi	sp,sp,-32
   81880:	dfc00715 	stw	ra,28(sp)
   81884:	df000615 	stw	fp,24(sp)
   81888:	df000604 	addi	fp,sp,24
   8188c:	e13ffc15 	stw	r4,-16(fp)
   81890:	e17ffd15 	stw	r5,-12(fp)
   81894:	e1bffe15 	stw	r6,-8(fp)
   81898:	3805883a 	mov	r2,r7
   8189c:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   818a0:	e0ffff0b 	ldhu	r3,-4(fp)
   818a4:	d8000115 	stw	zero,4(sp)
   818a8:	e0800217 	ldw	r2,8(fp)
   818ac:	d8800015 	stw	r2,0(sp)
   818b0:	180f883a 	mov	r7,r3
   818b4:	e1bffe17 	ldw	r6,-8(fp)
   818b8:	e17ffd17 	ldw	r5,-12(fp)
   818bc:	e13ffc17 	ldw	r4,-16(fp)
   818c0:	00818dc0 	call	818dc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   818c4:	0001883a 	nop
   818c8:	e037883a 	mov	sp,fp
   818cc:	dfc00117 	ldw	ra,4(sp)
   818d0:	df000017 	ldw	fp,0(sp)
   818d4:	dec00204 	addi	sp,sp,8
   818d8:	f800283a 	ret

000818dc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   818dc:	defff304 	addi	sp,sp,-52
   818e0:	dfc00c15 	stw	ra,48(sp)
   818e4:	df000b15 	stw	fp,44(sp)
   818e8:	df000b04 	addi	fp,sp,44
   818ec:	e13ffc15 	stw	r4,-16(fp)
   818f0:	e17ffd15 	stw	r5,-12(fp)
   818f4:	e1bffe15 	stw	r6,-8(fp)
   818f8:	3805883a 	mov	r2,r7
   818fc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81900:	e0bfff0b 	ldhu	r2,-4(fp)
   81904:	d8000615 	stw	zero,24(sp)
   81908:	e0c00317 	ldw	r3,12(fp)
   8190c:	d8c00515 	stw	r3,20(sp)
   81910:	d8000415 	stw	zero,16(sp)
   81914:	e0c00217 	ldw	r3,8(fp)
   81918:	d8c00315 	stw	r3,12(sp)
   8191c:	d8000215 	stw	zero,8(sp)
   81920:	d8000115 	stw	zero,4(sp)
   81924:	d8800015 	stw	r2,0(sp)
   81928:	e1fffe17 	ldw	r7,-8(fp)
   8192c:	000d883a 	mov	r6,zero
   81930:	e17ffd17 	ldw	r5,-12(fp)
   81934:	e13ffc17 	ldw	r4,-16(fp)
   81938:	0081d8c0 	call	81d8c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   8193c:	0001883a 	nop
   81940:	e037883a 	mov	sp,fp
   81944:	dfc00117 	ldw	ra,4(sp)
   81948:	df000017 	ldw	fp,0(sp)
   8194c:	dec00204 	addi	sp,sp,8
   81950:	f800283a 	ret

00081954 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   81954:	defff404 	addi	sp,sp,-48
   81958:	dfc00b15 	stw	ra,44(sp)
   8195c:	df000a15 	stw	fp,40(sp)
   81960:	df000a04 	addi	fp,sp,40
   81964:	e13ffb15 	stw	r4,-20(fp)
   81968:	e17ffc15 	stw	r5,-16(fp)
   8196c:	e1bffd15 	stw	r6,-12(fp)
   81970:	3807883a 	mov	r3,r7
   81974:	e0800517 	ldw	r2,20(fp)
   81978:	e0fffe0d 	sth	r3,-8(fp)
   8197c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   81980:	e0fffe0b 	ldhu	r3,-8(fp)
   81984:	e0bfff03 	ldbu	r2,-4(fp)
   81988:	d8800415 	stw	r2,16(sp)
   8198c:	d8000315 	stw	zero,12(sp)
   81990:	e0800417 	ldw	r2,16(fp)
   81994:	d8800215 	stw	r2,8(sp)
   81998:	e0800317 	ldw	r2,12(fp)
   8199c:	d8800115 	stw	r2,4(sp)
   819a0:	e0800217 	ldw	r2,8(fp)
   819a4:	d8800015 	stw	r2,0(sp)
   819a8:	180f883a 	mov	r7,r3
   819ac:	e1bffd17 	ldw	r6,-12(fp)
   819b0:	e17ffc17 	ldw	r5,-16(fp)
   819b4:	e13ffb17 	ldw	r4,-20(fp)
   819b8:	00819d40 	call	819d4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   819bc:	0001883a 	nop
   819c0:	e037883a 	mov	sp,fp
   819c4:	dfc00117 	ldw	ra,4(sp)
   819c8:	df000017 	ldw	fp,0(sp)
   819cc:	dec00204 	addi	sp,sp,8
   819d0:	f800283a 	ret

000819d4 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   819d4:	defff204 	addi	sp,sp,-56
   819d8:	dfc00d15 	stw	ra,52(sp)
   819dc:	df000c15 	stw	fp,48(sp)
   819e0:	df000c04 	addi	fp,sp,48
   819e4:	e13ffb15 	stw	r4,-20(fp)
   819e8:	e17ffc15 	stw	r5,-16(fp)
   819ec:	e1bffd15 	stw	r6,-12(fp)
   819f0:	3807883a 	mov	r3,r7
   819f4:	e0800617 	ldw	r2,24(fp)
   819f8:	e0fffe0d 	sth	r3,-8(fp)
   819fc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81a00:	e0bffe0b 	ldhu	r2,-8(fp)
   81a04:	e0ffff03 	ldbu	r3,-4(fp)
   81a08:	d8c00615 	stw	r3,24(sp)
   81a0c:	d8000515 	stw	zero,20(sp)
   81a10:	e0c00517 	ldw	r3,20(fp)
   81a14:	d8c00415 	stw	r3,16(sp)
   81a18:	e0c00317 	ldw	r3,12(fp)
   81a1c:	d8c00315 	stw	r3,12(sp)
   81a20:	e0c00217 	ldw	r3,8(fp)
   81a24:	d8c00215 	stw	r3,8(sp)
   81a28:	e0c00417 	ldw	r3,16(fp)
   81a2c:	d8c00115 	stw	r3,4(sp)
   81a30:	d8800015 	stw	r2,0(sp)
   81a34:	000f883a 	mov	r7,zero
   81a38:	e1bffd17 	ldw	r6,-12(fp)
   81a3c:	e17ffc17 	ldw	r5,-16(fp)
   81a40:	e13ffb17 	ldw	r4,-20(fp)
   81a44:	0081d8c0 	call	81d8c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   81a48:	0001883a 	nop
   81a4c:	e037883a 	mov	sp,fp
   81a50:	dfc00117 	ldw	ra,4(sp)
   81a54:	df000017 	ldw	fp,0(sp)
   81a58:	dec00204 	addi	sp,sp,8
   81a5c:	f800283a 	ret

00081a60 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   81a60:	defffb04 	addi	sp,sp,-20
   81a64:	df000415 	stw	fp,16(sp)
   81a68:	df000404 	addi	fp,sp,16
   81a6c:	e13ffc15 	stw	r4,-16(fp)
   81a70:	e17ffd15 	stw	r5,-12(fp)
   81a74:	e1bffe15 	stw	r6,-8(fp)
   81a78:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   81a7c:	e0bffc17 	ldw	r2,-16(fp)
   81a80:	e0fffd17 	ldw	r3,-12(fp)
   81a84:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   81a88:	e0bffc17 	ldw	r2,-16(fp)
   81a8c:	e0ffff17 	ldw	r3,-4(fp)
   81a90:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   81a94:	e0bffc17 	ldw	r2,-16(fp)
   81a98:	e0fffe17 	ldw	r3,-8(fp)
   81a9c:	10c00b15 	stw	r3,44(r2)
}
   81aa0:	0001883a 	nop
   81aa4:	e037883a 	mov	sp,fp
   81aa8:	df000017 	ldw	fp,0(sp)
   81aac:	dec00104 	addi	sp,sp,4
   81ab0:	f800283a 	ret

00081ab4 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   81ab4:	defffd04 	addi	sp,sp,-12
   81ab8:	df000215 	stw	fp,8(sp)
   81abc:	df000204 	addi	fp,sp,8
   81ac0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81ac4:	e0bfff17 	ldw	r2,-4(fp)
   81ac8:	10800317 	ldw	r2,12(r2)
   81acc:	10800404 	addi	r2,r2,16
   81ad0:	10800037 	ldwio	r2,0(r2)
   81ad4:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81ad8:	e0bffe17 	ldw	r2,-8(fp)
   81adc:	10800814 	ori	r2,r2,32
   81ae0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81ae4:	e0bfff17 	ldw	r2,-4(fp)
   81ae8:	10800317 	ldw	r2,12(r2)
   81aec:	10800404 	addi	r2,r2,16
   81af0:	e0fffe17 	ldw	r3,-8(fp)
   81af4:	10c00035 	stwio	r3,0(r2)
}
   81af8:	0001883a 	nop
   81afc:	e037883a 	mov	sp,fp
   81b00:	df000017 	ldw	fp,0(sp)
   81b04:	dec00104 	addi	sp,sp,4
   81b08:	f800283a 	ret

00081b0c <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   81b0c:	defffd04 	addi	sp,sp,-12
   81b10:	df000215 	stw	fp,8(sp)
   81b14:	df000204 	addi	fp,sp,8
   81b18:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81b1c:	e0bfff17 	ldw	r2,-4(fp)
   81b20:	10800317 	ldw	r2,12(r2)
   81b24:	10800404 	addi	r2,r2,16
   81b28:	10800037 	ldwio	r2,0(r2)
   81b2c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81b30:	e0fffe17 	ldw	r3,-8(fp)
   81b34:	00bff7c4 	movi	r2,-33
   81b38:	1884703a 	and	r2,r3,r2
   81b3c:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81b40:	e0bfff17 	ldw	r2,-4(fp)
   81b44:	10800317 	ldw	r2,12(r2)
   81b48:	10800404 	addi	r2,r2,16
   81b4c:	e0fffe17 	ldw	r3,-8(fp)
   81b50:	10c00035 	stwio	r3,0(r2)
}
   81b54:	0001883a 	nop
   81b58:	e037883a 	mov	sp,fp
   81b5c:	df000017 	ldw	fp,0(sp)
   81b60:	dec00104 	addi	sp,sp,4
   81b64:	f800283a 	ret

00081b68 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   81b68:	defffe04 	addi	sp,sp,-8
   81b6c:	df000115 	stw	fp,4(sp)
   81b70:	df000104 	addi	fp,sp,4
   81b74:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   81b78:	e0bfff17 	ldw	r2,-4(fp)
   81b7c:	10800784 	addi	r2,r2,30
   81b80:	10800023 	ldbuio	r2,0(r2)
   81b84:	10803fcc 	andi	r2,r2,255
   81b88:	10801fcc 	andi	r2,r2,127
   81b8c:	10000226 	beq	r2,zero,81b98 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   81b90:	00bffec4 	movi	r2,-5
   81b94:	00000906 	br	81bbc <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   81b98:	e0bfff17 	ldw	r2,-4(fp)
   81b9c:	108007c4 	addi	r2,r2,31
   81ba0:	10800023 	ldbuio	r2,0(r2)
   81ba4:	10803fcc 	andi	r2,r2,255
   81ba8:	1080200c 	andi	r2,r2,128
   81bac:	10000226 	beq	r2,zero,81bb8 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   81bb0:	00bfe244 	movi	r2,-119
   81bb4:	00000106 	br	81bbc <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   81bb8:	0005883a 	mov	r2,zero
}
   81bbc:	e037883a 	mov	sp,fp
   81bc0:	df000017 	ldw	fp,0(sp)
   81bc4:	dec00104 	addi	sp,sp,4
   81bc8:	f800283a 	ret

00081bcc <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81bcc:	defffc04 	addi	sp,sp,-16
   81bd0:	dfc00315 	stw	ra,12(sp)
   81bd4:	df000215 	stw	fp,8(sp)
   81bd8:	df000204 	addi	fp,sp,8
   81bdc:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   81be0:	d1600004 	addi	r5,gp,-32768
   81be4:	e13fff17 	ldw	r4,-4(fp)
   81be8:	00828600 	call	82860 <alt_find_dev>
   81bec:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   81bf0:	e0bffe17 	ldw	r2,-8(fp)
   81bf4:	1000041e 	bne	r2,zero,81c08 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   81bf8:	00815140 	call	81514 <alt_get_errno>
   81bfc:	1007883a 	mov	r3,r2
   81c00:	008004c4 	movi	r2,19
   81c04:	18800015 	stw	r2,0(r3)
  }

  return dev;
   81c08:	e0bffe17 	ldw	r2,-8(fp)
}
   81c0c:	e037883a 	mov	sp,fp
   81c10:	dfc00117 	ldw	ra,4(sp)
   81c14:	df000017 	ldw	fp,0(sp)
   81c18:	dec00204 	addi	sp,sp,8
   81c1c:	f800283a 	ret

00081c20 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81c20:	defff104 	addi	sp,sp,-60
   81c24:	dfc00e15 	stw	ra,56(sp)
   81c28:	df000d15 	stw	fp,52(sp)
   81c2c:	df000d04 	addi	fp,sp,52
   81c30:	e13ffa15 	stw	r4,-24(fp)
   81c34:	e17ffb15 	stw	r5,-20(fp)
   81c38:	e1bffc15 	stw	r6,-16(fp)
   81c3c:	e1fffd15 	stw	r7,-12(fp)
   81c40:	e0c00217 	ldw	r3,8(fp)
   81c44:	e0800617 	ldw	r2,24(fp)
   81c48:	e0fffe0d 	sth	r3,-8(fp)
   81c4c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81c50:	e0bffe0b 	ldhu	r2,-8(fp)
   81c54:	e0ffff03 	ldbu	r3,-4(fp)
   81c58:	d8c00615 	stw	r3,24(sp)
   81c5c:	d8000515 	stw	zero,20(sp)
   81c60:	d8000415 	stw	zero,16(sp)
   81c64:	e0c00517 	ldw	r3,20(fp)
   81c68:	d8c00315 	stw	r3,12(sp)
   81c6c:	e0c00417 	ldw	r3,16(fp)
   81c70:	d8c00215 	stw	r3,8(sp)
   81c74:	e0c00317 	ldw	r3,12(fp)
   81c78:	d8c00115 	stw	r3,4(sp)
   81c7c:	d8800015 	stw	r2,0(sp)
   81c80:	e1fffd17 	ldw	r7,-12(fp)
   81c84:	e1bffc17 	ldw	r6,-16(fp)
   81c88:	e17ffb17 	ldw	r5,-20(fp)
   81c8c:	e13ffa17 	ldw	r4,-24(fp)
   81c90:	0081d8c0 	call	81d8c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81c94:	0001883a 	nop
   81c98:	e037883a 	mov	sp,fp
   81c9c:	dfc00117 	ldw	ra,4(sp)
   81ca0:	df000017 	ldw	fp,0(sp)
   81ca4:	dec00204 	addi	sp,sp,8
   81ca8:	f800283a 	ret

00081cac <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   81cac:	defffc04 	addi	sp,sp,-16
   81cb0:	df000315 	stw	fp,12(sp)
   81cb4:	df000304 	addi	fp,sp,12
   81cb8:	e13ffe15 	stw	r4,-8(fp)
   81cbc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81cc0:	e0bffe17 	ldw	r2,-8(fp)
   81cc4:	10800317 	ldw	r2,12(r2)
   81cc8:	10800404 	addi	r2,r2,16
   81ccc:	10800037 	ldwio	r2,0(r2)
   81cd0:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   81cd4:	e0fffd17 	ldw	r3,-12(fp)
   81cd8:	00a00434 	movhi	r2,32784
   81cdc:	10bfffc4 	addi	r2,r2,-1
   81ce0:	1884703a 	and	r2,r3,r2
   81ce4:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   81ce8:	e0bfff17 	ldw	r2,-4(fp)
   81cec:	1004953a 	slli	r2,r2,20
   81cf0:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   81cf4:	e0bffd17 	ldw	r2,-12(fp)
   81cf8:	1884b03a 	or	r2,r3,r2
   81cfc:	10800134 	orhi	r2,r2,4
   81d00:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81d04:	e0bffe17 	ldw	r2,-8(fp)
   81d08:	10800317 	ldw	r2,12(r2)
   81d0c:	10800404 	addi	r2,r2,16
   81d10:	e0fffd17 	ldw	r3,-12(fp)
   81d14:	10c00035 	stwio	r3,0(r2)
  
  return;
   81d18:	0001883a 	nop
}
   81d1c:	e037883a 	mov	sp,fp
   81d20:	df000017 	ldw	fp,0(sp)
   81d24:	dec00104 	addi	sp,sp,4
   81d28:	f800283a 	ret

00081d2c <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   81d2c:	defffd04 	addi	sp,sp,-12
   81d30:	df000215 	stw	fp,8(sp)
   81d34:	df000204 	addi	fp,sp,8
   81d38:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81d3c:	e0bfff17 	ldw	r2,-4(fp)
   81d40:	10800317 	ldw	r2,12(r2)
   81d44:	10800404 	addi	r2,r2,16
   81d48:	10800037 	ldwio	r2,0(r2)
   81d4c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   81d50:	e0fffe17 	ldw	r3,-8(fp)
   81d54:	00bfff34 	movhi	r2,65532
   81d58:	10bfffc4 	addi	r2,r2,-1
   81d5c:	1884703a 	and	r2,r3,r2
   81d60:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81d64:	e0bfff17 	ldw	r2,-4(fp)
   81d68:	10800317 	ldw	r2,12(r2)
   81d6c:	10800404 	addi	r2,r2,16
   81d70:	e0fffe17 	ldw	r3,-8(fp)
   81d74:	10c00035 	stwio	r3,0(r2)
  
  return;
   81d78:	0001883a 	nop
}
   81d7c:	e037883a 	mov	sp,fp
   81d80:	df000017 	ldw	fp,0(sp)
   81d84:	dec00104 	addi	sp,sp,4
   81d88:	f800283a 	ret

00081d8c <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81d8c:	defff804 	addi	sp,sp,-32
   81d90:	dfc00715 	stw	ra,28(sp)
   81d94:	df000615 	stw	fp,24(sp)
   81d98:	df000604 	addi	fp,sp,24
   81d9c:	e13ffa15 	stw	r4,-24(fp)
   81da0:	e17ffb15 	stw	r5,-20(fp)
   81da4:	e1bffc15 	stw	r6,-16(fp)
   81da8:	e1fffd15 	stw	r7,-12(fp)
   81dac:	e0c00217 	ldw	r3,8(fp)
   81db0:	e0800817 	ldw	r2,32(fp)
   81db4:	e0fffe0d 	sth	r3,-8(fp)
   81db8:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   81dbc:	e0bffb17 	ldw	r2,-20(fp)
   81dc0:	108007c4 	addi	r2,r2,31
   81dc4:	e0fffb17 	ldw	r3,-20(fp)
   81dc8:	18c007c3 	ldbu	r3,31(r3)
   81dcc:	19003fcc 	andi	r4,r3,255
   81dd0:	00ffdfc4 	movi	r3,-129
   81dd4:	20c6703a 	and	r3,r4,r3
   81dd8:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81ddc:	e0bffa17 	ldw	r2,-24(fp)
   81de0:	e0fffc17 	ldw	r3,-16(fp)
   81de4:	19403fcc 	andi	r5,r3,255
   81de8:	10c00003 	ldbu	r3,0(r2)
   81dec:	1806703a 	and	r3,r3,zero
   81df0:	1809883a 	mov	r4,r3
   81df4:	2807883a 	mov	r3,r5
   81df8:	20c6b03a 	or	r3,r4,r3
   81dfc:	10c00005 	stb	r3,0(r2)
   81e00:	e0fffc17 	ldw	r3,-16(fp)
   81e04:	1806d23a 	srli	r3,r3,8
   81e08:	19403fcc 	andi	r5,r3,255
   81e0c:	10c00043 	ldbu	r3,1(r2)
   81e10:	1806703a 	and	r3,r3,zero
   81e14:	1809883a 	mov	r4,r3
   81e18:	2807883a 	mov	r3,r5
   81e1c:	20c6b03a 	or	r3,r4,r3
   81e20:	10c00045 	stb	r3,1(r2)
   81e24:	e0fffc17 	ldw	r3,-16(fp)
   81e28:	1806d43a 	srli	r3,r3,16
   81e2c:	19403fcc 	andi	r5,r3,255
   81e30:	10c00083 	ldbu	r3,2(r2)
   81e34:	1806703a 	and	r3,r3,zero
   81e38:	1809883a 	mov	r4,r3
   81e3c:	2807883a 	mov	r3,r5
   81e40:	20c6b03a 	or	r3,r4,r3
   81e44:	10c00085 	stb	r3,2(r2)
   81e48:	e0fffc17 	ldw	r3,-16(fp)
   81e4c:	180ad63a 	srli	r5,r3,24
   81e50:	10c000c3 	ldbu	r3,3(r2)
   81e54:	1806703a 	and	r3,r3,zero
   81e58:	1809883a 	mov	r4,r3
   81e5c:	2807883a 	mov	r3,r5
   81e60:	20c6b03a 	or	r3,r4,r3
   81e64:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   81e68:	e0bffa17 	ldw	r2,-24(fp)
   81e6c:	e0fffd17 	ldw	r3,-12(fp)
   81e70:	19403fcc 	andi	r5,r3,255
   81e74:	10c00203 	ldbu	r3,8(r2)
   81e78:	1806703a 	and	r3,r3,zero
   81e7c:	1809883a 	mov	r4,r3
   81e80:	2807883a 	mov	r3,r5
   81e84:	20c6b03a 	or	r3,r4,r3
   81e88:	10c00205 	stb	r3,8(r2)
   81e8c:	e0fffd17 	ldw	r3,-12(fp)
   81e90:	1806d23a 	srli	r3,r3,8
   81e94:	19403fcc 	andi	r5,r3,255
   81e98:	10c00243 	ldbu	r3,9(r2)
   81e9c:	1806703a 	and	r3,r3,zero
   81ea0:	1809883a 	mov	r4,r3
   81ea4:	2807883a 	mov	r3,r5
   81ea8:	20c6b03a 	or	r3,r4,r3
   81eac:	10c00245 	stb	r3,9(r2)
   81eb0:	e0fffd17 	ldw	r3,-12(fp)
   81eb4:	1806d43a 	srli	r3,r3,16
   81eb8:	19403fcc 	andi	r5,r3,255
   81ebc:	10c00283 	ldbu	r3,10(r2)
   81ec0:	1806703a 	and	r3,r3,zero
   81ec4:	1809883a 	mov	r4,r3
   81ec8:	2807883a 	mov	r3,r5
   81ecc:	20c6b03a 	or	r3,r4,r3
   81ed0:	10c00285 	stb	r3,10(r2)
   81ed4:	e0fffd17 	ldw	r3,-12(fp)
   81ed8:	180ad63a 	srli	r5,r3,24
   81edc:	10c002c3 	ldbu	r3,11(r2)
   81ee0:	1806703a 	and	r3,r3,zero
   81ee4:	1809883a 	mov	r4,r3
   81ee8:	2807883a 	mov	r3,r5
   81eec:	20c6b03a 	or	r3,r4,r3
   81ef0:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   81ef4:	e0bffa17 	ldw	r2,-24(fp)
   81ef8:	e0fffb17 	ldw	r3,-20(fp)
   81efc:	19403fcc 	andi	r5,r3,255
   81f00:	10c00403 	ldbu	r3,16(r2)
   81f04:	1806703a 	and	r3,r3,zero
   81f08:	1809883a 	mov	r4,r3
   81f0c:	2807883a 	mov	r3,r5
   81f10:	20c6b03a 	or	r3,r4,r3
   81f14:	10c00405 	stb	r3,16(r2)
   81f18:	e0fffb17 	ldw	r3,-20(fp)
   81f1c:	1806d23a 	srli	r3,r3,8
   81f20:	19403fcc 	andi	r5,r3,255
   81f24:	10c00443 	ldbu	r3,17(r2)
   81f28:	1806703a 	and	r3,r3,zero
   81f2c:	1809883a 	mov	r4,r3
   81f30:	2807883a 	mov	r3,r5
   81f34:	20c6b03a 	or	r3,r4,r3
   81f38:	10c00445 	stb	r3,17(r2)
   81f3c:	e0fffb17 	ldw	r3,-20(fp)
   81f40:	1806d43a 	srli	r3,r3,16
   81f44:	19403fcc 	andi	r5,r3,255
   81f48:	10c00483 	ldbu	r3,18(r2)
   81f4c:	1806703a 	and	r3,r3,zero
   81f50:	1809883a 	mov	r4,r3
   81f54:	2807883a 	mov	r3,r5
   81f58:	20c6b03a 	or	r3,r4,r3
   81f5c:	10c00485 	stb	r3,18(r2)
   81f60:	e0fffb17 	ldw	r3,-20(fp)
   81f64:	180ad63a 	srli	r5,r3,24
   81f68:	10c004c3 	ldbu	r3,19(r2)
   81f6c:	1806703a 	and	r3,r3,zero
   81f70:	1809883a 	mov	r4,r3
   81f74:	2807883a 	mov	r3,r5
   81f78:	20c6b03a 	or	r3,r4,r3
   81f7c:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   81f80:	e0bffa17 	ldw	r2,-24(fp)
   81f84:	10c00103 	ldbu	r3,4(r2)
   81f88:	1806703a 	and	r3,r3,zero
   81f8c:	10c00105 	stb	r3,4(r2)
   81f90:	10c00143 	ldbu	r3,5(r2)
   81f94:	1806703a 	and	r3,r3,zero
   81f98:	10c00145 	stb	r3,5(r2)
   81f9c:	10c00183 	ldbu	r3,6(r2)
   81fa0:	1806703a 	and	r3,r3,zero
   81fa4:	10c00185 	stb	r3,6(r2)
   81fa8:	10c001c3 	ldbu	r3,7(r2)
   81fac:	1806703a 	and	r3,r3,zero
   81fb0:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   81fb4:	e0bffa17 	ldw	r2,-24(fp)
   81fb8:	10c00303 	ldbu	r3,12(r2)
   81fbc:	1806703a 	and	r3,r3,zero
   81fc0:	10c00305 	stb	r3,12(r2)
   81fc4:	10c00343 	ldbu	r3,13(r2)
   81fc8:	1806703a 	and	r3,r3,zero
   81fcc:	10c00345 	stb	r3,13(r2)
   81fd0:	10c00383 	ldbu	r3,14(r2)
   81fd4:	1806703a 	and	r3,r3,zero
   81fd8:	10c00385 	stb	r3,14(r2)
   81fdc:	10c003c3 	ldbu	r3,15(r2)
   81fe0:	1806703a 	and	r3,r3,zero
   81fe4:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   81fe8:	e0bffa17 	ldw	r2,-24(fp)
   81fec:	10c00503 	ldbu	r3,20(r2)
   81ff0:	1806703a 	and	r3,r3,zero
   81ff4:	10c00505 	stb	r3,20(r2)
   81ff8:	10c00543 	ldbu	r3,21(r2)
   81ffc:	1806703a 	and	r3,r3,zero
   82000:	10c00545 	stb	r3,21(r2)
   82004:	10c00583 	ldbu	r3,22(r2)
   82008:	1806703a 	and	r3,r3,zero
   8200c:	10c00585 	stb	r3,22(r2)
   82010:	10c005c3 	ldbu	r3,23(r2)
   82014:	1806703a 	and	r3,r3,zero
   82018:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   8201c:	e0bffa17 	ldw	r2,-24(fp)
   82020:	e0fffe17 	ldw	r3,-8(fp)
   82024:	19403fcc 	andi	r5,r3,255
   82028:	10c00603 	ldbu	r3,24(r2)
   8202c:	1806703a 	and	r3,r3,zero
   82030:	1809883a 	mov	r4,r3
   82034:	2807883a 	mov	r3,r5
   82038:	20c6b03a 	or	r3,r4,r3
   8203c:	10c00605 	stb	r3,24(r2)
   82040:	e0fffe17 	ldw	r3,-8(fp)
   82044:	1806d23a 	srli	r3,r3,8
   82048:	19403fcc 	andi	r5,r3,255
   8204c:	10c00643 	ldbu	r3,25(r2)
   82050:	1806703a 	and	r3,r3,zero
   82054:	1809883a 	mov	r4,r3
   82058:	2807883a 	mov	r3,r5
   8205c:	20c6b03a 	or	r3,r4,r3
   82060:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   82064:	e0bffa17 	ldw	r2,-24(fp)
   82068:	10c00703 	ldbu	r3,28(r2)
   8206c:	1806703a 	and	r3,r3,zero
   82070:	10c00705 	stb	r3,28(r2)
   82074:	10c00743 	ldbu	r3,29(r2)
   82078:	1806703a 	and	r3,r3,zero
   8207c:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   82080:	e0bffa17 	ldw	r2,-24(fp)
   82084:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   82088:	e0800617 	ldw	r2,24(fp)
   8208c:	1007883a 	mov	r3,r2
   82090:	e0bffa17 	ldw	r2,-24(fp)
   82094:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   82098:	e0800717 	ldw	r2,28(fp)
   8209c:	1007883a 	mov	r3,r2
   820a0:	e0bffa17 	ldw	r2,-24(fp)
   820a4:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   820a8:	e0800317 	ldw	r2,12(fp)
   820ac:	10000226 	beq	r2,zero,820b8 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   820b0:	00bfe044 	movi	r2,-127
   820b4:	00000106 	br	820bc <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   820b8:	00bfe004 	movi	r2,-128
   820bc:	e0c00417 	ldw	r3,16(fp)
   820c0:	18000226 	beq	r3,zero,820cc <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   820c4:	00c00084 	movi	r3,2
   820c8:	00000106 	br	820d0 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   820cc:	0007883a 	mov	r3,zero
   820d0:	10c4b03a 	or	r2,r2,r3
   820d4:	1007883a 	mov	r3,r2
   820d8:	e0800517 	ldw	r2,20(fp)
   820dc:	10000226 	beq	r2,zero,820e8 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   820e0:	00800104 	movi	r2,4
   820e4:	00000106 	br	820ec <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   820e8:	0005883a 	mov	r2,zero
   820ec:	1884b03a 	or	r2,r3,r2
   820f0:	1007883a 	mov	r3,r2
   820f4:	e0bfff03 	ldbu	r2,-4(fp)
   820f8:	10000426 	beq	r2,zero,8210c <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   820fc:	e0bfff03 	ldbu	r2,-4(fp)
   82100:	108003cc 	andi	r2,r2,15
   82104:	100490fa 	slli	r2,r2,3
   82108:	00000106 	br	82110 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   8210c:	0005883a 	mov	r2,zero
   82110:	1884b03a 	or	r2,r3,r2
   82114:	1007883a 	mov	r3,r2
   82118:	e0bffa17 	ldw	r2,-24(fp)
   8211c:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   82120:	01400804 	movi	r5,32
   82124:	e13ffa17 	ldw	r4,-24(fp)
   82128:	00825d40 	call	825d4 <alt_dcache_flush>
}
   8212c:	0001883a 	nop
   82130:	e037883a 	mov	sp,fp
   82134:	dfc00117 	ldw	ra,4(sp)
   82138:	df000017 	ldw	fp,0(sp)
   8213c:	dec00204 	addi	sp,sp,8
   82140:	f800283a 	ret

00082144 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   82144:	defff904 	addi	sp,sp,-28
   82148:	dfc00615 	stw	ra,24(sp)
   8214c:	df000515 	stw	fp,20(sp)
   82150:	df000504 	addi	fp,sp,20
   82154:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   82158:	e0bfff17 	ldw	r2,-4(fp)
   8215c:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   82160:	e0bffb17 	ldw	r2,-20(fp)
   82164:	10800317 	ldw	r2,12(r2)
   82168:	10800404 	addi	r2,r2,16
   8216c:	e0fffb17 	ldw	r3,-20(fp)
   82170:	18c00317 	ldw	r3,12(r3)
   82174:	18c00404 	addi	r3,r3,16
   82178:	18c00037 	ldwio	r3,0(r3)
   8217c:	18e00034 	orhi	r3,r3,32768
   82180:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   82184:	e0bffb17 	ldw	r2,-20(fp)
   82188:	10800317 	ldw	r2,12(r2)
   8218c:	10800404 	addi	r2,r2,16
   82190:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   82194:	e0bffb17 	ldw	r2,-20(fp)
   82198:	10800917 	ldw	r2,36(r2)
   8219c:	10001226 	beq	r2,zero,821e8 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   821a0:	0005303a 	rdctl	r2,status
   821a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   821a8:	e0fffd17 	ldw	r3,-12(fp)
   821ac:	00bfff84 	movi	r2,-2
   821b0:	1884703a 	and	r2,r3,r2
   821b4:	1001703a 	wrctl	status,r2
  
  return context;
   821b8:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   821bc:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   821c0:	e0bffb17 	ldw	r2,-20(fp)
   821c4:	10800917 	ldw	r2,36(r2)
   821c8:	e0fffb17 	ldw	r3,-20(fp)
   821cc:	18c00a17 	ldw	r3,40(r3)
   821d0:	1809883a 	mov	r4,r3
   821d4:	103ee83a 	callr	r2
   821d8:	e0bffc17 	ldw	r2,-16(fp)
   821dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   821e0:	e0bffe17 	ldw	r2,-8(fp)
   821e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   821e8:	0001883a 	nop
   821ec:	e037883a 	mov	sp,fp
   821f0:	dfc00117 	ldw	ra,4(sp)
   821f4:	df000017 	ldw	fp,0(sp)
   821f8:	dec00204 	addi	sp,sp,8
   821fc:	f800283a 	ret

00082200 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   82200:	defffa04 	addi	sp,sp,-24
   82204:	dfc00515 	stw	ra,20(sp)
   82208:	df000415 	stw	fp,16(sp)
   8220c:	df000404 	addi	fp,sp,16
   82210:	e13ffd15 	stw	r4,-12(fp)
   82214:	e17ffe15 	stw	r5,-8(fp)
   82218:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8221c:	e0bffd17 	ldw	r2,-12(fp)
   82220:	10800317 	ldw	r2,12(r2)
   82224:	10800404 	addi	r2,r2,16
   82228:	00c00074 	movhi	r3,1
   8222c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   82230:	e0bffd17 	ldw	r2,-12(fp)
   82234:	10800317 	ldw	r2,12(r2)
   82238:	10800404 	addi	r2,r2,16
   8223c:	00c00074 	movhi	r3,1
   82240:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   82244:	e0bffd17 	ldw	r2,-12(fp)
   82248:	10800317 	ldw	r2,12(r2)
   8224c:	10800404 	addi	r2,r2,16
   82250:	0007883a 	mov	r3,zero
   82254:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   82258:	e0bffd17 	ldw	r2,-12(fp)
   8225c:	10800317 	ldw	r2,12(r2)
   82260:	00c03fc4 	movi	r3,255
   82264:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   82268:	d1600004 	addi	r5,gp,-32768
   8226c:	e13ffd17 	ldw	r4,-12(fp)
   82270:	00826fc0 	call	826fc <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   82274:	d8000015 	stw	zero,0(sp)
   82278:	e1fffd17 	ldw	r7,-12(fp)
   8227c:	01800234 	movhi	r6,8
   82280:	31885104 	addi	r6,r6,8516
   82284:	e17fff17 	ldw	r5,-4(fp)
   82288:	e13ffe17 	ldw	r4,-8(fp)
   8228c:	00829240 	call	82924 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   82290:	0001883a 	nop
   82294:	e037883a 	mov	sp,fp
   82298:	dfc00117 	ldw	ra,4(sp)
   8229c:	df000017 	ldw	fp,0(sp)
   822a0:	dec00204 	addi	sp,sp,8
   822a4:	f800283a 	ret

000822a8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   822a8:	defffa04 	addi	sp,sp,-24
   822ac:	dfc00515 	stw	ra,20(sp)
   822b0:	df000415 	stw	fp,16(sp)
   822b4:	df000404 	addi	fp,sp,16
   822b8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   822bc:	0007883a 	mov	r3,zero
   822c0:	e0bfff17 	ldw	r2,-4(fp)
   822c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   822c8:	e0bfff17 	ldw	r2,-4(fp)
   822cc:	10800104 	addi	r2,r2,4
   822d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   822d4:	0005303a 	rdctl	r2,status
   822d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   822dc:	e0fffd17 	ldw	r3,-12(fp)
   822e0:	00bfff84 	movi	r2,-2
   822e4:	1884703a 	and	r2,r3,r2
   822e8:	1001703a 	wrctl	status,r2
  
  return context;
   822ec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   822f0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   822f4:	00830580 	call	83058 <alt_tick>
   822f8:	e0bffc17 	ldw	r2,-16(fp)
   822fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82300:	e0bffe17 	ldw	r2,-8(fp)
   82304:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   82308:	0001883a 	nop
   8230c:	e037883a 	mov	sp,fp
   82310:	dfc00117 	ldw	ra,4(sp)
   82314:	df000017 	ldw	fp,0(sp)
   82318:	dec00204 	addi	sp,sp,8
   8231c:	f800283a 	ret

00082320 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   82320:	defff804 	addi	sp,sp,-32
   82324:	dfc00715 	stw	ra,28(sp)
   82328:	df000615 	stw	fp,24(sp)
   8232c:	df000604 	addi	fp,sp,24
   82330:	e13ffc15 	stw	r4,-16(fp)
   82334:	e17ffd15 	stw	r5,-12(fp)
   82338:	e1bffe15 	stw	r6,-8(fp)
   8233c:	e1ffff15 	stw	r7,-4(fp)
   82340:	e0bfff17 	ldw	r2,-4(fp)
   82344:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   82348:	d0a84817 	ldw	r2,-24288(gp)
   8234c:	1000021e 	bne	r2,zero,82358 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   82350:	e0bffb17 	ldw	r2,-20(fp)
   82354:	d0a84815 	stw	r2,-24288(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   82358:	e0bffc17 	ldw	r2,-16(fp)
   8235c:	10800104 	addi	r2,r2,4
   82360:	00c001c4 	movi	r3,7
   82364:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   82368:	d8000015 	stw	zero,0(sp)
   8236c:	e1fffc17 	ldw	r7,-16(fp)
   82370:	01800234 	movhi	r6,8
   82374:	3188aa04 	addi	r6,r6,8872
   82378:	e17ffe17 	ldw	r5,-8(fp)
   8237c:	e13ffd17 	ldw	r4,-12(fp)
   82380:	00829240 	call	82924 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   82384:	0001883a 	nop
   82388:	e037883a 	mov	sp,fp
   8238c:	dfc00117 	ldw	ra,4(sp)
   82390:	df000017 	ldw	fp,0(sp)
   82394:	dec00204 	addi	sp,sp,8
   82398:	f800283a 	ret

0008239c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8239c:	defff504 	addi	sp,sp,-44
   823a0:	df000a15 	stw	fp,40(sp)
   823a4:	df000a04 	addi	fp,sp,40
   823a8:	e13ffc15 	stw	r4,-16(fp)
   823ac:	e17ffd15 	stw	r5,-12(fp)
   823b0:	e1bffe15 	stw	r6,-8(fp)
   823b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   823b8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   823bc:	d0a84817 	ldw	r2,-24288(gp)
  
  if (alt_ticks_per_second ())
   823c0:	10003c26 	beq	r2,zero,824b4 <alt_alarm_start+0x118>
  {
    if (alarm)
   823c4:	e0bffc17 	ldw	r2,-16(fp)
   823c8:	10003826 	beq	r2,zero,824ac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   823cc:	e0bffc17 	ldw	r2,-16(fp)
   823d0:	e0fffe17 	ldw	r3,-8(fp)
   823d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   823d8:	e0bffc17 	ldw	r2,-16(fp)
   823dc:	e0ffff17 	ldw	r3,-4(fp)
   823e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   823e4:	0005303a 	rdctl	r2,status
   823e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   823ec:	e0fff917 	ldw	r3,-28(fp)
   823f0:	00bfff84 	movi	r2,-2
   823f4:	1884703a 	and	r2,r3,r2
   823f8:	1001703a 	wrctl	status,r2
  
  return context;
   823fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   82400:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   82404:	d0a84917 	ldw	r2,-24284(gp)
      
      current_nticks = alt_nticks();
   82408:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8240c:	e0fffd17 	ldw	r3,-12(fp)
   82410:	e0bff617 	ldw	r2,-40(fp)
   82414:	1885883a 	add	r2,r3,r2
   82418:	10c00044 	addi	r3,r2,1
   8241c:	e0bffc17 	ldw	r2,-16(fp)
   82420:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   82424:	e0bffc17 	ldw	r2,-16(fp)
   82428:	10c00217 	ldw	r3,8(r2)
   8242c:	e0bff617 	ldw	r2,-40(fp)
   82430:	1880042e 	bgeu	r3,r2,82444 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   82434:	e0bffc17 	ldw	r2,-16(fp)
   82438:	00c00044 	movi	r3,1
   8243c:	10c00405 	stb	r3,16(r2)
   82440:	00000206 	br	8244c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   82444:	e0bffc17 	ldw	r2,-16(fp)
   82448:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8244c:	e0bffc17 	ldw	r2,-16(fp)
   82450:	d0e00904 	addi	r3,gp,-32732
   82454:	e0fffa15 	stw	r3,-24(fp)
   82458:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8245c:	e0bffb17 	ldw	r2,-20(fp)
   82460:	e0fffa17 	ldw	r3,-24(fp)
   82464:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   82468:	e0bffa17 	ldw	r2,-24(fp)
   8246c:	10c00017 	ldw	r3,0(r2)
   82470:	e0bffb17 	ldw	r2,-20(fp)
   82474:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82478:	e0bffa17 	ldw	r2,-24(fp)
   8247c:	10800017 	ldw	r2,0(r2)
   82480:	e0fffb17 	ldw	r3,-20(fp)
   82484:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82488:	e0bffa17 	ldw	r2,-24(fp)
   8248c:	e0fffb17 	ldw	r3,-20(fp)
   82490:	10c00015 	stw	r3,0(r2)
   82494:	e0bff817 	ldw	r2,-32(fp)
   82498:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8249c:	e0bff717 	ldw	r2,-36(fp)
   824a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   824a4:	0005883a 	mov	r2,zero
   824a8:	00000306 	br	824b8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   824ac:	00bffa84 	movi	r2,-22
   824b0:	00000106 	br	824b8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   824b4:	00bfde84 	movi	r2,-134
  }
}
   824b8:	e037883a 	mov	sp,fp
   824bc:	df000017 	ldw	fp,0(sp)
   824c0:	dec00104 	addi	sp,sp,4
   824c4:	f800283a 	ret

000824c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   824c8:	defffe04 	addi	sp,sp,-8
   824cc:	dfc00115 	stw	ra,4(sp)
   824d0:	df000015 	stw	fp,0(sp)
   824d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   824d8:	d0a00717 	ldw	r2,-32740(gp)
   824dc:	10000326 	beq	r2,zero,824ec <alt_get_errno+0x24>
   824e0:	d0a00717 	ldw	r2,-32740(gp)
   824e4:	103ee83a 	callr	r2
   824e8:	00000106 	br	824f0 <alt_get_errno+0x28>
   824ec:	d0a84b04 	addi	r2,gp,-24276
}
   824f0:	e037883a 	mov	sp,fp
   824f4:	dfc00117 	ldw	ra,4(sp)
   824f8:	df000017 	ldw	fp,0(sp)
   824fc:	dec00204 	addi	sp,sp,8
   82500:	f800283a 	ret

00082504 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82504:	defffb04 	addi	sp,sp,-20
   82508:	dfc00415 	stw	ra,16(sp)
   8250c:	df000315 	stw	fp,12(sp)
   82510:	df000304 	addi	fp,sp,12
   82514:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82518:	e0bfff17 	ldw	r2,-4(fp)
   8251c:	10000616 	blt	r2,zero,82538 <close+0x34>
   82520:	e0bfff17 	ldw	r2,-4(fp)
   82524:	10c00324 	muli	r3,r2,12
   82528:	00800234 	movhi	r2,8
   8252c:	109dfc04 	addi	r2,r2,30704
   82530:	1885883a 	add	r2,r3,r2
   82534:	00000106 	br	8253c <close+0x38>
   82538:	0005883a 	mov	r2,zero
   8253c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   82540:	e0bffd17 	ldw	r2,-12(fp)
   82544:	10001926 	beq	r2,zero,825ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82548:	e0bffd17 	ldw	r2,-12(fp)
   8254c:	10800017 	ldw	r2,0(r2)
   82550:	10800417 	ldw	r2,16(r2)
   82554:	10000626 	beq	r2,zero,82570 <close+0x6c>
   82558:	e0bffd17 	ldw	r2,-12(fp)
   8255c:	10800017 	ldw	r2,0(r2)
   82560:	10800417 	ldw	r2,16(r2)
   82564:	e13ffd17 	ldw	r4,-12(fp)
   82568:	103ee83a 	callr	r2
   8256c:	00000106 	br	82574 <close+0x70>
   82570:	0005883a 	mov	r2,zero
   82574:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82578:	e13fff17 	ldw	r4,-4(fp)
   8257c:	0082f580 	call	82f58 <alt_release_fd>
    if (rval < 0)
   82580:	e0bffe17 	ldw	r2,-8(fp)
   82584:	1000070e 	bge	r2,zero,825a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   82588:	00824c80 	call	824c8 <alt_get_errno>
   8258c:	1007883a 	mov	r3,r2
   82590:	e0bffe17 	ldw	r2,-8(fp)
   82594:	0085c83a 	sub	r2,zero,r2
   82598:	18800015 	stw	r2,0(r3)
      return -1;
   8259c:	00bfffc4 	movi	r2,-1
   825a0:	00000706 	br	825c0 <close+0xbc>
    }
    return 0;
   825a4:	0005883a 	mov	r2,zero
   825a8:	00000506 	br	825c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   825ac:	00824c80 	call	824c8 <alt_get_errno>
   825b0:	1007883a 	mov	r3,r2
   825b4:	00801444 	movi	r2,81
   825b8:	18800015 	stw	r2,0(r3)
    return -1;
   825bc:	00bfffc4 	movi	r2,-1
  }
}
   825c0:	e037883a 	mov	sp,fp
   825c4:	dfc00117 	ldw	ra,4(sp)
   825c8:	df000017 	ldw	fp,0(sp)
   825cc:	dec00204 	addi	sp,sp,8
   825d0:	f800283a 	ret

000825d4 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   825d4:	defffb04 	addi	sp,sp,-20
   825d8:	df000415 	stw	fp,16(sp)
   825dc:	df000404 	addi	fp,sp,16
   825e0:	e13ffe15 	stw	r4,-8(fp)
   825e4:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   825e8:	e0fffe17 	ldw	r3,-8(fp)
   825ec:	e0bfff17 	ldw	r2,-4(fp)
   825f0:	1885883a 	add	r2,r3,r2
   825f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   825f8:	e0bffe17 	ldw	r2,-8(fp)
   825fc:	e0bffc15 	stw	r2,-16(fp)
   82600:	00000506 	br	82618 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   82604:	e0bffc17 	ldw	r2,-16(fp)
   82608:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   8260c:	e0bffc17 	ldw	r2,-16(fp)
   82610:	10800804 	addi	r2,r2,32
   82614:	e0bffc15 	stw	r2,-16(fp)
   82618:	e0fffc17 	ldw	r3,-16(fp)
   8261c:	e0bffd17 	ldw	r2,-12(fp)
   82620:	18bff836 	bltu	r3,r2,82604 <rx_descriptor_end+0xfff825a4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   82624:	e0bffe17 	ldw	r2,-8(fp)
   82628:	108007cc 	andi	r2,r2,31
   8262c:	10000226 	beq	r2,zero,82638 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   82630:	e0bffc17 	ldw	r2,-16(fp)
   82634:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82638:	0001883a 	nop
   8263c:	e037883a 	mov	sp,fp
   82640:	df000017 	ldw	fp,0(sp)
   82644:	dec00104 	addi	sp,sp,4
   82648:	f800283a 	ret

0008264c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8264c:	defffe04 	addi	sp,sp,-8
   82650:	df000115 	stw	fp,4(sp)
   82654:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82658:	e03fff15 	stw	zero,-4(fp)
   8265c:	00000506 	br	82674 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   82660:	e0bfff17 	ldw	r2,-4(fp)
   82664:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82668:	e0bfff17 	ldw	r2,-4(fp)
   8266c:	10800804 	addi	r2,r2,32
   82670:	e0bfff15 	stw	r2,-4(fp)
   82674:	e0bfff17 	ldw	r2,-4(fp)
   82678:	10820030 	cmpltui	r2,r2,2048
   8267c:	103ff81e 	bne	r2,zero,82660 <rx_descriptor_end+0xfff82600>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82680:	0001883a 	nop
   82684:	e037883a 	mov	sp,fp
   82688:	df000017 	ldw	fp,0(sp)
   8268c:	dec00104 	addi	sp,sp,4
   82690:	f800283a 	ret

00082694 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82694:	defffc04 	addi	sp,sp,-16
   82698:	df000315 	stw	fp,12(sp)
   8269c:	df000304 	addi	fp,sp,12
   826a0:	e13ffd15 	stw	r4,-12(fp)
   826a4:	e17ffe15 	stw	r5,-8(fp)
   826a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   826ac:	e0bfff17 	ldw	r2,-4(fp)
}
   826b0:	e037883a 	mov	sp,fp
   826b4:	df000017 	ldw	fp,0(sp)
   826b8:	dec00104 	addi	sp,sp,4
   826bc:	f800283a 	ret

000826c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   826c0:	defffe04 	addi	sp,sp,-8
   826c4:	dfc00115 	stw	ra,4(sp)
   826c8:	df000015 	stw	fp,0(sp)
   826cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   826d0:	d0a00717 	ldw	r2,-32740(gp)
   826d4:	10000326 	beq	r2,zero,826e4 <alt_get_errno+0x24>
   826d8:	d0a00717 	ldw	r2,-32740(gp)
   826dc:	103ee83a 	callr	r2
   826e0:	00000106 	br	826e8 <alt_get_errno+0x28>
   826e4:	d0a84b04 	addi	r2,gp,-24276
}
   826e8:	e037883a 	mov	sp,fp
   826ec:	dfc00117 	ldw	ra,4(sp)
   826f0:	df000017 	ldw	fp,0(sp)
   826f4:	dec00204 	addi	sp,sp,8
   826f8:	f800283a 	ret

000826fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   826fc:	defffa04 	addi	sp,sp,-24
   82700:	dfc00515 	stw	ra,20(sp)
   82704:	df000415 	stw	fp,16(sp)
   82708:	df000404 	addi	fp,sp,16
   8270c:	e13ffe15 	stw	r4,-8(fp)
   82710:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   82714:	e0bffe17 	ldw	r2,-8(fp)
   82718:	10000326 	beq	r2,zero,82728 <alt_dev_llist_insert+0x2c>
   8271c:	e0bffe17 	ldw	r2,-8(fp)
   82720:	10800217 	ldw	r2,8(r2)
   82724:	1000061e 	bne	r2,zero,82740 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   82728:	00826c00 	call	826c0 <alt_get_errno>
   8272c:	1007883a 	mov	r3,r2
   82730:	00800584 	movi	r2,22
   82734:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   82738:	00bffa84 	movi	r2,-22
   8273c:	00001306 	br	8278c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   82740:	e0bffe17 	ldw	r2,-8(fp)
   82744:	e0ffff17 	ldw	r3,-4(fp)
   82748:	e0fffc15 	stw	r3,-16(fp)
   8274c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82750:	e0bffd17 	ldw	r2,-12(fp)
   82754:	e0fffc17 	ldw	r3,-16(fp)
   82758:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8275c:	e0bffc17 	ldw	r2,-16(fp)
   82760:	10c00017 	ldw	r3,0(r2)
   82764:	e0bffd17 	ldw	r2,-12(fp)
   82768:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8276c:	e0bffc17 	ldw	r2,-16(fp)
   82770:	10800017 	ldw	r2,0(r2)
   82774:	e0fffd17 	ldw	r3,-12(fp)
   82778:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8277c:	e0bffc17 	ldw	r2,-16(fp)
   82780:	e0fffd17 	ldw	r3,-12(fp)
   82784:	10c00015 	stw	r3,0(r2)

  return 0;  
   82788:	0005883a 	mov	r2,zero
}
   8278c:	e037883a 	mov	sp,fp
   82790:	dfc00117 	ldw	ra,4(sp)
   82794:	df000017 	ldw	fp,0(sp)
   82798:	dec00204 	addi	sp,sp,8
   8279c:	f800283a 	ret

000827a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   827a0:	defffd04 	addi	sp,sp,-12
   827a4:	dfc00215 	stw	ra,8(sp)
   827a8:	df000115 	stw	fp,4(sp)
   827ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   827b0:	00800234 	movhi	r2,8
   827b4:	1097f304 	addi	r2,r2,24524
   827b8:	e0bfff15 	stw	r2,-4(fp)
   827bc:	00000606 	br	827d8 <_do_ctors+0x38>
        (*ctor) (); 
   827c0:	e0bfff17 	ldw	r2,-4(fp)
   827c4:	10800017 	ldw	r2,0(r2)
   827c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   827cc:	e0bfff17 	ldw	r2,-4(fp)
   827d0:	10bfff04 	addi	r2,r2,-4
   827d4:	e0bfff15 	stw	r2,-4(fp)
   827d8:	e0ffff17 	ldw	r3,-4(fp)
   827dc:	00800234 	movhi	r2,8
   827e0:	1097f404 	addi	r2,r2,24528
   827e4:	18bff62e 	bgeu	r3,r2,827c0 <rx_descriptor_end+0xfff82760>
        (*ctor) (); 
}
   827e8:	0001883a 	nop
   827ec:	e037883a 	mov	sp,fp
   827f0:	dfc00117 	ldw	ra,4(sp)
   827f4:	df000017 	ldw	fp,0(sp)
   827f8:	dec00204 	addi	sp,sp,8
   827fc:	f800283a 	ret

00082800 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   82800:	defffd04 	addi	sp,sp,-12
   82804:	dfc00215 	stw	ra,8(sp)
   82808:	df000115 	stw	fp,4(sp)
   8280c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   82810:	00800234 	movhi	r2,8
   82814:	1097f304 	addi	r2,r2,24524
   82818:	e0bfff15 	stw	r2,-4(fp)
   8281c:	00000606 	br	82838 <_do_dtors+0x38>
        (*dtor) (); 
   82820:	e0bfff17 	ldw	r2,-4(fp)
   82824:	10800017 	ldw	r2,0(r2)
   82828:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8282c:	e0bfff17 	ldw	r2,-4(fp)
   82830:	10bfff04 	addi	r2,r2,-4
   82834:	e0bfff15 	stw	r2,-4(fp)
   82838:	e0ffff17 	ldw	r3,-4(fp)
   8283c:	00800234 	movhi	r2,8
   82840:	1097f404 	addi	r2,r2,24528
   82844:	18bff62e 	bgeu	r3,r2,82820 <rx_descriptor_end+0xfff827c0>
        (*dtor) (); 
}
   82848:	0001883a 	nop
   8284c:	e037883a 	mov	sp,fp
   82850:	dfc00117 	ldw	ra,4(sp)
   82854:	df000017 	ldw	fp,0(sp)
   82858:	dec00204 	addi	sp,sp,8
   8285c:	f800283a 	ret

00082860 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82860:	defffa04 	addi	sp,sp,-24
   82864:	dfc00515 	stw	ra,20(sp)
   82868:	df000415 	stw	fp,16(sp)
   8286c:	df000404 	addi	fp,sp,16
   82870:	e13ffe15 	stw	r4,-8(fp)
   82874:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82878:	e0bfff17 	ldw	r2,-4(fp)
   8287c:	10800017 	ldw	r2,0(r2)
   82880:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82884:	e13ffe17 	ldw	r4,-8(fp)
   82888:	00837d40 	call	837d4 <strlen>
   8288c:	10800044 	addi	r2,r2,1
   82890:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82894:	00000d06 	br	828cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82898:	e0bffc17 	ldw	r2,-16(fp)
   8289c:	10800217 	ldw	r2,8(r2)
   828a0:	e0fffd17 	ldw	r3,-12(fp)
   828a4:	180d883a 	mov	r6,r3
   828a8:	e17ffe17 	ldw	r5,-8(fp)
   828ac:	1009883a 	mov	r4,r2
   828b0:	00834a80 	call	834a8 <memcmp>
   828b4:	1000021e 	bne	r2,zero,828c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   828b8:	e0bffc17 	ldw	r2,-16(fp)
   828bc:	00000706 	br	828dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   828c0:	e0bffc17 	ldw	r2,-16(fp)
   828c4:	10800017 	ldw	r2,0(r2)
   828c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   828cc:	e0fffc17 	ldw	r3,-16(fp)
   828d0:	e0bfff17 	ldw	r2,-4(fp)
   828d4:	18bff01e 	bne	r3,r2,82898 <rx_descriptor_end+0xfff82838>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   828d8:	0005883a 	mov	r2,zero
}
   828dc:	e037883a 	mov	sp,fp
   828e0:	dfc00117 	ldw	ra,4(sp)
   828e4:	df000017 	ldw	fp,0(sp)
   828e8:	dec00204 	addi	sp,sp,8
   828ec:	f800283a 	ret

000828f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   828f0:	defffe04 	addi	sp,sp,-8
   828f4:	dfc00115 	stw	ra,4(sp)
   828f8:	df000015 	stw	fp,0(sp)
   828fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   82900:	01440004 	movi	r5,4096
   82904:	0009883a 	mov	r4,zero
   82908:	00833300 	call	83330 <alt_icache_flush>
#endif
}
   8290c:	0001883a 	nop
   82910:	e037883a 	mov	sp,fp
   82914:	dfc00117 	ldw	ra,4(sp)
   82918:	df000017 	ldw	fp,0(sp)
   8291c:	dec00204 	addi	sp,sp,8
   82920:	f800283a 	ret

00082924 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82924:	defff904 	addi	sp,sp,-28
   82928:	dfc00615 	stw	ra,24(sp)
   8292c:	df000515 	stw	fp,20(sp)
   82930:	df000504 	addi	fp,sp,20
   82934:	e13ffc15 	stw	r4,-16(fp)
   82938:	e17ffd15 	stw	r5,-12(fp)
   8293c:	e1bffe15 	stw	r6,-8(fp)
   82940:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   82944:	e0800217 	ldw	r2,8(fp)
   82948:	d8800015 	stw	r2,0(sp)
   8294c:	e1ffff17 	ldw	r7,-4(fp)
   82950:	e1bffe17 	ldw	r6,-8(fp)
   82954:	e17ffd17 	ldw	r5,-12(fp)
   82958:	e13ffc17 	ldw	r4,-16(fp)
   8295c:	0082ad40 	call	82ad4 <alt_iic_isr_register>
}  
   82960:	e037883a 	mov	sp,fp
   82964:	dfc00117 	ldw	ra,4(sp)
   82968:	df000017 	ldw	fp,0(sp)
   8296c:	dec00204 	addi	sp,sp,8
   82970:	f800283a 	ret

00082974 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   82974:	defff904 	addi	sp,sp,-28
   82978:	df000615 	stw	fp,24(sp)
   8297c:	df000604 	addi	fp,sp,24
   82980:	e13ffe15 	stw	r4,-8(fp)
   82984:	e17fff15 	stw	r5,-4(fp)
   82988:	e0bfff17 	ldw	r2,-4(fp)
   8298c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82990:	0005303a 	rdctl	r2,status
   82994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82998:	e0fffb17 	ldw	r3,-20(fp)
   8299c:	00bfff84 	movi	r2,-2
   829a0:	1884703a 	and	r2,r3,r2
   829a4:	1001703a 	wrctl	status,r2
  
  return context;
   829a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   829ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   829b0:	00c00044 	movi	r3,1
   829b4:	e0bffa17 	ldw	r2,-24(fp)
   829b8:	1884983a 	sll	r2,r3,r2
   829bc:	1007883a 	mov	r3,r2
   829c0:	d0a84717 	ldw	r2,-24292(gp)
   829c4:	1884b03a 	or	r2,r3,r2
   829c8:	d0a84715 	stw	r2,-24292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   829cc:	d0a84717 	ldw	r2,-24292(gp)
   829d0:	100170fa 	wrctl	ienable,r2
   829d4:	e0bffc17 	ldw	r2,-16(fp)
   829d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   829dc:	e0bffd17 	ldw	r2,-12(fp)
   829e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   829e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   829e8:	0001883a 	nop
}
   829ec:	e037883a 	mov	sp,fp
   829f0:	df000017 	ldw	fp,0(sp)
   829f4:	dec00104 	addi	sp,sp,4
   829f8:	f800283a 	ret

000829fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   829fc:	defff904 	addi	sp,sp,-28
   82a00:	df000615 	stw	fp,24(sp)
   82a04:	df000604 	addi	fp,sp,24
   82a08:	e13ffe15 	stw	r4,-8(fp)
   82a0c:	e17fff15 	stw	r5,-4(fp)
   82a10:	e0bfff17 	ldw	r2,-4(fp)
   82a14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82a18:	0005303a 	rdctl	r2,status
   82a1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82a20:	e0fffb17 	ldw	r3,-20(fp)
   82a24:	00bfff84 	movi	r2,-2
   82a28:	1884703a 	and	r2,r3,r2
   82a2c:	1001703a 	wrctl	status,r2
  
  return context;
   82a30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82a34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   82a38:	00c00044 	movi	r3,1
   82a3c:	e0bffa17 	ldw	r2,-24(fp)
   82a40:	1884983a 	sll	r2,r3,r2
   82a44:	0084303a 	nor	r2,zero,r2
   82a48:	1007883a 	mov	r3,r2
   82a4c:	d0a84717 	ldw	r2,-24292(gp)
   82a50:	1884703a 	and	r2,r3,r2
   82a54:	d0a84715 	stw	r2,-24292(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82a58:	d0a84717 	ldw	r2,-24292(gp)
   82a5c:	100170fa 	wrctl	ienable,r2
   82a60:	e0bffc17 	ldw	r2,-16(fp)
   82a64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82a68:	e0bffd17 	ldw	r2,-12(fp)
   82a6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82a70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   82a74:	0001883a 	nop
}
   82a78:	e037883a 	mov	sp,fp
   82a7c:	df000017 	ldw	fp,0(sp)
   82a80:	dec00104 	addi	sp,sp,4
   82a84:	f800283a 	ret

00082a88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   82a88:	defffc04 	addi	sp,sp,-16
   82a8c:	df000315 	stw	fp,12(sp)
   82a90:	df000304 	addi	fp,sp,12
   82a94:	e13ffe15 	stw	r4,-8(fp)
   82a98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   82a9c:	000530fa 	rdctl	r2,ienable
   82aa0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   82aa4:	00c00044 	movi	r3,1
   82aa8:	e0bfff17 	ldw	r2,-4(fp)
   82aac:	1884983a 	sll	r2,r3,r2
   82ab0:	1007883a 	mov	r3,r2
   82ab4:	e0bffd17 	ldw	r2,-12(fp)
   82ab8:	1884703a 	and	r2,r3,r2
   82abc:	1004c03a 	cmpne	r2,r2,zero
   82ac0:	10803fcc 	andi	r2,r2,255
}
   82ac4:	e037883a 	mov	sp,fp
   82ac8:	df000017 	ldw	fp,0(sp)
   82acc:	dec00104 	addi	sp,sp,4
   82ad0:	f800283a 	ret

00082ad4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82ad4:	defff504 	addi	sp,sp,-44
   82ad8:	dfc00a15 	stw	ra,40(sp)
   82adc:	df000915 	stw	fp,36(sp)
   82ae0:	df000904 	addi	fp,sp,36
   82ae4:	e13ffc15 	stw	r4,-16(fp)
   82ae8:	e17ffd15 	stw	r5,-12(fp)
   82aec:	e1bffe15 	stw	r6,-8(fp)
   82af0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   82af4:	00bffa84 	movi	r2,-22
   82af8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   82afc:	e0bffd17 	ldw	r2,-12(fp)
   82b00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82b04:	e0bff817 	ldw	r2,-32(fp)
   82b08:	10800808 	cmpgei	r2,r2,32
   82b0c:	1000271e 	bne	r2,zero,82bac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82b10:	0005303a 	rdctl	r2,status
   82b14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82b18:	e0fffb17 	ldw	r3,-20(fp)
   82b1c:	00bfff84 	movi	r2,-2
   82b20:	1884703a 	and	r2,r3,r2
   82b24:	1001703a 	wrctl	status,r2
  
  return context;
   82b28:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   82b2c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   82b30:	00800274 	movhi	r2,9
   82b34:	10aa3c04 	addi	r2,r2,-22288
   82b38:	e0fff817 	ldw	r3,-32(fp)
   82b3c:	180690fa 	slli	r3,r3,3
   82b40:	10c5883a 	add	r2,r2,r3
   82b44:	e0fffe17 	ldw	r3,-8(fp)
   82b48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   82b4c:	00800274 	movhi	r2,9
   82b50:	10aa3c04 	addi	r2,r2,-22288
   82b54:	e0fff817 	ldw	r3,-32(fp)
   82b58:	180690fa 	slli	r3,r3,3
   82b5c:	10c5883a 	add	r2,r2,r3
   82b60:	10800104 	addi	r2,r2,4
   82b64:	e0ffff17 	ldw	r3,-4(fp)
   82b68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82b6c:	e0bffe17 	ldw	r2,-8(fp)
   82b70:	10000526 	beq	r2,zero,82b88 <alt_iic_isr_register+0xb4>
   82b74:	e0bff817 	ldw	r2,-32(fp)
   82b78:	100b883a 	mov	r5,r2
   82b7c:	e13ffc17 	ldw	r4,-16(fp)
   82b80:	00829740 	call	82974 <alt_ic_irq_enable>
   82b84:	00000406 	br	82b98 <alt_iic_isr_register+0xc4>
   82b88:	e0bff817 	ldw	r2,-32(fp)
   82b8c:	100b883a 	mov	r5,r2
   82b90:	e13ffc17 	ldw	r4,-16(fp)
   82b94:	00829fc0 	call	829fc <alt_ic_irq_disable>
   82b98:	e0bff715 	stw	r2,-36(fp)
   82b9c:	e0bffa17 	ldw	r2,-24(fp)
   82ba0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82ba4:	e0bff917 	ldw	r2,-28(fp)
   82ba8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   82bac:	e0bff717 	ldw	r2,-36(fp)
}
   82bb0:	e037883a 	mov	sp,fp
   82bb4:	dfc00117 	ldw	ra,4(sp)
   82bb8:	df000017 	ldw	fp,0(sp)
   82bbc:	dec00204 	addi	sp,sp,8
   82bc0:	f800283a 	ret

00082bc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   82bc4:	defff904 	addi	sp,sp,-28
   82bc8:	dfc00615 	stw	ra,24(sp)
   82bcc:	df000515 	stw	fp,20(sp)
   82bd0:	df000504 	addi	fp,sp,20
   82bd4:	e13ffc15 	stw	r4,-16(fp)
   82bd8:	e17ffd15 	stw	r5,-12(fp)
   82bdc:	e1bffe15 	stw	r6,-8(fp)
   82be0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   82be4:	e1bfff17 	ldw	r6,-4(fp)
   82be8:	e17ffe17 	ldw	r5,-8(fp)
   82bec:	e13ffd17 	ldw	r4,-12(fp)
   82bf0:	0082e040 	call	82e04 <open>
   82bf4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   82bf8:	e0bffb17 	ldw	r2,-20(fp)
   82bfc:	10001c16 	blt	r2,zero,82c70 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   82c00:	00800234 	movhi	r2,8
   82c04:	109dfc04 	addi	r2,r2,30704
   82c08:	e0fffb17 	ldw	r3,-20(fp)
   82c0c:	18c00324 	muli	r3,r3,12
   82c10:	10c5883a 	add	r2,r2,r3
   82c14:	10c00017 	ldw	r3,0(r2)
   82c18:	e0bffc17 	ldw	r2,-16(fp)
   82c1c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   82c20:	00800234 	movhi	r2,8
   82c24:	109dfc04 	addi	r2,r2,30704
   82c28:	e0fffb17 	ldw	r3,-20(fp)
   82c2c:	18c00324 	muli	r3,r3,12
   82c30:	10c5883a 	add	r2,r2,r3
   82c34:	10800104 	addi	r2,r2,4
   82c38:	10c00017 	ldw	r3,0(r2)
   82c3c:	e0bffc17 	ldw	r2,-16(fp)
   82c40:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82c44:	00800234 	movhi	r2,8
   82c48:	109dfc04 	addi	r2,r2,30704
   82c4c:	e0fffb17 	ldw	r3,-20(fp)
   82c50:	18c00324 	muli	r3,r3,12
   82c54:	10c5883a 	add	r2,r2,r3
   82c58:	10800204 	addi	r2,r2,8
   82c5c:	10c00017 	ldw	r3,0(r2)
   82c60:	e0bffc17 	ldw	r2,-16(fp)
   82c64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   82c68:	e13ffb17 	ldw	r4,-20(fp)
   82c6c:	0082f580 	call	82f58 <alt_release_fd>
  }
} 
   82c70:	0001883a 	nop
   82c74:	e037883a 	mov	sp,fp
   82c78:	dfc00117 	ldw	ra,4(sp)
   82c7c:	df000017 	ldw	fp,0(sp)
   82c80:	dec00204 	addi	sp,sp,8
   82c84:	f800283a 	ret

00082c88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82c88:	defffb04 	addi	sp,sp,-20
   82c8c:	dfc00415 	stw	ra,16(sp)
   82c90:	df000315 	stw	fp,12(sp)
   82c94:	df000304 	addi	fp,sp,12
   82c98:	e13ffd15 	stw	r4,-12(fp)
   82c9c:	e17ffe15 	stw	r5,-8(fp)
   82ca0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   82ca4:	01c07fc4 	movi	r7,511
   82ca8:	01800044 	movi	r6,1
   82cac:	e17ffd17 	ldw	r5,-12(fp)
   82cb0:	01000234 	movhi	r4,8
   82cb4:	211dff04 	addi	r4,r4,30716
   82cb8:	0082bc40 	call	82bc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82cbc:	01c07fc4 	movi	r7,511
   82cc0:	000d883a 	mov	r6,zero
   82cc4:	e17ffe17 	ldw	r5,-8(fp)
   82cc8:	01000234 	movhi	r4,8
   82ccc:	211dfc04 	addi	r4,r4,30704
   82cd0:	0082bc40 	call	82bc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82cd4:	01c07fc4 	movi	r7,511
   82cd8:	01800044 	movi	r6,1
   82cdc:	e17fff17 	ldw	r5,-4(fp)
   82ce0:	01000234 	movhi	r4,8
   82ce4:	211e0204 	addi	r4,r4,30728
   82ce8:	0082bc40 	call	82bc4 <alt_open_fd>
}  
   82cec:	0001883a 	nop
   82cf0:	e037883a 	mov	sp,fp
   82cf4:	dfc00117 	ldw	ra,4(sp)
   82cf8:	df000017 	ldw	fp,0(sp)
   82cfc:	dec00204 	addi	sp,sp,8
   82d00:	f800283a 	ret

00082d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82d04:	defffe04 	addi	sp,sp,-8
   82d08:	dfc00115 	stw	ra,4(sp)
   82d0c:	df000015 	stw	fp,0(sp)
   82d10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82d14:	d0a00717 	ldw	r2,-32740(gp)
   82d18:	10000326 	beq	r2,zero,82d28 <alt_get_errno+0x24>
   82d1c:	d0a00717 	ldw	r2,-32740(gp)
   82d20:	103ee83a 	callr	r2
   82d24:	00000106 	br	82d2c <alt_get_errno+0x28>
   82d28:	d0a84b04 	addi	r2,gp,-24276
}
   82d2c:	e037883a 	mov	sp,fp
   82d30:	dfc00117 	ldw	ra,4(sp)
   82d34:	df000017 	ldw	fp,0(sp)
   82d38:	dec00204 	addi	sp,sp,8
   82d3c:	f800283a 	ret

00082d40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   82d40:	defffd04 	addi	sp,sp,-12
   82d44:	df000215 	stw	fp,8(sp)
   82d48:	df000204 	addi	fp,sp,8
   82d4c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   82d50:	e0bfff17 	ldw	r2,-4(fp)
   82d54:	10800217 	ldw	r2,8(r2)
   82d58:	10d00034 	orhi	r3,r2,16384
   82d5c:	e0bfff17 	ldw	r2,-4(fp)
   82d60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82d64:	e03ffe15 	stw	zero,-8(fp)
   82d68:	00001d06 	br	82de0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82d6c:	00800234 	movhi	r2,8
   82d70:	109dfc04 	addi	r2,r2,30704
   82d74:	e0fffe17 	ldw	r3,-8(fp)
   82d78:	18c00324 	muli	r3,r3,12
   82d7c:	10c5883a 	add	r2,r2,r3
   82d80:	10c00017 	ldw	r3,0(r2)
   82d84:	e0bfff17 	ldw	r2,-4(fp)
   82d88:	10800017 	ldw	r2,0(r2)
   82d8c:	1880111e 	bne	r3,r2,82dd4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82d90:	00800234 	movhi	r2,8
   82d94:	109dfc04 	addi	r2,r2,30704
   82d98:	e0fffe17 	ldw	r3,-8(fp)
   82d9c:	18c00324 	muli	r3,r3,12
   82da0:	10c5883a 	add	r2,r2,r3
   82da4:	10800204 	addi	r2,r2,8
   82da8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82dac:	1000090e 	bge	r2,zero,82dd4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   82db0:	e0bffe17 	ldw	r2,-8(fp)
   82db4:	10c00324 	muli	r3,r2,12
   82db8:	00800234 	movhi	r2,8
   82dbc:	109dfc04 	addi	r2,r2,30704
   82dc0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82dc4:	e0bfff17 	ldw	r2,-4(fp)
   82dc8:	18800226 	beq	r3,r2,82dd4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82dcc:	00bffcc4 	movi	r2,-13
   82dd0:	00000806 	br	82df4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82dd4:	e0bffe17 	ldw	r2,-8(fp)
   82dd8:	10800044 	addi	r2,r2,1
   82ddc:	e0bffe15 	stw	r2,-8(fp)
   82de0:	d0a00617 	ldw	r2,-32744(gp)
   82de4:	1007883a 	mov	r3,r2
   82de8:	e0bffe17 	ldw	r2,-8(fp)
   82dec:	18bfdf2e 	bgeu	r3,r2,82d6c <rx_descriptor_end+0xfff82d0c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82df0:	0005883a 	mov	r2,zero
}
   82df4:	e037883a 	mov	sp,fp
   82df8:	df000017 	ldw	fp,0(sp)
   82dfc:	dec00104 	addi	sp,sp,4
   82e00:	f800283a 	ret

00082e04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82e04:	defff604 	addi	sp,sp,-40
   82e08:	dfc00915 	stw	ra,36(sp)
   82e0c:	df000815 	stw	fp,32(sp)
   82e10:	df000804 	addi	fp,sp,32
   82e14:	e13ffd15 	stw	r4,-12(fp)
   82e18:	e17ffe15 	stw	r5,-8(fp)
   82e1c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82e20:	00bfffc4 	movi	r2,-1
   82e24:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   82e28:	00bffb44 	movi	r2,-19
   82e2c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   82e30:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82e34:	d1600404 	addi	r5,gp,-32752
   82e38:	e13ffd17 	ldw	r4,-12(fp)
   82e3c:	00828600 	call	82860 <alt_find_dev>
   82e40:	e0bff815 	stw	r2,-32(fp)
   82e44:	e0bff817 	ldw	r2,-32(fp)
   82e48:	1000051e 	bne	r2,zero,82e60 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   82e4c:	e13ffd17 	ldw	r4,-12(fp)
   82e50:	00831840 	call	83184 <alt_find_file>
   82e54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   82e58:	00800044 	movi	r2,1
   82e5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   82e60:	e0bff817 	ldw	r2,-32(fp)
   82e64:	10002926 	beq	r2,zero,82f0c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   82e68:	e13ff817 	ldw	r4,-32(fp)
   82e6c:	008328c0 	call	8328c <alt_get_fd>
   82e70:	e0bff915 	stw	r2,-28(fp)
   82e74:	e0bff917 	ldw	r2,-28(fp)
   82e78:	1000030e 	bge	r2,zero,82e88 <open+0x84>
    {
      status = index;
   82e7c:	e0bff917 	ldw	r2,-28(fp)
   82e80:	e0bffa15 	stw	r2,-24(fp)
   82e84:	00002306 	br	82f14 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   82e88:	e0bff917 	ldw	r2,-28(fp)
   82e8c:	10c00324 	muli	r3,r2,12
   82e90:	00800234 	movhi	r2,8
   82e94:	109dfc04 	addi	r2,r2,30704
   82e98:	1885883a 	add	r2,r3,r2
   82e9c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82ea0:	e0fffe17 	ldw	r3,-8(fp)
   82ea4:	00900034 	movhi	r2,16384
   82ea8:	10bfffc4 	addi	r2,r2,-1
   82eac:	1886703a 	and	r3,r3,r2
   82eb0:	e0bffc17 	ldw	r2,-16(fp)
   82eb4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82eb8:	e0bffb17 	ldw	r2,-20(fp)
   82ebc:	1000051e 	bne	r2,zero,82ed4 <open+0xd0>
   82ec0:	e13ffc17 	ldw	r4,-16(fp)
   82ec4:	0082d400 	call	82d40 <alt_file_locked>
   82ec8:	e0bffa15 	stw	r2,-24(fp)
   82ecc:	e0bffa17 	ldw	r2,-24(fp)
   82ed0:	10001016 	blt	r2,zero,82f14 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82ed4:	e0bff817 	ldw	r2,-32(fp)
   82ed8:	10800317 	ldw	r2,12(r2)
   82edc:	10000826 	beq	r2,zero,82f00 <open+0xfc>
   82ee0:	e0bff817 	ldw	r2,-32(fp)
   82ee4:	10800317 	ldw	r2,12(r2)
   82ee8:	e1ffff17 	ldw	r7,-4(fp)
   82eec:	e1bffe17 	ldw	r6,-8(fp)
   82ef0:	e17ffd17 	ldw	r5,-12(fp)
   82ef4:	e13ffc17 	ldw	r4,-16(fp)
   82ef8:	103ee83a 	callr	r2
   82efc:	00000106 	br	82f04 <open+0x100>
   82f00:	0005883a 	mov	r2,zero
   82f04:	e0bffa15 	stw	r2,-24(fp)
   82f08:	00000206 	br	82f14 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82f0c:	00bffb44 	movi	r2,-19
   82f10:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82f14:	e0bffa17 	ldw	r2,-24(fp)
   82f18:	1000090e 	bge	r2,zero,82f40 <open+0x13c>
  {
    alt_release_fd (index);  
   82f1c:	e13ff917 	ldw	r4,-28(fp)
   82f20:	0082f580 	call	82f58 <alt_release_fd>
    ALT_ERRNO = -status;
   82f24:	0082d040 	call	82d04 <alt_get_errno>
   82f28:	1007883a 	mov	r3,r2
   82f2c:	e0bffa17 	ldw	r2,-24(fp)
   82f30:	0085c83a 	sub	r2,zero,r2
   82f34:	18800015 	stw	r2,0(r3)
    return -1;
   82f38:	00bfffc4 	movi	r2,-1
   82f3c:	00000106 	br	82f44 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   82f40:	e0bff917 	ldw	r2,-28(fp)
}
   82f44:	e037883a 	mov	sp,fp
   82f48:	dfc00117 	ldw	ra,4(sp)
   82f4c:	df000017 	ldw	fp,0(sp)
   82f50:	dec00204 	addi	sp,sp,8
   82f54:	f800283a 	ret

00082f58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82f58:	defffe04 	addi	sp,sp,-8
   82f5c:	df000115 	stw	fp,4(sp)
   82f60:	df000104 	addi	fp,sp,4
   82f64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82f68:	e0bfff17 	ldw	r2,-4(fp)
   82f6c:	108000d0 	cmplti	r2,r2,3
   82f70:	10000d1e 	bne	r2,zero,82fa8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   82f74:	00800234 	movhi	r2,8
   82f78:	109dfc04 	addi	r2,r2,30704
   82f7c:	e0ffff17 	ldw	r3,-4(fp)
   82f80:	18c00324 	muli	r3,r3,12
   82f84:	10c5883a 	add	r2,r2,r3
   82f88:	10800204 	addi	r2,r2,8
   82f8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82f90:	00800234 	movhi	r2,8
   82f94:	109dfc04 	addi	r2,r2,30704
   82f98:	e0ffff17 	ldw	r3,-4(fp)
   82f9c:	18c00324 	muli	r3,r3,12
   82fa0:	10c5883a 	add	r2,r2,r3
   82fa4:	10000015 	stw	zero,0(r2)
  }
}
   82fa8:	0001883a 	nop
   82fac:	e037883a 	mov	sp,fp
   82fb0:	df000017 	ldw	fp,0(sp)
   82fb4:	dec00104 	addi	sp,sp,4
   82fb8:	f800283a 	ret

00082fbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82fbc:	defffa04 	addi	sp,sp,-24
   82fc0:	df000515 	stw	fp,20(sp)
   82fc4:	df000504 	addi	fp,sp,20
   82fc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82fcc:	0005303a 	rdctl	r2,status
   82fd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82fd4:	e0fffc17 	ldw	r3,-16(fp)
   82fd8:	00bfff84 	movi	r2,-2
   82fdc:	1884703a 	and	r2,r3,r2
   82fe0:	1001703a 	wrctl	status,r2
  
  return context;
   82fe4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82fe8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   82fec:	e0bfff17 	ldw	r2,-4(fp)
   82ff0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   82ff4:	e0bffd17 	ldw	r2,-12(fp)
   82ff8:	10800017 	ldw	r2,0(r2)
   82ffc:	e0fffd17 	ldw	r3,-12(fp)
   83000:	18c00117 	ldw	r3,4(r3)
   83004:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   83008:	e0bffd17 	ldw	r2,-12(fp)
   8300c:	10800117 	ldw	r2,4(r2)
   83010:	e0fffd17 	ldw	r3,-12(fp)
   83014:	18c00017 	ldw	r3,0(r3)
   83018:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8301c:	e0bffd17 	ldw	r2,-12(fp)
   83020:	e0fffd17 	ldw	r3,-12(fp)
   83024:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   83028:	e0bffd17 	ldw	r2,-12(fp)
   8302c:	e0fffd17 	ldw	r3,-12(fp)
   83030:	10c00015 	stw	r3,0(r2)
   83034:	e0bffb17 	ldw	r2,-20(fp)
   83038:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8303c:	e0bffe17 	ldw	r2,-8(fp)
   83040:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   83044:	0001883a 	nop
   83048:	e037883a 	mov	sp,fp
   8304c:	df000017 	ldw	fp,0(sp)
   83050:	dec00104 	addi	sp,sp,4
   83054:	f800283a 	ret

00083058 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   83058:	defffb04 	addi	sp,sp,-20
   8305c:	dfc00415 	stw	ra,16(sp)
   83060:	df000315 	stw	fp,12(sp)
   83064:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   83068:	d0a00917 	ldw	r2,-32732(gp)
   8306c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   83070:	d0a84917 	ldw	r2,-24284(gp)
   83074:	10800044 	addi	r2,r2,1
   83078:	d0a84915 	stw	r2,-24284(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8307c:	00002e06 	br	83138 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   83080:	e0bffd17 	ldw	r2,-12(fp)
   83084:	10800017 	ldw	r2,0(r2)
   83088:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8308c:	e0bffd17 	ldw	r2,-12(fp)
   83090:	10800403 	ldbu	r2,16(r2)
   83094:	10803fcc 	andi	r2,r2,255
   83098:	10000426 	beq	r2,zero,830ac <alt_tick+0x54>
   8309c:	d0a84917 	ldw	r2,-24284(gp)
   830a0:	1000021e 	bne	r2,zero,830ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   830a4:	e0bffd17 	ldw	r2,-12(fp)
   830a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   830ac:	e0bffd17 	ldw	r2,-12(fp)
   830b0:	10800217 	ldw	r2,8(r2)
   830b4:	d0e84917 	ldw	r3,-24284(gp)
   830b8:	18801d36 	bltu	r3,r2,83130 <alt_tick+0xd8>
   830bc:	e0bffd17 	ldw	r2,-12(fp)
   830c0:	10800403 	ldbu	r2,16(r2)
   830c4:	10803fcc 	andi	r2,r2,255
   830c8:	1000191e 	bne	r2,zero,83130 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   830cc:	e0bffd17 	ldw	r2,-12(fp)
   830d0:	10800317 	ldw	r2,12(r2)
   830d4:	e0fffd17 	ldw	r3,-12(fp)
   830d8:	18c00517 	ldw	r3,20(r3)
   830dc:	1809883a 	mov	r4,r3
   830e0:	103ee83a 	callr	r2
   830e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   830e8:	e0bfff17 	ldw	r2,-4(fp)
   830ec:	1000031e 	bne	r2,zero,830fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   830f0:	e13ffd17 	ldw	r4,-12(fp)
   830f4:	0082fbc0 	call	82fbc <alt_alarm_stop>
   830f8:	00000d06 	br	83130 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   830fc:	e0bffd17 	ldw	r2,-12(fp)
   83100:	10c00217 	ldw	r3,8(r2)
   83104:	e0bfff17 	ldw	r2,-4(fp)
   83108:	1887883a 	add	r3,r3,r2
   8310c:	e0bffd17 	ldw	r2,-12(fp)
   83110:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   83114:	e0bffd17 	ldw	r2,-12(fp)
   83118:	10c00217 	ldw	r3,8(r2)
   8311c:	d0a84917 	ldw	r2,-24284(gp)
   83120:	1880032e 	bgeu	r3,r2,83130 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   83124:	e0bffd17 	ldw	r2,-12(fp)
   83128:	00c00044 	movi	r3,1
   8312c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   83130:	e0bffe17 	ldw	r2,-8(fp)
   83134:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   83138:	e0fffd17 	ldw	r3,-12(fp)
   8313c:	d0a00904 	addi	r2,gp,-32732
   83140:	18bfcf1e 	bne	r3,r2,83080 <rx_descriptor_end+0xfff83020>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   83144:	0001883a 	nop
}
   83148:	0001883a 	nop
   8314c:	e037883a 	mov	sp,fp
   83150:	dfc00117 	ldw	ra,4(sp)
   83154:	df000017 	ldw	fp,0(sp)
   83158:	dec00204 	addi	sp,sp,8
   8315c:	f800283a 	ret

00083160 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   83160:	deffff04 	addi	sp,sp,-4
   83164:	df000015 	stw	fp,0(sp)
   83168:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8316c:	000170fa 	wrctl	ienable,zero
}
   83170:	0001883a 	nop
   83174:	e037883a 	mov	sp,fp
   83178:	df000017 	ldw	fp,0(sp)
   8317c:	dec00104 	addi	sp,sp,4
   83180:	f800283a 	ret

00083184 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   83184:	defffb04 	addi	sp,sp,-20
   83188:	dfc00415 	stw	ra,16(sp)
   8318c:	df000315 	stw	fp,12(sp)
   83190:	df000304 	addi	fp,sp,12
   83194:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   83198:	d0a00217 	ldw	r2,-32760(gp)
   8319c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   831a0:	00003106 	br	83268 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   831a4:	e0bffd17 	ldw	r2,-12(fp)
   831a8:	10800217 	ldw	r2,8(r2)
   831ac:	1009883a 	mov	r4,r2
   831b0:	00837d40 	call	837d4 <strlen>
   831b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   831b8:	e0bffd17 	ldw	r2,-12(fp)
   831bc:	10c00217 	ldw	r3,8(r2)
   831c0:	e0bffe17 	ldw	r2,-8(fp)
   831c4:	10bfffc4 	addi	r2,r2,-1
   831c8:	1885883a 	add	r2,r3,r2
   831cc:	10800003 	ldbu	r2,0(r2)
   831d0:	10803fcc 	andi	r2,r2,255
   831d4:	1080201c 	xori	r2,r2,128
   831d8:	10bfe004 	addi	r2,r2,-128
   831dc:	10800bd8 	cmpnei	r2,r2,47
   831e0:	1000031e 	bne	r2,zero,831f0 <alt_find_file+0x6c>
    {
      len -= 1;
   831e4:	e0bffe17 	ldw	r2,-8(fp)
   831e8:	10bfffc4 	addi	r2,r2,-1
   831ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   831f0:	e0bffe17 	ldw	r2,-8(fp)
   831f4:	e0ffff17 	ldw	r3,-4(fp)
   831f8:	1885883a 	add	r2,r3,r2
   831fc:	10800003 	ldbu	r2,0(r2)
   83200:	10803fcc 	andi	r2,r2,255
   83204:	1080201c 	xori	r2,r2,128
   83208:	10bfe004 	addi	r2,r2,-128
   8320c:	10800be0 	cmpeqi	r2,r2,47
   83210:	1000081e 	bne	r2,zero,83234 <alt_find_file+0xb0>
   83214:	e0bffe17 	ldw	r2,-8(fp)
   83218:	e0ffff17 	ldw	r3,-4(fp)
   8321c:	1885883a 	add	r2,r3,r2
   83220:	10800003 	ldbu	r2,0(r2)
   83224:	10803fcc 	andi	r2,r2,255
   83228:	1080201c 	xori	r2,r2,128
   8322c:	10bfe004 	addi	r2,r2,-128
   83230:	10000a1e 	bne	r2,zero,8325c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   83234:	e0bffd17 	ldw	r2,-12(fp)
   83238:	10800217 	ldw	r2,8(r2)
   8323c:	e0fffe17 	ldw	r3,-8(fp)
   83240:	180d883a 	mov	r6,r3
   83244:	e17fff17 	ldw	r5,-4(fp)
   83248:	1009883a 	mov	r4,r2
   8324c:	00834a80 	call	834a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   83250:	1000021e 	bne	r2,zero,8325c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   83254:	e0bffd17 	ldw	r2,-12(fp)
   83258:	00000706 	br	83278 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   8325c:	e0bffd17 	ldw	r2,-12(fp)
   83260:	10800017 	ldw	r2,0(r2)
   83264:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   83268:	e0fffd17 	ldw	r3,-12(fp)
   8326c:	d0a00204 	addi	r2,gp,-32760
   83270:	18bfcc1e 	bne	r3,r2,831a4 <rx_descriptor_end+0xfff83144>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   83274:	0005883a 	mov	r2,zero
}
   83278:	e037883a 	mov	sp,fp
   8327c:	dfc00117 	ldw	ra,4(sp)
   83280:	df000017 	ldw	fp,0(sp)
   83284:	dec00204 	addi	sp,sp,8
   83288:	f800283a 	ret

0008328c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8328c:	defffc04 	addi	sp,sp,-16
   83290:	df000315 	stw	fp,12(sp)
   83294:	df000304 	addi	fp,sp,12
   83298:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8329c:	00bffa04 	movi	r2,-24
   832a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   832a4:	e03ffd15 	stw	zero,-12(fp)
   832a8:	00001906 	br	83310 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   832ac:	00800234 	movhi	r2,8
   832b0:	109dfc04 	addi	r2,r2,30704
   832b4:	e0fffd17 	ldw	r3,-12(fp)
   832b8:	18c00324 	muli	r3,r3,12
   832bc:	10c5883a 	add	r2,r2,r3
   832c0:	10800017 	ldw	r2,0(r2)
   832c4:	10000f1e 	bne	r2,zero,83304 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   832c8:	00800234 	movhi	r2,8
   832cc:	109dfc04 	addi	r2,r2,30704
   832d0:	e0fffd17 	ldw	r3,-12(fp)
   832d4:	18c00324 	muli	r3,r3,12
   832d8:	10c5883a 	add	r2,r2,r3
   832dc:	e0ffff17 	ldw	r3,-4(fp)
   832e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   832e4:	d0e00617 	ldw	r3,-32744(gp)
   832e8:	e0bffd17 	ldw	r2,-12(fp)
   832ec:	1880020e 	bge	r3,r2,832f8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   832f0:	e0bffd17 	ldw	r2,-12(fp)
   832f4:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   832f8:	e0bffd17 	ldw	r2,-12(fp)
   832fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   83300:	00000606 	br	8331c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   83304:	e0bffd17 	ldw	r2,-12(fp)
   83308:	10800044 	addi	r2,r2,1
   8330c:	e0bffd15 	stw	r2,-12(fp)
   83310:	e0bffd17 	ldw	r2,-12(fp)
   83314:	10800810 	cmplti	r2,r2,32
   83318:	103fe41e 	bne	r2,zero,832ac <rx_descriptor_end+0xfff8324c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8331c:	e0bffe17 	ldw	r2,-8(fp)
}
   83320:	e037883a 	mov	sp,fp
   83324:	df000017 	ldw	fp,0(sp)
   83328:	dec00104 	addi	sp,sp,4
   8332c:	f800283a 	ret

00083330 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   83330:	defffb04 	addi	sp,sp,-20
   83334:	df000415 	stw	fp,16(sp)
   83338:	df000404 	addi	fp,sp,16
   8333c:	e13ffe15 	stw	r4,-8(fp)
   83340:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   83344:	e0bfff17 	ldw	r2,-4(fp)
   83348:	10840070 	cmpltui	r2,r2,4097
   8334c:	1000021e 	bne	r2,zero,83358 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   83350:	00840004 	movi	r2,4096
   83354:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   83358:	e0fffe17 	ldw	r3,-8(fp)
   8335c:	e0bfff17 	ldw	r2,-4(fp)
   83360:	1885883a 	add	r2,r3,r2
   83364:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83368:	e0bffe17 	ldw	r2,-8(fp)
   8336c:	e0bffc15 	stw	r2,-16(fp)
   83370:	00000506 	br	83388 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   83374:	e0bffc17 	ldw	r2,-16(fp)
   83378:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8337c:	e0bffc17 	ldw	r2,-16(fp)
   83380:	10800804 	addi	r2,r2,32
   83384:	e0bffc15 	stw	r2,-16(fp)
   83388:	e0fffc17 	ldw	r3,-16(fp)
   8338c:	e0bffd17 	ldw	r2,-12(fp)
   83390:	18bff836 	bltu	r3,r2,83374 <rx_descriptor_end+0xfff83314>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   83394:	e0bffe17 	ldw	r2,-8(fp)
   83398:	108007cc 	andi	r2,r2,31
   8339c:	10000226 	beq	r2,zero,833a8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   833a0:	e0bffc17 	ldw	r2,-16(fp)
   833a4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   833a8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   833ac:	0001883a 	nop
   833b0:	e037883a 	mov	sp,fp
   833b4:	df000017 	ldw	fp,0(sp)
   833b8:	dec00104 	addi	sp,sp,4
   833bc:	f800283a 	ret

000833c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   833c0:	defffe04 	addi	sp,sp,-8
   833c4:	df000115 	stw	fp,4(sp)
   833c8:	df000104 	addi	fp,sp,4
   833cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   833d0:	e0bfff17 	ldw	r2,-4(fp)
   833d4:	10bffe84 	addi	r2,r2,-6
   833d8:	10c00428 	cmpgeui	r3,r2,16
   833dc:	18001a1e 	bne	r3,zero,83448 <alt_exception_cause_generated_bad_addr+0x88>
   833e0:	100690ba 	slli	r3,r2,2
   833e4:	00800234 	movhi	r2,8
   833e8:	108cfe04 	addi	r2,r2,13304
   833ec:	1885883a 	add	r2,r3,r2
   833f0:	10800017 	ldw	r2,0(r2)
   833f4:	1000683a 	jmp	r2
   833f8:	00083438 	rdprs	zero,zero,8400
   833fc:	00083438 	rdprs	zero,zero,8400
   83400:	00083448 	cmpgei	zero,zero,8401
   83404:	00083448 	cmpgei	zero,zero,8401
   83408:	00083448 	cmpgei	zero,zero,8401
   8340c:	00083438 	rdprs	zero,zero,8400
   83410:	00083440 	call	8344 <__alt_mem_main_memory-0x77cbc>
   83414:	00083448 	cmpgei	zero,zero,8401
   83418:	00083438 	rdprs	zero,zero,8400
   8341c:	00083438 	rdprs	zero,zero,8400
   83420:	00083448 	cmpgei	zero,zero,8401
   83424:	00083438 	rdprs	zero,zero,8400
   83428:	00083440 	call	8344 <__alt_mem_main_memory-0x77cbc>
   8342c:	00083448 	cmpgei	zero,zero,8401
   83430:	00083448 	cmpgei	zero,zero,8401
   83434:	00083438 	rdprs	zero,zero,8400
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   83438:	00800044 	movi	r2,1
   8343c:	00000306 	br	8344c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   83440:	0005883a 	mov	r2,zero
   83444:	00000106 	br	8344c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   83448:	0005883a 	mov	r2,zero
  }
}
   8344c:	e037883a 	mov	sp,fp
   83450:	df000017 	ldw	fp,0(sp)
   83454:	dec00104 	addi	sp,sp,4
   83458:	f800283a 	ret

0008345c <atexit>:
   8345c:	200b883a 	mov	r5,r4
   83460:	000f883a 	mov	r7,zero
   83464:	000d883a 	mov	r6,zero
   83468:	0009883a 	mov	r4,zero
   8346c:	0083b181 	jmpi	83b18 <__register_exitproc>

00083470 <exit>:
   83470:	defffe04 	addi	sp,sp,-8
   83474:	000b883a 	mov	r5,zero
   83478:	dc000015 	stw	r16,0(sp)
   8347c:	dfc00115 	stw	ra,4(sp)
   83480:	2021883a 	mov	r16,r4
   83484:	0083c300 	call	83c30 <__call_exitprocs>
   83488:	00800274 	movhi	r2,9
   8348c:	10a07204 	addi	r2,r2,-32312
   83490:	11000017 	ldw	r4,0(r2)
   83494:	20800f17 	ldw	r2,60(r4)
   83498:	10000126 	beq	r2,zero,834a0 <exit+0x30>
   8349c:	103ee83a 	callr	r2
   834a0:	8009883a 	mov	r4,r16
   834a4:	008595c0 	call	8595c <_exit>

000834a8 <memcmp>:
   834a8:	01c000c4 	movi	r7,3
   834ac:	3980192e 	bgeu	r7,r6,83514 <memcmp+0x6c>
   834b0:	2144b03a 	or	r2,r4,r5
   834b4:	11c4703a 	and	r2,r2,r7
   834b8:	10000f26 	beq	r2,zero,834f8 <memcmp+0x50>
   834bc:	20800003 	ldbu	r2,0(r4)
   834c0:	28c00003 	ldbu	r3,0(r5)
   834c4:	10c0151e 	bne	r2,r3,8351c <memcmp+0x74>
   834c8:	31bfff84 	addi	r6,r6,-2
   834cc:	01ffffc4 	movi	r7,-1
   834d0:	00000406 	br	834e4 <memcmp+0x3c>
   834d4:	20800003 	ldbu	r2,0(r4)
   834d8:	28c00003 	ldbu	r3,0(r5)
   834dc:	31bfffc4 	addi	r6,r6,-1
   834e0:	10c00e1e 	bne	r2,r3,8351c <memcmp+0x74>
   834e4:	21000044 	addi	r4,r4,1
   834e8:	29400044 	addi	r5,r5,1
   834ec:	31fff91e 	bne	r6,r7,834d4 <rx_descriptor_end+0xfff83474>
   834f0:	0005883a 	mov	r2,zero
   834f4:	f800283a 	ret
   834f8:	20c00017 	ldw	r3,0(r4)
   834fc:	28800017 	ldw	r2,0(r5)
   83500:	18bfee1e 	bne	r3,r2,834bc <rx_descriptor_end+0xfff8345c>
   83504:	31bfff04 	addi	r6,r6,-4
   83508:	21000104 	addi	r4,r4,4
   8350c:	29400104 	addi	r5,r5,4
   83510:	39bff936 	bltu	r7,r6,834f8 <rx_descriptor_end+0xfff83498>
   83514:	303fe91e 	bne	r6,zero,834bc <rx_descriptor_end+0xfff8345c>
   83518:	003ff506 	br	834f0 <rx_descriptor_end+0xfff83490>
   8351c:	10c5c83a 	sub	r2,r2,r3
   83520:	f800283a 	ret

00083524 <memcpy>:
   83524:	defffd04 	addi	sp,sp,-12
   83528:	dfc00215 	stw	ra,8(sp)
   8352c:	dc400115 	stw	r17,4(sp)
   83530:	dc000015 	stw	r16,0(sp)
   83534:	00c003c4 	movi	r3,15
   83538:	2005883a 	mov	r2,r4
   8353c:	1980452e 	bgeu	r3,r6,83654 <memcpy+0x130>
   83540:	2906b03a 	or	r3,r5,r4
   83544:	18c000cc 	andi	r3,r3,3
   83548:	1800441e 	bne	r3,zero,8365c <memcpy+0x138>
   8354c:	347ffc04 	addi	r17,r6,-16
   83550:	8822d13a 	srli	r17,r17,4
   83554:	28c00104 	addi	r3,r5,4
   83558:	23400104 	addi	r13,r4,4
   8355c:	8820913a 	slli	r16,r17,4
   83560:	2b000204 	addi	r12,r5,8
   83564:	22c00204 	addi	r11,r4,8
   83568:	84000504 	addi	r16,r16,20
   8356c:	2a800304 	addi	r10,r5,12
   83570:	22400304 	addi	r9,r4,12
   83574:	2c21883a 	add	r16,r5,r16
   83578:	2811883a 	mov	r8,r5
   8357c:	200f883a 	mov	r7,r4
   83580:	41000017 	ldw	r4,0(r8)
   83584:	1fc00017 	ldw	ra,0(r3)
   83588:	63c00017 	ldw	r15,0(r12)
   8358c:	39000015 	stw	r4,0(r7)
   83590:	53800017 	ldw	r14,0(r10)
   83594:	6fc00015 	stw	ra,0(r13)
   83598:	5bc00015 	stw	r15,0(r11)
   8359c:	4b800015 	stw	r14,0(r9)
   835a0:	18c00404 	addi	r3,r3,16
   835a4:	39c00404 	addi	r7,r7,16
   835a8:	42000404 	addi	r8,r8,16
   835ac:	6b400404 	addi	r13,r13,16
   835b0:	63000404 	addi	r12,r12,16
   835b4:	5ac00404 	addi	r11,r11,16
   835b8:	52800404 	addi	r10,r10,16
   835bc:	4a400404 	addi	r9,r9,16
   835c0:	1c3fef1e 	bne	r3,r16,83580 <rx_descriptor_end+0xfff83520>
   835c4:	89c00044 	addi	r7,r17,1
   835c8:	380e913a 	slli	r7,r7,4
   835cc:	310003cc 	andi	r4,r6,15
   835d0:	02c000c4 	movi	r11,3
   835d4:	11c7883a 	add	r3,r2,r7
   835d8:	29cb883a 	add	r5,r5,r7
   835dc:	5900212e 	bgeu	r11,r4,83664 <memcpy+0x140>
   835e0:	1813883a 	mov	r9,r3
   835e4:	2811883a 	mov	r8,r5
   835e8:	200f883a 	mov	r7,r4
   835ec:	42800017 	ldw	r10,0(r8)
   835f0:	4a400104 	addi	r9,r9,4
   835f4:	39ffff04 	addi	r7,r7,-4
   835f8:	4abfff15 	stw	r10,-4(r9)
   835fc:	42000104 	addi	r8,r8,4
   83600:	59fffa36 	bltu	r11,r7,835ec <rx_descriptor_end+0xfff8358c>
   83604:	213fff04 	addi	r4,r4,-4
   83608:	2008d0ba 	srli	r4,r4,2
   8360c:	318000cc 	andi	r6,r6,3
   83610:	21000044 	addi	r4,r4,1
   83614:	2109883a 	add	r4,r4,r4
   83618:	2109883a 	add	r4,r4,r4
   8361c:	1907883a 	add	r3,r3,r4
   83620:	290b883a 	add	r5,r5,r4
   83624:	30000626 	beq	r6,zero,83640 <memcpy+0x11c>
   83628:	198d883a 	add	r6,r3,r6
   8362c:	29c00003 	ldbu	r7,0(r5)
   83630:	18c00044 	addi	r3,r3,1
   83634:	29400044 	addi	r5,r5,1
   83638:	19ffffc5 	stb	r7,-1(r3)
   8363c:	19bffb1e 	bne	r3,r6,8362c <rx_descriptor_end+0xfff835cc>
   83640:	dfc00217 	ldw	ra,8(sp)
   83644:	dc400117 	ldw	r17,4(sp)
   83648:	dc000017 	ldw	r16,0(sp)
   8364c:	dec00304 	addi	sp,sp,12
   83650:	f800283a 	ret
   83654:	2007883a 	mov	r3,r4
   83658:	003ff206 	br	83624 <rx_descriptor_end+0xfff835c4>
   8365c:	2007883a 	mov	r3,r4
   83660:	003ff106 	br	83628 <rx_descriptor_end+0xfff835c8>
   83664:	200d883a 	mov	r6,r4
   83668:	003fee06 	br	83624 <rx_descriptor_end+0xfff835c4>

0008366c <_putc_r>:
   8366c:	defffc04 	addi	sp,sp,-16
   83670:	dc000215 	stw	r16,8(sp)
   83674:	dfc00315 	stw	ra,12(sp)
   83678:	2021883a 	mov	r16,r4
   8367c:	20000226 	beq	r4,zero,83688 <_putc_r+0x1c>
   83680:	20800e17 	ldw	r2,56(r4)
   83684:	10001b26 	beq	r2,zero,836f4 <_putc_r+0x88>
   83688:	30800217 	ldw	r2,8(r6)
   8368c:	10bfffc4 	addi	r2,r2,-1
   83690:	30800215 	stw	r2,8(r6)
   83694:	10000a16 	blt	r2,zero,836c0 <_putc_r+0x54>
   83698:	30800017 	ldw	r2,0(r6)
   8369c:	11400005 	stb	r5,0(r2)
   836a0:	30800017 	ldw	r2,0(r6)
   836a4:	10c00044 	addi	r3,r2,1
   836a8:	30c00015 	stw	r3,0(r6)
   836ac:	10800003 	ldbu	r2,0(r2)
   836b0:	dfc00317 	ldw	ra,12(sp)
   836b4:	dc000217 	ldw	r16,8(sp)
   836b8:	dec00404 	addi	sp,sp,16
   836bc:	f800283a 	ret
   836c0:	30c00617 	ldw	r3,24(r6)
   836c4:	10c00616 	blt	r2,r3,836e0 <_putc_r+0x74>
   836c8:	30800017 	ldw	r2,0(r6)
   836cc:	00c00284 	movi	r3,10
   836d0:	11400005 	stb	r5,0(r2)
   836d4:	30800017 	ldw	r2,0(r6)
   836d8:	11400003 	ldbu	r5,0(r2)
   836dc:	28fff11e 	bne	r5,r3,836a4 <rx_descriptor_end+0xfff83644>
   836e0:	8009883a 	mov	r4,r16
   836e4:	dfc00317 	ldw	ra,12(sp)
   836e8:	dc000217 	ldw	r16,8(sp)
   836ec:	dec00404 	addi	sp,sp,16
   836f0:	008386c1 	jmpi	8386c <__swbuf_r>
   836f4:	d9400015 	stw	r5,0(sp)
   836f8:	d9800115 	stw	r6,4(sp)
   836fc:	00843a80 	call	843a8 <__sinit>
   83700:	d9800117 	ldw	r6,4(sp)
   83704:	d9400017 	ldw	r5,0(sp)
   83708:	003fdf06 	br	83688 <rx_descriptor_end+0xfff83628>

0008370c <putc>:
   8370c:	00800274 	movhi	r2,9
   83710:	defffc04 	addi	sp,sp,-16
   83714:	10a07304 	addi	r2,r2,-32308
   83718:	dc000115 	stw	r16,4(sp)
   8371c:	14000017 	ldw	r16,0(r2)
   83720:	dc400215 	stw	r17,8(sp)
   83724:	dfc00315 	stw	ra,12(sp)
   83728:	2023883a 	mov	r17,r4
   8372c:	80000226 	beq	r16,zero,83738 <putc+0x2c>
   83730:	80800e17 	ldw	r2,56(r16)
   83734:	10001a26 	beq	r2,zero,837a0 <putc+0x94>
   83738:	28800217 	ldw	r2,8(r5)
   8373c:	10bfffc4 	addi	r2,r2,-1
   83740:	28800215 	stw	r2,8(r5)
   83744:	10000b16 	blt	r2,zero,83774 <putc+0x68>
   83748:	28800017 	ldw	r2,0(r5)
   8374c:	14400005 	stb	r17,0(r2)
   83750:	28800017 	ldw	r2,0(r5)
   83754:	10c00044 	addi	r3,r2,1
   83758:	28c00015 	stw	r3,0(r5)
   8375c:	10800003 	ldbu	r2,0(r2)
   83760:	dfc00317 	ldw	ra,12(sp)
   83764:	dc400217 	ldw	r17,8(sp)
   83768:	dc000117 	ldw	r16,4(sp)
   8376c:	dec00404 	addi	sp,sp,16
   83770:	f800283a 	ret
   83774:	28c00617 	ldw	r3,24(r5)
   83778:	10c00e16 	blt	r2,r3,837b4 <putc+0xa8>
   8377c:	28800017 	ldw	r2,0(r5)
   83780:	01000284 	movi	r4,10
   83784:	14400005 	stb	r17,0(r2)
   83788:	28800017 	ldw	r2,0(r5)
   8378c:	10c00003 	ldbu	r3,0(r2)
   83790:	193ff01e 	bne	r3,r4,83754 <rx_descriptor_end+0xfff836f4>
   83794:	280d883a 	mov	r6,r5
   83798:	180b883a 	mov	r5,r3
   8379c:	00000706 	br	837bc <putc+0xb0>
   837a0:	8009883a 	mov	r4,r16
   837a4:	d9400015 	stw	r5,0(sp)
   837a8:	00843a80 	call	843a8 <__sinit>
   837ac:	d9400017 	ldw	r5,0(sp)
   837b0:	003fe106 	br	83738 <rx_descriptor_end+0xfff836d8>
   837b4:	280d883a 	mov	r6,r5
   837b8:	880b883a 	mov	r5,r17
   837bc:	8009883a 	mov	r4,r16
   837c0:	dfc00317 	ldw	ra,12(sp)
   837c4:	dc400217 	ldw	r17,8(sp)
   837c8:	dc000117 	ldw	r16,4(sp)
   837cc:	dec00404 	addi	sp,sp,16
   837d0:	008386c1 	jmpi	8386c <__swbuf_r>

000837d4 <strlen>:
   837d4:	208000cc 	andi	r2,r4,3
   837d8:	10002026 	beq	r2,zero,8385c <strlen+0x88>
   837dc:	20800007 	ldb	r2,0(r4)
   837e0:	10002026 	beq	r2,zero,83864 <strlen+0x90>
   837e4:	2005883a 	mov	r2,r4
   837e8:	00000206 	br	837f4 <strlen+0x20>
   837ec:	10c00007 	ldb	r3,0(r2)
   837f0:	18001826 	beq	r3,zero,83854 <strlen+0x80>
   837f4:	10800044 	addi	r2,r2,1
   837f8:	10c000cc 	andi	r3,r2,3
   837fc:	183ffb1e 	bne	r3,zero,837ec <rx_descriptor_end+0xfff8378c>
   83800:	10c00017 	ldw	r3,0(r2)
   83804:	01ffbff4 	movhi	r7,65279
   83808:	39ffbfc4 	addi	r7,r7,-257
   8380c:	00ca303a 	nor	r5,zero,r3
   83810:	01a02074 	movhi	r6,32897
   83814:	19c7883a 	add	r3,r3,r7
   83818:	31a02004 	addi	r6,r6,-32640
   8381c:	1946703a 	and	r3,r3,r5
   83820:	1986703a 	and	r3,r3,r6
   83824:	1800091e 	bne	r3,zero,8384c <strlen+0x78>
   83828:	10800104 	addi	r2,r2,4
   8382c:	10c00017 	ldw	r3,0(r2)
   83830:	19cb883a 	add	r5,r3,r7
   83834:	00c6303a 	nor	r3,zero,r3
   83838:	28c6703a 	and	r3,r5,r3
   8383c:	1986703a 	and	r3,r3,r6
   83840:	183ff926 	beq	r3,zero,83828 <rx_descriptor_end+0xfff837c8>
   83844:	00000106 	br	8384c <strlen+0x78>
   83848:	10800044 	addi	r2,r2,1
   8384c:	10c00007 	ldb	r3,0(r2)
   83850:	183ffd1e 	bne	r3,zero,83848 <rx_descriptor_end+0xfff837e8>
   83854:	1105c83a 	sub	r2,r2,r4
   83858:	f800283a 	ret
   8385c:	2005883a 	mov	r2,r4
   83860:	003fe706 	br	83800 <rx_descriptor_end+0xfff837a0>
   83864:	0005883a 	mov	r2,zero
   83868:	f800283a 	ret

0008386c <__swbuf_r>:
   8386c:	defffb04 	addi	sp,sp,-20
   83870:	dcc00315 	stw	r19,12(sp)
   83874:	dc800215 	stw	r18,8(sp)
   83878:	dc000015 	stw	r16,0(sp)
   8387c:	dfc00415 	stw	ra,16(sp)
   83880:	dc400115 	stw	r17,4(sp)
   83884:	2025883a 	mov	r18,r4
   83888:	2827883a 	mov	r19,r5
   8388c:	3021883a 	mov	r16,r6
   83890:	20000226 	beq	r4,zero,8389c <__swbuf_r+0x30>
   83894:	20800e17 	ldw	r2,56(r4)
   83898:	10004226 	beq	r2,zero,839a4 <__swbuf_r+0x138>
   8389c:	80800617 	ldw	r2,24(r16)
   838a0:	8100030b 	ldhu	r4,12(r16)
   838a4:	80800215 	stw	r2,8(r16)
   838a8:	2080020c 	andi	r2,r4,8
   838ac:	10003626 	beq	r2,zero,83988 <__swbuf_r+0x11c>
   838b0:	80c00417 	ldw	r3,16(r16)
   838b4:	18003426 	beq	r3,zero,83988 <__swbuf_r+0x11c>
   838b8:	2088000c 	andi	r2,r4,8192
   838bc:	9c403fcc 	andi	r17,r19,255
   838c0:	10001a26 	beq	r2,zero,8392c <__swbuf_r+0xc0>
   838c4:	80800017 	ldw	r2,0(r16)
   838c8:	81000517 	ldw	r4,20(r16)
   838cc:	10c7c83a 	sub	r3,r2,r3
   838d0:	1900200e 	bge	r3,r4,83954 <__swbuf_r+0xe8>
   838d4:	18c00044 	addi	r3,r3,1
   838d8:	81000217 	ldw	r4,8(r16)
   838dc:	11400044 	addi	r5,r2,1
   838e0:	81400015 	stw	r5,0(r16)
   838e4:	213fffc4 	addi	r4,r4,-1
   838e8:	81000215 	stw	r4,8(r16)
   838ec:	14c00005 	stb	r19,0(r2)
   838f0:	80800517 	ldw	r2,20(r16)
   838f4:	10c01e26 	beq	r2,r3,83970 <__swbuf_r+0x104>
   838f8:	8080030b 	ldhu	r2,12(r16)
   838fc:	1080004c 	andi	r2,r2,1
   83900:	10000226 	beq	r2,zero,8390c <__swbuf_r+0xa0>
   83904:	00800284 	movi	r2,10
   83908:	88801926 	beq	r17,r2,83970 <__swbuf_r+0x104>
   8390c:	8805883a 	mov	r2,r17
   83910:	dfc00417 	ldw	ra,16(sp)
   83914:	dcc00317 	ldw	r19,12(sp)
   83918:	dc800217 	ldw	r18,8(sp)
   8391c:	dc400117 	ldw	r17,4(sp)
   83920:	dc000017 	ldw	r16,0(sp)
   83924:	dec00504 	addi	sp,sp,20
   83928:	f800283a 	ret
   8392c:	81401917 	ldw	r5,100(r16)
   83930:	00b7ffc4 	movi	r2,-8193
   83934:	21080014 	ori	r4,r4,8192
   83938:	2884703a 	and	r2,r5,r2
   8393c:	80801915 	stw	r2,100(r16)
   83940:	80800017 	ldw	r2,0(r16)
   83944:	8100030d 	sth	r4,12(r16)
   83948:	81000517 	ldw	r4,20(r16)
   8394c:	10c7c83a 	sub	r3,r2,r3
   83950:	193fe016 	blt	r3,r4,838d4 <rx_descriptor_end+0xfff83874>
   83954:	800b883a 	mov	r5,r16
   83958:	9009883a 	mov	r4,r18
   8395c:	0083fcc0 	call	83fcc <_fflush_r>
   83960:	1000071e 	bne	r2,zero,83980 <__swbuf_r+0x114>
   83964:	80800017 	ldw	r2,0(r16)
   83968:	00c00044 	movi	r3,1
   8396c:	003fda06 	br	838d8 <rx_descriptor_end+0xfff83878>
   83970:	800b883a 	mov	r5,r16
   83974:	9009883a 	mov	r4,r18
   83978:	0083fcc0 	call	83fcc <_fflush_r>
   8397c:	103fe326 	beq	r2,zero,8390c <rx_descriptor_end+0xfff838ac>
   83980:	00bfffc4 	movi	r2,-1
   83984:	003fe206 	br	83910 <rx_descriptor_end+0xfff838b0>
   83988:	800b883a 	mov	r5,r16
   8398c:	9009883a 	mov	r4,r18
   83990:	00839c40 	call	839c4 <__swsetup_r>
   83994:	103ffa1e 	bne	r2,zero,83980 <rx_descriptor_end+0xfff83920>
   83998:	8100030b 	ldhu	r4,12(r16)
   8399c:	80c00417 	ldw	r3,16(r16)
   839a0:	003fc506 	br	838b8 <rx_descriptor_end+0xfff83858>
   839a4:	00843a80 	call	843a8 <__sinit>
   839a8:	003fbc06 	br	8389c <rx_descriptor_end+0xfff8383c>

000839ac <__swbuf>:
   839ac:	00800274 	movhi	r2,9
   839b0:	10a07304 	addi	r2,r2,-32308
   839b4:	280d883a 	mov	r6,r5
   839b8:	200b883a 	mov	r5,r4
   839bc:	11000017 	ldw	r4,0(r2)
   839c0:	008386c1 	jmpi	8386c <__swbuf_r>

000839c4 <__swsetup_r>:
   839c4:	00800274 	movhi	r2,9
   839c8:	defffd04 	addi	sp,sp,-12
   839cc:	10a07304 	addi	r2,r2,-32308
   839d0:	dc400115 	stw	r17,4(sp)
   839d4:	2023883a 	mov	r17,r4
   839d8:	11000017 	ldw	r4,0(r2)
   839dc:	dc000015 	stw	r16,0(sp)
   839e0:	dfc00215 	stw	ra,8(sp)
   839e4:	2821883a 	mov	r16,r5
   839e8:	20000226 	beq	r4,zero,839f4 <__swsetup_r+0x30>
   839ec:	20800e17 	ldw	r2,56(r4)
   839f0:	10003126 	beq	r2,zero,83ab8 <__swsetup_r+0xf4>
   839f4:	8080030b 	ldhu	r2,12(r16)
   839f8:	10c0020c 	andi	r3,r2,8
   839fc:	1009883a 	mov	r4,r2
   83a00:	18000f26 	beq	r3,zero,83a40 <__swsetup_r+0x7c>
   83a04:	80c00417 	ldw	r3,16(r16)
   83a08:	18001526 	beq	r3,zero,83a60 <__swsetup_r+0x9c>
   83a0c:	1100004c 	andi	r4,r2,1
   83a10:	20001c1e 	bne	r4,zero,83a84 <__swsetup_r+0xc0>
   83a14:	1080008c 	andi	r2,r2,2
   83a18:	1000291e 	bne	r2,zero,83ac0 <__swsetup_r+0xfc>
   83a1c:	80800517 	ldw	r2,20(r16)
   83a20:	80800215 	stw	r2,8(r16)
   83a24:	18001c26 	beq	r3,zero,83a98 <__swsetup_r+0xd4>
   83a28:	0005883a 	mov	r2,zero
   83a2c:	dfc00217 	ldw	ra,8(sp)
   83a30:	dc400117 	ldw	r17,4(sp)
   83a34:	dc000017 	ldw	r16,0(sp)
   83a38:	dec00304 	addi	sp,sp,12
   83a3c:	f800283a 	ret
   83a40:	2080040c 	andi	r2,r4,16
   83a44:	10002e26 	beq	r2,zero,83b00 <__swsetup_r+0x13c>
   83a48:	2080010c 	andi	r2,r4,4
   83a4c:	10001e1e 	bne	r2,zero,83ac8 <__swsetup_r+0x104>
   83a50:	80c00417 	ldw	r3,16(r16)
   83a54:	20800214 	ori	r2,r4,8
   83a58:	8080030d 	sth	r2,12(r16)
   83a5c:	183feb1e 	bne	r3,zero,83a0c <rx_descriptor_end+0xfff839ac>
   83a60:	1100a00c 	andi	r4,r2,640
   83a64:	01408004 	movi	r5,512
   83a68:	217fe826 	beq	r4,r5,83a0c <rx_descriptor_end+0xfff839ac>
   83a6c:	800b883a 	mov	r5,r16
   83a70:	8809883a 	mov	r4,r17
   83a74:	00849b40 	call	849b4 <__smakebuf_r>
   83a78:	8080030b 	ldhu	r2,12(r16)
   83a7c:	80c00417 	ldw	r3,16(r16)
   83a80:	003fe206 	br	83a0c <rx_descriptor_end+0xfff839ac>
   83a84:	80800517 	ldw	r2,20(r16)
   83a88:	80000215 	stw	zero,8(r16)
   83a8c:	0085c83a 	sub	r2,zero,r2
   83a90:	80800615 	stw	r2,24(r16)
   83a94:	183fe41e 	bne	r3,zero,83a28 <rx_descriptor_end+0xfff839c8>
   83a98:	80c0030b 	ldhu	r3,12(r16)
   83a9c:	0005883a 	mov	r2,zero
   83aa0:	1900200c 	andi	r4,r3,128
   83aa4:	203fe126 	beq	r4,zero,83a2c <rx_descriptor_end+0xfff839cc>
   83aa8:	18c01014 	ori	r3,r3,64
   83aac:	80c0030d 	sth	r3,12(r16)
   83ab0:	00bfffc4 	movi	r2,-1
   83ab4:	003fdd06 	br	83a2c <rx_descriptor_end+0xfff839cc>
   83ab8:	00843a80 	call	843a8 <__sinit>
   83abc:	003fcd06 	br	839f4 <rx_descriptor_end+0xfff83994>
   83ac0:	0005883a 	mov	r2,zero
   83ac4:	003fd606 	br	83a20 <rx_descriptor_end+0xfff839c0>
   83ac8:	81400c17 	ldw	r5,48(r16)
   83acc:	28000626 	beq	r5,zero,83ae8 <__swsetup_r+0x124>
   83ad0:	80801004 	addi	r2,r16,64
   83ad4:	28800326 	beq	r5,r2,83ae4 <__swsetup_r+0x120>
   83ad8:	8809883a 	mov	r4,r17
   83adc:	008451c0 	call	8451c <_free_r>
   83ae0:	8100030b 	ldhu	r4,12(r16)
   83ae4:	80000c15 	stw	zero,48(r16)
   83ae8:	80c00417 	ldw	r3,16(r16)
   83aec:	00bff6c4 	movi	r2,-37
   83af0:	1108703a 	and	r4,r2,r4
   83af4:	80000115 	stw	zero,4(r16)
   83af8:	80c00015 	stw	r3,0(r16)
   83afc:	003fd506 	br	83a54 <rx_descriptor_end+0xfff839f4>
   83b00:	00800244 	movi	r2,9
   83b04:	88800015 	stw	r2,0(r17)
   83b08:	20801014 	ori	r2,r4,64
   83b0c:	8080030d 	sth	r2,12(r16)
   83b10:	00bfffc4 	movi	r2,-1
   83b14:	003fc506 	br	83a2c <rx_descriptor_end+0xfff839cc>

00083b18 <__register_exitproc>:
   83b18:	defffa04 	addi	sp,sp,-24
   83b1c:	dc000315 	stw	r16,12(sp)
   83b20:	04000274 	movhi	r16,9
   83b24:	84207204 	addi	r16,r16,-32312
   83b28:	80c00017 	ldw	r3,0(r16)
   83b2c:	dc400415 	stw	r17,16(sp)
   83b30:	dfc00515 	stw	ra,20(sp)
   83b34:	18805217 	ldw	r2,328(r3)
   83b38:	2023883a 	mov	r17,r4
   83b3c:	10003726 	beq	r2,zero,83c1c <__register_exitproc+0x104>
   83b40:	10c00117 	ldw	r3,4(r2)
   83b44:	010007c4 	movi	r4,31
   83b48:	20c00e16 	blt	r4,r3,83b84 <__register_exitproc+0x6c>
   83b4c:	1a000044 	addi	r8,r3,1
   83b50:	8800221e 	bne	r17,zero,83bdc <__register_exitproc+0xc4>
   83b54:	18c00084 	addi	r3,r3,2
   83b58:	18c7883a 	add	r3,r3,r3
   83b5c:	18c7883a 	add	r3,r3,r3
   83b60:	12000115 	stw	r8,4(r2)
   83b64:	10c7883a 	add	r3,r2,r3
   83b68:	19400015 	stw	r5,0(r3)
   83b6c:	0005883a 	mov	r2,zero
   83b70:	dfc00517 	ldw	ra,20(sp)
   83b74:	dc400417 	ldw	r17,16(sp)
   83b78:	dc000317 	ldw	r16,12(sp)
   83b7c:	dec00604 	addi	sp,sp,24
   83b80:	f800283a 	ret
   83b84:	00800034 	movhi	r2,0
   83b88:	10800004 	addi	r2,r2,0
   83b8c:	10002626 	beq	r2,zero,83c28 <__register_exitproc+0x110>
   83b90:	01006404 	movi	r4,400
   83b94:	d9400015 	stw	r5,0(sp)
   83b98:	d9800115 	stw	r6,4(sp)
   83b9c:	d9c00215 	stw	r7,8(sp)
   83ba0:	00000000 	call	0 <__alt_mem_main_memory-0x80000>
   83ba4:	d9400017 	ldw	r5,0(sp)
   83ba8:	d9800117 	ldw	r6,4(sp)
   83bac:	d9c00217 	ldw	r7,8(sp)
   83bb0:	10001d26 	beq	r2,zero,83c28 <__register_exitproc+0x110>
   83bb4:	81000017 	ldw	r4,0(r16)
   83bb8:	10000115 	stw	zero,4(r2)
   83bbc:	02000044 	movi	r8,1
   83bc0:	22405217 	ldw	r9,328(r4)
   83bc4:	0007883a 	mov	r3,zero
   83bc8:	12400015 	stw	r9,0(r2)
   83bcc:	20805215 	stw	r2,328(r4)
   83bd0:	10006215 	stw	zero,392(r2)
   83bd4:	10006315 	stw	zero,396(r2)
   83bd8:	883fde26 	beq	r17,zero,83b54 <rx_descriptor_end+0xfff83af4>
   83bdc:	18c9883a 	add	r4,r3,r3
   83be0:	2109883a 	add	r4,r4,r4
   83be4:	1109883a 	add	r4,r2,r4
   83be8:	21802215 	stw	r6,136(r4)
   83bec:	01800044 	movi	r6,1
   83bf0:	12406217 	ldw	r9,392(r2)
   83bf4:	30cc983a 	sll	r6,r6,r3
   83bf8:	4992b03a 	or	r9,r9,r6
   83bfc:	12406215 	stw	r9,392(r2)
   83c00:	21c04215 	stw	r7,264(r4)
   83c04:	01000084 	movi	r4,2
   83c08:	893fd21e 	bne	r17,r4,83b54 <rx_descriptor_end+0xfff83af4>
   83c0c:	11006317 	ldw	r4,396(r2)
   83c10:	218cb03a 	or	r6,r4,r6
   83c14:	11806315 	stw	r6,396(r2)
   83c18:	003fce06 	br	83b54 <rx_descriptor_end+0xfff83af4>
   83c1c:	18805304 	addi	r2,r3,332
   83c20:	18805215 	stw	r2,328(r3)
   83c24:	003fc606 	br	83b40 <rx_descriptor_end+0xfff83ae0>
   83c28:	00bfffc4 	movi	r2,-1
   83c2c:	003fd006 	br	83b70 <rx_descriptor_end+0xfff83b10>

00083c30 <__call_exitprocs>:
   83c30:	defff504 	addi	sp,sp,-44
   83c34:	df000915 	stw	fp,36(sp)
   83c38:	dd400615 	stw	r21,24(sp)
   83c3c:	dc800315 	stw	r18,12(sp)
   83c40:	dfc00a15 	stw	ra,40(sp)
   83c44:	ddc00815 	stw	r23,32(sp)
   83c48:	dd800715 	stw	r22,28(sp)
   83c4c:	dd000515 	stw	r20,20(sp)
   83c50:	dcc00415 	stw	r19,16(sp)
   83c54:	dc400215 	stw	r17,8(sp)
   83c58:	dc000115 	stw	r16,4(sp)
   83c5c:	d9000015 	stw	r4,0(sp)
   83c60:	2839883a 	mov	fp,r5
   83c64:	04800044 	movi	r18,1
   83c68:	057fffc4 	movi	r21,-1
   83c6c:	00800274 	movhi	r2,9
   83c70:	10a07204 	addi	r2,r2,-32312
   83c74:	12000017 	ldw	r8,0(r2)
   83c78:	45005217 	ldw	r20,328(r8)
   83c7c:	44c05204 	addi	r19,r8,328
   83c80:	a0001c26 	beq	r20,zero,83cf4 <__call_exitprocs+0xc4>
   83c84:	a0800117 	ldw	r2,4(r20)
   83c88:	15ffffc4 	addi	r23,r2,-1
   83c8c:	b8000d16 	blt	r23,zero,83cc4 <__call_exitprocs+0x94>
   83c90:	14000044 	addi	r16,r2,1
   83c94:	8421883a 	add	r16,r16,r16
   83c98:	8421883a 	add	r16,r16,r16
   83c9c:	84402004 	addi	r17,r16,128
   83ca0:	a463883a 	add	r17,r20,r17
   83ca4:	a421883a 	add	r16,r20,r16
   83ca8:	e0001e26 	beq	fp,zero,83d24 <__call_exitprocs+0xf4>
   83cac:	80804017 	ldw	r2,256(r16)
   83cb0:	e0801c26 	beq	fp,r2,83d24 <__call_exitprocs+0xf4>
   83cb4:	bdffffc4 	addi	r23,r23,-1
   83cb8:	843fff04 	addi	r16,r16,-4
   83cbc:	8c7fff04 	addi	r17,r17,-4
   83cc0:	bd7ff91e 	bne	r23,r21,83ca8 <rx_descriptor_end+0xfff83c48>
   83cc4:	00800034 	movhi	r2,0
   83cc8:	10800004 	addi	r2,r2,0
   83ccc:	10000926 	beq	r2,zero,83cf4 <__call_exitprocs+0xc4>
   83cd0:	a0800117 	ldw	r2,4(r20)
   83cd4:	1000301e 	bne	r2,zero,83d98 <__call_exitprocs+0x168>
   83cd8:	a0800017 	ldw	r2,0(r20)
   83cdc:	10003226 	beq	r2,zero,83da8 <__call_exitprocs+0x178>
   83ce0:	a009883a 	mov	r4,r20
   83ce4:	98800015 	stw	r2,0(r19)
   83ce8:	00000000 	call	0 <__alt_mem_main_memory-0x80000>
   83cec:	9d000017 	ldw	r20,0(r19)
   83cf0:	a03fe41e 	bne	r20,zero,83c84 <rx_descriptor_end+0xfff83c24>
   83cf4:	dfc00a17 	ldw	ra,40(sp)
   83cf8:	df000917 	ldw	fp,36(sp)
   83cfc:	ddc00817 	ldw	r23,32(sp)
   83d00:	dd800717 	ldw	r22,28(sp)
   83d04:	dd400617 	ldw	r21,24(sp)
   83d08:	dd000517 	ldw	r20,20(sp)
   83d0c:	dcc00417 	ldw	r19,16(sp)
   83d10:	dc800317 	ldw	r18,12(sp)
   83d14:	dc400217 	ldw	r17,8(sp)
   83d18:	dc000117 	ldw	r16,4(sp)
   83d1c:	dec00b04 	addi	sp,sp,44
   83d20:	f800283a 	ret
   83d24:	a0800117 	ldw	r2,4(r20)
   83d28:	80c00017 	ldw	r3,0(r16)
   83d2c:	10bfffc4 	addi	r2,r2,-1
   83d30:	15c01426 	beq	r2,r23,83d84 <__call_exitprocs+0x154>
   83d34:	80000015 	stw	zero,0(r16)
   83d38:	183fde26 	beq	r3,zero,83cb4 <rx_descriptor_end+0xfff83c54>
   83d3c:	95c8983a 	sll	r4,r18,r23
   83d40:	a0806217 	ldw	r2,392(r20)
   83d44:	a5800117 	ldw	r22,4(r20)
   83d48:	2084703a 	and	r2,r4,r2
   83d4c:	10000b26 	beq	r2,zero,83d7c <__call_exitprocs+0x14c>
   83d50:	a0806317 	ldw	r2,396(r20)
   83d54:	2088703a 	and	r4,r4,r2
   83d58:	20000c1e 	bne	r4,zero,83d8c <__call_exitprocs+0x15c>
   83d5c:	89400017 	ldw	r5,0(r17)
   83d60:	d9000017 	ldw	r4,0(sp)
   83d64:	183ee83a 	callr	r3
   83d68:	a0800117 	ldw	r2,4(r20)
   83d6c:	15bfbf1e 	bne	r2,r22,83c6c <rx_descriptor_end+0xfff83c0c>
   83d70:	98800017 	ldw	r2,0(r19)
   83d74:	153fcf26 	beq	r2,r20,83cb4 <rx_descriptor_end+0xfff83c54>
   83d78:	003fbc06 	br	83c6c <rx_descriptor_end+0xfff83c0c>
   83d7c:	183ee83a 	callr	r3
   83d80:	003ff906 	br	83d68 <rx_descriptor_end+0xfff83d08>
   83d84:	a5c00115 	stw	r23,4(r20)
   83d88:	003feb06 	br	83d38 <rx_descriptor_end+0xfff83cd8>
   83d8c:	89000017 	ldw	r4,0(r17)
   83d90:	183ee83a 	callr	r3
   83d94:	003ff406 	br	83d68 <rx_descriptor_end+0xfff83d08>
   83d98:	a0800017 	ldw	r2,0(r20)
   83d9c:	a027883a 	mov	r19,r20
   83da0:	1029883a 	mov	r20,r2
   83da4:	003fb606 	br	83c80 <rx_descriptor_end+0xfff83c20>
   83da8:	0005883a 	mov	r2,zero
   83dac:	003ffb06 	br	83d9c <rx_descriptor_end+0xfff83d3c>

00083db0 <__sflush_r>:
   83db0:	2880030b 	ldhu	r2,12(r5)
   83db4:	defffb04 	addi	sp,sp,-20
   83db8:	dcc00315 	stw	r19,12(sp)
   83dbc:	dc400115 	stw	r17,4(sp)
   83dc0:	dfc00415 	stw	ra,16(sp)
   83dc4:	dc800215 	stw	r18,8(sp)
   83dc8:	dc000015 	stw	r16,0(sp)
   83dcc:	10c0020c 	andi	r3,r2,8
   83dd0:	2823883a 	mov	r17,r5
   83dd4:	2027883a 	mov	r19,r4
   83dd8:	1800311e 	bne	r3,zero,83ea0 <__sflush_r+0xf0>
   83ddc:	28c00117 	ldw	r3,4(r5)
   83de0:	10820014 	ori	r2,r2,2048
   83de4:	2880030d 	sth	r2,12(r5)
   83de8:	00c04b0e 	bge	zero,r3,83f18 <__sflush_r+0x168>
   83dec:	8a000a17 	ldw	r8,40(r17)
   83df0:	40002326 	beq	r8,zero,83e80 <__sflush_r+0xd0>
   83df4:	9c000017 	ldw	r16,0(r19)
   83df8:	10c4000c 	andi	r3,r2,4096
   83dfc:	98000015 	stw	zero,0(r19)
   83e00:	18004826 	beq	r3,zero,83f24 <__sflush_r+0x174>
   83e04:	89801417 	ldw	r6,80(r17)
   83e08:	10c0010c 	andi	r3,r2,4
   83e0c:	18000626 	beq	r3,zero,83e28 <__sflush_r+0x78>
   83e10:	88c00117 	ldw	r3,4(r17)
   83e14:	88800c17 	ldw	r2,48(r17)
   83e18:	30cdc83a 	sub	r6,r6,r3
   83e1c:	10000226 	beq	r2,zero,83e28 <__sflush_r+0x78>
   83e20:	88800f17 	ldw	r2,60(r17)
   83e24:	308dc83a 	sub	r6,r6,r2
   83e28:	89400717 	ldw	r5,28(r17)
   83e2c:	000f883a 	mov	r7,zero
   83e30:	9809883a 	mov	r4,r19
   83e34:	403ee83a 	callr	r8
   83e38:	00ffffc4 	movi	r3,-1
   83e3c:	10c04426 	beq	r2,r3,83f50 <__sflush_r+0x1a0>
   83e40:	88c0030b 	ldhu	r3,12(r17)
   83e44:	89000417 	ldw	r4,16(r17)
   83e48:	88000115 	stw	zero,4(r17)
   83e4c:	197dffcc 	andi	r5,r3,63487
   83e50:	8940030d 	sth	r5,12(r17)
   83e54:	89000015 	stw	r4,0(r17)
   83e58:	18c4000c 	andi	r3,r3,4096
   83e5c:	18002c1e 	bne	r3,zero,83f10 <__sflush_r+0x160>
   83e60:	89400c17 	ldw	r5,48(r17)
   83e64:	9c000015 	stw	r16,0(r19)
   83e68:	28000526 	beq	r5,zero,83e80 <__sflush_r+0xd0>
   83e6c:	88801004 	addi	r2,r17,64
   83e70:	28800226 	beq	r5,r2,83e7c <__sflush_r+0xcc>
   83e74:	9809883a 	mov	r4,r19
   83e78:	008451c0 	call	8451c <_free_r>
   83e7c:	88000c15 	stw	zero,48(r17)
   83e80:	0005883a 	mov	r2,zero
   83e84:	dfc00417 	ldw	ra,16(sp)
   83e88:	dcc00317 	ldw	r19,12(sp)
   83e8c:	dc800217 	ldw	r18,8(sp)
   83e90:	dc400117 	ldw	r17,4(sp)
   83e94:	dc000017 	ldw	r16,0(sp)
   83e98:	dec00504 	addi	sp,sp,20
   83e9c:	f800283a 	ret
   83ea0:	2c800417 	ldw	r18,16(r5)
   83ea4:	903ff626 	beq	r18,zero,83e80 <rx_descriptor_end+0xfff83e20>
   83ea8:	2c000017 	ldw	r16,0(r5)
   83eac:	108000cc 	andi	r2,r2,3
   83eb0:	2c800015 	stw	r18,0(r5)
   83eb4:	84a1c83a 	sub	r16,r16,r18
   83eb8:	1000131e 	bne	r2,zero,83f08 <__sflush_r+0x158>
   83ebc:	28800517 	ldw	r2,20(r5)
   83ec0:	88800215 	stw	r2,8(r17)
   83ec4:	04000316 	blt	zero,r16,83ed4 <__sflush_r+0x124>
   83ec8:	003fed06 	br	83e80 <rx_descriptor_end+0xfff83e20>
   83ecc:	90a5883a 	add	r18,r18,r2
   83ed0:	043feb0e 	bge	zero,r16,83e80 <rx_descriptor_end+0xfff83e20>
   83ed4:	88800917 	ldw	r2,36(r17)
   83ed8:	89400717 	ldw	r5,28(r17)
   83edc:	800f883a 	mov	r7,r16
   83ee0:	900d883a 	mov	r6,r18
   83ee4:	9809883a 	mov	r4,r19
   83ee8:	103ee83a 	callr	r2
   83eec:	80a1c83a 	sub	r16,r16,r2
   83ef0:	00bff616 	blt	zero,r2,83ecc <rx_descriptor_end+0xfff83e6c>
   83ef4:	88c0030b 	ldhu	r3,12(r17)
   83ef8:	00bfffc4 	movi	r2,-1
   83efc:	18c01014 	ori	r3,r3,64
   83f00:	88c0030d 	sth	r3,12(r17)
   83f04:	003fdf06 	br	83e84 <rx_descriptor_end+0xfff83e24>
   83f08:	0005883a 	mov	r2,zero
   83f0c:	003fec06 	br	83ec0 <rx_descriptor_end+0xfff83e60>
   83f10:	88801415 	stw	r2,80(r17)
   83f14:	003fd206 	br	83e60 <rx_descriptor_end+0xfff83e00>
   83f18:	28c00f17 	ldw	r3,60(r5)
   83f1c:	00ffb316 	blt	zero,r3,83dec <rx_descriptor_end+0xfff83d8c>
   83f20:	003fd706 	br	83e80 <rx_descriptor_end+0xfff83e20>
   83f24:	89400717 	ldw	r5,28(r17)
   83f28:	000d883a 	mov	r6,zero
   83f2c:	01c00044 	movi	r7,1
   83f30:	9809883a 	mov	r4,r19
   83f34:	403ee83a 	callr	r8
   83f38:	100d883a 	mov	r6,r2
   83f3c:	00bfffc4 	movi	r2,-1
   83f40:	30801426 	beq	r6,r2,83f94 <__sflush_r+0x1e4>
   83f44:	8880030b 	ldhu	r2,12(r17)
   83f48:	8a000a17 	ldw	r8,40(r17)
   83f4c:	003fae06 	br	83e08 <rx_descriptor_end+0xfff83da8>
   83f50:	98c00017 	ldw	r3,0(r19)
   83f54:	183fba26 	beq	r3,zero,83e40 <rx_descriptor_end+0xfff83de0>
   83f58:	01000744 	movi	r4,29
   83f5c:	19000626 	beq	r3,r4,83f78 <__sflush_r+0x1c8>
   83f60:	01000584 	movi	r4,22
   83f64:	19000426 	beq	r3,r4,83f78 <__sflush_r+0x1c8>
   83f68:	88c0030b 	ldhu	r3,12(r17)
   83f6c:	18c01014 	ori	r3,r3,64
   83f70:	88c0030d 	sth	r3,12(r17)
   83f74:	003fc306 	br	83e84 <rx_descriptor_end+0xfff83e24>
   83f78:	8880030b 	ldhu	r2,12(r17)
   83f7c:	88c00417 	ldw	r3,16(r17)
   83f80:	88000115 	stw	zero,4(r17)
   83f84:	10bdffcc 	andi	r2,r2,63487
   83f88:	8880030d 	sth	r2,12(r17)
   83f8c:	88c00015 	stw	r3,0(r17)
   83f90:	003fb306 	br	83e60 <rx_descriptor_end+0xfff83e00>
   83f94:	98800017 	ldw	r2,0(r19)
   83f98:	103fea26 	beq	r2,zero,83f44 <rx_descriptor_end+0xfff83ee4>
   83f9c:	00c00744 	movi	r3,29
   83fa0:	10c00226 	beq	r2,r3,83fac <__sflush_r+0x1fc>
   83fa4:	00c00584 	movi	r3,22
   83fa8:	10c0031e 	bne	r2,r3,83fb8 <__sflush_r+0x208>
   83fac:	9c000015 	stw	r16,0(r19)
   83fb0:	0005883a 	mov	r2,zero
   83fb4:	003fb306 	br	83e84 <rx_descriptor_end+0xfff83e24>
   83fb8:	88c0030b 	ldhu	r3,12(r17)
   83fbc:	3005883a 	mov	r2,r6
   83fc0:	18c01014 	ori	r3,r3,64
   83fc4:	88c0030d 	sth	r3,12(r17)
   83fc8:	003fae06 	br	83e84 <rx_descriptor_end+0xfff83e24>

00083fcc <_fflush_r>:
   83fcc:	defffd04 	addi	sp,sp,-12
   83fd0:	dc000115 	stw	r16,4(sp)
   83fd4:	dfc00215 	stw	ra,8(sp)
   83fd8:	2021883a 	mov	r16,r4
   83fdc:	20000226 	beq	r4,zero,83fe8 <_fflush_r+0x1c>
   83fe0:	20800e17 	ldw	r2,56(r4)
   83fe4:	10000c26 	beq	r2,zero,84018 <_fflush_r+0x4c>
   83fe8:	2880030f 	ldh	r2,12(r5)
   83fec:	1000051e 	bne	r2,zero,84004 <_fflush_r+0x38>
   83ff0:	0005883a 	mov	r2,zero
   83ff4:	dfc00217 	ldw	ra,8(sp)
   83ff8:	dc000117 	ldw	r16,4(sp)
   83ffc:	dec00304 	addi	sp,sp,12
   84000:	f800283a 	ret
   84004:	8009883a 	mov	r4,r16
   84008:	dfc00217 	ldw	ra,8(sp)
   8400c:	dc000117 	ldw	r16,4(sp)
   84010:	dec00304 	addi	sp,sp,12
   84014:	0083db01 	jmpi	83db0 <__sflush_r>
   84018:	d9400015 	stw	r5,0(sp)
   8401c:	00843a80 	call	843a8 <__sinit>
   84020:	d9400017 	ldw	r5,0(sp)
   84024:	003ff006 	br	83fe8 <rx_descriptor_end+0xfff83f88>

00084028 <fflush>:
   84028:	20000526 	beq	r4,zero,84040 <fflush+0x18>
   8402c:	00800274 	movhi	r2,9
   84030:	10a07304 	addi	r2,r2,-32308
   84034:	200b883a 	mov	r5,r4
   84038:	11000017 	ldw	r4,0(r2)
   8403c:	0083fcc1 	jmpi	83fcc <_fflush_r>
   84040:	00800274 	movhi	r2,9
   84044:	10a07204 	addi	r2,r2,-32312
   84048:	11000017 	ldw	r4,0(r2)
   8404c:	01400234 	movhi	r5,8
   84050:	294ff304 	addi	r5,r5,16332
   84054:	00848f01 	jmpi	848f0 <_fwalk_reent>

00084058 <__fp_unlock>:
   84058:	0005883a 	mov	r2,zero
   8405c:	f800283a 	ret

00084060 <_cleanup_r>:
   84060:	01400234 	movhi	r5,8
   84064:	2955ba04 	addi	r5,r5,22248
   84068:	00848f01 	jmpi	848f0 <_fwalk_reent>

0008406c <__sinit.part.1>:
   8406c:	defff704 	addi	sp,sp,-36
   84070:	00c00234 	movhi	r3,8
   84074:	dfc00815 	stw	ra,32(sp)
   84078:	ddc00715 	stw	r23,28(sp)
   8407c:	dd800615 	stw	r22,24(sp)
   84080:	dd400515 	stw	r21,20(sp)
   84084:	dd000415 	stw	r20,16(sp)
   84088:	dcc00315 	stw	r19,12(sp)
   8408c:	dc800215 	stw	r18,8(sp)
   84090:	dc400115 	stw	r17,4(sp)
   84094:	dc000015 	stw	r16,0(sp)
   84098:	18d01804 	addi	r3,r3,16480
   8409c:	24000117 	ldw	r16,4(r4)
   840a0:	20c00f15 	stw	r3,60(r4)
   840a4:	2080bb04 	addi	r2,r4,748
   840a8:	00c000c4 	movi	r3,3
   840ac:	20c0b915 	stw	r3,740(r4)
   840b0:	2080ba15 	stw	r2,744(r4)
   840b4:	2000b815 	stw	zero,736(r4)
   840b8:	05c00204 	movi	r23,8
   840bc:	00800104 	movi	r2,4
   840c0:	2025883a 	mov	r18,r4
   840c4:	b80d883a 	mov	r6,r23
   840c8:	81001704 	addi	r4,r16,92
   840cc:	000b883a 	mov	r5,zero
   840d0:	80000015 	stw	zero,0(r16)
   840d4:	80000115 	stw	zero,4(r16)
   840d8:	80000215 	stw	zero,8(r16)
   840dc:	8080030d 	sth	r2,12(r16)
   840e0:	80001915 	stw	zero,100(r16)
   840e4:	8000038d 	sth	zero,14(r16)
   840e8:	80000415 	stw	zero,16(r16)
   840ec:	80000515 	stw	zero,20(r16)
   840f0:	80000615 	stw	zero,24(r16)
   840f4:	008537c0 	call	8537c <memset>
   840f8:	05800234 	movhi	r22,8
   840fc:	94400217 	ldw	r17,8(r18)
   84100:	05400234 	movhi	r21,8
   84104:	05000234 	movhi	r20,8
   84108:	04c00234 	movhi	r19,8
   8410c:	b5953e04 	addi	r22,r22,21752
   84110:	ad555504 	addi	r21,r21,21844
   84114:	a5157404 	addi	r20,r20,21968
   84118:	9cd58b04 	addi	r19,r19,22060
   8411c:	85800815 	stw	r22,32(r16)
   84120:	85400915 	stw	r21,36(r16)
   84124:	85000a15 	stw	r20,40(r16)
   84128:	84c00b15 	stw	r19,44(r16)
   8412c:	84000715 	stw	r16,28(r16)
   84130:	00800284 	movi	r2,10
   84134:	8880030d 	sth	r2,12(r17)
   84138:	00800044 	movi	r2,1
   8413c:	b80d883a 	mov	r6,r23
   84140:	89001704 	addi	r4,r17,92
   84144:	000b883a 	mov	r5,zero
   84148:	88000015 	stw	zero,0(r17)
   8414c:	88000115 	stw	zero,4(r17)
   84150:	88000215 	stw	zero,8(r17)
   84154:	88001915 	stw	zero,100(r17)
   84158:	8880038d 	sth	r2,14(r17)
   8415c:	88000415 	stw	zero,16(r17)
   84160:	88000515 	stw	zero,20(r17)
   84164:	88000615 	stw	zero,24(r17)
   84168:	008537c0 	call	8537c <memset>
   8416c:	94000317 	ldw	r16,12(r18)
   84170:	00800484 	movi	r2,18
   84174:	8c400715 	stw	r17,28(r17)
   84178:	8d800815 	stw	r22,32(r17)
   8417c:	8d400915 	stw	r21,36(r17)
   84180:	8d000a15 	stw	r20,40(r17)
   84184:	8cc00b15 	stw	r19,44(r17)
   84188:	8080030d 	sth	r2,12(r16)
   8418c:	00800084 	movi	r2,2
   84190:	80000015 	stw	zero,0(r16)
   84194:	80000115 	stw	zero,4(r16)
   84198:	80000215 	stw	zero,8(r16)
   8419c:	80001915 	stw	zero,100(r16)
   841a0:	8080038d 	sth	r2,14(r16)
   841a4:	80000415 	stw	zero,16(r16)
   841a8:	80000515 	stw	zero,20(r16)
   841ac:	80000615 	stw	zero,24(r16)
   841b0:	b80d883a 	mov	r6,r23
   841b4:	000b883a 	mov	r5,zero
   841b8:	81001704 	addi	r4,r16,92
   841bc:	008537c0 	call	8537c <memset>
   841c0:	00800044 	movi	r2,1
   841c4:	84000715 	stw	r16,28(r16)
   841c8:	85800815 	stw	r22,32(r16)
   841cc:	85400915 	stw	r21,36(r16)
   841d0:	85000a15 	stw	r20,40(r16)
   841d4:	84c00b15 	stw	r19,44(r16)
   841d8:	90800e15 	stw	r2,56(r18)
   841dc:	dfc00817 	ldw	ra,32(sp)
   841e0:	ddc00717 	ldw	r23,28(sp)
   841e4:	dd800617 	ldw	r22,24(sp)
   841e8:	dd400517 	ldw	r21,20(sp)
   841ec:	dd000417 	ldw	r20,16(sp)
   841f0:	dcc00317 	ldw	r19,12(sp)
   841f4:	dc800217 	ldw	r18,8(sp)
   841f8:	dc400117 	ldw	r17,4(sp)
   841fc:	dc000017 	ldw	r16,0(sp)
   84200:	dec00904 	addi	sp,sp,36
   84204:	f800283a 	ret

00084208 <__fp_lock>:
   84208:	0005883a 	mov	r2,zero
   8420c:	f800283a 	ret

00084210 <__sfmoreglue>:
   84210:	defffc04 	addi	sp,sp,-16
   84214:	dc400115 	stw	r17,4(sp)
   84218:	2c7fffc4 	addi	r17,r5,-1
   8421c:	8c401a24 	muli	r17,r17,104
   84220:	dc800215 	stw	r18,8(sp)
   84224:	2825883a 	mov	r18,r5
   84228:	89401d04 	addi	r5,r17,116
   8422c:	dc000015 	stw	r16,0(sp)
   84230:	dfc00315 	stw	ra,12(sp)
   84234:	0084b700 	call	84b70 <_malloc_r>
   84238:	1021883a 	mov	r16,r2
   8423c:	10000726 	beq	r2,zero,8425c <__sfmoreglue+0x4c>
   84240:	11000304 	addi	r4,r2,12
   84244:	10000015 	stw	zero,0(r2)
   84248:	14800115 	stw	r18,4(r2)
   8424c:	11000215 	stw	r4,8(r2)
   84250:	89801a04 	addi	r6,r17,104
   84254:	000b883a 	mov	r5,zero
   84258:	008537c0 	call	8537c <memset>
   8425c:	8005883a 	mov	r2,r16
   84260:	dfc00317 	ldw	ra,12(sp)
   84264:	dc800217 	ldw	r18,8(sp)
   84268:	dc400117 	ldw	r17,4(sp)
   8426c:	dc000017 	ldw	r16,0(sp)
   84270:	dec00404 	addi	sp,sp,16
   84274:	f800283a 	ret

00084278 <__sfp>:
   84278:	defffb04 	addi	sp,sp,-20
   8427c:	dc000015 	stw	r16,0(sp)
   84280:	04000274 	movhi	r16,9
   84284:	84207204 	addi	r16,r16,-32312
   84288:	dcc00315 	stw	r19,12(sp)
   8428c:	2027883a 	mov	r19,r4
   84290:	81000017 	ldw	r4,0(r16)
   84294:	dfc00415 	stw	ra,16(sp)
   84298:	dc800215 	stw	r18,8(sp)
   8429c:	20800e17 	ldw	r2,56(r4)
   842a0:	dc400115 	stw	r17,4(sp)
   842a4:	1000021e 	bne	r2,zero,842b0 <__sfp+0x38>
   842a8:	008406c0 	call	8406c <__sinit.part.1>
   842ac:	81000017 	ldw	r4,0(r16)
   842b0:	2480b804 	addi	r18,r4,736
   842b4:	047fffc4 	movi	r17,-1
   842b8:	91000117 	ldw	r4,4(r18)
   842bc:	94000217 	ldw	r16,8(r18)
   842c0:	213fffc4 	addi	r4,r4,-1
   842c4:	20000a16 	blt	r4,zero,842f0 <__sfp+0x78>
   842c8:	8080030f 	ldh	r2,12(r16)
   842cc:	10000c26 	beq	r2,zero,84300 <__sfp+0x88>
   842d0:	80c01d04 	addi	r3,r16,116
   842d4:	00000206 	br	842e0 <__sfp+0x68>
   842d8:	18bfe60f 	ldh	r2,-104(r3)
   842dc:	10000826 	beq	r2,zero,84300 <__sfp+0x88>
   842e0:	213fffc4 	addi	r4,r4,-1
   842e4:	1c3ffd04 	addi	r16,r3,-12
   842e8:	18c01a04 	addi	r3,r3,104
   842ec:	247ffa1e 	bne	r4,r17,842d8 <rx_descriptor_end+0xfff84278>
   842f0:	90800017 	ldw	r2,0(r18)
   842f4:	10001d26 	beq	r2,zero,8436c <__sfp+0xf4>
   842f8:	1025883a 	mov	r18,r2
   842fc:	003fee06 	br	842b8 <rx_descriptor_end+0xfff84258>
   84300:	00bfffc4 	movi	r2,-1
   84304:	8080038d 	sth	r2,14(r16)
   84308:	00800044 	movi	r2,1
   8430c:	8080030d 	sth	r2,12(r16)
   84310:	80001915 	stw	zero,100(r16)
   84314:	80000015 	stw	zero,0(r16)
   84318:	80000215 	stw	zero,8(r16)
   8431c:	80000115 	stw	zero,4(r16)
   84320:	80000415 	stw	zero,16(r16)
   84324:	80000515 	stw	zero,20(r16)
   84328:	80000615 	stw	zero,24(r16)
   8432c:	01800204 	movi	r6,8
   84330:	000b883a 	mov	r5,zero
   84334:	81001704 	addi	r4,r16,92
   84338:	008537c0 	call	8537c <memset>
   8433c:	8005883a 	mov	r2,r16
   84340:	80000c15 	stw	zero,48(r16)
   84344:	80000d15 	stw	zero,52(r16)
   84348:	80001115 	stw	zero,68(r16)
   8434c:	80001215 	stw	zero,72(r16)
   84350:	dfc00417 	ldw	ra,16(sp)
   84354:	dcc00317 	ldw	r19,12(sp)
   84358:	dc800217 	ldw	r18,8(sp)
   8435c:	dc400117 	ldw	r17,4(sp)
   84360:	dc000017 	ldw	r16,0(sp)
   84364:	dec00504 	addi	sp,sp,20
   84368:	f800283a 	ret
   8436c:	01400104 	movi	r5,4
   84370:	9809883a 	mov	r4,r19
   84374:	00842100 	call	84210 <__sfmoreglue>
   84378:	90800015 	stw	r2,0(r18)
   8437c:	103fde1e 	bne	r2,zero,842f8 <rx_descriptor_end+0xfff84298>
   84380:	00800304 	movi	r2,12
   84384:	98800015 	stw	r2,0(r19)
   84388:	0005883a 	mov	r2,zero
   8438c:	003ff006 	br	84350 <rx_descriptor_end+0xfff842f0>

00084390 <_cleanup>:
   84390:	00800274 	movhi	r2,9
   84394:	10a07204 	addi	r2,r2,-32312
   84398:	11000017 	ldw	r4,0(r2)
   8439c:	01400234 	movhi	r5,8
   843a0:	2955ba04 	addi	r5,r5,22248
   843a4:	00848f01 	jmpi	848f0 <_fwalk_reent>

000843a8 <__sinit>:
   843a8:	20800e17 	ldw	r2,56(r4)
   843ac:	10000126 	beq	r2,zero,843b4 <__sinit+0xc>
   843b0:	f800283a 	ret
   843b4:	008406c1 	jmpi	8406c <__sinit.part.1>

000843b8 <__sfp_lock_acquire>:
   843b8:	f800283a 	ret

000843bc <__sfp_lock_release>:
   843bc:	f800283a 	ret

000843c0 <__sinit_lock_acquire>:
   843c0:	f800283a 	ret

000843c4 <__sinit_lock_release>:
   843c4:	f800283a 	ret

000843c8 <__fp_lock_all>:
   843c8:	00800274 	movhi	r2,9
   843cc:	10a07304 	addi	r2,r2,-32308
   843d0:	11000017 	ldw	r4,0(r2)
   843d4:	01400234 	movhi	r5,8
   843d8:	29508204 	addi	r5,r5,16904
   843dc:	008482c1 	jmpi	8482c <_fwalk>

000843e0 <__fp_unlock_all>:
   843e0:	00800274 	movhi	r2,9
   843e4:	10a07304 	addi	r2,r2,-32308
   843e8:	11000017 	ldw	r4,0(r2)
   843ec:	01400234 	movhi	r5,8
   843f0:	29501604 	addi	r5,r5,16472
   843f4:	008482c1 	jmpi	8482c <_fwalk>

000843f8 <_malloc_trim_r>:
   843f8:	defffb04 	addi	sp,sp,-20
   843fc:	dcc00315 	stw	r19,12(sp)
   84400:	04c00234 	movhi	r19,8
   84404:	dc800215 	stw	r18,8(sp)
   84408:	dc400115 	stw	r17,4(sp)
   8440c:	dc000015 	stw	r16,0(sp)
   84410:	dfc00415 	stw	ra,16(sp)
   84414:	2821883a 	mov	r16,r5
   84418:	9cdf6504 	addi	r19,r19,32148
   8441c:	2025883a 	mov	r18,r4
   84420:	0085c6c0 	call	85c6c <__malloc_lock>
   84424:	98800217 	ldw	r2,8(r19)
   84428:	14400117 	ldw	r17,4(r2)
   8442c:	00bfff04 	movi	r2,-4
   84430:	88a2703a 	and	r17,r17,r2
   84434:	8c21c83a 	sub	r16,r17,r16
   84438:	8403fbc4 	addi	r16,r16,4079
   8443c:	8020d33a 	srli	r16,r16,12
   84440:	0083ffc4 	movi	r2,4095
   84444:	843fffc4 	addi	r16,r16,-1
   84448:	8020933a 	slli	r16,r16,12
   8444c:	1400060e 	bge	r2,r16,84468 <_malloc_trim_r+0x70>
   84450:	000b883a 	mov	r5,zero
   84454:	9009883a 	mov	r4,r18
   84458:	00854a40 	call	854a4 <_sbrk_r>
   8445c:	98c00217 	ldw	r3,8(r19)
   84460:	1c47883a 	add	r3,r3,r17
   84464:	10c00a26 	beq	r2,r3,84490 <_malloc_trim_r+0x98>
   84468:	9009883a 	mov	r4,r18
   8446c:	0085c900 	call	85c90 <__malloc_unlock>
   84470:	0005883a 	mov	r2,zero
   84474:	dfc00417 	ldw	ra,16(sp)
   84478:	dcc00317 	ldw	r19,12(sp)
   8447c:	dc800217 	ldw	r18,8(sp)
   84480:	dc400117 	ldw	r17,4(sp)
   84484:	dc000017 	ldw	r16,0(sp)
   84488:	dec00504 	addi	sp,sp,20
   8448c:	f800283a 	ret
   84490:	040bc83a 	sub	r5,zero,r16
   84494:	9009883a 	mov	r4,r18
   84498:	00854a40 	call	854a4 <_sbrk_r>
   8449c:	00ffffc4 	movi	r3,-1
   844a0:	10c00d26 	beq	r2,r3,844d8 <_malloc_trim_r+0xe0>
   844a4:	00c00274 	movhi	r3,9
   844a8:	18ea3204 	addi	r3,r3,-22328
   844ac:	18800017 	ldw	r2,0(r3)
   844b0:	99000217 	ldw	r4,8(r19)
   844b4:	8c23c83a 	sub	r17,r17,r16
   844b8:	8c400054 	ori	r17,r17,1
   844bc:	1421c83a 	sub	r16,r2,r16
   844c0:	24400115 	stw	r17,4(r4)
   844c4:	9009883a 	mov	r4,r18
   844c8:	1c000015 	stw	r16,0(r3)
   844cc:	0085c900 	call	85c90 <__malloc_unlock>
   844d0:	00800044 	movi	r2,1
   844d4:	003fe706 	br	84474 <rx_descriptor_end+0xfff84414>
   844d8:	000b883a 	mov	r5,zero
   844dc:	9009883a 	mov	r4,r18
   844e0:	00854a40 	call	854a4 <_sbrk_r>
   844e4:	99000217 	ldw	r4,8(r19)
   844e8:	014003c4 	movi	r5,15
   844ec:	1107c83a 	sub	r3,r2,r4
   844f0:	28ffdd0e 	bge	r5,r3,84468 <rx_descriptor_end+0xfff84408>
   844f4:	01400274 	movhi	r5,9
   844f8:	29607404 	addi	r5,r5,-32304
   844fc:	29400017 	ldw	r5,0(r5)
   84500:	18c00054 	ori	r3,r3,1
   84504:	20c00115 	stw	r3,4(r4)
   84508:	00c00274 	movhi	r3,9
   8450c:	1145c83a 	sub	r2,r2,r5
   84510:	18ea3204 	addi	r3,r3,-22328
   84514:	18800015 	stw	r2,0(r3)
   84518:	003fd306 	br	84468 <rx_descriptor_end+0xfff84408>

0008451c <_free_r>:
   8451c:	28004126 	beq	r5,zero,84624 <_free_r+0x108>
   84520:	defffd04 	addi	sp,sp,-12
   84524:	dc400115 	stw	r17,4(sp)
   84528:	dc000015 	stw	r16,0(sp)
   8452c:	2023883a 	mov	r17,r4
   84530:	2821883a 	mov	r16,r5
   84534:	dfc00215 	stw	ra,8(sp)
   84538:	0085c6c0 	call	85c6c <__malloc_lock>
   8453c:	81ffff17 	ldw	r7,-4(r16)
   84540:	00bfff84 	movi	r2,-2
   84544:	01000234 	movhi	r4,8
   84548:	81bffe04 	addi	r6,r16,-8
   8454c:	3884703a 	and	r2,r7,r2
   84550:	211f6504 	addi	r4,r4,32148
   84554:	308b883a 	add	r5,r6,r2
   84558:	2a400117 	ldw	r9,4(r5)
   8455c:	22000217 	ldw	r8,8(r4)
   84560:	00ffff04 	movi	r3,-4
   84564:	48c6703a 	and	r3,r9,r3
   84568:	2a005726 	beq	r5,r8,846c8 <_free_r+0x1ac>
   8456c:	28c00115 	stw	r3,4(r5)
   84570:	39c0004c 	andi	r7,r7,1
   84574:	3800091e 	bne	r7,zero,8459c <_free_r+0x80>
   84578:	823ffe17 	ldw	r8,-8(r16)
   8457c:	22400204 	addi	r9,r4,8
   84580:	320dc83a 	sub	r6,r6,r8
   84584:	31c00217 	ldw	r7,8(r6)
   84588:	1205883a 	add	r2,r2,r8
   8458c:	3a406526 	beq	r7,r9,84724 <_free_r+0x208>
   84590:	32000317 	ldw	r8,12(r6)
   84594:	3a000315 	stw	r8,12(r7)
   84598:	41c00215 	stw	r7,8(r8)
   8459c:	28cf883a 	add	r7,r5,r3
   845a0:	39c00117 	ldw	r7,4(r7)
   845a4:	39c0004c 	andi	r7,r7,1
   845a8:	38003a26 	beq	r7,zero,84694 <_free_r+0x178>
   845ac:	10c00054 	ori	r3,r2,1
   845b0:	30c00115 	stw	r3,4(r6)
   845b4:	3087883a 	add	r3,r6,r2
   845b8:	18800015 	stw	r2,0(r3)
   845bc:	00c07fc4 	movi	r3,511
   845c0:	18801936 	bltu	r3,r2,84628 <_free_r+0x10c>
   845c4:	1004d0fa 	srli	r2,r2,3
   845c8:	01c00044 	movi	r7,1
   845cc:	21400117 	ldw	r5,4(r4)
   845d0:	10c00044 	addi	r3,r2,1
   845d4:	18c7883a 	add	r3,r3,r3
   845d8:	1005d0ba 	srai	r2,r2,2
   845dc:	18c7883a 	add	r3,r3,r3
   845e0:	18c7883a 	add	r3,r3,r3
   845e4:	1907883a 	add	r3,r3,r4
   845e8:	3884983a 	sll	r2,r7,r2
   845ec:	19c00017 	ldw	r7,0(r3)
   845f0:	1a3ffe04 	addi	r8,r3,-8
   845f4:	1144b03a 	or	r2,r2,r5
   845f8:	32000315 	stw	r8,12(r6)
   845fc:	31c00215 	stw	r7,8(r6)
   84600:	20800115 	stw	r2,4(r4)
   84604:	19800015 	stw	r6,0(r3)
   84608:	39800315 	stw	r6,12(r7)
   8460c:	8809883a 	mov	r4,r17
   84610:	dfc00217 	ldw	ra,8(sp)
   84614:	dc400117 	ldw	r17,4(sp)
   84618:	dc000017 	ldw	r16,0(sp)
   8461c:	dec00304 	addi	sp,sp,12
   84620:	0085c901 	jmpi	85c90 <__malloc_unlock>
   84624:	f800283a 	ret
   84628:	100ad27a 	srli	r5,r2,9
   8462c:	00c00104 	movi	r3,4
   84630:	19404a36 	bltu	r3,r5,8475c <_free_r+0x240>
   84634:	100ad1ba 	srli	r5,r2,6
   84638:	28c00e44 	addi	r3,r5,57
   8463c:	18c7883a 	add	r3,r3,r3
   84640:	29400e04 	addi	r5,r5,56
   84644:	18c7883a 	add	r3,r3,r3
   84648:	18c7883a 	add	r3,r3,r3
   8464c:	1909883a 	add	r4,r3,r4
   84650:	20c00017 	ldw	r3,0(r4)
   84654:	01c00234 	movhi	r7,8
   84658:	213ffe04 	addi	r4,r4,-8
   8465c:	39df6504 	addi	r7,r7,32148
   84660:	20c04426 	beq	r4,r3,84774 <_free_r+0x258>
   84664:	01ffff04 	movi	r7,-4
   84668:	19400117 	ldw	r5,4(r3)
   8466c:	29ca703a 	and	r5,r5,r7
   84670:	1140022e 	bgeu	r2,r5,8467c <_free_r+0x160>
   84674:	18c00217 	ldw	r3,8(r3)
   84678:	20fffb1e 	bne	r4,r3,84668 <rx_descriptor_end+0xfff84608>
   8467c:	19000317 	ldw	r4,12(r3)
   84680:	31000315 	stw	r4,12(r6)
   84684:	30c00215 	stw	r3,8(r6)
   84688:	21800215 	stw	r6,8(r4)
   8468c:	19800315 	stw	r6,12(r3)
   84690:	003fde06 	br	8460c <rx_descriptor_end+0xfff845ac>
   84694:	29c00217 	ldw	r7,8(r5)
   84698:	10c5883a 	add	r2,r2,r3
   8469c:	00c00234 	movhi	r3,8
   846a0:	18df6704 	addi	r3,r3,32156
   846a4:	38c03b26 	beq	r7,r3,84794 <_free_r+0x278>
   846a8:	2a000317 	ldw	r8,12(r5)
   846ac:	11400054 	ori	r5,r2,1
   846b0:	3087883a 	add	r3,r6,r2
   846b4:	3a000315 	stw	r8,12(r7)
   846b8:	41c00215 	stw	r7,8(r8)
   846bc:	31400115 	stw	r5,4(r6)
   846c0:	18800015 	stw	r2,0(r3)
   846c4:	003fbd06 	br	845bc <rx_descriptor_end+0xfff8455c>
   846c8:	39c0004c 	andi	r7,r7,1
   846cc:	10c5883a 	add	r2,r2,r3
   846d0:	3800071e 	bne	r7,zero,846f0 <_free_r+0x1d4>
   846d4:	81fffe17 	ldw	r7,-8(r16)
   846d8:	31cdc83a 	sub	r6,r6,r7
   846dc:	30c00317 	ldw	r3,12(r6)
   846e0:	31400217 	ldw	r5,8(r6)
   846e4:	11c5883a 	add	r2,r2,r7
   846e8:	28c00315 	stw	r3,12(r5)
   846ec:	19400215 	stw	r5,8(r3)
   846f0:	10c00054 	ori	r3,r2,1
   846f4:	30c00115 	stw	r3,4(r6)
   846f8:	00c00274 	movhi	r3,9
   846fc:	18e07504 	addi	r3,r3,-32300
   84700:	18c00017 	ldw	r3,0(r3)
   84704:	21800215 	stw	r6,8(r4)
   84708:	10ffc036 	bltu	r2,r3,8460c <rx_descriptor_end+0xfff845ac>
   8470c:	00800274 	movhi	r2,9
   84710:	10a8b504 	addi	r2,r2,-23852
   84714:	11400017 	ldw	r5,0(r2)
   84718:	8809883a 	mov	r4,r17
   8471c:	00843f80 	call	843f8 <_malloc_trim_r>
   84720:	003fba06 	br	8460c <rx_descriptor_end+0xfff845ac>
   84724:	28c9883a 	add	r4,r5,r3
   84728:	21000117 	ldw	r4,4(r4)
   8472c:	2100004c 	andi	r4,r4,1
   84730:	2000391e 	bne	r4,zero,84818 <_free_r+0x2fc>
   84734:	29c00217 	ldw	r7,8(r5)
   84738:	29000317 	ldw	r4,12(r5)
   8473c:	1885883a 	add	r2,r3,r2
   84740:	10c00054 	ori	r3,r2,1
   84744:	39000315 	stw	r4,12(r7)
   84748:	21c00215 	stw	r7,8(r4)
   8474c:	30c00115 	stw	r3,4(r6)
   84750:	308d883a 	add	r6,r6,r2
   84754:	30800015 	stw	r2,0(r6)
   84758:	003fac06 	br	8460c <rx_descriptor_end+0xfff845ac>
   8475c:	00c00504 	movi	r3,20
   84760:	19401536 	bltu	r3,r5,847b8 <_free_r+0x29c>
   84764:	28c01704 	addi	r3,r5,92
   84768:	18c7883a 	add	r3,r3,r3
   8476c:	294016c4 	addi	r5,r5,91
   84770:	003fb406 	br	84644 <rx_descriptor_end+0xfff845e4>
   84774:	280bd0ba 	srai	r5,r5,2
   84778:	00c00044 	movi	r3,1
   8477c:	38800117 	ldw	r2,4(r7)
   84780:	194a983a 	sll	r5,r3,r5
   84784:	2007883a 	mov	r3,r4
   84788:	2884b03a 	or	r2,r5,r2
   8478c:	38800115 	stw	r2,4(r7)
   84790:	003fbb06 	br	84680 <rx_descriptor_end+0xfff84620>
   84794:	21800515 	stw	r6,20(r4)
   84798:	21800415 	stw	r6,16(r4)
   8479c:	10c00054 	ori	r3,r2,1
   847a0:	31c00315 	stw	r7,12(r6)
   847a4:	31c00215 	stw	r7,8(r6)
   847a8:	30c00115 	stw	r3,4(r6)
   847ac:	308d883a 	add	r6,r6,r2
   847b0:	30800015 	stw	r2,0(r6)
   847b4:	003f9506 	br	8460c <rx_descriptor_end+0xfff845ac>
   847b8:	00c01504 	movi	r3,84
   847bc:	19400536 	bltu	r3,r5,847d4 <_free_r+0x2b8>
   847c0:	100ad33a 	srli	r5,r2,12
   847c4:	28c01bc4 	addi	r3,r5,111
   847c8:	18c7883a 	add	r3,r3,r3
   847cc:	29401b84 	addi	r5,r5,110
   847d0:	003f9c06 	br	84644 <rx_descriptor_end+0xfff845e4>
   847d4:	00c05504 	movi	r3,340
   847d8:	19400536 	bltu	r3,r5,847f0 <_free_r+0x2d4>
   847dc:	100ad3fa 	srli	r5,r2,15
   847e0:	28c01e04 	addi	r3,r5,120
   847e4:	18c7883a 	add	r3,r3,r3
   847e8:	29401dc4 	addi	r5,r5,119
   847ec:	003f9506 	br	84644 <rx_descriptor_end+0xfff845e4>
   847f0:	00c15504 	movi	r3,1364
   847f4:	19400536 	bltu	r3,r5,8480c <_free_r+0x2f0>
   847f8:	100ad4ba 	srli	r5,r2,18
   847fc:	28c01f44 	addi	r3,r5,125
   84800:	18c7883a 	add	r3,r3,r3
   84804:	29401f04 	addi	r5,r5,124
   84808:	003f8e06 	br	84644 <rx_descriptor_end+0xfff845e4>
   8480c:	00c03f84 	movi	r3,254
   84810:	01401f84 	movi	r5,126
   84814:	003f8b06 	br	84644 <rx_descriptor_end+0xfff845e4>
   84818:	10c00054 	ori	r3,r2,1
   8481c:	30c00115 	stw	r3,4(r6)
   84820:	308d883a 	add	r6,r6,r2
   84824:	30800015 	stw	r2,0(r6)
   84828:	003f7806 	br	8460c <rx_descriptor_end+0xfff845ac>

0008482c <_fwalk>:
   8482c:	defff704 	addi	sp,sp,-36
   84830:	dd000415 	stw	r20,16(sp)
   84834:	dfc00815 	stw	ra,32(sp)
   84838:	ddc00715 	stw	r23,28(sp)
   8483c:	dd800615 	stw	r22,24(sp)
   84840:	dd400515 	stw	r21,20(sp)
   84844:	dcc00315 	stw	r19,12(sp)
   84848:	dc800215 	stw	r18,8(sp)
   8484c:	dc400115 	stw	r17,4(sp)
   84850:	dc000015 	stw	r16,0(sp)
   84854:	2500b804 	addi	r20,r4,736
   84858:	a0002326 	beq	r20,zero,848e8 <_fwalk+0xbc>
   8485c:	282b883a 	mov	r21,r5
   84860:	002f883a 	mov	r23,zero
   84864:	05800044 	movi	r22,1
   84868:	04ffffc4 	movi	r19,-1
   8486c:	a4400117 	ldw	r17,4(r20)
   84870:	a4800217 	ldw	r18,8(r20)
   84874:	8c7fffc4 	addi	r17,r17,-1
   84878:	88000d16 	blt	r17,zero,848b0 <_fwalk+0x84>
   8487c:	94000304 	addi	r16,r18,12
   84880:	94800384 	addi	r18,r18,14
   84884:	8080000b 	ldhu	r2,0(r16)
   84888:	8c7fffc4 	addi	r17,r17,-1
   8488c:	813ffd04 	addi	r4,r16,-12
   84890:	b080042e 	bgeu	r22,r2,848a4 <_fwalk+0x78>
   84894:	9080000f 	ldh	r2,0(r18)
   84898:	14c00226 	beq	r2,r19,848a4 <_fwalk+0x78>
   8489c:	a83ee83a 	callr	r21
   848a0:	b8aeb03a 	or	r23,r23,r2
   848a4:	84001a04 	addi	r16,r16,104
   848a8:	94801a04 	addi	r18,r18,104
   848ac:	8cfff51e 	bne	r17,r19,84884 <rx_descriptor_end+0xfff84824>
   848b0:	a5000017 	ldw	r20,0(r20)
   848b4:	a03fed1e 	bne	r20,zero,8486c <rx_descriptor_end+0xfff8480c>
   848b8:	b805883a 	mov	r2,r23
   848bc:	dfc00817 	ldw	ra,32(sp)
   848c0:	ddc00717 	ldw	r23,28(sp)
   848c4:	dd800617 	ldw	r22,24(sp)
   848c8:	dd400517 	ldw	r21,20(sp)
   848cc:	dd000417 	ldw	r20,16(sp)
   848d0:	dcc00317 	ldw	r19,12(sp)
   848d4:	dc800217 	ldw	r18,8(sp)
   848d8:	dc400117 	ldw	r17,4(sp)
   848dc:	dc000017 	ldw	r16,0(sp)
   848e0:	dec00904 	addi	sp,sp,36
   848e4:	f800283a 	ret
   848e8:	002f883a 	mov	r23,zero
   848ec:	003ff206 	br	848b8 <rx_descriptor_end+0xfff84858>

000848f0 <_fwalk_reent>:
   848f0:	defff704 	addi	sp,sp,-36
   848f4:	dd000415 	stw	r20,16(sp)
   848f8:	dfc00815 	stw	ra,32(sp)
   848fc:	ddc00715 	stw	r23,28(sp)
   84900:	dd800615 	stw	r22,24(sp)
   84904:	dd400515 	stw	r21,20(sp)
   84908:	dcc00315 	stw	r19,12(sp)
   8490c:	dc800215 	stw	r18,8(sp)
   84910:	dc400115 	stw	r17,4(sp)
   84914:	dc000015 	stw	r16,0(sp)
   84918:	2500b804 	addi	r20,r4,736
   8491c:	a0002326 	beq	r20,zero,849ac <_fwalk_reent+0xbc>
   84920:	282b883a 	mov	r21,r5
   84924:	2027883a 	mov	r19,r4
   84928:	002f883a 	mov	r23,zero
   8492c:	05800044 	movi	r22,1
   84930:	04bfffc4 	movi	r18,-1
   84934:	a4400117 	ldw	r17,4(r20)
   84938:	a4000217 	ldw	r16,8(r20)
   8493c:	8c7fffc4 	addi	r17,r17,-1
   84940:	88000c16 	blt	r17,zero,84974 <_fwalk_reent+0x84>
   84944:	84000304 	addi	r16,r16,12
   84948:	8080000b 	ldhu	r2,0(r16)
   8494c:	8c7fffc4 	addi	r17,r17,-1
   84950:	817ffd04 	addi	r5,r16,-12
   84954:	b080052e 	bgeu	r22,r2,8496c <_fwalk_reent+0x7c>
   84958:	8080008f 	ldh	r2,2(r16)
   8495c:	9809883a 	mov	r4,r19
   84960:	14800226 	beq	r2,r18,8496c <_fwalk_reent+0x7c>
   84964:	a83ee83a 	callr	r21
   84968:	b8aeb03a 	or	r23,r23,r2
   8496c:	84001a04 	addi	r16,r16,104
   84970:	8cbff51e 	bne	r17,r18,84948 <rx_descriptor_end+0xfff848e8>
   84974:	a5000017 	ldw	r20,0(r20)
   84978:	a03fee1e 	bne	r20,zero,84934 <rx_descriptor_end+0xfff848d4>
   8497c:	b805883a 	mov	r2,r23
   84980:	dfc00817 	ldw	ra,32(sp)
   84984:	ddc00717 	ldw	r23,28(sp)
   84988:	dd800617 	ldw	r22,24(sp)
   8498c:	dd400517 	ldw	r21,20(sp)
   84990:	dd000417 	ldw	r20,16(sp)
   84994:	dcc00317 	ldw	r19,12(sp)
   84998:	dc800217 	ldw	r18,8(sp)
   8499c:	dc400117 	ldw	r17,4(sp)
   849a0:	dc000017 	ldw	r16,0(sp)
   849a4:	dec00904 	addi	sp,sp,36
   849a8:	f800283a 	ret
   849ac:	002f883a 	mov	r23,zero
   849b0:	003ff206 	br	8497c <rx_descriptor_end+0xfff8491c>

000849b4 <__smakebuf_r>:
   849b4:	2880030b 	ldhu	r2,12(r5)
   849b8:	10c0008c 	andi	r3,r2,2
   849bc:	1800411e 	bne	r3,zero,84ac4 <__smakebuf_r+0x110>
   849c0:	deffec04 	addi	sp,sp,-80
   849c4:	dc000f15 	stw	r16,60(sp)
   849c8:	2821883a 	mov	r16,r5
   849cc:	2940038f 	ldh	r5,14(r5)
   849d0:	dc401015 	stw	r17,64(sp)
   849d4:	dfc01315 	stw	ra,76(sp)
   849d8:	dcc01215 	stw	r19,72(sp)
   849dc:	dc801115 	stw	r18,68(sp)
   849e0:	2023883a 	mov	r17,r4
   849e4:	28001c16 	blt	r5,zero,84a58 <__smakebuf_r+0xa4>
   849e8:	d80d883a 	mov	r6,sp
   849ec:	00857ec0 	call	857ec <_fstat_r>
   849f0:	10001816 	blt	r2,zero,84a54 <__smakebuf_r+0xa0>
   849f4:	d8800117 	ldw	r2,4(sp)
   849f8:	00e00014 	movui	r3,32768
   849fc:	10bc000c 	andi	r2,r2,61440
   84a00:	14c80020 	cmpeqi	r19,r2,8192
   84a04:	10c03726 	beq	r2,r3,84ae4 <__smakebuf_r+0x130>
   84a08:	80c0030b 	ldhu	r3,12(r16)
   84a0c:	18c20014 	ori	r3,r3,2048
   84a10:	80c0030d 	sth	r3,12(r16)
   84a14:	00c80004 	movi	r3,8192
   84a18:	10c0521e 	bne	r2,r3,84b64 <__smakebuf_r+0x1b0>
   84a1c:	8140038f 	ldh	r5,14(r16)
   84a20:	8809883a 	mov	r4,r17
   84a24:	00858480 	call	85848 <_isatty_r>
   84a28:	10004c26 	beq	r2,zero,84b5c <__smakebuf_r+0x1a8>
   84a2c:	8080030b 	ldhu	r2,12(r16)
   84a30:	80c010c4 	addi	r3,r16,67
   84a34:	80c00015 	stw	r3,0(r16)
   84a38:	10800054 	ori	r2,r2,1
   84a3c:	8080030d 	sth	r2,12(r16)
   84a40:	00800044 	movi	r2,1
   84a44:	80c00415 	stw	r3,16(r16)
   84a48:	80800515 	stw	r2,20(r16)
   84a4c:	04810004 	movi	r18,1024
   84a50:	00000706 	br	84a70 <__smakebuf_r+0xbc>
   84a54:	8080030b 	ldhu	r2,12(r16)
   84a58:	10c0200c 	andi	r3,r2,128
   84a5c:	18001f1e 	bne	r3,zero,84adc <__smakebuf_r+0x128>
   84a60:	04810004 	movi	r18,1024
   84a64:	10820014 	ori	r2,r2,2048
   84a68:	8080030d 	sth	r2,12(r16)
   84a6c:	0027883a 	mov	r19,zero
   84a70:	900b883a 	mov	r5,r18
   84a74:	8809883a 	mov	r4,r17
   84a78:	0084b700 	call	84b70 <_malloc_r>
   84a7c:	10002c26 	beq	r2,zero,84b30 <__smakebuf_r+0x17c>
   84a80:	80c0030b 	ldhu	r3,12(r16)
   84a84:	01000234 	movhi	r4,8
   84a88:	21101804 	addi	r4,r4,16480
   84a8c:	89000f15 	stw	r4,60(r17)
   84a90:	18c02014 	ori	r3,r3,128
   84a94:	80c0030d 	sth	r3,12(r16)
   84a98:	80800015 	stw	r2,0(r16)
   84a9c:	80800415 	stw	r2,16(r16)
   84aa0:	84800515 	stw	r18,20(r16)
   84aa4:	98001a1e 	bne	r19,zero,84b10 <__smakebuf_r+0x15c>
   84aa8:	dfc01317 	ldw	ra,76(sp)
   84aac:	dcc01217 	ldw	r19,72(sp)
   84ab0:	dc801117 	ldw	r18,68(sp)
   84ab4:	dc401017 	ldw	r17,64(sp)
   84ab8:	dc000f17 	ldw	r16,60(sp)
   84abc:	dec01404 	addi	sp,sp,80
   84ac0:	f800283a 	ret
   84ac4:	288010c4 	addi	r2,r5,67
   84ac8:	28800015 	stw	r2,0(r5)
   84acc:	28800415 	stw	r2,16(r5)
   84ad0:	00800044 	movi	r2,1
   84ad4:	28800515 	stw	r2,20(r5)
   84ad8:	f800283a 	ret
   84adc:	04801004 	movi	r18,64
   84ae0:	003fe006 	br	84a64 <rx_descriptor_end+0xfff84a04>
   84ae4:	81000a17 	ldw	r4,40(r16)
   84ae8:	00c00234 	movhi	r3,8
   84aec:	18d57404 	addi	r3,r3,21968
   84af0:	20ffc51e 	bne	r4,r3,84a08 <rx_descriptor_end+0xfff849a8>
   84af4:	8080030b 	ldhu	r2,12(r16)
   84af8:	04810004 	movi	r18,1024
   84afc:	84801315 	stw	r18,76(r16)
   84b00:	1484b03a 	or	r2,r2,r18
   84b04:	8080030d 	sth	r2,12(r16)
   84b08:	0027883a 	mov	r19,zero
   84b0c:	003fd806 	br	84a70 <rx_descriptor_end+0xfff84a10>
   84b10:	8140038f 	ldh	r5,14(r16)
   84b14:	8809883a 	mov	r4,r17
   84b18:	00858480 	call	85848 <_isatty_r>
   84b1c:	103fe226 	beq	r2,zero,84aa8 <rx_descriptor_end+0xfff84a48>
   84b20:	8080030b 	ldhu	r2,12(r16)
   84b24:	10800054 	ori	r2,r2,1
   84b28:	8080030d 	sth	r2,12(r16)
   84b2c:	003fde06 	br	84aa8 <rx_descriptor_end+0xfff84a48>
   84b30:	8080030b 	ldhu	r2,12(r16)
   84b34:	10c0800c 	andi	r3,r2,512
   84b38:	183fdb1e 	bne	r3,zero,84aa8 <rx_descriptor_end+0xfff84a48>
   84b3c:	10800094 	ori	r2,r2,2
   84b40:	80c010c4 	addi	r3,r16,67
   84b44:	8080030d 	sth	r2,12(r16)
   84b48:	00800044 	movi	r2,1
   84b4c:	80c00015 	stw	r3,0(r16)
   84b50:	80c00415 	stw	r3,16(r16)
   84b54:	80800515 	stw	r2,20(r16)
   84b58:	003fd306 	br	84aa8 <rx_descriptor_end+0xfff84a48>
   84b5c:	04810004 	movi	r18,1024
   84b60:	003fc306 	br	84a70 <rx_descriptor_end+0xfff84a10>
   84b64:	0027883a 	mov	r19,zero
   84b68:	04810004 	movi	r18,1024
   84b6c:	003fc006 	br	84a70 <rx_descriptor_end+0xfff84a10>

00084b70 <_malloc_r>:
   84b70:	defff504 	addi	sp,sp,-44
   84b74:	dc800315 	stw	r18,12(sp)
   84b78:	dfc00a15 	stw	ra,40(sp)
   84b7c:	df000915 	stw	fp,36(sp)
   84b80:	ddc00815 	stw	r23,32(sp)
   84b84:	dd800715 	stw	r22,28(sp)
   84b88:	dd400615 	stw	r21,24(sp)
   84b8c:	dd000515 	stw	r20,20(sp)
   84b90:	dcc00415 	stw	r19,16(sp)
   84b94:	dc400215 	stw	r17,8(sp)
   84b98:	dc000115 	stw	r16,4(sp)
   84b9c:	288002c4 	addi	r2,r5,11
   84ba0:	00c00584 	movi	r3,22
   84ba4:	2025883a 	mov	r18,r4
   84ba8:	18807f2e 	bgeu	r3,r2,84da8 <_malloc_r+0x238>
   84bac:	047ffe04 	movi	r17,-8
   84bb0:	1462703a 	and	r17,r2,r17
   84bb4:	8800a316 	blt	r17,zero,84e44 <_malloc_r+0x2d4>
   84bb8:	8940a236 	bltu	r17,r5,84e44 <_malloc_r+0x2d4>
   84bbc:	0085c6c0 	call	85c6c <__malloc_lock>
   84bc0:	00807dc4 	movi	r2,503
   84bc4:	1441e92e 	bgeu	r2,r17,8536c <_malloc_r+0x7fc>
   84bc8:	8804d27a 	srli	r2,r17,9
   84bcc:	1000a126 	beq	r2,zero,84e54 <_malloc_r+0x2e4>
   84bd0:	00c00104 	movi	r3,4
   84bd4:	18811e36 	bltu	r3,r2,85050 <_malloc_r+0x4e0>
   84bd8:	8804d1ba 	srli	r2,r17,6
   84bdc:	12000e44 	addi	r8,r2,57
   84be0:	11c00e04 	addi	r7,r2,56
   84be4:	4209883a 	add	r4,r8,r8
   84be8:	04c00234 	movhi	r19,8
   84bec:	2109883a 	add	r4,r4,r4
   84bf0:	9cdf6504 	addi	r19,r19,32148
   84bf4:	2109883a 	add	r4,r4,r4
   84bf8:	9909883a 	add	r4,r19,r4
   84bfc:	24000117 	ldw	r16,4(r4)
   84c00:	213ffe04 	addi	r4,r4,-8
   84c04:	24009726 	beq	r4,r16,84e64 <_malloc_r+0x2f4>
   84c08:	80800117 	ldw	r2,4(r16)
   84c0c:	01bfff04 	movi	r6,-4
   84c10:	014003c4 	movi	r5,15
   84c14:	1184703a 	and	r2,r2,r6
   84c18:	1447c83a 	sub	r3,r2,r17
   84c1c:	28c00716 	blt	r5,r3,84c3c <_malloc_r+0xcc>
   84c20:	1800920e 	bge	r3,zero,84e6c <_malloc_r+0x2fc>
   84c24:	84000317 	ldw	r16,12(r16)
   84c28:	24008e26 	beq	r4,r16,84e64 <_malloc_r+0x2f4>
   84c2c:	80800117 	ldw	r2,4(r16)
   84c30:	1184703a 	and	r2,r2,r6
   84c34:	1447c83a 	sub	r3,r2,r17
   84c38:	28fff90e 	bge	r5,r3,84c20 <rx_descriptor_end+0xfff84bc0>
   84c3c:	3809883a 	mov	r4,r7
   84c40:	01800234 	movhi	r6,8
   84c44:	9c000417 	ldw	r16,16(r19)
   84c48:	319f6504 	addi	r6,r6,32148
   84c4c:	32000204 	addi	r8,r6,8
   84c50:	82013426 	beq	r16,r8,85124 <_malloc_r+0x5b4>
   84c54:	80c00117 	ldw	r3,4(r16)
   84c58:	00bfff04 	movi	r2,-4
   84c5c:	188e703a 	and	r7,r3,r2
   84c60:	3c45c83a 	sub	r2,r7,r17
   84c64:	00c003c4 	movi	r3,15
   84c68:	18811f16 	blt	r3,r2,850e8 <_malloc_r+0x578>
   84c6c:	32000515 	stw	r8,20(r6)
   84c70:	32000415 	stw	r8,16(r6)
   84c74:	10007f0e 	bge	r2,zero,84e74 <_malloc_r+0x304>
   84c78:	00807fc4 	movi	r2,511
   84c7c:	11c0fd36 	bltu	r2,r7,85074 <_malloc_r+0x504>
   84c80:	3806d0fa 	srli	r3,r7,3
   84c84:	01c00044 	movi	r7,1
   84c88:	30800117 	ldw	r2,4(r6)
   84c8c:	19400044 	addi	r5,r3,1
   84c90:	294b883a 	add	r5,r5,r5
   84c94:	1807d0ba 	srai	r3,r3,2
   84c98:	294b883a 	add	r5,r5,r5
   84c9c:	294b883a 	add	r5,r5,r5
   84ca0:	298b883a 	add	r5,r5,r6
   84ca4:	38c6983a 	sll	r3,r7,r3
   84ca8:	29c00017 	ldw	r7,0(r5)
   84cac:	2a7ffe04 	addi	r9,r5,-8
   84cb0:	1886b03a 	or	r3,r3,r2
   84cb4:	82400315 	stw	r9,12(r16)
   84cb8:	81c00215 	stw	r7,8(r16)
   84cbc:	30c00115 	stw	r3,4(r6)
   84cc0:	2c000015 	stw	r16,0(r5)
   84cc4:	3c000315 	stw	r16,12(r7)
   84cc8:	2005d0ba 	srai	r2,r4,2
   84ccc:	01400044 	movi	r5,1
   84cd0:	288a983a 	sll	r5,r5,r2
   84cd4:	19406f36 	bltu	r3,r5,84e94 <_malloc_r+0x324>
   84cd8:	28c4703a 	and	r2,r5,r3
   84cdc:	10000a1e 	bne	r2,zero,84d08 <_malloc_r+0x198>
   84ce0:	00bfff04 	movi	r2,-4
   84ce4:	294b883a 	add	r5,r5,r5
   84ce8:	2088703a 	and	r4,r4,r2
   84cec:	28c4703a 	and	r2,r5,r3
   84cf0:	21000104 	addi	r4,r4,4
   84cf4:	1000041e 	bne	r2,zero,84d08 <_malloc_r+0x198>
   84cf8:	294b883a 	add	r5,r5,r5
   84cfc:	28c4703a 	and	r2,r5,r3
   84d00:	21000104 	addi	r4,r4,4
   84d04:	103ffc26 	beq	r2,zero,84cf8 <rx_descriptor_end+0xfff84c98>
   84d08:	02bfff04 	movi	r10,-4
   84d0c:	024003c4 	movi	r9,15
   84d10:	21800044 	addi	r6,r4,1
   84d14:	318d883a 	add	r6,r6,r6
   84d18:	318d883a 	add	r6,r6,r6
   84d1c:	318d883a 	add	r6,r6,r6
   84d20:	998d883a 	add	r6,r19,r6
   84d24:	333ffe04 	addi	r12,r6,-8
   84d28:	2017883a 	mov	r11,r4
   84d2c:	31800104 	addi	r6,r6,4
   84d30:	34000017 	ldw	r16,0(r6)
   84d34:	31fffd04 	addi	r7,r6,-12
   84d38:	81c0041e 	bne	r16,r7,84d4c <_malloc_r+0x1dc>
   84d3c:	0000fb06 	br	8512c <_malloc_r+0x5bc>
   84d40:	1801030e 	bge	r3,zero,85150 <_malloc_r+0x5e0>
   84d44:	84000317 	ldw	r16,12(r16)
   84d48:	81c0f826 	beq	r16,r7,8512c <_malloc_r+0x5bc>
   84d4c:	80800117 	ldw	r2,4(r16)
   84d50:	1284703a 	and	r2,r2,r10
   84d54:	1447c83a 	sub	r3,r2,r17
   84d58:	48fff90e 	bge	r9,r3,84d40 <rx_descriptor_end+0xfff84ce0>
   84d5c:	80800317 	ldw	r2,12(r16)
   84d60:	81000217 	ldw	r4,8(r16)
   84d64:	89400054 	ori	r5,r17,1
   84d68:	81400115 	stw	r5,4(r16)
   84d6c:	20800315 	stw	r2,12(r4)
   84d70:	11000215 	stw	r4,8(r2)
   84d74:	8463883a 	add	r17,r16,r17
   84d78:	9c400515 	stw	r17,20(r19)
   84d7c:	9c400415 	stw	r17,16(r19)
   84d80:	18800054 	ori	r2,r3,1
   84d84:	88800115 	stw	r2,4(r17)
   84d88:	8a000315 	stw	r8,12(r17)
   84d8c:	8a000215 	stw	r8,8(r17)
   84d90:	88e3883a 	add	r17,r17,r3
   84d94:	88c00015 	stw	r3,0(r17)
   84d98:	9009883a 	mov	r4,r18
   84d9c:	0085c900 	call	85c90 <__malloc_unlock>
   84da0:	80800204 	addi	r2,r16,8
   84da4:	00001b06 	br	84e14 <_malloc_r+0x2a4>
   84da8:	04400404 	movi	r17,16
   84dac:	89402536 	bltu	r17,r5,84e44 <_malloc_r+0x2d4>
   84db0:	0085c6c0 	call	85c6c <__malloc_lock>
   84db4:	00800184 	movi	r2,6
   84db8:	01000084 	movi	r4,2
   84dbc:	04c00234 	movhi	r19,8
   84dc0:	1085883a 	add	r2,r2,r2
   84dc4:	9cdf6504 	addi	r19,r19,32148
   84dc8:	1085883a 	add	r2,r2,r2
   84dcc:	9885883a 	add	r2,r19,r2
   84dd0:	14000117 	ldw	r16,4(r2)
   84dd4:	10fffe04 	addi	r3,r2,-8
   84dd8:	80c0d926 	beq	r16,r3,85140 <_malloc_r+0x5d0>
   84ddc:	80c00117 	ldw	r3,4(r16)
   84de0:	81000317 	ldw	r4,12(r16)
   84de4:	00bfff04 	movi	r2,-4
   84de8:	1884703a 	and	r2,r3,r2
   84dec:	81400217 	ldw	r5,8(r16)
   84df0:	8085883a 	add	r2,r16,r2
   84df4:	10c00117 	ldw	r3,4(r2)
   84df8:	29000315 	stw	r4,12(r5)
   84dfc:	21400215 	stw	r5,8(r4)
   84e00:	18c00054 	ori	r3,r3,1
   84e04:	10c00115 	stw	r3,4(r2)
   84e08:	9009883a 	mov	r4,r18
   84e0c:	0085c900 	call	85c90 <__malloc_unlock>
   84e10:	80800204 	addi	r2,r16,8
   84e14:	dfc00a17 	ldw	ra,40(sp)
   84e18:	df000917 	ldw	fp,36(sp)
   84e1c:	ddc00817 	ldw	r23,32(sp)
   84e20:	dd800717 	ldw	r22,28(sp)
   84e24:	dd400617 	ldw	r21,24(sp)
   84e28:	dd000517 	ldw	r20,20(sp)
   84e2c:	dcc00417 	ldw	r19,16(sp)
   84e30:	dc800317 	ldw	r18,12(sp)
   84e34:	dc400217 	ldw	r17,8(sp)
   84e38:	dc000117 	ldw	r16,4(sp)
   84e3c:	dec00b04 	addi	sp,sp,44
   84e40:	f800283a 	ret
   84e44:	00800304 	movi	r2,12
   84e48:	90800015 	stw	r2,0(r18)
   84e4c:	0005883a 	mov	r2,zero
   84e50:	003ff006 	br	84e14 <rx_descriptor_end+0xfff84db4>
   84e54:	01002004 	movi	r4,128
   84e58:	02001004 	movi	r8,64
   84e5c:	01c00fc4 	movi	r7,63
   84e60:	003f6106 	br	84be8 <rx_descriptor_end+0xfff84b88>
   84e64:	4009883a 	mov	r4,r8
   84e68:	003f7506 	br	84c40 <rx_descriptor_end+0xfff84be0>
   84e6c:	81000317 	ldw	r4,12(r16)
   84e70:	003fde06 	br	84dec <rx_descriptor_end+0xfff84d8c>
   84e74:	81c5883a 	add	r2,r16,r7
   84e78:	11400117 	ldw	r5,4(r2)
   84e7c:	9009883a 	mov	r4,r18
   84e80:	29400054 	ori	r5,r5,1
   84e84:	11400115 	stw	r5,4(r2)
   84e88:	0085c900 	call	85c90 <__malloc_unlock>
   84e8c:	80800204 	addi	r2,r16,8
   84e90:	003fe006 	br	84e14 <rx_descriptor_end+0xfff84db4>
   84e94:	9c000217 	ldw	r16,8(r19)
   84e98:	00bfff04 	movi	r2,-4
   84e9c:	85800117 	ldw	r22,4(r16)
   84ea0:	b0ac703a 	and	r22,r22,r2
   84ea4:	b4400336 	bltu	r22,r17,84eb4 <_malloc_r+0x344>
   84ea8:	b445c83a 	sub	r2,r22,r17
   84eac:	00c003c4 	movi	r3,15
   84eb0:	18805d16 	blt	r3,r2,85028 <_malloc_r+0x4b8>
   84eb4:	05c00274 	movhi	r23,9
   84eb8:	00800274 	movhi	r2,9
   84ebc:	10a8b504 	addi	r2,r2,-23852
   84ec0:	bde07404 	addi	r23,r23,-32304
   84ec4:	15400017 	ldw	r21,0(r2)
   84ec8:	b8c00017 	ldw	r3,0(r23)
   84ecc:	00bfffc4 	movi	r2,-1
   84ed0:	858d883a 	add	r6,r16,r22
   84ed4:	8d6b883a 	add	r21,r17,r21
   84ed8:	1880ea26 	beq	r3,r2,85284 <_malloc_r+0x714>
   84edc:	ad4403c4 	addi	r21,r21,4111
   84ee0:	00bc0004 	movi	r2,-4096
   84ee4:	a8aa703a 	and	r21,r21,r2
   84ee8:	a80b883a 	mov	r5,r21
   84eec:	9009883a 	mov	r4,r18
   84ef0:	d9800015 	stw	r6,0(sp)
   84ef4:	00854a40 	call	854a4 <_sbrk_r>
   84ef8:	1029883a 	mov	r20,r2
   84efc:	00bfffc4 	movi	r2,-1
   84f00:	d9800017 	ldw	r6,0(sp)
   84f04:	a080e826 	beq	r20,r2,852a8 <_malloc_r+0x738>
   84f08:	a180a636 	bltu	r20,r6,851a4 <_malloc_r+0x634>
   84f0c:	07000274 	movhi	fp,9
   84f10:	e72a3204 	addi	fp,fp,-22328
   84f14:	e0800017 	ldw	r2,0(fp)
   84f18:	a887883a 	add	r3,r21,r2
   84f1c:	e0c00015 	stw	r3,0(fp)
   84f20:	3500e626 	beq	r6,r20,852bc <_malloc_r+0x74c>
   84f24:	b9000017 	ldw	r4,0(r23)
   84f28:	00bfffc4 	movi	r2,-1
   84f2c:	2080ee26 	beq	r4,r2,852e8 <_malloc_r+0x778>
   84f30:	a185c83a 	sub	r2,r20,r6
   84f34:	10c5883a 	add	r2,r2,r3
   84f38:	e0800015 	stw	r2,0(fp)
   84f3c:	a0c001cc 	andi	r3,r20,7
   84f40:	1800bc26 	beq	r3,zero,85234 <_malloc_r+0x6c4>
   84f44:	a0e9c83a 	sub	r20,r20,r3
   84f48:	00840204 	movi	r2,4104
   84f4c:	a5000204 	addi	r20,r20,8
   84f50:	10c7c83a 	sub	r3,r2,r3
   84f54:	a545883a 	add	r2,r20,r21
   84f58:	1083ffcc 	andi	r2,r2,4095
   84f5c:	18abc83a 	sub	r21,r3,r2
   84f60:	a80b883a 	mov	r5,r21
   84f64:	9009883a 	mov	r4,r18
   84f68:	00854a40 	call	854a4 <_sbrk_r>
   84f6c:	00ffffc4 	movi	r3,-1
   84f70:	10c0e126 	beq	r2,r3,852f8 <_malloc_r+0x788>
   84f74:	1505c83a 	sub	r2,r2,r20
   84f78:	1545883a 	add	r2,r2,r21
   84f7c:	10800054 	ori	r2,r2,1
   84f80:	e0c00017 	ldw	r3,0(fp)
   84f84:	9d000215 	stw	r20,8(r19)
   84f88:	a0800115 	stw	r2,4(r20)
   84f8c:	a8c7883a 	add	r3,r21,r3
   84f90:	e0c00015 	stw	r3,0(fp)
   84f94:	84c00e26 	beq	r16,r19,84fd0 <_malloc_r+0x460>
   84f98:	018003c4 	movi	r6,15
   84f9c:	3580a72e 	bgeu	r6,r22,8523c <_malloc_r+0x6cc>
   84fa0:	81400117 	ldw	r5,4(r16)
   84fa4:	013ffe04 	movi	r4,-8
   84fa8:	b0bffd04 	addi	r2,r22,-12
   84fac:	1104703a 	and	r2,r2,r4
   84fb0:	2900004c 	andi	r4,r5,1
   84fb4:	2088b03a 	or	r4,r4,r2
   84fb8:	81000115 	stw	r4,4(r16)
   84fbc:	01400144 	movi	r5,5
   84fc0:	8089883a 	add	r4,r16,r2
   84fc4:	21400115 	stw	r5,4(r4)
   84fc8:	21400215 	stw	r5,8(r4)
   84fcc:	3080cd36 	bltu	r6,r2,85304 <_malloc_r+0x794>
   84fd0:	00800274 	movhi	r2,9
   84fd4:	10a8b404 	addi	r2,r2,-23856
   84fd8:	11000017 	ldw	r4,0(r2)
   84fdc:	20c0012e 	bgeu	r4,r3,84fe4 <_malloc_r+0x474>
   84fe0:	10c00015 	stw	r3,0(r2)
   84fe4:	00800274 	movhi	r2,9
   84fe8:	10a8b304 	addi	r2,r2,-23860
   84fec:	11000017 	ldw	r4,0(r2)
   84ff0:	9c000217 	ldw	r16,8(r19)
   84ff4:	20c0012e 	bgeu	r4,r3,84ffc <_malloc_r+0x48c>
   84ff8:	10c00015 	stw	r3,0(r2)
   84ffc:	80c00117 	ldw	r3,4(r16)
   85000:	00bfff04 	movi	r2,-4
   85004:	1886703a 	and	r3,r3,r2
   85008:	1c45c83a 	sub	r2,r3,r17
   8500c:	1c400236 	bltu	r3,r17,85018 <_malloc_r+0x4a8>
   85010:	00c003c4 	movi	r3,15
   85014:	18800416 	blt	r3,r2,85028 <_malloc_r+0x4b8>
   85018:	9009883a 	mov	r4,r18
   8501c:	0085c900 	call	85c90 <__malloc_unlock>
   85020:	0005883a 	mov	r2,zero
   85024:	003f7b06 	br	84e14 <rx_descriptor_end+0xfff84db4>
   85028:	88c00054 	ori	r3,r17,1
   8502c:	80c00115 	stw	r3,4(r16)
   85030:	8463883a 	add	r17,r16,r17
   85034:	10800054 	ori	r2,r2,1
   85038:	9c400215 	stw	r17,8(r19)
   8503c:	88800115 	stw	r2,4(r17)
   85040:	9009883a 	mov	r4,r18
   85044:	0085c900 	call	85c90 <__malloc_unlock>
   85048:	80800204 	addi	r2,r16,8
   8504c:	003f7106 	br	84e14 <rx_descriptor_end+0xfff84db4>
   85050:	00c00504 	movi	r3,20
   85054:	18804a2e 	bgeu	r3,r2,85180 <_malloc_r+0x610>
   85058:	00c01504 	movi	r3,84
   8505c:	18806e36 	bltu	r3,r2,85218 <_malloc_r+0x6a8>
   85060:	8804d33a 	srli	r2,r17,12
   85064:	12001bc4 	addi	r8,r2,111
   85068:	11c01b84 	addi	r7,r2,110
   8506c:	4209883a 	add	r4,r8,r8
   85070:	003edd06 	br	84be8 <rx_descriptor_end+0xfff84b88>
   85074:	3804d27a 	srli	r2,r7,9
   85078:	00c00104 	movi	r3,4
   8507c:	1880442e 	bgeu	r3,r2,85190 <_malloc_r+0x620>
   85080:	00c00504 	movi	r3,20
   85084:	18808136 	bltu	r3,r2,8528c <_malloc_r+0x71c>
   85088:	11401704 	addi	r5,r2,92
   8508c:	10c016c4 	addi	r3,r2,91
   85090:	294b883a 	add	r5,r5,r5
   85094:	294b883a 	add	r5,r5,r5
   85098:	294b883a 	add	r5,r5,r5
   8509c:	994b883a 	add	r5,r19,r5
   850a0:	28800017 	ldw	r2,0(r5)
   850a4:	01800234 	movhi	r6,8
   850a8:	297ffe04 	addi	r5,r5,-8
   850ac:	319f6504 	addi	r6,r6,32148
   850b0:	28806526 	beq	r5,r2,85248 <_malloc_r+0x6d8>
   850b4:	01bfff04 	movi	r6,-4
   850b8:	10c00117 	ldw	r3,4(r2)
   850bc:	1986703a 	and	r3,r3,r6
   850c0:	38c0022e 	bgeu	r7,r3,850cc <_malloc_r+0x55c>
   850c4:	10800217 	ldw	r2,8(r2)
   850c8:	28bffb1e 	bne	r5,r2,850b8 <rx_descriptor_end+0xfff85058>
   850cc:	11400317 	ldw	r5,12(r2)
   850d0:	98c00117 	ldw	r3,4(r19)
   850d4:	81400315 	stw	r5,12(r16)
   850d8:	80800215 	stw	r2,8(r16)
   850dc:	2c000215 	stw	r16,8(r5)
   850e0:	14000315 	stw	r16,12(r2)
   850e4:	003ef806 	br	84cc8 <rx_descriptor_end+0xfff84c68>
   850e8:	88c00054 	ori	r3,r17,1
   850ec:	80c00115 	stw	r3,4(r16)
   850f0:	8463883a 	add	r17,r16,r17
   850f4:	34400515 	stw	r17,20(r6)
   850f8:	34400415 	stw	r17,16(r6)
   850fc:	10c00054 	ori	r3,r2,1
   85100:	8a000315 	stw	r8,12(r17)
   85104:	8a000215 	stw	r8,8(r17)
   85108:	88c00115 	stw	r3,4(r17)
   8510c:	88a3883a 	add	r17,r17,r2
   85110:	88800015 	stw	r2,0(r17)
   85114:	9009883a 	mov	r4,r18
   85118:	0085c900 	call	85c90 <__malloc_unlock>
   8511c:	80800204 	addi	r2,r16,8
   85120:	003f3c06 	br	84e14 <rx_descriptor_end+0xfff84db4>
   85124:	30c00117 	ldw	r3,4(r6)
   85128:	003ee706 	br	84cc8 <rx_descriptor_end+0xfff84c68>
   8512c:	5ac00044 	addi	r11,r11,1
   85130:	588000cc 	andi	r2,r11,3
   85134:	31800204 	addi	r6,r6,8
   85138:	103efd1e 	bne	r2,zero,84d30 <rx_descriptor_end+0xfff84cd0>
   8513c:	00002406 	br	851d0 <_malloc_r+0x660>
   85140:	14000317 	ldw	r16,12(r2)
   85144:	143f251e 	bne	r2,r16,84ddc <rx_descriptor_end+0xfff84d7c>
   85148:	21000084 	addi	r4,r4,2
   8514c:	003ebc06 	br	84c40 <rx_descriptor_end+0xfff84be0>
   85150:	8085883a 	add	r2,r16,r2
   85154:	10c00117 	ldw	r3,4(r2)
   85158:	81000317 	ldw	r4,12(r16)
   8515c:	81400217 	ldw	r5,8(r16)
   85160:	18c00054 	ori	r3,r3,1
   85164:	10c00115 	stw	r3,4(r2)
   85168:	29000315 	stw	r4,12(r5)
   8516c:	21400215 	stw	r5,8(r4)
   85170:	9009883a 	mov	r4,r18
   85174:	0085c900 	call	85c90 <__malloc_unlock>
   85178:	80800204 	addi	r2,r16,8
   8517c:	003f2506 	br	84e14 <rx_descriptor_end+0xfff84db4>
   85180:	12001704 	addi	r8,r2,92
   85184:	11c016c4 	addi	r7,r2,91
   85188:	4209883a 	add	r4,r8,r8
   8518c:	003e9606 	br	84be8 <rx_descriptor_end+0xfff84b88>
   85190:	3804d1ba 	srli	r2,r7,6
   85194:	11400e44 	addi	r5,r2,57
   85198:	10c00e04 	addi	r3,r2,56
   8519c:	294b883a 	add	r5,r5,r5
   851a0:	003fbc06 	br	85094 <rx_descriptor_end+0xfff85034>
   851a4:	84ff5926 	beq	r16,r19,84f0c <rx_descriptor_end+0xfff84eac>
   851a8:	00800234 	movhi	r2,8
   851ac:	109f6504 	addi	r2,r2,32148
   851b0:	14000217 	ldw	r16,8(r2)
   851b4:	00bfff04 	movi	r2,-4
   851b8:	80c00117 	ldw	r3,4(r16)
   851bc:	1886703a 	and	r3,r3,r2
   851c0:	003f9106 	br	85008 <rx_descriptor_end+0xfff84fa8>
   851c4:	60800217 	ldw	r2,8(r12)
   851c8:	213fffc4 	addi	r4,r4,-1
   851cc:	1300651e 	bne	r2,r12,85364 <_malloc_r+0x7f4>
   851d0:	208000cc 	andi	r2,r4,3
   851d4:	633ffe04 	addi	r12,r12,-8
   851d8:	103ffa1e 	bne	r2,zero,851c4 <rx_descriptor_end+0xfff85164>
   851dc:	98800117 	ldw	r2,4(r19)
   851e0:	0146303a 	nor	r3,zero,r5
   851e4:	1884703a 	and	r2,r3,r2
   851e8:	98800115 	stw	r2,4(r19)
   851ec:	294b883a 	add	r5,r5,r5
   851f0:	117f2836 	bltu	r2,r5,84e94 <rx_descriptor_end+0xfff84e34>
   851f4:	283f2726 	beq	r5,zero,84e94 <rx_descriptor_end+0xfff84e34>
   851f8:	2886703a 	and	r3,r5,r2
   851fc:	5809883a 	mov	r4,r11
   85200:	183ec31e 	bne	r3,zero,84d10 <rx_descriptor_end+0xfff84cb0>
   85204:	294b883a 	add	r5,r5,r5
   85208:	2886703a 	and	r3,r5,r2
   8520c:	21000104 	addi	r4,r4,4
   85210:	183ffc26 	beq	r3,zero,85204 <rx_descriptor_end+0xfff851a4>
   85214:	003ebe06 	br	84d10 <rx_descriptor_end+0xfff84cb0>
   85218:	00c05504 	movi	r3,340
   8521c:	18801236 	bltu	r3,r2,85268 <_malloc_r+0x6f8>
   85220:	8804d3fa 	srli	r2,r17,15
   85224:	12001e04 	addi	r8,r2,120
   85228:	11c01dc4 	addi	r7,r2,119
   8522c:	4209883a 	add	r4,r8,r8
   85230:	003e6d06 	br	84be8 <rx_descriptor_end+0xfff84b88>
   85234:	00c40004 	movi	r3,4096
   85238:	003f4606 	br	84f54 <rx_descriptor_end+0xfff84ef4>
   8523c:	00800044 	movi	r2,1
   85240:	a0800115 	stw	r2,4(r20)
   85244:	003f7406 	br	85018 <rx_descriptor_end+0xfff84fb8>
   85248:	1805d0ba 	srai	r2,r3,2
   8524c:	01c00044 	movi	r7,1
   85250:	30c00117 	ldw	r3,4(r6)
   85254:	388e983a 	sll	r7,r7,r2
   85258:	2805883a 	mov	r2,r5
   8525c:	38c6b03a 	or	r3,r7,r3
   85260:	30c00115 	stw	r3,4(r6)
   85264:	003f9b06 	br	850d4 <rx_descriptor_end+0xfff85074>
   85268:	00c15504 	movi	r3,1364
   8526c:	18801a36 	bltu	r3,r2,852d8 <_malloc_r+0x768>
   85270:	8804d4ba 	srli	r2,r17,18
   85274:	12001f44 	addi	r8,r2,125
   85278:	11c01f04 	addi	r7,r2,124
   8527c:	4209883a 	add	r4,r8,r8
   85280:	003e5906 	br	84be8 <rx_descriptor_end+0xfff84b88>
   85284:	ad400404 	addi	r21,r21,16
   85288:	003f1706 	br	84ee8 <rx_descriptor_end+0xfff84e88>
   8528c:	00c01504 	movi	r3,84
   85290:	18802336 	bltu	r3,r2,85320 <_malloc_r+0x7b0>
   85294:	3804d33a 	srli	r2,r7,12
   85298:	11401bc4 	addi	r5,r2,111
   8529c:	10c01b84 	addi	r3,r2,110
   852a0:	294b883a 	add	r5,r5,r5
   852a4:	003f7b06 	br	85094 <rx_descriptor_end+0xfff85034>
   852a8:	9c000217 	ldw	r16,8(r19)
   852ac:	00bfff04 	movi	r2,-4
   852b0:	80c00117 	ldw	r3,4(r16)
   852b4:	1886703a 	and	r3,r3,r2
   852b8:	003f5306 	br	85008 <rx_descriptor_end+0xfff84fa8>
   852bc:	3083ffcc 	andi	r2,r6,4095
   852c0:	103f181e 	bne	r2,zero,84f24 <rx_descriptor_end+0xfff84ec4>
   852c4:	99000217 	ldw	r4,8(r19)
   852c8:	b545883a 	add	r2,r22,r21
   852cc:	10800054 	ori	r2,r2,1
   852d0:	20800115 	stw	r2,4(r4)
   852d4:	003f3e06 	br	84fd0 <rx_descriptor_end+0xfff84f70>
   852d8:	01003f84 	movi	r4,254
   852dc:	02001fc4 	movi	r8,127
   852e0:	01c01f84 	movi	r7,126
   852e4:	003e4006 	br	84be8 <rx_descriptor_end+0xfff84b88>
   852e8:	00800274 	movhi	r2,9
   852ec:	10a07404 	addi	r2,r2,-32304
   852f0:	15000015 	stw	r20,0(r2)
   852f4:	003f1106 	br	84f3c <rx_descriptor_end+0xfff84edc>
   852f8:	00800044 	movi	r2,1
   852fc:	002b883a 	mov	r21,zero
   85300:	003f1f06 	br	84f80 <rx_descriptor_end+0xfff84f20>
   85304:	81400204 	addi	r5,r16,8
   85308:	9009883a 	mov	r4,r18
   8530c:	008451c0 	call	8451c <_free_r>
   85310:	00800274 	movhi	r2,9
   85314:	10aa3204 	addi	r2,r2,-22328
   85318:	10c00017 	ldw	r3,0(r2)
   8531c:	003f2c06 	br	84fd0 <rx_descriptor_end+0xfff84f70>
   85320:	00c05504 	movi	r3,340
   85324:	18800536 	bltu	r3,r2,8533c <_malloc_r+0x7cc>
   85328:	3804d3fa 	srli	r2,r7,15
   8532c:	11401e04 	addi	r5,r2,120
   85330:	10c01dc4 	addi	r3,r2,119
   85334:	294b883a 	add	r5,r5,r5
   85338:	003f5606 	br	85094 <rx_descriptor_end+0xfff85034>
   8533c:	00c15504 	movi	r3,1364
   85340:	18800536 	bltu	r3,r2,85358 <_malloc_r+0x7e8>
   85344:	3804d4ba 	srli	r2,r7,18
   85348:	11401f44 	addi	r5,r2,125
   8534c:	10c01f04 	addi	r3,r2,124
   85350:	294b883a 	add	r5,r5,r5
   85354:	003f4f06 	br	85094 <rx_descriptor_end+0xfff85034>
   85358:	01403f84 	movi	r5,254
   8535c:	00c01f84 	movi	r3,126
   85360:	003f4c06 	br	85094 <rx_descriptor_end+0xfff85034>
   85364:	98800117 	ldw	r2,4(r19)
   85368:	003fa006 	br	851ec <rx_descriptor_end+0xfff8518c>
   8536c:	8808d0fa 	srli	r4,r17,3
   85370:	20800044 	addi	r2,r4,1
   85374:	1085883a 	add	r2,r2,r2
   85378:	003e9006 	br	84dbc <rx_descriptor_end+0xfff84d5c>

0008537c <memset>:
   8537c:	20c000cc 	andi	r3,r4,3
   85380:	2005883a 	mov	r2,r4
   85384:	18004426 	beq	r3,zero,85498 <memset+0x11c>
   85388:	31ffffc4 	addi	r7,r6,-1
   8538c:	30004026 	beq	r6,zero,85490 <memset+0x114>
   85390:	2813883a 	mov	r9,r5
   85394:	200d883a 	mov	r6,r4
   85398:	2007883a 	mov	r3,r4
   8539c:	00000406 	br	853b0 <memset+0x34>
   853a0:	3a3fffc4 	addi	r8,r7,-1
   853a4:	31800044 	addi	r6,r6,1
   853a8:	38003926 	beq	r7,zero,85490 <memset+0x114>
   853ac:	400f883a 	mov	r7,r8
   853b0:	18c00044 	addi	r3,r3,1
   853b4:	32400005 	stb	r9,0(r6)
   853b8:	1a0000cc 	andi	r8,r3,3
   853bc:	403ff81e 	bne	r8,zero,853a0 <rx_descriptor_end+0xfff85340>
   853c0:	010000c4 	movi	r4,3
   853c4:	21c02d2e 	bgeu	r4,r7,8547c <memset+0x100>
   853c8:	29003fcc 	andi	r4,r5,255
   853cc:	200c923a 	slli	r6,r4,8
   853d0:	3108b03a 	or	r4,r6,r4
   853d4:	200c943a 	slli	r6,r4,16
   853d8:	218cb03a 	or	r6,r4,r6
   853dc:	010003c4 	movi	r4,15
   853e0:	21c0182e 	bgeu	r4,r7,85444 <memset+0xc8>
   853e4:	3b3ffc04 	addi	r12,r7,-16
   853e8:	6018d13a 	srli	r12,r12,4
   853ec:	1a000104 	addi	r8,r3,4
   853f0:	1ac00204 	addi	r11,r3,8
   853f4:	6008913a 	slli	r4,r12,4
   853f8:	1a800304 	addi	r10,r3,12
   853fc:	1813883a 	mov	r9,r3
   85400:	21000504 	addi	r4,r4,20
   85404:	1909883a 	add	r4,r3,r4
   85408:	49800015 	stw	r6,0(r9)
   8540c:	41800015 	stw	r6,0(r8)
   85410:	59800015 	stw	r6,0(r11)
   85414:	51800015 	stw	r6,0(r10)
   85418:	42000404 	addi	r8,r8,16
   8541c:	4a400404 	addi	r9,r9,16
   85420:	5ac00404 	addi	r11,r11,16
   85424:	52800404 	addi	r10,r10,16
   85428:	413ff71e 	bne	r8,r4,85408 <rx_descriptor_end+0xfff853a8>
   8542c:	63000044 	addi	r12,r12,1
   85430:	6018913a 	slli	r12,r12,4
   85434:	39c003cc 	andi	r7,r7,15
   85438:	010000c4 	movi	r4,3
   8543c:	1b07883a 	add	r3,r3,r12
   85440:	21c00e2e 	bgeu	r4,r7,8547c <memset+0x100>
   85444:	1813883a 	mov	r9,r3
   85448:	3811883a 	mov	r8,r7
   8544c:	010000c4 	movi	r4,3
   85450:	49800015 	stw	r6,0(r9)
   85454:	423fff04 	addi	r8,r8,-4
   85458:	4a400104 	addi	r9,r9,4
   8545c:	223ffc36 	bltu	r4,r8,85450 <rx_descriptor_end+0xfff853f0>
   85460:	393fff04 	addi	r4,r7,-4
   85464:	2008d0ba 	srli	r4,r4,2
   85468:	39c000cc 	andi	r7,r7,3
   8546c:	21000044 	addi	r4,r4,1
   85470:	2109883a 	add	r4,r4,r4
   85474:	2109883a 	add	r4,r4,r4
   85478:	1907883a 	add	r3,r3,r4
   8547c:	38000526 	beq	r7,zero,85494 <memset+0x118>
   85480:	19cf883a 	add	r7,r3,r7
   85484:	19400005 	stb	r5,0(r3)
   85488:	18c00044 	addi	r3,r3,1
   8548c:	38fffd1e 	bne	r7,r3,85484 <rx_descriptor_end+0xfff85424>
   85490:	f800283a 	ret
   85494:	f800283a 	ret
   85498:	2007883a 	mov	r3,r4
   8549c:	300f883a 	mov	r7,r6
   854a0:	003fc706 	br	853c0 <rx_descriptor_end+0xfff85360>

000854a4 <_sbrk_r>:
   854a4:	defffd04 	addi	sp,sp,-12
   854a8:	dc000015 	stw	r16,0(sp)
   854ac:	04000274 	movhi	r16,9
   854b0:	dc400115 	stw	r17,4(sp)
   854b4:	8428b204 	addi	r16,r16,-23864
   854b8:	2023883a 	mov	r17,r4
   854bc:	2809883a 	mov	r4,r5
   854c0:	dfc00215 	stw	ra,8(sp)
   854c4:	80000015 	stw	zero,0(r16)
   854c8:	0085dec0 	call	85dec <sbrk>
   854cc:	00ffffc4 	movi	r3,-1
   854d0:	10c00526 	beq	r2,r3,854e8 <_sbrk_r+0x44>
   854d4:	dfc00217 	ldw	ra,8(sp)
   854d8:	dc400117 	ldw	r17,4(sp)
   854dc:	dc000017 	ldw	r16,0(sp)
   854e0:	dec00304 	addi	sp,sp,12
   854e4:	f800283a 	ret
   854e8:	80c00017 	ldw	r3,0(r16)
   854ec:	183ff926 	beq	r3,zero,854d4 <rx_descriptor_end+0xfff85474>
   854f0:	88c00015 	stw	r3,0(r17)
   854f4:	003ff706 	br	854d4 <rx_descriptor_end+0xfff85474>

000854f8 <__sread>:
   854f8:	defffe04 	addi	sp,sp,-8
   854fc:	dc000015 	stw	r16,0(sp)
   85500:	2821883a 	mov	r16,r5
   85504:	2940038f 	ldh	r5,14(r5)
   85508:	dfc00115 	stw	ra,4(sp)
   8550c:	00858fc0 	call	858fc <_read_r>
   85510:	10000716 	blt	r2,zero,85530 <__sread+0x38>
   85514:	80c01417 	ldw	r3,80(r16)
   85518:	1887883a 	add	r3,r3,r2
   8551c:	80c01415 	stw	r3,80(r16)
   85520:	dfc00117 	ldw	ra,4(sp)
   85524:	dc000017 	ldw	r16,0(sp)
   85528:	dec00204 	addi	sp,sp,8
   8552c:	f800283a 	ret
   85530:	80c0030b 	ldhu	r3,12(r16)
   85534:	18fbffcc 	andi	r3,r3,61439
   85538:	80c0030d 	sth	r3,12(r16)
   8553c:	dfc00117 	ldw	ra,4(sp)
   85540:	dc000017 	ldw	r16,0(sp)
   85544:	dec00204 	addi	sp,sp,8
   85548:	f800283a 	ret

0008554c <__seofread>:
   8554c:	0005883a 	mov	r2,zero
   85550:	f800283a 	ret

00085554 <__swrite>:
   85554:	2880030b 	ldhu	r2,12(r5)
   85558:	defffb04 	addi	sp,sp,-20
   8555c:	dcc00315 	stw	r19,12(sp)
   85560:	dc800215 	stw	r18,8(sp)
   85564:	dc400115 	stw	r17,4(sp)
   85568:	dc000015 	stw	r16,0(sp)
   8556c:	dfc00415 	stw	ra,16(sp)
   85570:	10c0400c 	andi	r3,r2,256
   85574:	2821883a 	mov	r16,r5
   85578:	2023883a 	mov	r17,r4
   8557c:	3025883a 	mov	r18,r6
   85580:	3827883a 	mov	r19,r7
   85584:	18000526 	beq	r3,zero,8559c <__swrite+0x48>
   85588:	2940038f 	ldh	r5,14(r5)
   8558c:	01c00084 	movi	r7,2
   85590:	000d883a 	mov	r6,zero
   85594:	008589c0 	call	8589c <_lseek_r>
   85598:	8080030b 	ldhu	r2,12(r16)
   8559c:	8140038f 	ldh	r5,14(r16)
   855a0:	10bbffcc 	andi	r2,r2,61439
   855a4:	980f883a 	mov	r7,r19
   855a8:	900d883a 	mov	r6,r18
   855ac:	8809883a 	mov	r4,r17
   855b0:	8080030d 	sth	r2,12(r16)
   855b4:	dfc00417 	ldw	ra,16(sp)
   855b8:	dcc00317 	ldw	r19,12(sp)
   855bc:	dc800217 	ldw	r18,8(sp)
   855c0:	dc400117 	ldw	r17,4(sp)
   855c4:	dc000017 	ldw	r16,0(sp)
   855c8:	dec00504 	addi	sp,sp,20
   855cc:	00856341 	jmpi	85634 <_write_r>

000855d0 <__sseek>:
   855d0:	defffe04 	addi	sp,sp,-8
   855d4:	dc000015 	stw	r16,0(sp)
   855d8:	2821883a 	mov	r16,r5
   855dc:	2940038f 	ldh	r5,14(r5)
   855e0:	dfc00115 	stw	ra,4(sp)
   855e4:	008589c0 	call	8589c <_lseek_r>
   855e8:	00ffffc4 	movi	r3,-1
   855ec:	10c00826 	beq	r2,r3,85610 <__sseek+0x40>
   855f0:	80c0030b 	ldhu	r3,12(r16)
   855f4:	80801415 	stw	r2,80(r16)
   855f8:	18c40014 	ori	r3,r3,4096
   855fc:	80c0030d 	sth	r3,12(r16)
   85600:	dfc00117 	ldw	ra,4(sp)
   85604:	dc000017 	ldw	r16,0(sp)
   85608:	dec00204 	addi	sp,sp,8
   8560c:	f800283a 	ret
   85610:	80c0030b 	ldhu	r3,12(r16)
   85614:	18fbffcc 	andi	r3,r3,61439
   85618:	80c0030d 	sth	r3,12(r16)
   8561c:	dfc00117 	ldw	ra,4(sp)
   85620:	dc000017 	ldw	r16,0(sp)
   85624:	dec00204 	addi	sp,sp,8
   85628:	f800283a 	ret

0008562c <__sclose>:
   8562c:	2940038f 	ldh	r5,14(r5)
   85630:	00856941 	jmpi	85694 <_close_r>

00085634 <_write_r>:
   85634:	defffd04 	addi	sp,sp,-12
   85638:	2805883a 	mov	r2,r5
   8563c:	dc000015 	stw	r16,0(sp)
   85640:	04000274 	movhi	r16,9
   85644:	dc400115 	stw	r17,4(sp)
   85648:	300b883a 	mov	r5,r6
   8564c:	8428b204 	addi	r16,r16,-23864
   85650:	2023883a 	mov	r17,r4
   85654:	380d883a 	mov	r6,r7
   85658:	1009883a 	mov	r4,r2
   8565c:	dfc00215 	stw	ra,8(sp)
   85660:	80000015 	stw	zero,0(r16)
   85664:	0085ed80 	call	85ed8 <write>
   85668:	00ffffc4 	movi	r3,-1
   8566c:	10c00526 	beq	r2,r3,85684 <_write_r+0x50>
   85670:	dfc00217 	ldw	ra,8(sp)
   85674:	dc400117 	ldw	r17,4(sp)
   85678:	dc000017 	ldw	r16,0(sp)
   8567c:	dec00304 	addi	sp,sp,12
   85680:	f800283a 	ret
   85684:	80c00017 	ldw	r3,0(r16)
   85688:	183ff926 	beq	r3,zero,85670 <rx_descriptor_end+0xfff85610>
   8568c:	88c00015 	stw	r3,0(r17)
   85690:	003ff706 	br	85670 <rx_descriptor_end+0xfff85610>

00085694 <_close_r>:
   85694:	defffd04 	addi	sp,sp,-12
   85698:	dc000015 	stw	r16,0(sp)
   8569c:	04000274 	movhi	r16,9
   856a0:	dc400115 	stw	r17,4(sp)
   856a4:	8428b204 	addi	r16,r16,-23864
   856a8:	2023883a 	mov	r17,r4
   856ac:	2809883a 	mov	r4,r5
   856b0:	dfc00215 	stw	ra,8(sp)
   856b4:	80000015 	stw	zero,0(r16)
   856b8:	00825040 	call	82504 <close>
   856bc:	00ffffc4 	movi	r3,-1
   856c0:	10c00526 	beq	r2,r3,856d8 <_close_r+0x44>
   856c4:	dfc00217 	ldw	ra,8(sp)
   856c8:	dc400117 	ldw	r17,4(sp)
   856cc:	dc000017 	ldw	r16,0(sp)
   856d0:	dec00304 	addi	sp,sp,12
   856d4:	f800283a 	ret
   856d8:	80c00017 	ldw	r3,0(r16)
   856dc:	183ff926 	beq	r3,zero,856c4 <rx_descriptor_end+0xfff85664>
   856e0:	88c00015 	stw	r3,0(r17)
   856e4:	003ff706 	br	856c4 <rx_descriptor_end+0xfff85664>

000856e8 <_fclose_r>:
   856e8:	28003926 	beq	r5,zero,857d0 <_fclose_r+0xe8>
   856ec:	defffc04 	addi	sp,sp,-16
   856f0:	dc400115 	stw	r17,4(sp)
   856f4:	dc000015 	stw	r16,0(sp)
   856f8:	dfc00315 	stw	ra,12(sp)
   856fc:	dc800215 	stw	r18,8(sp)
   85700:	2023883a 	mov	r17,r4
   85704:	2821883a 	mov	r16,r5
   85708:	20000226 	beq	r4,zero,85714 <_fclose_r+0x2c>
   8570c:	20800e17 	ldw	r2,56(r4)
   85710:	10002726 	beq	r2,zero,857b0 <_fclose_r+0xc8>
   85714:	8080030f 	ldh	r2,12(r16)
   85718:	1000071e 	bne	r2,zero,85738 <_fclose_r+0x50>
   8571c:	0005883a 	mov	r2,zero
   85720:	dfc00317 	ldw	ra,12(sp)
   85724:	dc800217 	ldw	r18,8(sp)
   85728:	dc400117 	ldw	r17,4(sp)
   8572c:	dc000017 	ldw	r16,0(sp)
   85730:	dec00404 	addi	sp,sp,16
   85734:	f800283a 	ret
   85738:	800b883a 	mov	r5,r16
   8573c:	8809883a 	mov	r4,r17
   85740:	0083db00 	call	83db0 <__sflush_r>
   85744:	1025883a 	mov	r18,r2
   85748:	80800b17 	ldw	r2,44(r16)
   8574c:	10000426 	beq	r2,zero,85760 <_fclose_r+0x78>
   85750:	81400717 	ldw	r5,28(r16)
   85754:	8809883a 	mov	r4,r17
   85758:	103ee83a 	callr	r2
   8575c:	10001616 	blt	r2,zero,857b8 <_fclose_r+0xd0>
   85760:	8080030b 	ldhu	r2,12(r16)
   85764:	1080200c 	andi	r2,r2,128
   85768:	1000151e 	bne	r2,zero,857c0 <_fclose_r+0xd8>
   8576c:	81400c17 	ldw	r5,48(r16)
   85770:	28000526 	beq	r5,zero,85788 <_fclose_r+0xa0>
   85774:	80801004 	addi	r2,r16,64
   85778:	28800226 	beq	r5,r2,85784 <_fclose_r+0x9c>
   8577c:	8809883a 	mov	r4,r17
   85780:	008451c0 	call	8451c <_free_r>
   85784:	80000c15 	stw	zero,48(r16)
   85788:	81401117 	ldw	r5,68(r16)
   8578c:	28000326 	beq	r5,zero,8579c <_fclose_r+0xb4>
   85790:	8809883a 	mov	r4,r17
   85794:	008451c0 	call	8451c <_free_r>
   85798:	80001115 	stw	zero,68(r16)
   8579c:	00843b80 	call	843b8 <__sfp_lock_acquire>
   857a0:	8000030d 	sth	zero,12(r16)
   857a4:	00843bc0 	call	843bc <__sfp_lock_release>
   857a8:	9005883a 	mov	r2,r18
   857ac:	003fdc06 	br	85720 <rx_descriptor_end+0xfff856c0>
   857b0:	00843a80 	call	843a8 <__sinit>
   857b4:	003fd706 	br	85714 <rx_descriptor_end+0xfff856b4>
   857b8:	04bfffc4 	movi	r18,-1
   857bc:	003fe806 	br	85760 <rx_descriptor_end+0xfff85700>
   857c0:	81400417 	ldw	r5,16(r16)
   857c4:	8809883a 	mov	r4,r17
   857c8:	008451c0 	call	8451c <_free_r>
   857cc:	003fe706 	br	8576c <rx_descriptor_end+0xfff8570c>
   857d0:	0005883a 	mov	r2,zero
   857d4:	f800283a 	ret

000857d8 <fclose>:
   857d8:	00800274 	movhi	r2,9
   857dc:	10a07304 	addi	r2,r2,-32308
   857e0:	200b883a 	mov	r5,r4
   857e4:	11000017 	ldw	r4,0(r2)
   857e8:	00856e81 	jmpi	856e8 <_fclose_r>

000857ec <_fstat_r>:
   857ec:	defffd04 	addi	sp,sp,-12
   857f0:	2805883a 	mov	r2,r5
   857f4:	dc000015 	stw	r16,0(sp)
   857f8:	04000274 	movhi	r16,9
   857fc:	dc400115 	stw	r17,4(sp)
   85800:	8428b204 	addi	r16,r16,-23864
   85804:	2023883a 	mov	r17,r4
   85808:	300b883a 	mov	r5,r6
   8580c:	1009883a 	mov	r4,r2
   85810:	dfc00215 	stw	ra,8(sp)
   85814:	80000015 	stw	zero,0(r16)
   85818:	00859cc0 	call	859cc <fstat>
   8581c:	00ffffc4 	movi	r3,-1
   85820:	10c00526 	beq	r2,r3,85838 <_fstat_r+0x4c>
   85824:	dfc00217 	ldw	ra,8(sp)
   85828:	dc400117 	ldw	r17,4(sp)
   8582c:	dc000017 	ldw	r16,0(sp)
   85830:	dec00304 	addi	sp,sp,12
   85834:	f800283a 	ret
   85838:	80c00017 	ldw	r3,0(r16)
   8583c:	183ff926 	beq	r3,zero,85824 <rx_descriptor_end+0xfff857c4>
   85840:	88c00015 	stw	r3,0(r17)
   85844:	003ff706 	br	85824 <rx_descriptor_end+0xfff857c4>

00085848 <_isatty_r>:
   85848:	defffd04 	addi	sp,sp,-12
   8584c:	dc000015 	stw	r16,0(sp)
   85850:	04000274 	movhi	r16,9
   85854:	dc400115 	stw	r17,4(sp)
   85858:	8428b204 	addi	r16,r16,-23864
   8585c:	2023883a 	mov	r17,r4
   85860:	2809883a 	mov	r4,r5
   85864:	dfc00215 	stw	ra,8(sp)
   85868:	80000015 	stw	zero,0(r16)
   8586c:	0085ab80 	call	85ab8 <isatty>
   85870:	00ffffc4 	movi	r3,-1
   85874:	10c00526 	beq	r2,r3,8588c <_isatty_r+0x44>
   85878:	dfc00217 	ldw	ra,8(sp)
   8587c:	dc400117 	ldw	r17,4(sp)
   85880:	dc000017 	ldw	r16,0(sp)
   85884:	dec00304 	addi	sp,sp,12
   85888:	f800283a 	ret
   8588c:	80c00017 	ldw	r3,0(r16)
   85890:	183ff926 	beq	r3,zero,85878 <rx_descriptor_end+0xfff85818>
   85894:	88c00015 	stw	r3,0(r17)
   85898:	003ff706 	br	85878 <rx_descriptor_end+0xfff85818>

0008589c <_lseek_r>:
   8589c:	defffd04 	addi	sp,sp,-12
   858a0:	2805883a 	mov	r2,r5
   858a4:	dc000015 	stw	r16,0(sp)
   858a8:	04000274 	movhi	r16,9
   858ac:	dc400115 	stw	r17,4(sp)
   858b0:	300b883a 	mov	r5,r6
   858b4:	8428b204 	addi	r16,r16,-23864
   858b8:	2023883a 	mov	r17,r4
   858bc:	380d883a 	mov	r6,r7
   858c0:	1009883a 	mov	r4,r2
   858c4:	dfc00215 	stw	ra,8(sp)
   858c8:	80000015 	stw	zero,0(r16)
   858cc:	0085b980 	call	85b98 <lseek>
   858d0:	00ffffc4 	movi	r3,-1
   858d4:	10c00526 	beq	r2,r3,858ec <_lseek_r+0x50>
   858d8:	dfc00217 	ldw	ra,8(sp)
   858dc:	dc400117 	ldw	r17,4(sp)
   858e0:	dc000017 	ldw	r16,0(sp)
   858e4:	dec00304 	addi	sp,sp,12
   858e8:	f800283a 	ret
   858ec:	80c00017 	ldw	r3,0(r16)
   858f0:	183ff926 	beq	r3,zero,858d8 <rx_descriptor_end+0xfff85878>
   858f4:	88c00015 	stw	r3,0(r17)
   858f8:	003ff706 	br	858d8 <rx_descriptor_end+0xfff85878>

000858fc <_read_r>:
   858fc:	defffd04 	addi	sp,sp,-12
   85900:	2805883a 	mov	r2,r5
   85904:	dc000015 	stw	r16,0(sp)
   85908:	04000274 	movhi	r16,9
   8590c:	dc400115 	stw	r17,4(sp)
   85910:	300b883a 	mov	r5,r6
   85914:	8428b204 	addi	r16,r16,-23864
   85918:	2023883a 	mov	r17,r4
   8591c:	380d883a 	mov	r6,r7
   85920:	1009883a 	mov	r4,r2
   85924:	dfc00215 	stw	ra,8(sp)
   85928:	80000015 	stw	zero,0(r16)
   8592c:	0085cf00 	call	85cf0 <read>
   85930:	00ffffc4 	movi	r3,-1
   85934:	10c00526 	beq	r2,r3,8594c <_read_r+0x50>
   85938:	dfc00217 	ldw	ra,8(sp)
   8593c:	dc400117 	ldw	r17,4(sp)
   85940:	dc000017 	ldw	r16,0(sp)
   85944:	dec00304 	addi	sp,sp,12
   85948:	f800283a 	ret
   8594c:	80c00017 	ldw	r3,0(r16)
   85950:	183ff926 	beq	r3,zero,85938 <rx_descriptor_end+0xfff858d8>
   85954:	88c00015 	stw	r3,0(r17)
   85958:	003ff706 	br	85938 <rx_descriptor_end+0xfff858d8>

0008595c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8595c:	defffd04 	addi	sp,sp,-12
   85960:	df000215 	stw	fp,8(sp)
   85964:	df000204 	addi	fp,sp,8
   85968:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8596c:	0001883a 	nop
   85970:	e0bfff17 	ldw	r2,-4(fp)
   85974:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   85978:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8597c:	10000226 	beq	r2,zero,85988 <_exit+0x2c>
    ALT_SIM_FAIL();
   85980:	002af070 	cmpltui	zero,zero,43969
   85984:	00000106 	br	8598c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   85988:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8598c:	003fff06 	br	8598c <rx_descriptor_end+0xfff8592c>

00085990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85990:	defffe04 	addi	sp,sp,-8
   85994:	dfc00115 	stw	ra,4(sp)
   85998:	df000015 	stw	fp,0(sp)
   8599c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   859a0:	d0a00717 	ldw	r2,-32740(gp)
   859a4:	10000326 	beq	r2,zero,859b4 <alt_get_errno+0x24>
   859a8:	d0a00717 	ldw	r2,-32740(gp)
   859ac:	103ee83a 	callr	r2
   859b0:	00000106 	br	859b8 <alt_get_errno+0x28>
   859b4:	d0a84b04 	addi	r2,gp,-24276
}
   859b8:	e037883a 	mov	sp,fp
   859bc:	dfc00117 	ldw	ra,4(sp)
   859c0:	df000017 	ldw	fp,0(sp)
   859c4:	dec00204 	addi	sp,sp,8
   859c8:	f800283a 	ret

000859cc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   859cc:	defffb04 	addi	sp,sp,-20
   859d0:	dfc00415 	stw	ra,16(sp)
   859d4:	df000315 	stw	fp,12(sp)
   859d8:	df000304 	addi	fp,sp,12
   859dc:	e13ffe15 	stw	r4,-8(fp)
   859e0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   859e4:	e0bffe17 	ldw	r2,-8(fp)
   859e8:	10000616 	blt	r2,zero,85a04 <fstat+0x38>
   859ec:	e0bffe17 	ldw	r2,-8(fp)
   859f0:	10c00324 	muli	r3,r2,12
   859f4:	00800234 	movhi	r2,8
   859f8:	109dfc04 	addi	r2,r2,30704
   859fc:	1885883a 	add	r2,r3,r2
   85a00:	00000106 	br	85a08 <fstat+0x3c>
   85a04:	0005883a 	mov	r2,zero
   85a08:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   85a0c:	e0bffd17 	ldw	r2,-12(fp)
   85a10:	10001026 	beq	r2,zero,85a54 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   85a14:	e0bffd17 	ldw	r2,-12(fp)
   85a18:	10800017 	ldw	r2,0(r2)
   85a1c:	10800817 	ldw	r2,32(r2)
   85a20:	10000726 	beq	r2,zero,85a40 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   85a24:	e0bffd17 	ldw	r2,-12(fp)
   85a28:	10800017 	ldw	r2,0(r2)
   85a2c:	10800817 	ldw	r2,32(r2)
   85a30:	e17fff17 	ldw	r5,-4(fp)
   85a34:	e13ffd17 	ldw	r4,-12(fp)
   85a38:	103ee83a 	callr	r2
   85a3c:	00000a06 	br	85a68 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   85a40:	e0bfff17 	ldw	r2,-4(fp)
   85a44:	00c80004 	movi	r3,8192
   85a48:	10c00115 	stw	r3,4(r2)
      return 0;
   85a4c:	0005883a 	mov	r2,zero
   85a50:	00000506 	br	85a68 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   85a54:	00859900 	call	85990 <alt_get_errno>
   85a58:	1007883a 	mov	r3,r2
   85a5c:	00801444 	movi	r2,81
   85a60:	18800015 	stw	r2,0(r3)
    return -1;
   85a64:	00bfffc4 	movi	r2,-1
  }
}
   85a68:	e037883a 	mov	sp,fp
   85a6c:	dfc00117 	ldw	ra,4(sp)
   85a70:	df000017 	ldw	fp,0(sp)
   85a74:	dec00204 	addi	sp,sp,8
   85a78:	f800283a 	ret

00085a7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85a7c:	defffe04 	addi	sp,sp,-8
   85a80:	dfc00115 	stw	ra,4(sp)
   85a84:	df000015 	stw	fp,0(sp)
   85a88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85a8c:	d0a00717 	ldw	r2,-32740(gp)
   85a90:	10000326 	beq	r2,zero,85aa0 <alt_get_errno+0x24>
   85a94:	d0a00717 	ldw	r2,-32740(gp)
   85a98:	103ee83a 	callr	r2
   85a9c:	00000106 	br	85aa4 <alt_get_errno+0x28>
   85aa0:	d0a84b04 	addi	r2,gp,-24276
}
   85aa4:	e037883a 	mov	sp,fp
   85aa8:	dfc00117 	ldw	ra,4(sp)
   85aac:	df000017 	ldw	fp,0(sp)
   85ab0:	dec00204 	addi	sp,sp,8
   85ab4:	f800283a 	ret

00085ab8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   85ab8:	deffed04 	addi	sp,sp,-76
   85abc:	dfc01215 	stw	ra,72(sp)
   85ac0:	df001115 	stw	fp,68(sp)
   85ac4:	df001104 	addi	fp,sp,68
   85ac8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85acc:	e0bfff17 	ldw	r2,-4(fp)
   85ad0:	10000616 	blt	r2,zero,85aec <isatty+0x34>
   85ad4:	e0bfff17 	ldw	r2,-4(fp)
   85ad8:	10c00324 	muli	r3,r2,12
   85adc:	00800234 	movhi	r2,8
   85ae0:	109dfc04 	addi	r2,r2,30704
   85ae4:	1885883a 	add	r2,r3,r2
   85ae8:	00000106 	br	85af0 <isatty+0x38>
   85aec:	0005883a 	mov	r2,zero
   85af0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   85af4:	e0bfef17 	ldw	r2,-68(fp)
   85af8:	10000e26 	beq	r2,zero,85b34 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   85afc:	e0bfef17 	ldw	r2,-68(fp)
   85b00:	10800017 	ldw	r2,0(r2)
   85b04:	10800817 	ldw	r2,32(r2)
   85b08:	1000021e 	bne	r2,zero,85b14 <isatty+0x5c>
    {
      return 1;
   85b0c:	00800044 	movi	r2,1
   85b10:	00000d06 	br	85b48 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   85b14:	e0bff004 	addi	r2,fp,-64
   85b18:	100b883a 	mov	r5,r2
   85b1c:	e13fff17 	ldw	r4,-4(fp)
   85b20:	00859cc0 	call	859cc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   85b24:	e0bff117 	ldw	r2,-60(fp)
   85b28:	10880020 	cmpeqi	r2,r2,8192
   85b2c:	10803fcc 	andi	r2,r2,255
   85b30:	00000506 	br	85b48 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   85b34:	0085a7c0 	call	85a7c <alt_get_errno>
   85b38:	1007883a 	mov	r3,r2
   85b3c:	00801444 	movi	r2,81
   85b40:	18800015 	stw	r2,0(r3)
    return 0;
   85b44:	0005883a 	mov	r2,zero
  }
}
   85b48:	e037883a 	mov	sp,fp
   85b4c:	dfc00117 	ldw	ra,4(sp)
   85b50:	df000017 	ldw	fp,0(sp)
   85b54:	dec00204 	addi	sp,sp,8
   85b58:	f800283a 	ret

00085b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85b5c:	defffe04 	addi	sp,sp,-8
   85b60:	dfc00115 	stw	ra,4(sp)
   85b64:	df000015 	stw	fp,0(sp)
   85b68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85b6c:	d0a00717 	ldw	r2,-32740(gp)
   85b70:	10000326 	beq	r2,zero,85b80 <alt_get_errno+0x24>
   85b74:	d0a00717 	ldw	r2,-32740(gp)
   85b78:	103ee83a 	callr	r2
   85b7c:	00000106 	br	85b84 <alt_get_errno+0x28>
   85b80:	d0a84b04 	addi	r2,gp,-24276
}
   85b84:	e037883a 	mov	sp,fp
   85b88:	dfc00117 	ldw	ra,4(sp)
   85b8c:	df000017 	ldw	fp,0(sp)
   85b90:	dec00204 	addi	sp,sp,8
   85b94:	f800283a 	ret

00085b98 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   85b98:	defff904 	addi	sp,sp,-28
   85b9c:	dfc00615 	stw	ra,24(sp)
   85ba0:	df000515 	stw	fp,20(sp)
   85ba4:	df000504 	addi	fp,sp,20
   85ba8:	e13ffd15 	stw	r4,-12(fp)
   85bac:	e17ffe15 	stw	r5,-8(fp)
   85bb0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   85bb4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85bb8:	e0bffd17 	ldw	r2,-12(fp)
   85bbc:	10000616 	blt	r2,zero,85bd8 <lseek+0x40>
   85bc0:	e0bffd17 	ldw	r2,-12(fp)
   85bc4:	10c00324 	muli	r3,r2,12
   85bc8:	00800234 	movhi	r2,8
   85bcc:	109dfc04 	addi	r2,r2,30704
   85bd0:	1885883a 	add	r2,r3,r2
   85bd4:	00000106 	br	85bdc <lseek+0x44>
   85bd8:	0005883a 	mov	r2,zero
   85bdc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   85be0:	e0bffc17 	ldw	r2,-16(fp)
   85be4:	10001026 	beq	r2,zero,85c28 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   85be8:	e0bffc17 	ldw	r2,-16(fp)
   85bec:	10800017 	ldw	r2,0(r2)
   85bf0:	10800717 	ldw	r2,28(r2)
   85bf4:	10000926 	beq	r2,zero,85c1c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   85bf8:	e0bffc17 	ldw	r2,-16(fp)
   85bfc:	10800017 	ldw	r2,0(r2)
   85c00:	10800717 	ldw	r2,28(r2)
   85c04:	e1bfff17 	ldw	r6,-4(fp)
   85c08:	e17ffe17 	ldw	r5,-8(fp)
   85c0c:	e13ffc17 	ldw	r4,-16(fp)
   85c10:	103ee83a 	callr	r2
   85c14:	e0bffb15 	stw	r2,-20(fp)
   85c18:	00000506 	br	85c30 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   85c1c:	00bfde84 	movi	r2,-134
   85c20:	e0bffb15 	stw	r2,-20(fp)
   85c24:	00000206 	br	85c30 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   85c28:	00bfebc4 	movi	r2,-81
   85c2c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   85c30:	e0bffb17 	ldw	r2,-20(fp)
   85c34:	1000070e 	bge	r2,zero,85c54 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   85c38:	0085b5c0 	call	85b5c <alt_get_errno>
   85c3c:	1007883a 	mov	r3,r2
   85c40:	e0bffb17 	ldw	r2,-20(fp)
   85c44:	0085c83a 	sub	r2,zero,r2
   85c48:	18800015 	stw	r2,0(r3)
    rc = -1;
   85c4c:	00bfffc4 	movi	r2,-1
   85c50:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   85c54:	e0bffb17 	ldw	r2,-20(fp)
}
   85c58:	e037883a 	mov	sp,fp
   85c5c:	dfc00117 	ldw	ra,4(sp)
   85c60:	df000017 	ldw	fp,0(sp)
   85c64:	dec00204 	addi	sp,sp,8
   85c68:	f800283a 	ret

00085c6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   85c6c:	defffe04 	addi	sp,sp,-8
   85c70:	df000115 	stw	fp,4(sp)
   85c74:	df000104 	addi	fp,sp,4
   85c78:	e13fff15 	stw	r4,-4(fp)
}
   85c7c:	0001883a 	nop
   85c80:	e037883a 	mov	sp,fp
   85c84:	df000017 	ldw	fp,0(sp)
   85c88:	dec00104 	addi	sp,sp,4
   85c8c:	f800283a 	ret

00085c90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   85c90:	defffe04 	addi	sp,sp,-8
   85c94:	df000115 	stw	fp,4(sp)
   85c98:	df000104 	addi	fp,sp,4
   85c9c:	e13fff15 	stw	r4,-4(fp)
}
   85ca0:	0001883a 	nop
   85ca4:	e037883a 	mov	sp,fp
   85ca8:	df000017 	ldw	fp,0(sp)
   85cac:	dec00104 	addi	sp,sp,4
   85cb0:	f800283a 	ret

00085cb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85cb4:	defffe04 	addi	sp,sp,-8
   85cb8:	dfc00115 	stw	ra,4(sp)
   85cbc:	df000015 	stw	fp,0(sp)
   85cc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85cc4:	d0a00717 	ldw	r2,-32740(gp)
   85cc8:	10000326 	beq	r2,zero,85cd8 <alt_get_errno+0x24>
   85ccc:	d0a00717 	ldw	r2,-32740(gp)
   85cd0:	103ee83a 	callr	r2
   85cd4:	00000106 	br	85cdc <alt_get_errno+0x28>
   85cd8:	d0a84b04 	addi	r2,gp,-24276
}
   85cdc:	e037883a 	mov	sp,fp
   85ce0:	dfc00117 	ldw	ra,4(sp)
   85ce4:	df000017 	ldw	fp,0(sp)
   85ce8:	dec00204 	addi	sp,sp,8
   85cec:	f800283a 	ret

00085cf0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   85cf0:	defff904 	addi	sp,sp,-28
   85cf4:	dfc00615 	stw	ra,24(sp)
   85cf8:	df000515 	stw	fp,20(sp)
   85cfc:	df000504 	addi	fp,sp,20
   85d00:	e13ffd15 	stw	r4,-12(fp)
   85d04:	e17ffe15 	stw	r5,-8(fp)
   85d08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85d0c:	e0bffd17 	ldw	r2,-12(fp)
   85d10:	10000616 	blt	r2,zero,85d2c <read+0x3c>
   85d14:	e0bffd17 	ldw	r2,-12(fp)
   85d18:	10c00324 	muli	r3,r2,12
   85d1c:	00800234 	movhi	r2,8
   85d20:	109dfc04 	addi	r2,r2,30704
   85d24:	1885883a 	add	r2,r3,r2
   85d28:	00000106 	br	85d30 <read+0x40>
   85d2c:	0005883a 	mov	r2,zero
   85d30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85d34:	e0bffb17 	ldw	r2,-20(fp)
   85d38:	10002226 	beq	r2,zero,85dc4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85d3c:	e0bffb17 	ldw	r2,-20(fp)
   85d40:	10800217 	ldw	r2,8(r2)
   85d44:	108000cc 	andi	r2,r2,3
   85d48:	10800060 	cmpeqi	r2,r2,1
   85d4c:	1000181e 	bne	r2,zero,85db0 <read+0xc0>
        (fd->dev->read))
   85d50:	e0bffb17 	ldw	r2,-20(fp)
   85d54:	10800017 	ldw	r2,0(r2)
   85d58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85d5c:	10001426 	beq	r2,zero,85db0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   85d60:	e0bffb17 	ldw	r2,-20(fp)
   85d64:	10800017 	ldw	r2,0(r2)
   85d68:	10800517 	ldw	r2,20(r2)
   85d6c:	e0ffff17 	ldw	r3,-4(fp)
   85d70:	180d883a 	mov	r6,r3
   85d74:	e17ffe17 	ldw	r5,-8(fp)
   85d78:	e13ffb17 	ldw	r4,-20(fp)
   85d7c:	103ee83a 	callr	r2
   85d80:	e0bffc15 	stw	r2,-16(fp)
   85d84:	e0bffc17 	ldw	r2,-16(fp)
   85d88:	1000070e 	bge	r2,zero,85da8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   85d8c:	0085cb40 	call	85cb4 <alt_get_errno>
   85d90:	1007883a 	mov	r3,r2
   85d94:	e0bffc17 	ldw	r2,-16(fp)
   85d98:	0085c83a 	sub	r2,zero,r2
   85d9c:	18800015 	stw	r2,0(r3)
          return -1;
   85da0:	00bfffc4 	movi	r2,-1
   85da4:	00000c06 	br	85dd8 <read+0xe8>
        }
        return rval;
   85da8:	e0bffc17 	ldw	r2,-16(fp)
   85dac:	00000a06 	br	85dd8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   85db0:	0085cb40 	call	85cb4 <alt_get_errno>
   85db4:	1007883a 	mov	r3,r2
   85db8:	00800344 	movi	r2,13
   85dbc:	18800015 	stw	r2,0(r3)
   85dc0:	00000406 	br	85dd4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   85dc4:	0085cb40 	call	85cb4 <alt_get_errno>
   85dc8:	1007883a 	mov	r3,r2
   85dcc:	00801444 	movi	r2,81
   85dd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85dd4:	00bfffc4 	movi	r2,-1
}
   85dd8:	e037883a 	mov	sp,fp
   85ddc:	dfc00117 	ldw	ra,4(sp)
   85de0:	df000017 	ldw	fp,0(sp)
   85de4:	dec00204 	addi	sp,sp,8
   85de8:	f800283a 	ret

00085dec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   85dec:	defff904 	addi	sp,sp,-28
   85df0:	df000615 	stw	fp,24(sp)
   85df4:	df000604 	addi	fp,sp,24
   85df8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85dfc:	0005303a 	rdctl	r2,status
   85e00:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85e04:	e0fffe17 	ldw	r3,-8(fp)
   85e08:	00bfff84 	movi	r2,-2
   85e0c:	1884703a 	and	r2,r3,r2
   85e10:	1001703a 	wrctl	status,r2
  
  return context;
   85e14:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   85e18:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   85e1c:	d0a00f17 	ldw	r2,-32708(gp)
   85e20:	10c000c4 	addi	r3,r2,3
   85e24:	00bfff04 	movi	r2,-4
   85e28:	1884703a 	and	r2,r3,r2
   85e2c:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   85e30:	d0e00f17 	ldw	r3,-32708(gp)
   85e34:	e0bfff17 	ldw	r2,-4(fp)
   85e38:	1887883a 	add	r3,r3,r2
   85e3c:	00800374 	movhi	r2,13
   85e40:	10ac0004 	addi	r2,r2,-20480
   85e44:	10c0062e 	bgeu	r2,r3,85e60 <sbrk+0x74>
   85e48:	e0bffb17 	ldw	r2,-20(fp)
   85e4c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85e50:	e0bffa17 	ldw	r2,-24(fp)
   85e54:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   85e58:	00bfffc4 	movi	r2,-1
   85e5c:	00000b06 	br	85e8c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   85e60:	d0a00f17 	ldw	r2,-32708(gp)
   85e64:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   85e68:	d0e00f17 	ldw	r3,-32708(gp)
   85e6c:	e0bfff17 	ldw	r2,-4(fp)
   85e70:	1885883a 	add	r2,r3,r2
   85e74:	d0a00f15 	stw	r2,-32708(gp)
   85e78:	e0bffb17 	ldw	r2,-20(fp)
   85e7c:	e0bffc15 	stw	r2,-16(fp)
   85e80:	e0bffc17 	ldw	r2,-16(fp)
   85e84:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   85e88:	e0bffd17 	ldw	r2,-12(fp)
} 
   85e8c:	e037883a 	mov	sp,fp
   85e90:	df000017 	ldw	fp,0(sp)
   85e94:	dec00104 	addi	sp,sp,4
   85e98:	f800283a 	ret

00085e9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85e9c:	defffe04 	addi	sp,sp,-8
   85ea0:	dfc00115 	stw	ra,4(sp)
   85ea4:	df000015 	stw	fp,0(sp)
   85ea8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85eac:	d0a00717 	ldw	r2,-32740(gp)
   85eb0:	10000326 	beq	r2,zero,85ec0 <alt_get_errno+0x24>
   85eb4:	d0a00717 	ldw	r2,-32740(gp)
   85eb8:	103ee83a 	callr	r2
   85ebc:	00000106 	br	85ec4 <alt_get_errno+0x28>
   85ec0:	d0a84b04 	addi	r2,gp,-24276
}
   85ec4:	e037883a 	mov	sp,fp
   85ec8:	dfc00117 	ldw	ra,4(sp)
   85ecc:	df000017 	ldw	fp,0(sp)
   85ed0:	dec00204 	addi	sp,sp,8
   85ed4:	f800283a 	ret

00085ed8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   85ed8:	defff904 	addi	sp,sp,-28
   85edc:	dfc00615 	stw	ra,24(sp)
   85ee0:	df000515 	stw	fp,20(sp)
   85ee4:	df000504 	addi	fp,sp,20
   85ee8:	e13ffd15 	stw	r4,-12(fp)
   85eec:	e17ffe15 	stw	r5,-8(fp)
   85ef0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85ef4:	e0bffd17 	ldw	r2,-12(fp)
   85ef8:	10000616 	blt	r2,zero,85f14 <write+0x3c>
   85efc:	e0bffd17 	ldw	r2,-12(fp)
   85f00:	10c00324 	muli	r3,r2,12
   85f04:	00800234 	movhi	r2,8
   85f08:	109dfc04 	addi	r2,r2,30704
   85f0c:	1885883a 	add	r2,r3,r2
   85f10:	00000106 	br	85f18 <write+0x40>
   85f14:	0005883a 	mov	r2,zero
   85f18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85f1c:	e0bffb17 	ldw	r2,-20(fp)
   85f20:	10002126 	beq	r2,zero,85fa8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   85f24:	e0bffb17 	ldw	r2,-20(fp)
   85f28:	10800217 	ldw	r2,8(r2)
   85f2c:	108000cc 	andi	r2,r2,3
   85f30:	10001826 	beq	r2,zero,85f94 <write+0xbc>
   85f34:	e0bffb17 	ldw	r2,-20(fp)
   85f38:	10800017 	ldw	r2,0(r2)
   85f3c:	10800617 	ldw	r2,24(r2)
   85f40:	10001426 	beq	r2,zero,85f94 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   85f44:	e0bffb17 	ldw	r2,-20(fp)
   85f48:	10800017 	ldw	r2,0(r2)
   85f4c:	10800617 	ldw	r2,24(r2)
   85f50:	e0ffff17 	ldw	r3,-4(fp)
   85f54:	180d883a 	mov	r6,r3
   85f58:	e17ffe17 	ldw	r5,-8(fp)
   85f5c:	e13ffb17 	ldw	r4,-20(fp)
   85f60:	103ee83a 	callr	r2
   85f64:	e0bffc15 	stw	r2,-16(fp)
   85f68:	e0bffc17 	ldw	r2,-16(fp)
   85f6c:	1000070e 	bge	r2,zero,85f8c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   85f70:	0085e9c0 	call	85e9c <alt_get_errno>
   85f74:	1007883a 	mov	r3,r2
   85f78:	e0bffc17 	ldw	r2,-16(fp)
   85f7c:	0085c83a 	sub	r2,zero,r2
   85f80:	18800015 	stw	r2,0(r3)
        return -1;
   85f84:	00bfffc4 	movi	r2,-1
   85f88:	00000c06 	br	85fbc <write+0xe4>
      }
      return rval;
   85f8c:	e0bffc17 	ldw	r2,-16(fp)
   85f90:	00000a06 	br	85fbc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   85f94:	0085e9c0 	call	85e9c <alt_get_errno>
   85f98:	1007883a 	mov	r3,r2
   85f9c:	00800344 	movi	r2,13
   85fa0:	18800015 	stw	r2,0(r3)
   85fa4:	00000406 	br	85fb8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   85fa8:	0085e9c0 	call	85e9c <alt_get_errno>
   85fac:	1007883a 	mov	r3,r2
   85fb0:	00801444 	movi	r2,81
   85fb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85fb8:	00bfffc4 	movi	r2,-1
}
   85fbc:	e037883a 	mov	sp,fp
   85fc0:	dfc00117 	ldw	ra,4(sp)
   85fc4:	df000017 	ldw	fp,0(sp)
   85fc8:	dec00204 	addi	sp,sp,8
   85fcc:	f800283a 	ret
